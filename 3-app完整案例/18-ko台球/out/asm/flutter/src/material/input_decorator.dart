// lib: , url: package:flutter/src/material/input_decorator.dart

// class id: 1049255, size: 0x8
class :: {
}

// class id: 2070, size: 0x64, field offset: 0x60
//   transformed mixin,
abstract class __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin extends RenderBox
     with SlottedContainerRenderObjectMixin<X0, X1 bound RenderObject> {

  _ childForSlot(/* No info */) {
    // ** addr: 0x57b8b4, size: 0x60
    // 0x57b8b4: EnterFrame
    //     0x57b8b4: stp             fp, lr, [SP, #-0x10]!
    //     0x57b8b8: mov             fp, SP
    // 0x57b8bc: AllocStack(0x18)
    //     0x57b8bc: sub             SP, SP, #0x18
    // 0x57b8c0: CheckStackOverflow
    //     0x57b8c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b8c4: cmp             SP, x16
    //     0x57b8c8: b.ls            #0x57b90c
    // 0x57b8cc: ldr             x0, [fp, #0x18]
    // 0x57b8d0: LoadField: r1 = r0->field_5f
    //     0x57b8d0: ldur            w1, [x0, #0x5f]
    // 0x57b8d4: DecompressPointer r1
    //     0x57b8d4: add             x1, x1, HEAP, lsl #32
    // 0x57b8d8: stur            x1, [fp, #-8]
    // 0x57b8dc: ldr             x16, [fp, #0x10]
    // 0x57b8e0: stp             x16, x1, [SP]
    // 0x57b8e4: r0 = _getValueOrData()
    //     0x57b8e4: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x57b8e8: ldur            x1, [fp, #-8]
    // 0x57b8ec: LoadField: r2 = r1->field_f
    //     0x57b8ec: ldur            w2, [x1, #0xf]
    // 0x57b8f0: DecompressPointer r2
    //     0x57b8f0: add             x2, x2, HEAP, lsl #32
    // 0x57b8f4: cmp             w2, w0
    // 0x57b8f8: b.ne            #0x57b900
    // 0x57b8fc: r0 = Null
    //     0x57b8fc: mov             x0, NULL
    // 0x57b900: LeaveFrame
    //     0x57b900: mov             SP, fp
    //     0x57b904: ldp             fp, lr, [SP], #0x10
    // 0x57b908: ret
    //     0x57b908: ret             
    // 0x57b90c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b90c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b910: b               #0x57b8cc
  }
  _ visitChildren(/* No info */) {
    // ** addr: 0x7c8034, size: 0x110
    // 0x7c8034: EnterFrame
    //     0x7c8034: stp             fp, lr, [SP, #-0x10]!
    //     0x7c8038: mov             fp, SP
    // 0x7c803c: AllocStack(0x28)
    //     0x7c803c: sub             SP, SP, #0x28
    // 0x7c8040: CheckStackOverflow
    //     0x7c8040: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7c8044: cmp             SP, x16
    //     0x7c8048: b.ls            #0x7c8130
    // 0x7c804c: ldr             x16, [fp, #0x18]
    // 0x7c8050: str             x16, [SP]
    // 0x7c8054: r0 = children()
    //     0x7c8054: bl              #0x59fb78  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x7c8058: mov             x2, x0
    // 0x7c805c: stur            x2, [fp, #-0x18]
    // 0x7c8060: LoadField: r3 = r2->field_b
    //     0x7c8060: ldur            w3, [x2, #0xb]
    // 0x7c8064: DecompressPointer r3
    //     0x7c8064: add             x3, x3, HEAP, lsl #32
    // 0x7c8068: stur            x3, [fp, #-0x10]
    // 0x7c806c: r0 = LoadInt32Instr(r3)
    //     0x7c806c: sbfx            x0, x3, #1, #0x1f
    // 0x7c8070: r4 = 0
    //     0x7c8070: movz            x4, #0
    // 0x7c8074: stur            x4, [fp, #-8]
    // 0x7c8078: CheckStackOverflow
    //     0x7c8078: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7c807c: cmp             SP, x16
    //     0x7c8080: b.ls            #0x7c8138
    // 0x7c8084: cmp             x4, x0
    // 0x7c8088: b.ge            #0x7c8104
    // 0x7c808c: mov             x1, x4
    // 0x7c8090: cmp             x1, x0
    // 0x7c8094: b.hs            #0x7c8140
    // 0x7c8098: LoadField: r0 = r2->field_f
    //     0x7c8098: ldur            w0, [x2, #0xf]
    // 0x7c809c: DecompressPointer r0
    //     0x7c809c: add             x0, x0, HEAP, lsl #32
    // 0x7c80a0: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x7c80a0: add             x16, x0, x4, lsl #2
    //     0x7c80a4: ldur            w1, [x16, #0xf]
    // 0x7c80a8: DecompressPointer r1
    //     0x7c80a8: add             x1, x1, HEAP, lsl #32
    // 0x7c80ac: ldr             x16, [fp, #0x10]
    // 0x7c80b0: stp             x1, x16, [SP]
    // 0x7c80b4: ldr             x0, [fp, #0x10]
    // 0x7c80b8: ClosureCall
    //     0x7c80b8: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c80bc: ldur            x2, [x0, #0x1f]
    //     0x7c80c0: blr             x2
    // 0x7c80c4: ldur            x0, [fp, #-0x18]
    // 0x7c80c8: LoadField: r1 = r0->field_b
    //     0x7c80c8: ldur            w1, [x0, #0xb]
    // 0x7c80cc: DecompressPointer r1
    //     0x7c80cc: add             x1, x1, HEAP, lsl #32
    // 0x7c80d0: ldur            x2, [fp, #-0x10]
    // 0x7c80d4: cmp             w1, w2
    // 0x7c80d8: b.ne            #0x7c8114
    // 0x7c80dc: ldur            x3, [fp, #-8]
    // 0x7c80e0: add             x4, x3, #1
    // 0x7c80e4: r3 = LoadInt32Instr(r1)
    //     0x7c80e4: sbfx            x3, x1, #1, #0x1f
    // 0x7c80e8: mov             x16, x2
    // 0x7c80ec: mov             x2, x3
    // 0x7c80f0: mov             x3, x16
    // 0x7c80f4: mov             x16, x0
    // 0x7c80f8: mov             x0, x2
    // 0x7c80fc: mov             x2, x16
    // 0x7c8100: b               #0x7c8074
    // 0x7c8104: r0 = Null
    //     0x7c8104: mov             x0, NULL
    // 0x7c8108: LeaveFrame
    //     0x7c8108: mov             SP, fp
    //     0x7c810c: ldp             fp, lr, [SP], #0x10
    // 0x7c8110: ret
    //     0x7c8110: ret             
    // 0x7c8114: r0 = ConcurrentModificationError()
    //     0x7c8114: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x7c8118: mov             x1, x0
    // 0x7c811c: ldur            x0, [fp, #-0x18]
    // 0x7c8120: StoreField: r1->field_b = r0
    //     0x7c8120: stur            w0, [x1, #0xb]
    // 0x7c8124: mov             x0, x1
    // 0x7c8128: r0 = Throw()
    //     0x7c8128: bl              #0xc5d2b8  ; ThrowStub
    // 0x7c812c: brk             #0
    // 0x7c8130: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7c8130: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7c8134: b               #0x7c804c
    // 0x7c8138: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7c8138: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7c813c: b               #0x7c8084
    // 0x7c8140: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x7c8140: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ redepthChildren(/* No info */) {
    // ** addr: 0x81c154, size: 0x104
    // 0x81c154: EnterFrame
    //     0x81c154: stp             fp, lr, [SP, #-0x10]!
    //     0x81c158: mov             fp, SP
    // 0x81c15c: AllocStack(0x28)
    //     0x81c15c: sub             SP, SP, #0x28
    // 0x81c160: CheckStackOverflow
    //     0x81c160: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x81c164: cmp             SP, x16
    //     0x81c168: b.ls            #0x81c244
    // 0x81c16c: ldr             x16, [fp, #0x10]
    // 0x81c170: str             x16, [SP]
    // 0x81c174: r0 = children()
    //     0x81c174: bl              #0x59fb78  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x81c178: mov             x2, x0
    // 0x81c17c: stur            x2, [fp, #-0x18]
    // 0x81c180: LoadField: r3 = r2->field_b
    //     0x81c180: ldur            w3, [x2, #0xb]
    // 0x81c184: DecompressPointer r3
    //     0x81c184: add             x3, x3, HEAP, lsl #32
    // 0x81c188: stur            x3, [fp, #-0x10]
    // 0x81c18c: r0 = LoadInt32Instr(r3)
    //     0x81c18c: sbfx            x0, x3, #1, #0x1f
    // 0x81c190: r4 = 0
    //     0x81c190: movz            x4, #0
    // 0x81c194: stur            x4, [fp, #-8]
    // 0x81c198: CheckStackOverflow
    //     0x81c198: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x81c19c: cmp             SP, x16
    //     0x81c1a0: b.ls            #0x81c24c
    // 0x81c1a4: cmp             x4, x0
    // 0x81c1a8: b.ge            #0x81c218
    // 0x81c1ac: mov             x1, x4
    // 0x81c1b0: cmp             x1, x0
    // 0x81c1b4: b.hs            #0x81c254
    // 0x81c1b8: LoadField: r0 = r2->field_f
    //     0x81c1b8: ldur            w0, [x2, #0xf]
    // 0x81c1bc: DecompressPointer r0
    //     0x81c1bc: add             x0, x0, HEAP, lsl #32
    // 0x81c1c0: ArrayLoad: r1 = r0[r4]  ; Unknown_4
    //     0x81c1c0: add             x16, x0, x4, lsl #2
    //     0x81c1c4: ldur            w1, [x16, #0xf]
    // 0x81c1c8: DecompressPointer r1
    //     0x81c1c8: add             x1, x1, HEAP, lsl #32
    // 0x81c1cc: ldr             x16, [fp, #0x10]
    // 0x81c1d0: stp             x1, x16, [SP]
    // 0x81c1d4: r0 = redepthChild()
    //     0x81c1d4: bl              #0x7edbe4  ; [package:flutter/src/rendering/object.dart] RenderObject::redepthChild
    // 0x81c1d8: ldur            x0, [fp, #-0x18]
    // 0x81c1dc: LoadField: r1 = r0->field_b
    //     0x81c1dc: ldur            w1, [x0, #0xb]
    // 0x81c1e0: DecompressPointer r1
    //     0x81c1e0: add             x1, x1, HEAP, lsl #32
    // 0x81c1e4: ldur            x2, [fp, #-0x10]
    // 0x81c1e8: cmp             w1, w2
    // 0x81c1ec: b.ne            #0x81c228
    // 0x81c1f0: ldur            x3, [fp, #-8]
    // 0x81c1f4: add             x4, x3, #1
    // 0x81c1f8: r3 = LoadInt32Instr(r1)
    //     0x81c1f8: sbfx            x3, x1, #1, #0x1f
    // 0x81c1fc: mov             x16, x2
    // 0x81c200: mov             x2, x3
    // 0x81c204: mov             x3, x16
    // 0x81c208: mov             x16, x0
    // 0x81c20c: mov             x0, x2
    // 0x81c210: mov             x2, x16
    // 0x81c214: b               #0x81c194
    // 0x81c218: r0 = Null
    //     0x81c218: mov             x0, NULL
    // 0x81c21c: LeaveFrame
    //     0x81c21c: mov             SP, fp
    //     0x81c220: ldp             fp, lr, [SP], #0x10
    // 0x81c224: ret
    //     0x81c224: ret             
    // 0x81c228: r0 = ConcurrentModificationError()
    //     0x81c228: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x81c22c: mov             x1, x0
    // 0x81c230: ldur            x0, [fp, #-0x18]
    // 0x81c234: StoreField: r1->field_b = r0
    //     0x81c234: stur            w0, [x1, #0xb]
    // 0x81c238: mov             x0, x1
    // 0x81c23c: r0 = Throw()
    //     0x81c23c: bl              #0xc5d2b8  ; ThrowStub
    // 0x81c240: brk             #0
    // 0x81c244: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x81c244: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x81c248: b               #0x81c16c
    // 0x81c24c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x81c24c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x81c250: b               #0x81c1a4
    // 0x81c254: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x81c254: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ attach(/* No info */) {
    // ** addr: 0x831468, size: 0x160
    // 0x831468: EnterFrame
    //     0x831468: stp             fp, lr, [SP, #-0x10]!
    //     0x83146c: mov             fp, SP
    // 0x831470: AllocStack(0x38)
    //     0x831470: sub             SP, SP, #0x38
    // 0x831474: CheckStackOverflow
    //     0x831474: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x831478: cmp             SP, x16
    //     0x83147c: b.ls            #0x8315b4
    // 0x831480: ldr             x16, [fp, #0x18]
    // 0x831484: ldr             lr, [fp, #0x10]
    // 0x831488: stp             lr, x16, [SP]
    // 0x83148c: r0 = attach()
    //     0x83148c: bl              #0x83408c  ; [package:flutter/src/rendering/object.dart] RenderObject::attach
    // 0x831490: ldr             x16, [fp, #0x18]
    // 0x831494: str             x16, [SP]
    // 0x831498: r0 = children()
    //     0x831498: bl              #0x59fb78  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x83149c: stur            x0, [fp, #-8]
    // 0x8314a0: LoadField: r3 = r0->field_7
    //     0x8314a0: ldur            w3, [x0, #7]
    // 0x8314a4: DecompressPointer r3
    //     0x8314a4: add             x3, x3, HEAP, lsl #32
    // 0x8314a8: stur            x3, [fp, #-0x28]
    // 0x8314ac: LoadField: r1 = r0->field_b
    //     0x8314ac: ldur            w1, [x0, #0xb]
    // 0x8314b0: DecompressPointer r1
    //     0x8314b0: add             x1, x1, HEAP, lsl #32
    // 0x8314b4: r4 = LoadInt32Instr(r1)
    //     0x8314b4: sbfx            x4, x1, #1, #0x1f
    // 0x8314b8: stur            x4, [fp, #-0x20]
    // 0x8314bc: r2 = 0
    //     0x8314bc: movz            x2, #0
    // 0x8314c0: CheckStackOverflow
    //     0x8314c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8314c4: cmp             SP, x16
    //     0x8314c8: b.ls            #0x8315bc
    // 0x8314cc: LoadField: r1 = r0->field_b
    //     0x8314cc: ldur            w1, [x0, #0xb]
    // 0x8314d0: DecompressPointer r1
    //     0x8314d0: add             x1, x1, HEAP, lsl #32
    // 0x8314d4: r5 = LoadInt32Instr(r1)
    //     0x8314d4: sbfx            x5, x1, #1, #0x1f
    // 0x8314d8: cmp             x4, x5
    // 0x8314dc: b.ne            #0x8315a0
    // 0x8314e0: mov             x6, x0
    // 0x8314e4: cmp             x2, x5
    // 0x8314e8: b.lt            #0x8314fc
    // 0x8314ec: r0 = Null
    //     0x8314ec: mov             x0, NULL
    // 0x8314f0: LeaveFrame
    //     0x8314f0: mov             SP, fp
    //     0x8314f4: ldp             fp, lr, [SP], #0x10
    // 0x8314f8: ret
    //     0x8314f8: ret             
    // 0x8314fc: mov             x0, x5
    // 0x831500: mov             x1, x2
    // 0x831504: cmp             x1, x0
    // 0x831508: b.hs            #0x8315c4
    // 0x83150c: LoadField: r0 = r6->field_f
    //     0x83150c: ldur            w0, [x6, #0xf]
    // 0x831510: DecompressPointer r0
    //     0x831510: add             x0, x0, HEAP, lsl #32
    // 0x831514: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x831514: add             x16, x0, x2, lsl #2
    //     0x831518: ldur            w5, [x16, #0xf]
    // 0x83151c: DecompressPointer r5
    //     0x83151c: add             x5, x5, HEAP, lsl #32
    // 0x831520: stur            x5, [fp, #-0x18]
    // 0x831524: add             x7, x2, #1
    // 0x831528: stur            x7, [fp, #-0x10]
    // 0x83152c: cmp             w5, NULL
    // 0x831530: b.ne            #0x831564
    // 0x831534: mov             x0, x5
    // 0x831538: mov             x2, x3
    // 0x83153c: r1 = Null
    //     0x83153c: mov             x1, NULL
    // 0x831540: cmp             w2, NULL
    // 0x831544: b.eq            #0x831564
    // 0x831548: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x831548: ldur            w4, [x2, #0x17]
    // 0x83154c: DecompressPointer r4
    //     0x83154c: add             x4, x4, HEAP, lsl #32
    // 0x831550: r8 = X0
    //     0x831550: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x831554: LoadField: r9 = r4->field_7
    //     0x831554: ldur            x9, [x4, #7]
    // 0x831558: r3 = Null
    //     0x831558: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d458] Null
    //     0x83155c: ldr             x3, [x3, #0x458]
    // 0x831560: blr             x9
    // 0x831564: ldur            x0, [fp, #-0x18]
    // 0x831568: r1 = LoadClassIdInstr(r0)
    //     0x831568: ldur            x1, [x0, #-1]
    //     0x83156c: ubfx            x1, x1, #0xc, #0x14
    // 0x831570: ldr             x16, [fp, #0x10]
    // 0x831574: stp             x16, x0, [SP]
    // 0x831578: mov             x0, x1
    // 0x83157c: r0 = GDT[cid_x0 + 0xd7bf]()
    //     0x83157c: movz            x17, #0xd7bf
    //     0x831580: add             lr, x0, x17
    //     0x831584: ldr             lr, [x21, lr, lsl #3]
    //     0x831588: blr             lr
    // 0x83158c: ldur            x2, [fp, #-0x10]
    // 0x831590: ldur            x0, [fp, #-8]
    // 0x831594: ldur            x3, [fp, #-0x28]
    // 0x831598: ldur            x4, [fp, #-0x20]
    // 0x83159c: b               #0x8314c0
    // 0x8315a0: r0 = ConcurrentModificationError()
    //     0x8315a0: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x8315a4: ldur            x6, [fp, #-8]
    // 0x8315a8: StoreField: r0->field_b = r6
    //     0x8315a8: stur            w6, [x0, #0xb]
    // 0x8315ac: r0 = Throw()
    //     0x8315ac: bl              #0xc5d2b8  ; ThrowStub
    // 0x8315b0: brk             #0
    // 0x8315b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8315b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8315b8: b               #0x831480
    // 0x8315bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8315bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8315c0: b               #0x8314cc
    // 0x8315c4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8315c4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ detach(/* No info */) {
    // ** addr: 0x85a8c4, size: 0x158
    // 0x85a8c4: EnterFrame
    //     0x85a8c4: stp             fp, lr, [SP, #-0x10]!
    //     0x85a8c8: mov             fp, SP
    // 0x85a8cc: AllocStack(0x30)
    //     0x85a8cc: sub             SP, SP, #0x30
    // 0x85a8d0: CheckStackOverflow
    //     0x85a8d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x85a8d4: cmp             SP, x16
    //     0x85a8d8: b.ls            #0x85aa08
    // 0x85a8dc: ldr             x16, [fp, #0x10]
    // 0x85a8e0: str             x16, [SP]
    // 0x85a8e4: r0 = detach()
    //     0x85a8e4: bl              #0x85bd4c  ; [package:flutter/src/rendering/object.dart] RenderObject::detach
    // 0x85a8e8: ldr             x16, [fp, #0x10]
    // 0x85a8ec: str             x16, [SP]
    // 0x85a8f0: r0 = children()
    //     0x85a8f0: bl              #0x59fb78  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x85a8f4: stur            x0, [fp, #-8]
    // 0x85a8f8: LoadField: r3 = r0->field_7
    //     0x85a8f8: ldur            w3, [x0, #7]
    // 0x85a8fc: DecompressPointer r3
    //     0x85a8fc: add             x3, x3, HEAP, lsl #32
    // 0x85a900: stur            x3, [fp, #-0x28]
    // 0x85a904: LoadField: r1 = r0->field_b
    //     0x85a904: ldur            w1, [x0, #0xb]
    // 0x85a908: DecompressPointer r1
    //     0x85a908: add             x1, x1, HEAP, lsl #32
    // 0x85a90c: r4 = LoadInt32Instr(r1)
    //     0x85a90c: sbfx            x4, x1, #1, #0x1f
    // 0x85a910: stur            x4, [fp, #-0x20]
    // 0x85a914: r2 = 0
    //     0x85a914: movz            x2, #0
    // 0x85a918: CheckStackOverflow
    //     0x85a918: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x85a91c: cmp             SP, x16
    //     0x85a920: b.ls            #0x85aa10
    // 0x85a924: LoadField: r1 = r0->field_b
    //     0x85a924: ldur            w1, [x0, #0xb]
    // 0x85a928: DecompressPointer r1
    //     0x85a928: add             x1, x1, HEAP, lsl #32
    // 0x85a92c: r5 = LoadInt32Instr(r1)
    //     0x85a92c: sbfx            x5, x1, #1, #0x1f
    // 0x85a930: cmp             x4, x5
    // 0x85a934: b.ne            #0x85a9f4
    // 0x85a938: mov             x6, x0
    // 0x85a93c: cmp             x2, x5
    // 0x85a940: b.lt            #0x85a954
    // 0x85a944: r0 = Null
    //     0x85a944: mov             x0, NULL
    // 0x85a948: LeaveFrame
    //     0x85a948: mov             SP, fp
    //     0x85a94c: ldp             fp, lr, [SP], #0x10
    // 0x85a950: ret
    //     0x85a950: ret             
    // 0x85a954: mov             x0, x5
    // 0x85a958: mov             x1, x2
    // 0x85a95c: cmp             x1, x0
    // 0x85a960: b.hs            #0x85aa18
    // 0x85a964: LoadField: r0 = r6->field_f
    //     0x85a964: ldur            w0, [x6, #0xf]
    // 0x85a968: DecompressPointer r0
    //     0x85a968: add             x0, x0, HEAP, lsl #32
    // 0x85a96c: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x85a96c: add             x16, x0, x2, lsl #2
    //     0x85a970: ldur            w5, [x16, #0xf]
    // 0x85a974: DecompressPointer r5
    //     0x85a974: add             x5, x5, HEAP, lsl #32
    // 0x85a978: stur            x5, [fp, #-0x18]
    // 0x85a97c: add             x7, x2, #1
    // 0x85a980: stur            x7, [fp, #-0x10]
    // 0x85a984: cmp             w5, NULL
    // 0x85a988: b.ne            #0x85a9bc
    // 0x85a98c: mov             x0, x5
    // 0x85a990: mov             x2, x3
    // 0x85a994: r1 = Null
    //     0x85a994: mov             x1, NULL
    // 0x85a998: cmp             w2, NULL
    // 0x85a99c: b.eq            #0x85a9bc
    // 0x85a9a0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x85a9a0: ldur            w4, [x2, #0x17]
    // 0x85a9a4: DecompressPointer r4
    //     0x85a9a4: add             x4, x4, HEAP, lsl #32
    // 0x85a9a8: r8 = X0
    //     0x85a9a8: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x85a9ac: LoadField: r9 = r4->field_7
    //     0x85a9ac: ldur            x9, [x4, #7]
    // 0x85a9b0: r3 = Null
    //     0x85a9b0: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d448] Null
    //     0x85a9b4: ldr             x3, [x3, #0x448]
    // 0x85a9b8: blr             x9
    // 0x85a9bc: ldur            x0, [fp, #-0x18]
    // 0x85a9c0: r1 = LoadClassIdInstr(r0)
    //     0x85a9c0: ldur            x1, [x0, #-1]
    //     0x85a9c4: ubfx            x1, x1, #0xc, #0x14
    // 0x85a9c8: str             x0, [SP]
    // 0x85a9cc: mov             x0, x1
    // 0x85a9d0: r0 = GDT[cid_x0 + 0xcf19]()
    //     0x85a9d0: movz            x17, #0xcf19
    //     0x85a9d4: add             lr, x0, x17
    //     0x85a9d8: ldr             lr, [x21, lr, lsl #3]
    //     0x85a9dc: blr             lr
    // 0x85a9e0: ldur            x2, [fp, #-0x10]
    // 0x85a9e4: ldur            x0, [fp, #-8]
    // 0x85a9e8: ldur            x3, [fp, #-0x28]
    // 0x85a9ec: ldur            x4, [fp, #-0x20]
    // 0x85a9f0: b               #0x85a918
    // 0x85a9f4: r0 = ConcurrentModificationError()
    //     0x85a9f4: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x85a9f8: ldur            x6, [fp, #-8]
    // 0x85a9fc: StoreField: r0->field_b = r6
    //     0x85a9fc: stur            w6, [x0, #0xb]
    // 0x85aa00: r0 = Throw()
    //     0x85aa00: bl              #0xc5d2b8  ; ThrowStub
    // 0x85aa04: brk             #0
    // 0x85aa08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x85aa08: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x85aa0c: b               #0x85a8dc
    // 0x85aa10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x85aa10: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x85aa14: b               #0x85a924
    // 0x85aa18: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x85aa18: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ _moveChild(/* No info */) {
    // ** addr: 0xc1d1b0, size: 0x178
    // 0xc1d1b0: EnterFrame
    //     0xc1d1b0: stp             fp, lr, [SP, #-0x10]!
    //     0xc1d1b4: mov             fp, SP
    // 0xc1d1b8: AllocStack(0x20)
    //     0xc1d1b8: sub             SP, SP, #0x20
    // 0xc1d1bc: CheckStackOverflow
    //     0xc1d1bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc1d1c0: cmp             SP, x16
    //     0xc1d1c4: b.ls            #0xc1d320
    // 0xc1d1c8: ldr             x0, [fp, #0x20]
    // 0xc1d1cc: r2 = Null
    //     0xc1d1cc: mov             x2, NULL
    // 0xc1d1d0: r1 = Null
    //     0xc1d1d0: mov             x1, NULL
    // 0xc1d1d4: r4 = 59
    //     0xc1d1d4: movz            x4, #0x3b
    // 0xc1d1d8: branchIfSmi(r0, 0xc1d1e4)
    //     0xc1d1d8: tbz             w0, #0, #0xc1d1e4
    // 0xc1d1dc: r4 = LoadClassIdInstr(r0)
    //     0xc1d1dc: ldur            x4, [x0, #-1]
    //     0xc1d1e0: ubfx            x4, x4, #0xc, #0x14
    // 0xc1d1e4: sub             x4, x4, #0x7df
    // 0xc1d1e8: cmp             x4, #0x9b
    // 0xc1d1ec: b.ls            #0xc1d200
    // 0xc1d1f0: r8 = RenderBox
    //     0xc1d1f0: ldr             x8, [PP, #0x57e8]  ; [pp+0x57e8] Type: RenderBox
    // 0xc1d1f4: r3 = Null
    //     0xc1d1f4: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d3f8] Null
    //     0xc1d1f8: ldr             x3, [x3, #0x3f8]
    // 0xc1d1fc: r0 = RenderBox()
    //     0xc1d1fc: bl              #0x4fae28  ; IsType_RenderBox_Stub
    // 0xc1d200: ldr             x0, [fp, #0x18]
    // 0xc1d204: r2 = Null
    //     0xc1d204: mov             x2, NULL
    // 0xc1d208: r1 = Null
    //     0xc1d208: mov             x1, NULL
    // 0xc1d20c: r4 = 59
    //     0xc1d20c: movz            x4, #0x3b
    // 0xc1d210: branchIfSmi(r0, 0xc1d21c)
    //     0xc1d210: tbz             w0, #0, #0xc1d21c
    // 0xc1d214: r4 = LoadClassIdInstr(r0)
    //     0xc1d214: ldur            x4, [x0, #-1]
    //     0xc1d218: ubfx            x4, x4, #0xc, #0x14
    // 0xc1d21c: r17 = 6093
    //     0xc1d21c: movz            x17, #0x17cd
    // 0xc1d220: cmp             x4, x17
    // 0xc1d224: b.eq            #0xc1d23c
    // 0xc1d228: r8 = _DecorationSlot
    //     0xc1d228: add             x8, PP, #0x47, lsl #12  ; [pp+0x47968] Type: _DecorationSlot
    //     0xc1d22c: ldr             x8, [x8, #0x968]
    // 0xc1d230: r3 = Null
    //     0xc1d230: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d408] Null
    //     0xc1d234: ldr             x3, [x3, #0x408]
    // 0xc1d238: r0 = _DecorationSlot()
    //     0xc1d238: bl              #0x578fe0  ; IsType__DecorationSlot_Stub
    // 0xc1d23c: ldr             x0, [fp, #0x10]
    // 0xc1d240: r2 = Null
    //     0xc1d240: mov             x2, NULL
    // 0xc1d244: r1 = Null
    //     0xc1d244: mov             x1, NULL
    // 0xc1d248: r4 = 59
    //     0xc1d248: movz            x4, #0x3b
    // 0xc1d24c: branchIfSmi(r0, 0xc1d258)
    //     0xc1d24c: tbz             w0, #0, #0xc1d258
    // 0xc1d250: r4 = LoadClassIdInstr(r0)
    //     0xc1d250: ldur            x4, [x0, #-1]
    //     0xc1d254: ubfx            x4, x4, #0xc, #0x14
    // 0xc1d258: r17 = 6093
    //     0xc1d258: movz            x17, #0x17cd
    // 0xc1d25c: cmp             x4, x17
    // 0xc1d260: b.eq            #0xc1d278
    // 0xc1d264: r8 = _DecorationSlot
    //     0xc1d264: add             x8, PP, #0x47, lsl #12  ; [pp+0x47968] Type: _DecorationSlot
    //     0xc1d268: ldr             x8, [x8, #0x968]
    // 0xc1d26c: r3 = Null
    //     0xc1d26c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d418] Null
    //     0xc1d270: ldr             x3, [x3, #0x418]
    // 0xc1d274: r0 = _DecorationSlot()
    //     0xc1d274: bl              #0x578fe0  ; IsType__DecorationSlot_Stub
    // 0xc1d278: ldr             x0, [fp, #0x28]
    // 0xc1d27c: LoadField: r1 = r0->field_5f
    //     0xc1d27c: ldur            w1, [x0, #0x5f]
    // 0xc1d280: DecompressPointer r1
    //     0xc1d280: add             x1, x1, HEAP, lsl #32
    // 0xc1d284: stur            x1, [fp, #-8]
    // 0xc1d288: ldr             x16, [fp, #0x10]
    // 0xc1d28c: stp             x16, x1, [SP]
    // 0xc1d290: r0 = _getValueOrData()
    //     0xc1d290: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xc1d294: mov             x1, x0
    // 0xc1d298: ldur            x0, [fp, #-8]
    // 0xc1d29c: LoadField: r2 = r0->field_f
    //     0xc1d29c: ldur            w2, [x0, #0xf]
    // 0xc1d2a0: DecompressPointer r2
    //     0xc1d2a0: add             x2, x2, HEAP, lsl #32
    // 0xc1d2a4: cmp             w2, w1
    // 0xc1d2a8: b.ne            #0xc1d2b4
    // 0xc1d2ac: r0 = Null
    //     0xc1d2ac: mov             x0, NULL
    // 0xc1d2b0: b               #0xc1d2b8
    // 0xc1d2b4: mov             x0, x1
    // 0xc1d2b8: r1 = 59
    //     0xc1d2b8: movz            x1, #0x3b
    // 0xc1d2bc: branchIfSmi(r0, 0xc1d2c8)
    //     0xc1d2bc: tbz             w0, #0, #0xc1d2c8
    // 0xc1d2c0: r1 = LoadClassIdInstr(r0)
    //     0xc1d2c0: ldur            x1, [x0, #-1]
    //     0xc1d2c4: ubfx            x1, x1, #0xc, #0x14
    // 0xc1d2c8: ldr             x16, [fp, #0x20]
    // 0xc1d2cc: stp             x16, x0, [SP]
    // 0xc1d2d0: mov             x0, x1
    // 0xc1d2d4: mov             lr, x0
    // 0xc1d2d8: ldr             lr, [x21, lr, lsl #3]
    // 0xc1d2dc: blr             lr
    // 0xc1d2e0: tbnz            w0, #4, #0xc1d2f8
    // 0xc1d2e4: ldr             x16, [fp, #0x28]
    // 0xc1d2e8: stp             NULL, x16, [SP, #8]
    // 0xc1d2ec: ldr             x16, [fp, #0x10]
    // 0xc1d2f0: str             x16, [SP]
    // 0xc1d2f4: r0 = _setChild()
    //     0xc1d2f4: bl              #0xc1e004  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::_setChild
    // 0xc1d2f8: ldr             x16, [fp, #0x28]
    // 0xc1d2fc: ldr             lr, [fp, #0x20]
    // 0xc1d300: stp             lr, x16, [SP, #8]
    // 0xc1d304: ldr             x16, [fp, #0x18]
    // 0xc1d308: str             x16, [SP]
    // 0xc1d30c: r0 = _setChild()
    //     0xc1d30c: bl              #0xc1e004  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::_setChild
    // 0xc1d310: r0 = Null
    //     0xc1d310: mov             x0, NULL
    // 0xc1d314: LeaveFrame
    //     0xc1d314: mov             SP, fp
    //     0xc1d318: ldp             fp, lr, [SP], #0x10
    // 0xc1d31c: ret
    //     0xc1d31c: ret             
    // 0xc1d320: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc1d320: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc1d324: b               #0xc1d1c8
  }
  _ _setChild(/* No info */) {
    // ** addr: 0xc1e004, size: 0x130
    // 0xc1e004: EnterFrame
    //     0xc1e004: stp             fp, lr, [SP, #-0x10]!
    //     0xc1e008: mov             fp, SP
    // 0xc1e00c: AllocStack(0x20)
    //     0xc1e00c: sub             SP, SP, #0x20
    // 0xc1e010: CheckStackOverflow
    //     0xc1e010: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc1e014: cmp             SP, x16
    //     0xc1e018: b.ls            #0xc1e12c
    // 0xc1e01c: ldr             x0, [fp, #0x18]
    // 0xc1e020: r2 = Null
    //     0xc1e020: mov             x2, NULL
    // 0xc1e024: r1 = Null
    //     0xc1e024: mov             x1, NULL
    // 0xc1e028: r4 = 59
    //     0xc1e028: movz            x4, #0x3b
    // 0xc1e02c: branchIfSmi(r0, 0xc1e038)
    //     0xc1e02c: tbz             w0, #0, #0xc1e038
    // 0xc1e030: r4 = LoadClassIdInstr(r0)
    //     0xc1e030: ldur            x4, [x0, #-1]
    //     0xc1e034: ubfx            x4, x4, #0xc, #0x14
    // 0xc1e038: sub             x4, x4, #0x7df
    // 0xc1e03c: cmp             x4, #0x9b
    // 0xc1e040: b.ls            #0xc1e054
    // 0xc1e044: r8 = RenderBox?
    //     0xc1e044: ldr             x8, [PP, #0x4230]  ; [pp+0x4230] Type: RenderBox?
    // 0xc1e048: r3 = Null
    //     0xc1e048: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d428] Null
    //     0xc1e04c: ldr             x3, [x3, #0x428]
    // 0xc1e050: r0 = RenderBox?()
    //     0xc1e050: bl              #0x5892fc  ; IsType_RenderBox?_Stub
    // 0xc1e054: ldr             x0, [fp, #0x10]
    // 0xc1e058: r2 = Null
    //     0xc1e058: mov             x2, NULL
    // 0xc1e05c: r1 = Null
    //     0xc1e05c: mov             x1, NULL
    // 0xc1e060: r4 = 59
    //     0xc1e060: movz            x4, #0x3b
    // 0xc1e064: branchIfSmi(r0, 0xc1e070)
    //     0xc1e064: tbz             w0, #0, #0xc1e070
    // 0xc1e068: r4 = LoadClassIdInstr(r0)
    //     0xc1e068: ldur            x4, [x0, #-1]
    //     0xc1e06c: ubfx            x4, x4, #0xc, #0x14
    // 0xc1e070: r17 = 6093
    //     0xc1e070: movz            x17, #0x17cd
    // 0xc1e074: cmp             x4, x17
    // 0xc1e078: b.eq            #0xc1e090
    // 0xc1e07c: r8 = _DecorationSlot
    //     0xc1e07c: add             x8, PP, #0x47, lsl #12  ; [pp+0x47968] Type: _DecorationSlot
    //     0xc1e080: ldr             x8, [x8, #0x968]
    // 0xc1e084: r3 = Null
    //     0xc1e084: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d438] Null
    //     0xc1e088: ldr             x3, [x3, #0x438]
    // 0xc1e08c: r0 = _DecorationSlot()
    //     0xc1e08c: bl              #0x578fe0  ; IsType__DecorationSlot_Stub
    // 0xc1e090: ldr             x0, [fp, #0x20]
    // 0xc1e094: LoadField: r1 = r0->field_5f
    //     0xc1e094: ldur            w1, [x0, #0x5f]
    // 0xc1e098: DecompressPointer r1
    //     0xc1e098: add             x1, x1, HEAP, lsl #32
    // 0xc1e09c: stur            x1, [fp, #-8]
    // 0xc1e0a0: ldr             x16, [fp, #0x10]
    // 0xc1e0a4: stp             x16, x1, [SP]
    // 0xc1e0a8: r0 = _getValueOrData()
    //     0xc1e0a8: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0xc1e0ac: mov             x1, x0
    // 0xc1e0b0: ldur            x0, [fp, #-8]
    // 0xc1e0b4: LoadField: r2 = r0->field_f
    //     0xc1e0b4: ldur            w2, [x0, #0xf]
    // 0xc1e0b8: DecompressPointer r2
    //     0xc1e0b8: add             x2, x2, HEAP, lsl #32
    // 0xc1e0bc: cmp             w2, w1
    // 0xc1e0c0: b.ne            #0xc1e0c8
    // 0xc1e0c4: r1 = Null
    //     0xc1e0c4: mov             x1, NULL
    // 0xc1e0c8: cmp             w1, NULL
    // 0xc1e0cc: b.eq            #0xc1e0ec
    // 0xc1e0d0: ldr             x16, [fp, #0x20]
    // 0xc1e0d4: stp             x1, x16, [SP]
    // 0xc1e0d8: r0 = dropChild()
    //     0xc1e0d8: bl              #0x7edca0  ; [package:flutter/src/rendering/object.dart] RenderObject::dropChild
    // 0xc1e0dc: ldur            x16, [fp, #-8]
    // 0xc1e0e0: ldr             lr, [fp, #0x10]
    // 0xc1e0e4: stp             lr, x16, [SP]
    // 0xc1e0e8: r0 = remove()
    //     0xc1e0e8: bl              #0xbce338  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::remove
    // 0xc1e0ec: ldr             x0, [fp, #0x18]
    // 0xc1e0f0: cmp             w0, NULL
    // 0xc1e0f4: b.eq            #0xc1e11c
    // 0xc1e0f8: ldur            x16, [fp, #-8]
    // 0xc1e0fc: ldr             lr, [fp, #0x10]
    // 0xc1e100: stp             lr, x16, [SP, #8]
    // 0xc1e104: str             x0, [SP]
    // 0xc1e108: r0 = []=()
    //     0xc1e108: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0xc1e10c: ldr             x16, [fp, #0x20]
    // 0xc1e110: ldr             lr, [fp, #0x18]
    // 0xc1e114: stp             lr, x16, [SP]
    // 0xc1e118: r0 = adoptChild()
    //     0xc1e118: bl              #0x7edaf0  ; [package:flutter/src/rendering/object.dart] RenderObject::adoptChild
    // 0xc1e11c: r0 = Null
    //     0xc1e11c: mov             x0, NULL
    // 0xc1e120: LeaveFrame
    //     0xc1e120: mov             SP, fp
    //     0xc1e124: ldp             fp, lr, [SP], #0x10
    // 0xc1e128: ret
    //     0xc1e128: ret             
    // 0xc1e12c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc1e12c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc1e130: b               #0xc1e01c
  }
}

// class id: 2071, size: 0x84, field offset: 0x64
class _RenderDecoration extends __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin {

  dynamic computeMinIntrinsicWidth(dynamic) {
    // ** addr: 0x578fc8, size: 0x18
    // 0x578fc8: r4 = 0
    //     0x578fc8: movz            x4, #0
    // 0x578fcc: r1 = Function 'computeMinIntrinsicWidth':.
    //     0x578fcc: add             x17, PP, #0x4d, lsl #12  ; [pp+0x4d170] AnonymousClosure: (0x579004), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicWidth (0x57b454)
    //     0x578fd0: ldr             x1, [x17, #0x170]
    // 0x578fd4: r24 = BuildNonGenericMethodExtractorStub
    //     0x578fd4: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0x578fd8: ArrayLoad: r0 = r24[0]  ; List_8
    //     0x578fd8: ldur            x0, [x24, #0x17]
    // 0x578fdc: br              x0
  }
  [closure] double computeMinIntrinsicWidth(dynamic, double) {
    // ** addr: 0x579004, size: 0x4c
    // 0x579004: EnterFrame
    //     0x579004: stp             fp, lr, [SP, #-0x10]!
    //     0x579008: mov             fp, SP
    // 0x57900c: AllocStack(0x10)
    //     0x57900c: sub             SP, SP, #0x10
    // 0x579010: SetupParameters()
    //     0x579010: ldr             x0, [fp, #0x18]
    //     0x579014: ldur            w1, [x0, #0x17]
    //     0x579018: add             x1, x1, HEAP, lsl #32
    // 0x57901c: CheckStackOverflow
    //     0x57901c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x579020: cmp             SP, x16
    //     0x579024: b.ls            #0x579048
    // 0x579028: LoadField: r0 = r1->field_f
    //     0x579028: ldur            w0, [x1, #0xf]
    // 0x57902c: DecompressPointer r0
    //     0x57902c: add             x0, x0, HEAP, lsl #32
    // 0x579030: ldr             x16, [fp, #0x10]
    // 0x579034: stp             x16, x0, [SP]
    // 0x579038: r0 = computeMinIntrinsicWidth()
    //     0x579038: bl              #0x57b454  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicWidth
    // 0x57903c: LeaveFrame
    //     0x57903c: mov             SP, fp
    //     0x579040: ldp             fp, lr, [SP], #0x10
    // 0x579044: ret
    //     0x579044: ret             
    // 0x579048: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x579048: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57904c: b               #0x579028
  }
  _ computeMinIntrinsicWidth(/* No info */) {
    // ** addr: 0x57b454, size: 0x250
    // 0x57b454: EnterFrame
    //     0x57b454: stp             fp, lr, [SP, #-0x10]!
    //     0x57b458: mov             fp, SP
    // 0x57b45c: AllocStack(0x28)
    //     0x57b45c: sub             SP, SP, #0x28
    // 0x57b460: CheckStackOverflow
    //     0x57b460: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b464: cmp             SP, x16
    //     0x57b468: b.ls            #0x57b68c
    // 0x57b46c: ldr             x16, [fp, #0x18]
    // 0x57b470: r30 = Instance__DecorationSlot
    //     0x57b470: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x57b474: ldr             lr, [lr, #0x1b0]
    // 0x57b478: stp             lr, x16, [SP]
    // 0x57b47c: r0 = childForSlot()
    //     0x57b47c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b480: mov             x1, x0
    // 0x57b484: ldr             x0, [fp, #0x10]
    // 0x57b488: LoadField: d0 = r0->field_7
    //     0x57b488: ldur            d0, [x0, #7]
    // 0x57b48c: stur            d0, [fp, #-8]
    // 0x57b490: str             x1, [SP, #8]
    // 0x57b494: str             d0, [SP]
    // 0x57b498: r0 = _minWidth()
    //     0x57b498: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b49c: ldr             x0, [fp, #0x18]
    // 0x57b4a0: LoadField: r1 = r0->field_63
    //     0x57b4a0: ldur            w1, [x0, #0x63]
    // 0x57b4a4: DecompressPointer r1
    //     0x57b4a4: add             x1, x1, HEAP, lsl #32
    // 0x57b4a8: LoadField: r2 = r1->field_7
    //     0x57b4a8: ldur            w2, [x1, #7]
    // 0x57b4ac: DecompressPointer r2
    //     0x57b4ac: add             x2, x2, HEAP, lsl #32
    // 0x57b4b0: LoadField: d1 = r2->field_7
    //     0x57b4b0: ldur            d1, [x2, #7]
    // 0x57b4b4: fadd            d2, d0, d1
    // 0x57b4b8: stur            d2, [fp, #-0x10]
    // 0x57b4bc: r16 = Instance__DecorationSlot
    //     0x57b4bc: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x57b4c0: ldr             x16, [x16, #0x1c0]
    // 0x57b4c4: stp             x16, x0, [SP]
    // 0x57b4c8: r0 = childForSlot()
    //     0x57b4c8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b4cc: str             x0, [SP, #8]
    // 0x57b4d0: ldur            d0, [fp, #-8]
    // 0x57b4d4: str             d0, [SP]
    // 0x57b4d8: r0 = _minWidth()
    //     0x57b4d8: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b4dc: mov             v1.16b, v0.16b
    // 0x57b4e0: ldur            d0, [fp, #-0x10]
    // 0x57b4e4: fadd            d2, d0, d1
    // 0x57b4e8: stur            d2, [fp, #-0x18]
    // 0x57b4ec: ldr             x16, [fp, #0x18]
    // 0x57b4f0: r30 = Instance__DecorationSlot
    //     0x57b4f0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x57b4f4: ldr             lr, [lr, #0x1d0]
    // 0x57b4f8: stp             lr, x16, [SP]
    // 0x57b4fc: r0 = childForSlot()
    //     0x57b4fc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b500: str             x0, [SP, #8]
    // 0x57b504: ldur            d0, [fp, #-8]
    // 0x57b508: str             d0, [SP]
    // 0x57b50c: r0 = _minWidth()
    //     0x57b50c: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b510: mov             v1.16b, v0.16b
    // 0x57b514: ldur            d0, [fp, #-0x18]
    // 0x57b518: fadd            d2, d0, d1
    // 0x57b51c: stur            d2, [fp, #-0x10]
    // 0x57b520: ldr             x16, [fp, #0x18]
    // 0x57b524: r30 = Instance__DecorationSlot
    //     0x57b524: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x57b528: ldr             lr, [lr, #0x1b8]
    // 0x57b52c: stp             lr, x16, [SP]
    // 0x57b530: r0 = childForSlot()
    //     0x57b530: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b534: str             x0, [SP, #8]
    // 0x57b538: ldur            d0, [fp, #-8]
    // 0x57b53c: str             d0, [SP]
    // 0x57b540: r0 = _minWidth()
    //     0x57b540: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b544: stur            d0, [fp, #-0x18]
    // 0x57b548: ldr             x16, [fp, #0x18]
    // 0x57b54c: r30 = Instance__DecorationSlot
    //     0x57b54c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x57b550: ldr             lr, [lr, #0x1e0]
    // 0x57b554: stp             lr, x16, [SP]
    // 0x57b558: r0 = childForSlot()
    //     0x57b558: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b55c: str             x0, [SP, #8]
    // 0x57b560: ldur            d0, [fp, #-8]
    // 0x57b564: str             d0, [SP]
    // 0x57b568: r0 = _minWidth()
    //     0x57b568: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b56c: mov             v1.16b, v0.16b
    // 0x57b570: ldur            d0, [fp, #-0x18]
    // 0x57b574: fcmp            d0, d1
    // 0x57b578: b.vs            #0x57b588
    // 0x57b57c: b.le            #0x57b588
    // 0x57b580: mov             v2.16b, v0.16b
    // 0x57b584: b               #0x57b5c8
    // 0x57b588: fcmp            d0, d1
    // 0x57b58c: b.vs            #0x57b59c
    // 0x57b590: b.ge            #0x57b59c
    // 0x57b594: mov             v2.16b, v1.16b
    // 0x57b598: b               #0x57b5c8
    // 0x57b59c: d2 = 0.000000
    //     0x57b59c: eor             v2.16b, v2.16b, v2.16b
    // 0x57b5a0: fcmp            d0, d2
    // 0x57b5a4: b.vs            #0x57b5b4
    // 0x57b5a8: b.ne            #0x57b5b4
    // 0x57b5ac: fadd            d2, d0, d1
    // 0x57b5b0: b               #0x57b5c8
    // 0x57b5b4: fcmp            d1, d1
    // 0x57b5b8: b.vc            #0x57b5c4
    // 0x57b5bc: mov             v2.16b, v1.16b
    // 0x57b5c0: b               #0x57b5c8
    // 0x57b5c4: mov             v2.16b, v0.16b
    // 0x57b5c8: ldr             x0, [fp, #0x18]
    // 0x57b5cc: ldur            d1, [fp, #-0x10]
    // 0x57b5d0: ldur            d0, [fp, #-8]
    // 0x57b5d4: fadd            d3, d1, d2
    // 0x57b5d8: stur            d3, [fp, #-0x18]
    // 0x57b5dc: r16 = Instance__DecorationSlot
    //     0x57b5dc: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x57b5e0: ldr             x16, [x16, #0x1d8]
    // 0x57b5e4: stp             x16, x0, [SP]
    // 0x57b5e8: r0 = childForSlot()
    //     0x57b5e8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b5ec: str             x0, [SP, #8]
    // 0x57b5f0: ldur            d0, [fp, #-8]
    // 0x57b5f4: str             d0, [SP]
    // 0x57b5f8: r0 = _minWidth()
    //     0x57b5f8: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b5fc: mov             v1.16b, v0.16b
    // 0x57b600: ldur            d0, [fp, #-0x18]
    // 0x57b604: fadd            d2, d0, d1
    // 0x57b608: stur            d2, [fp, #-0x10]
    // 0x57b60c: ldr             x16, [fp, #0x18]
    // 0x57b610: r30 = Instance__DecorationSlot
    //     0x57b610: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x57b614: ldr             lr, [lr, #0x1c8]
    // 0x57b618: stp             lr, x16, [SP]
    // 0x57b61c: r0 = childForSlot()
    //     0x57b61c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b620: str             x0, [SP, #8]
    // 0x57b624: ldur            d0, [fp, #-8]
    // 0x57b628: str             d0, [SP]
    // 0x57b62c: r0 = _minWidth()
    //     0x57b62c: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x57b630: mov             v1.16b, v0.16b
    // 0x57b634: ldur            d0, [fp, #-0x10]
    // 0x57b638: fadd            d2, d0, d1
    // 0x57b63c: ldr             x1, [fp, #0x18]
    // 0x57b640: LoadField: r2 = r1->field_63
    //     0x57b640: ldur            w2, [x1, #0x63]
    // 0x57b644: DecompressPointer r2
    //     0x57b644: add             x2, x2, HEAP, lsl #32
    // 0x57b648: LoadField: r1 = r2->field_7
    //     0x57b648: ldur            w1, [x2, #7]
    // 0x57b64c: DecompressPointer r1
    //     0x57b64c: add             x1, x1, HEAP, lsl #32
    // 0x57b650: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x57b650: ldur            d0, [x1, #0x17]
    // 0x57b654: fadd            d1, d2, d0
    // 0x57b658: r0 = inline_Allocate_Double()
    //     0x57b658: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x57b65c: add             x0, x0, #0x10
    //     0x57b660: cmp             x1, x0
    //     0x57b664: b.ls            #0x57b694
    //     0x57b668: str             x0, [THR, #0x50]  ; THR::top
    //     0x57b66c: sub             x0, x0, #0xf
    //     0x57b670: movz            x1, #0xd148
    //     0x57b674: movk            x1, #0x3, lsl #16
    //     0x57b678: stur            x1, [x0, #-1]
    // 0x57b67c: StoreField: r0->field_7 = d1
    //     0x57b67c: stur            d1, [x0, #7]
    // 0x57b680: LeaveFrame
    //     0x57b680: mov             SP, fp
    //     0x57b684: ldp             fp, lr, [SP], #0x10
    // 0x57b688: ret
    //     0x57b688: ret             
    // 0x57b68c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b68c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b690: b               #0x57b46c
    // 0x57b694: SaveReg d1
    //     0x57b694: str             q1, [SP, #-0x10]!
    // 0x57b698: r0 = AllocateDouble()
    //     0x57b698: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x57b69c: RestoreReg d1
    //     0x57b69c: ldr             q1, [SP], #0x10
    // 0x57b6a0: b               #0x57b67c
  }
  get _ suffixIcon(/* No info */) {
    // ** addr: 0x57b6a4, size: 0x40
    // 0x57b6a4: EnterFrame
    //     0x57b6a4: stp             fp, lr, [SP, #-0x10]!
    //     0x57b6a8: mov             fp, SP
    // 0x57b6ac: AllocStack(0x10)
    //     0x57b6ac: sub             SP, SP, #0x10
    // 0x57b6b0: CheckStackOverflow
    //     0x57b6b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b6b4: cmp             SP, x16
    //     0x57b6b8: b.ls            #0x57b6dc
    // 0x57b6bc: ldr             x16, [fp, #0x10]
    // 0x57b6c0: r30 = Instance__DecorationSlot
    //     0x57b6c0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x57b6c4: ldr             lr, [lr, #0x1c8]
    // 0x57b6c8: stp             lr, x16, [SP]
    // 0x57b6cc: r0 = childForSlot()
    //     0x57b6cc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b6d0: LeaveFrame
    //     0x57b6d0: mov             SP, fp
    //     0x57b6d4: ldp             fp, lr, [SP], #0x10
    // 0x57b6d8: ret
    //     0x57b6d8: ret             
    // 0x57b6dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b6dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b6e0: b               #0x57b6bc
  }
  get _ suffix(/* No info */) {
    // ** addr: 0x57b6e4, size: 0x40
    // 0x57b6e4: EnterFrame
    //     0x57b6e4: stp             fp, lr, [SP, #-0x10]!
    //     0x57b6e8: mov             fp, SP
    // 0x57b6ec: AllocStack(0x10)
    //     0x57b6ec: sub             SP, SP, #0x10
    // 0x57b6f0: CheckStackOverflow
    //     0x57b6f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b6f4: cmp             SP, x16
    //     0x57b6f8: b.ls            #0x57b71c
    // 0x57b6fc: ldr             x16, [fp, #0x10]
    // 0x57b700: r30 = Instance__DecorationSlot
    //     0x57b700: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x57b704: ldr             lr, [lr, #0x1d8]
    // 0x57b708: stp             lr, x16, [SP]
    // 0x57b70c: r0 = childForSlot()
    //     0x57b70c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b710: LeaveFrame
    //     0x57b710: mov             SP, fp
    //     0x57b714: ldp             fp, lr, [SP], #0x10
    // 0x57b718: ret
    //     0x57b718: ret             
    // 0x57b71c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b71c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b720: b               #0x57b6fc
  }
  get _ hint(/* No info */) {
    // ** addr: 0x57b724, size: 0x40
    // 0x57b724: EnterFrame
    //     0x57b724: stp             fp, lr, [SP, #-0x10]!
    //     0x57b728: mov             fp, SP
    // 0x57b72c: AllocStack(0x10)
    //     0x57b72c: sub             SP, SP, #0x10
    // 0x57b730: CheckStackOverflow
    //     0x57b730: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b734: cmp             SP, x16
    //     0x57b738: b.ls            #0x57b75c
    // 0x57b73c: ldr             x16, [fp, #0x10]
    // 0x57b740: r30 = Instance__DecorationSlot
    //     0x57b740: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x57b744: ldr             lr, [lr, #0x1e0]
    // 0x57b748: stp             lr, x16, [SP]
    // 0x57b74c: r0 = childForSlot()
    //     0x57b74c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b750: LeaveFrame
    //     0x57b750: mov             SP, fp
    //     0x57b754: ldp             fp, lr, [SP], #0x10
    // 0x57b758: ret
    //     0x57b758: ret             
    // 0x57b75c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b75c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b760: b               #0x57b73c
  }
  get _ input(/* No info */) {
    // ** addr: 0x57b764, size: 0x40
    // 0x57b764: EnterFrame
    //     0x57b764: stp             fp, lr, [SP, #-0x10]!
    //     0x57b768: mov             fp, SP
    // 0x57b76c: AllocStack(0x10)
    //     0x57b76c: sub             SP, SP, #0x10
    // 0x57b770: CheckStackOverflow
    //     0x57b770: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b774: cmp             SP, x16
    //     0x57b778: b.ls            #0x57b79c
    // 0x57b77c: ldr             x16, [fp, #0x10]
    // 0x57b780: r30 = Instance__DecorationSlot
    //     0x57b780: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x57b784: ldr             lr, [lr, #0x1b8]
    // 0x57b788: stp             lr, x16, [SP]
    // 0x57b78c: r0 = childForSlot()
    //     0x57b78c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b790: LeaveFrame
    //     0x57b790: mov             SP, fp
    //     0x57b794: ldp             fp, lr, [SP], #0x10
    // 0x57b798: ret
    //     0x57b798: ret             
    // 0x57b79c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b79c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b7a0: b               #0x57b77c
  }
  get _ prefix(/* No info */) {
    // ** addr: 0x57b7a4, size: 0x40
    // 0x57b7a4: EnterFrame
    //     0x57b7a4: stp             fp, lr, [SP, #-0x10]!
    //     0x57b7a8: mov             fp, SP
    // 0x57b7ac: AllocStack(0x10)
    //     0x57b7ac: sub             SP, SP, #0x10
    // 0x57b7b0: CheckStackOverflow
    //     0x57b7b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b7b4: cmp             SP, x16
    //     0x57b7b8: b.ls            #0x57b7dc
    // 0x57b7bc: ldr             x16, [fp, #0x10]
    // 0x57b7c0: r30 = Instance__DecorationSlot
    //     0x57b7c0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x57b7c4: ldr             lr, [lr, #0x1d0]
    // 0x57b7c8: stp             lr, x16, [SP]
    // 0x57b7cc: r0 = childForSlot()
    //     0x57b7cc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b7d0: LeaveFrame
    //     0x57b7d0: mov             SP, fp
    //     0x57b7d4: ldp             fp, lr, [SP], #0x10
    // 0x57b7d8: ret
    //     0x57b7d8: ret             
    // 0x57b7dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b7dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b7e0: b               #0x57b7bc
  }
  get _ prefixIcon(/* No info */) {
    // ** addr: 0x57b7e4, size: 0x40
    // 0x57b7e4: EnterFrame
    //     0x57b7e4: stp             fp, lr, [SP, #-0x10]!
    //     0x57b7e8: mov             fp, SP
    // 0x57b7ec: AllocStack(0x10)
    //     0x57b7ec: sub             SP, SP, #0x10
    // 0x57b7f0: CheckStackOverflow
    //     0x57b7f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b7f4: cmp             SP, x16
    //     0x57b7f8: b.ls            #0x57b81c
    // 0x57b7fc: ldr             x16, [fp, #0x10]
    // 0x57b800: r30 = Instance__DecorationSlot
    //     0x57b800: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x57b804: ldr             lr, [lr, #0x1c0]
    // 0x57b808: stp             lr, x16, [SP]
    // 0x57b80c: r0 = childForSlot()
    //     0x57b80c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b810: LeaveFrame
    //     0x57b810: mov             SP, fp
    //     0x57b814: ldp             fp, lr, [SP], #0x10
    // 0x57b818: ret
    //     0x57b818: ret             
    // 0x57b81c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b81c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b820: b               #0x57b7fc
  }
  get _ icon(/* No info */) {
    // ** addr: 0x57b824, size: 0x40
    // 0x57b824: EnterFrame
    //     0x57b824: stp             fp, lr, [SP, #-0x10]!
    //     0x57b828: mov             fp, SP
    // 0x57b82c: AllocStack(0x10)
    //     0x57b82c: sub             SP, SP, #0x10
    // 0x57b830: CheckStackOverflow
    //     0x57b830: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b834: cmp             SP, x16
    //     0x57b838: b.ls            #0x57b85c
    // 0x57b83c: ldr             x16, [fp, #0x10]
    // 0x57b840: r30 = Instance__DecorationSlot
    //     0x57b840: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x57b844: ldr             lr, [lr, #0x1b0]
    // 0x57b848: stp             lr, x16, [SP]
    // 0x57b84c: r0 = childForSlot()
    //     0x57b84c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x57b850: LeaveFrame
    //     0x57b850: mov             SP, fp
    //     0x57b854: ldp             fp, lr, [SP], #0x10
    // 0x57b858: ret
    //     0x57b858: ret             
    // 0x57b85c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b85c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b860: b               #0x57b83c
  }
  static _ _minWidth(/* No info */) {
    // ** addr: 0x57b864, size: 0x50
    // 0x57b864: EnterFrame
    //     0x57b864: stp             fp, lr, [SP, #-0x10]!
    //     0x57b868: mov             fp, SP
    // 0x57b86c: AllocStack(0x10)
    //     0x57b86c: sub             SP, SP, #0x10
    // 0x57b870: CheckStackOverflow
    //     0x57b870: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57b874: cmp             SP, x16
    //     0x57b878: b.ls            #0x57b8ac
    // 0x57b87c: ldr             x0, [fp, #0x18]
    // 0x57b880: cmp             w0, NULL
    // 0x57b884: b.ne            #0x57b890
    // 0x57b888: d0 = 0.000000
    //     0x57b888: eor             v0.16b, v0.16b, v0.16b
    // 0x57b88c: b               #0x57b8a0
    // 0x57b890: ldr             d0, [fp, #0x10]
    // 0x57b894: str             x0, [SP, #8]
    // 0x57b898: str             d0, [SP]
    // 0x57b89c: r0 = getMinIntrinsicWidth()
    //     0x57b89c: bl              #0x579e44  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicWidth
    // 0x57b8a0: LeaveFrame
    //     0x57b8a0: mov             SP, fp
    //     0x57b8a4: ldp             fp, lr, [SP], #0x10
    // 0x57b8a8: ret
    //     0x57b8a8: ret             
    // 0x57b8ac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57b8ac: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57b8b0: b               #0x57b87c
  }
  static _ _maxWidth(/* No info */) {
    // ** addr: 0x57bc54, size: 0x50
    // 0x57bc54: EnterFrame
    //     0x57bc54: stp             fp, lr, [SP, #-0x10]!
    //     0x57bc58: mov             fp, SP
    // 0x57bc5c: AllocStack(0x10)
    //     0x57bc5c: sub             SP, SP, #0x10
    // 0x57bc60: CheckStackOverflow
    //     0x57bc60: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x57bc64: cmp             SP, x16
    //     0x57bc68: b.ls            #0x57bc9c
    // 0x57bc6c: ldr             x0, [fp, #0x18]
    // 0x57bc70: cmp             w0, NULL
    // 0x57bc74: b.ne            #0x57bc80
    // 0x57bc78: d0 = 0.000000
    //     0x57bc78: eor             v0.16b, v0.16b, v0.16b
    // 0x57bc7c: b               #0x57bc90
    // 0x57bc80: ldr             d0, [fp, #0x10]
    // 0x57bc84: str             x0, [SP, #8]
    // 0x57bc88: str             d0, [SP]
    // 0x57bc8c: r0 = getMaxIntrinsicWidth()
    //     0x57bc8c: bl              #0x57bca4  ; [package:flutter/src/rendering/box.dart] RenderBox::getMaxIntrinsicWidth
    // 0x57bc90: LeaveFrame
    //     0x57bc90: mov             SP, fp
    //     0x57bc94: ldp             fp, lr, [SP], #0x10
    // 0x57bc98: ret
    //     0x57bc98: ret             
    // 0x57bc9c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x57bc9c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x57bca0: b               #0x57bc6c
  }
  dynamic computeMinIntrinsicHeight(dynamic) {
    // ** addr: 0x583174, size: 0x18
    // 0x583174: r4 = 0
    //     0x583174: movz            x4, #0
    // 0x583178: r1 = Function 'computeMinIntrinsicHeight':.
    //     0x583178: add             x17, PP, #0x4d, lsl #12  ; [pp+0x4d160] AnonymousClosure: (0x58318c), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight (0x5885e8)
    //     0x58317c: ldr             x1, [x17, #0x160]
    // 0x583180: r24 = BuildNonGenericMethodExtractorStub
    //     0x583180: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0x583184: ArrayLoad: r0 = r24[0]  ; List_8
    //     0x583184: ldur            x0, [x24, #0x17]
    // 0x583188: br              x0
  }
  [closure] double computeMinIntrinsicHeight(dynamic, double) {
    // ** addr: 0x58318c, size: 0x4c
    // 0x58318c: EnterFrame
    //     0x58318c: stp             fp, lr, [SP, #-0x10]!
    //     0x583190: mov             fp, SP
    // 0x583194: AllocStack(0x10)
    //     0x583194: sub             SP, SP, #0x10
    // 0x583198: SetupParameters()
    //     0x583198: ldr             x0, [fp, #0x18]
    //     0x58319c: ldur            w1, [x0, #0x17]
    //     0x5831a0: add             x1, x1, HEAP, lsl #32
    // 0x5831a4: CheckStackOverflow
    //     0x5831a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5831a8: cmp             SP, x16
    //     0x5831ac: b.ls            #0x5831d0
    // 0x5831b0: LoadField: r0 = r1->field_f
    //     0x5831b0: ldur            w0, [x1, #0xf]
    // 0x5831b4: DecompressPointer r0
    //     0x5831b4: add             x0, x0, HEAP, lsl #32
    // 0x5831b8: ldr             x16, [fp, #0x10]
    // 0x5831bc: stp             x16, x0, [SP]
    // 0x5831c0: r0 = computeMinIntrinsicHeight()
    //     0x5831c0: bl              #0x5885e8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x5831c4: LeaveFrame
    //     0x5831c4: mov             SP, fp
    //     0x5831c8: ldp             fp, lr, [SP], #0x10
    // 0x5831cc: ret
    //     0x5831cc: ret             
    // 0x5831d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5831d0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5831d4: b               #0x5831b0
  }
  dynamic computeMaxIntrinsicHeight(dynamic) {
    // ** addr: 0x586344, size: 0x18
    // 0x586344: r4 = 0
    //     0x586344: movz            x4, #0
    // 0x586348: r1 = Function 'computeMaxIntrinsicHeight':.
    //     0x586348: add             x17, PP, #0x4d, lsl #12  ; [pp+0x4d158] AnonymousClosure: (0x58635c), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicHeight (0x590db4)
    //     0x58634c: ldr             x1, [x17, #0x158]
    // 0x586350: r24 = BuildNonGenericMethodExtractorStub
    //     0x586350: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0x586354: ArrayLoad: r0 = r24[0]  ; List_8
    //     0x586354: ldur            x0, [x24, #0x17]
    // 0x586358: br              x0
  }
  [closure] double computeMaxIntrinsicHeight(dynamic, double) {
    // ** addr: 0x58635c, size: 0x4c
    // 0x58635c: EnterFrame
    //     0x58635c: stp             fp, lr, [SP, #-0x10]!
    //     0x586360: mov             fp, SP
    // 0x586364: AllocStack(0x10)
    //     0x586364: sub             SP, SP, #0x10
    // 0x586368: SetupParameters()
    //     0x586368: ldr             x0, [fp, #0x18]
    //     0x58636c: ldur            w1, [x0, #0x17]
    //     0x586370: add             x1, x1, HEAP, lsl #32
    // 0x586374: CheckStackOverflow
    //     0x586374: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x586378: cmp             SP, x16
    //     0x58637c: b.ls            #0x5863a0
    // 0x586380: LoadField: r0 = r1->field_f
    //     0x586380: ldur            w0, [x1, #0xf]
    // 0x586384: DecompressPointer r0
    //     0x586384: add             x0, x0, HEAP, lsl #32
    // 0x586388: ldr             x16, [fp, #0x10]
    // 0x58638c: stp             x16, x0, [SP]
    // 0x586390: r0 = computeMinIntrinsicHeight()
    //     0x586390: bl              #0x5885e8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x586394: LeaveFrame
    //     0x586394: mov             SP, fp
    //     0x586398: ldp             fp, lr, [SP], #0x10
    // 0x58639c: ret
    //     0x58639c: ret             
    // 0x5863a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5863a0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5863a4: b               #0x586380
  }
  _ computeMinIntrinsicHeight(/* No info */) {
    // ** addr: 0x5885e8, size: 0x904
    // 0x5885e8: EnterFrame
    //     0x5885e8: stp             fp, lr, [SP, #-0x10]!
    //     0x5885ec: mov             fp, SP
    // 0x5885f0: AllocStack(0x80)
    //     0x5885f0: sub             SP, SP, #0x80
    // 0x5885f4: CheckStackOverflow
    //     0x5885f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5885f8: cmp             SP, x16
    //     0x5885fc: b.ls            #0x588e24
    // 0x588600: ldr             x16, [fp, #0x18]
    // 0x588604: r30 = Instance__DecorationSlot
    //     0x588604: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x588608: ldr             lr, [lr, #0x1b0]
    // 0x58860c: stp             lr, x16, [SP]
    // 0x588610: r0 = childForSlot()
    //     0x588610: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588614: mov             x1, x0
    // 0x588618: ldr             x0, [fp, #0x10]
    // 0x58861c: LoadField: d0 = r0->field_7
    //     0x58861c: ldur            d0, [x0, #7]
    // 0x588620: stur            d0, [fp, #-0x20]
    // 0x588624: str             x1, [SP, #8]
    // 0x588628: str             d0, [SP]
    // 0x58862c: r0 = _minHeight()
    //     0x58862c: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x588630: stur            d0, [fp, #-0x28]
    // 0x588634: ldr             x16, [fp, #0x18]
    // 0x588638: r30 = Instance__DecorationSlot
    //     0x588638: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x58863c: ldr             lr, [lr, #0x1b0]
    // 0x588640: stp             lr, x16, [SP]
    // 0x588644: r0 = childForSlot()
    //     0x588644: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588648: str             x0, [SP, #8]
    // 0x58864c: ldur            d0, [fp, #-0x28]
    // 0x588650: str             d0, [SP]
    // 0x588654: r0 = _minWidth()
    //     0x588654: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x588658: mov             v1.16b, v0.16b
    // 0x58865c: ldur            d0, [fp, #-0x20]
    // 0x588660: fsub            d2, d0, d1
    // 0x588664: d0 = 0.000000
    //     0x588664: eor             v0.16b, v0.16b, v0.16b
    // 0x588668: fcmp            d2, d0
    // 0x58866c: b.vs            #0x58867c
    // 0x588670: b.le            #0x58867c
    // 0x588674: mov             v1.16b, v2.16b
    // 0x588678: b               #0x5886a8
    // 0x58867c: fcmp            d2, d0
    // 0x588680: b.vs            #0x588690
    // 0x588684: b.ge            #0x588690
    // 0x588688: d1 = 0.000000
    //     0x588688: eor             v1.16b, v1.16b, v1.16b
    // 0x58868c: b               #0x5886a8
    // 0x588690: fcmp            d2, d0
    // 0x588694: b.vs            #0x5886a4
    // 0x588698: b.ne            #0x5886a4
    // 0x58869c: fadd            d1, d2, d0
    // 0x5886a0: b               #0x5886a8
    // 0x5886a4: mov             v1.16b, v2.16b
    // 0x5886a8: ldr             x0, [fp, #0x18]
    // 0x5886ac: stur            d1, [fp, #-0x20]
    // 0x5886b0: r16 = Instance__DecorationSlot
    //     0x5886b0: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x5886b4: ldr             x16, [x16, #0x1c0]
    // 0x5886b8: stp             x16, x0, [SP]
    // 0x5886bc: r0 = childForSlot()
    //     0x5886bc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5886c0: str             x0, [SP, #8]
    // 0x5886c4: ldur            d0, [fp, #-0x20]
    // 0x5886c8: str             d0, [SP]
    // 0x5886cc: r0 = _minHeight()
    //     0x5886cc: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x5886d0: stur            d0, [fp, #-0x30]
    // 0x5886d4: ldr             x16, [fp, #0x18]
    // 0x5886d8: r30 = Instance__DecorationSlot
    //     0x5886d8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x5886dc: ldr             lr, [lr, #0x1c0]
    // 0x5886e0: stp             lr, x16, [SP]
    // 0x5886e4: r0 = childForSlot()
    //     0x5886e4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5886e8: str             x0, [SP, #8]
    // 0x5886ec: ldur            d0, [fp, #-0x30]
    // 0x5886f0: str             d0, [SP]
    // 0x5886f4: r0 = _minWidth()
    //     0x5886f4: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x5886f8: stur            d0, [fp, #-0x38]
    // 0x5886fc: ldr             x16, [fp, #0x18]
    // 0x588700: r30 = Instance__DecorationSlot
    //     0x588700: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x588704: ldr             lr, [lr, #0x1c8]
    // 0x588708: stp             lr, x16, [SP]
    // 0x58870c: r0 = childForSlot()
    //     0x58870c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588710: str             x0, [SP, #8]
    // 0x588714: ldur            d0, [fp, #-0x20]
    // 0x588718: str             d0, [SP]
    // 0x58871c: r0 = _minHeight()
    //     0x58871c: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x588720: stur            d0, [fp, #-0x40]
    // 0x588724: ldr             x16, [fp, #0x18]
    // 0x588728: r30 = Instance__DecorationSlot
    //     0x588728: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x58872c: ldr             lr, [lr, #0x1c8]
    // 0x588730: stp             lr, x16, [SP]
    // 0x588734: r0 = childForSlot()
    //     0x588734: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588738: str             x0, [SP, #8]
    // 0x58873c: ldur            d0, [fp, #-0x40]
    // 0x588740: str             d0, [SP]
    // 0x588744: r0 = _minWidth()
    //     0x588744: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x588748: ldr             x0, [fp, #0x18]
    // 0x58874c: stur            d0, [fp, #-0x48]
    // 0x588750: LoadField: r1 = r0->field_63
    //     0x588750: ldur            w1, [x0, #0x63]
    // 0x588754: DecompressPointer r1
    //     0x588754: add             x1, x1, HEAP, lsl #32
    // 0x588758: LoadField: r2 = r1->field_7
    //     0x588758: ldur            w2, [x1, #7]
    // 0x58875c: DecompressPointer r2
    //     0x58875c: add             x2, x2, HEAP, lsl #32
    // 0x588760: LoadField: d1 = r2->field_7
    //     0x588760: ldur            d1, [x2, #7]
    // 0x588764: ArrayLoad: d2 = r2[0]  ; List_8
    //     0x588764: ldur            d2, [x2, #0x17]
    // 0x588768: fadd            d3, d1, d2
    // 0x58876c: d1 = 0.000000
    //     0x58876c: eor             v1.16b, v1.16b, v1.16b
    // 0x588770: fadd            d2, d3, d1
    // 0x588774: fadd            d3, d2, d1
    // 0x588778: ldur            d2, [fp, #-0x20]
    // 0x58877c: fsub            d4, d2, d3
    // 0x588780: fcmp            d4, d1
    // 0x588784: b.vs            #0x588794
    // 0x588788: b.le            #0x588794
    // 0x58878c: mov             v2.16b, v4.16b
    // 0x588790: b               #0x5887c0
    // 0x588794: fcmp            d4, d1
    // 0x588798: b.vs            #0x5887a8
    // 0x58879c: b.ge            #0x5887a8
    // 0x5887a0: d2 = 0.000000
    //     0x5887a0: eor             v2.16b, v2.16b, v2.16b
    // 0x5887a4: b               #0x5887c0
    // 0x5887a8: fcmp            d4, d1
    // 0x5887ac: b.vs            #0x5887bc
    // 0x5887b0: b.ne            #0x5887bc
    // 0x5887b4: fadd            d2, d4, d1
    // 0x5887b8: b               #0x5887c0
    // 0x5887bc: mov             v2.16b, v4.16b
    // 0x5887c0: stur            d2, [fp, #-0x20]
    // 0x5887c4: r16 = Instance__DecorationSlot
    //     0x5887c4: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x5887c8: ldr             x16, [x16, #0x1f0]
    // 0x5887cc: stp             x16, x0, [SP]
    // 0x5887d0: r0 = childForSlot()
    //     0x5887d0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5887d4: str             x0, [SP, #8]
    // 0x5887d8: ldur            d0, [fp, #-0x20]
    // 0x5887dc: str             d0, [SP]
    // 0x5887e0: r0 = _minHeight()
    //     0x5887e0: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x5887e4: stur            d0, [fp, #-0x50]
    // 0x5887e8: ldr             x16, [fp, #0x18]
    // 0x5887ec: r30 = Instance__DecorationSlot
    //     0x5887ec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x5887f0: ldr             lr, [lr, #0x1f0]
    // 0x5887f4: stp             lr, x16, [SP]
    // 0x5887f8: r0 = childForSlot()
    //     0x5887f8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5887fc: str             x0, [SP, #8]
    // 0x588800: ldur            d0, [fp, #-0x50]
    // 0x588804: str             d0, [SP]
    // 0x588808: r0 = _minWidth()
    //     0x588808: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x58880c: mov             v1.16b, v0.16b
    // 0x588810: ldur            d0, [fp, #-0x20]
    // 0x588814: fsub            d2, d0, d1
    // 0x588818: d1 = 0.000000
    //     0x588818: eor             v1.16b, v1.16b, v1.16b
    // 0x58881c: fcmp            d2, d1
    // 0x588820: b.vs            #0x588830
    // 0x588824: b.le            #0x588830
    // 0x588828: mov             v3.16b, v2.16b
    // 0x58882c: b               #0x58885c
    // 0x588830: fcmp            d2, d1
    // 0x588834: b.vs            #0x588844
    // 0x588838: b.ge            #0x588844
    // 0x58883c: d3 = 0.000000
    //     0x58883c: eor             v3.16b, v3.16b, v3.16b
    // 0x588840: b               #0x58885c
    // 0x588844: fcmp            d2, d1
    // 0x588848: b.vs            #0x588858
    // 0x58884c: b.ne            #0x588858
    // 0x588850: fadd            d3, d2, d1
    // 0x588854: b               #0x58885c
    // 0x588858: mov             v3.16b, v2.16b
    // 0x58885c: ldur            d2, [fp, #-0x50]
    // 0x588860: stur            d3, [fp, #-0x58]
    // 0x588864: ldr             x16, [fp, #0x18]
    // 0x588868: r30 = Instance__DecorationSlot
    //     0x588868: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x58886c: ldr             lr, [lr, #0x1e8]
    // 0x588870: stp             lr, x16, [SP]
    // 0x588874: r0 = childForSlot()
    //     0x588874: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588878: str             x0, [SP, #8]
    // 0x58887c: ldur            d0, [fp, #-0x58]
    // 0x588880: str             d0, [SP]
    // 0x588884: r0 = _minHeight()
    //     0x588884: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x588888: mov             v1.16b, v0.16b
    // 0x58888c: ldur            d0, [fp, #-0x50]
    // 0x588890: fcmp            d0, d1
    // 0x588894: b.vs            #0x5888a4
    // 0x588898: b.le            #0x5888a4
    // 0x58889c: d2 = 0.000000
    //     0x58889c: eor             v2.16b, v2.16b, v2.16b
    // 0x5888a0: b               #0x5888e4
    // 0x5888a4: fcmp            d0, d1
    // 0x5888a8: b.vs            #0x5888bc
    // 0x5888ac: b.ge            #0x5888bc
    // 0x5888b0: mov             v0.16b, v1.16b
    // 0x5888b4: d2 = 0.000000
    //     0x5888b4: eor             v2.16b, v2.16b, v2.16b
    // 0x5888b8: b               #0x5888e4
    // 0x5888bc: d2 = 0.000000
    //     0x5888bc: eor             v2.16b, v2.16b, v2.16b
    // 0x5888c0: fcmp            d0, d2
    // 0x5888c4: b.vs            #0x5888d8
    // 0x5888c8: b.ne            #0x5888d8
    // 0x5888cc: fadd            d3, d0, d1
    // 0x5888d0: mov             v0.16b, v3.16b
    // 0x5888d4: b               #0x5888e4
    // 0x5888d8: fcmp            d1, d1
    // 0x5888dc: b.vc            #0x5888e4
    // 0x5888e0: mov             v0.16b, v1.16b
    // 0x5888e4: fcmp            d0, d2
    // 0x5888e8: b.vs            #0x588900
    // 0x5888ec: b.le            #0x588900
    // 0x5888f0: d1 = 8.000000
    //     0x5888f0: fmov            d1, #8.00000000
    // 0x5888f4: fadd            d3, d0, d1
    // 0x5888f8: mov             v4.16b, v3.16b
    // 0x5888fc: b               #0x588904
    // 0x588900: mov             v4.16b, v0.16b
    // 0x588904: ldur            d3, [fp, #-0x38]
    // 0x588908: ldur            d1, [fp, #-0x48]
    // 0x58890c: ldur            d0, [fp, #-0x20]
    // 0x588910: stur            d4, [fp, #-0x50]
    // 0x588914: ldr             x16, [fp, #0x18]
    // 0x588918: r30 = Instance__DecorationSlot
    //     0x588918: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x58891c: ldr             lr, [lr, #0x1d0]
    // 0x588920: stp             lr, x16, [SP]
    // 0x588924: r0 = childForSlot()
    //     0x588924: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588928: str             x0, [SP, #8]
    // 0x58892c: ldur            d0, [fp, #-0x20]
    // 0x588930: str             d0, [SP]
    // 0x588934: r0 = _minHeight()
    //     0x588934: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x588938: stur            d0, [fp, #-0x58]
    // 0x58893c: ldr             x16, [fp, #0x18]
    // 0x588940: r30 = Instance__DecorationSlot
    //     0x588940: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x588944: ldr             lr, [lr, #0x1d0]
    // 0x588948: stp             lr, x16, [SP]
    // 0x58894c: r0 = childForSlot()
    //     0x58894c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588950: str             x0, [SP, #8]
    // 0x588954: ldur            d0, [fp, #-0x58]
    // 0x588958: str             d0, [SP]
    // 0x58895c: r0 = _minWidth()
    //     0x58895c: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x588960: stur            d0, [fp, #-0x60]
    // 0x588964: ldr             x16, [fp, #0x18]
    // 0x588968: r30 = Instance__DecorationSlot
    //     0x588968: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x58896c: ldr             lr, [lr, #0x1d8]
    // 0x588970: stp             lr, x16, [SP]
    // 0x588974: r0 = childForSlot()
    //     0x588974: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588978: str             x0, [SP, #8]
    // 0x58897c: ldur            d0, [fp, #-0x20]
    // 0x588980: str             d0, [SP]
    // 0x588984: r0 = _minHeight()
    //     0x588984: bl              #0x5892ac  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minHeight
    // 0x588988: stur            d0, [fp, #-0x68]
    // 0x58898c: ldr             x16, [fp, #0x18]
    // 0x588990: r30 = Instance__DecorationSlot
    //     0x588990: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x588994: ldr             lr, [lr, #0x1d8]
    // 0x588998: stp             lr, x16, [SP]
    // 0x58899c: r0 = childForSlot()
    //     0x58899c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5889a0: str             x0, [SP, #8]
    // 0x5889a4: ldur            d0, [fp, #-0x68]
    // 0x5889a8: str             d0, [SP]
    // 0x5889ac: r0 = _minWidth()
    //     0x5889ac: bl              #0x57b864  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_minWidth
    // 0x5889b0: mov             v2.16b, v0.16b
    // 0x5889b4: ldur            d1, [fp, #-0x60]
    // 0x5889b8: ldur            d0, [fp, #-0x20]
    // 0x5889bc: fsub            d3, d0, d1
    // 0x5889c0: fsub            d0, d3, d2
    // 0x5889c4: ldur            d1, [fp, #-0x38]
    // 0x5889c8: fsub            d2, d0, d1
    // 0x5889cc: ldur            d0, [fp, #-0x48]
    // 0x5889d0: fsub            d1, d2, d0
    // 0x5889d4: d0 = 0.000000
    //     0x5889d4: eor             v0.16b, v0.16b, v0.16b
    // 0x5889d8: fcmp            d1, d0
    // 0x5889dc: b.vs            #0x5889ec
    // 0x5889e0: b.le            #0x5889ec
    // 0x5889e4: mov             v3.16b, v1.16b
    // 0x5889e8: b               #0x588a1c
    // 0x5889ec: fcmp            d1, d0
    // 0x5889f0: b.vs            #0x588a00
    // 0x5889f4: b.ge            #0x588a00
    // 0x5889f8: d3 = 0.000000
    //     0x5889f8: eor             v3.16b, v3.16b, v3.16b
    // 0x5889fc: b               #0x588a1c
    // 0x588a00: fcmp            d1, d0
    // 0x588a04: b.vs            #0x588a18
    // 0x588a08: b.ne            #0x588a18
    // 0x588a0c: fadd            d2, d1, d0
    // 0x588a10: mov             v3.16b, v2.16b
    // 0x588a14: b               #0x588a1c
    // 0x588a18: mov             v3.16b, v1.16b
    // 0x588a1c: ldr             x0, [fp, #0x18]
    // 0x588a20: ldur            d2, [fp, #-0x58]
    // 0x588a24: ldur            d1, [fp, #-0x68]
    // 0x588a28: stur            d3, [fp, #-0x20]
    // 0x588a2c: r16 = Instance__DecorationSlot
    //     0x588a2c: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x588a30: ldr             x16, [x16, #0x1b8]
    // 0x588a34: stp             x16, x0, [SP]
    // 0x588a38: r0 = childForSlot()
    //     0x588a38: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588a3c: stur            x0, [fp, #-8]
    // 0x588a40: ldr             x16, [fp, #0x18]
    // 0x588a44: r30 = Instance__DecorationSlot
    //     0x588a44: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x588a48: ldr             lr, [lr, #0x1e0]
    // 0x588a4c: stp             lr, x16, [SP]
    // 0x588a50: r0 = childForSlot()
    //     0x588a50: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588a54: r1 = Null
    //     0x588a54: mov             x1, NULL
    // 0x588a58: r2 = 4
    //     0x588a58: movz            x2, #0x4
    // 0x588a5c: stur            x0, [fp, #-0x10]
    // 0x588a60: r0 = AllocateArray()
    //     0x588a60: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x588a64: mov             x2, x0
    // 0x588a68: ldur            x0, [fp, #-8]
    // 0x588a6c: stur            x2, [fp, #-0x18]
    // 0x588a70: StoreField: r2->field_f = r0
    //     0x588a70: stur            w0, [x2, #0xf]
    // 0x588a74: ldur            x0, [fp, #-0x10]
    // 0x588a78: StoreField: r2->field_13 = r0
    //     0x588a78: stur            w0, [x2, #0x13]
    // 0x588a7c: r1 = <RenderBox?>
    //     0x588a7c: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d3c0] TypeArguments: <RenderBox?>
    //     0x588a80: ldr             x1, [x1, #0x3c0]
    // 0x588a84: r0 = AllocateGrowableArray()
    //     0x588a84: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x588a88: mov             x1, x0
    // 0x588a8c: ldur            x0, [fp, #-0x18]
    // 0x588a90: StoreField: r1->field_f = r0
    //     0x588a90: stur            w0, [x1, #0xf]
    // 0x588a94: r0 = 4
    //     0x588a94: movz            x0, #0x4
    // 0x588a98: StoreField: r1->field_b = r0
    //     0x588a98: stur            w0, [x1, #0xb]
    // 0x588a9c: ldr             x16, [fp, #0x18]
    // 0x588aa0: str             x16, [SP, #0x10]
    // 0x588aa4: ldur            d0, [fp, #-0x20]
    // 0x588aa8: str             d0, [SP, #8]
    // 0x588aac: str             x1, [SP]
    // 0x588ab0: r0 = _lineHeight()
    //     0x588ab0: bl              #0x589010  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_lineHeight
    // 0x588ab4: r0 = inline_Allocate_Double()
    //     0x588ab4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588ab8: add             x0, x0, #0x10
    //     0x588abc: cmp             x1, x0
    //     0x588ac0: b.ls            #0x588e2c
    //     0x588ac4: str             x0, [THR, #0x50]  ; THR::top
    //     0x588ac8: sub             x0, x0, #0xf
    //     0x588acc: movz            x1, #0xd148
    //     0x588ad0: movk            x1, #0x3, lsl #16
    //     0x588ad4: stur            x1, [x0, #-1]
    // 0x588ad8: StoreField: r0->field_7 = d0
    //     0x588ad8: stur            d0, [x0, #7]
    // 0x588adc: stur            x0, [fp, #-8]
    // 0x588ae0: r1 = Null
    //     0x588ae0: mov             x1, NULL
    // 0x588ae4: r2 = 6
    //     0x588ae4: movz            x2, #0x6
    // 0x588ae8: r0 = AllocateArray()
    //     0x588ae8: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x588aec: mov             x2, x0
    // 0x588af0: ldur            x0, [fp, #-8]
    // 0x588af4: stur            x2, [fp, #-0x10]
    // 0x588af8: StoreField: r2->field_f = r0
    //     0x588af8: stur            w0, [x2, #0xf]
    // 0x588afc: ldur            d0, [fp, #-0x58]
    // 0x588b00: r0 = inline_Allocate_Double()
    //     0x588b00: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588b04: add             x0, x0, #0x10
    //     0x588b08: cmp             x1, x0
    //     0x588b0c: b.ls            #0x588e3c
    //     0x588b10: str             x0, [THR, #0x50]  ; THR::top
    //     0x588b14: sub             x0, x0, #0xf
    //     0x588b18: movz            x1, #0xd148
    //     0x588b1c: movk            x1, #0x3, lsl #16
    //     0x588b20: stur            x1, [x0, #-1]
    // 0x588b24: StoreField: r0->field_7 = d0
    //     0x588b24: stur            d0, [x0, #7]
    // 0x588b28: StoreField: r2->field_13 = r0
    //     0x588b28: stur            w0, [x2, #0x13]
    // 0x588b2c: ldur            d0, [fp, #-0x68]
    // 0x588b30: r0 = inline_Allocate_Double()
    //     0x588b30: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588b34: add             x0, x0, #0x10
    //     0x588b38: cmp             x1, x0
    //     0x588b3c: b.ls            #0x588e54
    //     0x588b40: str             x0, [THR, #0x50]  ; THR::top
    //     0x588b44: sub             x0, x0, #0xf
    //     0x588b48: movz            x1, #0xd148
    //     0x588b4c: movk            x1, #0x3, lsl #16
    //     0x588b50: stur            x1, [x0, #-1]
    // 0x588b54: StoreField: r0->field_7 = d0
    //     0x588b54: stur            d0, [x0, #7]
    // 0x588b58: ArrayStore: r2[0] = r0  ; List_4
    //     0x588b58: stur            w0, [x2, #0x17]
    // 0x588b5c: r1 = <double>
    //     0x588b5c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0x588b60: r0 = AllocateGrowableArray()
    //     0x588b60: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x588b64: mov             x1, x0
    // 0x588b68: ldur            x0, [fp, #-0x10]
    // 0x588b6c: StoreField: r1->field_f = r0
    //     0x588b6c: stur            w0, [x1, #0xf]
    // 0x588b70: r0 = 6
    //     0x588b70: movz            x0, #0x6
    // 0x588b74: StoreField: r1->field_b = r0
    //     0x588b74: stur            w0, [x1, #0xb]
    // 0x588b78: r16 = Closure: (double, double) => double from Function 'max': static.
    //     0x588b78: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d3c8] Closure: (double, double) => double from Function 'max': static. (0x222f3b4941c)
    //     0x588b7c: ldr             x16, [x16, #0x3c8]
    // 0x588b80: stp             x16, x1, [SP]
    // 0x588b84: r0 = reduce()
    //     0x588b84: bl              #0xad2afc  ; [dart:collection] ListBase::reduce
    // 0x588b88: mov             x1, x0
    // 0x588b8c: ldr             x0, [fp, #0x18]
    // 0x588b90: stur            x1, [fp, #-8]
    // 0x588b94: LoadField: r2 = r0->field_63
    //     0x588b94: ldur            w2, [x0, #0x63]
    // 0x588b98: DecompressPointer r2
    //     0x588b98: add             x2, x2, HEAP, lsl #32
    // 0x588b9c: LoadField: r3 = r2->field_33
    //     0x588b9c: ldur            w3, [x2, #0x33]
    // 0x588ba0: DecompressPointer r3
    //     0x588ba0: add             x3, x3, HEAP, lsl #32
    // 0x588ba4: str             x3, [SP]
    // 0x588ba8: r0 = baseSizeAdjustment()
    //     0x588ba8: bl              #0x588fac  ; [package:flutter/src/material/theme_data.dart] VisualDensity::baseSizeAdjustment
    // 0x588bac: mov             x1, x0
    // 0x588bb0: ldr             x0, [fp, #0x18]
    // 0x588bb4: stur            x1, [fp, #-0x10]
    // 0x588bb8: LoadField: r2 = r0->field_63
    //     0x588bb8: ldur            w2, [x0, #0x63]
    // 0x588bbc: DecompressPointer r2
    //     0x588bbc: add             x2, x2, HEAP, lsl #32
    // 0x588bc0: LoadField: r3 = r2->field_7
    //     0x588bc0: ldur            w3, [x2, #7]
    // 0x588bc4: DecompressPointer r3
    //     0x588bc4: add             x3, x3, HEAP, lsl #32
    // 0x588bc8: LoadField: d0 = r3->field_f
    //     0x588bc8: ldur            d0, [x3, #0xf]
    // 0x588bcc: stur            d0, [fp, #-0x20]
    // 0x588bd0: r16 = Instance__DecorationSlot
    //     0x588bd0: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x588bd4: ldr             x16, [x16, #0x178]
    // 0x588bd8: stp             x16, x0, [SP]
    // 0x588bdc: r0 = childForSlot()
    //     0x588bdc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588be0: cmp             w0, NULL
    // 0x588be4: b.ne            #0x588bf4
    // 0x588be8: ldr             x0, [fp, #0x18]
    // 0x588bec: d4 = 0.000000
    //     0x588bec: eor             v4.16b, v4.16b, v4.16b
    // 0x588bf0: b               #0x588c08
    // 0x588bf4: ldr             x0, [fp, #0x18]
    // 0x588bf8: LoadField: r1 = r0->field_63
    //     0x588bf8: ldur            w1, [x0, #0x63]
    // 0x588bfc: DecompressPointer r1
    //     0x588bfc: add             x1, x1, HEAP, lsl #32
    // 0x588c00: LoadField: d0 = r1->field_f
    //     0x588c00: ldur            d0, [x1, #0xf]
    // 0x588c04: mov             v4.16b, v0.16b
    // 0x588c08: ldur            d3, [fp, #-0x28]
    // 0x588c0c: ldur            d2, [fp, #-0x30]
    // 0x588c10: ldur            d1, [fp, #-0x40]
    // 0x588c14: ldur            x2, [fp, #-8]
    // 0x588c18: ldur            x1, [fp, #-0x10]
    // 0x588c1c: ldur            d0, [fp, #-0x20]
    // 0x588c20: r3 = 8
    //     0x588c20: movz            x3, #0x8
    // 0x588c24: fadd            d5, d0, d4
    // 0x588c28: LoadField: d0 = r2->field_7
    //     0x588c28: ldur            d0, [x2, #7]
    // 0x588c2c: fadd            d4, d5, d0
    // 0x588c30: LoadField: r2 = r0->field_63
    //     0x588c30: ldur            w2, [x0, #0x63]
    // 0x588c34: DecompressPointer r2
    //     0x588c34: add             x2, x2, HEAP, lsl #32
    // 0x588c38: LoadField: r4 = r2->field_7
    //     0x588c38: ldur            w4, [x2, #7]
    // 0x588c3c: DecompressPointer r4
    //     0x588c3c: add             x4, x4, HEAP, lsl #32
    // 0x588c40: LoadField: d0 = r4->field_1f
    //     0x588c40: ldur            d0, [x4, #0x1f]
    // 0x588c44: fadd            d5, d4, d0
    // 0x588c48: LoadField: d0 = r1->field_f
    //     0x588c48: ldur            d0, [x1, #0xf]
    // 0x588c4c: fadd            d4, d5, d0
    // 0x588c50: stur            d4, [fp, #-0x20]
    // 0x588c54: r4 = inline_Allocate_Double()
    //     0x588c54: ldp             x4, x1, [THR, #0x50]  ; THR::top
    //     0x588c58: add             x4, x4, #0x10
    //     0x588c5c: cmp             x1, x4
    //     0x588c60: b.ls            #0x588e6c
    //     0x588c64: str             x4, [THR, #0x50]  ; THR::top
    //     0x588c68: sub             x4, x4, #0xf
    //     0x588c6c: movz            x1, #0xd148
    //     0x588c70: movk            x1, #0x3, lsl #16
    //     0x588c74: stur            x1, [x4, #-1]
    // 0x588c78: StoreField: r4->field_7 = d3
    //     0x588c78: stur            d3, [x4, #7]
    // 0x588c7c: mov             x2, x3
    // 0x588c80: stur            x4, [fp, #-8]
    // 0x588c84: r1 = Null
    //     0x588c84: mov             x1, NULL
    // 0x588c88: r0 = AllocateArray()
    //     0x588c88: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x588c8c: mov             x2, x0
    // 0x588c90: ldur            x0, [fp, #-8]
    // 0x588c94: stur            x2, [fp, #-0x10]
    // 0x588c98: StoreField: r2->field_f = r0
    //     0x588c98: stur            w0, [x2, #0xf]
    // 0x588c9c: ldur            d0, [fp, #-0x20]
    // 0x588ca0: r0 = inline_Allocate_Double()
    //     0x588ca0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588ca4: add             x0, x0, #0x10
    //     0x588ca8: cmp             x1, x0
    //     0x588cac: b.ls            #0x588e90
    //     0x588cb0: str             x0, [THR, #0x50]  ; THR::top
    //     0x588cb4: sub             x0, x0, #0xf
    //     0x588cb8: movz            x1, #0xd148
    //     0x588cbc: movk            x1, #0x3, lsl #16
    //     0x588cc0: stur            x1, [x0, #-1]
    // 0x588cc4: StoreField: r0->field_7 = d0
    //     0x588cc4: stur            d0, [x0, #7]
    // 0x588cc8: StoreField: r2->field_13 = r0
    //     0x588cc8: stur            w0, [x2, #0x13]
    // 0x588ccc: ldur            d0, [fp, #-0x30]
    // 0x588cd0: r0 = inline_Allocate_Double()
    //     0x588cd0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588cd4: add             x0, x0, #0x10
    //     0x588cd8: cmp             x1, x0
    //     0x588cdc: b.ls            #0x588ea8
    //     0x588ce0: str             x0, [THR, #0x50]  ; THR::top
    //     0x588ce4: sub             x0, x0, #0xf
    //     0x588ce8: movz            x1, #0xd148
    //     0x588cec: movk            x1, #0x3, lsl #16
    //     0x588cf0: stur            x1, [x0, #-1]
    // 0x588cf4: StoreField: r0->field_7 = d0
    //     0x588cf4: stur            d0, [x0, #7]
    // 0x588cf8: ArrayStore: r2[0] = r0  ; List_4
    //     0x588cf8: stur            w0, [x2, #0x17]
    // 0x588cfc: ldur            d0, [fp, #-0x40]
    // 0x588d00: r0 = inline_Allocate_Double()
    //     0x588d00: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588d04: add             x0, x0, #0x10
    //     0x588d08: cmp             x1, x0
    //     0x588d0c: b.ls            #0x588ec0
    //     0x588d10: str             x0, [THR, #0x50]  ; THR::top
    //     0x588d14: sub             x0, x0, #0xf
    //     0x588d18: movz            x1, #0xd148
    //     0x588d1c: movk            x1, #0x3, lsl #16
    //     0x588d20: stur            x1, [x0, #-1]
    // 0x588d24: StoreField: r0->field_7 = d0
    //     0x588d24: stur            d0, [x0, #7]
    // 0x588d28: StoreField: r2->field_1b = r0
    //     0x588d28: stur            w0, [x2, #0x1b]
    // 0x588d2c: r1 = <double>
    //     0x588d2c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0x588d30: r0 = AllocateGrowableArray()
    //     0x588d30: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x588d34: mov             x1, x0
    // 0x588d38: ldur            x0, [fp, #-0x10]
    // 0x588d3c: StoreField: r1->field_f = r0
    //     0x588d3c: stur            w0, [x1, #0xf]
    // 0x588d40: r0 = 8
    //     0x588d40: movz            x0, #0x8
    // 0x588d44: StoreField: r1->field_b = r0
    //     0x588d44: stur            w0, [x1, #0xb]
    // 0x588d48: r16 = Closure: (double, double) => double from Function 'max': static.
    //     0x588d48: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d3c8] Closure: (double, double) => double from Function 'max': static. (0x222f3b4941c)
    //     0x588d4c: ldr             x16, [x16, #0x3c8]
    // 0x588d50: stp             x16, x1, [SP]
    // 0x588d54: r0 = reduce()
    //     0x588d54: bl              #0xad2afc  ; [dart:collection] ListBase::reduce
    // 0x588d58: ldr             x1, [fp, #0x18]
    // 0x588d5c: LoadField: r2 = r1->field_63
    //     0x588d5c: ldur            w2, [x1, #0x63]
    // 0x588d60: DecompressPointer r2
    //     0x588d60: add             x2, x2, HEAP, lsl #32
    // 0x588d64: LoadField: r1 = r2->field_2f
    //     0x588d64: ldur            w1, [x2, #0x2f]
    // 0x588d68: DecompressPointer r1
    //     0x588d68: add             x1, x1, HEAP, lsl #32
    // 0x588d6c: cmp             w1, NULL
    // 0x588d70: b.eq            #0x588ed8
    // 0x588d74: tbnz            w1, #4, #0x588d80
    // 0x588d78: d0 = 0.000000
    //     0x588d78: eor             v0.16b, v0.16b, v0.16b
    // 0x588d7c: b               #0x588d84
    // 0x588d80: d0 = 48.000000
    //     0x588d80: ldr             d0, [PP, #0x6518]  ; [pp+0x6518] IMM: double(48) from 0x4048000000000000
    // 0x588d84: LoadField: d1 = r0->field_7
    //     0x588d84: ldur            d1, [x0, #7]
    // 0x588d88: fcmp            d1, d0
    // 0x588d8c: b.vs            #0x588da0
    // 0x588d90: b.le            #0x588da0
    // 0x588d94: LoadField: d2 = r0->field_7
    //     0x588d94: ldur            d2, [x0, #7]
    // 0x588d98: mov             v1.16b, v2.16b
    // 0x588d9c: b               #0x588de8
    // 0x588da0: fcmp            d1, d0
    // 0x588da4: b.vs            #0x588db4
    // 0x588da8: b.ge            #0x588db4
    // 0x588dac: mov             v1.16b, v0.16b
    // 0x588db0: b               #0x588de8
    // 0x588db4: d2 = 0.000000
    //     0x588db4: eor             v2.16b, v2.16b, v2.16b
    // 0x588db8: fcmp            d1, d2
    // 0x588dbc: b.vs            #0x588dd0
    // 0x588dc0: b.ne            #0x588dd0
    // 0x588dc4: fadd            d2, d1, d0
    // 0x588dc8: mov             v1.16b, v2.16b
    // 0x588dcc: b               #0x588de8
    // 0x588dd0: fcmp            d0, d0
    // 0x588dd4: b.vc            #0x588de0
    // 0x588dd8: mov             v1.16b, v0.16b
    // 0x588ddc: b               #0x588de8
    // 0x588de0: LoadField: d0 = r0->field_7
    //     0x588de0: ldur            d0, [x0, #7]
    // 0x588de4: mov             v1.16b, v0.16b
    // 0x588de8: ldur            d0, [fp, #-0x50]
    // 0x588dec: fadd            d2, d1, d0
    // 0x588df0: r0 = inline_Allocate_Double()
    //     0x588df0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x588df4: add             x0, x0, #0x10
    //     0x588df8: cmp             x1, x0
    //     0x588dfc: b.ls            #0x588edc
    //     0x588e00: str             x0, [THR, #0x50]  ; THR::top
    //     0x588e04: sub             x0, x0, #0xf
    //     0x588e08: movz            x1, #0xd148
    //     0x588e0c: movk            x1, #0x3, lsl #16
    //     0x588e10: stur            x1, [x0, #-1]
    // 0x588e14: StoreField: r0->field_7 = d2
    //     0x588e14: stur            d2, [x0, #7]
    // 0x588e18: LeaveFrame
    //     0x588e18: mov             SP, fp
    //     0x588e1c: ldp             fp, lr, [SP], #0x10
    // 0x588e20: ret
    //     0x588e20: ret             
    // 0x588e24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x588e24: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x588e28: b               #0x588600
    // 0x588e2c: SaveReg d0
    //     0x588e2c: str             q0, [SP, #-0x10]!
    // 0x588e30: r0 = AllocateDouble()
    //     0x588e30: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588e34: RestoreReg d0
    //     0x588e34: ldr             q0, [SP], #0x10
    // 0x588e38: b               #0x588ad8
    // 0x588e3c: SaveReg d0
    //     0x588e3c: str             q0, [SP, #-0x10]!
    // 0x588e40: SaveReg r2
    //     0x588e40: str             x2, [SP, #-8]!
    // 0x588e44: r0 = AllocateDouble()
    //     0x588e44: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588e48: RestoreReg r2
    //     0x588e48: ldr             x2, [SP], #8
    // 0x588e4c: RestoreReg d0
    //     0x588e4c: ldr             q0, [SP], #0x10
    // 0x588e50: b               #0x588b24
    // 0x588e54: SaveReg d0
    //     0x588e54: str             q0, [SP, #-0x10]!
    // 0x588e58: SaveReg r2
    //     0x588e58: str             x2, [SP, #-8]!
    // 0x588e5c: r0 = AllocateDouble()
    //     0x588e5c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588e60: RestoreReg r2
    //     0x588e60: ldr             x2, [SP], #8
    // 0x588e64: RestoreReg d0
    //     0x588e64: ldr             q0, [SP], #0x10
    // 0x588e68: b               #0x588b54
    // 0x588e6c: stp             q3, q4, [SP, #-0x20]!
    // 0x588e70: stp             q1, q2, [SP, #-0x20]!
    // 0x588e74: stp             x0, x3, [SP, #-0x10]!
    // 0x588e78: r0 = AllocateDouble()
    //     0x588e78: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588e7c: mov             x4, x0
    // 0x588e80: ldp             x0, x3, [SP], #0x10
    // 0x588e84: ldp             q1, q2, [SP], #0x20
    // 0x588e88: ldp             q3, q4, [SP], #0x20
    // 0x588e8c: b               #0x588c78
    // 0x588e90: SaveReg d0
    //     0x588e90: str             q0, [SP, #-0x10]!
    // 0x588e94: SaveReg r2
    //     0x588e94: str             x2, [SP, #-8]!
    // 0x588e98: r0 = AllocateDouble()
    //     0x588e98: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588e9c: RestoreReg r2
    //     0x588e9c: ldr             x2, [SP], #8
    // 0x588ea0: RestoreReg d0
    //     0x588ea0: ldr             q0, [SP], #0x10
    // 0x588ea4: b               #0x588cc4
    // 0x588ea8: SaveReg d0
    //     0x588ea8: str             q0, [SP, #-0x10]!
    // 0x588eac: SaveReg r2
    //     0x588eac: str             x2, [SP, #-8]!
    // 0x588eb0: r0 = AllocateDouble()
    //     0x588eb0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588eb4: RestoreReg r2
    //     0x588eb4: ldr             x2, [SP], #8
    // 0x588eb8: RestoreReg d0
    //     0x588eb8: ldr             q0, [SP], #0x10
    // 0x588ebc: b               #0x588cf4
    // 0x588ec0: SaveReg d0
    //     0x588ec0: str             q0, [SP, #-0x10]!
    // 0x588ec4: SaveReg r2
    //     0x588ec4: str             x2, [SP, #-8]!
    // 0x588ec8: r0 = AllocateDouble()
    //     0x588ec8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588ecc: RestoreReg r2
    //     0x588ecc: ldr             x2, [SP], #8
    // 0x588ed0: RestoreReg d0
    //     0x588ed0: ldr             q0, [SP], #0x10
    // 0x588ed4: b               #0x588d24
    // 0x588ed8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x588ed8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x588edc: SaveReg d2
    //     0x588edc: str             q2, [SP, #-0x10]!
    // 0x588ee0: r0 = AllocateDouble()
    //     0x588ee0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x588ee4: RestoreReg d2
    //     0x588ee4: ldr             q2, [SP], #0x10
    // 0x588ee8: b               #0x588e14
  }
  get _ label(/* No info */) {
    // ** addr: 0x588eec, size: 0x40
    // 0x588eec: EnterFrame
    //     0x588eec: stp             fp, lr, [SP, #-0x10]!
    //     0x588ef0: mov             fp, SP
    // 0x588ef4: AllocStack(0x10)
    //     0x588ef4: sub             SP, SP, #0x10
    // 0x588ef8: CheckStackOverflow
    //     0x588ef8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x588efc: cmp             SP, x16
    //     0x588f00: b.ls            #0x588f24
    // 0x588f04: ldr             x16, [fp, #0x10]
    // 0x588f08: r30 = Instance__DecorationSlot
    //     0x588f08: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x588f0c: ldr             lr, [lr, #0x178]
    // 0x588f10: stp             lr, x16, [SP]
    // 0x588f14: r0 = childForSlot()
    //     0x588f14: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588f18: LeaveFrame
    //     0x588f18: mov             SP, fp
    //     0x588f1c: ldp             fp, lr, [SP], #0x10
    // 0x588f20: ret
    //     0x588f20: ret             
    // 0x588f24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x588f24: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x588f28: b               #0x588f04
  }
  get _ helperError(/* No info */) {
    // ** addr: 0x588f2c, size: 0x40
    // 0x588f2c: EnterFrame
    //     0x588f2c: stp             fp, lr, [SP, #-0x10]!
    //     0x588f30: mov             fp, SP
    // 0x588f34: AllocStack(0x10)
    //     0x588f34: sub             SP, SP, #0x10
    // 0x588f38: CheckStackOverflow
    //     0x588f38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x588f3c: cmp             SP, x16
    //     0x588f40: b.ls            #0x588f64
    // 0x588f44: ldr             x16, [fp, #0x10]
    // 0x588f48: r30 = Instance__DecorationSlot
    //     0x588f48: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x588f4c: ldr             lr, [lr, #0x1e8]
    // 0x588f50: stp             lr, x16, [SP]
    // 0x588f54: r0 = childForSlot()
    //     0x588f54: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588f58: LeaveFrame
    //     0x588f58: mov             SP, fp
    //     0x588f5c: ldp             fp, lr, [SP], #0x10
    // 0x588f60: ret
    //     0x588f60: ret             
    // 0x588f64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x588f64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x588f68: b               #0x588f44
  }
  get _ counter(/* No info */) {
    // ** addr: 0x588f6c, size: 0x40
    // 0x588f6c: EnterFrame
    //     0x588f6c: stp             fp, lr, [SP, #-0x10]!
    //     0x588f70: mov             fp, SP
    // 0x588f74: AllocStack(0x10)
    //     0x588f74: sub             SP, SP, #0x10
    // 0x588f78: CheckStackOverflow
    //     0x588f78: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x588f7c: cmp             SP, x16
    //     0x588f80: b.ls            #0x588fa4
    // 0x588f84: ldr             x16, [fp, #0x10]
    // 0x588f88: r30 = Instance__DecorationSlot
    //     0x588f88: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x588f8c: ldr             lr, [lr, #0x1f0]
    // 0x588f90: stp             lr, x16, [SP]
    // 0x588f94: r0 = childForSlot()
    //     0x588f94: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x588f98: LeaveFrame
    //     0x588f98: mov             SP, fp
    //     0x588f9c: ldp             fp, lr, [SP], #0x10
    // 0x588fa0: ret
    //     0x588fa0: ret             
    // 0x588fa4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x588fa4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x588fa8: b               #0x588f84
  }
  _ _lineHeight(/* No info */) {
    // ** addr: 0x589010, size: 0x29c
    // 0x589010: EnterFrame
    //     0x589010: stp             fp, lr, [SP, #-0x10]!
    //     0x589014: mov             fp, SP
    // 0x589018: AllocStack(0x40)
    //     0x589018: sub             SP, SP, #0x40
    // 0x58901c: CheckStackOverflow
    //     0x58901c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x589020: cmp             SP, x16
    //     0x589024: b.ls            #0x589278
    // 0x589028: ldr             x0, [fp, #0x10]
    // 0x58902c: LoadField: r3 = r0->field_7
    //     0x58902c: ldur            w3, [x0, #7]
    // 0x589030: DecompressPointer r3
    //     0x589030: add             x3, x3, HEAP, lsl #32
    // 0x589034: stur            x3, [fp, #-0x28]
    // 0x589038: LoadField: r1 = r0->field_b
    //     0x589038: ldur            w1, [x0, #0xb]
    // 0x58903c: DecompressPointer r1
    //     0x58903c: add             x1, x1, HEAP, lsl #32
    // 0x589040: r4 = LoadInt32Instr(r1)
    //     0x589040: sbfx            x4, x1, #1, #0x1f
    // 0x589044: stur            x4, [fp, #-0x20]
    // 0x589048: r5 = 0.000000
    //     0x589048: ldr             x5, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x58904c: r2 = 0
    //     0x58904c: movz            x2, #0
    // 0x589050: ldr             d0, [fp, #0x18]
    // 0x589054: stur            x5, [fp, #-0x18]
    // 0x589058: CheckStackOverflow
    //     0x589058: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x58905c: cmp             SP, x16
    //     0x589060: b.ls            #0x589280
    // 0x589064: LoadField: r1 = r0->field_b
    //     0x589064: ldur            w1, [x0, #0xb]
    // 0x589068: DecompressPointer r1
    //     0x589068: add             x1, x1, HEAP, lsl #32
    // 0x58906c: r6 = LoadInt32Instr(r1)
    //     0x58906c: sbfx            x6, x1, #1, #0x1f
    // 0x589070: cmp             x4, x6
    // 0x589074: b.ne            #0x589264
    // 0x589078: mov             x7, x0
    // 0x58907c: cmp             x2, x6
    // 0x589080: b.lt            #0x589094
    // 0x589084: LoadField: d0 = r5->field_7
    //     0x589084: ldur            d0, [x5, #7]
    // 0x589088: LeaveFrame
    //     0x589088: mov             SP, fp
    //     0x58908c: ldp             fp, lr, [SP], #0x10
    // 0x589090: ret
    //     0x589090: ret             
    // 0x589094: mov             x0, x6
    // 0x589098: mov             x1, x2
    // 0x58909c: cmp             x1, x0
    // 0x5890a0: b.hs            #0x589288
    // 0x5890a4: LoadField: r0 = r7->field_f
    //     0x5890a4: ldur            w0, [x7, #0xf]
    // 0x5890a8: DecompressPointer r0
    //     0x5890a8: add             x0, x0, HEAP, lsl #32
    // 0x5890ac: ArrayLoad: r6 = r0[r2]  ; Unknown_4
    //     0x5890ac: add             x16, x0, x2, lsl #2
    //     0x5890b0: ldur            w6, [x16, #0xf]
    // 0x5890b4: DecompressPointer r6
    //     0x5890b4: add             x6, x6, HEAP, lsl #32
    // 0x5890b8: stur            x6, [fp, #-0x10]
    // 0x5890bc: add             x8, x2, #1
    // 0x5890c0: stur            x8, [fp, #-8]
    // 0x5890c4: cmp             w6, NULL
    // 0x5890c8: b.ne            #0x5890fc
    // 0x5890cc: mov             x0, x6
    // 0x5890d0: mov             x2, x3
    // 0x5890d4: r1 = Null
    //     0x5890d4: mov             x1, NULL
    // 0x5890d8: cmp             w2, NULL
    // 0x5890dc: b.eq            #0x5890fc
    // 0x5890e0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x5890e0: ldur            w4, [x2, #0x17]
    // 0x5890e4: DecompressPointer r4
    //     0x5890e4: add             x4, x4, HEAP, lsl #32
    // 0x5890e8: r8 = X0
    //     0x5890e8: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x5890ec: LoadField: r9 = r4->field_7
    //     0x5890ec: ldur            x9, [x4, #7]
    // 0x5890f0: r3 = Null
    //     0x5890f0: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d3e0] Null
    //     0x5890f4: ldr             x3, [x3, #0x3e0]
    // 0x5890f8: blr             x9
    // 0x5890fc: ldur            x0, [fp, #-0x10]
    // 0x589100: cmp             w0, NULL
    // 0x589104: b.ne            #0x589110
    // 0x589108: ldur            x5, [fp, #-0x18]
    // 0x58910c: b               #0x589250
    // 0x589110: ldr             d0, [fp, #0x18]
    // 0x589114: str             x0, [SP, #8]
    // 0x589118: str             d0, [SP]
    // 0x58911c: r0 = getMinIntrinsicHeight()
    //     0x58911c: bl              #0x57a82c  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicHeight
    // 0x589120: stur            d0, [fp, #-0x30]
    // 0x589124: r0 = inline_Allocate_Double()
    //     0x589124: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x589128: add             x0, x0, #0x10
    //     0x58912c: cmp             x1, x0
    //     0x589130: b.ls            #0x58928c
    //     0x589134: str             x0, [THR, #0x50]  ; THR::top
    //     0x589138: sub             x0, x0, #0xf
    //     0x58913c: movz            x1, #0xd148
    //     0x589140: movk            x1, #0x3, lsl #16
    //     0x589144: stur            x1, [x0, #-1]
    // 0x589148: StoreField: r0->field_7 = d0
    //     0x589148: stur            d0, [x0, #7]
    // 0x58914c: stur            x0, [fp, #-0x10]
    // 0x589150: ldur            x16, [fp, #-0x18]
    // 0x589154: stp             x16, x0, [SP]
    // 0x589158: r0 = >()
    //     0x589158: bl              #0xc5cb80  ; [dart:core] _Double::>
    // 0x58915c: tbnz            w0, #4, #0x589168
    // 0x589160: ldur            x0, [fp, #-0x10]
    // 0x589164: b               #0x58924c
    // 0x589168: ldur            x16, [fp, #-0x10]
    // 0x58916c: ldur            lr, [fp, #-0x18]
    // 0x589170: stp             lr, x16, [SP]
    // 0x589174: r0 = <()
    //     0x589174: bl              #0xc5c570  ; [dart:core] _Double::<
    // 0x589178: tbnz            w0, #4, #0x589184
    // 0x58917c: ldur            x0, [fp, #-0x18]
    // 0x589180: b               #0x58924c
    // 0x589184: ldur            x1, [fp, #-0x18]
    // 0x589188: r0 = LoadTaggedClassIdMayBeSmiInstr(r1)
    //     0x589188: movz            x0, #0x76
    //     0x58918c: tbz             w1, #0, #0x58919c
    //     0x589190: ldur            x0, [x1, #-1]
    //     0x589194: ubfx            x0, x0, #0xc, #0x14
    //     0x589198: lsl             x0, x0, #1
    // 0x58919c: cmp             w0, #0x7a
    // 0x5891a0: b.ne            #0x589208
    // 0x5891a4: ldur            d0, [fp, #-0x30]
    // 0x5891a8: d1 = 0.000000
    //     0x5891a8: eor             v1.16b, v1.16b, v1.16b
    // 0x5891ac: fcmp            d0, d1
    // 0x5891b0: b.vs            #0x5891ec
    // 0x5891b4: b.ne            #0x5891ec
    // 0x5891b8: LoadField: d2 = r1->field_7
    //     0x5891b8: ldur            d2, [x1, #7]
    // 0x5891bc: fadd            d3, d0, d2
    // 0x5891c0: r0 = inline_Allocate_Double()
    //     0x5891c0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x5891c4: add             x0, x0, #0x10
    //     0x5891c8: cmp             x1, x0
    //     0x5891cc: b.ls            #0x58929c
    //     0x5891d0: str             x0, [THR, #0x50]  ; THR::top
    //     0x5891d4: sub             x0, x0, #0xf
    //     0x5891d8: movz            x1, #0xd148
    //     0x5891dc: movk            x1, #0x3, lsl #16
    //     0x5891e0: stur            x1, [x0, #-1]
    // 0x5891e4: StoreField: r0->field_7 = d3
    //     0x5891e4: stur            d3, [x0, #7]
    // 0x5891e8: b               #0x58924c
    // 0x5891ec: LoadField: d0 = r1->field_7
    //     0x5891ec: ldur            d0, [x1, #7]
    // 0x5891f0: fcmp            d0, d0
    // 0x5891f4: b.vc            #0x589200
    // 0x5891f8: mov             x0, x1
    // 0x5891fc: b               #0x58924c
    // 0x589200: ldur            x0, [fp, #-0x10]
    // 0x589204: b               #0x58924c
    // 0x589208: d1 = 0.000000
    //     0x589208: eor             v1.16b, v1.16b, v1.16b
    // 0x58920c: r0 = 59
    //     0x58920c: movz            x0, #0x3b
    // 0x589210: branchIfSmi(r1, 0x58921c)
    //     0x589210: tbz             w1, #0, #0x58921c
    // 0x589214: r0 = LoadClassIdInstr(r1)
    //     0x589214: ldur            x0, [x1, #-1]
    //     0x589218: ubfx            x0, x0, #0xc, #0x14
    // 0x58921c: stp             xzr, x1, [SP]
    // 0x589220: mov             lr, x0
    // 0x589224: ldr             lr, [x21, lr, lsl #3]
    // 0x589228: blr             lr
    // 0x58922c: tbnz            w0, #4, #0x589248
    // 0x589230: ldur            x16, [fp, #-0x10]
    // 0x589234: str             x16, [SP]
    // 0x589238: r0 = isNegative()
    //     0x589238: bl              #0xc5c7f4  ; [dart:core] _Double::isNegative
    // 0x58923c: tbnz            w0, #4, #0x589248
    // 0x589240: ldur            x0, [fp, #-0x18]
    // 0x589244: b               #0x58924c
    // 0x589248: ldur            x0, [fp, #-0x10]
    // 0x58924c: mov             x5, x0
    // 0x589250: ldur            x2, [fp, #-8]
    // 0x589254: ldr             x0, [fp, #0x10]
    // 0x589258: ldur            x3, [fp, #-0x28]
    // 0x58925c: ldur            x4, [fp, #-0x20]
    // 0x589260: b               #0x589050
    // 0x589264: r0 = ConcurrentModificationError()
    //     0x589264: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x589268: ldr             x7, [fp, #0x10]
    // 0x58926c: StoreField: r0->field_b = r7
    //     0x58926c: stur            w7, [x0, #0xb]
    // 0x589270: r0 = Throw()
    //     0x589270: bl              #0xc5d2b8  ; ThrowStub
    // 0x589274: brk             #0
    // 0x589278: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x589278: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x58927c: b               #0x589028
    // 0x589280: r0 = StackOverflowSharedWithFPURegs()
    //     0x589280: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0x589284: b               #0x589064
    // 0x589288: r0 = RangeErrorSharedWithFPURegs()
    //     0x589288: bl              #0xc5f360  ; RangeErrorSharedWithFPURegsStub
    // 0x58928c: SaveReg d0
    //     0x58928c: str             q0, [SP, #-0x10]!
    // 0x589290: r0 = AllocateDouble()
    //     0x589290: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x589294: RestoreReg d0
    //     0x589294: ldr             q0, [SP], #0x10
    // 0x589298: b               #0x589148
    // 0x58929c: stp             q1, q3, [SP, #-0x20]!
    // 0x5892a0: r0 = AllocateDouble()
    //     0x5892a0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5892a4: ldp             q1, q3, [SP], #0x20
    // 0x5892a8: b               #0x5891e4
  }
  static _ _minHeight(/* No info */) {
    // ** addr: 0x5892ac, size: 0x50
    // 0x5892ac: EnterFrame
    //     0x5892ac: stp             fp, lr, [SP, #-0x10]!
    //     0x5892b0: mov             fp, SP
    // 0x5892b4: AllocStack(0x10)
    //     0x5892b4: sub             SP, SP, #0x10
    // 0x5892b8: CheckStackOverflow
    //     0x5892b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5892bc: cmp             SP, x16
    //     0x5892c0: b.ls            #0x5892f4
    // 0x5892c4: ldr             x0, [fp, #0x18]
    // 0x5892c8: cmp             w0, NULL
    // 0x5892cc: b.ne            #0x5892d8
    // 0x5892d0: d0 = 0.000000
    //     0x5892d0: eor             v0.16b, v0.16b, v0.16b
    // 0x5892d4: b               #0x5892e8
    // 0x5892d8: ldr             d0, [fp, #0x10]
    // 0x5892dc: str             x0, [SP, #8]
    // 0x5892e0: str             d0, [SP]
    // 0x5892e4: r0 = getMinIntrinsicHeight()
    //     0x5892e4: bl              #0x57a82c  ; [package:flutter/src/rendering/box.dart] RenderBox::getMinIntrinsicHeight
    // 0x5892e8: LeaveFrame
    //     0x5892e8: mov             SP, fp
    //     0x5892ec: ldp             fp, lr, [SP], #0x10
    // 0x5892f0: ret
    //     0x5892f0: ret             
    // 0x5892f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5892f4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5892f8: b               #0x5892c4
  }
  dynamic computeMaxIntrinsicWidth(dynamic) {
    // ** addr: 0x58aba4, size: 0x18
    // 0x58aba4: r4 = 0
    //     0x58aba4: movz            x4, #0
    // 0x58aba8: r1 = Function 'computeMaxIntrinsicWidth':.
    //     0x58aba8: add             x17, PP, #0x4d, lsl #12  ; [pp+0x4d168] AnonymousClosure: (0x58abbc), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicWidth (0x58e7f0)
    //     0x58abac: ldr             x1, [x17, #0x168]
    // 0x58abb0: r24 = BuildNonGenericMethodExtractorStub
    //     0x58abb0: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0x58abb4: ArrayLoad: r0 = r24[0]  ; List_8
    //     0x58abb4: ldur            x0, [x24, #0x17]
    // 0x58abb8: br              x0
  }
  [closure] double computeMaxIntrinsicWidth(dynamic, double) {
    // ** addr: 0x58abbc, size: 0x4c
    // 0x58abbc: EnterFrame
    //     0x58abbc: stp             fp, lr, [SP, #-0x10]!
    //     0x58abc0: mov             fp, SP
    // 0x58abc4: AllocStack(0x10)
    //     0x58abc4: sub             SP, SP, #0x10
    // 0x58abc8: SetupParameters()
    //     0x58abc8: ldr             x0, [fp, #0x18]
    //     0x58abcc: ldur            w1, [x0, #0x17]
    //     0x58abd0: add             x1, x1, HEAP, lsl #32
    // 0x58abd4: CheckStackOverflow
    //     0x58abd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x58abd8: cmp             SP, x16
    //     0x58abdc: b.ls            #0x58ac00
    // 0x58abe0: LoadField: r0 = r1->field_f
    //     0x58abe0: ldur            w0, [x1, #0xf]
    // 0x58abe4: DecompressPointer r0
    //     0x58abe4: add             x0, x0, HEAP, lsl #32
    // 0x58abe8: ldr             x16, [fp, #0x10]
    // 0x58abec: stp             x16, x0, [SP]
    // 0x58abf0: r0 = computeMaxIntrinsicWidth()
    //     0x58abf0: bl              #0x58e7f0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMaxIntrinsicWidth
    // 0x58abf4: LeaveFrame
    //     0x58abf4: mov             SP, fp
    //     0x58abf8: ldp             fp, lr, [SP], #0x10
    // 0x58abfc: ret
    //     0x58abfc: ret             
    // 0x58ac00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x58ac00: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x58ac04: b               #0x58abe0
  }
  _ computeDistanceToActualBaseline(/* No info */) {
    // ** addr: 0x58b814, size: 0x154
    // 0x58b814: EnterFrame
    //     0x58b814: stp             fp, lr, [SP, #-0x10]!
    //     0x58b818: mov             fp, SP
    // 0x58b81c: AllocStack(0x20)
    //     0x58b81c: sub             SP, SP, #0x20
    // 0x58b820: CheckStackOverflow
    //     0x58b820: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x58b824: cmp             SP, x16
    //     0x58b828: b.ls            #0x58b948
    // 0x58b82c: ldr             x16, [fp, #0x18]
    // 0x58b830: r30 = Instance__DecorationSlot
    //     0x58b830: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x58b834: ldr             lr, [lr, #0x1b8]
    // 0x58b838: stp             lr, x16, [SP]
    // 0x58b83c: r0 = childForSlot()
    //     0x58b83c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58b840: cmp             w0, NULL
    // 0x58b844: b.eq            #0x58b950
    // 0x58b848: LoadField: r3 = r0->field_7
    //     0x58b848: ldur            w3, [x0, #7]
    // 0x58b84c: DecompressPointer r3
    //     0x58b84c: add             x3, x3, HEAP, lsl #32
    // 0x58b850: stur            x3, [fp, #-8]
    // 0x58b854: cmp             w3, NULL
    // 0x58b858: b.eq            #0x58b954
    // 0x58b85c: mov             x0, x3
    // 0x58b860: r2 = Null
    //     0x58b860: mov             x2, NULL
    // 0x58b864: r1 = Null
    //     0x58b864: mov             x1, NULL
    // 0x58b868: r4 = LoadClassIdInstr(r0)
    //     0x58b868: ldur            x4, [x0, #-1]
    //     0x58b86c: ubfx            x4, x4, #0xc, #0x14
    // 0x58b870: sub             x4, x4, #0x892
    // 0x58b874: cmp             x4, #0xd
    // 0x58b878: b.ls            #0x58b890
    // 0x58b87c: r8 = BoxParentData
    //     0x58b87c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x58b880: ldr             x8, [x8, #0x318]
    // 0x58b884: r3 = Null
    //     0x58b884: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d3b0] Null
    //     0x58b888: ldr             x3, [x3, #0x3b0]
    // 0x58b88c: r0 = DefaultTypeTest()
    //     0x58b88c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x58b890: ldur            x0, [fp, #-8]
    // 0x58b894: LoadField: r1 = r0->field_7
    //     0x58b894: ldur            w1, [x0, #7]
    // 0x58b898: DecompressPointer r1
    //     0x58b898: add             x1, x1, HEAP, lsl #32
    // 0x58b89c: LoadField: d0 = r1->field_f
    //     0x58b89c: ldur            d0, [x1, #0xf]
    // 0x58b8a0: stur            d0, [fp, #-0x10]
    // 0x58b8a4: ldr             x16, [fp, #0x18]
    // 0x58b8a8: r30 = Instance__DecorationSlot
    //     0x58b8a8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x58b8ac: ldr             lr, [lr, #0x1b8]
    // 0x58b8b0: stp             lr, x16, [SP]
    // 0x58b8b4: r0 = childForSlot()
    //     0x58b8b4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58b8b8: cmp             w0, NULL
    // 0x58b8bc: b.ne            #0x58b8c8
    // 0x58b8c0: r1 = Null
    //     0x58b8c0: mov             x1, NULL
    // 0x58b8c4: b               #0x58b8f4
    // 0x58b8c8: r1 = LoadClassIdInstr(r0)
    //     0x58b8c8: ldur            x1, [x0, #-1]
    //     0x58b8cc: ubfx            x1, x1, #0xc, #0x14
    // 0x58b8d0: ldr             x16, [fp, #0x10]
    // 0x58b8d4: stp             x16, x0, [SP]
    // 0x58b8d8: mov             x0, x1
    // 0x58b8dc: r0 = GDT[cid_x0 + 0x118a7]()
    //     0x58b8dc: movz            x17, #0x18a7
    //     0x58b8e0: movk            x17, #0x1, lsl #16
    //     0x58b8e4: add             lr, x0, x17
    //     0x58b8e8: ldr             lr, [x21, lr, lsl #3]
    //     0x58b8ec: blr             lr
    // 0x58b8f0: mov             x1, x0
    // 0x58b8f4: cmp             w1, NULL
    // 0x58b8f8: b.ne            #0x58b904
    // 0x58b8fc: d1 = 0.000000
    //     0x58b8fc: eor             v1.16b, v1.16b, v1.16b
    // 0x58b900: b               #0x58b90c
    // 0x58b904: LoadField: d0 = r1->field_7
    //     0x58b904: ldur            d0, [x1, #7]
    // 0x58b908: mov             v1.16b, v0.16b
    // 0x58b90c: ldur            d0, [fp, #-0x10]
    // 0x58b910: fadd            d2, d0, d1
    // 0x58b914: r0 = inline_Allocate_Double()
    //     0x58b914: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x58b918: add             x0, x0, #0x10
    //     0x58b91c: cmp             x1, x0
    //     0x58b920: b.ls            #0x58b958
    //     0x58b924: str             x0, [THR, #0x50]  ; THR::top
    //     0x58b928: sub             x0, x0, #0xf
    //     0x58b92c: movz            x1, #0xd148
    //     0x58b930: movk            x1, #0x3, lsl #16
    //     0x58b934: stur            x1, [x0, #-1]
    // 0x58b938: StoreField: r0->field_7 = d2
    //     0x58b938: stur            d2, [x0, #7]
    // 0x58b93c: LeaveFrame
    //     0x58b93c: mov             SP, fp
    //     0x58b940: ldp             fp, lr, [SP], #0x10
    // 0x58b944: ret
    //     0x58b944: ret             
    // 0x58b948: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x58b948: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x58b94c: b               #0x58b82c
    // 0x58b950: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x58b950: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x58b954: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x58b954: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x58b958: SaveReg d2
    //     0x58b958: str             q2, [SP, #-0x10]!
    // 0x58b95c: r0 = AllocateDouble()
    //     0x58b95c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x58b960: RestoreReg d2
    //     0x58b960: ldr             q2, [SP], #0x10
    // 0x58b964: b               #0x58b938
  }
  _ computeMaxIntrinsicWidth(/* No info */) {
    // ** addr: 0x58e7f0, size: 0x250
    // 0x58e7f0: EnterFrame
    //     0x58e7f0: stp             fp, lr, [SP, #-0x10]!
    //     0x58e7f4: mov             fp, SP
    // 0x58e7f8: AllocStack(0x28)
    //     0x58e7f8: sub             SP, SP, #0x28
    // 0x58e7fc: CheckStackOverflow
    //     0x58e7fc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x58e800: cmp             SP, x16
    //     0x58e804: b.ls            #0x58ea28
    // 0x58e808: ldr             x16, [fp, #0x18]
    // 0x58e80c: r30 = Instance__DecorationSlot
    //     0x58e80c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x58e810: ldr             lr, [lr, #0x1b0]
    // 0x58e814: stp             lr, x16, [SP]
    // 0x58e818: r0 = childForSlot()
    //     0x58e818: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e81c: mov             x1, x0
    // 0x58e820: ldr             x0, [fp, #0x10]
    // 0x58e824: LoadField: d0 = r0->field_7
    //     0x58e824: ldur            d0, [x0, #7]
    // 0x58e828: stur            d0, [fp, #-8]
    // 0x58e82c: str             x1, [SP, #8]
    // 0x58e830: str             d0, [SP]
    // 0x58e834: r0 = _maxWidth()
    //     0x58e834: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e838: ldr             x0, [fp, #0x18]
    // 0x58e83c: LoadField: r1 = r0->field_63
    //     0x58e83c: ldur            w1, [x0, #0x63]
    // 0x58e840: DecompressPointer r1
    //     0x58e840: add             x1, x1, HEAP, lsl #32
    // 0x58e844: LoadField: r2 = r1->field_7
    //     0x58e844: ldur            w2, [x1, #7]
    // 0x58e848: DecompressPointer r2
    //     0x58e848: add             x2, x2, HEAP, lsl #32
    // 0x58e84c: LoadField: d1 = r2->field_7
    //     0x58e84c: ldur            d1, [x2, #7]
    // 0x58e850: fadd            d2, d0, d1
    // 0x58e854: stur            d2, [fp, #-0x10]
    // 0x58e858: r16 = Instance__DecorationSlot
    //     0x58e858: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x58e85c: ldr             x16, [x16, #0x1c0]
    // 0x58e860: stp             x16, x0, [SP]
    // 0x58e864: r0 = childForSlot()
    //     0x58e864: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e868: str             x0, [SP, #8]
    // 0x58e86c: ldur            d0, [fp, #-8]
    // 0x58e870: str             d0, [SP]
    // 0x58e874: r0 = _maxWidth()
    //     0x58e874: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e878: mov             v1.16b, v0.16b
    // 0x58e87c: ldur            d0, [fp, #-0x10]
    // 0x58e880: fadd            d2, d0, d1
    // 0x58e884: stur            d2, [fp, #-0x18]
    // 0x58e888: ldr             x16, [fp, #0x18]
    // 0x58e88c: r30 = Instance__DecorationSlot
    //     0x58e88c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x58e890: ldr             lr, [lr, #0x1d0]
    // 0x58e894: stp             lr, x16, [SP]
    // 0x58e898: r0 = childForSlot()
    //     0x58e898: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e89c: str             x0, [SP, #8]
    // 0x58e8a0: ldur            d0, [fp, #-8]
    // 0x58e8a4: str             d0, [SP]
    // 0x58e8a8: r0 = _maxWidth()
    //     0x58e8a8: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e8ac: mov             v1.16b, v0.16b
    // 0x58e8b0: ldur            d0, [fp, #-0x18]
    // 0x58e8b4: fadd            d2, d0, d1
    // 0x58e8b8: stur            d2, [fp, #-0x10]
    // 0x58e8bc: ldr             x16, [fp, #0x18]
    // 0x58e8c0: r30 = Instance__DecorationSlot
    //     0x58e8c0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x58e8c4: ldr             lr, [lr, #0x1b8]
    // 0x58e8c8: stp             lr, x16, [SP]
    // 0x58e8cc: r0 = childForSlot()
    //     0x58e8cc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e8d0: str             x0, [SP, #8]
    // 0x58e8d4: ldur            d0, [fp, #-8]
    // 0x58e8d8: str             d0, [SP]
    // 0x58e8dc: r0 = _maxWidth()
    //     0x58e8dc: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e8e0: stur            d0, [fp, #-0x18]
    // 0x58e8e4: ldr             x16, [fp, #0x18]
    // 0x58e8e8: r30 = Instance__DecorationSlot
    //     0x58e8e8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x58e8ec: ldr             lr, [lr, #0x1e0]
    // 0x58e8f0: stp             lr, x16, [SP]
    // 0x58e8f4: r0 = childForSlot()
    //     0x58e8f4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e8f8: str             x0, [SP, #8]
    // 0x58e8fc: ldur            d0, [fp, #-8]
    // 0x58e900: str             d0, [SP]
    // 0x58e904: r0 = _maxWidth()
    //     0x58e904: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e908: mov             v1.16b, v0.16b
    // 0x58e90c: ldur            d0, [fp, #-0x18]
    // 0x58e910: fcmp            d0, d1
    // 0x58e914: b.vs            #0x58e924
    // 0x58e918: b.le            #0x58e924
    // 0x58e91c: mov             v2.16b, v0.16b
    // 0x58e920: b               #0x58e964
    // 0x58e924: fcmp            d0, d1
    // 0x58e928: b.vs            #0x58e938
    // 0x58e92c: b.ge            #0x58e938
    // 0x58e930: mov             v2.16b, v1.16b
    // 0x58e934: b               #0x58e964
    // 0x58e938: d2 = 0.000000
    //     0x58e938: eor             v2.16b, v2.16b, v2.16b
    // 0x58e93c: fcmp            d0, d2
    // 0x58e940: b.vs            #0x58e950
    // 0x58e944: b.ne            #0x58e950
    // 0x58e948: fadd            d2, d0, d1
    // 0x58e94c: b               #0x58e964
    // 0x58e950: fcmp            d1, d1
    // 0x58e954: b.vc            #0x58e960
    // 0x58e958: mov             v2.16b, v1.16b
    // 0x58e95c: b               #0x58e964
    // 0x58e960: mov             v2.16b, v0.16b
    // 0x58e964: ldr             x0, [fp, #0x18]
    // 0x58e968: ldur            d1, [fp, #-0x10]
    // 0x58e96c: ldur            d0, [fp, #-8]
    // 0x58e970: fadd            d3, d1, d2
    // 0x58e974: stur            d3, [fp, #-0x18]
    // 0x58e978: r16 = Instance__DecorationSlot
    //     0x58e978: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x58e97c: ldr             x16, [x16, #0x1d8]
    // 0x58e980: stp             x16, x0, [SP]
    // 0x58e984: r0 = childForSlot()
    //     0x58e984: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e988: str             x0, [SP, #8]
    // 0x58e98c: ldur            d0, [fp, #-8]
    // 0x58e990: str             d0, [SP]
    // 0x58e994: r0 = _maxWidth()
    //     0x58e994: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e998: mov             v1.16b, v0.16b
    // 0x58e99c: ldur            d0, [fp, #-0x18]
    // 0x58e9a0: fadd            d2, d0, d1
    // 0x58e9a4: stur            d2, [fp, #-0x10]
    // 0x58e9a8: ldr             x16, [fp, #0x18]
    // 0x58e9ac: r30 = Instance__DecorationSlot
    //     0x58e9ac: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x58e9b0: ldr             lr, [lr, #0x1c8]
    // 0x58e9b4: stp             lr, x16, [SP]
    // 0x58e9b8: r0 = childForSlot()
    //     0x58e9b8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x58e9bc: str             x0, [SP, #8]
    // 0x58e9c0: ldur            d0, [fp, #-8]
    // 0x58e9c4: str             d0, [SP]
    // 0x58e9c8: r0 = _maxWidth()
    //     0x58e9c8: bl              #0x57bc54  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_maxWidth
    // 0x58e9cc: mov             v1.16b, v0.16b
    // 0x58e9d0: ldur            d0, [fp, #-0x10]
    // 0x58e9d4: fadd            d2, d0, d1
    // 0x58e9d8: ldr             x1, [fp, #0x18]
    // 0x58e9dc: LoadField: r2 = r1->field_63
    //     0x58e9dc: ldur            w2, [x1, #0x63]
    // 0x58e9e0: DecompressPointer r2
    //     0x58e9e0: add             x2, x2, HEAP, lsl #32
    // 0x58e9e4: LoadField: r1 = r2->field_7
    //     0x58e9e4: ldur            w1, [x2, #7]
    // 0x58e9e8: DecompressPointer r1
    //     0x58e9e8: add             x1, x1, HEAP, lsl #32
    // 0x58e9ec: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x58e9ec: ldur            d0, [x1, #0x17]
    // 0x58e9f0: fadd            d1, d2, d0
    // 0x58e9f4: r0 = inline_Allocate_Double()
    //     0x58e9f4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x58e9f8: add             x0, x0, #0x10
    //     0x58e9fc: cmp             x1, x0
    //     0x58ea00: b.ls            #0x58ea30
    //     0x58ea04: str             x0, [THR, #0x50]  ; THR::top
    //     0x58ea08: sub             x0, x0, #0xf
    //     0x58ea0c: movz            x1, #0xd148
    //     0x58ea10: movk            x1, #0x3, lsl #16
    //     0x58ea14: stur            x1, [x0, #-1]
    // 0x58ea18: StoreField: r0->field_7 = d1
    //     0x58ea18: stur            d1, [x0, #7]
    // 0x58ea1c: LeaveFrame
    //     0x58ea1c: mov             SP, fp
    //     0x58ea20: ldp             fp, lr, [SP], #0x10
    // 0x58ea24: ret
    //     0x58ea24: ret             
    // 0x58ea28: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x58ea28: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x58ea2c: b               #0x58e808
    // 0x58ea30: SaveReg d1
    //     0x58ea30: str             q1, [SP, #-0x10]!
    // 0x58ea34: r0 = AllocateDouble()
    //     0x58ea34: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x58ea38: RestoreReg d1
    //     0x58ea38: ldr             q1, [SP], #0x10
    // 0x58ea3c: b               #0x58ea18
  }
  _ computeMaxIntrinsicHeight(/* No info */) {
    // ** addr: 0x590db4, size: 0x3c
    // 0x590db4: EnterFrame
    //     0x590db4: stp             fp, lr, [SP, #-0x10]!
    //     0x590db8: mov             fp, SP
    // 0x590dbc: AllocStack(0x10)
    //     0x590dbc: sub             SP, SP, #0x10
    // 0x590dc0: CheckStackOverflow
    //     0x590dc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x590dc4: cmp             SP, x16
    //     0x590dc8: b.ls            #0x590de8
    // 0x590dcc: ldr             x16, [fp, #0x18]
    // 0x590dd0: ldr             lr, [fp, #0x10]
    // 0x590dd4: stp             lr, x16, [SP]
    // 0x590dd8: r0 = computeMinIntrinsicHeight()
    //     0x590dd8: bl              #0x5885e8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::computeMinIntrinsicHeight
    // 0x590ddc: LeaveFrame
    //     0x590ddc: mov             SP, fp
    //     0x590de0: ldp             fp, lr, [SP], #0x10
    // 0x590de4: ret
    //     0x590de4: ret             
    // 0x590de8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x590de8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x590dec: b               #0x590dcc
  }
  _ hitTestChildren(/* No info */) {
    // ** addr: 0x59f96c, size: 0x20c
    // 0x59f96c: EnterFrame
    //     0x59f96c: stp             fp, lr, [SP, #-0x10]!
    //     0x59f970: mov             fp, SP
    // 0x59f974: AllocStack(0x50)
    //     0x59f974: sub             SP, SP, #0x50
    // 0x59f978: CheckStackOverflow
    //     0x59f978: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x59f97c: cmp             SP, x16
    //     0x59f980: b.ls            #0x59fb60
    // 0x59f984: ldr             x16, [fp, #0x20]
    // 0x59f988: str             x16, [SP]
    // 0x59f98c: r0 = children()
    //     0x59f98c: bl              #0x59fb78  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::children
    // 0x59f990: stur            x0, [fp, #-8]
    // 0x59f994: LoadField: r3 = r0->field_7
    //     0x59f994: ldur            w3, [x0, #7]
    // 0x59f998: DecompressPointer r3
    //     0x59f998: add             x3, x3, HEAP, lsl #32
    // 0x59f99c: stur            x3, [fp, #-0x28]
    // 0x59f9a0: LoadField: r1 = r0->field_b
    //     0x59f9a0: ldur            w1, [x0, #0xb]
    // 0x59f9a4: DecompressPointer r1
    //     0x59f9a4: add             x1, x1, HEAP, lsl #32
    // 0x59f9a8: r4 = LoadInt32Instr(r1)
    //     0x59f9a8: sbfx            x4, x1, #1, #0x1f
    // 0x59f9ac: stur            x4, [fp, #-0x20]
    // 0x59f9b0: r2 = 0
    //     0x59f9b0: movz            x2, #0
    // 0x59f9b4: CheckStackOverflow
    //     0x59f9b4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x59f9b8: cmp             SP, x16
    //     0x59f9bc: b.ls            #0x59fb68
    // 0x59f9c0: LoadField: r1 = r0->field_b
    //     0x59f9c0: ldur            w1, [x0, #0xb]
    // 0x59f9c4: DecompressPointer r1
    //     0x59f9c4: add             x1, x1, HEAP, lsl #32
    // 0x59f9c8: r5 = LoadInt32Instr(r1)
    //     0x59f9c8: sbfx            x5, x1, #1, #0x1f
    // 0x59f9cc: cmp             x4, x5
    // 0x59f9d0: b.ne            #0x59fb4c
    // 0x59f9d4: mov             x6, x0
    // 0x59f9d8: cmp             x2, x5
    // 0x59f9dc: b.lt            #0x59f9f0
    // 0x59f9e0: r0 = false
    //     0x59f9e0: add             x0, NULL, #0x30  ; false
    // 0x59f9e4: LeaveFrame
    //     0x59f9e4: mov             SP, fp
    //     0x59f9e8: ldp             fp, lr, [SP], #0x10
    // 0x59f9ec: ret
    //     0x59f9ec: ret             
    // 0x59f9f0: mov             x0, x5
    // 0x59f9f4: mov             x1, x2
    // 0x59f9f8: cmp             x1, x0
    // 0x59f9fc: b.hs            #0x59fb70
    // 0x59fa00: LoadField: r0 = r6->field_f
    //     0x59fa00: ldur            w0, [x6, #0xf]
    // 0x59fa04: DecompressPointer r0
    //     0x59fa04: add             x0, x0, HEAP, lsl #32
    // 0x59fa08: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x59fa08: add             x16, x0, x2, lsl #2
    //     0x59fa0c: ldur            w5, [x16, #0xf]
    // 0x59fa10: DecompressPointer r5
    //     0x59fa10: add             x5, x5, HEAP, lsl #32
    // 0x59fa14: stur            x5, [fp, #-0x18]
    // 0x59fa18: add             x7, x2, #1
    // 0x59fa1c: stur            x7, [fp, #-0x10]
    // 0x59fa20: cmp             w5, NULL
    // 0x59fa24: b.ne            #0x59fa58
    // 0x59fa28: mov             x0, x5
    // 0x59fa2c: mov             x2, x3
    // 0x59fa30: r1 = Null
    //     0x59fa30: mov             x1, NULL
    // 0x59fa34: cmp             w2, NULL
    // 0x59fa38: b.eq            #0x59fa58
    // 0x59fa3c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x59fa3c: ldur            w4, [x2, #0x17]
    // 0x59fa40: DecompressPointer r4
    //     0x59fa40: add             x4, x4, HEAP, lsl #32
    // 0x59fa44: r8 = X0
    //     0x59fa44: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x59fa48: LoadField: r9 = r4->field_7
    //     0x59fa48: ldur            x9, [x4, #7]
    // 0x59fa4c: r3 = Null
    //     0x59fa4c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d190] Null
    //     0x59fa50: ldr             x3, [x3, #0x190]
    // 0x59fa54: blr             x9
    // 0x59fa58: ldur            x3, [fp, #-0x18]
    // 0x59fa5c: LoadField: r4 = r3->field_7
    //     0x59fa5c: ldur            w4, [x3, #7]
    // 0x59fa60: DecompressPointer r4
    //     0x59fa60: add             x4, x4, HEAP, lsl #32
    // 0x59fa64: stur            x4, [fp, #-0x30]
    // 0x59fa68: cmp             w4, NULL
    // 0x59fa6c: b.eq            #0x59fb74
    // 0x59fa70: mov             x0, x4
    // 0x59fa74: r2 = Null
    //     0x59fa74: mov             x2, NULL
    // 0x59fa78: r1 = Null
    //     0x59fa78: mov             x1, NULL
    // 0x59fa7c: r4 = LoadClassIdInstr(r0)
    //     0x59fa7c: ldur            x4, [x0, #-1]
    //     0x59fa80: ubfx            x4, x4, #0xc, #0x14
    // 0x59fa84: sub             x4, x4, #0x892
    // 0x59fa88: cmp             x4, #0xd
    // 0x59fa8c: b.ls            #0x59faa4
    // 0x59fa90: r8 = BoxParentData
    //     0x59fa90: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x59fa94: ldr             x8, [x8, #0x318]
    // 0x59fa98: r3 = Null
    //     0x59fa98: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d1a0] Null
    //     0x59fa9c: ldr             x3, [x3, #0x1a0]
    // 0x59faa0: r0 = DefaultTypeTest()
    //     0x59faa0: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x59faa4: ldur            x0, [fp, #-0x30]
    // 0x59faa8: LoadField: r1 = r0->field_7
    //     0x59faa8: ldur            w1, [x0, #7]
    // 0x59faac: DecompressPointer r1
    //     0x59faac: add             x1, x1, HEAP, lsl #32
    // 0x59fab0: stur            x1, [fp, #-0x38]
    // 0x59fab4: ldr             x16, [fp, #0x10]
    // 0x59fab8: stp             x1, x16, [SP]
    // 0x59fabc: r0 = -()
    //     0x59fabc: bl              #0x5036ec  ; [dart:ui] Offset::-
    // 0x59fac0: stur            x0, [fp, #-0x30]
    // 0x59fac4: ldur            x16, [fp, #-0x38]
    // 0x59fac8: str             x16, [SP]
    // 0x59facc: r0 = unary-()
    //     0x59facc: bl              #0x59c858  ; [dart:ui] Offset::unary-
    // 0x59fad0: ldr             x16, [fp, #0x18]
    // 0x59fad4: stp             x0, x16, [SP]
    // 0x59fad8: r0 = pushOffset()
    //     0x59fad8: bl              #0x59c76c  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::pushOffset
    // 0x59fadc: ldur            x0, [fp, #-0x18]
    // 0x59fae0: r1 = LoadClassIdInstr(r0)
    //     0x59fae0: ldur            x1, [x0, #-1]
    //     0x59fae4: ubfx            x1, x1, #0xc, #0x14
    // 0x59fae8: ldr             x16, [fp, #0x18]
    // 0x59faec: stp             x16, x0, [SP, #8]
    // 0x59faf0: ldur            x16, [fp, #-0x30]
    // 0x59faf4: str             x16, [SP]
    // 0x59faf8: mov             x0, x1
    // 0x59fafc: r0 = GDT[cid_x0 + 0x114f3]()
    //     0x59fafc: movz            x17, #0x14f3
    //     0x59fb00: movk            x17, #0x1, lsl #16
    //     0x59fb04: add             lr, x0, x17
    //     0x59fb08: ldr             lr, [x21, lr, lsl #3]
    //     0x59fb0c: blr             lr
    // 0x59fb10: stur            x0, [fp, #-0x18]
    // 0x59fb14: ldr             x16, [fp, #0x18]
    // 0x59fb18: str             x16, [SP]
    // 0x59fb1c: r0 = popTransform()
    //     0x59fb1c: bl              #0x59b65c  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::popTransform
    // 0x59fb20: ldur            x1, [fp, #-0x18]
    // 0x59fb24: tbnz            w1, #4, #0x59fb38
    // 0x59fb28: r0 = true
    //     0x59fb28: add             x0, NULL, #0x20  ; true
    // 0x59fb2c: LeaveFrame
    //     0x59fb2c: mov             SP, fp
    //     0x59fb30: ldp             fp, lr, [SP], #0x10
    // 0x59fb34: ret
    //     0x59fb34: ret             
    // 0x59fb38: ldur            x2, [fp, #-0x10]
    // 0x59fb3c: ldur            x0, [fp, #-8]
    // 0x59fb40: ldur            x3, [fp, #-0x28]
    // 0x59fb44: ldur            x4, [fp, #-0x20]
    // 0x59fb48: b               #0x59f9b4
    // 0x59fb4c: r0 = ConcurrentModificationError()
    //     0x59fb4c: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x59fb50: ldur            x6, [fp, #-8]
    // 0x59fb54: StoreField: r0->field_b = r6
    //     0x59fb54: stur            w6, [x0, #0xb]
    // 0x59fb58: r0 = Throw()
    //     0x59fb58: bl              #0xc5d2b8  ; ThrowStub
    // 0x59fb5c: brk             #0
    // 0x59fb60: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x59fb60: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x59fb64: b               #0x59f984
    // 0x59fb68: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x59fb68: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x59fb6c: b               #0x59f9c0
    // 0x59fb70: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x59fb70: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x59fb74: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x59fb74: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ children(/* No info */) {
    // ** addr: 0x59fb78, size: 0x938
    // 0x59fb78: EnterFrame
    //     0x59fb78: stp             fp, lr, [SP, #-0x10]!
    //     0x59fb7c: mov             fp, SP
    // 0x59fb80: AllocStack(0x28)
    //     0x59fb80: sub             SP, SP, #0x28
    // 0x59fb84: CheckStackOverflow
    //     0x59fb84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x59fb88: cmp             SP, x16
    //     0x59fb8c: b.ls            #0x5a0450
    // 0x59fb90: r16 = <RenderBox>
    //     0x59fb90: ldr             x16, [PP, #0x3498]  ; [pp+0x3498] TypeArguments: <RenderBox>
    // 0x59fb94: stp             xzr, x16, [SP]
    // 0x59fb98: r0 = _GrowableList()
    //     0x59fb98: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x59fb9c: stur            x0, [fp, #-8]
    // 0x59fba0: ldr             x16, [fp, #0x10]
    // 0x59fba4: r30 = Instance__DecorationSlot
    //     0x59fba4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x59fba8: ldr             lr, [lr, #0x1b0]
    // 0x59fbac: stp             lr, x16, [SP]
    // 0x59fbb0: r0 = childForSlot()
    //     0x59fbb0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59fbb4: cmp             w0, NULL
    // 0x59fbb8: b.eq            #0x59fc64
    // 0x59fbbc: ldur            x0, [fp, #-8]
    // 0x59fbc0: ldr             x16, [fp, #0x10]
    // 0x59fbc4: str             x16, [SP]
    // 0x59fbc8: r0 = icon()
    //     0x59fbc8: bl              #0x57b824  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::icon
    // 0x59fbcc: stur            x0, [fp, #-0x18]
    // 0x59fbd0: cmp             w0, NULL
    // 0x59fbd4: b.eq            #0x5a0458
    // 0x59fbd8: ldur            x1, [fp, #-8]
    // 0x59fbdc: LoadField: r2 = r1->field_b
    //     0x59fbdc: ldur            w2, [x1, #0xb]
    // 0x59fbe0: DecompressPointer r2
    //     0x59fbe0: add             x2, x2, HEAP, lsl #32
    // 0x59fbe4: stur            x2, [fp, #-0x10]
    // 0x59fbe8: LoadField: r3 = r1->field_f
    //     0x59fbe8: ldur            w3, [x1, #0xf]
    // 0x59fbec: DecompressPointer r3
    //     0x59fbec: add             x3, x3, HEAP, lsl #32
    // 0x59fbf0: LoadField: r4 = r3->field_b
    //     0x59fbf0: ldur            w4, [x3, #0xb]
    // 0x59fbf4: DecompressPointer r4
    //     0x59fbf4: add             x4, x4, HEAP, lsl #32
    // 0x59fbf8: cmp             w2, w4
    // 0x59fbfc: b.ne            #0x59fc08
    // 0x59fc00: str             x1, [SP]
    // 0x59fc04: r0 = _growToNextCapacity()
    //     0x59fc04: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59fc08: ldur            x2, [fp, #-8]
    // 0x59fc0c: ldur            x0, [fp, #-0x10]
    // 0x59fc10: r3 = LoadInt32Instr(r0)
    //     0x59fc10: sbfx            x3, x0, #1, #0x1f
    // 0x59fc14: add             x0, x3, #1
    // 0x59fc18: lsl             x1, x0, #1
    // 0x59fc1c: StoreField: r2->field_b = r1
    //     0x59fc1c: stur            w1, [x2, #0xb]
    // 0x59fc20: mov             x1, x3
    // 0x59fc24: cmp             x1, x0
    // 0x59fc28: b.hs            #0x5a045c
    // 0x59fc2c: LoadField: r1 = r2->field_f
    //     0x59fc2c: ldur            w1, [x2, #0xf]
    // 0x59fc30: DecompressPointer r1
    //     0x59fc30: add             x1, x1, HEAP, lsl #32
    // 0x59fc34: ldur            x0, [fp, #-0x18]
    // 0x59fc38: ArrayStore: r1[r3] = r0  ; List_4
    //     0x59fc38: add             x25, x1, x3, lsl #2
    //     0x59fc3c: add             x25, x25, #0xf
    //     0x59fc40: str             w0, [x25]
    //     0x59fc44: tbz             w0, #0, #0x59fc60
    //     0x59fc48: ldurb           w16, [x1, #-1]
    //     0x59fc4c: ldurb           w17, [x0, #-1]
    //     0x59fc50: and             x16, x17, x16, lsr #2
    //     0x59fc54: tst             x16, HEAP, lsr #32
    //     0x59fc58: b.eq            #0x59fc60
    //     0x59fc5c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x59fc60: b               #0x59fc68
    // 0x59fc64: ldur            x2, [fp, #-8]
    // 0x59fc68: ldr             x16, [fp, #0x10]
    // 0x59fc6c: r30 = Instance__DecorationSlot
    //     0x59fc6c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x59fc70: ldr             lr, [lr, #0x1b8]
    // 0x59fc74: stp             lr, x16, [SP]
    // 0x59fc78: r0 = childForSlot()
    //     0x59fc78: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59fc7c: cmp             w0, NULL
    // 0x59fc80: b.eq            #0x59fd2c
    // 0x59fc84: ldur            x0, [fp, #-8]
    // 0x59fc88: ldr             x16, [fp, #0x10]
    // 0x59fc8c: str             x16, [SP]
    // 0x59fc90: r0 = input()
    //     0x59fc90: bl              #0x57b764  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::input
    // 0x59fc94: stur            x0, [fp, #-0x18]
    // 0x59fc98: cmp             w0, NULL
    // 0x59fc9c: b.eq            #0x5a0460
    // 0x59fca0: ldur            x1, [fp, #-8]
    // 0x59fca4: LoadField: r2 = r1->field_b
    //     0x59fca4: ldur            w2, [x1, #0xb]
    // 0x59fca8: DecompressPointer r2
    //     0x59fca8: add             x2, x2, HEAP, lsl #32
    // 0x59fcac: stur            x2, [fp, #-0x10]
    // 0x59fcb0: LoadField: r3 = r1->field_f
    //     0x59fcb0: ldur            w3, [x1, #0xf]
    // 0x59fcb4: DecompressPointer r3
    //     0x59fcb4: add             x3, x3, HEAP, lsl #32
    // 0x59fcb8: LoadField: r4 = r3->field_b
    //     0x59fcb8: ldur            w4, [x3, #0xb]
    // 0x59fcbc: DecompressPointer r4
    //     0x59fcbc: add             x4, x4, HEAP, lsl #32
    // 0x59fcc0: cmp             w2, w4
    // 0x59fcc4: b.ne            #0x59fcd0
    // 0x59fcc8: str             x1, [SP]
    // 0x59fccc: r0 = _growToNextCapacity()
    //     0x59fccc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59fcd0: ldur            x2, [fp, #-8]
    // 0x59fcd4: ldur            x0, [fp, #-0x10]
    // 0x59fcd8: r3 = LoadInt32Instr(r0)
    //     0x59fcd8: sbfx            x3, x0, #1, #0x1f
    // 0x59fcdc: add             x0, x3, #1
    // 0x59fce0: lsl             x1, x0, #1
    // 0x59fce4: StoreField: r2->field_b = r1
    //     0x59fce4: stur            w1, [x2, #0xb]
    // 0x59fce8: mov             x1, x3
    // 0x59fcec: cmp             x1, x0
    // 0x59fcf0: b.hs            #0x5a0464
    // 0x59fcf4: LoadField: r1 = r2->field_f
    //     0x59fcf4: ldur            w1, [x2, #0xf]
    // 0x59fcf8: DecompressPointer r1
    //     0x59fcf8: add             x1, x1, HEAP, lsl #32
    // 0x59fcfc: ldur            x0, [fp, #-0x18]
    // 0x59fd00: ArrayStore: r1[r3] = r0  ; List_4
    //     0x59fd00: add             x25, x1, x3, lsl #2
    //     0x59fd04: add             x25, x25, #0xf
    //     0x59fd08: str             w0, [x25]
    //     0x59fd0c: tbz             w0, #0, #0x59fd28
    //     0x59fd10: ldurb           w16, [x1, #-1]
    //     0x59fd14: ldurb           w17, [x0, #-1]
    //     0x59fd18: and             x16, x17, x16, lsr #2
    //     0x59fd1c: tst             x16, HEAP, lsr #32
    //     0x59fd20: b.eq            #0x59fd28
    //     0x59fd24: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x59fd28: b               #0x59fd30
    // 0x59fd2c: ldur            x2, [fp, #-8]
    // 0x59fd30: ldr             x16, [fp, #0x10]
    // 0x59fd34: r30 = Instance__DecorationSlot
    //     0x59fd34: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x59fd38: ldr             lr, [lr, #0x1c0]
    // 0x59fd3c: stp             lr, x16, [SP]
    // 0x59fd40: r0 = childForSlot()
    //     0x59fd40: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59fd44: cmp             w0, NULL
    // 0x59fd48: b.eq            #0x59fdf4
    // 0x59fd4c: ldur            x0, [fp, #-8]
    // 0x59fd50: ldr             x16, [fp, #0x10]
    // 0x59fd54: str             x16, [SP]
    // 0x59fd58: r0 = prefixIcon()
    //     0x59fd58: bl              #0x57b7e4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::prefixIcon
    // 0x59fd5c: stur            x0, [fp, #-0x18]
    // 0x59fd60: cmp             w0, NULL
    // 0x59fd64: b.eq            #0x5a0468
    // 0x59fd68: ldur            x1, [fp, #-8]
    // 0x59fd6c: LoadField: r2 = r1->field_b
    //     0x59fd6c: ldur            w2, [x1, #0xb]
    // 0x59fd70: DecompressPointer r2
    //     0x59fd70: add             x2, x2, HEAP, lsl #32
    // 0x59fd74: stur            x2, [fp, #-0x10]
    // 0x59fd78: LoadField: r3 = r1->field_f
    //     0x59fd78: ldur            w3, [x1, #0xf]
    // 0x59fd7c: DecompressPointer r3
    //     0x59fd7c: add             x3, x3, HEAP, lsl #32
    // 0x59fd80: LoadField: r4 = r3->field_b
    //     0x59fd80: ldur            w4, [x3, #0xb]
    // 0x59fd84: DecompressPointer r4
    //     0x59fd84: add             x4, x4, HEAP, lsl #32
    // 0x59fd88: cmp             w2, w4
    // 0x59fd8c: b.ne            #0x59fd98
    // 0x59fd90: str             x1, [SP]
    // 0x59fd94: r0 = _growToNextCapacity()
    //     0x59fd94: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59fd98: ldur            x2, [fp, #-8]
    // 0x59fd9c: ldur            x0, [fp, #-0x10]
    // 0x59fda0: r3 = LoadInt32Instr(r0)
    //     0x59fda0: sbfx            x3, x0, #1, #0x1f
    // 0x59fda4: add             x0, x3, #1
    // 0x59fda8: lsl             x1, x0, #1
    // 0x59fdac: StoreField: r2->field_b = r1
    //     0x59fdac: stur            w1, [x2, #0xb]
    // 0x59fdb0: mov             x1, x3
    // 0x59fdb4: cmp             x1, x0
    // 0x59fdb8: b.hs            #0x5a046c
    // 0x59fdbc: LoadField: r1 = r2->field_f
    //     0x59fdbc: ldur            w1, [x2, #0xf]
    // 0x59fdc0: DecompressPointer r1
    //     0x59fdc0: add             x1, x1, HEAP, lsl #32
    // 0x59fdc4: ldur            x0, [fp, #-0x18]
    // 0x59fdc8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x59fdc8: add             x25, x1, x3, lsl #2
    //     0x59fdcc: add             x25, x25, #0xf
    //     0x59fdd0: str             w0, [x25]
    //     0x59fdd4: tbz             w0, #0, #0x59fdf0
    //     0x59fdd8: ldurb           w16, [x1, #-1]
    //     0x59fddc: ldurb           w17, [x0, #-1]
    //     0x59fde0: and             x16, x17, x16, lsr #2
    //     0x59fde4: tst             x16, HEAP, lsr #32
    //     0x59fde8: b.eq            #0x59fdf0
    //     0x59fdec: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x59fdf0: b               #0x59fdf8
    // 0x59fdf4: ldur            x2, [fp, #-8]
    // 0x59fdf8: ldr             x16, [fp, #0x10]
    // 0x59fdfc: r30 = Instance__DecorationSlot
    //     0x59fdfc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x59fe00: ldr             lr, [lr, #0x1c8]
    // 0x59fe04: stp             lr, x16, [SP]
    // 0x59fe08: r0 = childForSlot()
    //     0x59fe08: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59fe0c: cmp             w0, NULL
    // 0x59fe10: b.eq            #0x59febc
    // 0x59fe14: ldur            x0, [fp, #-8]
    // 0x59fe18: ldr             x16, [fp, #0x10]
    // 0x59fe1c: str             x16, [SP]
    // 0x59fe20: r0 = suffixIcon()
    //     0x59fe20: bl              #0x57b6a4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::suffixIcon
    // 0x59fe24: stur            x0, [fp, #-0x18]
    // 0x59fe28: cmp             w0, NULL
    // 0x59fe2c: b.eq            #0x5a0470
    // 0x59fe30: ldur            x1, [fp, #-8]
    // 0x59fe34: LoadField: r2 = r1->field_b
    //     0x59fe34: ldur            w2, [x1, #0xb]
    // 0x59fe38: DecompressPointer r2
    //     0x59fe38: add             x2, x2, HEAP, lsl #32
    // 0x59fe3c: stur            x2, [fp, #-0x10]
    // 0x59fe40: LoadField: r3 = r1->field_f
    //     0x59fe40: ldur            w3, [x1, #0xf]
    // 0x59fe44: DecompressPointer r3
    //     0x59fe44: add             x3, x3, HEAP, lsl #32
    // 0x59fe48: LoadField: r4 = r3->field_b
    //     0x59fe48: ldur            w4, [x3, #0xb]
    // 0x59fe4c: DecompressPointer r4
    //     0x59fe4c: add             x4, x4, HEAP, lsl #32
    // 0x59fe50: cmp             w2, w4
    // 0x59fe54: b.ne            #0x59fe60
    // 0x59fe58: str             x1, [SP]
    // 0x59fe5c: r0 = _growToNextCapacity()
    //     0x59fe5c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59fe60: ldur            x2, [fp, #-8]
    // 0x59fe64: ldur            x0, [fp, #-0x10]
    // 0x59fe68: r3 = LoadInt32Instr(r0)
    //     0x59fe68: sbfx            x3, x0, #1, #0x1f
    // 0x59fe6c: add             x0, x3, #1
    // 0x59fe70: lsl             x1, x0, #1
    // 0x59fe74: StoreField: r2->field_b = r1
    //     0x59fe74: stur            w1, [x2, #0xb]
    // 0x59fe78: mov             x1, x3
    // 0x59fe7c: cmp             x1, x0
    // 0x59fe80: b.hs            #0x5a0474
    // 0x59fe84: LoadField: r1 = r2->field_f
    //     0x59fe84: ldur            w1, [x2, #0xf]
    // 0x59fe88: DecompressPointer r1
    //     0x59fe88: add             x1, x1, HEAP, lsl #32
    // 0x59fe8c: ldur            x0, [fp, #-0x18]
    // 0x59fe90: ArrayStore: r1[r3] = r0  ; List_4
    //     0x59fe90: add             x25, x1, x3, lsl #2
    //     0x59fe94: add             x25, x25, #0xf
    //     0x59fe98: str             w0, [x25]
    //     0x59fe9c: tbz             w0, #0, #0x59feb8
    //     0x59fea0: ldurb           w16, [x1, #-1]
    //     0x59fea4: ldurb           w17, [x0, #-1]
    //     0x59fea8: and             x16, x17, x16, lsr #2
    //     0x59feac: tst             x16, HEAP, lsr #32
    //     0x59feb0: b.eq            #0x59feb8
    //     0x59feb4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x59feb8: b               #0x59fec0
    // 0x59febc: ldur            x2, [fp, #-8]
    // 0x59fec0: ldr             x16, [fp, #0x10]
    // 0x59fec4: r30 = Instance__DecorationSlot
    //     0x59fec4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x59fec8: ldr             lr, [lr, #0x1d0]
    // 0x59fecc: stp             lr, x16, [SP]
    // 0x59fed0: r0 = childForSlot()
    //     0x59fed0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59fed4: cmp             w0, NULL
    // 0x59fed8: b.eq            #0x59ff84
    // 0x59fedc: ldur            x0, [fp, #-8]
    // 0x59fee0: ldr             x16, [fp, #0x10]
    // 0x59fee4: str             x16, [SP]
    // 0x59fee8: r0 = prefix()
    //     0x59fee8: bl              #0x57b7a4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::prefix
    // 0x59feec: stur            x0, [fp, #-0x18]
    // 0x59fef0: cmp             w0, NULL
    // 0x59fef4: b.eq            #0x5a0478
    // 0x59fef8: ldur            x1, [fp, #-8]
    // 0x59fefc: LoadField: r2 = r1->field_b
    //     0x59fefc: ldur            w2, [x1, #0xb]
    // 0x59ff00: DecompressPointer r2
    //     0x59ff00: add             x2, x2, HEAP, lsl #32
    // 0x59ff04: stur            x2, [fp, #-0x10]
    // 0x59ff08: LoadField: r3 = r1->field_f
    //     0x59ff08: ldur            w3, [x1, #0xf]
    // 0x59ff0c: DecompressPointer r3
    //     0x59ff0c: add             x3, x3, HEAP, lsl #32
    // 0x59ff10: LoadField: r4 = r3->field_b
    //     0x59ff10: ldur            w4, [x3, #0xb]
    // 0x59ff14: DecompressPointer r4
    //     0x59ff14: add             x4, x4, HEAP, lsl #32
    // 0x59ff18: cmp             w2, w4
    // 0x59ff1c: b.ne            #0x59ff28
    // 0x59ff20: str             x1, [SP]
    // 0x59ff24: r0 = _growToNextCapacity()
    //     0x59ff24: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59ff28: ldur            x2, [fp, #-8]
    // 0x59ff2c: ldur            x0, [fp, #-0x10]
    // 0x59ff30: r3 = LoadInt32Instr(r0)
    //     0x59ff30: sbfx            x3, x0, #1, #0x1f
    // 0x59ff34: add             x0, x3, #1
    // 0x59ff38: lsl             x1, x0, #1
    // 0x59ff3c: StoreField: r2->field_b = r1
    //     0x59ff3c: stur            w1, [x2, #0xb]
    // 0x59ff40: mov             x1, x3
    // 0x59ff44: cmp             x1, x0
    // 0x59ff48: b.hs            #0x5a047c
    // 0x59ff4c: LoadField: r1 = r2->field_f
    //     0x59ff4c: ldur            w1, [x2, #0xf]
    // 0x59ff50: DecompressPointer r1
    //     0x59ff50: add             x1, x1, HEAP, lsl #32
    // 0x59ff54: ldur            x0, [fp, #-0x18]
    // 0x59ff58: ArrayStore: r1[r3] = r0  ; List_4
    //     0x59ff58: add             x25, x1, x3, lsl #2
    //     0x59ff5c: add             x25, x25, #0xf
    //     0x59ff60: str             w0, [x25]
    //     0x59ff64: tbz             w0, #0, #0x59ff80
    //     0x59ff68: ldurb           w16, [x1, #-1]
    //     0x59ff6c: ldurb           w17, [x0, #-1]
    //     0x59ff70: and             x16, x17, x16, lsr #2
    //     0x59ff74: tst             x16, HEAP, lsr #32
    //     0x59ff78: b.eq            #0x59ff80
    //     0x59ff7c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x59ff80: b               #0x59ff88
    // 0x59ff84: ldur            x2, [fp, #-8]
    // 0x59ff88: ldr             x16, [fp, #0x10]
    // 0x59ff8c: r30 = Instance__DecorationSlot
    //     0x59ff8c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x59ff90: ldr             lr, [lr, #0x1d8]
    // 0x59ff94: stp             lr, x16, [SP]
    // 0x59ff98: r0 = childForSlot()
    //     0x59ff98: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x59ff9c: cmp             w0, NULL
    // 0x59ffa0: b.eq            #0x5a004c
    // 0x59ffa4: ldur            x0, [fp, #-8]
    // 0x59ffa8: ldr             x16, [fp, #0x10]
    // 0x59ffac: str             x16, [SP]
    // 0x59ffb0: r0 = suffix()
    //     0x59ffb0: bl              #0x57b6e4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::suffix
    // 0x59ffb4: stur            x0, [fp, #-0x18]
    // 0x59ffb8: cmp             w0, NULL
    // 0x59ffbc: b.eq            #0x5a0480
    // 0x59ffc0: ldur            x1, [fp, #-8]
    // 0x59ffc4: LoadField: r2 = r1->field_b
    //     0x59ffc4: ldur            w2, [x1, #0xb]
    // 0x59ffc8: DecompressPointer r2
    //     0x59ffc8: add             x2, x2, HEAP, lsl #32
    // 0x59ffcc: stur            x2, [fp, #-0x10]
    // 0x59ffd0: LoadField: r3 = r1->field_f
    //     0x59ffd0: ldur            w3, [x1, #0xf]
    // 0x59ffd4: DecompressPointer r3
    //     0x59ffd4: add             x3, x3, HEAP, lsl #32
    // 0x59ffd8: LoadField: r4 = r3->field_b
    //     0x59ffd8: ldur            w4, [x3, #0xb]
    // 0x59ffdc: DecompressPointer r4
    //     0x59ffdc: add             x4, x4, HEAP, lsl #32
    // 0x59ffe0: cmp             w2, w4
    // 0x59ffe4: b.ne            #0x59fff0
    // 0x59ffe8: str             x1, [SP]
    // 0x59ffec: r0 = _growToNextCapacity()
    //     0x59ffec: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x59fff0: ldur            x2, [fp, #-8]
    // 0x59fff4: ldur            x0, [fp, #-0x10]
    // 0x59fff8: r3 = LoadInt32Instr(r0)
    //     0x59fff8: sbfx            x3, x0, #1, #0x1f
    // 0x59fffc: add             x0, x3, #1
    // 0x5a0000: lsl             x1, x0, #1
    // 0x5a0004: StoreField: r2->field_b = r1
    //     0x5a0004: stur            w1, [x2, #0xb]
    // 0x5a0008: mov             x1, x3
    // 0x5a000c: cmp             x1, x0
    // 0x5a0010: b.hs            #0x5a0484
    // 0x5a0014: LoadField: r1 = r2->field_f
    //     0x5a0014: ldur            w1, [x2, #0xf]
    // 0x5a0018: DecompressPointer r1
    //     0x5a0018: add             x1, x1, HEAP, lsl #32
    // 0x5a001c: ldur            x0, [fp, #-0x18]
    // 0x5a0020: ArrayStore: r1[r3] = r0  ; List_4
    //     0x5a0020: add             x25, x1, x3, lsl #2
    //     0x5a0024: add             x25, x25, #0xf
    //     0x5a0028: str             w0, [x25]
    //     0x5a002c: tbz             w0, #0, #0x5a0048
    //     0x5a0030: ldurb           w16, [x1, #-1]
    //     0x5a0034: ldurb           w17, [x0, #-1]
    //     0x5a0038: and             x16, x17, x16, lsr #2
    //     0x5a003c: tst             x16, HEAP, lsr #32
    //     0x5a0040: b.eq            #0x5a0048
    //     0x5a0044: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a0048: b               #0x5a0050
    // 0x5a004c: ldur            x2, [fp, #-8]
    // 0x5a0050: ldr             x16, [fp, #0x10]
    // 0x5a0054: r30 = Instance__DecorationSlot
    //     0x5a0054: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x5a0058: ldr             lr, [lr, #0x178]
    // 0x5a005c: stp             lr, x16, [SP]
    // 0x5a0060: r0 = childForSlot()
    //     0x5a0060: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a0064: cmp             w0, NULL
    // 0x5a0068: b.eq            #0x5a011c
    // 0x5a006c: ldur            x0, [fp, #-8]
    // 0x5a0070: ldr             x16, [fp, #0x10]
    // 0x5a0074: r30 = Instance__DecorationSlot
    //     0x5a0074: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x5a0078: ldr             lr, [lr, #0x178]
    // 0x5a007c: stp             lr, x16, [SP]
    // 0x5a0080: r0 = childForSlot()
    //     0x5a0080: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a0084: stur            x0, [fp, #-0x18]
    // 0x5a0088: cmp             w0, NULL
    // 0x5a008c: b.eq            #0x5a0488
    // 0x5a0090: ldur            x1, [fp, #-8]
    // 0x5a0094: LoadField: r2 = r1->field_b
    //     0x5a0094: ldur            w2, [x1, #0xb]
    // 0x5a0098: DecompressPointer r2
    //     0x5a0098: add             x2, x2, HEAP, lsl #32
    // 0x5a009c: stur            x2, [fp, #-0x10]
    // 0x5a00a0: LoadField: r3 = r1->field_f
    //     0x5a00a0: ldur            w3, [x1, #0xf]
    // 0x5a00a4: DecompressPointer r3
    //     0x5a00a4: add             x3, x3, HEAP, lsl #32
    // 0x5a00a8: LoadField: r4 = r3->field_b
    //     0x5a00a8: ldur            w4, [x3, #0xb]
    // 0x5a00ac: DecompressPointer r4
    //     0x5a00ac: add             x4, x4, HEAP, lsl #32
    // 0x5a00b0: cmp             w2, w4
    // 0x5a00b4: b.ne            #0x5a00c0
    // 0x5a00b8: str             x1, [SP]
    // 0x5a00bc: r0 = _growToNextCapacity()
    //     0x5a00bc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5a00c0: ldur            x2, [fp, #-8]
    // 0x5a00c4: ldur            x0, [fp, #-0x10]
    // 0x5a00c8: r3 = LoadInt32Instr(r0)
    //     0x5a00c8: sbfx            x3, x0, #1, #0x1f
    // 0x5a00cc: add             x0, x3, #1
    // 0x5a00d0: lsl             x1, x0, #1
    // 0x5a00d4: StoreField: r2->field_b = r1
    //     0x5a00d4: stur            w1, [x2, #0xb]
    // 0x5a00d8: mov             x1, x3
    // 0x5a00dc: cmp             x1, x0
    // 0x5a00e0: b.hs            #0x5a048c
    // 0x5a00e4: LoadField: r1 = r2->field_f
    //     0x5a00e4: ldur            w1, [x2, #0xf]
    // 0x5a00e8: DecompressPointer r1
    //     0x5a00e8: add             x1, x1, HEAP, lsl #32
    // 0x5a00ec: ldur            x0, [fp, #-0x18]
    // 0x5a00f0: ArrayStore: r1[r3] = r0  ; List_4
    //     0x5a00f0: add             x25, x1, x3, lsl #2
    //     0x5a00f4: add             x25, x25, #0xf
    //     0x5a00f8: str             w0, [x25]
    //     0x5a00fc: tbz             w0, #0, #0x5a0118
    //     0x5a0100: ldurb           w16, [x1, #-1]
    //     0x5a0104: ldurb           w17, [x0, #-1]
    //     0x5a0108: and             x16, x17, x16, lsr #2
    //     0x5a010c: tst             x16, HEAP, lsr #32
    //     0x5a0110: b.eq            #0x5a0118
    //     0x5a0114: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a0118: b               #0x5a0120
    // 0x5a011c: ldur            x2, [fp, #-8]
    // 0x5a0120: ldr             x16, [fp, #0x10]
    // 0x5a0124: r30 = Instance__DecorationSlot
    //     0x5a0124: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x5a0128: ldr             lr, [lr, #0x1e0]
    // 0x5a012c: stp             lr, x16, [SP]
    // 0x5a0130: r0 = childForSlot()
    //     0x5a0130: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a0134: cmp             w0, NULL
    // 0x5a0138: b.eq            #0x5a01e4
    // 0x5a013c: ldur            x0, [fp, #-8]
    // 0x5a0140: ldr             x16, [fp, #0x10]
    // 0x5a0144: str             x16, [SP]
    // 0x5a0148: r0 = hint()
    //     0x5a0148: bl              #0x57b724  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::hint
    // 0x5a014c: stur            x0, [fp, #-0x18]
    // 0x5a0150: cmp             w0, NULL
    // 0x5a0154: b.eq            #0x5a0490
    // 0x5a0158: ldur            x1, [fp, #-8]
    // 0x5a015c: LoadField: r2 = r1->field_b
    //     0x5a015c: ldur            w2, [x1, #0xb]
    // 0x5a0160: DecompressPointer r2
    //     0x5a0160: add             x2, x2, HEAP, lsl #32
    // 0x5a0164: stur            x2, [fp, #-0x10]
    // 0x5a0168: LoadField: r3 = r1->field_f
    //     0x5a0168: ldur            w3, [x1, #0xf]
    // 0x5a016c: DecompressPointer r3
    //     0x5a016c: add             x3, x3, HEAP, lsl #32
    // 0x5a0170: LoadField: r4 = r3->field_b
    //     0x5a0170: ldur            w4, [x3, #0xb]
    // 0x5a0174: DecompressPointer r4
    //     0x5a0174: add             x4, x4, HEAP, lsl #32
    // 0x5a0178: cmp             w2, w4
    // 0x5a017c: b.ne            #0x5a0188
    // 0x5a0180: str             x1, [SP]
    // 0x5a0184: r0 = _growToNextCapacity()
    //     0x5a0184: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5a0188: ldur            x2, [fp, #-8]
    // 0x5a018c: ldur            x0, [fp, #-0x10]
    // 0x5a0190: r3 = LoadInt32Instr(r0)
    //     0x5a0190: sbfx            x3, x0, #1, #0x1f
    // 0x5a0194: add             x0, x3, #1
    // 0x5a0198: lsl             x1, x0, #1
    // 0x5a019c: StoreField: r2->field_b = r1
    //     0x5a019c: stur            w1, [x2, #0xb]
    // 0x5a01a0: mov             x1, x3
    // 0x5a01a4: cmp             x1, x0
    // 0x5a01a8: b.hs            #0x5a0494
    // 0x5a01ac: LoadField: r1 = r2->field_f
    //     0x5a01ac: ldur            w1, [x2, #0xf]
    // 0x5a01b0: DecompressPointer r1
    //     0x5a01b0: add             x1, x1, HEAP, lsl #32
    // 0x5a01b4: ldur            x0, [fp, #-0x18]
    // 0x5a01b8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x5a01b8: add             x25, x1, x3, lsl #2
    //     0x5a01bc: add             x25, x25, #0xf
    //     0x5a01c0: str             w0, [x25]
    //     0x5a01c4: tbz             w0, #0, #0x5a01e0
    //     0x5a01c8: ldurb           w16, [x1, #-1]
    //     0x5a01cc: ldurb           w17, [x0, #-1]
    //     0x5a01d0: and             x16, x17, x16, lsr #2
    //     0x5a01d4: tst             x16, HEAP, lsr #32
    //     0x5a01d8: b.eq            #0x5a01e0
    //     0x5a01dc: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a01e0: b               #0x5a01e8
    // 0x5a01e4: ldur            x2, [fp, #-8]
    // 0x5a01e8: ldr             x16, [fp, #0x10]
    // 0x5a01ec: r30 = Instance__DecorationSlot
    //     0x5a01ec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x5a01f0: ldr             lr, [lr, #0x1e8]
    // 0x5a01f4: stp             lr, x16, [SP]
    // 0x5a01f8: r0 = childForSlot()
    //     0x5a01f8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a01fc: cmp             w0, NULL
    // 0x5a0200: b.eq            #0x5a02ac
    // 0x5a0204: ldur            x0, [fp, #-8]
    // 0x5a0208: ldr             x16, [fp, #0x10]
    // 0x5a020c: str             x16, [SP]
    // 0x5a0210: r0 = helperError()
    //     0x5a0210: bl              #0x588f2c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::helperError
    // 0x5a0214: stur            x0, [fp, #-0x18]
    // 0x5a0218: cmp             w0, NULL
    // 0x5a021c: b.eq            #0x5a0498
    // 0x5a0220: ldur            x1, [fp, #-8]
    // 0x5a0224: LoadField: r2 = r1->field_b
    //     0x5a0224: ldur            w2, [x1, #0xb]
    // 0x5a0228: DecompressPointer r2
    //     0x5a0228: add             x2, x2, HEAP, lsl #32
    // 0x5a022c: stur            x2, [fp, #-0x10]
    // 0x5a0230: LoadField: r3 = r1->field_f
    //     0x5a0230: ldur            w3, [x1, #0xf]
    // 0x5a0234: DecompressPointer r3
    //     0x5a0234: add             x3, x3, HEAP, lsl #32
    // 0x5a0238: LoadField: r4 = r3->field_b
    //     0x5a0238: ldur            w4, [x3, #0xb]
    // 0x5a023c: DecompressPointer r4
    //     0x5a023c: add             x4, x4, HEAP, lsl #32
    // 0x5a0240: cmp             w2, w4
    // 0x5a0244: b.ne            #0x5a0250
    // 0x5a0248: str             x1, [SP]
    // 0x5a024c: r0 = _growToNextCapacity()
    //     0x5a024c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5a0250: ldur            x2, [fp, #-8]
    // 0x5a0254: ldur            x0, [fp, #-0x10]
    // 0x5a0258: r3 = LoadInt32Instr(r0)
    //     0x5a0258: sbfx            x3, x0, #1, #0x1f
    // 0x5a025c: add             x0, x3, #1
    // 0x5a0260: lsl             x1, x0, #1
    // 0x5a0264: StoreField: r2->field_b = r1
    //     0x5a0264: stur            w1, [x2, #0xb]
    // 0x5a0268: mov             x1, x3
    // 0x5a026c: cmp             x1, x0
    // 0x5a0270: b.hs            #0x5a049c
    // 0x5a0274: LoadField: r1 = r2->field_f
    //     0x5a0274: ldur            w1, [x2, #0xf]
    // 0x5a0278: DecompressPointer r1
    //     0x5a0278: add             x1, x1, HEAP, lsl #32
    // 0x5a027c: ldur            x0, [fp, #-0x18]
    // 0x5a0280: ArrayStore: r1[r3] = r0  ; List_4
    //     0x5a0280: add             x25, x1, x3, lsl #2
    //     0x5a0284: add             x25, x25, #0xf
    //     0x5a0288: str             w0, [x25]
    //     0x5a028c: tbz             w0, #0, #0x5a02a8
    //     0x5a0290: ldurb           w16, [x1, #-1]
    //     0x5a0294: ldurb           w17, [x0, #-1]
    //     0x5a0298: and             x16, x17, x16, lsr #2
    //     0x5a029c: tst             x16, HEAP, lsr #32
    //     0x5a02a0: b.eq            #0x5a02a8
    //     0x5a02a4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a02a8: b               #0x5a02b0
    // 0x5a02ac: ldur            x2, [fp, #-8]
    // 0x5a02b0: ldr             x16, [fp, #0x10]
    // 0x5a02b4: r30 = Instance__DecorationSlot
    //     0x5a02b4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x5a02b8: ldr             lr, [lr, #0x1f0]
    // 0x5a02bc: stp             lr, x16, [SP]
    // 0x5a02c0: r0 = childForSlot()
    //     0x5a02c0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a02c4: cmp             w0, NULL
    // 0x5a02c8: b.eq            #0x5a0374
    // 0x5a02cc: ldur            x0, [fp, #-8]
    // 0x5a02d0: ldr             x16, [fp, #0x10]
    // 0x5a02d4: str             x16, [SP]
    // 0x5a02d8: r0 = counter()
    //     0x5a02d8: bl              #0x588f6c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::counter
    // 0x5a02dc: stur            x0, [fp, #-0x18]
    // 0x5a02e0: cmp             w0, NULL
    // 0x5a02e4: b.eq            #0x5a04a0
    // 0x5a02e8: ldur            x1, [fp, #-8]
    // 0x5a02ec: LoadField: r2 = r1->field_b
    //     0x5a02ec: ldur            w2, [x1, #0xb]
    // 0x5a02f0: DecompressPointer r2
    //     0x5a02f0: add             x2, x2, HEAP, lsl #32
    // 0x5a02f4: stur            x2, [fp, #-0x10]
    // 0x5a02f8: LoadField: r3 = r1->field_f
    //     0x5a02f8: ldur            w3, [x1, #0xf]
    // 0x5a02fc: DecompressPointer r3
    //     0x5a02fc: add             x3, x3, HEAP, lsl #32
    // 0x5a0300: LoadField: r4 = r3->field_b
    //     0x5a0300: ldur            w4, [x3, #0xb]
    // 0x5a0304: DecompressPointer r4
    //     0x5a0304: add             x4, x4, HEAP, lsl #32
    // 0x5a0308: cmp             w2, w4
    // 0x5a030c: b.ne            #0x5a0318
    // 0x5a0310: str             x1, [SP]
    // 0x5a0314: r0 = _growToNextCapacity()
    //     0x5a0314: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5a0318: ldur            x2, [fp, #-8]
    // 0x5a031c: ldur            x0, [fp, #-0x10]
    // 0x5a0320: r3 = LoadInt32Instr(r0)
    //     0x5a0320: sbfx            x3, x0, #1, #0x1f
    // 0x5a0324: add             x0, x3, #1
    // 0x5a0328: lsl             x1, x0, #1
    // 0x5a032c: StoreField: r2->field_b = r1
    //     0x5a032c: stur            w1, [x2, #0xb]
    // 0x5a0330: mov             x1, x3
    // 0x5a0334: cmp             x1, x0
    // 0x5a0338: b.hs            #0x5a04a4
    // 0x5a033c: LoadField: r1 = r2->field_f
    //     0x5a033c: ldur            w1, [x2, #0xf]
    // 0x5a0340: DecompressPointer r1
    //     0x5a0340: add             x1, x1, HEAP, lsl #32
    // 0x5a0344: ldur            x0, [fp, #-0x18]
    // 0x5a0348: ArrayStore: r1[r3] = r0  ; List_4
    //     0x5a0348: add             x25, x1, x3, lsl #2
    //     0x5a034c: add             x25, x25, #0xf
    //     0x5a0350: str             w0, [x25]
    //     0x5a0354: tbz             w0, #0, #0x5a0370
    //     0x5a0358: ldurb           w16, [x1, #-1]
    //     0x5a035c: ldurb           w17, [x0, #-1]
    //     0x5a0360: and             x16, x17, x16, lsr #2
    //     0x5a0364: tst             x16, HEAP, lsr #32
    //     0x5a0368: b.eq            #0x5a0370
    //     0x5a036c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a0370: b               #0x5a0378
    // 0x5a0374: ldur            x2, [fp, #-8]
    // 0x5a0378: ldr             x16, [fp, #0x10]
    // 0x5a037c: r30 = Instance__DecorationSlot
    //     0x5a037c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x5a0380: ldr             lr, [lr, #0x1f8]
    // 0x5a0384: stp             lr, x16, [SP]
    // 0x5a0388: r0 = childForSlot()
    //     0x5a0388: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a038c: cmp             w0, NULL
    // 0x5a0390: b.eq            #0x5a043c
    // 0x5a0394: ldur            x0, [fp, #-8]
    // 0x5a0398: ldr             x16, [fp, #0x10]
    // 0x5a039c: str             x16, [SP]
    // 0x5a03a0: r0 = container()
    //     0x5a03a0: bl              #0x5a04b0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::container
    // 0x5a03a4: stur            x0, [fp, #-0x18]
    // 0x5a03a8: cmp             w0, NULL
    // 0x5a03ac: b.eq            #0x5a04a8
    // 0x5a03b0: ldur            x1, [fp, #-8]
    // 0x5a03b4: LoadField: r2 = r1->field_b
    //     0x5a03b4: ldur            w2, [x1, #0xb]
    // 0x5a03b8: DecompressPointer r2
    //     0x5a03b8: add             x2, x2, HEAP, lsl #32
    // 0x5a03bc: stur            x2, [fp, #-0x10]
    // 0x5a03c0: LoadField: r3 = r1->field_f
    //     0x5a03c0: ldur            w3, [x1, #0xf]
    // 0x5a03c4: DecompressPointer r3
    //     0x5a03c4: add             x3, x3, HEAP, lsl #32
    // 0x5a03c8: LoadField: r4 = r3->field_b
    //     0x5a03c8: ldur            w4, [x3, #0xb]
    // 0x5a03cc: DecompressPointer r4
    //     0x5a03cc: add             x4, x4, HEAP, lsl #32
    // 0x5a03d0: cmp             w2, w4
    // 0x5a03d4: b.ne            #0x5a03e0
    // 0x5a03d8: str             x1, [SP]
    // 0x5a03dc: r0 = _growToNextCapacity()
    //     0x5a03dc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5a03e0: ldur            x2, [fp, #-8]
    // 0x5a03e4: ldur            x3, [fp, #-0x10]
    // 0x5a03e8: r4 = LoadInt32Instr(r3)
    //     0x5a03e8: sbfx            x4, x3, #1, #0x1f
    // 0x5a03ec: add             x0, x4, #1
    // 0x5a03f0: lsl             x3, x0, #1
    // 0x5a03f4: StoreField: r2->field_b = r3
    //     0x5a03f4: stur            w3, [x2, #0xb]
    // 0x5a03f8: mov             x1, x4
    // 0x5a03fc: cmp             x1, x0
    // 0x5a0400: b.hs            #0x5a04ac
    // 0x5a0404: LoadField: r1 = r2->field_f
    //     0x5a0404: ldur            w1, [x2, #0xf]
    // 0x5a0408: DecompressPointer r1
    //     0x5a0408: add             x1, x1, HEAP, lsl #32
    // 0x5a040c: ldur            x0, [fp, #-0x18]
    // 0x5a0410: ArrayStore: r1[r4] = r0  ; List_4
    //     0x5a0410: add             x25, x1, x4, lsl #2
    //     0x5a0414: add             x25, x25, #0xf
    //     0x5a0418: str             w0, [x25]
    //     0x5a041c: tbz             w0, #0, #0x5a0438
    //     0x5a0420: ldurb           w16, [x1, #-1]
    //     0x5a0424: ldurb           w17, [x0, #-1]
    //     0x5a0428: and             x16, x17, x16, lsr #2
    //     0x5a042c: tst             x16, HEAP, lsr #32
    //     0x5a0430: b.eq            #0x5a0438
    //     0x5a0434: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5a0438: b               #0x5a0440
    // 0x5a043c: ldur            x2, [fp, #-8]
    // 0x5a0440: mov             x0, x2
    // 0x5a0444: LeaveFrame
    //     0x5a0444: mov             SP, fp
    //     0x5a0448: ldp             fp, lr, [SP], #0x10
    // 0x5a044c: ret
    //     0x5a044c: ret             
    // 0x5a0450: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5a0450: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5a0454: b               #0x59fb90
    // 0x5a0458: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0458: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a045c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a045c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0460: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0460: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a0464: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a0464: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0468: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0468: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a046c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a046c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0470: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0470: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a0474: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a0474: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0478: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0478: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a047c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a047c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0480: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0480: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a0484: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a0484: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0488: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0488: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a048c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a048c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0490: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0490: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a0494: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a0494: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a0498: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a0498: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a049c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a049c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a04a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a04a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a04a4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a04a4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x5a04a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5a04a8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5a04ac: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5a04ac: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  get _ container(/* No info */) {
    // ** addr: 0x5a04b0, size: 0x40
    // 0x5a04b0: EnterFrame
    //     0x5a04b0: stp             fp, lr, [SP, #-0x10]!
    //     0x5a04b4: mov             fp, SP
    // 0x5a04b8: AllocStack(0x10)
    //     0x5a04b8: sub             SP, SP, #0x10
    // 0x5a04bc: CheckStackOverflow
    //     0x5a04bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5a04c0: cmp             SP, x16
    //     0x5a04c4: b.ls            #0x5a04e8
    // 0x5a04c8: ldr             x16, [fp, #0x10]
    // 0x5a04cc: r30 = Instance__DecorationSlot
    //     0x5a04cc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x5a04d0: ldr             lr, [lr, #0x1f8]
    // 0x5a04d4: stp             lr, x16, [SP]
    // 0x5a04d8: r0 = childForSlot()
    //     0x5a04d8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x5a04dc: LeaveFrame
    //     0x5a04dc: mov             SP, fp
    //     0x5a04e0: ldp             fp, lr, [SP], #0x10
    // 0x5a04e4: ret
    //     0x5a04e4: ret             
    // 0x5a04e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5a04e8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5a04ec: b               #0x5a04c8
  }
  _ visitChildrenForSemantics(/* No info */) {
    // ** addr: 0x7c4408, size: 0x430
    // 0x7c4408: EnterFrame
    //     0x7c4408: stp             fp, lr, [SP, #-0x10]!
    //     0x7c440c: mov             fp, SP
    // 0x7c4410: AllocStack(0x10)
    //     0x7c4410: sub             SP, SP, #0x10
    // 0x7c4414: CheckStackOverflow
    //     0x7c4414: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7c4418: cmp             SP, x16
    //     0x7c441c: b.ls            #0x7c4800
    // 0x7c4420: ldr             x16, [fp, #0x18]
    // 0x7c4424: r30 = Instance__DecorationSlot
    //     0x7c4424: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7c4428: ldr             lr, [lr, #0x1b0]
    // 0x7c442c: stp             lr, x16, [SP]
    // 0x7c4430: r0 = childForSlot()
    //     0x7c4430: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4434: cmp             w0, NULL
    // 0x7c4438: b.eq            #0x7c4470
    // 0x7c443c: ldr             x16, [fp, #0x18]
    // 0x7c4440: r30 = Instance__DecorationSlot
    //     0x7c4440: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7c4444: ldr             lr, [lr, #0x1b0]
    // 0x7c4448: stp             lr, x16, [SP]
    // 0x7c444c: r0 = childForSlot()
    //     0x7c444c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4450: cmp             w0, NULL
    // 0x7c4454: b.eq            #0x7c4808
    // 0x7c4458: ldr             x16, [fp, #0x10]
    // 0x7c445c: stp             x0, x16, [SP]
    // 0x7c4460: ldr             x0, [fp, #0x10]
    // 0x7c4464: ClosureCall
    //     0x7c4464: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4468: ldur            x2, [x0, #0x1f]
    //     0x7c446c: blr             x2
    // 0x7c4470: ldr             x16, [fp, #0x18]
    // 0x7c4474: r30 = Instance__DecorationSlot
    //     0x7c4474: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7c4478: ldr             lr, [lr, #0x1d0]
    // 0x7c447c: stp             lr, x16, [SP]
    // 0x7c4480: r0 = childForSlot()
    //     0x7c4480: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4484: cmp             w0, NULL
    // 0x7c4488: b.eq            #0x7c44c0
    // 0x7c448c: ldr             x16, [fp, #0x18]
    // 0x7c4490: r30 = Instance__DecorationSlot
    //     0x7c4490: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7c4494: ldr             lr, [lr, #0x1d0]
    // 0x7c4498: stp             lr, x16, [SP]
    // 0x7c449c: r0 = childForSlot()
    //     0x7c449c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c44a0: cmp             w0, NULL
    // 0x7c44a4: b.eq            #0x7c480c
    // 0x7c44a8: ldr             x16, [fp, #0x10]
    // 0x7c44ac: stp             x0, x16, [SP]
    // 0x7c44b0: ldr             x0, [fp, #0x10]
    // 0x7c44b4: ClosureCall
    //     0x7c44b4: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c44b8: ldur            x2, [x0, #0x1f]
    //     0x7c44bc: blr             x2
    // 0x7c44c0: ldr             x16, [fp, #0x18]
    // 0x7c44c4: r30 = Instance__DecorationSlot
    //     0x7c44c4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7c44c8: ldr             lr, [lr, #0x1c0]
    // 0x7c44cc: stp             lr, x16, [SP]
    // 0x7c44d0: r0 = childForSlot()
    //     0x7c44d0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c44d4: cmp             w0, NULL
    // 0x7c44d8: b.eq            #0x7c4510
    // 0x7c44dc: ldr             x16, [fp, #0x18]
    // 0x7c44e0: r30 = Instance__DecorationSlot
    //     0x7c44e0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7c44e4: ldr             lr, [lr, #0x1c0]
    // 0x7c44e8: stp             lr, x16, [SP]
    // 0x7c44ec: r0 = childForSlot()
    //     0x7c44ec: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c44f0: cmp             w0, NULL
    // 0x7c44f4: b.eq            #0x7c4810
    // 0x7c44f8: ldr             x16, [fp, #0x10]
    // 0x7c44fc: stp             x0, x16, [SP]
    // 0x7c4500: ldr             x0, [fp, #0x10]
    // 0x7c4504: ClosureCall
    //     0x7c4504: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4508: ldur            x2, [x0, #0x1f]
    //     0x7c450c: blr             x2
    // 0x7c4510: ldr             x16, [fp, #0x18]
    // 0x7c4514: r30 = Instance__DecorationSlot
    //     0x7c4514: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7c4518: ldr             lr, [lr, #0x178]
    // 0x7c451c: stp             lr, x16, [SP]
    // 0x7c4520: r0 = childForSlot()
    //     0x7c4520: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4524: cmp             w0, NULL
    // 0x7c4528: b.eq            #0x7c4560
    // 0x7c452c: ldr             x16, [fp, #0x18]
    // 0x7c4530: r30 = Instance__DecorationSlot
    //     0x7c4530: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7c4534: ldr             lr, [lr, #0x178]
    // 0x7c4538: stp             lr, x16, [SP]
    // 0x7c453c: r0 = childForSlot()
    //     0x7c453c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4540: cmp             w0, NULL
    // 0x7c4544: b.eq            #0x7c4814
    // 0x7c4548: ldr             x16, [fp, #0x10]
    // 0x7c454c: stp             x0, x16, [SP]
    // 0x7c4550: ldr             x0, [fp, #0x10]
    // 0x7c4554: ClosureCall
    //     0x7c4554: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4558: ldur            x2, [x0, #0x1f]
    //     0x7c455c: blr             x2
    // 0x7c4560: ldr             x16, [fp, #0x18]
    // 0x7c4564: r30 = Instance__DecorationSlot
    //     0x7c4564: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7c4568: ldr             lr, [lr, #0x1e0]
    // 0x7c456c: stp             lr, x16, [SP]
    // 0x7c4570: r0 = childForSlot()
    //     0x7c4570: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4574: cmp             w0, NULL
    // 0x7c4578: b.eq            #0x7c4610
    // 0x7c457c: ldr             x0, [fp, #0x18]
    // 0x7c4580: LoadField: r1 = r0->field_73
    //     0x7c4580: ldur            w1, [x0, #0x73]
    // 0x7c4584: DecompressPointer r1
    //     0x7c4584: add             x1, x1, HEAP, lsl #32
    // 0x7c4588: tbnz            w1, #4, #0x7c45c0
    // 0x7c458c: r16 = Instance__DecorationSlot
    //     0x7c458c: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7c4590: ldr             x16, [x16, #0x1e0]
    // 0x7c4594: stp             x16, x0, [SP]
    // 0x7c4598: r0 = childForSlot()
    //     0x7c4598: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c459c: cmp             w0, NULL
    // 0x7c45a0: b.eq            #0x7c4818
    // 0x7c45a4: ldr             x16, [fp, #0x10]
    // 0x7c45a8: stp             x0, x16, [SP]
    // 0x7c45ac: ldr             x0, [fp, #0x10]
    // 0x7c45b0: ClosureCall
    //     0x7c45b0: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c45b4: ldur            x2, [x0, #0x1f]
    //     0x7c45b8: blr             x2
    // 0x7c45bc: b               #0x7c4610
    // 0x7c45c0: ldr             x16, [fp, #0x18]
    // 0x7c45c4: r30 = Instance__DecorationSlot
    //     0x7c45c4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7c45c8: ldr             lr, [lr, #0x178]
    // 0x7c45cc: stp             lr, x16, [SP]
    // 0x7c45d0: r0 = childForSlot()
    //     0x7c45d0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c45d4: cmp             w0, NULL
    // 0x7c45d8: b.ne            #0x7c4610
    // 0x7c45dc: ldr             x16, [fp, #0x18]
    // 0x7c45e0: r30 = Instance__DecorationSlot
    //     0x7c45e0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7c45e4: ldr             lr, [lr, #0x1e0]
    // 0x7c45e8: stp             lr, x16, [SP]
    // 0x7c45ec: r0 = childForSlot()
    //     0x7c45ec: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c45f0: cmp             w0, NULL
    // 0x7c45f4: b.eq            #0x7c481c
    // 0x7c45f8: ldr             x16, [fp, #0x10]
    // 0x7c45fc: stp             x0, x16, [SP]
    // 0x7c4600: ldr             x0, [fp, #0x10]
    // 0x7c4604: ClosureCall
    //     0x7c4604: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4608: ldur            x2, [x0, #0x1f]
    //     0x7c460c: blr             x2
    // 0x7c4610: ldr             x16, [fp, #0x18]
    // 0x7c4614: r30 = Instance__DecorationSlot
    //     0x7c4614: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7c4618: ldr             lr, [lr, #0x1b8]
    // 0x7c461c: stp             lr, x16, [SP]
    // 0x7c4620: r0 = childForSlot()
    //     0x7c4620: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4624: cmp             w0, NULL
    // 0x7c4628: b.eq            #0x7c4660
    // 0x7c462c: ldr             x16, [fp, #0x18]
    // 0x7c4630: r30 = Instance__DecorationSlot
    //     0x7c4630: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7c4634: ldr             lr, [lr, #0x1b8]
    // 0x7c4638: stp             lr, x16, [SP]
    // 0x7c463c: r0 = childForSlot()
    //     0x7c463c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4640: cmp             w0, NULL
    // 0x7c4644: b.eq            #0x7c4820
    // 0x7c4648: ldr             x16, [fp, #0x10]
    // 0x7c464c: stp             x0, x16, [SP]
    // 0x7c4650: ldr             x0, [fp, #0x10]
    // 0x7c4654: ClosureCall
    //     0x7c4654: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4658: ldur            x2, [x0, #0x1f]
    //     0x7c465c: blr             x2
    // 0x7c4660: ldr             x16, [fp, #0x18]
    // 0x7c4664: r30 = Instance__DecorationSlot
    //     0x7c4664: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7c4668: ldr             lr, [lr, #0x1c8]
    // 0x7c466c: stp             lr, x16, [SP]
    // 0x7c4670: r0 = childForSlot()
    //     0x7c4670: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4674: cmp             w0, NULL
    // 0x7c4678: b.eq            #0x7c46b0
    // 0x7c467c: ldr             x16, [fp, #0x18]
    // 0x7c4680: r30 = Instance__DecorationSlot
    //     0x7c4680: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7c4684: ldr             lr, [lr, #0x1c8]
    // 0x7c4688: stp             lr, x16, [SP]
    // 0x7c468c: r0 = childForSlot()
    //     0x7c468c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4690: cmp             w0, NULL
    // 0x7c4694: b.eq            #0x7c4824
    // 0x7c4698: ldr             x16, [fp, #0x10]
    // 0x7c469c: stp             x0, x16, [SP]
    // 0x7c46a0: ldr             x0, [fp, #0x10]
    // 0x7c46a4: ClosureCall
    //     0x7c46a4: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c46a8: ldur            x2, [x0, #0x1f]
    //     0x7c46ac: blr             x2
    // 0x7c46b0: ldr             x16, [fp, #0x18]
    // 0x7c46b4: r30 = Instance__DecorationSlot
    //     0x7c46b4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7c46b8: ldr             lr, [lr, #0x1d8]
    // 0x7c46bc: stp             lr, x16, [SP]
    // 0x7c46c0: r0 = childForSlot()
    //     0x7c46c0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c46c4: cmp             w0, NULL
    // 0x7c46c8: b.eq            #0x7c4700
    // 0x7c46cc: ldr             x16, [fp, #0x18]
    // 0x7c46d0: r30 = Instance__DecorationSlot
    //     0x7c46d0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7c46d4: ldr             lr, [lr, #0x1d8]
    // 0x7c46d8: stp             lr, x16, [SP]
    // 0x7c46dc: r0 = childForSlot()
    //     0x7c46dc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c46e0: cmp             w0, NULL
    // 0x7c46e4: b.eq            #0x7c4828
    // 0x7c46e8: ldr             x16, [fp, #0x10]
    // 0x7c46ec: stp             x0, x16, [SP]
    // 0x7c46f0: ldr             x0, [fp, #0x10]
    // 0x7c46f4: ClosureCall
    //     0x7c46f4: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c46f8: ldur            x2, [x0, #0x1f]
    //     0x7c46fc: blr             x2
    // 0x7c4700: ldr             x16, [fp, #0x18]
    // 0x7c4704: r30 = Instance__DecorationSlot
    //     0x7c4704: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x7c4708: ldr             lr, [lr, #0x1f8]
    // 0x7c470c: stp             lr, x16, [SP]
    // 0x7c4710: r0 = childForSlot()
    //     0x7c4710: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4714: cmp             w0, NULL
    // 0x7c4718: b.eq            #0x7c4750
    // 0x7c471c: ldr             x16, [fp, #0x18]
    // 0x7c4720: r30 = Instance__DecorationSlot
    //     0x7c4720: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x7c4724: ldr             lr, [lr, #0x1f8]
    // 0x7c4728: stp             lr, x16, [SP]
    // 0x7c472c: r0 = childForSlot()
    //     0x7c472c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4730: cmp             w0, NULL
    // 0x7c4734: b.eq            #0x7c482c
    // 0x7c4738: ldr             x16, [fp, #0x10]
    // 0x7c473c: stp             x0, x16, [SP]
    // 0x7c4740: ldr             x0, [fp, #0x10]
    // 0x7c4744: ClosureCall
    //     0x7c4744: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4748: ldur            x2, [x0, #0x1f]
    //     0x7c474c: blr             x2
    // 0x7c4750: ldr             x16, [fp, #0x18]
    // 0x7c4754: r30 = Instance__DecorationSlot
    //     0x7c4754: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7c4758: ldr             lr, [lr, #0x1e8]
    // 0x7c475c: stp             lr, x16, [SP]
    // 0x7c4760: r0 = childForSlot()
    //     0x7c4760: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4764: cmp             w0, NULL
    // 0x7c4768: b.eq            #0x7c47a0
    // 0x7c476c: ldr             x16, [fp, #0x18]
    // 0x7c4770: r30 = Instance__DecorationSlot
    //     0x7c4770: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7c4774: ldr             lr, [lr, #0x1e8]
    // 0x7c4778: stp             lr, x16, [SP]
    // 0x7c477c: r0 = childForSlot()
    //     0x7c477c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c4780: cmp             w0, NULL
    // 0x7c4784: b.eq            #0x7c4830
    // 0x7c4788: ldr             x16, [fp, #0x10]
    // 0x7c478c: stp             x0, x16, [SP]
    // 0x7c4790: ldr             x0, [fp, #0x10]
    // 0x7c4794: ClosureCall
    //     0x7c4794: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c4798: ldur            x2, [x0, #0x1f]
    //     0x7c479c: blr             x2
    // 0x7c47a0: ldr             x16, [fp, #0x18]
    // 0x7c47a4: r30 = Instance__DecorationSlot
    //     0x7c47a4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7c47a8: ldr             lr, [lr, #0x1f0]
    // 0x7c47ac: stp             lr, x16, [SP]
    // 0x7c47b0: r0 = childForSlot()
    //     0x7c47b0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c47b4: cmp             w0, NULL
    // 0x7c47b8: b.eq            #0x7c47f0
    // 0x7c47bc: ldr             x16, [fp, #0x18]
    // 0x7c47c0: r30 = Instance__DecorationSlot
    //     0x7c47c0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7c47c4: ldr             lr, [lr, #0x1f0]
    // 0x7c47c8: stp             lr, x16, [SP]
    // 0x7c47cc: r0 = childForSlot()
    //     0x7c47cc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c47d0: cmp             w0, NULL
    // 0x7c47d4: b.eq            #0x7c4834
    // 0x7c47d8: ldr             x16, [fp, #0x10]
    // 0x7c47dc: stp             x0, x16, [SP]
    // 0x7c47e0: ldr             x0, [fp, #0x10]
    // 0x7c47e4: ClosureCall
    //     0x7c47e4: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x7c47e8: ldur            x2, [x0, #0x1f]
    //     0x7c47ec: blr             x2
    // 0x7c47f0: r0 = Null
    //     0x7c47f0: mov             x0, NULL
    // 0x7c47f4: LeaveFrame
    //     0x7c47f4: mov             SP, fp
    //     0x7c47f8: ldp             fp, lr, [SP], #0x10
    // 0x7c47fc: ret
    //     0x7c47fc: ret             
    // 0x7c4800: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7c4800: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7c4804: b               #0x7c4420
    // 0x7c4808: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4808: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c480c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c480c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4810: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4810: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4814: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4814: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4818: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4818: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c481c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c481c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4820: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4820: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4824: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4824: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4828: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4828: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c482c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c482c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4830: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4830: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c4834: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c4834: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ applyPaintTransform(/* No info */) {
    // ** addr: 0x7c97a0, size: 0x13c
    // 0x7c97a0: EnterFrame
    //     0x7c97a0: stp             fp, lr, [SP, #-0x10]!
    //     0x7c97a4: mov             fp, SP
    // 0x7c97a8: AllocStack(0x28)
    //     0x7c97a8: sub             SP, SP, #0x28
    // 0x7c97ac: CheckStackOverflow
    //     0x7c97ac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7c97b0: cmp             SP, x16
    //     0x7c97b4: b.ls            #0x7c98c8
    // 0x7c97b8: ldr             x16, [fp, #0x20]
    // 0x7c97bc: r30 = Instance__DecorationSlot
    //     0x7c97bc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7c97c0: ldr             lr, [lr, #0x178]
    // 0x7c97c4: stp             lr, x16, [SP]
    // 0x7c97c8: r0 = childForSlot()
    //     0x7c97c8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7c97cc: mov             x1, x0
    // 0x7c97d0: ldr             x0, [fp, #0x18]
    // 0x7c97d4: cmp             w0, w1
    // 0x7c97d8: b.ne            #0x7c98a0
    // 0x7c97dc: ldr             x1, [fp, #0x20]
    // 0x7c97e0: LoadField: r2 = r1->field_7f
    //     0x7c97e0: ldur            w2, [x1, #0x7f]
    // 0x7c97e4: DecompressPointer r2
    //     0x7c97e4: add             x2, x2, HEAP, lsl #32
    // 0x7c97e8: cmp             w2, NULL
    // 0x7c97ec: b.eq            #0x7c98a0
    // 0x7c97f0: str             x1, [SP]
    // 0x7c97f4: r0 = label()
    //     0x7c97f4: bl              #0x588eec  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::label
    // 0x7c97f8: cmp             w0, NULL
    // 0x7c97fc: b.eq            #0x7c98d0
    // 0x7c9800: LoadField: r3 = r0->field_7
    //     0x7c9800: ldur            w3, [x0, #7]
    // 0x7c9804: DecompressPointer r3
    //     0x7c9804: add             x3, x3, HEAP, lsl #32
    // 0x7c9808: stur            x3, [fp, #-8]
    // 0x7c980c: cmp             w3, NULL
    // 0x7c9810: b.eq            #0x7c98d4
    // 0x7c9814: mov             x0, x3
    // 0x7c9818: r2 = Null
    //     0x7c9818: mov             x2, NULL
    // 0x7c981c: r1 = Null
    //     0x7c981c: mov             x1, NULL
    // 0x7c9820: r4 = LoadClassIdInstr(r0)
    //     0x7c9820: ldur            x4, [x0, #-1]
    //     0x7c9824: ubfx            x4, x4, #0xc, #0x14
    // 0x7c9828: sub             x4, x4, #0x892
    // 0x7c982c: cmp             x4, #0xd
    // 0x7c9830: b.ls            #0x7c9848
    // 0x7c9834: r8 = BoxParentData
    //     0x7c9834: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x7c9838: ldr             x8, [x8, #0x318]
    // 0x7c983c: r3 = Null
    //     0x7c983c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d180] Null
    //     0x7c9840: ldr             x3, [x3, #0x180]
    // 0x7c9844: r0 = DefaultTypeTest()
    //     0x7c9844: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x7c9848: ldur            x0, [fp, #-8]
    // 0x7c984c: LoadField: r1 = r0->field_7
    //     0x7c984c: ldur            w1, [x0, #7]
    // 0x7c9850: DecompressPointer r1
    //     0x7c9850: add             x1, x1, HEAP, lsl #32
    // 0x7c9854: ldr             x0, [fp, #0x20]
    // 0x7c9858: stur            x1, [fp, #-0x10]
    // 0x7c985c: LoadField: r2 = r0->field_7f
    //     0x7c985c: ldur            w2, [x0, #0x7f]
    // 0x7c9860: DecompressPointer r2
    //     0x7c9860: add             x2, x2, HEAP, lsl #32
    // 0x7c9864: cmp             w2, NULL
    // 0x7c9868: b.eq            #0x7c98d8
    // 0x7c986c: ldr             x16, [fp, #0x10]
    // 0x7c9870: stp             x2, x16, [SP]
    // 0x7c9874: r0 = multiply()
    //     0x7c9874: bl              #0x5448d0  ; [package:vector_math/vector_math_64.dart] Matrix4::multiply
    // 0x7c9878: ldur            x0, [fp, #-0x10]
    // 0x7c987c: LoadField: d0 = r0->field_7
    //     0x7c987c: ldur            d0, [x0, #7]
    // 0x7c9880: fneg            d1, d0
    // 0x7c9884: LoadField: d0 = r0->field_f
    //     0x7c9884: ldur            d0, [x0, #0xf]
    // 0x7c9888: fneg            d2, d0
    // 0x7c988c: ldr             x16, [fp, #0x10]
    // 0x7c9890: str             x16, [SP, #0x10]
    // 0x7c9894: str             d1, [SP, #8]
    // 0x7c9898: str             d2, [SP]
    // 0x7c989c: r0 = translate()
    //     0x7c989c: bl              #0x59d4dc  ; [package:vector_math/vector_math_64.dart] Matrix4::translate
    // 0x7c98a0: ldr             x16, [fp, #0x20]
    // 0x7c98a4: ldr             lr, [fp, #0x18]
    // 0x7c98a8: stp             lr, x16, [SP, #8]
    // 0x7c98ac: ldr             x16, [fp, #0x10]
    // 0x7c98b0: str             x16, [SP]
    // 0x7c98b4: r0 = applyPaintTransform()
    //     0x7c98b4: bl              #0x7c9d78  ; [package:flutter/src/rendering/box.dart] RenderBox::applyPaintTransform
    // 0x7c98b8: r0 = Null
    //     0x7c98b8: mov             x0, NULL
    // 0x7c98bc: LeaveFrame
    //     0x7c98bc: mov             SP, fp
    //     0x7c98c0: ldp             fp, lr, [SP], #0x10
    // 0x7c98c4: ret
    //     0x7c98c4: ret             
    // 0x7c98c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7c98c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7c98cc: b               #0x7c97b8
    // 0x7c98d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c98d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c98d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c98d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7c98d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7c98d8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ performLayout(/* No info */) {
    // ** addr: 0x7d4f6c, size: 0x1adc
    // 0x7d4f6c: EnterFrame
    //     0x7d4f6c: stp             fp, lr, [SP, #-0x10]!
    //     0x7d4f70: mov             fp, SP
    // 0x7d4f74: AllocStack(0x88)
    //     0x7d4f74: sub             SP, SP, #0x88
    // 0x7d4f78: CheckStackOverflow
    //     0x7d4f78: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d4f7c: cmp             SP, x16
    //     0x7d4f80: b.ls            #0x7d66e8
    // 0x7d4f84: ldr             x3, [fp, #0x10]
    // 0x7d4f88: LoadField: r4 = r3->field_27
    //     0x7d4f88: ldur            w4, [x3, #0x27]
    // 0x7d4f8c: DecompressPointer r4
    //     0x7d4f8c: add             x4, x4, HEAP, lsl #32
    // 0x7d4f90: stur            x4, [fp, #-8]
    // 0x7d4f94: cmp             w4, NULL
    // 0x7d4f98: b.eq            #0x7d66cc
    // 0x7d4f9c: mov             x0, x4
    // 0x7d4fa0: r2 = Null
    //     0x7d4fa0: mov             x2, NULL
    // 0x7d4fa4: r1 = Null
    //     0x7d4fa4: mov             x1, NULL
    // 0x7d4fa8: r4 = LoadClassIdInstr(r0)
    //     0x7d4fa8: ldur            x4, [x0, #-1]
    //     0x7d4fac: ubfx            x4, x4, #0xc, #0x14
    // 0x7d4fb0: sub             x4, x4, #0x8a2
    // 0x7d4fb4: cmp             x4, #1
    // 0x7d4fb8: b.ls            #0x7d4fcc
    // 0x7d4fbc: r8 = BoxConstraints
    //     0x7d4fbc: ldr             x8, [PP, #0x5d28]  ; [pp+0x5d28] Type: BoxConstraints
    // 0x7d4fc0: r3 = Null
    //     0x7d4fc0: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d2d8] Null
    //     0x7d4fc4: ldr             x3, [x3, #0x2d8]
    // 0x7d4fc8: r0 = BoxConstraints()
    //     0x7d4fc8: bl              #0x578d4c  ; IsType_BoxConstraints_Stub
    // 0x7d4fcc: ldr             x0, [fp, #0x10]
    // 0x7d4fd0: StoreField: r0->field_7f = rNULL
    //     0x7d4fd0: stur            NULL, [x0, #0x7f]
    // 0x7d4fd4: ldur            x16, [fp, #-8]
    // 0x7d4fd8: stp             x16, x0, [SP]
    // 0x7d4fdc: r0 = _layout()
    //     0x7d4fdc: bl              #0x7d6bd4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layout
    // 0x7d4fe0: stur            x0, [fp, #-0x10]
    // 0x7d4fe4: r1 = 3
    //     0x7d4fe4: movz            x1, #0x3
    // 0x7d4fe8: r0 = AllocateContext()
    //     0x7d4fe8: bl              #0xc5def4  ; AllocateContextStub
    // 0x7d4fec: mov             x1, x0
    // 0x7d4ff0: ldur            x0, [fp, #-0x10]
    // 0x7d4ff4: stur            x1, [fp, #-0x18]
    // 0x7d4ff8: StoreField: r1->field_f = r0
    //     0x7d4ff8: stur            w0, [x1, #0xf]
    // 0x7d4ffc: ldur            x2, [fp, #-8]
    // 0x7d5000: LoadField: d0 = r2->field_f
    //     0x7d5000: ldur            d0, [x2, #0xf]
    // 0x7d5004: stur            d0, [fp, #-0x58]
    // 0x7d5008: LoadField: d1 = r0->field_23
    //     0x7d5008: ldur            d1, [x0, #0x23]
    // 0x7d500c: stur            d1, [fp, #-0x50]
    // 0x7d5010: LoadField: d2 = r0->field_2b
    //     0x7d5010: ldur            d2, [x0, #0x2b]
    // 0x7d5014: stur            d2, [fp, #-0x48]
    // 0x7d5018: fadd            d3, d1, d2
    // 0x7d501c: stur            d3, [fp, #-0x40]
    // 0x7d5020: ldr             x16, [fp, #0x10]
    // 0x7d5024: r30 = Instance__DecorationSlot
    //     0x7d5024: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x7d5028: ldr             lr, [lr, #0x1f8]
    // 0x7d502c: stp             lr, x16, [SP]
    // 0x7d5030: r0 = childForSlot()
    //     0x7d5030: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5034: stur            x0, [fp, #-0x20]
    // 0x7d5038: cmp             w0, NULL
    // 0x7d503c: b.eq            #0x7d5184
    // 0x7d5040: ldr             x1, [fp, #0x10]
    // 0x7d5044: ldur            d0, [fp, #-0x58]
    // 0x7d5048: ldur            d1, [fp, #-0x50]
    // 0x7d504c: r16 = Instance__DecorationSlot
    //     0x7d504c: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d5050: ldr             x16, [x16, #0x1b0]
    // 0x7d5054: stp             x16, x1, [SP]
    // 0x7d5058: r0 = childForSlot()
    //     0x7d5058: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d505c: str             x0, [SP]
    // 0x7d5060: r0 = _boxSize()
    //     0x7d5060: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d5064: LoadField: d0 = r0->field_7
    //     0x7d5064: ldur            d0, [x0, #7]
    // 0x7d5068: ldur            d1, [fp, #-0x58]
    // 0x7d506c: fsub            d2, d1, d0
    // 0x7d5070: stur            d2, [fp, #-0x60]
    // 0x7d5074: r0 = BoxConstraints()
    //     0x7d5074: bl              #0x578ce0  ; AllocateBoxConstraintsStub -> BoxConstraints (size=0x28)
    // 0x7d5078: ldur            d0, [fp, #-0x60]
    // 0x7d507c: StoreField: r0->field_7 = d0
    //     0x7d507c: stur            d0, [x0, #7]
    // 0x7d5080: StoreField: r0->field_f = d0
    //     0x7d5080: stur            d0, [x0, #0xf]
    // 0x7d5084: ldur            d0, [fp, #-0x50]
    // 0x7d5088: ArrayStore: r0[0] = d0  ; List_8
    //     0x7d5088: stur            d0, [x0, #0x17]
    // 0x7d508c: StoreField: r0->field_1f = d0
    //     0x7d508c: stur            d0, [x0, #0x1f]
    // 0x7d5090: ldur            x1, [fp, #-0x20]
    // 0x7d5094: r2 = LoadClassIdInstr(r1)
    //     0x7d5094: ldur            x2, [x1, #-1]
    //     0x7d5098: ubfx            x2, x2, #0xc, #0x14
    // 0x7d509c: stp             x0, x1, [SP, #8]
    // 0x7d50a0: r16 = true
    //     0x7d50a0: add             x16, NULL, #0x20  ; true
    // 0x7d50a4: str             x16, [SP]
    // 0x7d50a8: mov             x0, x2
    // 0x7d50ac: r4 = const [0, 0x3, 0x3, 0x2, parentUsesSize, 0x2, null]
    //     0x7d50ac: add             x4, PP, #0xa, lsl #12  ; [pp+0xa1e8] List(7) [0, 0x3, 0x3, 0x2, "parentUsesSize", 0x2, Null]
    //     0x7d50b0: ldr             x4, [x4, #0x1e8]
    // 0x7d50b4: r0 = GDT[cid_x0 + 0xb275]()
    //     0x7d50b4: movz            x17, #0xb275
    //     0x7d50b8: add             lr, x0, x17
    //     0x7d50bc: ldr             lr, [x21, lr, lsl #3]
    //     0x7d50c0: blr             lr
    // 0x7d50c4: ldr             x0, [fp, #0x10]
    // 0x7d50c8: LoadField: r1 = r0->field_67
    //     0x7d50c8: ldur            w1, [x0, #0x67]
    // 0x7d50cc: DecompressPointer r1
    //     0x7d50cc: add             x1, x1, HEAP, lsl #32
    // 0x7d50d0: LoadField: r2 = r1->field_7
    //     0x7d50d0: ldur            x2, [x1, #7]
    // 0x7d50d4: cmp             x2, #0
    // 0x7d50d8: b.gt            #0x7d50e4
    // 0x7d50dc: d0 = 0.000000
    //     0x7d50dc: eor             v0.16b, v0.16b, v0.16b
    // 0x7d50e0: b               #0x7d5100
    // 0x7d50e4: r16 = Instance__DecorationSlot
    //     0x7d50e4: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d50e8: ldr             x16, [x16, #0x1b0]
    // 0x7d50ec: stp             x16, x0, [SP]
    // 0x7d50f0: r0 = childForSlot()
    //     0x7d50f0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d50f4: str             x0, [SP]
    // 0x7d50f8: r0 = _boxSize()
    //     0x7d50f8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d50fc: LoadField: d0 = r0->field_7
    //     0x7d50fc: ldur            d0, [x0, #7]
    // 0x7d5100: ldur            x3, [fp, #-0x20]
    // 0x7d5104: stur            d0, [fp, #-0x60]
    // 0x7d5108: LoadField: r4 = r3->field_7
    //     0x7d5108: ldur            w4, [x3, #7]
    // 0x7d510c: DecompressPointer r4
    //     0x7d510c: add             x4, x4, HEAP, lsl #32
    // 0x7d5110: stur            x4, [fp, #-0x28]
    // 0x7d5114: cmp             w4, NULL
    // 0x7d5118: b.eq            #0x7d66f0
    // 0x7d511c: mov             x0, x4
    // 0x7d5120: r2 = Null
    //     0x7d5120: mov             x2, NULL
    // 0x7d5124: r1 = Null
    //     0x7d5124: mov             x1, NULL
    // 0x7d5128: r4 = LoadClassIdInstr(r0)
    //     0x7d5128: ldur            x4, [x0, #-1]
    //     0x7d512c: ubfx            x4, x4, #0xc, #0x14
    // 0x7d5130: sub             x4, x4, #0x892
    // 0x7d5134: cmp             x4, #0xd
    // 0x7d5138: b.ls            #0x7d5150
    // 0x7d513c: r8 = BoxParentData
    //     0x7d513c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x7d5140: ldr             x8, [x8, #0x318]
    // 0x7d5144: r3 = Null
    //     0x7d5144: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d2e8] Null
    //     0x7d5148: ldr             x3, [x3, #0x2e8]
    // 0x7d514c: r0 = DefaultTypeTest()
    //     0x7d514c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x7d5150: r0 = Offset()
    //     0x7d5150: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x7d5154: ldur            d0, [fp, #-0x60]
    // 0x7d5158: StoreField: r0->field_7 = d0
    //     0x7d5158: stur            d0, [x0, #7]
    // 0x7d515c: d0 = 0.000000
    //     0x7d515c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d5160: StoreField: r0->field_f = d0
    //     0x7d5160: stur            d0, [x0, #0xf]
    // 0x7d5164: ldur            x1, [fp, #-0x28]
    // 0x7d5168: StoreField: r1->field_7 = r0
    //     0x7d5168: stur            w0, [x1, #7]
    //     0x7d516c: ldurb           w16, [x1, #-1]
    //     0x7d5170: ldurb           w17, [x0, #-1]
    //     0x7d5174: and             x16, x17, x16, lsr #2
    //     0x7d5178: tst             x16, HEAP, lsr #32
    //     0x7d517c: b.eq            #0x7d5184
    //     0x7d5180: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7d5184: ldr             x0, [fp, #0x10]
    // 0x7d5188: ldur            x3, [fp, #-0x18]
    // 0x7d518c: ldur            d1, [fp, #-0x58]
    // 0x7d5190: ldur            d0, [fp, #-0x50]
    // 0x7d5194: r4 = Sentinel
    //     0x7d5194: ldr             x4, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x7d5198: StoreField: r3->field_13 = r4
    //     0x7d5198: stur            w4, [x3, #0x13]
    // 0x7d519c: mov             x2, x3
    // 0x7d51a0: r1 = Function 'centerLayout':.
    //     0x7d51a0: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d2f8] AnonymousClosure: (0x7d9040), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::performLayout (0x7d4f6c)
    //     0x7d51a4: ldr             x1, [x1, #0x2f8]
    // 0x7d51a8: r0 = AllocateClosure()
    //     0x7d51a8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x7d51ac: mov             x3, x0
    // 0x7d51b0: ldur            x0, [fp, #-0x18]
    // 0x7d51b4: r1 = Sentinel
    //     0x7d51b4: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x7d51b8: stur            x3, [fp, #-0x28]
    // 0x7d51bc: ArrayStore: r0[0] = r1  ; List_4
    //     0x7d51bc: stur            w1, [x0, #0x17]
    // 0x7d51c0: mov             x2, x0
    // 0x7d51c4: r1 = Function 'baselineLayout':.
    //     0x7d51c4: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d300] AnonymousClosure: (0x7d8e80), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::performLayout (0x7d4f6c)
    //     0x7d51c8: ldr             x1, [x1, #0x300]
    // 0x7d51cc: r0 = AllocateClosure()
    //     0x7d51cc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x7d51d0: mov             x2, x0
    // 0x7d51d4: ldr             x1, [fp, #0x10]
    // 0x7d51d8: stur            x2, [fp, #-0x30]
    // 0x7d51dc: LoadField: r0 = r1->field_63
    //     0x7d51dc: ldur            w0, [x1, #0x63]
    // 0x7d51e0: DecompressPointer r0
    //     0x7d51e0: add             x0, x0, HEAP, lsl #32
    // 0x7d51e4: LoadField: r3 = r0->field_7
    //     0x7d51e4: ldur            w3, [x0, #7]
    // 0x7d51e8: DecompressPointer r3
    //     0x7d51e8: add             x3, x3, HEAP, lsl #32
    // 0x7d51ec: LoadField: d0 = r3->field_7
    //     0x7d51ec: ldur            d0, [x3, #7]
    // 0x7d51f0: stur            d0, [fp, #-0x68]
    // 0x7d51f4: ArrayLoad: d1 = r3[0]  ; List_8
    //     0x7d51f4: ldur            d1, [x3, #0x17]
    // 0x7d51f8: ldur            d2, [fp, #-0x58]
    // 0x7d51fc: fsub            d3, d2, d1
    // 0x7d5200: ldur            d1, [fp, #-0x50]
    // 0x7d5204: stur            d3, [fp, #-0x60]
    // 0x7d5208: r0 = inline_Allocate_Double()
    //     0x7d5208: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0x7d520c: add             x0, x0, #0x10
    //     0x7d5210: cmp             x3, x0
    //     0x7d5214: b.ls            #0x7d66f4
    //     0x7d5218: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d521c: sub             x0, x0, #0xf
    //     0x7d5220: movz            x3, #0xd148
    //     0x7d5224: movk            x3, #0x3, lsl #16
    //     0x7d5228: stur            x3, [x0, #-1]
    // 0x7d522c: StoreField: r0->field_7 = d1
    //     0x7d522c: stur            d1, [x0, #7]
    // 0x7d5230: ldur            x3, [fp, #-0x18]
    // 0x7d5234: StoreField: r3->field_13 = r0
    //     0x7d5234: stur            w0, [x3, #0x13]
    //     0x7d5238: ldurb           w16, [x3, #-1]
    //     0x7d523c: ldurb           w17, [x0, #-1]
    //     0x7d5240: and             x16, x17, x16, lsr #2
    //     0x7d5244: tst             x16, HEAP, lsr #32
    //     0x7d5248: b.eq            #0x7d5250
    //     0x7d524c: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x7d5250: str             x1, [SP]
    // 0x7d5254: r0 = _isOutlineAligned()
    //     0x7d5254: bl              #0x7d6b24  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_isOutlineAligned
    // 0x7d5258: tbnz            w0, #4, #0x7d5268
    // 0x7d525c: ldur            x1, [fp, #-0x10]
    // 0x7d5260: LoadField: d0 = r1->field_13
    //     0x7d5260: ldur            d0, [x1, #0x13]
    // 0x7d5264: b               #0x7d5270
    // 0x7d5268: ldur            x1, [fp, #-0x10]
    // 0x7d526c: LoadField: d0 = r1->field_b
    //     0x7d526c: ldur            d0, [x1, #0xb]
    // 0x7d5270: ldur            x2, [fp, #-0x18]
    // 0x7d5274: r0 = inline_Allocate_Double()
    //     0x7d5274: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0x7d5278: add             x0, x0, #0x10
    //     0x7d527c: cmp             x3, x0
    //     0x7d5280: b.ls            #0x7d6714
    //     0x7d5284: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5288: sub             x0, x0, #0xf
    //     0x7d528c: movz            x3, #0xd148
    //     0x7d5290: movk            x3, #0x3, lsl #16
    //     0x7d5294: stur            x3, [x0, #-1]
    // 0x7d5298: StoreField: r0->field_7 = d0
    //     0x7d5298: stur            d0, [x0, #7]
    // 0x7d529c: ArrayStore: r2[0] = r0  ; List_4
    //     0x7d529c: stur            w0, [x2, #0x17]
    //     0x7d52a0: ldurb           w16, [x2, #-1]
    //     0x7d52a4: ldurb           w17, [x0, #-1]
    //     0x7d52a8: and             x16, x17, x16, lsr #2
    //     0x7d52ac: tst             x16, HEAP, lsr #32
    //     0x7d52b0: b.eq            #0x7d52b8
    //     0x7d52b4: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x7d52b8: ldr             x16, [fp, #0x10]
    // 0x7d52bc: r30 = Instance__DecorationSlot
    //     0x7d52bc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d52c0: ldr             lr, [lr, #0x1b0]
    // 0x7d52c4: stp             lr, x16, [SP]
    // 0x7d52c8: r0 = childForSlot()
    //     0x7d52c8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d52cc: cmp             w0, NULL
    // 0x7d52d0: b.eq            #0x7d5394
    // 0x7d52d4: ldr             x0, [fp, #0x10]
    // 0x7d52d8: LoadField: r1 = r0->field_67
    //     0x7d52d8: ldur            w1, [x0, #0x67]
    // 0x7d52dc: DecompressPointer r1
    //     0x7d52dc: add             x1, x1, HEAP, lsl #32
    // 0x7d52e0: LoadField: r2 = r1->field_7
    //     0x7d52e0: ldur            x2, [x1, #7]
    // 0x7d52e4: cmp             x2, #0
    // 0x7d52e8: b.gt            #0x7d5324
    // 0x7d52ec: ldur            d0, [fp, #-0x58]
    // 0x7d52f0: r16 = Instance__DecorationSlot
    //     0x7d52f0: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d52f4: ldr             x16, [x16, #0x1b0]
    // 0x7d52f8: stp             x16, x0, [SP]
    // 0x7d52fc: r0 = childForSlot()
    //     0x7d52fc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5300: cmp             w0, NULL
    // 0x7d5304: b.eq            #0x7d672c
    // 0x7d5308: str             x0, [SP]
    // 0x7d530c: r0 = size()
    //     0x7d530c: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5310: LoadField: d0 = r0->field_7
    //     0x7d5310: ldur            d0, [x0, #7]
    // 0x7d5314: ldur            d1, [fp, #-0x58]
    // 0x7d5318: fsub            d2, d1, d0
    // 0x7d531c: mov             v0.16b, v2.16b
    // 0x7d5320: b               #0x7d532c
    // 0x7d5324: ldur            d1, [fp, #-0x58]
    // 0x7d5328: d0 = 0.000000
    //     0x7d5328: eor             v0.16b, v0.16b, v0.16b
    // 0x7d532c: stur            d0, [fp, #-0x50]
    // 0x7d5330: ldr             x16, [fp, #0x10]
    // 0x7d5334: r30 = Instance__DecorationSlot
    //     0x7d5334: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d5338: ldr             lr, [lr, #0x1b0]
    // 0x7d533c: stp             lr, x16, [SP]
    // 0x7d5340: r0 = childForSlot()
    //     0x7d5340: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5344: cmp             w0, NULL
    // 0x7d5348: b.eq            #0x7d6730
    // 0x7d534c: ldur            d0, [fp, #-0x50]
    // 0x7d5350: r1 = inline_Allocate_Double()
    //     0x7d5350: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5354: add             x1, x1, #0x10
    //     0x7d5358: cmp             x2, x1
    //     0x7d535c: b.ls            #0x7d6734
    //     0x7d5360: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5364: sub             x1, x1, #0xf
    //     0x7d5368: movz            x2, #0xd148
    //     0x7d536c: movk            x2, #0x3, lsl #16
    //     0x7d5370: stur            x2, [x1, #-1]
    // 0x7d5374: StoreField: r1->field_7 = d0
    //     0x7d5374: stur            d0, [x1, #7]
    // 0x7d5378: ldur            x16, [fp, #-0x28]
    // 0x7d537c: stp             x0, x16, [SP, #8]
    // 0x7d5380: str             x1, [SP]
    // 0x7d5384: ldur            x0, [fp, #-0x28]
    // 0x7d5388: ClosureCall
    //     0x7d5388: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d538c: ldur            x2, [x0, #0x1f]
    //     0x7d5390: blr             x2
    // 0x7d5394: ldr             x0, [fp, #0x10]
    // 0x7d5398: LoadField: r1 = r0->field_67
    //     0x7d5398: ldur            w1, [x0, #0x67]
    // 0x7d539c: DecompressPointer r1
    //     0x7d539c: add             x1, x1, HEAP, lsl #32
    // 0x7d53a0: LoadField: r2 = r1->field_7
    //     0x7d53a0: ldur            x2, [x1, #7]
    // 0x7d53a4: cmp             x2, #0
    // 0x7d53a8: b.gt            #0x7d596c
    // 0x7d53ac: ldur            d0, [fp, #-0x60]
    // 0x7d53b0: r16 = Instance__DecorationSlot
    //     0x7d53b0: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d53b4: ldr             x16, [x16, #0x1b0]
    // 0x7d53b8: stp             x16, x0, [SP]
    // 0x7d53bc: r0 = childForSlot()
    //     0x7d53bc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d53c0: str             x0, [SP]
    // 0x7d53c4: r0 = _boxSize()
    //     0x7d53c4: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d53c8: LoadField: d0 = r0->field_7
    //     0x7d53c8: ldur            d0, [x0, #7]
    // 0x7d53cc: ldur            d1, [fp, #-0x60]
    // 0x7d53d0: fsub            d2, d1, d0
    // 0x7d53d4: stur            d2, [fp, #-0x50]
    // 0x7d53d8: ldr             x16, [fp, #0x10]
    // 0x7d53dc: r30 = Instance__DecorationSlot
    //     0x7d53dc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d53e0: ldr             lr, [lr, #0x1c0]
    // 0x7d53e4: stp             lr, x16, [SP]
    // 0x7d53e8: r0 = childForSlot()
    //     0x7d53e8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d53ec: cmp             w0, NULL
    // 0x7d53f0: b.eq            #0x7d54e8
    // 0x7d53f4: ldr             x0, [fp, #0x10]
    // 0x7d53f8: ldur            d0, [fp, #-0x50]
    // 0x7d53fc: LoadField: r1 = r0->field_63
    //     0x7d53fc: ldur            w1, [x0, #0x63]
    // 0x7d5400: DecompressPointer r1
    //     0x7d5400: add             x1, x1, HEAP, lsl #32
    // 0x7d5404: LoadField: r2 = r1->field_7
    //     0x7d5404: ldur            w2, [x1, #7]
    // 0x7d5408: DecompressPointer r2
    //     0x7d5408: add             x2, x2, HEAP, lsl #32
    // 0x7d540c: ArrayLoad: d1 = r2[0]  ; List_8
    //     0x7d540c: ldur            d1, [x2, #0x17]
    // 0x7d5410: fadd            d2, d0, d1
    // 0x7d5414: stur            d2, [fp, #-0x70]
    // 0x7d5418: r16 = Instance__DecorationSlot
    //     0x7d5418: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d541c: ldr             x16, [x16, #0x1c0]
    // 0x7d5420: stp             x16, x0, [SP]
    // 0x7d5424: r0 = childForSlot()
    //     0x7d5424: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5428: stur            x0, [fp, #-0x38]
    // 0x7d542c: cmp             w0, NULL
    // 0x7d5430: b.eq            #0x7d6750
    // 0x7d5434: ldr             x16, [fp, #0x10]
    // 0x7d5438: r30 = Instance__DecorationSlot
    //     0x7d5438: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d543c: ldr             lr, [lr, #0x1c0]
    // 0x7d5440: stp             lr, x16, [SP]
    // 0x7d5444: r0 = childForSlot()
    //     0x7d5444: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5448: cmp             w0, NULL
    // 0x7d544c: b.eq            #0x7d6754
    // 0x7d5450: str             x0, [SP]
    // 0x7d5454: r0 = size()
    //     0x7d5454: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5458: LoadField: d0 = r0->field_7
    //     0x7d5458: ldur            d0, [x0, #7]
    // 0x7d545c: ldur            d1, [fp, #-0x70]
    // 0x7d5460: fsub            d2, d1, d0
    // 0x7d5464: r0 = inline_Allocate_Double()
    //     0x7d5464: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d5468: add             x0, x0, #0x10
    //     0x7d546c: cmp             x1, x0
    //     0x7d5470: b.ls            #0x7d6758
    //     0x7d5474: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5478: sub             x0, x0, #0xf
    //     0x7d547c: movz            x1, #0xd148
    //     0x7d5480: movk            x1, #0x3, lsl #16
    //     0x7d5484: stur            x1, [x0, #-1]
    // 0x7d5488: StoreField: r0->field_7 = d2
    //     0x7d5488: stur            d2, [x0, #7]
    // 0x7d548c: ldur            x16, [fp, #-0x28]
    // 0x7d5490: ldur            lr, [fp, #-0x38]
    // 0x7d5494: stp             lr, x16, [SP, #8]
    // 0x7d5498: str             x0, [SP]
    // 0x7d549c: ldur            x0, [fp, #-0x28]
    // 0x7d54a0: ClosureCall
    //     0x7d54a0: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d54a4: ldur            x2, [x0, #0x1f]
    //     0x7d54a8: blr             x2
    // 0x7d54ac: ldur            d0, [fp, #-0x70]
    // 0x7d54b0: r1 = inline_Allocate_Double()
    //     0x7d54b0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d54b4: add             x1, x1, #0x10
    //     0x7d54b8: cmp             x2, x1
    //     0x7d54bc: b.ls            #0x7d6768
    //     0x7d54c0: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d54c4: sub             x1, x1, #0xf
    //     0x7d54c8: movz            x2, #0xd148
    //     0x7d54cc: movk            x2, #0x3, lsl #16
    //     0x7d54d0: stur            x2, [x1, #-1]
    // 0x7d54d4: StoreField: r1->field_7 = d0
    //     0x7d54d4: stur            d0, [x1, #7]
    // 0x7d54d8: stp             x0, x1, [SP]
    // 0x7d54dc: r0 = -()
    //     0x7d54dc: bl              #0xc59d7c  ; [dart:core] _Double::-
    // 0x7d54e0: LoadField: d0 = r0->field_7
    //     0x7d54e0: ldur            d0, [x0, #7]
    // 0x7d54e4: b               #0x7d54ec
    // 0x7d54e8: ldur            d0, [fp, #-0x50]
    // 0x7d54ec: stur            d0, [fp, #-0x50]
    // 0x7d54f0: ldr             x16, [fp, #0x10]
    // 0x7d54f4: r30 = Instance__DecorationSlot
    //     0x7d54f4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d54f8: ldr             lr, [lr, #0x178]
    // 0x7d54fc: stp             lr, x16, [SP]
    // 0x7d5500: r0 = childForSlot()
    //     0x7d5500: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5504: cmp             w0, NULL
    // 0x7d5508: b.eq            #0x7d55a8
    // 0x7d550c: ldur            d0, [fp, #-0x50]
    // 0x7d5510: ldr             x16, [fp, #0x10]
    // 0x7d5514: r30 = Instance__DecorationSlot
    //     0x7d5514: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d5518: ldr             lr, [lr, #0x178]
    // 0x7d551c: stp             lr, x16, [SP]
    // 0x7d5520: r0 = childForSlot()
    //     0x7d5520: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5524: stur            x0, [fp, #-0x38]
    // 0x7d5528: cmp             w0, NULL
    // 0x7d552c: b.eq            #0x7d6784
    // 0x7d5530: ldr             x16, [fp, #0x10]
    // 0x7d5534: r30 = Instance__DecorationSlot
    //     0x7d5534: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d5538: ldr             lr, [lr, #0x178]
    // 0x7d553c: stp             lr, x16, [SP]
    // 0x7d5540: r0 = childForSlot()
    //     0x7d5540: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5544: cmp             w0, NULL
    // 0x7d5548: b.eq            #0x7d6788
    // 0x7d554c: str             x0, [SP]
    // 0x7d5550: r0 = size()
    //     0x7d5550: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5554: LoadField: d0 = r0->field_7
    //     0x7d5554: ldur            d0, [x0, #7]
    // 0x7d5558: ldur            d1, [fp, #-0x50]
    // 0x7d555c: fsub            d2, d1, d0
    // 0x7d5560: r0 = inline_Allocate_Double()
    //     0x7d5560: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d5564: add             x0, x0, #0x10
    //     0x7d5568: cmp             x1, x0
    //     0x7d556c: b.ls            #0x7d678c
    //     0x7d5570: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5574: sub             x0, x0, #0xf
    //     0x7d5578: movz            x1, #0xd148
    //     0x7d557c: movk            x1, #0x3, lsl #16
    //     0x7d5580: stur            x1, [x0, #-1]
    // 0x7d5584: StoreField: r0->field_7 = d2
    //     0x7d5584: stur            d2, [x0, #7]
    // 0x7d5588: ldur            x16, [fp, #-0x28]
    // 0x7d558c: ldur            lr, [fp, #-0x38]
    // 0x7d5590: stp             lr, x16, [SP, #8]
    // 0x7d5594: str             x0, [SP]
    // 0x7d5598: ldur            x0, [fp, #-0x28]
    // 0x7d559c: ClosureCall
    //     0x7d559c: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d55a0: ldur            x2, [x0, #0x1f]
    //     0x7d55a4: blr             x2
    // 0x7d55a8: ldr             x16, [fp, #0x10]
    // 0x7d55ac: r30 = Instance__DecorationSlot
    //     0x7d55ac: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d55b0: ldr             lr, [lr, #0x1d0]
    // 0x7d55b4: stp             lr, x16, [SP]
    // 0x7d55b8: r0 = childForSlot()
    //     0x7d55b8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d55bc: cmp             w0, NULL
    // 0x7d55c0: b.eq            #0x7d569c
    // 0x7d55c4: ldur            d0, [fp, #-0x50]
    // 0x7d55c8: ldr             x16, [fp, #0x10]
    // 0x7d55cc: r30 = Instance__DecorationSlot
    //     0x7d55cc: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d55d0: ldr             lr, [lr, #0x1d0]
    // 0x7d55d4: stp             lr, x16, [SP]
    // 0x7d55d8: r0 = childForSlot()
    //     0x7d55d8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d55dc: stur            x0, [fp, #-0x38]
    // 0x7d55e0: cmp             w0, NULL
    // 0x7d55e4: b.eq            #0x7d679c
    // 0x7d55e8: ldr             x16, [fp, #0x10]
    // 0x7d55ec: r30 = Instance__DecorationSlot
    //     0x7d55ec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d55f0: ldr             lr, [lr, #0x1d0]
    // 0x7d55f4: stp             lr, x16, [SP]
    // 0x7d55f8: r0 = childForSlot()
    //     0x7d55f8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d55fc: cmp             w0, NULL
    // 0x7d5600: b.eq            #0x7d67a0
    // 0x7d5604: str             x0, [SP]
    // 0x7d5608: r0 = size()
    //     0x7d5608: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d560c: LoadField: d0 = r0->field_7
    //     0x7d560c: ldur            d0, [x0, #7]
    // 0x7d5610: ldur            d1, [fp, #-0x50]
    // 0x7d5614: fsub            d2, d1, d0
    // 0x7d5618: r0 = inline_Allocate_Double()
    //     0x7d5618: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d561c: add             x0, x0, #0x10
    //     0x7d5620: cmp             x1, x0
    //     0x7d5624: b.ls            #0x7d67a4
    //     0x7d5628: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d562c: sub             x0, x0, #0xf
    //     0x7d5630: movz            x1, #0xd148
    //     0x7d5634: movk            x1, #0x3, lsl #16
    //     0x7d5638: stur            x1, [x0, #-1]
    // 0x7d563c: StoreField: r0->field_7 = d2
    //     0x7d563c: stur            d2, [x0, #7]
    // 0x7d5640: ldur            x16, [fp, #-0x30]
    // 0x7d5644: ldur            lr, [fp, #-0x38]
    // 0x7d5648: stp             lr, x16, [SP, #8]
    // 0x7d564c: str             x0, [SP]
    // 0x7d5650: ldur            x0, [fp, #-0x30]
    // 0x7d5654: ClosureCall
    //     0x7d5654: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5658: ldur            x2, [x0, #0x1f]
    //     0x7d565c: blr             x2
    // 0x7d5660: ldur            d0, [fp, #-0x50]
    // 0x7d5664: r1 = inline_Allocate_Double()
    //     0x7d5664: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5668: add             x1, x1, #0x10
    //     0x7d566c: cmp             x2, x1
    //     0x7d5670: b.ls            #0x7d67b4
    //     0x7d5674: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5678: sub             x1, x1, #0xf
    //     0x7d567c: movz            x2, #0xd148
    //     0x7d5680: movk            x2, #0x3, lsl #16
    //     0x7d5684: stur            x2, [x1, #-1]
    // 0x7d5688: StoreField: r1->field_7 = d0
    //     0x7d5688: stur            d0, [x1, #7]
    // 0x7d568c: stp             x0, x1, [SP]
    // 0x7d5690: r0 = -()
    //     0x7d5690: bl              #0xc59d7c  ; [dart:core] _Double::-
    // 0x7d5694: LoadField: d0 = r0->field_7
    //     0x7d5694: ldur            d0, [x0, #7]
    // 0x7d5698: b               #0x7d56a0
    // 0x7d569c: ldur            d0, [fp, #-0x50]
    // 0x7d56a0: stur            d0, [fp, #-0x50]
    // 0x7d56a4: ldr             x16, [fp, #0x10]
    // 0x7d56a8: r30 = Instance__DecorationSlot
    //     0x7d56a8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d56ac: ldr             lr, [lr, #0x1b8]
    // 0x7d56b0: stp             lr, x16, [SP]
    // 0x7d56b4: r0 = childForSlot()
    //     0x7d56b4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d56b8: cmp             w0, NULL
    // 0x7d56bc: b.eq            #0x7d575c
    // 0x7d56c0: ldur            d0, [fp, #-0x50]
    // 0x7d56c4: ldr             x16, [fp, #0x10]
    // 0x7d56c8: r30 = Instance__DecorationSlot
    //     0x7d56c8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d56cc: ldr             lr, [lr, #0x1b8]
    // 0x7d56d0: stp             lr, x16, [SP]
    // 0x7d56d4: r0 = childForSlot()
    //     0x7d56d4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d56d8: stur            x0, [fp, #-0x38]
    // 0x7d56dc: cmp             w0, NULL
    // 0x7d56e0: b.eq            #0x7d67d0
    // 0x7d56e4: ldr             x16, [fp, #0x10]
    // 0x7d56e8: r30 = Instance__DecorationSlot
    //     0x7d56e8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d56ec: ldr             lr, [lr, #0x1b8]
    // 0x7d56f0: stp             lr, x16, [SP]
    // 0x7d56f4: r0 = childForSlot()
    //     0x7d56f4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d56f8: cmp             w0, NULL
    // 0x7d56fc: b.eq            #0x7d67d4
    // 0x7d5700: str             x0, [SP]
    // 0x7d5704: r0 = size()
    //     0x7d5704: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5708: LoadField: d0 = r0->field_7
    //     0x7d5708: ldur            d0, [x0, #7]
    // 0x7d570c: ldur            d1, [fp, #-0x50]
    // 0x7d5710: fsub            d2, d1, d0
    // 0x7d5714: r0 = inline_Allocate_Double()
    //     0x7d5714: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d5718: add             x0, x0, #0x10
    //     0x7d571c: cmp             x1, x0
    //     0x7d5720: b.ls            #0x7d67d8
    //     0x7d5724: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5728: sub             x0, x0, #0xf
    //     0x7d572c: movz            x1, #0xd148
    //     0x7d5730: movk            x1, #0x3, lsl #16
    //     0x7d5734: stur            x1, [x0, #-1]
    // 0x7d5738: StoreField: r0->field_7 = d2
    //     0x7d5738: stur            d2, [x0, #7]
    // 0x7d573c: ldur            x16, [fp, #-0x30]
    // 0x7d5740: ldur            lr, [fp, #-0x38]
    // 0x7d5744: stp             lr, x16, [SP, #8]
    // 0x7d5748: str             x0, [SP]
    // 0x7d574c: ldur            x0, [fp, #-0x30]
    // 0x7d5750: ClosureCall
    //     0x7d5750: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5754: ldur            x2, [x0, #0x1f]
    //     0x7d5758: blr             x2
    // 0x7d575c: ldr             x16, [fp, #0x10]
    // 0x7d5760: r30 = Instance__DecorationSlot
    //     0x7d5760: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d5764: ldr             lr, [lr, #0x1e0]
    // 0x7d5768: stp             lr, x16, [SP]
    // 0x7d576c: r0 = childForSlot()
    //     0x7d576c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5770: cmp             w0, NULL
    // 0x7d5774: b.eq            #0x7d5814
    // 0x7d5778: ldur            d0, [fp, #-0x50]
    // 0x7d577c: ldr             x16, [fp, #0x10]
    // 0x7d5780: r30 = Instance__DecorationSlot
    //     0x7d5780: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d5784: ldr             lr, [lr, #0x1e0]
    // 0x7d5788: stp             lr, x16, [SP]
    // 0x7d578c: r0 = childForSlot()
    //     0x7d578c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5790: stur            x0, [fp, #-0x38]
    // 0x7d5794: cmp             w0, NULL
    // 0x7d5798: b.eq            #0x7d67e8
    // 0x7d579c: ldr             x16, [fp, #0x10]
    // 0x7d57a0: r30 = Instance__DecorationSlot
    //     0x7d57a0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d57a4: ldr             lr, [lr, #0x1e0]
    // 0x7d57a8: stp             lr, x16, [SP]
    // 0x7d57ac: r0 = childForSlot()
    //     0x7d57ac: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d57b0: cmp             w0, NULL
    // 0x7d57b4: b.eq            #0x7d67ec
    // 0x7d57b8: str             x0, [SP]
    // 0x7d57bc: r0 = size()
    //     0x7d57bc: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d57c0: LoadField: d0 = r0->field_7
    //     0x7d57c0: ldur            d0, [x0, #7]
    // 0x7d57c4: ldur            d1, [fp, #-0x50]
    // 0x7d57c8: fsub            d2, d1, d0
    // 0x7d57cc: r0 = inline_Allocate_Double()
    //     0x7d57cc: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d57d0: add             x0, x0, #0x10
    //     0x7d57d4: cmp             x1, x0
    //     0x7d57d8: b.ls            #0x7d67f0
    //     0x7d57dc: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d57e0: sub             x0, x0, #0xf
    //     0x7d57e4: movz            x1, #0xd148
    //     0x7d57e8: movk            x1, #0x3, lsl #16
    //     0x7d57ec: stur            x1, [x0, #-1]
    // 0x7d57f0: StoreField: r0->field_7 = d2
    //     0x7d57f0: stur            d2, [x0, #7]
    // 0x7d57f4: ldur            x16, [fp, #-0x30]
    // 0x7d57f8: ldur            lr, [fp, #-0x38]
    // 0x7d57fc: stp             lr, x16, [SP, #8]
    // 0x7d5800: str             x0, [SP]
    // 0x7d5804: ldur            x0, [fp, #-0x30]
    // 0x7d5808: ClosureCall
    //     0x7d5808: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d580c: ldur            x2, [x0, #0x1f]
    //     0x7d5810: blr             x2
    // 0x7d5814: ldr             x16, [fp, #0x10]
    // 0x7d5818: r30 = Instance__DecorationSlot
    //     0x7d5818: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d581c: ldr             lr, [lr, #0x1c8]
    // 0x7d5820: stp             lr, x16, [SP]
    // 0x7d5824: r0 = childForSlot()
    //     0x7d5824: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5828: cmp             w0, NULL
    // 0x7d582c: b.eq            #0x7d58cc
    // 0x7d5830: ldr             x0, [fp, #0x10]
    // 0x7d5834: ldur            d0, [fp, #-0x68]
    // 0x7d5838: LoadField: r1 = r0->field_63
    //     0x7d5838: ldur            w1, [x0, #0x63]
    // 0x7d583c: DecompressPointer r1
    //     0x7d583c: add             x1, x1, HEAP, lsl #32
    // 0x7d5840: LoadField: r2 = r1->field_7
    //     0x7d5840: ldur            w2, [x1, #7]
    // 0x7d5844: DecompressPointer r2
    //     0x7d5844: add             x2, x2, HEAP, lsl #32
    // 0x7d5848: LoadField: d1 = r2->field_7
    //     0x7d5848: ldur            d1, [x2, #7]
    // 0x7d584c: fsub            d2, d0, d1
    // 0x7d5850: stur            d2, [fp, #-0x50]
    // 0x7d5854: r16 = Instance__DecorationSlot
    //     0x7d5854: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d5858: ldr             x16, [x16, #0x1c8]
    // 0x7d585c: stp             x16, x0, [SP]
    // 0x7d5860: r0 = childForSlot()
    //     0x7d5860: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5864: cmp             w0, NULL
    // 0x7d5868: b.eq            #0x7d6800
    // 0x7d586c: ldur            d0, [fp, #-0x50]
    // 0x7d5870: r1 = inline_Allocate_Double()
    //     0x7d5870: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5874: add             x1, x1, #0x10
    //     0x7d5878: cmp             x2, x1
    //     0x7d587c: b.ls            #0x7d6804
    //     0x7d5880: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5884: sub             x1, x1, #0xf
    //     0x7d5888: movz            x2, #0xd148
    //     0x7d588c: movk            x2, #0x3, lsl #16
    //     0x7d5890: stur            x2, [x1, #-1]
    // 0x7d5894: StoreField: r1->field_7 = d0
    //     0x7d5894: stur            d0, [x1, #7]
    // 0x7d5898: stur            x1, [fp, #-0x38]
    // 0x7d589c: ldur            x16, [fp, #-0x28]
    // 0x7d58a0: stp             x0, x16, [SP, #8]
    // 0x7d58a4: str             x1, [SP]
    // 0x7d58a8: ldur            x0, [fp, #-0x28]
    // 0x7d58ac: ClosureCall
    //     0x7d58ac: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d58b0: ldur            x2, [x0, #0x1f]
    //     0x7d58b4: blr             x2
    // 0x7d58b8: ldur            x16, [fp, #-0x38]
    // 0x7d58bc: stp             x0, x16, [SP]
    // 0x7d58c0: r0 = +()
    //     0x7d58c0: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d58c4: LoadField: d0 = r0->field_7
    //     0x7d58c4: ldur            d0, [x0, #7]
    // 0x7d58c8: b               #0x7d58d0
    // 0x7d58cc: ldur            d0, [fp, #-0x68]
    // 0x7d58d0: stur            d0, [fp, #-0x50]
    // 0x7d58d4: ldr             x16, [fp, #0x10]
    // 0x7d58d8: r30 = Instance__DecorationSlot
    //     0x7d58d8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d58dc: ldr             lr, [lr, #0x1d8]
    // 0x7d58e0: stp             lr, x16, [SP]
    // 0x7d58e4: r0 = childForSlot()
    //     0x7d58e4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d58e8: cmp             w0, NULL
    // 0x7d58ec: b.eq            #0x7d5e90
    // 0x7d58f0: ldur            d0, [fp, #-0x50]
    // 0x7d58f4: ldr             x16, [fp, #0x10]
    // 0x7d58f8: r30 = Instance__DecorationSlot
    //     0x7d58f8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d58fc: ldr             lr, [lr, #0x1d8]
    // 0x7d5900: stp             lr, x16, [SP]
    // 0x7d5904: r0 = childForSlot()
    //     0x7d5904: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5908: cmp             w0, NULL
    // 0x7d590c: b.eq            #0x7d6820
    // 0x7d5910: ldur            d0, [fp, #-0x50]
    // 0x7d5914: r1 = inline_Allocate_Double()
    //     0x7d5914: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5918: add             x1, x1, #0x10
    //     0x7d591c: cmp             x2, x1
    //     0x7d5920: b.ls            #0x7d6824
    //     0x7d5924: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5928: sub             x1, x1, #0xf
    //     0x7d592c: movz            x2, #0xd148
    //     0x7d5930: movk            x2, #0x3, lsl #16
    //     0x7d5934: stur            x2, [x1, #-1]
    // 0x7d5938: StoreField: r1->field_7 = d0
    //     0x7d5938: stur            d0, [x1, #7]
    // 0x7d593c: stur            x1, [fp, #-0x38]
    // 0x7d5940: ldur            x16, [fp, #-0x30]
    // 0x7d5944: stp             x0, x16, [SP, #8]
    // 0x7d5948: str             x1, [SP]
    // 0x7d594c: ldur            x0, [fp, #-0x30]
    // 0x7d5950: ClosureCall
    //     0x7d5950: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5954: ldur            x2, [x0, #0x1f]
    //     0x7d5958: blr             x2
    // 0x7d595c: ldur            x16, [fp, #-0x38]
    // 0x7d5960: stp             x0, x16, [SP]
    // 0x7d5964: r0 = +()
    //     0x7d5964: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d5968: b               #0x7d5e90
    // 0x7d596c: ldur            d0, [fp, #-0x68]
    // 0x7d5970: ldr             x16, [fp, #0x10]
    // 0x7d5974: r30 = Instance__DecorationSlot
    //     0x7d5974: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d5978: ldr             lr, [lr, #0x1b0]
    // 0x7d597c: stp             lr, x16, [SP]
    // 0x7d5980: r0 = childForSlot()
    //     0x7d5980: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5984: str             x0, [SP]
    // 0x7d5988: r0 = _boxSize()
    //     0x7d5988: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d598c: LoadField: d0 = r0->field_7
    //     0x7d598c: ldur            d0, [x0, #7]
    // 0x7d5990: ldur            d1, [fp, #-0x68]
    // 0x7d5994: fadd            d2, d1, d0
    // 0x7d5998: stur            d2, [fp, #-0x50]
    // 0x7d599c: ldr             x16, [fp, #0x10]
    // 0x7d59a0: r30 = Instance__DecorationSlot
    //     0x7d59a0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d59a4: ldr             lr, [lr, #0x1c0]
    // 0x7d59a8: stp             lr, x16, [SP]
    // 0x7d59ac: r0 = childForSlot()
    //     0x7d59ac: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d59b0: cmp             w0, NULL
    // 0x7d59b4: b.eq            #0x7d5a54
    // 0x7d59b8: ldr             x0, [fp, #0x10]
    // 0x7d59bc: ldur            d0, [fp, #-0x50]
    // 0x7d59c0: LoadField: r1 = r0->field_63
    //     0x7d59c0: ldur            w1, [x0, #0x63]
    // 0x7d59c4: DecompressPointer r1
    //     0x7d59c4: add             x1, x1, HEAP, lsl #32
    // 0x7d59c8: LoadField: r2 = r1->field_7
    //     0x7d59c8: ldur            w2, [x1, #7]
    // 0x7d59cc: DecompressPointer r2
    //     0x7d59cc: add             x2, x2, HEAP, lsl #32
    // 0x7d59d0: LoadField: d1 = r2->field_7
    //     0x7d59d0: ldur            d1, [x2, #7]
    // 0x7d59d4: fsub            d2, d0, d1
    // 0x7d59d8: stur            d2, [fp, #-0x70]
    // 0x7d59dc: r16 = Instance__DecorationSlot
    //     0x7d59dc: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d59e0: ldr             x16, [x16, #0x1c0]
    // 0x7d59e4: stp             x16, x0, [SP]
    // 0x7d59e8: r0 = childForSlot()
    //     0x7d59e8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d59ec: cmp             w0, NULL
    // 0x7d59f0: b.eq            #0x7d6840
    // 0x7d59f4: ldur            d0, [fp, #-0x70]
    // 0x7d59f8: r1 = inline_Allocate_Double()
    //     0x7d59f8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d59fc: add             x1, x1, #0x10
    //     0x7d5a00: cmp             x2, x1
    //     0x7d5a04: b.ls            #0x7d6844
    //     0x7d5a08: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5a0c: sub             x1, x1, #0xf
    //     0x7d5a10: movz            x2, #0xd148
    //     0x7d5a14: movk            x2, #0x3, lsl #16
    //     0x7d5a18: stur            x2, [x1, #-1]
    // 0x7d5a1c: StoreField: r1->field_7 = d0
    //     0x7d5a1c: stur            d0, [x1, #7]
    // 0x7d5a20: stur            x1, [fp, #-0x38]
    // 0x7d5a24: ldur            x16, [fp, #-0x28]
    // 0x7d5a28: stp             x0, x16, [SP, #8]
    // 0x7d5a2c: str             x1, [SP]
    // 0x7d5a30: ldur            x0, [fp, #-0x28]
    // 0x7d5a34: ClosureCall
    //     0x7d5a34: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5a38: ldur            x2, [x0, #0x1f]
    //     0x7d5a3c: blr             x2
    // 0x7d5a40: ldur            x16, [fp, #-0x38]
    // 0x7d5a44: stp             x0, x16, [SP]
    // 0x7d5a48: r0 = +()
    //     0x7d5a48: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d5a4c: LoadField: d0 = r0->field_7
    //     0x7d5a4c: ldur            d0, [x0, #7]
    // 0x7d5a50: b               #0x7d5a58
    // 0x7d5a54: ldur            d0, [fp, #-0x50]
    // 0x7d5a58: stur            d0, [fp, #-0x50]
    // 0x7d5a5c: ldr             x16, [fp, #0x10]
    // 0x7d5a60: r30 = Instance__DecorationSlot
    //     0x7d5a60: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d5a64: ldr             lr, [lr, #0x178]
    // 0x7d5a68: stp             lr, x16, [SP]
    // 0x7d5a6c: r0 = childForSlot()
    //     0x7d5a6c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5a70: cmp             w0, NULL
    // 0x7d5a74: b.eq            #0x7d5ae0
    // 0x7d5a78: ldur            d0, [fp, #-0x50]
    // 0x7d5a7c: ldr             x16, [fp, #0x10]
    // 0x7d5a80: r30 = Instance__DecorationSlot
    //     0x7d5a80: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d5a84: ldr             lr, [lr, #0x178]
    // 0x7d5a88: stp             lr, x16, [SP]
    // 0x7d5a8c: r0 = childForSlot()
    //     0x7d5a8c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5a90: cmp             w0, NULL
    // 0x7d5a94: b.eq            #0x7d6860
    // 0x7d5a98: ldur            d0, [fp, #-0x50]
    // 0x7d5a9c: r1 = inline_Allocate_Double()
    //     0x7d5a9c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5aa0: add             x1, x1, #0x10
    //     0x7d5aa4: cmp             x2, x1
    //     0x7d5aa8: b.ls            #0x7d6864
    //     0x7d5aac: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5ab0: sub             x1, x1, #0xf
    //     0x7d5ab4: movz            x2, #0xd148
    //     0x7d5ab8: movk            x2, #0x3, lsl #16
    //     0x7d5abc: stur            x2, [x1, #-1]
    // 0x7d5ac0: StoreField: r1->field_7 = d0
    //     0x7d5ac0: stur            d0, [x1, #7]
    // 0x7d5ac4: ldur            x16, [fp, #-0x28]
    // 0x7d5ac8: stp             x0, x16, [SP, #8]
    // 0x7d5acc: str             x1, [SP]
    // 0x7d5ad0: ldur            x0, [fp, #-0x28]
    // 0x7d5ad4: ClosureCall
    //     0x7d5ad4: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5ad8: ldur            x2, [x0, #0x1f]
    //     0x7d5adc: blr             x2
    // 0x7d5ae0: ldr             x16, [fp, #0x10]
    // 0x7d5ae4: r30 = Instance__DecorationSlot
    //     0x7d5ae4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d5ae8: ldr             lr, [lr, #0x1d0]
    // 0x7d5aec: stp             lr, x16, [SP]
    // 0x7d5af0: r0 = childForSlot()
    //     0x7d5af0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5af4: cmp             w0, NULL
    // 0x7d5af8: b.eq            #0x7d5b7c
    // 0x7d5afc: ldur            d0, [fp, #-0x50]
    // 0x7d5b00: ldr             x16, [fp, #0x10]
    // 0x7d5b04: r30 = Instance__DecorationSlot
    //     0x7d5b04: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d5b08: ldr             lr, [lr, #0x1d0]
    // 0x7d5b0c: stp             lr, x16, [SP]
    // 0x7d5b10: r0 = childForSlot()
    //     0x7d5b10: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5b14: cmp             w0, NULL
    // 0x7d5b18: b.eq            #0x7d6880
    // 0x7d5b1c: ldur            d0, [fp, #-0x50]
    // 0x7d5b20: r1 = inline_Allocate_Double()
    //     0x7d5b20: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5b24: add             x1, x1, #0x10
    //     0x7d5b28: cmp             x2, x1
    //     0x7d5b2c: b.ls            #0x7d6884
    //     0x7d5b30: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5b34: sub             x1, x1, #0xf
    //     0x7d5b38: movz            x2, #0xd148
    //     0x7d5b3c: movk            x2, #0x3, lsl #16
    //     0x7d5b40: stur            x2, [x1, #-1]
    // 0x7d5b44: StoreField: r1->field_7 = d0
    //     0x7d5b44: stur            d0, [x1, #7]
    // 0x7d5b48: stur            x1, [fp, #-0x38]
    // 0x7d5b4c: ldur            x16, [fp, #-0x30]
    // 0x7d5b50: stp             x0, x16, [SP, #8]
    // 0x7d5b54: str             x1, [SP]
    // 0x7d5b58: ldur            x0, [fp, #-0x30]
    // 0x7d5b5c: ClosureCall
    //     0x7d5b5c: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5b60: ldur            x2, [x0, #0x1f]
    //     0x7d5b64: blr             x2
    // 0x7d5b68: ldur            x16, [fp, #-0x38]
    // 0x7d5b6c: stp             x0, x16, [SP]
    // 0x7d5b70: r0 = +()
    //     0x7d5b70: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d5b74: LoadField: d0 = r0->field_7
    //     0x7d5b74: ldur            d0, [x0, #7]
    // 0x7d5b78: b               #0x7d5b80
    // 0x7d5b7c: ldur            d0, [fp, #-0x50]
    // 0x7d5b80: stur            d0, [fp, #-0x50]
    // 0x7d5b84: ldr             x16, [fp, #0x10]
    // 0x7d5b88: r30 = Instance__DecorationSlot
    //     0x7d5b88: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d5b8c: ldr             lr, [lr, #0x1b8]
    // 0x7d5b90: stp             lr, x16, [SP]
    // 0x7d5b94: r0 = childForSlot()
    //     0x7d5b94: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5b98: cmp             w0, NULL
    // 0x7d5b9c: b.eq            #0x7d5c08
    // 0x7d5ba0: ldur            d0, [fp, #-0x50]
    // 0x7d5ba4: ldr             x16, [fp, #0x10]
    // 0x7d5ba8: r30 = Instance__DecorationSlot
    //     0x7d5ba8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d5bac: ldr             lr, [lr, #0x1b8]
    // 0x7d5bb0: stp             lr, x16, [SP]
    // 0x7d5bb4: r0 = childForSlot()
    //     0x7d5bb4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5bb8: cmp             w0, NULL
    // 0x7d5bbc: b.eq            #0x7d68a0
    // 0x7d5bc0: ldur            d0, [fp, #-0x50]
    // 0x7d5bc4: r1 = inline_Allocate_Double()
    //     0x7d5bc4: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5bc8: add             x1, x1, #0x10
    //     0x7d5bcc: cmp             x2, x1
    //     0x7d5bd0: b.ls            #0x7d68a4
    //     0x7d5bd4: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5bd8: sub             x1, x1, #0xf
    //     0x7d5bdc: movz            x2, #0xd148
    //     0x7d5be0: movk            x2, #0x3, lsl #16
    //     0x7d5be4: stur            x2, [x1, #-1]
    // 0x7d5be8: StoreField: r1->field_7 = d0
    //     0x7d5be8: stur            d0, [x1, #7]
    // 0x7d5bec: ldur            x16, [fp, #-0x30]
    // 0x7d5bf0: stp             x0, x16, [SP, #8]
    // 0x7d5bf4: str             x1, [SP]
    // 0x7d5bf8: ldur            x0, [fp, #-0x30]
    // 0x7d5bfc: ClosureCall
    //     0x7d5bfc: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5c00: ldur            x2, [x0, #0x1f]
    //     0x7d5c04: blr             x2
    // 0x7d5c08: ldr             x16, [fp, #0x10]
    // 0x7d5c0c: r30 = Instance__DecorationSlot
    //     0x7d5c0c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d5c10: ldr             lr, [lr, #0x1e0]
    // 0x7d5c14: stp             lr, x16, [SP]
    // 0x7d5c18: r0 = childForSlot()
    //     0x7d5c18: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5c1c: cmp             w0, NULL
    // 0x7d5c20: b.eq            #0x7d5c8c
    // 0x7d5c24: ldur            d0, [fp, #-0x50]
    // 0x7d5c28: ldr             x16, [fp, #0x10]
    // 0x7d5c2c: r30 = Instance__DecorationSlot
    //     0x7d5c2c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d5c30: ldr             lr, [lr, #0x1e0]
    // 0x7d5c34: stp             lr, x16, [SP]
    // 0x7d5c38: r0 = childForSlot()
    //     0x7d5c38: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5c3c: cmp             w0, NULL
    // 0x7d5c40: b.eq            #0x7d68c0
    // 0x7d5c44: ldur            d0, [fp, #-0x50]
    // 0x7d5c48: r1 = inline_Allocate_Double()
    //     0x7d5c48: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5c4c: add             x1, x1, #0x10
    //     0x7d5c50: cmp             x2, x1
    //     0x7d5c54: b.ls            #0x7d68c4
    //     0x7d5c58: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5c5c: sub             x1, x1, #0xf
    //     0x7d5c60: movz            x2, #0xd148
    //     0x7d5c64: movk            x2, #0x3, lsl #16
    //     0x7d5c68: stur            x2, [x1, #-1]
    // 0x7d5c6c: StoreField: r1->field_7 = d0
    //     0x7d5c6c: stur            d0, [x1, #7]
    // 0x7d5c70: ldur            x16, [fp, #-0x30]
    // 0x7d5c74: stp             x0, x16, [SP, #8]
    // 0x7d5c78: str             x1, [SP]
    // 0x7d5c7c: ldur            x0, [fp, #-0x30]
    // 0x7d5c80: ClosureCall
    //     0x7d5c80: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5c84: ldur            x2, [x0, #0x1f]
    //     0x7d5c88: blr             x2
    // 0x7d5c8c: ldr             x16, [fp, #0x10]
    // 0x7d5c90: r30 = Instance__DecorationSlot
    //     0x7d5c90: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d5c94: ldr             lr, [lr, #0x1c8]
    // 0x7d5c98: stp             lr, x16, [SP]
    // 0x7d5c9c: r0 = childForSlot()
    //     0x7d5c9c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5ca0: cmp             w0, NULL
    // 0x7d5ca4: b.eq            #0x7d5d9c
    // 0x7d5ca8: ldr             x0, [fp, #0x10]
    // 0x7d5cac: ldur            d0, [fp, #-0x60]
    // 0x7d5cb0: LoadField: r1 = r0->field_63
    //     0x7d5cb0: ldur            w1, [x0, #0x63]
    // 0x7d5cb4: DecompressPointer r1
    //     0x7d5cb4: add             x1, x1, HEAP, lsl #32
    // 0x7d5cb8: LoadField: r2 = r1->field_7
    //     0x7d5cb8: ldur            w2, [x1, #7]
    // 0x7d5cbc: DecompressPointer r2
    //     0x7d5cbc: add             x2, x2, HEAP, lsl #32
    // 0x7d5cc0: ArrayLoad: d1 = r2[0]  ; List_8
    //     0x7d5cc0: ldur            d1, [x2, #0x17]
    // 0x7d5cc4: fadd            d2, d0, d1
    // 0x7d5cc8: stur            d2, [fp, #-0x50]
    // 0x7d5ccc: r16 = Instance__DecorationSlot
    //     0x7d5ccc: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d5cd0: ldr             x16, [x16, #0x1c8]
    // 0x7d5cd4: stp             x16, x0, [SP]
    // 0x7d5cd8: r0 = childForSlot()
    //     0x7d5cd8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5cdc: stur            x0, [fp, #-0x38]
    // 0x7d5ce0: cmp             w0, NULL
    // 0x7d5ce4: b.eq            #0x7d68e0
    // 0x7d5ce8: ldr             x16, [fp, #0x10]
    // 0x7d5cec: r30 = Instance__DecorationSlot
    //     0x7d5cec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d5cf0: ldr             lr, [lr, #0x1c8]
    // 0x7d5cf4: stp             lr, x16, [SP]
    // 0x7d5cf8: r0 = childForSlot()
    //     0x7d5cf8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5cfc: cmp             w0, NULL
    // 0x7d5d00: b.eq            #0x7d68e4
    // 0x7d5d04: str             x0, [SP]
    // 0x7d5d08: r0 = size()
    //     0x7d5d08: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5d0c: LoadField: d0 = r0->field_7
    //     0x7d5d0c: ldur            d0, [x0, #7]
    // 0x7d5d10: ldur            d1, [fp, #-0x50]
    // 0x7d5d14: fsub            d2, d1, d0
    // 0x7d5d18: r0 = inline_Allocate_Double()
    //     0x7d5d18: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d5d1c: add             x0, x0, #0x10
    //     0x7d5d20: cmp             x1, x0
    //     0x7d5d24: b.ls            #0x7d68e8
    //     0x7d5d28: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5d2c: sub             x0, x0, #0xf
    //     0x7d5d30: movz            x1, #0xd148
    //     0x7d5d34: movk            x1, #0x3, lsl #16
    //     0x7d5d38: stur            x1, [x0, #-1]
    // 0x7d5d3c: StoreField: r0->field_7 = d2
    //     0x7d5d3c: stur            d2, [x0, #7]
    // 0x7d5d40: ldur            x16, [fp, #-0x28]
    // 0x7d5d44: ldur            lr, [fp, #-0x38]
    // 0x7d5d48: stp             lr, x16, [SP, #8]
    // 0x7d5d4c: str             x0, [SP]
    // 0x7d5d50: ldur            x0, [fp, #-0x28]
    // 0x7d5d54: ClosureCall
    //     0x7d5d54: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5d58: ldur            x2, [x0, #0x1f]
    //     0x7d5d5c: blr             x2
    // 0x7d5d60: ldur            d0, [fp, #-0x50]
    // 0x7d5d64: r1 = inline_Allocate_Double()
    //     0x7d5d64: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5d68: add             x1, x1, #0x10
    //     0x7d5d6c: cmp             x2, x1
    //     0x7d5d70: b.ls            #0x7d68f8
    //     0x7d5d74: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5d78: sub             x1, x1, #0xf
    //     0x7d5d7c: movz            x2, #0xd148
    //     0x7d5d80: movk            x2, #0x3, lsl #16
    //     0x7d5d84: stur            x2, [x1, #-1]
    // 0x7d5d88: StoreField: r1->field_7 = d0
    //     0x7d5d88: stur            d0, [x1, #7]
    // 0x7d5d8c: stp             x0, x1, [SP]
    // 0x7d5d90: r0 = -()
    //     0x7d5d90: bl              #0xc59d7c  ; [dart:core] _Double::-
    // 0x7d5d94: LoadField: d0 = r0->field_7
    //     0x7d5d94: ldur            d0, [x0, #7]
    // 0x7d5d98: b               #0x7d5da0
    // 0x7d5d9c: ldur            d0, [fp, #-0x60]
    // 0x7d5da0: stur            d0, [fp, #-0x50]
    // 0x7d5da4: ldr             x16, [fp, #0x10]
    // 0x7d5da8: r30 = Instance__DecorationSlot
    //     0x7d5da8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d5dac: ldr             lr, [lr, #0x1d8]
    // 0x7d5db0: stp             lr, x16, [SP]
    // 0x7d5db4: r0 = childForSlot()
    //     0x7d5db4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5db8: cmp             w0, NULL
    // 0x7d5dbc: b.eq            #0x7d5e90
    // 0x7d5dc0: ldur            d0, [fp, #-0x50]
    // 0x7d5dc4: ldr             x16, [fp, #0x10]
    // 0x7d5dc8: r30 = Instance__DecorationSlot
    //     0x7d5dc8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d5dcc: ldr             lr, [lr, #0x1d8]
    // 0x7d5dd0: stp             lr, x16, [SP]
    // 0x7d5dd4: r0 = childForSlot()
    //     0x7d5dd4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5dd8: stur            x0, [fp, #-0x28]
    // 0x7d5ddc: cmp             w0, NULL
    // 0x7d5de0: b.eq            #0x7d6914
    // 0x7d5de4: ldr             x16, [fp, #0x10]
    // 0x7d5de8: r30 = Instance__DecorationSlot
    //     0x7d5de8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d5dec: ldr             lr, [lr, #0x1d8]
    // 0x7d5df0: stp             lr, x16, [SP]
    // 0x7d5df4: r0 = childForSlot()
    //     0x7d5df4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5df8: cmp             w0, NULL
    // 0x7d5dfc: b.eq            #0x7d6918
    // 0x7d5e00: str             x0, [SP]
    // 0x7d5e04: r0 = size()
    //     0x7d5e04: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5e08: LoadField: d0 = r0->field_7
    //     0x7d5e08: ldur            d0, [x0, #7]
    // 0x7d5e0c: ldur            d1, [fp, #-0x50]
    // 0x7d5e10: fsub            d2, d1, d0
    // 0x7d5e14: r0 = inline_Allocate_Double()
    //     0x7d5e14: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d5e18: add             x0, x0, #0x10
    //     0x7d5e1c: cmp             x1, x0
    //     0x7d5e20: b.ls            #0x7d691c
    //     0x7d5e24: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5e28: sub             x0, x0, #0xf
    //     0x7d5e2c: movz            x1, #0xd148
    //     0x7d5e30: movk            x1, #0x3, lsl #16
    //     0x7d5e34: stur            x1, [x0, #-1]
    // 0x7d5e38: StoreField: r0->field_7 = d2
    //     0x7d5e38: stur            d2, [x0, #7]
    // 0x7d5e3c: ldur            x16, [fp, #-0x30]
    // 0x7d5e40: ldur            lr, [fp, #-0x28]
    // 0x7d5e44: stp             lr, x16, [SP, #8]
    // 0x7d5e48: str             x0, [SP]
    // 0x7d5e4c: ldur            x0, [fp, #-0x30]
    // 0x7d5e50: ClosureCall
    //     0x7d5e50: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d5e54: ldur            x2, [x0, #0x1f]
    //     0x7d5e58: blr             x2
    // 0x7d5e5c: ldur            d0, [fp, #-0x50]
    // 0x7d5e60: r1 = inline_Allocate_Double()
    //     0x7d5e60: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d5e64: add             x1, x1, #0x10
    //     0x7d5e68: cmp             x2, x1
    //     0x7d5e6c: b.ls            #0x7d692c
    //     0x7d5e70: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d5e74: sub             x1, x1, #0xf
    //     0x7d5e78: movz            x2, #0xd148
    //     0x7d5e7c: movk            x2, #0x3, lsl #16
    //     0x7d5e80: stur            x2, [x1, #-1]
    // 0x7d5e84: StoreField: r1->field_7 = d0
    //     0x7d5e84: stur            d0, [x1, #7]
    // 0x7d5e88: stp             x0, x1, [SP]
    // 0x7d5e8c: r0 = -()
    //     0x7d5e8c: bl              #0xc59d7c  ; [dart:core] _Double::-
    // 0x7d5e90: ldr             x16, [fp, #0x10]
    // 0x7d5e94: r30 = Instance__DecorationSlot
    //     0x7d5e94: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d5e98: ldr             lr, [lr, #0x1e8]
    // 0x7d5e9c: stp             lr, x16, [SP]
    // 0x7d5ea0: r0 = childForSlot()
    //     0x7d5ea0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5ea4: cmp             w0, NULL
    // 0x7d5ea8: b.ne            #0x7d5ec8
    // 0x7d5eac: ldr             x16, [fp, #0x10]
    // 0x7d5eb0: r30 = Instance__DecorationSlot
    //     0x7d5eb0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d5eb4: ldr             lr, [lr, #0x1f0]
    // 0x7d5eb8: stp             lr, x16, [SP]
    // 0x7d5ebc: r0 = childForSlot()
    //     0x7d5ebc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5ec0: cmp             w0, NULL
    // 0x7d5ec4: b.eq            #0x7d624c
    // 0x7d5ec8: ldr             x1, [fp, #0x10]
    // 0x7d5ecc: ldur            x3, [fp, #-0x18]
    // 0x7d5ed0: ldur            x2, [fp, #-0x10]
    // 0x7d5ed4: ldur            d0, [fp, #-0x48]
    // 0x7d5ed8: r0 = inline_Allocate_Double()
    //     0x7d5ed8: ldp             x0, x4, [THR, #0x50]  ; THR::top
    //     0x7d5edc: add             x0, x0, #0x10
    //     0x7d5ee0: cmp             x4, x0
    //     0x7d5ee4: b.ls            #0x7d6948
    //     0x7d5ee8: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5eec: sub             x0, x0, #0xf
    //     0x7d5ef0: movz            x4, #0xd148
    //     0x7d5ef4: movk            x4, #0x3, lsl #16
    //     0x7d5ef8: stur            x4, [x0, #-1]
    // 0x7d5efc: StoreField: r0->field_7 = d0
    //     0x7d5efc: stur            d0, [x0, #7]
    // 0x7d5f00: StoreField: r3->field_13 = r0
    //     0x7d5f00: stur            w0, [x3, #0x13]
    //     0x7d5f04: ldurb           w16, [x3, #-1]
    //     0x7d5f08: ldurb           w17, [x0, #-1]
    //     0x7d5f0c: and             x16, x17, x16, lsr #2
    //     0x7d5f10: tst             x16, HEAP, lsr #32
    //     0x7d5f14: b.eq            #0x7d5f1c
    //     0x7d5f18: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x7d5f1c: LoadField: d0 = r2->field_1b
    //     0x7d5f1c: ldur            d0, [x2, #0x1b]
    // 0x7d5f20: r0 = inline_Allocate_Double()
    //     0x7d5f20: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x7d5f24: add             x0, x0, #0x10
    //     0x7d5f28: cmp             x2, x0
    //     0x7d5f2c: b.ls            #0x7d6968
    //     0x7d5f30: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d5f34: sub             x0, x0, #0xf
    //     0x7d5f38: movz            x2, #0xd148
    //     0x7d5f3c: movk            x2, #0x3, lsl #16
    //     0x7d5f40: stur            x2, [x0, #-1]
    // 0x7d5f44: StoreField: r0->field_7 = d0
    //     0x7d5f44: stur            d0, [x0, #7]
    // 0x7d5f48: ArrayStore: r3[0] = r0  ; List_4
    //     0x7d5f48: stur            w0, [x3, #0x17]
    //     0x7d5f4c: ldurb           w16, [x3, #-1]
    //     0x7d5f50: ldurb           w17, [x0, #-1]
    //     0x7d5f54: and             x16, x17, x16, lsr #2
    //     0x7d5f58: tst             x16, HEAP, lsr #32
    //     0x7d5f5c: b.eq            #0x7d5f64
    //     0x7d5f60: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x7d5f64: LoadField: r0 = r1->field_67
    //     0x7d5f64: ldur            w0, [x1, #0x67]
    // 0x7d5f68: DecompressPointer r0
    //     0x7d5f68: add             x0, x0, HEAP, lsl #32
    // 0x7d5f6c: LoadField: r2 = r0->field_7
    //     0x7d5f6c: ldur            x2, [x0, #7]
    // 0x7d5f70: cmp             x2, #0
    // 0x7d5f74: b.gt            #0x7d60e0
    // 0x7d5f78: r16 = Instance__DecorationSlot
    //     0x7d5f78: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d5f7c: ldr             x16, [x16, #0x1e8]
    // 0x7d5f80: stp             x16, x1, [SP]
    // 0x7d5f84: r0 = childForSlot()
    //     0x7d5f84: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5f88: cmp             w0, NULL
    // 0x7d5f8c: b.eq            #0x7d6058
    // 0x7d5f90: ldur            d0, [fp, #-0x60]
    // 0x7d5f94: ldr             x16, [fp, #0x10]
    // 0x7d5f98: r30 = Instance__DecorationSlot
    //     0x7d5f98: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d5f9c: ldr             lr, [lr, #0x1e8]
    // 0x7d5fa0: stp             lr, x16, [SP]
    // 0x7d5fa4: r0 = childForSlot()
    //     0x7d5fa4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5fa8: stur            x0, [fp, #-0x10]
    // 0x7d5fac: cmp             w0, NULL
    // 0x7d5fb0: b.eq            #0x7d6980
    // 0x7d5fb4: ldr             x16, [fp, #0x10]
    // 0x7d5fb8: r30 = Instance__DecorationSlot
    //     0x7d5fb8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d5fbc: ldr             lr, [lr, #0x1e8]
    // 0x7d5fc0: stp             lr, x16, [SP]
    // 0x7d5fc4: r0 = childForSlot()
    //     0x7d5fc4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5fc8: cmp             w0, NULL
    // 0x7d5fcc: b.eq            #0x7d6984
    // 0x7d5fd0: str             x0, [SP]
    // 0x7d5fd4: r0 = size()
    //     0x7d5fd4: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d5fd8: LoadField: d0 = r0->field_7
    //     0x7d5fd8: ldur            d0, [x0, #7]
    // 0x7d5fdc: ldur            d1, [fp, #-0x60]
    // 0x7d5fe0: fsub            d2, d1, d0
    // 0x7d5fe4: stur            d2, [fp, #-0x48]
    // 0x7d5fe8: ldr             x16, [fp, #0x10]
    // 0x7d5fec: r30 = Instance__DecorationSlot
    //     0x7d5fec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d5ff0: ldr             lr, [lr, #0x1b0]
    // 0x7d5ff4: stp             lr, x16, [SP]
    // 0x7d5ff8: r0 = childForSlot()
    //     0x7d5ff8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d5ffc: str             x0, [SP]
    // 0x7d6000: r0 = _boxSize()
    //     0x7d6000: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6004: LoadField: d0 = r0->field_7
    //     0x7d6004: ldur            d0, [x0, #7]
    // 0x7d6008: ldur            d1, [fp, #-0x48]
    // 0x7d600c: fsub            d2, d1, d0
    // 0x7d6010: r0 = inline_Allocate_Double()
    //     0x7d6010: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6014: add             x0, x0, #0x10
    //     0x7d6018: cmp             x1, x0
    //     0x7d601c: b.ls            #0x7d6988
    //     0x7d6020: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6024: sub             x0, x0, #0xf
    //     0x7d6028: movz            x1, #0xd148
    //     0x7d602c: movk            x1, #0x3, lsl #16
    //     0x7d6030: stur            x1, [x0, #-1]
    // 0x7d6034: StoreField: r0->field_7 = d2
    //     0x7d6034: stur            d2, [x0, #7]
    // 0x7d6038: ldur            x16, [fp, #-0x30]
    // 0x7d603c: ldur            lr, [fp, #-0x10]
    // 0x7d6040: stp             lr, x16, [SP, #8]
    // 0x7d6044: str             x0, [SP]
    // 0x7d6048: ldur            x0, [fp, #-0x30]
    // 0x7d604c: ClosureCall
    //     0x7d604c: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d6050: ldur            x2, [x0, #0x1f]
    //     0x7d6054: blr             x2
    // 0x7d6058: ldr             x16, [fp, #0x10]
    // 0x7d605c: r30 = Instance__DecorationSlot
    //     0x7d605c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d6060: ldr             lr, [lr, #0x1f0]
    // 0x7d6064: stp             lr, x16, [SP]
    // 0x7d6068: r0 = childForSlot()
    //     0x7d6068: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d606c: cmp             w0, NULL
    // 0x7d6070: b.eq            #0x7d624c
    // 0x7d6074: ldur            d0, [fp, #-0x68]
    // 0x7d6078: ldr             x16, [fp, #0x10]
    // 0x7d607c: r30 = Instance__DecorationSlot
    //     0x7d607c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d6080: ldr             lr, [lr, #0x1f0]
    // 0x7d6084: stp             lr, x16, [SP]
    // 0x7d6088: r0 = childForSlot()
    //     0x7d6088: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d608c: cmp             w0, NULL
    // 0x7d6090: b.eq            #0x7d6998
    // 0x7d6094: ldur            d0, [fp, #-0x68]
    // 0x7d6098: r1 = inline_Allocate_Double()
    //     0x7d6098: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d609c: add             x1, x1, #0x10
    //     0x7d60a0: cmp             x2, x1
    //     0x7d60a4: b.ls            #0x7d699c
    //     0x7d60a8: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d60ac: sub             x1, x1, #0xf
    //     0x7d60b0: movz            x2, #0xd148
    //     0x7d60b4: movk            x2, #0x3, lsl #16
    //     0x7d60b8: stur            x2, [x1, #-1]
    // 0x7d60bc: StoreField: r1->field_7 = d0
    //     0x7d60bc: stur            d0, [x1, #7]
    // 0x7d60c0: ldur            x16, [fp, #-0x30]
    // 0x7d60c4: stp             x0, x16, [SP, #8]
    // 0x7d60c8: str             x1, [SP]
    // 0x7d60cc: ldur            x0, [fp, #-0x30]
    // 0x7d60d0: ClosureCall
    //     0x7d60d0: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d60d4: ldur            x2, [x0, #0x1f]
    //     0x7d60d8: blr             x2
    // 0x7d60dc: b               #0x7d624c
    // 0x7d60e0: ldur            d1, [fp, #-0x60]
    // 0x7d60e4: ldr             x16, [fp, #0x10]
    // 0x7d60e8: r30 = Instance__DecorationSlot
    //     0x7d60e8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d60ec: ldr             lr, [lr, #0x1e8]
    // 0x7d60f0: stp             lr, x16, [SP]
    // 0x7d60f4: r0 = childForSlot()
    //     0x7d60f4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d60f8: cmp             w0, NULL
    // 0x7d60fc: b.eq            #0x7d6194
    // 0x7d6100: ldur            d0, [fp, #-0x68]
    // 0x7d6104: ldr             x16, [fp, #0x10]
    // 0x7d6108: r30 = Instance__DecorationSlot
    //     0x7d6108: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d610c: ldr             lr, [lr, #0x1e8]
    // 0x7d6110: stp             lr, x16, [SP]
    // 0x7d6114: r0 = childForSlot()
    //     0x7d6114: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6118: stur            x0, [fp, #-0x10]
    // 0x7d611c: cmp             w0, NULL
    // 0x7d6120: b.eq            #0x7d69b8
    // 0x7d6124: ldr             x16, [fp, #0x10]
    // 0x7d6128: r30 = Instance__DecorationSlot
    //     0x7d6128: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d612c: ldr             lr, [lr, #0x1b0]
    // 0x7d6130: stp             lr, x16, [SP]
    // 0x7d6134: r0 = childForSlot()
    //     0x7d6134: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6138: str             x0, [SP]
    // 0x7d613c: r0 = _boxSize()
    //     0x7d613c: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6140: LoadField: d0 = r0->field_7
    //     0x7d6140: ldur            d0, [x0, #7]
    // 0x7d6144: ldur            d1, [fp, #-0x68]
    // 0x7d6148: fadd            d2, d1, d0
    // 0x7d614c: r0 = inline_Allocate_Double()
    //     0x7d614c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6150: add             x0, x0, #0x10
    //     0x7d6154: cmp             x1, x0
    //     0x7d6158: b.ls            #0x7d69bc
    //     0x7d615c: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6160: sub             x0, x0, #0xf
    //     0x7d6164: movz            x1, #0xd148
    //     0x7d6168: movk            x1, #0x3, lsl #16
    //     0x7d616c: stur            x1, [x0, #-1]
    // 0x7d6170: StoreField: r0->field_7 = d2
    //     0x7d6170: stur            d2, [x0, #7]
    // 0x7d6174: ldur            x16, [fp, #-0x30]
    // 0x7d6178: ldur            lr, [fp, #-0x10]
    // 0x7d617c: stp             lr, x16, [SP, #8]
    // 0x7d6180: str             x0, [SP]
    // 0x7d6184: ldur            x0, [fp, #-0x30]
    // 0x7d6188: ClosureCall
    //     0x7d6188: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d618c: ldur            x2, [x0, #0x1f]
    //     0x7d6190: blr             x2
    // 0x7d6194: ldr             x16, [fp, #0x10]
    // 0x7d6198: r30 = Instance__DecorationSlot
    //     0x7d6198: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d619c: ldr             lr, [lr, #0x1f0]
    // 0x7d61a0: stp             lr, x16, [SP]
    // 0x7d61a4: r0 = childForSlot()
    //     0x7d61a4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d61a8: cmp             w0, NULL
    // 0x7d61ac: b.eq            #0x7d624c
    // 0x7d61b0: ldur            d0, [fp, #-0x60]
    // 0x7d61b4: ldr             x16, [fp, #0x10]
    // 0x7d61b8: r30 = Instance__DecorationSlot
    //     0x7d61b8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d61bc: ldr             lr, [lr, #0x1f0]
    // 0x7d61c0: stp             lr, x16, [SP]
    // 0x7d61c4: r0 = childForSlot()
    //     0x7d61c4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d61c8: stur            x0, [fp, #-0x10]
    // 0x7d61cc: cmp             w0, NULL
    // 0x7d61d0: b.eq            #0x7d69cc
    // 0x7d61d4: ldr             x16, [fp, #0x10]
    // 0x7d61d8: r30 = Instance__DecorationSlot
    //     0x7d61d8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d61dc: ldr             lr, [lr, #0x1f0]
    // 0x7d61e0: stp             lr, x16, [SP]
    // 0x7d61e4: r0 = childForSlot()
    //     0x7d61e4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d61e8: cmp             w0, NULL
    // 0x7d61ec: b.eq            #0x7d69d0
    // 0x7d61f0: str             x0, [SP]
    // 0x7d61f4: r0 = size()
    //     0x7d61f4: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d61f8: LoadField: d0 = r0->field_7
    //     0x7d61f8: ldur            d0, [x0, #7]
    // 0x7d61fc: ldur            d1, [fp, #-0x60]
    // 0x7d6200: fsub            d2, d1, d0
    // 0x7d6204: r0 = inline_Allocate_Double()
    //     0x7d6204: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6208: add             x0, x0, #0x10
    //     0x7d620c: cmp             x1, x0
    //     0x7d6210: b.ls            #0x7d69d4
    //     0x7d6214: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6218: sub             x0, x0, #0xf
    //     0x7d621c: movz            x1, #0xd148
    //     0x7d6220: movk            x1, #0x3, lsl #16
    //     0x7d6224: stur            x1, [x0, #-1]
    // 0x7d6228: StoreField: r0->field_7 = d2
    //     0x7d6228: stur            d2, [x0, #7]
    // 0x7d622c: ldur            x16, [fp, #-0x30]
    // 0x7d6230: ldur            lr, [fp, #-0x10]
    // 0x7d6234: stp             lr, x16, [SP, #8]
    // 0x7d6238: str             x0, [SP]
    // 0x7d623c: ldur            x0, [fp, #-0x30]
    // 0x7d6240: ClosureCall
    //     0x7d6240: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x7d6244: ldur            x2, [x0, #0x1f]
    //     0x7d6248: blr             x2
    // 0x7d624c: ldr             x16, [fp, #0x10]
    // 0x7d6250: r30 = Instance__DecorationSlot
    //     0x7d6250: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d6254: ldr             lr, [lr, #0x178]
    // 0x7d6258: stp             lr, x16, [SP]
    // 0x7d625c: r0 = childForSlot()
    //     0x7d625c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6260: cmp             w0, NULL
    // 0x7d6264: b.eq            #0x7d6638
    // 0x7d6268: ldr             x0, [fp, #0x10]
    // 0x7d626c: r16 = Instance__DecorationSlot
    //     0x7d626c: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d6270: ldr             x16, [x16, #0x178]
    // 0x7d6274: stp             x16, x0, [SP]
    // 0x7d6278: r0 = childForSlot()
    //     0x7d6278: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d627c: cmp             w0, NULL
    // 0x7d6280: b.eq            #0x7d69e4
    // 0x7d6284: LoadField: r3 = r0->field_7
    //     0x7d6284: ldur            w3, [x0, #7]
    // 0x7d6288: DecompressPointer r3
    //     0x7d6288: add             x3, x3, HEAP, lsl #32
    // 0x7d628c: stur            x3, [fp, #-0x10]
    // 0x7d6290: cmp             w3, NULL
    // 0x7d6294: b.eq            #0x7d69e8
    // 0x7d6298: mov             x0, x3
    // 0x7d629c: r2 = Null
    //     0x7d629c: mov             x2, NULL
    // 0x7d62a0: r1 = Null
    //     0x7d62a0: mov             x1, NULL
    // 0x7d62a4: r4 = LoadClassIdInstr(r0)
    //     0x7d62a4: ldur            x4, [x0, #-1]
    //     0x7d62a8: ubfx            x4, x4, #0xc, #0x14
    // 0x7d62ac: sub             x4, x4, #0x892
    // 0x7d62b0: cmp             x4, #0xd
    // 0x7d62b4: b.ls            #0x7d62cc
    // 0x7d62b8: r8 = BoxParentData
    //     0x7d62b8: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x7d62bc: ldr             x8, [x8, #0x318]
    // 0x7d62c0: r3 = Null
    //     0x7d62c0: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d308] Null
    //     0x7d62c4: ldr             x3, [x3, #0x308]
    // 0x7d62c8: r0 = DefaultTypeTest()
    //     0x7d62c8: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x7d62cc: ldur            x0, [fp, #-0x10]
    // 0x7d62d0: LoadField: r1 = r0->field_7
    //     0x7d62d0: ldur            w1, [x0, #7]
    // 0x7d62d4: DecompressPointer r1
    //     0x7d62d4: add             x1, x1, HEAP, lsl #32
    // 0x7d62d8: LoadField: d0 = r1->field_7
    //     0x7d62d8: ldur            d0, [x1, #7]
    // 0x7d62dc: stur            d0, [fp, #-0x48]
    // 0x7d62e0: ldr             x16, [fp, #0x10]
    // 0x7d62e4: r30 = Instance__DecorationSlot
    //     0x7d62e4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d62e8: ldr             lr, [lr, #0x178]
    // 0x7d62ec: stp             lr, x16, [SP]
    // 0x7d62f0: r0 = childForSlot()
    //     0x7d62f0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d62f4: str             x0, [SP]
    // 0x7d62f8: r0 = _boxSize()
    //     0x7d62f8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d62fc: LoadField: d0 = r0->field_7
    //     0x7d62fc: ldur            d0, [x0, #7]
    // 0x7d6300: d1 = 0.750000
    //     0x7d6300: fmov            d1, #0.75000000
    // 0x7d6304: fmul            d2, d0, d1
    // 0x7d6308: ldr             x0, [fp, #0x10]
    // 0x7d630c: stur            d2, [fp, #-0x50]
    // 0x7d6310: LoadField: r1 = r0->field_67
    //     0x7d6310: ldur            w1, [x0, #0x67]
    // 0x7d6314: DecompressPointer r1
    //     0x7d6314: add             x1, x1, HEAP, lsl #32
    // 0x7d6318: LoadField: r2 = r1->field_7
    //     0x7d6318: ldur            x2, [x1, #7]
    // 0x7d631c: cmp             x2, #0
    // 0x7d6320: b.gt            #0x7d6478
    // 0x7d6324: r16 = Instance__DecorationSlot
    //     0x7d6324: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6328: ldr             x16, [x16, #0x1c0]
    // 0x7d632c: stp             x16, x0, [SP]
    // 0x7d6330: r0 = childForSlot()
    //     0x7d6330: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6334: cmp             w0, NULL
    // 0x7d6338: b.eq            #0x7d6388
    // 0x7d633c: ldr             x0, [fp, #0x10]
    // 0x7d6340: LoadField: r1 = r0->field_7b
    //     0x7d6340: ldur            w1, [x0, #0x7b]
    // 0x7d6344: DecompressPointer r1
    //     0x7d6344: add             x1, x1, HEAP, lsl #32
    // 0x7d6348: tbnz            w1, #4, #0x7d637c
    // 0x7d634c: ldur            d0, [fp, #-0x68]
    // 0x7d6350: r16 = Instance__DecorationSlot
    //     0x7d6350: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6354: ldr             x16, [x16, #0x1c0]
    // 0x7d6358: stp             x16, x0, [SP]
    // 0x7d635c: r0 = childForSlot()
    //     0x7d635c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6360: str             x0, [SP]
    // 0x7d6364: r0 = _boxSize()
    //     0x7d6364: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6368: LoadField: d0 = r0->field_7
    //     0x7d6368: ldur            d0, [x0, #7]
    // 0x7d636c: ldur            d1, [fp, #-0x68]
    // 0x7d6370: fsub            d2, d0, d1
    // 0x7d6374: mov             v0.16b, v2.16b
    // 0x7d6378: b               #0x7d6380
    // 0x7d637c: d0 = 0.000000
    //     0x7d637c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d6380: mov             v2.16b, v0.16b
    // 0x7d6384: b               #0x7d638c
    // 0x7d6388: d2 = 0.000000
    //     0x7d6388: eor             v2.16b, v2.16b, v2.16b
    // 0x7d638c: ldr             x0, [fp, #0x10]
    // 0x7d6390: ldur            d0, [fp, #-0x50]
    // 0x7d6394: ldur            d1, [fp, #-0x48]
    // 0x7d6398: stur            d2, [fp, #-0x60]
    // 0x7d639c: LoadField: r1 = r0->field_63
    //     0x7d639c: ldur            w1, [x0, #0x63]
    // 0x7d63a0: DecompressPointer r1
    //     0x7d63a0: add             x1, x1, HEAP, lsl #32
    // 0x7d63a4: LoadField: r2 = r1->field_27
    //     0x7d63a4: ldur            w2, [x1, #0x27]
    // 0x7d63a8: DecompressPointer r2
    //     0x7d63a8: add             x2, x2, HEAP, lsl #32
    // 0x7d63ac: stur            x2, [fp, #-0x10]
    // 0x7d63b0: r16 = Instance__DecorationSlot
    //     0x7d63b0: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d63b4: ldr             x16, [x16, #0x178]
    // 0x7d63b8: stp             x16, x0, [SP]
    // 0x7d63bc: r0 = childForSlot()
    //     0x7d63bc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d63c0: str             x0, [SP]
    // 0x7d63c4: r0 = _boxSize()
    //     0x7d63c4: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d63c8: LoadField: d0 = r0->field_7
    //     0x7d63c8: ldur            d0, [x0, #7]
    // 0x7d63cc: ldur            d2, [fp, #-0x48]
    // 0x7d63d0: fadd            d1, d2, d0
    // 0x7d63d4: ldur            d0, [fp, #-0x60]
    // 0x7d63d8: fadd            d2, d1, d0
    // 0x7d63dc: stur            d2, [fp, #-0x70]
    // 0x7d63e0: ldur            x16, [fp, #-0x20]
    // 0x7d63e4: str             x16, [SP]
    // 0x7d63e8: r0 = _boxSize()
    //     0x7d63e8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d63ec: LoadField: d0 = r0->field_7
    //     0x7d63ec: ldur            d0, [x0, #7]
    // 0x7d63f0: d3 = 2.000000
    //     0x7d63f0: fmov            d3, #2.00000000
    // 0x7d63f4: fdiv            d1, d0, d3
    // 0x7d63f8: ldur            d0, [fp, #-0x50]
    // 0x7d63fc: fdiv            d2, d0, d3
    // 0x7d6400: fadd            d0, d1, d2
    // 0x7d6404: ldur            d1, [fp, #-0x70]
    // 0x7d6408: r0 = inline_Allocate_Double()
    //     0x7d6408: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d640c: add             x0, x0, #0x10
    //     0x7d6410: cmp             x1, x0
    //     0x7d6414: b.ls            #0x7d69ec
    //     0x7d6418: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d641c: sub             x0, x0, #0xf
    //     0x7d6420: movz            x1, #0xd148
    //     0x7d6424: movk            x1, #0x3, lsl #16
    //     0x7d6428: stur            x1, [x0, #-1]
    // 0x7d642c: StoreField: r0->field_7 = d1
    //     0x7d642c: stur            d1, [x0, #7]
    // 0x7d6430: r1 = inline_Allocate_Double()
    //     0x7d6430: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d6434: add             x1, x1, #0x10
    //     0x7d6438: cmp             x2, x1
    //     0x7d643c: b.ls            #0x7d69fc
    //     0x7d6440: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d6444: sub             x1, x1, #0xf
    //     0x7d6448: movz            x2, #0xd148
    //     0x7d644c: movk            x2, #0x3, lsl #16
    //     0x7d6450: stur            x2, [x1, #-1]
    // 0x7d6454: StoreField: r1->field_7 = d0
    //     0x7d6454: stur            d0, [x1, #7]
    // 0x7d6458: stp             x1, x0, [SP, #8]
    // 0x7d645c: r16 = 0.000000
    //     0x7d645c: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x7d6460: str             x16, [SP]
    // 0x7d6464: r0 = lerpDouble()
    //     0x7d6464: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x7d6468: ldur            x16, [fp, #-0x10]
    // 0x7d646c: stp             x0, x16, [SP]
    // 0x7d6470: r0 = start=()
    //     0x7d6470: bl              #0x7d6a98  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::start=
    // 0x7d6474: b               #0x7d65e0
    // 0x7d6478: ldur            d1, [fp, #-0x68]
    // 0x7d647c: mov             v0.16b, v2.16b
    // 0x7d6480: ldur            d2, [fp, #-0x48]
    // 0x7d6484: d3 = 2.000000
    //     0x7d6484: fmov            d3, #2.00000000
    // 0x7d6488: ldr             x16, [fp, #0x10]
    // 0x7d648c: r30 = Instance__DecorationSlot
    //     0x7d648c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6490: ldr             lr, [lr, #0x1c0]
    // 0x7d6494: stp             lr, x16, [SP]
    // 0x7d6498: r0 = childForSlot()
    //     0x7d6498: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d649c: cmp             w0, NULL
    // 0x7d64a0: b.eq            #0x7d64f4
    // 0x7d64a4: ldr             x0, [fp, #0x10]
    // 0x7d64a8: LoadField: r1 = r0->field_7b
    //     0x7d64a8: ldur            w1, [x0, #0x7b]
    // 0x7d64ac: DecompressPointer r1
    //     0x7d64ac: add             x1, x1, HEAP, lsl #32
    // 0x7d64b0: tbnz            w1, #4, #0x7d64e8
    // 0x7d64b4: ldur            d0, [fp, #-0x68]
    // 0x7d64b8: r16 = Instance__DecorationSlot
    //     0x7d64b8: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d64bc: ldr             x16, [x16, #0x1c0]
    // 0x7d64c0: stp             x16, x0, [SP]
    // 0x7d64c4: r0 = childForSlot()
    //     0x7d64c4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d64c8: str             x0, [SP]
    // 0x7d64cc: r0 = _boxSize()
    //     0x7d64cc: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d64d0: LoadField: d0 = r0->field_7
    //     0x7d64d0: ldur            d0, [x0, #7]
    // 0x7d64d4: fneg            d1, d0
    // 0x7d64d8: ldur            d0, [fp, #-0x68]
    // 0x7d64dc: fadd            d2, d1, d0
    // 0x7d64e0: mov             v0.16b, v2.16b
    // 0x7d64e4: b               #0x7d64ec
    // 0x7d64e8: d0 = 0.000000
    //     0x7d64e8: eor             v0.16b, v0.16b, v0.16b
    // 0x7d64ec: mov             v2.16b, v0.16b
    // 0x7d64f0: b               #0x7d64f8
    // 0x7d64f4: d2 = 0.000000
    //     0x7d64f4: eor             v2.16b, v2.16b, v2.16b
    // 0x7d64f8: ldr             x0, [fp, #0x10]
    // 0x7d64fc: ldur            d1, [fp, #-0x50]
    // 0x7d6500: ldur            d0, [fp, #-0x48]
    // 0x7d6504: stur            d2, [fp, #-0x60]
    // 0x7d6508: LoadField: r1 = r0->field_63
    //     0x7d6508: ldur            w1, [x0, #0x63]
    // 0x7d650c: DecompressPointer r1
    //     0x7d650c: add             x1, x1, HEAP, lsl #32
    // 0x7d6510: LoadField: r2 = r1->field_27
    //     0x7d6510: ldur            w2, [x1, #0x27]
    // 0x7d6514: DecompressPointer r2
    //     0x7d6514: add             x2, x2, HEAP, lsl #32
    // 0x7d6518: stur            x2, [fp, #-0x10]
    // 0x7d651c: r16 = Instance__DecorationSlot
    //     0x7d651c: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d6520: ldr             x16, [x16, #0x1b0]
    // 0x7d6524: stp             x16, x0, [SP]
    // 0x7d6528: r0 = childForSlot()
    //     0x7d6528: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d652c: str             x0, [SP]
    // 0x7d6530: r0 = _boxSize()
    //     0x7d6530: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6534: LoadField: d0 = r0->field_7
    //     0x7d6534: ldur            d0, [x0, #7]
    // 0x7d6538: ldur            d1, [fp, #-0x48]
    // 0x7d653c: fsub            d2, d1, d0
    // 0x7d6540: ldur            d0, [fp, #-0x60]
    // 0x7d6544: fadd            d1, d2, d0
    // 0x7d6548: stur            d1, [fp, #-0x48]
    // 0x7d654c: ldur            x16, [fp, #-0x20]
    // 0x7d6550: str             x16, [SP]
    // 0x7d6554: r0 = _boxSize()
    //     0x7d6554: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6558: LoadField: d0 = r0->field_7
    //     0x7d6558: ldur            d0, [x0, #7]
    // 0x7d655c: d1 = 2.000000
    //     0x7d655c: fmov            d1, #2.00000000
    // 0x7d6560: fdiv            d2, d0, d1
    // 0x7d6564: ldur            d0, [fp, #-0x50]
    // 0x7d6568: fdiv            d3, d0, d1
    // 0x7d656c: fsub            d0, d2, d3
    // 0x7d6570: ldur            d1, [fp, #-0x48]
    // 0x7d6574: r0 = inline_Allocate_Double()
    //     0x7d6574: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6578: add             x0, x0, #0x10
    //     0x7d657c: cmp             x1, x0
    //     0x7d6580: b.ls            #0x7d6a18
    //     0x7d6584: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6588: sub             x0, x0, #0xf
    //     0x7d658c: movz            x1, #0xd148
    //     0x7d6590: movk            x1, #0x3, lsl #16
    //     0x7d6594: stur            x1, [x0, #-1]
    // 0x7d6598: StoreField: r0->field_7 = d1
    //     0x7d6598: stur            d1, [x0, #7]
    // 0x7d659c: r1 = inline_Allocate_Double()
    //     0x7d659c: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d65a0: add             x1, x1, #0x10
    //     0x7d65a4: cmp             x2, x1
    //     0x7d65a8: b.ls            #0x7d6a28
    //     0x7d65ac: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d65b0: sub             x1, x1, #0xf
    //     0x7d65b4: movz            x2, #0xd148
    //     0x7d65b8: movk            x2, #0x3, lsl #16
    //     0x7d65bc: stur            x2, [x1, #-1]
    // 0x7d65c0: StoreField: r1->field_7 = d0
    //     0x7d65c0: stur            d0, [x1, #7]
    // 0x7d65c4: stp             x1, x0, [SP, #8]
    // 0x7d65c8: r16 = 0.000000
    //     0x7d65c8: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x7d65cc: str             x16, [SP]
    // 0x7d65d0: r0 = lerpDouble()
    //     0x7d65d0: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x7d65d4: ldur            x16, [fp, #-0x10]
    // 0x7d65d8: stp             x0, x16, [SP]
    // 0x7d65dc: r0 = start=()
    //     0x7d65dc: bl              #0x7d6a98  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::start=
    // 0x7d65e0: ldr             x0, [fp, #0x10]
    // 0x7d65e4: LoadField: r1 = r0->field_63
    //     0x7d65e4: ldur            w1, [x0, #0x63]
    // 0x7d65e8: DecompressPointer r1
    //     0x7d65e8: add             x1, x1, HEAP, lsl #32
    // 0x7d65ec: LoadField: r2 = r1->field_27
    //     0x7d65ec: ldur            w2, [x1, #0x27]
    // 0x7d65f0: DecompressPointer r2
    //     0x7d65f0: add             x2, x2, HEAP, lsl #32
    // 0x7d65f4: stur            x2, [fp, #-0x10]
    // 0x7d65f8: r16 = Instance__DecorationSlot
    //     0x7d65f8: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d65fc: ldr             x16, [x16, #0x178]
    // 0x7d6600: stp             x16, x0, [SP]
    // 0x7d6604: r0 = childForSlot()
    //     0x7d6604: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6608: cmp             w0, NULL
    // 0x7d660c: b.eq            #0x7d6a44
    // 0x7d6610: str             x0, [SP]
    // 0x7d6614: r0 = size()
    //     0x7d6614: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d6618: LoadField: d0 = r0->field_7
    //     0x7d6618: ldur            d0, [x0, #7]
    // 0x7d661c: d1 = 0.750000
    //     0x7d661c: fmov            d1, #0.75000000
    // 0x7d6620: fmul            d2, d0, d1
    // 0x7d6624: ldur            x16, [fp, #-0x10]
    // 0x7d6628: str             x16, [SP, #8]
    // 0x7d662c: str             d2, [SP]
    // 0x7d6630: r0 = extent=()
    //     0x7d6630: bl              #0x7d6a48  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::extent=
    // 0x7d6634: b               #0x7d6670
    // 0x7d6638: ldr             x0, [fp, #0x10]
    // 0x7d663c: LoadField: r1 = r0->field_63
    //     0x7d663c: ldur            w1, [x0, #0x63]
    // 0x7d6640: DecompressPointer r1
    //     0x7d6640: add             x1, x1, HEAP, lsl #32
    // 0x7d6644: LoadField: r2 = r1->field_27
    //     0x7d6644: ldur            w2, [x1, #0x27]
    // 0x7d6648: DecompressPointer r2
    //     0x7d6648: add             x2, x2, HEAP, lsl #32
    // 0x7d664c: stp             NULL, x2, [SP]
    // 0x7d6650: r0 = start=()
    //     0x7d6650: bl              #0x7d6a98  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::start=
    // 0x7d6654: ldr             x0, [fp, #0x10]
    // 0x7d6658: LoadField: r1 = r0->field_63
    //     0x7d6658: ldur            w1, [x0, #0x63]
    // 0x7d665c: DecompressPointer r1
    //     0x7d665c: add             x1, x1, HEAP, lsl #32
    // 0x7d6660: LoadField: r2 = r1->field_27
    //     0x7d6660: ldur            w2, [x1, #0x27]
    // 0x7d6664: DecompressPointer r2
    //     0x7d6664: add             x2, x2, HEAP, lsl #32
    // 0x7d6668: stp             xzr, x2, [SP]
    // 0x7d666c: r0 = extent=()
    //     0x7d666c: bl              #0x7d6a48  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::extent=
    // 0x7d6670: ldr             x0, [fp, #0x10]
    // 0x7d6674: ldur            d0, [fp, #-0x58]
    // 0x7d6678: ldur            d1, [fp, #-0x40]
    // 0x7d667c: r0 = Size()
    //     0x7d667c: bl              #0x5034b8  ; AllocateSizeStub -> Size (size=0x18)
    // 0x7d6680: ldur            d0, [fp, #-0x58]
    // 0x7d6684: StoreField: r0->field_7 = d0
    //     0x7d6684: stur            d0, [x0, #7]
    // 0x7d6688: ldur            d0, [fp, #-0x40]
    // 0x7d668c: StoreField: r0->field_f = d0
    //     0x7d668c: stur            d0, [x0, #0xf]
    // 0x7d6690: ldur            x16, [fp, #-8]
    // 0x7d6694: stp             x0, x16, [SP]
    // 0x7d6698: r0 = constrain()
    //     0x7d6698: bl              #0x582520  ; [package:flutter/src/rendering/box.dart] BoxConstraints::constrain
    // 0x7d669c: ldr             x1, [fp, #0x10]
    // 0x7d66a0: StoreField: r1->field_57 = r0
    //     0x7d66a0: stur            w0, [x1, #0x57]
    //     0x7d66a4: ldurb           w16, [x1, #-1]
    //     0x7d66a8: ldurb           w17, [x0, #-1]
    //     0x7d66ac: and             x16, x17, x16, lsr #2
    //     0x7d66b0: tst             x16, HEAP, lsr #32
    //     0x7d66b4: b.eq            #0x7d66bc
    //     0x7d66b8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7d66bc: r0 = Null
    //     0x7d66bc: mov             x0, NULL
    // 0x7d66c0: LeaveFrame
    //     0x7d66c0: mov             SP, fp
    //     0x7d66c4: ldp             fp, lr, [SP], #0x10
    // 0x7d66c8: ret
    //     0x7d66c8: ret             
    // 0x7d66cc: r0 = StateError()
    //     0x7d66cc: bl              #0x4c3868  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x7d66d0: mov             x1, x0
    // 0x7d66d4: r0 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x7d66d4: ldr             x0, [PP, #0x5dc8]  ; [pp+0x5dc8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x7d66d8: StoreField: r1->field_b = r0
    //     0x7d66d8: stur            w0, [x1, #0xb]
    // 0x7d66dc: mov             x0, x1
    // 0x7d66e0: r0 = Throw()
    //     0x7d66e0: bl              #0xc5d2b8  ; ThrowStub
    // 0x7d66e4: brk             #0
    // 0x7d66e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d66e8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d66ec: b               #0x7d4f84
    // 0x7d66f0: r0 = NullCastErrorSharedWithFPURegs()
    //     0x7d66f0: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x7d66f4: stp             q2, q3, [SP, #-0x20]!
    // 0x7d66f8: stp             q0, q1, [SP, #-0x20]!
    // 0x7d66fc: stp             x1, x2, [SP, #-0x10]!
    // 0x7d6700: r0 = AllocateDouble()
    //     0x7d6700: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6704: ldp             x1, x2, [SP], #0x10
    // 0x7d6708: ldp             q0, q1, [SP], #0x20
    // 0x7d670c: ldp             q2, q3, [SP], #0x20
    // 0x7d6710: b               #0x7d522c
    // 0x7d6714: SaveReg d0
    //     0x7d6714: str             q0, [SP, #-0x10]!
    // 0x7d6718: stp             x1, x2, [SP, #-0x10]!
    // 0x7d671c: r0 = AllocateDouble()
    //     0x7d671c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6720: ldp             x1, x2, [SP], #0x10
    // 0x7d6724: RestoreReg d0
    //     0x7d6724: ldr             q0, [SP], #0x10
    // 0x7d6728: b               #0x7d5298
    // 0x7d672c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d672c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6730: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6730: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6734: SaveReg d0
    //     0x7d6734: str             q0, [SP, #-0x10]!
    // 0x7d6738: SaveReg r0
    //     0x7d6738: str             x0, [SP, #-8]!
    // 0x7d673c: r0 = AllocateDouble()
    //     0x7d673c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6740: mov             x1, x0
    // 0x7d6744: RestoreReg r0
    //     0x7d6744: ldr             x0, [SP], #8
    // 0x7d6748: RestoreReg d0
    //     0x7d6748: ldr             q0, [SP], #0x10
    // 0x7d674c: b               #0x7d5374
    // 0x7d6750: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6750: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6754: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6754: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6758: stp             q1, q2, [SP, #-0x20]!
    // 0x7d675c: r0 = AllocateDouble()
    //     0x7d675c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6760: ldp             q1, q2, [SP], #0x20
    // 0x7d6764: b               #0x7d5488
    // 0x7d6768: SaveReg d0
    //     0x7d6768: str             q0, [SP, #-0x10]!
    // 0x7d676c: SaveReg r0
    //     0x7d676c: str             x0, [SP, #-8]!
    // 0x7d6770: r0 = AllocateDouble()
    //     0x7d6770: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6774: mov             x1, x0
    // 0x7d6778: RestoreReg r0
    //     0x7d6778: ldr             x0, [SP], #8
    // 0x7d677c: RestoreReg d0
    //     0x7d677c: ldr             q0, [SP], #0x10
    // 0x7d6780: b               #0x7d54d4
    // 0x7d6784: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6784: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6788: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6788: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d678c: stp             q1, q2, [SP, #-0x20]!
    // 0x7d6790: r0 = AllocateDouble()
    //     0x7d6790: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6794: ldp             q1, q2, [SP], #0x20
    // 0x7d6798: b               #0x7d5584
    // 0x7d679c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d679c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d67a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67a4: stp             q1, q2, [SP, #-0x20]!
    // 0x7d67a8: r0 = AllocateDouble()
    //     0x7d67a8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d67ac: ldp             q1, q2, [SP], #0x20
    // 0x7d67b0: b               #0x7d563c
    // 0x7d67b4: SaveReg d0
    //     0x7d67b4: str             q0, [SP, #-0x10]!
    // 0x7d67b8: SaveReg r0
    //     0x7d67b8: str             x0, [SP, #-8]!
    // 0x7d67bc: r0 = AllocateDouble()
    //     0x7d67bc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d67c0: mov             x1, x0
    // 0x7d67c4: RestoreReg r0
    //     0x7d67c4: ldr             x0, [SP], #8
    // 0x7d67c8: RestoreReg d0
    //     0x7d67c8: ldr             q0, [SP], #0x10
    // 0x7d67cc: b               #0x7d5688
    // 0x7d67d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d67d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d67d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67d8: stp             q1, q2, [SP, #-0x20]!
    // 0x7d67dc: r0 = AllocateDouble()
    //     0x7d67dc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d67e0: ldp             q1, q2, [SP], #0x20
    // 0x7d67e4: b               #0x7d5738
    // 0x7d67e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d67e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d67ec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d67f0: SaveReg d2
    //     0x7d67f0: str             q2, [SP, #-0x10]!
    // 0x7d67f4: r0 = AllocateDouble()
    //     0x7d67f4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d67f8: RestoreReg d2
    //     0x7d67f8: ldr             q2, [SP], #0x10
    // 0x7d67fc: b               #0x7d57f0
    // 0x7d6800: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6800: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6804: SaveReg d0
    //     0x7d6804: str             q0, [SP, #-0x10]!
    // 0x7d6808: SaveReg r0
    //     0x7d6808: str             x0, [SP, #-8]!
    // 0x7d680c: r0 = AllocateDouble()
    //     0x7d680c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6810: mov             x1, x0
    // 0x7d6814: RestoreReg r0
    //     0x7d6814: ldr             x0, [SP], #8
    // 0x7d6818: RestoreReg d0
    //     0x7d6818: ldr             q0, [SP], #0x10
    // 0x7d681c: b               #0x7d5894
    // 0x7d6820: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6820: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6824: SaveReg d0
    //     0x7d6824: str             q0, [SP, #-0x10]!
    // 0x7d6828: SaveReg r0
    //     0x7d6828: str             x0, [SP, #-8]!
    // 0x7d682c: r0 = AllocateDouble()
    //     0x7d682c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6830: mov             x1, x0
    // 0x7d6834: RestoreReg r0
    //     0x7d6834: ldr             x0, [SP], #8
    // 0x7d6838: RestoreReg d0
    //     0x7d6838: ldr             q0, [SP], #0x10
    // 0x7d683c: b               #0x7d5938
    // 0x7d6840: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6840: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6844: SaveReg d0
    //     0x7d6844: str             q0, [SP, #-0x10]!
    // 0x7d6848: SaveReg r0
    //     0x7d6848: str             x0, [SP, #-8]!
    // 0x7d684c: r0 = AllocateDouble()
    //     0x7d684c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6850: mov             x1, x0
    // 0x7d6854: RestoreReg r0
    //     0x7d6854: ldr             x0, [SP], #8
    // 0x7d6858: RestoreReg d0
    //     0x7d6858: ldr             q0, [SP], #0x10
    // 0x7d685c: b               #0x7d5a1c
    // 0x7d6860: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6860: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6864: SaveReg d0
    //     0x7d6864: str             q0, [SP, #-0x10]!
    // 0x7d6868: SaveReg r0
    //     0x7d6868: str             x0, [SP, #-8]!
    // 0x7d686c: r0 = AllocateDouble()
    //     0x7d686c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6870: mov             x1, x0
    // 0x7d6874: RestoreReg r0
    //     0x7d6874: ldr             x0, [SP], #8
    // 0x7d6878: RestoreReg d0
    //     0x7d6878: ldr             q0, [SP], #0x10
    // 0x7d687c: b               #0x7d5ac0
    // 0x7d6880: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6880: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6884: SaveReg d0
    //     0x7d6884: str             q0, [SP, #-0x10]!
    // 0x7d6888: SaveReg r0
    //     0x7d6888: str             x0, [SP, #-8]!
    // 0x7d688c: r0 = AllocateDouble()
    //     0x7d688c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6890: mov             x1, x0
    // 0x7d6894: RestoreReg r0
    //     0x7d6894: ldr             x0, [SP], #8
    // 0x7d6898: RestoreReg d0
    //     0x7d6898: ldr             q0, [SP], #0x10
    // 0x7d689c: b               #0x7d5b44
    // 0x7d68a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d68a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d68a4: SaveReg d0
    //     0x7d68a4: str             q0, [SP, #-0x10]!
    // 0x7d68a8: SaveReg r0
    //     0x7d68a8: str             x0, [SP, #-8]!
    // 0x7d68ac: r0 = AllocateDouble()
    //     0x7d68ac: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d68b0: mov             x1, x0
    // 0x7d68b4: RestoreReg r0
    //     0x7d68b4: ldr             x0, [SP], #8
    // 0x7d68b8: RestoreReg d0
    //     0x7d68b8: ldr             q0, [SP], #0x10
    // 0x7d68bc: b               #0x7d5be8
    // 0x7d68c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d68c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d68c4: SaveReg d0
    //     0x7d68c4: str             q0, [SP, #-0x10]!
    // 0x7d68c8: SaveReg r0
    //     0x7d68c8: str             x0, [SP, #-8]!
    // 0x7d68cc: r0 = AllocateDouble()
    //     0x7d68cc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d68d0: mov             x1, x0
    // 0x7d68d4: RestoreReg r0
    //     0x7d68d4: ldr             x0, [SP], #8
    // 0x7d68d8: RestoreReg d0
    //     0x7d68d8: ldr             q0, [SP], #0x10
    // 0x7d68dc: b               #0x7d5c6c
    // 0x7d68e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d68e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d68e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d68e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d68e8: stp             q1, q2, [SP, #-0x20]!
    // 0x7d68ec: r0 = AllocateDouble()
    //     0x7d68ec: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d68f0: ldp             q1, q2, [SP], #0x20
    // 0x7d68f4: b               #0x7d5d3c
    // 0x7d68f8: SaveReg d0
    //     0x7d68f8: str             q0, [SP, #-0x10]!
    // 0x7d68fc: SaveReg r0
    //     0x7d68fc: str             x0, [SP, #-8]!
    // 0x7d6900: r0 = AllocateDouble()
    //     0x7d6900: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6904: mov             x1, x0
    // 0x7d6908: RestoreReg r0
    //     0x7d6908: ldr             x0, [SP], #8
    // 0x7d690c: RestoreReg d0
    //     0x7d690c: ldr             q0, [SP], #0x10
    // 0x7d6910: b               #0x7d5d88
    // 0x7d6914: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6914: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6918: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6918: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d691c: stp             q1, q2, [SP, #-0x20]!
    // 0x7d6920: r0 = AllocateDouble()
    //     0x7d6920: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6924: ldp             q1, q2, [SP], #0x20
    // 0x7d6928: b               #0x7d5e38
    // 0x7d692c: SaveReg d0
    //     0x7d692c: str             q0, [SP, #-0x10]!
    // 0x7d6930: SaveReg r0
    //     0x7d6930: str             x0, [SP, #-8]!
    // 0x7d6934: r0 = AllocateDouble()
    //     0x7d6934: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6938: mov             x1, x0
    // 0x7d693c: RestoreReg r0
    //     0x7d693c: ldr             x0, [SP], #8
    // 0x7d6940: RestoreReg d0
    //     0x7d6940: ldr             q0, [SP], #0x10
    // 0x7d6944: b               #0x7d5e84
    // 0x7d6948: SaveReg d0
    //     0x7d6948: str             q0, [SP, #-0x10]!
    // 0x7d694c: stp             x2, x3, [SP, #-0x10]!
    // 0x7d6950: SaveReg r1
    //     0x7d6950: str             x1, [SP, #-8]!
    // 0x7d6954: r0 = AllocateDouble()
    //     0x7d6954: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6958: RestoreReg r1
    //     0x7d6958: ldr             x1, [SP], #8
    // 0x7d695c: ldp             x2, x3, [SP], #0x10
    // 0x7d6960: RestoreReg d0
    //     0x7d6960: ldr             q0, [SP], #0x10
    // 0x7d6964: b               #0x7d5efc
    // 0x7d6968: SaveReg d0
    //     0x7d6968: str             q0, [SP, #-0x10]!
    // 0x7d696c: stp             x1, x3, [SP, #-0x10]!
    // 0x7d6970: r0 = AllocateDouble()
    //     0x7d6970: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6974: ldp             x1, x3, [SP], #0x10
    // 0x7d6978: RestoreReg d0
    //     0x7d6978: ldr             q0, [SP], #0x10
    // 0x7d697c: b               #0x7d5f44
    // 0x7d6980: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6980: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6984: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6984: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d6988: SaveReg d2
    //     0x7d6988: str             q2, [SP, #-0x10]!
    // 0x7d698c: r0 = AllocateDouble()
    //     0x7d698c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6990: RestoreReg d2
    //     0x7d6990: ldr             q2, [SP], #0x10
    // 0x7d6994: b               #0x7d6034
    // 0x7d6998: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6998: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d699c: SaveReg d0
    //     0x7d699c: str             q0, [SP, #-0x10]!
    // 0x7d69a0: SaveReg r0
    //     0x7d69a0: str             x0, [SP, #-8]!
    // 0x7d69a4: r0 = AllocateDouble()
    //     0x7d69a4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d69a8: mov             x1, x0
    // 0x7d69ac: RestoreReg r0
    //     0x7d69ac: ldr             x0, [SP], #8
    // 0x7d69b0: RestoreReg d0
    //     0x7d69b0: ldr             q0, [SP], #0x10
    // 0x7d69b4: b               #0x7d60bc
    // 0x7d69b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d69b8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d69bc: stp             q1, q2, [SP, #-0x20]!
    // 0x7d69c0: r0 = AllocateDouble()
    //     0x7d69c0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d69c4: ldp             q1, q2, [SP], #0x20
    // 0x7d69c8: b               #0x7d6170
    // 0x7d69cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d69cc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d69d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d69d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d69d4: SaveReg d2
    //     0x7d69d4: str             q2, [SP, #-0x10]!
    // 0x7d69d8: r0 = AllocateDouble()
    //     0x7d69d8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d69dc: RestoreReg d2
    //     0x7d69dc: ldr             q2, [SP], #0x10
    // 0x7d69e0: b               #0x7d6228
    // 0x7d69e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d69e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d69e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d69e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d69ec: stp             q0, q1, [SP, #-0x20]!
    // 0x7d69f0: r0 = AllocateDouble()
    //     0x7d69f0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d69f4: ldp             q0, q1, [SP], #0x20
    // 0x7d69f8: b               #0x7d642c
    // 0x7d69fc: SaveReg d0
    //     0x7d69fc: str             q0, [SP, #-0x10]!
    // 0x7d6a00: SaveReg r0
    //     0x7d6a00: str             x0, [SP, #-8]!
    // 0x7d6a04: r0 = AllocateDouble()
    //     0x7d6a04: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6a08: mov             x1, x0
    // 0x7d6a0c: RestoreReg r0
    //     0x7d6a0c: ldr             x0, [SP], #8
    // 0x7d6a10: RestoreReg d0
    //     0x7d6a10: ldr             q0, [SP], #0x10
    // 0x7d6a14: b               #0x7d6454
    // 0x7d6a18: stp             q0, q1, [SP, #-0x20]!
    // 0x7d6a1c: r0 = AllocateDouble()
    //     0x7d6a1c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6a20: ldp             q0, q1, [SP], #0x20
    // 0x7d6a24: b               #0x7d6598
    // 0x7d6a28: SaveReg d0
    //     0x7d6a28: str             q0, [SP, #-0x10]!
    // 0x7d6a2c: SaveReg r0
    //     0x7d6a2c: str             x0, [SP, #-8]!
    // 0x7d6a30: r0 = AllocateDouble()
    //     0x7d6a30: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d6a34: mov             x1, x0
    // 0x7d6a38: RestoreReg r0
    //     0x7d6a38: ldr             x0, [SP], #8
    // 0x7d6a3c: RestoreReg d0
    //     0x7d6a3c: ldr             q0, [SP], #0x10
    // 0x7d6a40: b               #0x7d65c0
    // 0x7d6a44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d6a44: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _isOutlineAligned(/* No info */) {
    // ** addr: 0x7d6b24, size: 0x68
    // 0x7d6b24: ldr             x1, [SP]
    // 0x7d6b28: LoadField: r2 = r1->field_63
    //     0x7d6b28: ldur            w2, [x1, #0x63]
    // 0x7d6b2c: DecompressPointer r2
    //     0x7d6b2c: add             x2, x2, HEAP, lsl #32
    // 0x7d6b30: LoadField: r1 = r2->field_b
    //     0x7d6b30: ldur            w1, [x2, #0xb]
    // 0x7d6b34: DecompressPointer r1
    //     0x7d6b34: add             x1, x1, HEAP, lsl #32
    // 0x7d6b38: tbz             w1, #4, #0x7d6b84
    // 0x7d6b3c: LoadField: r1 = r2->field_23
    //     0x7d6b3c: ldur            w1, [x2, #0x23]
    // 0x7d6b40: DecompressPointer r1
    //     0x7d6b40: add             x1, x1, HEAP, lsl #32
    // 0x7d6b44: r2 = LoadClassIdInstr(r1)
    //     0x7d6b44: ldur            x2, [x1, #-1]
    //     0x7d6b48: ubfx            x2, x2, #0xc, #0x14
    // 0x7d6b4c: lsl             x2, x2, #1
    // 0x7d6b50: r17 = 4692
    //     0x7d6b50: movz            x17, #0x1254
    // 0x7d6b54: cmp             w2, w17
    // 0x7d6b58: b.ne            #0x7d6b64
    // 0x7d6b5c: r1 = true
    //     0x7d6b5c: add             x1, NULL, #0x20  ; true
    // 0x7d6b60: b               #0x7d6b7c
    // 0x7d6b64: r17 = 4694
    //     0x7d6b64: movz            x17, #0x1256
    // 0x7d6b68: cmp             w2, w17
    // 0x7d6b6c: b.ne            #0x7d6b78
    // 0x7d6b70: r1 = false
    //     0x7d6b70: add             x1, NULL, #0x30  ; false
    // 0x7d6b74: b               #0x7d6b7c
    // 0x7d6b78: r1 = false
    //     0x7d6b78: add             x1, NULL, #0x30  ; false
    // 0x7d6b7c: mov             x0, x1
    // 0x7d6b80: b               #0x7d6b88
    // 0x7d6b84: r0 = false
    //     0x7d6b84: add             x0, NULL, #0x30  ; false
    // 0x7d6b88: ret
    //     0x7d6b88: ret             
  }
  static _ _boxSize(/* No info */) {
    // ** addr: 0x7d6b8c, size: 0x48
    // 0x7d6b8c: EnterFrame
    //     0x7d6b8c: stp             fp, lr, [SP, #-0x10]!
    //     0x7d6b90: mov             fp, SP
    // 0x7d6b94: AllocStack(0x8)
    //     0x7d6b94: sub             SP, SP, #8
    // 0x7d6b98: CheckStackOverflow
    //     0x7d6b98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d6b9c: cmp             SP, x16
    //     0x7d6ba0: b.ls            #0x7d6bcc
    // 0x7d6ba4: ldr             x0, [fp, #0x10]
    // 0x7d6ba8: cmp             w0, NULL
    // 0x7d6bac: b.ne            #0x7d6bb8
    // 0x7d6bb0: r0 = Instance_Size
    //     0x7d6bb0: ldr             x0, [PP, #0x4228]  ; [pp+0x4228] Obj!Size@c3c8d1
    // 0x7d6bb4: b               #0x7d6bc0
    // 0x7d6bb8: str             x0, [SP]
    // 0x7d6bbc: r0 = size()
    //     0x7d6bbc: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d6bc0: LeaveFrame
    //     0x7d6bc0: mov             SP, fp
    //     0x7d6bc4: ldp             fp, lr, [SP], #0x10
    // 0x7d6bc8: ret
    //     0x7d6bc8: ret             
    // 0x7d6bcc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d6bcc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d6bd0: b               #0x7d6ba4
  }
  _ _layout(/* No info */) {
    // ** addr: 0x7d6bd4, size: 0x216c
    // 0x7d6bd4: EnterFrame
    //     0x7d6bd4: stp             fp, lr, [SP, #-0x10]!
    //     0x7d6bd8: mov             fp, SP
    // 0x7d6bdc: AllocStack(0xb0)
    //     0x7d6bdc: sub             SP, SP, #0xb0
    // 0x7d6be0: CheckStackOverflow
    //     0x7d6be0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d6be4: cmp             SP, x16
    //     0x7d6be8: b.ls            #0x7d8a34
    // 0x7d6bec: r16 = <RenderBox?, double>
    //     0x7d6bec: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d338] TypeArguments: <RenderBox?, double>
    //     0x7d6bf0: ldr             x16, [x16, #0x338]
    // 0x7d6bf4: ldr             lr, [THR, #0x88]  ; THR::empty_array
    // 0x7d6bf8: stp             lr, x16, [SP]
    // 0x7d6bfc: r0 = Map._fromLiteral()
    //     0x7d6bfc: bl              #0x4da070  ; [dart:core] Map::Map._fromLiteral
    // 0x7d6c00: stur            x0, [fp, #-8]
    // 0x7d6c04: ldr             x16, [fp, #0x10]
    // 0x7d6c08: str             x16, [SP]
    // 0x7d6c0c: r0 = loosen()
    //     0x7d6c0c: bl              #0x5945a0  ; [package:flutter/src/rendering/box.dart] BoxConstraints::loosen
    // 0x7d6c10: stur            x0, [fp, #-0x10]
    // 0x7d6c14: ldr             x16, [fp, #0x18]
    // 0x7d6c18: r30 = Instance__DecorationSlot
    //     0x7d6c18: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d6c1c: ldr             lr, [lr, #0x1b0]
    // 0x7d6c20: stp             lr, x16, [SP]
    // 0x7d6c24: r0 = childForSlot()
    //     0x7d6c24: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6c28: stur            x0, [fp, #-0x18]
    // 0x7d6c2c: ldr             x16, [fp, #0x18]
    // 0x7d6c30: r30 = Instance__DecorationSlot
    //     0x7d6c30: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d6c34: ldr             lr, [lr, #0x1b0]
    // 0x7d6c38: stp             lr, x16, [SP]
    // 0x7d6c3c: r0 = childForSlot()
    //     0x7d6c3c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6c40: ldr             x16, [fp, #0x18]
    // 0x7d6c44: stp             x0, x16, [SP, #8]
    // 0x7d6c48: ldur            x16, [fp, #-0x10]
    // 0x7d6c4c: str             x16, [SP]
    // 0x7d6c50: r0 = _layoutLineBox()
    //     0x7d6c50: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d6c54: r0 = inline_Allocate_Double()
    //     0x7d6c54: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6c58: add             x0, x0, #0x10
    //     0x7d6c5c: cmp             x1, x0
    //     0x7d6c60: b.ls            #0x7d8a3c
    //     0x7d6c64: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6c68: sub             x0, x0, #0xf
    //     0x7d6c6c: movz            x1, #0xd148
    //     0x7d6c70: movk            x1, #0x3, lsl #16
    //     0x7d6c74: stur            x1, [x0, #-1]
    // 0x7d6c78: StoreField: r0->field_7 = d0
    //     0x7d6c78: stur            d0, [x0, #7]
    // 0x7d6c7c: ldur            x16, [fp, #-8]
    // 0x7d6c80: ldur            lr, [fp, #-0x18]
    // 0x7d6c84: stp             lr, x16, [SP, #8]
    // 0x7d6c88: str             x0, [SP]
    // 0x7d6c8c: r0 = []=()
    //     0x7d6c8c: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d6c90: ldur            x0, [fp, #-0x10]
    // 0x7d6c94: LoadField: d0 = r0->field_f
    //     0x7d6c94: ldur            d0, [x0, #0xf]
    // 0x7d6c98: stur            d0, [fp, #-0x38]
    // 0x7d6c9c: ldr             x16, [fp, #0x18]
    // 0x7d6ca0: r30 = Instance__DecorationSlot
    //     0x7d6ca0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d6ca4: ldr             lr, [lr, #0x1b0]
    // 0x7d6ca8: stp             lr, x16, [SP]
    // 0x7d6cac: r0 = childForSlot()
    //     0x7d6cac: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6cb0: str             x0, [SP]
    // 0x7d6cb4: r0 = _boxSize()
    //     0x7d6cb4: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6cb8: LoadField: d0 = r0->field_7
    //     0x7d6cb8: ldur            d0, [x0, #7]
    // 0x7d6cbc: ldur            d1, [fp, #-0x38]
    // 0x7d6cc0: fsub            d2, d1, d0
    // 0x7d6cc4: r0 = inline_Allocate_Double()
    //     0x7d6cc4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6cc8: add             x0, x0, #0x10
    //     0x7d6ccc: cmp             x1, x0
    //     0x7d6cd0: b.ls            #0x7d8a4c
    //     0x7d6cd4: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6cd8: sub             x0, x0, #0xf
    //     0x7d6cdc: movz            x1, #0xd148
    //     0x7d6ce0: movk            x1, #0x3, lsl #16
    //     0x7d6ce4: stur            x1, [x0, #-1]
    // 0x7d6ce8: StoreField: r0->field_7 = d2
    //     0x7d6ce8: stur            d2, [x0, #7]
    // 0x7d6cec: ldur            x16, [fp, #-0x10]
    // 0x7d6cf0: stp             x0, x16, [SP]
    // 0x7d6cf4: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x7d6cf4: add             x4, PP, #0x31, lsl #12  ; [pp+0x31b90] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x7d6cf8: ldr             x4, [x4, #0xb90]
    // 0x7d6cfc: r0 = copyWith()
    //     0x7d6cfc: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d6d00: stur            x0, [fp, #-0x18]
    // 0x7d6d04: ldr             x16, [fp, #0x18]
    // 0x7d6d08: r30 = Instance__DecorationSlot
    //     0x7d6d08: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6d0c: ldr             lr, [lr, #0x1c0]
    // 0x7d6d10: stp             lr, x16, [SP]
    // 0x7d6d14: r0 = childForSlot()
    //     0x7d6d14: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6d18: stur            x0, [fp, #-0x20]
    // 0x7d6d1c: ldr             x16, [fp, #0x18]
    // 0x7d6d20: r30 = Instance__DecorationSlot
    //     0x7d6d20: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6d24: ldr             lr, [lr, #0x1c0]
    // 0x7d6d28: stp             lr, x16, [SP]
    // 0x7d6d2c: r0 = childForSlot()
    //     0x7d6d2c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6d30: ldr             x16, [fp, #0x18]
    // 0x7d6d34: stp             x0, x16, [SP, #8]
    // 0x7d6d38: ldur            x16, [fp, #-0x18]
    // 0x7d6d3c: str             x16, [SP]
    // 0x7d6d40: r0 = _layoutLineBox()
    //     0x7d6d40: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d6d44: r0 = inline_Allocate_Double()
    //     0x7d6d44: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6d48: add             x0, x0, #0x10
    //     0x7d6d4c: cmp             x1, x0
    //     0x7d6d50: b.ls            #0x7d8a5c
    //     0x7d6d54: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6d58: sub             x0, x0, #0xf
    //     0x7d6d5c: movz            x1, #0xd148
    //     0x7d6d60: movk            x1, #0x3, lsl #16
    //     0x7d6d64: stur            x1, [x0, #-1]
    // 0x7d6d68: StoreField: r0->field_7 = d0
    //     0x7d6d68: stur            d0, [x0, #7]
    // 0x7d6d6c: ldur            x16, [fp, #-8]
    // 0x7d6d70: ldur            lr, [fp, #-0x20]
    // 0x7d6d74: stp             lr, x16, [SP, #8]
    // 0x7d6d78: str             x0, [SP]
    // 0x7d6d7c: r0 = []=()
    //     0x7d6d7c: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d6d80: ldr             x16, [fp, #0x18]
    // 0x7d6d84: r30 = Instance__DecorationSlot
    //     0x7d6d84: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d6d88: ldr             lr, [lr, #0x1c8]
    // 0x7d6d8c: stp             lr, x16, [SP]
    // 0x7d6d90: r0 = childForSlot()
    //     0x7d6d90: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6d94: stur            x0, [fp, #-0x20]
    // 0x7d6d98: ldr             x16, [fp, #0x18]
    // 0x7d6d9c: r30 = Instance__DecorationSlot
    //     0x7d6d9c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d6da0: ldr             lr, [lr, #0x1c8]
    // 0x7d6da4: stp             lr, x16, [SP]
    // 0x7d6da8: r0 = childForSlot()
    //     0x7d6da8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6dac: ldr             x16, [fp, #0x18]
    // 0x7d6db0: stp             x0, x16, [SP, #8]
    // 0x7d6db4: ldur            x16, [fp, #-0x18]
    // 0x7d6db8: str             x16, [SP]
    // 0x7d6dbc: r0 = _layoutLineBox()
    //     0x7d6dbc: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d6dc0: r0 = inline_Allocate_Double()
    //     0x7d6dc0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6dc4: add             x0, x0, #0x10
    //     0x7d6dc8: cmp             x1, x0
    //     0x7d6dcc: b.ls            #0x7d8a6c
    //     0x7d6dd0: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6dd4: sub             x0, x0, #0xf
    //     0x7d6dd8: movz            x1, #0xd148
    //     0x7d6ddc: movk            x1, #0x3, lsl #16
    //     0x7d6de0: stur            x1, [x0, #-1]
    // 0x7d6de4: StoreField: r0->field_7 = d0
    //     0x7d6de4: stur            d0, [x0, #7]
    // 0x7d6de8: ldur            x16, [fp, #-8]
    // 0x7d6dec: ldur            lr, [fp, #-0x20]
    // 0x7d6df0: stp             lr, x16, [SP, #8]
    // 0x7d6df4: str             x0, [SP]
    // 0x7d6df8: r0 = []=()
    //     0x7d6df8: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d6dfc: ldur            x0, [fp, #-0x18]
    // 0x7d6e00: LoadField: d0 = r0->field_f
    //     0x7d6e00: ldur            d0, [x0, #0xf]
    // 0x7d6e04: ldr             x1, [fp, #0x18]
    // 0x7d6e08: LoadField: r2 = r1->field_63
    //     0x7d6e08: ldur            w2, [x1, #0x63]
    // 0x7d6e0c: DecompressPointer r2
    //     0x7d6e0c: add             x2, x2, HEAP, lsl #32
    // 0x7d6e10: LoadField: r3 = r2->field_7
    //     0x7d6e10: ldur            w3, [x2, #7]
    // 0x7d6e14: DecompressPointer r3
    //     0x7d6e14: add             x3, x3, HEAP, lsl #32
    // 0x7d6e18: LoadField: d1 = r3->field_7
    //     0x7d6e18: ldur            d1, [x3, #7]
    // 0x7d6e1c: ArrayLoad: d2 = r3[0]  ; List_8
    //     0x7d6e1c: ldur            d2, [x3, #0x17]
    // 0x7d6e20: fadd            d3, d1, d2
    // 0x7d6e24: d1 = 0.000000
    //     0x7d6e24: eor             v1.16b, v1.16b, v1.16b
    // 0x7d6e28: fadd            d2, d3, d1
    // 0x7d6e2c: fadd            d3, d2, d1
    // 0x7d6e30: fsub            d2, d0, d3
    // 0x7d6e34: r2 = inline_Allocate_Double()
    //     0x7d6e34: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d6e38: add             x2, x2, #0x10
    //     0x7d6e3c: cmp             x3, x2
    //     0x7d6e40: b.ls            #0x7d8a7c
    //     0x7d6e44: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d6e48: sub             x2, x2, #0xf
    //     0x7d6e4c: movz            x3, #0xd148
    //     0x7d6e50: movk            x3, #0x3, lsl #16
    //     0x7d6e54: stur            x3, [x2, #-1]
    // 0x7d6e58: StoreField: r2->field_7 = d2
    //     0x7d6e58: stur            d2, [x2, #7]
    // 0x7d6e5c: stp             x2, x0, [SP]
    // 0x7d6e60: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x7d6e60: add             x4, PP, #0x31, lsl #12  ; [pp+0x31b90] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x7d6e64: ldr             x4, [x4, #0xb90]
    // 0x7d6e68: r0 = copyWith()
    //     0x7d6e68: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d6e6c: stur            x0, [fp, #-0x18]
    // 0x7d6e70: ldr             x16, [fp, #0x18]
    // 0x7d6e74: r30 = Instance__DecorationSlot
    //     0x7d6e74: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d6e78: ldr             lr, [lr, #0x1d0]
    // 0x7d6e7c: stp             lr, x16, [SP]
    // 0x7d6e80: r0 = childForSlot()
    //     0x7d6e80: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6e84: stur            x0, [fp, #-0x20]
    // 0x7d6e88: ldr             x16, [fp, #0x18]
    // 0x7d6e8c: r30 = Instance__DecorationSlot
    //     0x7d6e8c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d6e90: ldr             lr, [lr, #0x1d0]
    // 0x7d6e94: stp             lr, x16, [SP]
    // 0x7d6e98: r0 = childForSlot()
    //     0x7d6e98: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6e9c: ldr             x16, [fp, #0x18]
    // 0x7d6ea0: stp             x0, x16, [SP, #8]
    // 0x7d6ea4: ldur            x16, [fp, #-0x18]
    // 0x7d6ea8: str             x16, [SP]
    // 0x7d6eac: r0 = _layoutLineBox()
    //     0x7d6eac: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d6eb0: r0 = inline_Allocate_Double()
    //     0x7d6eb0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6eb4: add             x0, x0, #0x10
    //     0x7d6eb8: cmp             x1, x0
    //     0x7d6ebc: b.ls            #0x7d8a98
    //     0x7d6ec0: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6ec4: sub             x0, x0, #0xf
    //     0x7d6ec8: movz            x1, #0xd148
    //     0x7d6ecc: movk            x1, #0x3, lsl #16
    //     0x7d6ed0: stur            x1, [x0, #-1]
    // 0x7d6ed4: StoreField: r0->field_7 = d0
    //     0x7d6ed4: stur            d0, [x0, #7]
    // 0x7d6ed8: ldur            x16, [fp, #-8]
    // 0x7d6edc: ldur            lr, [fp, #-0x20]
    // 0x7d6ee0: stp             lr, x16, [SP, #8]
    // 0x7d6ee4: str             x0, [SP]
    // 0x7d6ee8: r0 = []=()
    //     0x7d6ee8: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d6eec: ldr             x16, [fp, #0x18]
    // 0x7d6ef0: r30 = Instance__DecorationSlot
    //     0x7d6ef0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d6ef4: ldr             lr, [lr, #0x1d8]
    // 0x7d6ef8: stp             lr, x16, [SP]
    // 0x7d6efc: r0 = childForSlot()
    //     0x7d6efc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6f00: stur            x0, [fp, #-0x20]
    // 0x7d6f04: ldr             x16, [fp, #0x18]
    // 0x7d6f08: r30 = Instance__DecorationSlot
    //     0x7d6f08: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d6f0c: ldr             lr, [lr, #0x1d8]
    // 0x7d6f10: stp             lr, x16, [SP]
    // 0x7d6f14: r0 = childForSlot()
    //     0x7d6f14: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6f18: ldr             x16, [fp, #0x18]
    // 0x7d6f1c: stp             x0, x16, [SP, #8]
    // 0x7d6f20: ldur            x16, [fp, #-0x18]
    // 0x7d6f24: str             x16, [SP]
    // 0x7d6f28: r0 = _layoutLineBox()
    //     0x7d6f28: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d6f2c: r0 = inline_Allocate_Double()
    //     0x7d6f2c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d6f30: add             x0, x0, #0x10
    //     0x7d6f34: cmp             x1, x0
    //     0x7d6f38: b.ls            #0x7d8aa8
    //     0x7d6f3c: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d6f40: sub             x0, x0, #0xf
    //     0x7d6f44: movz            x1, #0xd148
    //     0x7d6f48: movk            x1, #0x3, lsl #16
    //     0x7d6f4c: stur            x1, [x0, #-1]
    // 0x7d6f50: StoreField: r0->field_7 = d0
    //     0x7d6f50: stur            d0, [x0, #7]
    // 0x7d6f54: ldur            x16, [fp, #-8]
    // 0x7d6f58: ldur            lr, [fp, #-0x20]
    // 0x7d6f5c: stp             lr, x16, [SP, #8]
    // 0x7d6f60: str             x0, [SP]
    // 0x7d6f64: r0 = []=()
    //     0x7d6f64: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d6f68: ldr             x3, [fp, #0x18]
    // 0x7d6f6c: LoadField: r4 = r3->field_27
    //     0x7d6f6c: ldur            w4, [x3, #0x27]
    // 0x7d6f70: DecompressPointer r4
    //     0x7d6f70: add             x4, x4, HEAP, lsl #32
    // 0x7d6f74: stur            x4, [fp, #-0x20]
    // 0x7d6f78: cmp             w4, NULL
    // 0x7d6f7c: b.eq            #0x7d8a04
    // 0x7d6f80: r5 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x7d6f80: ldr             x5, [PP, #0x5dc8]  ; [pp+0x5dc8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x7d6f84: mov             x0, x4
    // 0x7d6f88: r2 = Null
    //     0x7d6f88: mov             x2, NULL
    // 0x7d6f8c: r1 = Null
    //     0x7d6f8c: mov             x1, NULL
    // 0x7d6f90: r4 = LoadClassIdInstr(r0)
    //     0x7d6f90: ldur            x4, [x0, #-1]
    //     0x7d6f94: ubfx            x4, x4, #0xc, #0x14
    // 0x7d6f98: sub             x4, x4, #0x8a2
    // 0x7d6f9c: cmp             x4, #1
    // 0x7d6fa0: b.ls            #0x7d6fb4
    // 0x7d6fa4: r8 = BoxConstraints
    //     0x7d6fa4: ldr             x8, [PP, #0x5d28]  ; [pp+0x5d28] Type: BoxConstraints
    // 0x7d6fa8: r3 = Null
    //     0x7d6fa8: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d340] Null
    //     0x7d6fac: ldr             x3, [x3, #0x340]
    // 0x7d6fb0: r0 = BoxConstraints()
    //     0x7d6fb0: bl              #0x578d4c  ; IsType_BoxConstraints_Stub
    // 0x7d6fb4: ldur            x0, [fp, #-0x20]
    // 0x7d6fb8: LoadField: d0 = r0->field_f
    //     0x7d6fb8: ldur            d0, [x0, #0xf]
    // 0x7d6fbc: stur            d0, [fp, #-0x38]
    // 0x7d6fc0: ldr             x16, [fp, #0x18]
    // 0x7d6fc4: r30 = Instance__DecorationSlot
    //     0x7d6fc4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d6fc8: ldr             lr, [lr, #0x1b0]
    // 0x7d6fcc: stp             lr, x16, [SP]
    // 0x7d6fd0: r0 = childForSlot()
    //     0x7d6fd0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6fd4: str             x0, [SP]
    // 0x7d6fd8: r0 = _boxSize()
    //     0x7d6fd8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d6fdc: LoadField: d0 = r0->field_7
    //     0x7d6fdc: ldur            d0, [x0, #7]
    // 0x7d6fe0: stur            d0, [fp, #-0x40]
    // 0x7d6fe4: ldr             x16, [fp, #0x18]
    // 0x7d6fe8: r30 = Instance__DecorationSlot
    //     0x7d6fe8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d6fec: ldr             lr, [lr, #0x1c0]
    // 0x7d6ff0: stp             lr, x16, [SP]
    // 0x7d6ff4: r0 = childForSlot()
    //     0x7d6ff4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d6ff8: cmp             w0, NULL
    // 0x7d6ffc: b.eq            #0x7d700c
    // 0x7d7000: ldr             x0, [fp, #0x18]
    // 0x7d7004: r1 = 0
    //     0x7d7004: movz            x1, #0
    // 0x7d7008: b               #0x7d7078
    // 0x7d700c: ldr             x0, [fp, #0x18]
    // 0x7d7010: LoadField: r1 = r0->field_67
    //     0x7d7010: ldur            w1, [x0, #0x67]
    // 0x7d7014: DecompressPointer r1
    //     0x7d7014: add             x1, x1, HEAP, lsl #32
    // 0x7d7018: r16 = Instance_TextDirection
    //     0x7d7018: ldr             x16, [PP, #0x3ec0]  ; [pp+0x3ec0] Obj!TextDirection@c46d41
    // 0x7d701c: cmp             w1, w16
    // 0x7d7020: b.ne            #0x7d703c
    // 0x7d7024: LoadField: r1 = r0->field_63
    //     0x7d7024: ldur            w1, [x0, #0x63]
    // 0x7d7028: DecompressPointer r1
    //     0x7d7028: add             x1, x1, HEAP, lsl #32
    // 0x7d702c: LoadField: r2 = r1->field_7
    //     0x7d702c: ldur            w2, [x1, #7]
    // 0x7d7030: DecompressPointer r2
    //     0x7d7030: add             x2, x2, HEAP, lsl #32
    // 0x7d7034: LoadField: d0 = r2->field_7
    //     0x7d7034: ldur            d0, [x2, #7]
    // 0x7d7038: b               #0x7d7050
    // 0x7d703c: LoadField: r1 = r0->field_63
    //     0x7d703c: ldur            w1, [x0, #0x63]
    // 0x7d7040: DecompressPointer r1
    //     0x7d7040: add             x1, x1, HEAP, lsl #32
    // 0x7d7044: LoadField: r2 = r1->field_7
    //     0x7d7044: ldur            w2, [x1, #7]
    // 0x7d7048: DecompressPointer r2
    //     0x7d7048: add             x2, x2, HEAP, lsl #32
    // 0x7d704c: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x7d704c: ldur            d0, [x2, #0x17]
    // 0x7d7050: r1 = inline_Allocate_Double()
    //     0x7d7050: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d7054: add             x1, x1, #0x10
    //     0x7d7058: cmp             x2, x1
    //     0x7d705c: b.ls            #0x7d8ab8
    //     0x7d7060: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d7064: sub             x1, x1, #0xf
    //     0x7d7068: movz            x2, #0xd148
    //     0x7d706c: movk            x2, #0x3, lsl #16
    //     0x7d7070: stur            x2, [x1, #-1]
    // 0x7d7074: StoreField: r1->field_7 = d0
    //     0x7d7074: stur            d0, [x1, #7]
    // 0x7d7078: ldur            d0, [fp, #-0x40]
    // 0x7d707c: r2 = inline_Allocate_Double()
    //     0x7d707c: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d7080: add             x2, x2, #0x10
    //     0x7d7084: cmp             x3, x2
    //     0x7d7088: b.ls            #0x7d8ad4
    //     0x7d708c: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d7090: sub             x2, x2, #0xf
    //     0x7d7094: movz            x3, #0xd148
    //     0x7d7098: movk            x3, #0x3, lsl #16
    //     0x7d709c: stur            x3, [x2, #-1]
    // 0x7d70a0: StoreField: r2->field_7 = d0
    //     0x7d70a0: stur            d0, [x2, #7]
    // 0x7d70a4: stp             x1, x2, [SP]
    // 0x7d70a8: r0 = +()
    //     0x7d70a8: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d70ac: stur            x0, [fp, #-0x20]
    // 0x7d70b0: ldr             x16, [fp, #0x18]
    // 0x7d70b4: r30 = Instance__DecorationSlot
    //     0x7d70b4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d70b8: ldr             lr, [lr, #0x1c0]
    // 0x7d70bc: stp             lr, x16, [SP]
    // 0x7d70c0: r0 = childForSlot()
    //     0x7d70c0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d70c4: str             x0, [SP]
    // 0x7d70c8: r0 = _boxSize()
    //     0x7d70c8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d70cc: LoadField: d0 = r0->field_7
    //     0x7d70cc: ldur            d0, [x0, #7]
    // 0x7d70d0: ldur            x0, [fp, #-0x20]
    // 0x7d70d4: LoadField: d1 = r0->field_7
    //     0x7d70d4: ldur            d1, [x0, #7]
    // 0x7d70d8: fadd            d2, d1, d0
    // 0x7d70dc: stur            d2, [fp, #-0x40]
    // 0x7d70e0: ldr             x16, [fp, #0x18]
    // 0x7d70e4: r30 = Instance__DecorationSlot
    //     0x7d70e4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d70e8: ldr             lr, [lr, #0x1d0]
    // 0x7d70ec: stp             lr, x16, [SP]
    // 0x7d70f0: r0 = childForSlot()
    //     0x7d70f0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d70f4: str             x0, [SP]
    // 0x7d70f8: r0 = _boxSize()
    //     0x7d70f8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d70fc: LoadField: d0 = r0->field_7
    //     0x7d70fc: ldur            d0, [x0, #7]
    // 0x7d7100: ldur            d1, [fp, #-0x40]
    // 0x7d7104: fadd            d2, d1, d0
    // 0x7d7108: stur            d2, [fp, #-0x48]
    // 0x7d710c: ldr             x16, [fp, #0x18]
    // 0x7d7110: r30 = Instance__DecorationSlot
    //     0x7d7110: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d7114: ldr             lr, [lr, #0x1d8]
    // 0x7d7118: stp             lr, x16, [SP]
    // 0x7d711c: r0 = childForSlot()
    //     0x7d711c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7120: str             x0, [SP]
    // 0x7d7124: r0 = _boxSize()
    //     0x7d7124: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d7128: LoadField: d0 = r0->field_7
    //     0x7d7128: ldur            d0, [x0, #7]
    // 0x7d712c: ldur            d1, [fp, #-0x48]
    // 0x7d7130: fadd            d2, d1, d0
    // 0x7d7134: stur            d2, [fp, #-0x40]
    // 0x7d7138: ldr             x16, [fp, #0x18]
    // 0x7d713c: r30 = Instance__DecorationSlot
    //     0x7d713c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d7140: ldr             lr, [lr, #0x1c8]
    // 0x7d7144: stp             lr, x16, [SP]
    // 0x7d7148: r0 = childForSlot()
    //     0x7d7148: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d714c: str             x0, [SP]
    // 0x7d7150: r0 = _boxSize()
    //     0x7d7150: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d7154: LoadField: d0 = r0->field_7
    //     0x7d7154: ldur            d0, [x0, #7]
    // 0x7d7158: ldur            d1, [fp, #-0x40]
    // 0x7d715c: fadd            d2, d1, d0
    // 0x7d7160: stur            d2, [fp, #-0x48]
    // 0x7d7164: ldr             x16, [fp, #0x18]
    // 0x7d7168: r30 = Instance__DecorationSlot
    //     0x7d7168: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d716c: ldr             lr, [lr, #0x1c8]
    // 0x7d7170: stp             lr, x16, [SP]
    // 0x7d7174: r0 = childForSlot()
    //     0x7d7174: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7178: cmp             w0, NULL
    // 0x7d717c: b.eq            #0x7d718c
    // 0x7d7180: ldr             x0, [fp, #0x18]
    // 0x7d7184: r1 = 0
    //     0x7d7184: movz            x1, #0
    // 0x7d7188: b               #0x7d71f8
    // 0x7d718c: ldr             x0, [fp, #0x18]
    // 0x7d7190: LoadField: r1 = r0->field_67
    //     0x7d7190: ldur            w1, [x0, #0x67]
    // 0x7d7194: DecompressPointer r1
    //     0x7d7194: add             x1, x1, HEAP, lsl #32
    // 0x7d7198: r16 = Instance_TextDirection
    //     0x7d7198: ldr             x16, [PP, #0x3ec0]  ; [pp+0x3ec0] Obj!TextDirection@c46d41
    // 0x7d719c: cmp             w1, w16
    // 0x7d71a0: b.ne            #0x7d71bc
    // 0x7d71a4: LoadField: r1 = r0->field_63
    //     0x7d71a4: ldur            w1, [x0, #0x63]
    // 0x7d71a8: DecompressPointer r1
    //     0x7d71a8: add             x1, x1, HEAP, lsl #32
    // 0x7d71ac: LoadField: r2 = r1->field_7
    //     0x7d71ac: ldur            w2, [x1, #7]
    // 0x7d71b0: DecompressPointer r2
    //     0x7d71b0: add             x2, x2, HEAP, lsl #32
    // 0x7d71b4: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x7d71b4: ldur            d0, [x2, #0x17]
    // 0x7d71b8: b               #0x7d71d0
    // 0x7d71bc: LoadField: r1 = r0->field_63
    //     0x7d71bc: ldur            w1, [x0, #0x63]
    // 0x7d71c0: DecompressPointer r1
    //     0x7d71c0: add             x1, x1, HEAP, lsl #32
    // 0x7d71c4: LoadField: r2 = r1->field_7
    //     0x7d71c4: ldur            w2, [x1, #7]
    // 0x7d71c8: DecompressPointer r2
    //     0x7d71c8: add             x2, x2, HEAP, lsl #32
    // 0x7d71cc: LoadField: d0 = r2->field_7
    //     0x7d71cc: ldur            d0, [x2, #7]
    // 0x7d71d0: r1 = inline_Allocate_Double()
    //     0x7d71d0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d71d4: add             x1, x1, #0x10
    //     0x7d71d8: cmp             x2, x1
    //     0x7d71dc: b.ls            #0x7d8af0
    //     0x7d71e0: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d71e4: sub             x1, x1, #0xf
    //     0x7d71e8: movz            x2, #0xd148
    //     0x7d71ec: movk            x2, #0x3, lsl #16
    //     0x7d71f0: stur            x2, [x1, #-1]
    // 0x7d71f4: StoreField: r1->field_7 = d0
    //     0x7d71f4: stur            d0, [x1, #7]
    // 0x7d71f8: ldur            d1, [fp, #-0x38]
    // 0x7d71fc: ldur            d0, [fp, #-0x48]
    // 0x7d7200: r2 = inline_Allocate_Double()
    //     0x7d7200: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d7204: add             x2, x2, #0x10
    //     0x7d7208: cmp             x3, x2
    //     0x7d720c: b.ls            #0x7d8b0c
    //     0x7d7210: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d7214: sub             x2, x2, #0xf
    //     0x7d7218: movz            x3, #0xd148
    //     0x7d721c: movk            x3, #0x3, lsl #16
    //     0x7d7220: stur            x3, [x2, #-1]
    // 0x7d7224: StoreField: r2->field_7 = d0
    //     0x7d7224: stur            d0, [x2, #7]
    // 0x7d7228: stp             x1, x2, [SP]
    // 0x7d722c: r0 = +()
    //     0x7d722c: bl              #0xc5a584  ; [dart:core] _Double::+
    // 0x7d7230: LoadField: d0 = r0->field_7
    //     0x7d7230: ldur            d0, [x0, #7]
    // 0x7d7234: ldur            d1, [fp, #-0x38]
    // 0x7d7238: fsub            d2, d1, d0
    // 0x7d723c: d0 = 0.000000
    //     0x7d723c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7240: fcmp            d0, d2
    // 0x7d7244: b.vs            #0x7d7254
    // 0x7d7248: b.le            #0x7d7254
    // 0x7d724c: d1 = 0.000000
    //     0x7d724c: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7250: b               #0x7d7290
    // 0x7d7254: fcmp            d0, d2
    // 0x7d7258: b.vs            #0x7d7268
    // 0x7d725c: b.ge            #0x7d7268
    // 0x7d7260: mov             v1.16b, v2.16b
    // 0x7d7264: b               #0x7d7290
    // 0x7d7268: fcmp            d0, d0
    // 0x7d726c: b.vs            #0x7d727c
    // 0x7d7270: b.ne            #0x7d727c
    // 0x7d7274: fadd            d1, d0, d2
    // 0x7d7278: b               #0x7d7290
    // 0x7d727c: fcmp            d2, d2
    // 0x7d7280: b.vc            #0x7d728c
    // 0x7d7284: mov             v1.16b, v2.16b
    // 0x7d7288: b               #0x7d7290
    // 0x7d728c: d1 = 0.000000
    //     0x7d728c: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7290: ldr             x0, [fp, #0x18]
    // 0x7d7294: stur            d1, [fp, #-0x38]
    // 0x7d7298: LoadField: r1 = r0->field_63
    //     0x7d7298: ldur            w1, [x0, #0x63]
    // 0x7d729c: DecompressPointer r1
    //     0x7d729c: add             x1, x1, HEAP, lsl #32
    // 0x7d72a0: ArrayLoad: d2 = r1[0]  ; List_8
    //     0x7d72a0: ldur            d2, [x1, #0x17]
    // 0x7d72a4: r1 = inline_Allocate_Double()
    //     0x7d72a4: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d72a8: add             x1, x1, #0x10
    //     0x7d72ac: cmp             x2, x1
    //     0x7d72b0: b.ls            #0x7d8b28
    //     0x7d72b4: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d72b8: sub             x1, x1, #0xf
    //     0x7d72bc: movz            x2, #0xd148
    //     0x7d72c0: movk            x2, #0x3, lsl #16
    //     0x7d72c4: stur            x2, [x1, #-1]
    // 0x7d72c8: StoreField: r1->field_7 = d2
    //     0x7d72c8: stur            d2, [x1, #7]
    // 0x7d72cc: r16 = 1.000000
    //     0x7d72cc: ldr             x16, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x7d72d0: r30 = 1.333333
    //     0x7d72d0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d350] 1.3333333333333333
    //     0x7d72d4: ldr             lr, [lr, #0x350]
    // 0x7d72d8: stp             lr, x16, [SP, #8]
    // 0x7d72dc: str             x1, [SP]
    // 0x7d72e0: r0 = lerpDouble()
    //     0x7d72e0: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x7d72e4: stur            x0, [fp, #-0x20]
    // 0x7d72e8: ldr             x16, [fp, #0x18]
    // 0x7d72ec: r30 = Instance__DecorationSlot
    //     0x7d72ec: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d72f0: ldr             lr, [lr, #0x1c8]
    // 0x7d72f4: stp             lr, x16, [SP]
    // 0x7d72f8: r0 = childForSlot()
    //     0x7d72f8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d72fc: str             x0, [SP]
    // 0x7d7300: r0 = _boxSize()
    //     0x7d7300: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d7304: LoadField: d0 = r0->field_7
    //     0x7d7304: ldur            d0, [x0, #7]
    // 0x7d7308: ldr             x0, [fp, #0x18]
    // 0x7d730c: LoadField: r1 = r0->field_63
    //     0x7d730c: ldur            w1, [x0, #0x63]
    // 0x7d7310: DecompressPointer r1
    //     0x7d7310: add             x1, x1, HEAP, lsl #32
    // 0x7d7314: LoadField: r2 = r1->field_23
    //     0x7d7314: ldur            w2, [x1, #0x23]
    // 0x7d7318: DecompressPointer r2
    //     0x7d7318: add             x2, x2, HEAP, lsl #32
    // 0x7d731c: r3 = LoadClassIdInstr(r2)
    //     0x7d731c: ldur            x3, [x2, #-1]
    //     0x7d7320: ubfx            x3, x3, #0xc, #0x14
    // 0x7d7324: lsl             x3, x3, #1
    // 0x7d7328: r17 = 4692
    //     0x7d7328: movz            x17, #0x1254
    // 0x7d732c: cmp             w3, w17
    // 0x7d7330: b.ne            #0x7d739c
    // 0x7d7334: ArrayLoad: d1 = r1[0]  ; List_8
    //     0x7d7334: ldur            d1, [x1, #0x17]
    // 0x7d7338: r1 = inline_Allocate_Double()
    //     0x7d7338: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d733c: add             x1, x1, #0x10
    //     0x7d7340: cmp             x2, x1
    //     0x7d7344: b.ls            #0x7d8b4c
    //     0x7d7348: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d734c: sub             x1, x1, #0xf
    //     0x7d7350: movz            x2, #0xd148
    //     0x7d7354: movk            x2, #0x3, lsl #16
    //     0x7d7358: stur            x2, [x1, #-1]
    // 0x7d735c: StoreField: r1->field_7 = d0
    //     0x7d735c: stur            d0, [x1, #7]
    // 0x7d7360: r2 = inline_Allocate_Double()
    //     0x7d7360: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d7364: add             x2, x2, #0x10
    //     0x7d7368: cmp             x3, x2
    //     0x7d736c: b.ls            #0x7d8b68
    //     0x7d7370: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d7374: sub             x2, x2, #0xf
    //     0x7d7378: movz            x3, #0xd148
    //     0x7d737c: movk            x3, #0x3, lsl #16
    //     0x7d7380: stur            x3, [x2, #-1]
    // 0x7d7384: StoreField: r2->field_7 = d1
    //     0x7d7384: stur            d1, [x2, #7]
    // 0x7d7388: r16 = 0.000000
    //     0x7d7388: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x7d738c: stp             x16, x1, [SP, #8]
    // 0x7d7390: str             x2, [SP]
    // 0x7d7394: r0 = lerpDouble()
    //     0x7d7394: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x7d7398: LoadField: d0 = r0->field_7
    //     0x7d7398: ldur            d0, [x0, #7]
    // 0x7d739c: ldr             x3, [fp, #0x18]
    // 0x7d73a0: stur            d0, [fp, #-0x40]
    // 0x7d73a4: LoadField: r4 = r3->field_27
    //     0x7d73a4: ldur            w4, [x3, #0x27]
    // 0x7d73a8: DecompressPointer r4
    //     0x7d73a8: add             x4, x4, HEAP, lsl #32
    // 0x7d73ac: stur            x4, [fp, #-0x28]
    // 0x7d73b0: cmp             w4, NULL
    // 0x7d73b4: b.eq            #0x7d8a18
    // 0x7d73b8: mov             x0, x4
    // 0x7d73bc: r2 = Null
    //     0x7d73bc: mov             x2, NULL
    // 0x7d73c0: r1 = Null
    //     0x7d73c0: mov             x1, NULL
    // 0x7d73c4: r4 = LoadClassIdInstr(r0)
    //     0x7d73c4: ldur            x4, [x0, #-1]
    //     0x7d73c8: ubfx            x4, x4, #0xc, #0x14
    // 0x7d73cc: sub             x4, x4, #0x8a2
    // 0x7d73d0: cmp             x4, #1
    // 0x7d73d4: b.ls            #0x7d73e8
    // 0x7d73d8: r8 = BoxConstraints
    //     0x7d73d8: ldr             x8, [PP, #0x5d28]  ; [pp+0x5d28] Type: BoxConstraints
    // 0x7d73dc: r3 = Null
    //     0x7d73dc: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d358] Null
    //     0x7d73e0: ldr             x3, [x3, #0x358]
    // 0x7d73e4: r0 = BoxConstraints()
    //     0x7d73e4: bl              #0x578d4c  ; IsType_BoxConstraints_Stub
    // 0x7d73e8: ldur            x0, [fp, #-0x28]
    // 0x7d73ec: LoadField: d0 = r0->field_f
    //     0x7d73ec: ldur            d0, [x0, #0xf]
    // 0x7d73f0: stur            d0, [fp, #-0x48]
    // 0x7d73f4: ldr             x16, [fp, #0x18]
    // 0x7d73f8: r30 = Instance__DecorationSlot
    //     0x7d73f8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x7d73fc: ldr             lr, [lr, #0x1b0]
    // 0x7d7400: stp             lr, x16, [SP]
    // 0x7d7404: r0 = childForSlot()
    //     0x7d7404: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7408: str             x0, [SP]
    // 0x7d740c: r0 = _boxSize()
    //     0x7d740c: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d7410: LoadField: d0 = r0->field_7
    //     0x7d7410: ldur            d0, [x0, #7]
    // 0x7d7414: ldr             x0, [fp, #0x18]
    // 0x7d7418: LoadField: r1 = r0->field_63
    //     0x7d7418: ldur            w1, [x0, #0x63]
    // 0x7d741c: DecompressPointer r1
    //     0x7d741c: add             x1, x1, HEAP, lsl #32
    // 0x7d7420: LoadField: r2 = r1->field_7
    //     0x7d7420: ldur            w2, [x1, #7]
    // 0x7d7424: DecompressPointer r2
    //     0x7d7424: add             x2, x2, HEAP, lsl #32
    // 0x7d7428: LoadField: d1 = r2->field_7
    //     0x7d7428: ldur            d1, [x2, #7]
    // 0x7d742c: fadd            d2, d0, d1
    // 0x7d7430: stur            d2, [fp, #-0x50]
    // 0x7d7434: r16 = Instance__DecorationSlot
    //     0x7d7434: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d7438: ldr             x16, [x16, #0x1c0]
    // 0x7d743c: stp             x16, x0, [SP]
    // 0x7d7440: r0 = childForSlot()
    //     0x7d7440: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7444: str             x0, [SP]
    // 0x7d7448: r0 = _boxSize()
    //     0x7d7448: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d744c: LoadField: d0 = r0->field_7
    //     0x7d744c: ldur            d0, [x0, #7]
    // 0x7d7450: ldur            d1, [fp, #-0x50]
    // 0x7d7454: fadd            d2, d1, d0
    // 0x7d7458: ldur            d0, [fp, #-0x40]
    // 0x7d745c: fadd            d1, d2, d0
    // 0x7d7460: ldr             x0, [fp, #0x18]
    // 0x7d7464: LoadField: r1 = r0->field_63
    //     0x7d7464: ldur            w1, [x0, #0x63]
    // 0x7d7468: DecompressPointer r1
    //     0x7d7468: add             x1, x1, HEAP, lsl #32
    // 0x7d746c: LoadField: r2 = r1->field_7
    //     0x7d746c: ldur            w2, [x1, #7]
    // 0x7d7470: DecompressPointer r2
    //     0x7d7470: add             x2, x2, HEAP, lsl #32
    // 0x7d7474: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x7d7474: ldur            d0, [x2, #0x17]
    // 0x7d7478: fadd            d2, d1, d0
    // 0x7d747c: ldur            d0, [fp, #-0x48]
    // 0x7d7480: fsub            d1, d0, d2
    // 0x7d7484: d0 = 0.000000
    //     0x7d7484: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7488: fcmp            d0, d1
    // 0x7d748c: b.vs            #0x7d749c
    // 0x7d7490: b.le            #0x7d749c
    // 0x7d7494: d2 = 0.000000
    //     0x7d7494: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7498: b               #0x7d74d8
    // 0x7d749c: fcmp            d0, d1
    // 0x7d74a0: b.vs            #0x7d74b0
    // 0x7d74a4: b.ge            #0x7d74b0
    // 0x7d74a8: mov             v2.16b, v1.16b
    // 0x7d74ac: b               #0x7d74d8
    // 0x7d74b0: fcmp            d0, d0
    // 0x7d74b4: b.vs            #0x7d74c4
    // 0x7d74b8: b.ne            #0x7d74c4
    // 0x7d74bc: fadd            d2, d0, d1
    // 0x7d74c0: b               #0x7d74d8
    // 0x7d74c4: fcmp            d1, d1
    // 0x7d74c8: b.vc            #0x7d74d4
    // 0x7d74cc: mov             v2.16b, v1.16b
    // 0x7d74d0: b               #0x7d74d8
    // 0x7d74d4: d2 = 0.000000
    //     0x7d74d4: eor             v2.16b, v2.16b, v2.16b
    // 0x7d74d8: ldur            x2, [fp, #-0x18]
    // 0x7d74dc: ldur            x1, [fp, #-0x20]
    // 0x7d74e0: ldur            d1, [fp, #-0x38]
    // 0x7d74e4: stur            d2, [fp, #-0x40]
    // 0x7d74e8: r16 = Instance__DecorationSlot
    //     0x7d74e8: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d74ec: ldr             x16, [x16, #0x178]
    // 0x7d74f0: stp             x16, x0, [SP]
    // 0x7d74f4: r0 = childForSlot()
    //     0x7d74f4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d74f8: stur            x0, [fp, #-0x28]
    // 0x7d74fc: ldr             x16, [fp, #0x18]
    // 0x7d7500: r30 = Instance__DecorationSlot
    //     0x7d7500: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d7504: ldr             lr, [lr, #0x178]
    // 0x7d7508: stp             lr, x16, [SP]
    // 0x7d750c: r0 = childForSlot()
    //     0x7d750c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7510: mov             x1, x0
    // 0x7d7514: ldur            x0, [fp, #-0x20]
    // 0x7d7518: stur            x1, [fp, #-0x30]
    // 0x7d751c: LoadField: d0 = r0->field_7
    //     0x7d751c: ldur            d0, [x0, #7]
    // 0x7d7520: ldur            d1, [fp, #-0x40]
    // 0x7d7524: fmul            d2, d1, d0
    // 0x7d7528: r0 = inline_Allocate_Double()
    //     0x7d7528: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x7d752c: add             x0, x0, #0x10
    //     0x7d7530: cmp             x2, x0
    //     0x7d7534: b.ls            #0x7d8b84
    //     0x7d7538: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d753c: sub             x0, x0, #0xf
    //     0x7d7540: movz            x2, #0xd148
    //     0x7d7544: movk            x2, #0x3, lsl #16
    //     0x7d7548: stur            x2, [x0, #-1]
    // 0x7d754c: StoreField: r0->field_7 = d2
    //     0x7d754c: stur            d2, [x0, #7]
    // 0x7d7550: ldur            x16, [fp, #-0x10]
    // 0x7d7554: stp             x0, x16, [SP]
    // 0x7d7558: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x7d7558: add             x4, PP, #0x31, lsl #12  ; [pp+0x31b90] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x7d755c: ldr             x4, [x4, #0xb90]
    // 0x7d7560: r0 = copyWith()
    //     0x7d7560: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d7564: ldr             x16, [fp, #0x18]
    // 0x7d7568: ldur            lr, [fp, #-0x30]
    // 0x7d756c: stp             lr, x16, [SP, #8]
    // 0x7d7570: str             x0, [SP]
    // 0x7d7574: r0 = _layoutLineBox()
    //     0x7d7574: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d7578: r0 = inline_Allocate_Double()
    //     0x7d7578: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d757c: add             x0, x0, #0x10
    //     0x7d7580: cmp             x1, x0
    //     0x7d7584: b.ls            #0x7d8b9c
    //     0x7d7588: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d758c: sub             x0, x0, #0xf
    //     0x7d7590: movz            x1, #0xd148
    //     0x7d7594: movk            x1, #0x3, lsl #16
    //     0x7d7598: stur            x1, [x0, #-1]
    // 0x7d759c: StoreField: r0->field_7 = d0
    //     0x7d759c: stur            d0, [x0, #7]
    // 0x7d75a0: ldur            x16, [fp, #-8]
    // 0x7d75a4: ldur            lr, [fp, #-0x28]
    // 0x7d75a8: stp             lr, x16, [SP, #8]
    // 0x7d75ac: str             x0, [SP]
    // 0x7d75b0: r0 = []=()
    //     0x7d75b0: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d75b4: ldr             x16, [fp, #0x18]
    // 0x7d75b8: r30 = Instance__DecorationSlot
    //     0x7d75b8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d75bc: ldr             lr, [lr, #0x1e0]
    // 0x7d75c0: stp             lr, x16, [SP]
    // 0x7d75c4: r0 = childForSlot()
    //     0x7d75c4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d75c8: stur            x0, [fp, #-0x20]
    // 0x7d75cc: ldr             x16, [fp, #0x18]
    // 0x7d75d0: r30 = Instance__DecorationSlot
    //     0x7d75d0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d75d4: ldr             lr, [lr, #0x1e0]
    // 0x7d75d8: stp             lr, x16, [SP]
    // 0x7d75dc: r0 = childForSlot()
    //     0x7d75dc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d75e0: ldur            d0, [fp, #-0x38]
    // 0x7d75e4: stur            x0, [fp, #-0x28]
    // 0x7d75e8: r1 = inline_Allocate_Double()
    //     0x7d75e8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d75ec: add             x1, x1, #0x10
    //     0x7d75f0: cmp             x2, x1
    //     0x7d75f4: b.ls            #0x7d8bac
    //     0x7d75f8: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d75fc: sub             x1, x1, #0xf
    //     0x7d7600: movz            x2, #0xd148
    //     0x7d7604: movk            x2, #0x3, lsl #16
    //     0x7d7608: stur            x2, [x1, #-1]
    // 0x7d760c: StoreField: r1->field_7 = d0
    //     0x7d760c: stur            d0, [x1, #7]
    // 0x7d7610: r2 = inline_Allocate_Double()
    //     0x7d7610: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d7614: add             x2, x2, #0x10
    //     0x7d7618: cmp             x3, x2
    //     0x7d761c: b.ls            #0x7d8bc8
    //     0x7d7620: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d7624: sub             x2, x2, #0xf
    //     0x7d7628: movz            x3, #0xd148
    //     0x7d762c: movk            x3, #0x3, lsl #16
    //     0x7d7630: stur            x3, [x2, #-1]
    // 0x7d7634: StoreField: r2->field_7 = d0
    //     0x7d7634: stur            d0, [x2, #7]
    // 0x7d7638: ldur            x16, [fp, #-0x10]
    // 0x7d763c: stp             x1, x16, [SP, #8]
    // 0x7d7640: str             x2, [SP]
    // 0x7d7644: r4 = const [0, 0x3, 0x3, 0x1, maxWidth, 0x2, minWidth, 0x1, null]
    //     0x7d7644: ldr             x4, [PP, #0x5d40]  ; [pp+0x5d40] List(9) [0, 0x3, 0x3, 0x1, "maxWidth", 0x2, "minWidth", 0x1, Null]
    // 0x7d7648: r0 = copyWith()
    //     0x7d7648: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d764c: ldr             x16, [fp, #0x18]
    // 0x7d7650: ldur            lr, [fp, #-0x28]
    // 0x7d7654: stp             lr, x16, [SP, #8]
    // 0x7d7658: str             x0, [SP]
    // 0x7d765c: r0 = _layoutLineBox()
    //     0x7d765c: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d7660: r0 = inline_Allocate_Double()
    //     0x7d7660: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7664: add             x0, x0, #0x10
    //     0x7d7668: cmp             x1, x0
    //     0x7d766c: b.ls            #0x7d8be4
    //     0x7d7670: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7674: sub             x0, x0, #0xf
    //     0x7d7678: movz            x1, #0xd148
    //     0x7d767c: movk            x1, #0x3, lsl #16
    //     0x7d7680: stur            x1, [x0, #-1]
    // 0x7d7684: StoreField: r0->field_7 = d0
    //     0x7d7684: stur            d0, [x0, #7]
    // 0x7d7688: ldur            x16, [fp, #-8]
    // 0x7d768c: ldur            lr, [fp, #-0x20]
    // 0x7d7690: stp             lr, x16, [SP, #8]
    // 0x7d7694: str             x0, [SP]
    // 0x7d7698: r0 = []=()
    //     0x7d7698: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d769c: ldr             x16, [fp, #0x18]
    // 0x7d76a0: r30 = Instance__DecorationSlot
    //     0x7d76a0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d76a4: ldr             lr, [lr, #0x1f0]
    // 0x7d76a8: stp             lr, x16, [SP]
    // 0x7d76ac: r0 = childForSlot()
    //     0x7d76ac: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d76b0: stur            x0, [fp, #-0x20]
    // 0x7d76b4: ldr             x16, [fp, #0x18]
    // 0x7d76b8: r30 = Instance__DecorationSlot
    //     0x7d76b8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d76bc: ldr             lr, [lr, #0x1f0]
    // 0x7d76c0: stp             lr, x16, [SP]
    // 0x7d76c4: r0 = childForSlot()
    //     0x7d76c4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d76c8: ldr             x16, [fp, #0x18]
    // 0x7d76cc: stp             x0, x16, [SP, #8]
    // 0x7d76d0: ldur            x16, [fp, #-0x18]
    // 0x7d76d4: str             x16, [SP]
    // 0x7d76d8: r0 = _layoutLineBox()
    //     0x7d76d8: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d76dc: r0 = inline_Allocate_Double()
    //     0x7d76dc: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d76e0: add             x0, x0, #0x10
    //     0x7d76e4: cmp             x1, x0
    //     0x7d76e8: b.ls            #0x7d8bf4
    //     0x7d76ec: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d76f0: sub             x0, x0, #0xf
    //     0x7d76f4: movz            x1, #0xd148
    //     0x7d76f8: movk            x1, #0x3, lsl #16
    //     0x7d76fc: stur            x1, [x0, #-1]
    // 0x7d7700: StoreField: r0->field_7 = d0
    //     0x7d7700: stur            d0, [x0, #7]
    // 0x7d7704: ldur            x16, [fp, #-8]
    // 0x7d7708: ldur            lr, [fp, #-0x20]
    // 0x7d770c: stp             lr, x16, [SP, #8]
    // 0x7d7710: str             x0, [SP]
    // 0x7d7714: r0 = []=()
    //     0x7d7714: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d7718: ldr             x16, [fp, #0x18]
    // 0x7d771c: r30 = Instance__DecorationSlot
    //     0x7d771c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d7720: ldr             lr, [lr, #0x1e8]
    // 0x7d7724: stp             lr, x16, [SP]
    // 0x7d7728: r0 = childForSlot()
    //     0x7d7728: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d772c: stur            x0, [fp, #-0x20]
    // 0x7d7730: ldr             x16, [fp, #0x18]
    // 0x7d7734: r30 = Instance__DecorationSlot
    //     0x7d7734: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d7738: ldr             lr, [lr, #0x1e8]
    // 0x7d773c: stp             lr, x16, [SP]
    // 0x7d7740: r0 = childForSlot()
    //     0x7d7740: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7744: mov             x1, x0
    // 0x7d7748: ldur            x0, [fp, #-0x18]
    // 0x7d774c: stur            x1, [fp, #-0x28]
    // 0x7d7750: LoadField: d0 = r0->field_f
    //     0x7d7750: ldur            d0, [x0, #0xf]
    // 0x7d7754: stur            d0, [fp, #-0x40]
    // 0x7d7758: ldr             x16, [fp, #0x18]
    // 0x7d775c: r30 = Instance__DecorationSlot
    //     0x7d775c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d7760: ldr             lr, [lr, #0x1f0]
    // 0x7d7764: stp             lr, x16, [SP]
    // 0x7d7768: r0 = childForSlot()
    //     0x7d7768: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d776c: str             x0, [SP]
    // 0x7d7770: r0 = _boxSize()
    //     0x7d7770: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x7d7774: LoadField: d0 = r0->field_7
    //     0x7d7774: ldur            d0, [x0, #7]
    // 0x7d7778: ldur            d1, [fp, #-0x40]
    // 0x7d777c: fsub            d2, d1, d0
    // 0x7d7780: d0 = 0.000000
    //     0x7d7780: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7784: fcmp            d0, d2
    // 0x7d7788: b.vs            #0x7d7798
    // 0x7d778c: b.le            #0x7d7798
    // 0x7d7790: d1 = 0.000000
    //     0x7d7790: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7794: b               #0x7d77d4
    // 0x7d7798: fcmp            d0, d2
    // 0x7d779c: b.vs            #0x7d77ac
    // 0x7d77a0: b.ge            #0x7d77ac
    // 0x7d77a4: mov             v1.16b, v2.16b
    // 0x7d77a8: b               #0x7d77d4
    // 0x7d77ac: fcmp            d0, d0
    // 0x7d77b0: b.vs            #0x7d77c0
    // 0x7d77b4: b.ne            #0x7d77c0
    // 0x7d77b8: fadd            d1, d0, d2
    // 0x7d77bc: b               #0x7d77d4
    // 0x7d77c0: fcmp            d2, d2
    // 0x7d77c4: b.vc            #0x7d77d0
    // 0x7d77c8: mov             v1.16b, v2.16b
    // 0x7d77cc: b               #0x7d77d4
    // 0x7d77d0: d1 = 0.000000
    //     0x7d77d0: eor             v1.16b, v1.16b, v1.16b
    // 0x7d77d4: r0 = inline_Allocate_Double()
    //     0x7d77d4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d77d8: add             x0, x0, #0x10
    //     0x7d77dc: cmp             x1, x0
    //     0x7d77e0: b.ls            #0x7d8c04
    //     0x7d77e4: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d77e8: sub             x0, x0, #0xf
    //     0x7d77ec: movz            x1, #0xd148
    //     0x7d77f0: movk            x1, #0x3, lsl #16
    //     0x7d77f4: stur            x1, [x0, #-1]
    // 0x7d77f8: StoreField: r0->field_7 = d1
    //     0x7d77f8: stur            d1, [x0, #7]
    // 0x7d77fc: ldur            x16, [fp, #-0x18]
    // 0x7d7800: stp             x0, x16, [SP]
    // 0x7d7804: r4 = const [0, 0x2, 0x2, 0x1, maxWidth, 0x1, null]
    //     0x7d7804: add             x4, PP, #0x31, lsl #12  ; [pp+0x31b90] List(7) [0, 0x2, 0x2, 0x1, "maxWidth", 0x1, Null]
    //     0x7d7808: ldr             x4, [x4, #0xb90]
    // 0x7d780c: r0 = copyWith()
    //     0x7d780c: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d7810: ldr             x16, [fp, #0x18]
    // 0x7d7814: ldur            lr, [fp, #-0x28]
    // 0x7d7818: stp             lr, x16, [SP, #8]
    // 0x7d781c: str             x0, [SP]
    // 0x7d7820: r0 = _layoutLineBox()
    //     0x7d7820: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d7824: r0 = inline_Allocate_Double()
    //     0x7d7824: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7828: add             x0, x0, #0x10
    //     0x7d782c: cmp             x1, x0
    //     0x7d7830: b.ls            #0x7d8c14
    //     0x7d7834: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7838: sub             x0, x0, #0xf
    //     0x7d783c: movz            x1, #0xd148
    //     0x7d7840: movk            x1, #0x3, lsl #16
    //     0x7d7844: stur            x1, [x0, #-1]
    // 0x7d7848: StoreField: r0->field_7 = d0
    //     0x7d7848: stur            d0, [x0, #7]
    // 0x7d784c: ldur            x16, [fp, #-8]
    // 0x7d7850: ldur            lr, [fp, #-0x20]
    // 0x7d7854: stp             lr, x16, [SP, #8]
    // 0x7d7858: str             x0, [SP]
    // 0x7d785c: r0 = []=()
    //     0x7d785c: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d7860: ldr             x16, [fp, #0x18]
    // 0x7d7864: r30 = Instance__DecorationSlot
    //     0x7d7864: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d7868: ldr             lr, [lr, #0x178]
    // 0x7d786c: stp             lr, x16, [SP]
    // 0x7d7870: r0 = childForSlot()
    //     0x7d7870: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7874: cmp             w0, NULL
    // 0x7d7878: b.ne            #0x7d7888
    // 0x7d787c: ldr             x0, [fp, #0x18]
    // 0x7d7880: d0 = 0.000000
    //     0x7d7880: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7884: b               #0x7d7898
    // 0x7d7888: ldr             x0, [fp, #0x18]
    // 0x7d788c: LoadField: r1 = r0->field_63
    //     0x7d788c: ldur            w1, [x0, #0x63]
    // 0x7d7890: DecompressPointer r1
    //     0x7d7890: add             x1, x1, HEAP, lsl #32
    // 0x7d7894: LoadField: d0 = r1->field_f
    //     0x7d7894: ldur            d0, [x1, #0xf]
    // 0x7d7898: stur            d0, [fp, #-0x40]
    // 0x7d789c: LoadField: r1 = r0->field_63
    //     0x7d789c: ldur            w1, [x0, #0x63]
    // 0x7d78a0: DecompressPointer r1
    //     0x7d78a0: add             x1, x1, HEAP, lsl #32
    // 0x7d78a4: LoadField: r2 = r1->field_23
    //     0x7d78a4: ldur            w2, [x1, #0x23]
    // 0x7d78a8: DecompressPointer r2
    //     0x7d78a8: add             x2, x2, HEAP, lsl #32
    // 0x7d78ac: r1 = LoadClassIdInstr(r2)
    //     0x7d78ac: ldur            x1, [x2, #-1]
    //     0x7d78b0: ubfx            x1, x1, #0xc, #0x14
    // 0x7d78b4: lsl             x1, x1, #1
    // 0x7d78b8: r17 = 4692
    //     0x7d78b8: movz            x17, #0x1254
    // 0x7d78bc: cmp             w1, w17
    // 0x7d78c0: b.ne            #0x7d7954
    // 0x7d78c4: ldur            x1, [fp, #-8]
    // 0x7d78c8: r16 = Instance__DecorationSlot
    //     0x7d78c8: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x7d78cc: ldr             x16, [x16, #0x178]
    // 0x7d78d0: stp             x16, x0, [SP]
    // 0x7d78d4: r0 = childForSlot()
    //     0x7d78d4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d78d8: ldur            x1, [fp, #-8]
    // 0x7d78dc: r2 = LoadClassIdInstr(r1)
    //     0x7d78dc: ldur            x2, [x1, #-1]
    //     0x7d78e0: ubfx            x2, x2, #0xc, #0x14
    // 0x7d78e4: stp             x0, x1, [SP]
    // 0x7d78e8: mov             x0, x2
    // 0x7d78ec: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d78ec: sub             lr, x0, #0xfb
    //     0x7d78f0: ldr             lr, [x21, lr, lsl #3]
    //     0x7d78f4: blr             lr
    // 0x7d78f8: cmp             w0, NULL
    // 0x7d78fc: b.eq            #0x7d8c24
    // 0x7d7900: LoadField: d0 = r0->field_7
    //     0x7d7900: ldur            d0, [x0, #7]
    // 0x7d7904: ldur            d1, [fp, #-0x40]
    // 0x7d7908: fsub            d2, d1, d0
    // 0x7d790c: d0 = 0.000000
    //     0x7d790c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7910: fcmp            d2, d0
    // 0x7d7914: b.vs            #0x7d7924
    // 0x7d7918: b.le            #0x7d7924
    // 0x7d791c: mov             v1.16b, v2.16b
    // 0x7d7920: b               #0x7d795c
    // 0x7d7924: fcmp            d2, d0
    // 0x7d7928: b.vs            #0x7d7938
    // 0x7d792c: b.ge            #0x7d7938
    // 0x7d7930: d1 = 0.000000
    //     0x7d7930: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7934: b               #0x7d795c
    // 0x7d7938: fcmp            d2, d0
    // 0x7d793c: b.vs            #0x7d794c
    // 0x7d7940: b.ne            #0x7d794c
    // 0x7d7944: fadd            d1, d2, d0
    // 0x7d7948: b               #0x7d795c
    // 0x7d794c: mov             v1.16b, v2.16b
    // 0x7d7950: b               #0x7d795c
    // 0x7d7954: mov             v1.16b, v0.16b
    // 0x7d7958: d0 = 0.000000
    //     0x7d7958: eor             v0.16b, v0.16b, v0.16b
    // 0x7d795c: stur            d1, [fp, #-0x40]
    // 0x7d7960: ldr             x16, [fp, #0x18]
    // 0x7d7964: r30 = Instance__DecorationSlot
    //     0x7d7964: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d7968: ldr             lr, [lr, #0x1f0]
    // 0x7d796c: stp             lr, x16, [SP]
    // 0x7d7970: r0 = childForSlot()
    //     0x7d7970: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7974: cmp             w0, NULL
    // 0x7d7978: b.ne            #0x7d7988
    // 0x7d797c: d0 = 0.000000
    //     0x7d797c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7980: d1 = 8.000000
    //     0x7d7980: fmov            d1, #8.00000000
    // 0x7d7984: b               #0x7d79d8
    // 0x7d7988: ldur            x0, [fp, #-8]
    // 0x7d798c: ldr             x16, [fp, #0x18]
    // 0x7d7990: r30 = Instance__DecorationSlot
    //     0x7d7990: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d7994: ldr             lr, [lr, #0x1f0]
    // 0x7d7998: stp             lr, x16, [SP]
    // 0x7d799c: r0 = childForSlot()
    //     0x7d799c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d79a0: ldur            x1, [fp, #-8]
    // 0x7d79a4: r2 = LoadClassIdInstr(r1)
    //     0x7d79a4: ldur            x2, [x1, #-1]
    //     0x7d79a8: ubfx            x2, x2, #0xc, #0x14
    // 0x7d79ac: stp             x0, x1, [SP]
    // 0x7d79b0: mov             x0, x2
    // 0x7d79b4: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d79b4: sub             lr, x0, #0xfb
    //     0x7d79b8: ldr             lr, [x21, lr, lsl #3]
    //     0x7d79bc: blr             lr
    // 0x7d79c0: cmp             w0, NULL
    // 0x7d79c4: b.eq            #0x7d8c28
    // 0x7d79c8: LoadField: d0 = r0->field_7
    //     0x7d79c8: ldur            d0, [x0, #7]
    // 0x7d79cc: d1 = 8.000000
    //     0x7d79cc: fmov            d1, #8.00000000
    // 0x7d79d0: fadd            d2, d0, d1
    // 0x7d79d4: mov             v0.16b, v2.16b
    // 0x7d79d8: stur            d0, [fp, #-0x48]
    // 0x7d79dc: ldr             x16, [fp, #0x18]
    // 0x7d79e0: r30 = Instance__DecorationSlot
    //     0x7d79e0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d79e4: ldr             lr, [lr, #0x1e8]
    // 0x7d79e8: stp             lr, x16, [SP]
    // 0x7d79ec: r0 = childForSlot()
    //     0x7d79ec: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d79f0: cmp             w0, NULL
    // 0x7d79f4: b.ne            #0x7d7a04
    // 0x7d79f8: r0 = false
    //     0x7d79f8: add             x0, NULL, #0x30  ; false
    // 0x7d79fc: d1 = 0.000000
    //     0x7d79fc: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7a00: b               #0x7d7a50
    // 0x7d7a04: str             x0, [SP]
    // 0x7d7a08: r0 = size()
    //     0x7d7a08: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7a0c: ldr             x16, [fp, #0x18]
    // 0x7d7a10: r30 = Instance__DecorationSlot
    //     0x7d7a10: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d7a14: ldr             lr, [lr, #0x1e8]
    // 0x7d7a18: stp             lr, x16, [SP]
    // 0x7d7a1c: r0 = childForSlot()
    //     0x7d7a1c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7a20: cmp             w0, NULL
    // 0x7d7a24: b.eq            #0x7d8c2c
    // 0x7d7a28: str             x0, [SP]
    // 0x7d7a2c: r0 = size()
    //     0x7d7a2c: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7a30: LoadField: d0 = r0->field_f
    //     0x7d7a30: ldur            d0, [x0, #0xf]
    // 0x7d7a34: d1 = 0.000000
    //     0x7d7a34: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7a38: fcmp            d0, d1
    // 0x7d7a3c: b.vs            #0x7d7a44
    // 0x7d7a40: b.gt            #0x7d7a4c
    // 0x7d7a44: r0 = false
    //     0x7d7a44: add             x0, NULL, #0x30  ; false
    // 0x7d7a48: b               #0x7d7a50
    // 0x7d7a4c: r0 = true
    //     0x7d7a4c: add             x0, NULL, #0x20  ; true
    // 0x7d7a50: stur            x0, [fp, #-0x18]
    // 0x7d7a54: tbz             w0, #4, #0x7d7a64
    // 0x7d7a58: d2 = 0.000000
    //     0x7d7a58: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7a5c: d1 = 8.000000
    //     0x7d7a5c: fmov            d1, #8.00000000
    // 0x7d7a60: b               #0x7d7a94
    // 0x7d7a64: ldr             x16, [fp, #0x18]
    // 0x7d7a68: r30 = Instance__DecorationSlot
    //     0x7d7a68: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d7a6c: ldr             lr, [lr, #0x1e8]
    // 0x7d7a70: stp             lr, x16, [SP]
    // 0x7d7a74: r0 = childForSlot()
    //     0x7d7a74: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7a78: cmp             w0, NULL
    // 0x7d7a7c: b.eq            #0x7d8c30
    // 0x7d7a80: str             x0, [SP]
    // 0x7d7a84: r0 = size()
    //     0x7d7a84: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7a88: LoadField: d0 = r0->field_f
    //     0x7d7a88: ldur            d0, [x0, #0xf]
    // 0x7d7a8c: d1 = 8.000000
    //     0x7d7a8c: fmov            d1, #8.00000000
    // 0x7d7a90: fadd            d2, d0, d1
    // 0x7d7a94: ldur            d0, [fp, #-0x48]
    // 0x7d7a98: stur            d2, [fp, #-0x50]
    // 0x7d7a9c: fcmp            d0, d2
    // 0x7d7aa0: b.vs            #0x7d7ab4
    // 0x7d7aa4: b.le            #0x7d7ab4
    // 0x7d7aa8: mov             v5.16b, v0.16b
    // 0x7d7aac: d3 = 0.000000
    //     0x7d7aac: eor             v3.16b, v3.16b, v3.16b
    // 0x7d7ab0: b               #0x7d7afc
    // 0x7d7ab4: fcmp            d0, d2
    // 0x7d7ab8: b.vs            #0x7d7acc
    // 0x7d7abc: b.ge            #0x7d7acc
    // 0x7d7ac0: mov             v5.16b, v2.16b
    // 0x7d7ac4: d3 = 0.000000
    //     0x7d7ac4: eor             v3.16b, v3.16b, v3.16b
    // 0x7d7ac8: b               #0x7d7afc
    // 0x7d7acc: d3 = 0.000000
    //     0x7d7acc: eor             v3.16b, v3.16b, v3.16b
    // 0x7d7ad0: fcmp            d0, d3
    // 0x7d7ad4: b.vs            #0x7d7ae8
    // 0x7d7ad8: b.ne            #0x7d7ae8
    // 0x7d7adc: fadd            d4, d0, d2
    // 0x7d7ae0: mov             v5.16b, v4.16b
    // 0x7d7ae4: b               #0x7d7afc
    // 0x7d7ae8: fcmp            d2, d2
    // 0x7d7aec: b.vc            #0x7d7af8
    // 0x7d7af0: mov             v5.16b, v2.16b
    // 0x7d7af4: b               #0x7d7afc
    // 0x7d7af8: mov             v5.16b, v0.16b
    // 0x7d7afc: ldr             x0, [fp, #0x18]
    // 0x7d7b00: ldur            d0, [fp, #-0x40]
    // 0x7d7b04: ldur            d4, [fp, #-0x38]
    // 0x7d7b08: stur            d5, [fp, #-0x48]
    // 0x7d7b0c: LoadField: r1 = r0->field_63
    //     0x7d7b0c: ldur            w1, [x0, #0x63]
    // 0x7d7b10: DecompressPointer r1
    //     0x7d7b10: add             x1, x1, HEAP, lsl #32
    // 0x7d7b14: LoadField: r2 = r1->field_33
    //     0x7d7b14: ldur            w2, [x1, #0x33]
    // 0x7d7b18: DecompressPointer r2
    //     0x7d7b18: add             x2, x2, HEAP, lsl #32
    // 0x7d7b1c: str             x2, [SP]
    // 0x7d7b20: r0 = baseSizeAdjustment()
    //     0x7d7b20: bl              #0x588fac  ; [package:flutter/src/material/theme_data.dart] VisualDensity::baseSizeAdjustment
    // 0x7d7b24: stur            x0, [fp, #-0x20]
    // 0x7d7b28: ldr             x16, [fp, #0x18]
    // 0x7d7b2c: r30 = Instance__DecorationSlot
    //     0x7d7b2c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d7b30: ldr             lr, [lr, #0x1b8]
    // 0x7d7b34: stp             lr, x16, [SP]
    // 0x7d7b38: r0 = childForSlot()
    //     0x7d7b38: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7b3c: stur            x0, [fp, #-0x28]
    // 0x7d7b40: ldr             x16, [fp, #0x18]
    // 0x7d7b44: r30 = Instance__DecorationSlot
    //     0x7d7b44: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d7b48: ldr             lr, [lr, #0x1b8]
    // 0x7d7b4c: stp             lr, x16, [SP]
    // 0x7d7b50: r0 = childForSlot()
    //     0x7d7b50: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7b54: mov             x1, x0
    // 0x7d7b58: ldr             x0, [fp, #0x18]
    // 0x7d7b5c: stur            x1, [fp, #-0x30]
    // 0x7d7b60: LoadField: r2 = r0->field_63
    //     0x7d7b60: ldur            w2, [x0, #0x63]
    // 0x7d7b64: DecompressPointer r2
    //     0x7d7b64: add             x2, x2, HEAP, lsl #32
    // 0x7d7b68: LoadField: r3 = r2->field_7
    //     0x7d7b68: ldur            w3, [x2, #7]
    // 0x7d7b6c: DecompressPointer r3
    //     0x7d7b6c: add             x3, x3, HEAP, lsl #32
    // 0x7d7b70: LoadField: d0 = r3->field_f
    //     0x7d7b70: ldur            d0, [x3, #0xf]
    // 0x7d7b74: ldur            d1, [fp, #-0x40]
    // 0x7d7b78: fadd            d2, d0, d1
    // 0x7d7b7c: ldur            x2, [fp, #-0x20]
    // 0x7d7b80: LoadField: d0 = r2->field_f
    //     0x7d7b80: ldur            d0, [x2, #0xf]
    // 0x7d7b84: stur            d0, [fp, #-0x70]
    // 0x7d7b88: d3 = 2.000000
    //     0x7d7b88: fmov            d3, #2.00000000
    // 0x7d7b8c: fdiv            d4, d0, d3
    // 0x7d7b90: stur            d4, [fp, #-0x68]
    // 0x7d7b94: fadd            d5, d2, d4
    // 0x7d7b98: stur            d5, [fp, #-0x60]
    // 0x7d7b9c: LoadField: d2 = r3->field_1f
    //     0x7d7b9c: ldur            d2, [x3, #0x1f]
    // 0x7d7ba0: ldur            d6, [fp, #-0x48]
    // 0x7d7ba4: fadd            d7, d2, d6
    // 0x7d7ba8: fadd            d2, d7, d4
    // 0x7d7bac: stur            d2, [fp, #-0x58]
    // 0x7d7bb0: r0 = EdgeInsets()
    //     0x7d7bb0: bl              #0x5960b4  ; AllocateEdgeInsetsStub -> EdgeInsets (size=0x28)
    // 0x7d7bb4: d0 = 0.000000
    //     0x7d7bb4: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7bb8: StoreField: r0->field_7 = d0
    //     0x7d7bb8: stur            d0, [x0, #7]
    // 0x7d7bbc: ldur            d1, [fp, #-0x60]
    // 0x7d7bc0: StoreField: r0->field_f = d1
    //     0x7d7bc0: stur            d1, [x0, #0xf]
    // 0x7d7bc4: ArrayStore: r0[0] = d0  ; List_8
    //     0x7d7bc4: stur            d0, [x0, #0x17]
    // 0x7d7bc8: ldur            d1, [fp, #-0x58]
    // 0x7d7bcc: StoreField: r0->field_1f = d1
    //     0x7d7bcc: stur            d1, [x0, #0x1f]
    // 0x7d7bd0: ldur            x16, [fp, #-0x10]
    // 0x7d7bd4: stp             x0, x16, [SP]
    // 0x7d7bd8: r0 = deflate()
    //     0x7d7bd8: bl              #0x59567c  ; [package:flutter/src/rendering/box.dart] BoxConstraints::deflate
    // 0x7d7bdc: ldur            d0, [fp, #-0x38]
    // 0x7d7be0: r1 = inline_Allocate_Double()
    //     0x7d7be0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d7be4: add             x1, x1, #0x10
    //     0x7d7be8: cmp             x2, x1
    //     0x7d7bec: b.ls            #0x7d8c34
    //     0x7d7bf0: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d7bf4: sub             x1, x1, #0xf
    //     0x7d7bf8: movz            x2, #0xd148
    //     0x7d7bfc: movk            x2, #0x3, lsl #16
    //     0x7d7c00: stur            x2, [x1, #-1]
    // 0x7d7c04: StoreField: r1->field_7 = d0
    //     0x7d7c04: stur            d0, [x1, #7]
    // 0x7d7c08: r2 = inline_Allocate_Double()
    //     0x7d7c08: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x7d7c0c: add             x2, x2, #0x10
    //     0x7d7c10: cmp             x3, x2
    //     0x7d7c14: b.ls            #0x7d8c50
    //     0x7d7c18: str             x2, [THR, #0x50]  ; THR::top
    //     0x7d7c1c: sub             x2, x2, #0xf
    //     0x7d7c20: movz            x3, #0xd148
    //     0x7d7c24: movk            x3, #0x3, lsl #16
    //     0x7d7c28: stur            x3, [x2, #-1]
    // 0x7d7c2c: StoreField: r2->field_7 = d0
    //     0x7d7c2c: stur            d0, [x2, #7]
    // 0x7d7c30: stp             x1, x0, [SP, #8]
    // 0x7d7c34: str             x2, [SP]
    // 0x7d7c38: r4 = const [0, 0x3, 0x3, 0x1, maxWidth, 0x2, minWidth, 0x1, null]
    //     0x7d7c38: ldr             x4, [PP, #0x5d40]  ; [pp+0x5d40] List(9) [0, 0x3, 0x3, 0x1, "maxWidth", 0x2, "minWidth", 0x1, Null]
    // 0x7d7c3c: r0 = copyWith()
    //     0x7d7c3c: bl              #0x594748  ; [package:flutter/src/rendering/box.dart] BoxConstraints::copyWith
    // 0x7d7c40: ldr             x16, [fp, #0x18]
    // 0x7d7c44: ldur            lr, [fp, #-0x30]
    // 0x7d7c48: stp             lr, x16, [SP, #8]
    // 0x7d7c4c: str             x0, [SP]
    // 0x7d7c50: r0 = _layoutLineBox()
    //     0x7d7c50: bl              #0x7d8d4c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_layoutLineBox
    // 0x7d7c54: r0 = inline_Allocate_Double()
    //     0x7d7c54: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7c58: add             x0, x0, #0x10
    //     0x7d7c5c: cmp             x1, x0
    //     0x7d7c60: b.ls            #0x7d8c6c
    //     0x7d7c64: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7c68: sub             x0, x0, #0xf
    //     0x7d7c6c: movz            x1, #0xd148
    //     0x7d7c70: movk            x1, #0x3, lsl #16
    //     0x7d7c74: stur            x1, [x0, #-1]
    // 0x7d7c78: StoreField: r0->field_7 = d0
    //     0x7d7c78: stur            d0, [x0, #7]
    // 0x7d7c7c: ldur            x16, [fp, #-8]
    // 0x7d7c80: ldur            lr, [fp, #-0x28]
    // 0x7d7c84: stp             lr, x16, [SP, #8]
    // 0x7d7c88: str             x0, [SP]
    // 0x7d7c8c: r0 = []=()
    //     0x7d7c8c: bl              #0xbe8af8  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::[]=
    // 0x7d7c90: ldr             x16, [fp, #0x18]
    // 0x7d7c94: r30 = Instance__DecorationSlot
    //     0x7d7c94: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d7c98: ldr             lr, [lr, #0x1e0]
    // 0x7d7c9c: stp             lr, x16, [SP]
    // 0x7d7ca0: r0 = childForSlot()
    //     0x7d7ca0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7ca4: cmp             w0, NULL
    // 0x7d7ca8: b.ne            #0x7d7cb4
    // 0x7d7cac: r0 = Null
    //     0x7d7cac: mov             x0, NULL
    // 0x7d7cb0: b               #0x7d7ce8
    // 0x7d7cb4: str             x0, [SP]
    // 0x7d7cb8: r0 = size()
    //     0x7d7cb8: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7cbc: LoadField: d0 = r0->field_f
    //     0x7d7cbc: ldur            d0, [x0, #0xf]
    // 0x7d7cc0: r0 = inline_Allocate_Double()
    //     0x7d7cc0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7cc4: add             x0, x0, #0x10
    //     0x7d7cc8: cmp             x1, x0
    //     0x7d7ccc: b.ls            #0x7d8c7c
    //     0x7d7cd0: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7cd4: sub             x0, x0, #0xf
    //     0x7d7cd8: movz            x1, #0xd148
    //     0x7d7cdc: movk            x1, #0x3, lsl #16
    //     0x7d7ce0: stur            x1, [x0, #-1]
    // 0x7d7ce4: StoreField: r0->field_7 = d0
    //     0x7d7ce4: stur            d0, [x0, #7]
    // 0x7d7ce8: cmp             w0, NULL
    // 0x7d7cec: b.ne            #0x7d7cf8
    // 0x7d7cf0: d0 = 0.000000
    //     0x7d7cf0: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7cf4: b               #0x7d7cfc
    // 0x7d7cf8: LoadField: d0 = r0->field_7
    //     0x7d7cf8: ldur            d0, [x0, #7]
    // 0x7d7cfc: stur            d0, [fp, #-0x38]
    // 0x7d7d00: ldr             x16, [fp, #0x18]
    // 0x7d7d04: r30 = Instance__DecorationSlot
    //     0x7d7d04: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d7d08: ldr             lr, [lr, #0x1b8]
    // 0x7d7d0c: stp             lr, x16, [SP]
    // 0x7d7d10: r0 = childForSlot()
    //     0x7d7d10: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7d14: cmp             w0, NULL
    // 0x7d7d18: b.ne            #0x7d7d24
    // 0x7d7d1c: r0 = Null
    //     0x7d7d1c: mov             x0, NULL
    // 0x7d7d20: b               #0x7d7d58
    // 0x7d7d24: str             x0, [SP]
    // 0x7d7d28: r0 = size()
    //     0x7d7d28: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7d2c: LoadField: d0 = r0->field_f
    //     0x7d7d2c: ldur            d0, [x0, #0xf]
    // 0x7d7d30: r0 = inline_Allocate_Double()
    //     0x7d7d30: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7d34: add             x0, x0, #0x10
    //     0x7d7d38: cmp             x1, x0
    //     0x7d7d3c: b.ls            #0x7d8c8c
    //     0x7d7d40: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7d44: sub             x0, x0, #0xf
    //     0x7d7d48: movz            x1, #0xd148
    //     0x7d7d4c: movk            x1, #0x3, lsl #16
    //     0x7d7d50: stur            x1, [x0, #-1]
    // 0x7d7d54: StoreField: r0->field_7 = d0
    //     0x7d7d54: stur            d0, [x0, #7]
    // 0x7d7d58: cmp             w0, NULL
    // 0x7d7d5c: b.ne            #0x7d7d68
    // 0x7d7d60: d1 = 0.000000
    //     0x7d7d60: eor             v1.16b, v1.16b, v1.16b
    // 0x7d7d64: b               #0x7d7d70
    // 0x7d7d68: LoadField: d0 = r0->field_7
    //     0x7d7d68: ldur            d0, [x0, #7]
    // 0x7d7d6c: mov             v1.16b, v0.16b
    // 0x7d7d70: ldur            d0, [fp, #-0x38]
    // 0x7d7d74: fcmp            d0, d1
    // 0x7d7d78: b.vs            #0x7d7d88
    // 0x7d7d7c: b.le            #0x7d7d88
    // 0x7d7d80: d2 = 0.000000
    //     0x7d7d80: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7d84: b               #0x7d7dc8
    // 0x7d7d88: fcmp            d0, d1
    // 0x7d7d8c: b.vs            #0x7d7da0
    // 0x7d7d90: b.ge            #0x7d7da0
    // 0x7d7d94: mov             v0.16b, v1.16b
    // 0x7d7d98: d2 = 0.000000
    //     0x7d7d98: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7d9c: b               #0x7d7dc8
    // 0x7d7da0: d2 = 0.000000
    //     0x7d7da0: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7da4: fcmp            d0, d2
    // 0x7d7da8: b.vs            #0x7d7dbc
    // 0x7d7dac: b.ne            #0x7d7dbc
    // 0x7d7db0: fadd            d3, d0, d1
    // 0x7d7db4: mov             v0.16b, v3.16b
    // 0x7d7db8: b               #0x7d7dc8
    // 0x7d7dbc: fcmp            d1, d1
    // 0x7d7dc0: b.vc            #0x7d7dc8
    // 0x7d7dc4: mov             v0.16b, v1.16b
    // 0x7d7dc8: ldur            x0, [fp, #-8]
    // 0x7d7dcc: stur            d0, [fp, #-0x38]
    // 0x7d7dd0: ldr             x16, [fp, #0x18]
    // 0x7d7dd4: r30 = Instance__DecorationSlot
    //     0x7d7dd4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x7d7dd8: ldr             lr, [lr, #0x1b8]
    // 0x7d7ddc: stp             lr, x16, [SP]
    // 0x7d7de0: r0 = childForSlot()
    //     0x7d7de0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7de4: ldur            x1, [fp, #-8]
    // 0x7d7de8: r2 = LoadClassIdInstr(r1)
    //     0x7d7de8: ldur            x2, [x1, #-1]
    //     0x7d7dec: ubfx            x2, x2, #0xc, #0x14
    // 0x7d7df0: stp             x0, x1, [SP]
    // 0x7d7df4: mov             x0, x2
    // 0x7d7df8: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d7df8: sub             lr, x0, #0xfb
    //     0x7d7dfc: ldr             lr, [x21, lr, lsl #3]
    //     0x7d7e00: blr             lr
    // 0x7d7e04: stur            x0, [fp, #-0x20]
    // 0x7d7e08: cmp             w0, NULL
    // 0x7d7e0c: b.eq            #0x7d8c9c
    // 0x7d7e10: ldr             x16, [fp, #0x18]
    // 0x7d7e14: r30 = Instance__DecorationSlot
    //     0x7d7e14: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x7d7e18: ldr             lr, [lr, #0x1e0]
    // 0x7d7e1c: stp             lr, x16, [SP]
    // 0x7d7e20: r0 = childForSlot()
    //     0x7d7e20: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7e24: ldur            x1, [fp, #-8]
    // 0x7d7e28: r2 = LoadClassIdInstr(r1)
    //     0x7d7e28: ldur            x2, [x1, #-1]
    //     0x7d7e2c: ubfx            x2, x2, #0xc, #0x14
    // 0x7d7e30: stp             x0, x1, [SP]
    // 0x7d7e34: mov             x0, x2
    // 0x7d7e38: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d7e38: sub             lr, x0, #0xfb
    //     0x7d7e3c: ldr             lr, [x21, lr, lsl #3]
    //     0x7d7e40: blr             lr
    // 0x7d7e44: cmp             w0, NULL
    // 0x7d7e48: b.eq            #0x7d8ca0
    // 0x7d7e4c: ldur            x1, [fp, #-0x20]
    // 0x7d7e50: LoadField: d0 = r1->field_7
    //     0x7d7e50: ldur            d0, [x1, #7]
    // 0x7d7e54: LoadField: d1 = r0->field_7
    //     0x7d7e54: ldur            d1, [x0, #7]
    // 0x7d7e58: fcmp            d0, d1
    // 0x7d7e5c: b.vs            #0x7d7e70
    // 0x7d7e60: b.le            #0x7d7e70
    // 0x7d7e64: LoadField: d0 = r1->field_7
    //     0x7d7e64: ldur            d0, [x1, #7]
    // 0x7d7e68: d2 = 0.000000
    //     0x7d7e68: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7e6c: b               #0x7d7ebc
    // 0x7d7e70: fcmp            d0, d1
    // 0x7d7e74: b.vs            #0x7d7e88
    // 0x7d7e78: b.ge            #0x7d7e88
    // 0x7d7e7c: LoadField: d0 = r0->field_7
    //     0x7d7e7c: ldur            d0, [x0, #7]
    // 0x7d7e80: d2 = 0.000000
    //     0x7d7e80: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7e84: b               #0x7d7ebc
    // 0x7d7e88: d2 = 0.000000
    //     0x7d7e88: eor             v2.16b, v2.16b, v2.16b
    // 0x7d7e8c: fcmp            d0, d2
    // 0x7d7e90: b.vs            #0x7d7ea4
    // 0x7d7e94: b.ne            #0x7d7ea4
    // 0x7d7e98: fadd            d3, d0, d1
    // 0x7d7e9c: mov             v0.16b, v3.16b
    // 0x7d7ea0: b               #0x7d7ebc
    // 0x7d7ea4: LoadField: d0 = r0->field_7
    //     0x7d7ea4: ldur            d0, [x0, #7]
    // 0x7d7ea8: fcmp            d0, d0
    // 0x7d7eac: b.vc            #0x7d7eb8
    // 0x7d7eb0: LoadField: d0 = r0->field_7
    //     0x7d7eb0: ldur            d0, [x0, #7]
    // 0x7d7eb4: b               #0x7d7ebc
    // 0x7d7eb8: LoadField: d0 = r1->field_7
    //     0x7d7eb8: ldur            d0, [x1, #7]
    // 0x7d7ebc: stur            d0, [fp, #-0x58]
    // 0x7d7ec0: ldr             x16, [fp, #0x18]
    // 0x7d7ec4: r30 = Instance__DecorationSlot
    //     0x7d7ec4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d7ec8: ldr             lr, [lr, #0x1d0]
    // 0x7d7ecc: stp             lr, x16, [SP]
    // 0x7d7ed0: r0 = childForSlot()
    //     0x7d7ed0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7ed4: cmp             w0, NULL
    // 0x7d7ed8: b.ne            #0x7d7ee4
    // 0x7d7edc: r0 = Null
    //     0x7d7edc: mov             x0, NULL
    // 0x7d7ee0: b               #0x7d7f18
    // 0x7d7ee4: str             x0, [SP]
    // 0x7d7ee8: r0 = size()
    //     0x7d7ee8: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7eec: LoadField: d0 = r0->field_f
    //     0x7d7eec: ldur            d0, [x0, #0xf]
    // 0x7d7ef0: r0 = inline_Allocate_Double()
    //     0x7d7ef0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7ef4: add             x0, x0, #0x10
    //     0x7d7ef8: cmp             x1, x0
    //     0x7d7efc: b.ls            #0x7d8ca4
    //     0x7d7f00: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7f04: sub             x0, x0, #0xf
    //     0x7d7f08: movz            x1, #0xd148
    //     0x7d7f0c: movk            x1, #0x3, lsl #16
    //     0x7d7f10: stur            x1, [x0, #-1]
    // 0x7d7f14: StoreField: r0->field_7 = d0
    //     0x7d7f14: stur            d0, [x0, #7]
    // 0x7d7f18: cmp             w0, NULL
    // 0x7d7f1c: b.ne            #0x7d7f28
    // 0x7d7f20: d0 = 0.000000
    //     0x7d7f20: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7f24: b               #0x7d7f2c
    // 0x7d7f28: LoadField: d0 = r0->field_7
    //     0x7d7f28: ldur            d0, [x0, #7]
    // 0x7d7f2c: stur            d0, [fp, #-0x60]
    // 0x7d7f30: ldr             x16, [fp, #0x18]
    // 0x7d7f34: r30 = Instance__DecorationSlot
    //     0x7d7f34: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d7f38: ldr             lr, [lr, #0x1d8]
    // 0x7d7f3c: stp             lr, x16, [SP]
    // 0x7d7f40: r0 = childForSlot()
    //     0x7d7f40: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7f44: cmp             w0, NULL
    // 0x7d7f48: b.ne            #0x7d7f54
    // 0x7d7f4c: r0 = Null
    //     0x7d7f4c: mov             x0, NULL
    // 0x7d7f50: b               #0x7d7f88
    // 0x7d7f54: str             x0, [SP]
    // 0x7d7f58: r0 = size()
    //     0x7d7f58: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d7f5c: LoadField: d0 = r0->field_f
    //     0x7d7f5c: ldur            d0, [x0, #0xf]
    // 0x7d7f60: r0 = inline_Allocate_Double()
    //     0x7d7f60: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d7f64: add             x0, x0, #0x10
    //     0x7d7f68: cmp             x1, x0
    //     0x7d7f6c: b.ls            #0x7d8cb4
    //     0x7d7f70: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d7f74: sub             x0, x0, #0xf
    //     0x7d7f78: movz            x1, #0xd148
    //     0x7d7f7c: movk            x1, #0x3, lsl #16
    //     0x7d7f80: stur            x1, [x0, #-1]
    // 0x7d7f84: StoreField: r0->field_7 = d0
    //     0x7d7f84: stur            d0, [x0, #7]
    // 0x7d7f88: cmp             w0, NULL
    // 0x7d7f8c: b.ne            #0x7d7f98
    // 0x7d7f90: d0 = 0.000000
    //     0x7d7f90: eor             v0.16b, v0.16b, v0.16b
    // 0x7d7f94: b               #0x7d7f9c
    // 0x7d7f98: LoadField: d0 = r0->field_7
    //     0x7d7f98: ldur            d0, [x0, #7]
    // 0x7d7f9c: ldur            x0, [fp, #-8]
    // 0x7d7fa0: stur            d0, [fp, #-0x78]
    // 0x7d7fa4: ldr             x16, [fp, #0x18]
    // 0x7d7fa8: r30 = Instance__DecorationSlot
    //     0x7d7fa8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d7fac: ldr             lr, [lr, #0x1d0]
    // 0x7d7fb0: stp             lr, x16, [SP]
    // 0x7d7fb4: r0 = childForSlot()
    //     0x7d7fb4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7fb8: ldur            x1, [fp, #-8]
    // 0x7d7fbc: r2 = LoadClassIdInstr(r1)
    //     0x7d7fbc: ldur            x2, [x1, #-1]
    //     0x7d7fc0: ubfx            x2, x2, #0xc, #0x14
    // 0x7d7fc4: stp             x0, x1, [SP]
    // 0x7d7fc8: mov             x0, x2
    // 0x7d7fcc: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d7fcc: sub             lr, x0, #0xfb
    //     0x7d7fd0: ldr             lr, [x21, lr, lsl #3]
    //     0x7d7fd4: blr             lr
    // 0x7d7fd8: stur            x0, [fp, #-0x20]
    // 0x7d7fdc: cmp             w0, NULL
    // 0x7d7fe0: b.eq            #0x7d8cc4
    // 0x7d7fe4: ldr             x16, [fp, #0x18]
    // 0x7d7fe8: r30 = Instance__DecorationSlot
    //     0x7d7fe8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d7fec: ldr             lr, [lr, #0x1d8]
    // 0x7d7ff0: stp             lr, x16, [SP]
    // 0x7d7ff4: r0 = childForSlot()
    //     0x7d7ff4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d7ff8: ldur            x1, [fp, #-8]
    // 0x7d7ffc: r2 = LoadClassIdInstr(r1)
    //     0x7d7ffc: ldur            x2, [x1, #-1]
    //     0x7d8000: ubfx            x2, x2, #0xc, #0x14
    // 0x7d8004: stp             x0, x1, [SP]
    // 0x7d8008: mov             x0, x2
    // 0x7d800c: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d800c: sub             lr, x0, #0xfb
    //     0x7d8010: ldr             lr, [x21, lr, lsl #3]
    //     0x7d8014: blr             lr
    // 0x7d8018: cmp             w0, NULL
    // 0x7d801c: b.eq            #0x7d8cc8
    // 0x7d8020: ldur            x1, [fp, #-0x20]
    // 0x7d8024: LoadField: d0 = r1->field_7
    //     0x7d8024: ldur            d0, [x1, #7]
    // 0x7d8028: LoadField: d1 = r0->field_7
    //     0x7d8028: ldur            d1, [x0, #7]
    // 0x7d802c: fcmp            d0, d1
    // 0x7d8030: b.vs            #0x7d8048
    // 0x7d8034: b.le            #0x7d8048
    // 0x7d8038: LoadField: d0 = r1->field_7
    //     0x7d8038: ldur            d0, [x1, #7]
    // 0x7d803c: mov             v1.16b, v0.16b
    // 0x7d8040: d2 = 0.000000
    //     0x7d8040: eor             v2.16b, v2.16b, v2.16b
    // 0x7d8044: b               #0x7d80a0
    // 0x7d8048: fcmp            d0, d1
    // 0x7d804c: b.vs            #0x7d8064
    // 0x7d8050: b.ge            #0x7d8064
    // 0x7d8054: LoadField: d0 = r0->field_7
    //     0x7d8054: ldur            d0, [x0, #7]
    // 0x7d8058: mov             v1.16b, v0.16b
    // 0x7d805c: d2 = 0.000000
    //     0x7d805c: eor             v2.16b, v2.16b, v2.16b
    // 0x7d8060: b               #0x7d80a0
    // 0x7d8064: d2 = 0.000000
    //     0x7d8064: eor             v2.16b, v2.16b, v2.16b
    // 0x7d8068: fcmp            d0, d2
    // 0x7d806c: b.vs            #0x7d8080
    // 0x7d8070: b.ne            #0x7d8080
    // 0x7d8074: fadd            d3, d0, d1
    // 0x7d8078: mov             v1.16b, v3.16b
    // 0x7d807c: b               #0x7d80a0
    // 0x7d8080: LoadField: d0 = r0->field_7
    //     0x7d8080: ldur            d0, [x0, #7]
    // 0x7d8084: fcmp            d0, d0
    // 0x7d8088: b.vc            #0x7d8098
    // 0x7d808c: LoadField: d0 = r0->field_7
    //     0x7d808c: ldur            d0, [x0, #7]
    // 0x7d8090: mov             v1.16b, v0.16b
    // 0x7d8094: b               #0x7d80a0
    // 0x7d8098: LoadField: d0 = r1->field_7
    //     0x7d8098: ldur            d0, [x1, #7]
    // 0x7d809c: mov             v1.16b, v0.16b
    // 0x7d80a0: ldur            d0, [fp, #-0x58]
    // 0x7d80a4: fsub            d3, d1, d0
    // 0x7d80a8: fcmp            d2, d3
    // 0x7d80ac: b.vs            #0x7d80bc
    // 0x7d80b0: b.le            #0x7d80bc
    // 0x7d80b4: d4 = 0.000000
    //     0x7d80b4: eor             v4.16b, v4.16b, v4.16b
    // 0x7d80b8: b               #0x7d80fc
    // 0x7d80bc: fcmp            d2, d3
    // 0x7d80c0: b.vs            #0x7d80d0
    // 0x7d80c4: b.ge            #0x7d80d0
    // 0x7d80c8: mov             v4.16b, v3.16b
    // 0x7d80cc: b               #0x7d80fc
    // 0x7d80d0: fcmp            d2, d2
    // 0x7d80d4: b.vs            #0x7d80e8
    // 0x7d80d8: b.ne            #0x7d80e8
    // 0x7d80dc: fadd            d1, d2, d3
    // 0x7d80e0: mov             v4.16b, v1.16b
    // 0x7d80e4: b               #0x7d80fc
    // 0x7d80e8: fcmp            d3, d3
    // 0x7d80ec: b.vc            #0x7d80f8
    // 0x7d80f0: mov             v4.16b, v3.16b
    // 0x7d80f4: b               #0x7d80fc
    // 0x7d80f8: d4 = 0.000000
    //     0x7d80f8: eor             v4.16b, v4.16b, v4.16b
    // 0x7d80fc: ldur            x0, [fp, #-8]
    // 0x7d8100: ldur            d3, [fp, #-0x60]
    // 0x7d8104: ldur            d1, [fp, #-0x78]
    // 0x7d8108: stur            d4, [fp, #-0x80]
    // 0x7d810c: ldr             x16, [fp, #0x18]
    // 0x7d8110: r30 = Instance__DecorationSlot
    //     0x7d8110: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x7d8114: ldr             lr, [lr, #0x1d0]
    // 0x7d8118: stp             lr, x16, [SP]
    // 0x7d811c: r0 = childForSlot()
    //     0x7d811c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d8120: ldur            x1, [fp, #-8]
    // 0x7d8124: r2 = LoadClassIdInstr(r1)
    //     0x7d8124: ldur            x2, [x1, #-1]
    //     0x7d8128: ubfx            x2, x2, #0xc, #0x14
    // 0x7d812c: stp             x0, x1, [SP]
    // 0x7d8130: mov             x0, x2
    // 0x7d8134: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d8134: sub             lr, x0, #0xfb
    //     0x7d8138: ldr             lr, [x21, lr, lsl #3]
    //     0x7d813c: blr             lr
    // 0x7d8140: cmp             w0, NULL
    // 0x7d8144: b.eq            #0x7d8ccc
    // 0x7d8148: LoadField: d0 = r0->field_7
    //     0x7d8148: ldur            d0, [x0, #7]
    // 0x7d814c: ldur            d1, [fp, #-0x60]
    // 0x7d8150: fsub            d2, d1, d0
    // 0x7d8154: stur            d2, [fp, #-0x88]
    // 0x7d8158: ldr             x16, [fp, #0x18]
    // 0x7d815c: r30 = Instance__DecorationSlot
    //     0x7d815c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x7d8160: ldr             lr, [lr, #0x1d8]
    // 0x7d8164: stp             lr, x16, [SP]
    // 0x7d8168: r0 = childForSlot()
    //     0x7d8168: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d816c: ldur            x1, [fp, #-8]
    // 0x7d8170: r2 = LoadClassIdInstr(r1)
    //     0x7d8170: ldur            x2, [x1, #-1]
    //     0x7d8174: ubfx            x2, x2, #0xc, #0x14
    // 0x7d8178: stp             x0, x1, [SP]
    // 0x7d817c: mov             x0, x2
    // 0x7d8180: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d8180: sub             lr, x0, #0xfb
    //     0x7d8184: ldr             lr, [x21, lr, lsl #3]
    //     0x7d8188: blr             lr
    // 0x7d818c: cmp             w0, NULL
    // 0x7d8190: b.eq            #0x7d8cd0
    // 0x7d8194: LoadField: d0 = r0->field_7
    //     0x7d8194: ldur            d0, [x0, #7]
    // 0x7d8198: ldur            d1, [fp, #-0x78]
    // 0x7d819c: fsub            d2, d1, d0
    // 0x7d81a0: ldur            d0, [fp, #-0x88]
    // 0x7d81a4: fcmp            d0, d2
    // 0x7d81a8: b.vs            #0x7d81bc
    // 0x7d81ac: b.le            #0x7d81bc
    // 0x7d81b0: mov             v3.16b, v0.16b
    // 0x7d81b4: d1 = 0.000000
    //     0x7d81b4: eor             v1.16b, v1.16b, v1.16b
    // 0x7d81b8: b               #0x7d8200
    // 0x7d81bc: fcmp            d0, d2
    // 0x7d81c0: b.vs            #0x7d81d4
    // 0x7d81c4: b.ge            #0x7d81d4
    // 0x7d81c8: mov             v3.16b, v2.16b
    // 0x7d81cc: d1 = 0.000000
    //     0x7d81cc: eor             v1.16b, v1.16b, v1.16b
    // 0x7d81d0: b               #0x7d8200
    // 0x7d81d4: d1 = 0.000000
    //     0x7d81d4: eor             v1.16b, v1.16b, v1.16b
    // 0x7d81d8: fcmp            d0, d1
    // 0x7d81dc: b.vs            #0x7d81ec
    // 0x7d81e0: b.ne            #0x7d81ec
    // 0x7d81e4: fadd            d3, d0, d2
    // 0x7d81e8: b               #0x7d8200
    // 0x7d81ec: fcmp            d2, d2
    // 0x7d81f0: b.vc            #0x7d81fc
    // 0x7d81f4: mov             v3.16b, v2.16b
    // 0x7d81f8: b               #0x7d8200
    // 0x7d81fc: mov             v3.16b, v0.16b
    // 0x7d8200: ldur            d2, [fp, #-0x38]
    // 0x7d8204: ldur            d0, [fp, #-0x58]
    // 0x7d8208: fsub            d4, d2, d0
    // 0x7d820c: fsub            d5, d3, d4
    // 0x7d8210: fcmp            d1, d5
    // 0x7d8214: b.vs            #0x7d8224
    // 0x7d8218: b.le            #0x7d8224
    // 0x7d821c: d3 = 0.000000
    //     0x7d821c: eor             v3.16b, v3.16b, v3.16b
    // 0x7d8220: b               #0x7d8260
    // 0x7d8224: fcmp            d1, d5
    // 0x7d8228: b.vs            #0x7d8238
    // 0x7d822c: b.ge            #0x7d8238
    // 0x7d8230: mov             v3.16b, v5.16b
    // 0x7d8234: b               #0x7d8260
    // 0x7d8238: fcmp            d1, d1
    // 0x7d823c: b.vs            #0x7d824c
    // 0x7d8240: b.ne            #0x7d824c
    // 0x7d8244: fadd            d3, d1, d5
    // 0x7d8248: b               #0x7d8260
    // 0x7d824c: fcmp            d5, d5
    // 0x7d8250: b.vc            #0x7d825c
    // 0x7d8254: mov             v3.16b, v5.16b
    // 0x7d8258: b               #0x7d8260
    // 0x7d825c: d3 = 0.000000
    //     0x7d825c: eor             v3.16b, v3.16b, v3.16b
    // 0x7d8260: stur            d3, [fp, #-0x60]
    // 0x7d8264: ldr             x16, [fp, #0x18]
    // 0x7d8268: r30 = Instance__DecorationSlot
    //     0x7d8268: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x7d826c: ldr             lr, [lr, #0x1c0]
    // 0x7d8270: stp             lr, x16, [SP]
    // 0x7d8274: r0 = childForSlot()
    //     0x7d8274: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d8278: cmp             w0, NULL
    // 0x7d827c: b.ne            #0x7d8288
    // 0x7d8280: r0 = Null
    //     0x7d8280: mov             x0, NULL
    // 0x7d8284: b               #0x7d82bc
    // 0x7d8288: str             x0, [SP]
    // 0x7d828c: r0 = size()
    //     0x7d828c: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d8290: LoadField: d0 = r0->field_f
    //     0x7d8290: ldur            d0, [x0, #0xf]
    // 0x7d8294: r0 = inline_Allocate_Double()
    //     0x7d8294: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d8298: add             x0, x0, #0x10
    //     0x7d829c: cmp             x1, x0
    //     0x7d82a0: b.ls            #0x7d8cd4
    //     0x7d82a4: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d82a8: sub             x0, x0, #0xf
    //     0x7d82ac: movz            x1, #0xd148
    //     0x7d82b0: movk            x1, #0x3, lsl #16
    //     0x7d82b4: stur            x1, [x0, #-1]
    // 0x7d82b8: StoreField: r0->field_7 = d0
    //     0x7d82b8: stur            d0, [x0, #7]
    // 0x7d82bc: cmp             w0, NULL
    // 0x7d82c0: b.ne            #0x7d82cc
    // 0x7d82c4: d0 = 0.000000
    //     0x7d82c4: eor             v0.16b, v0.16b, v0.16b
    // 0x7d82c8: b               #0x7d82d0
    // 0x7d82cc: LoadField: d0 = r0->field_7
    //     0x7d82cc: ldur            d0, [x0, #7]
    // 0x7d82d0: stur            d0, [fp, #-0x78]
    // 0x7d82d4: ldr             x16, [fp, #0x18]
    // 0x7d82d8: r30 = Instance__DecorationSlot
    //     0x7d82d8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x7d82dc: ldr             lr, [lr, #0x1c8]
    // 0x7d82e0: stp             lr, x16, [SP]
    // 0x7d82e4: r0 = childForSlot()
    //     0x7d82e4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d82e8: cmp             w0, NULL
    // 0x7d82ec: b.ne            #0x7d82f8
    // 0x7d82f0: r0 = Null
    //     0x7d82f0: mov             x0, NULL
    // 0x7d82f4: b               #0x7d832c
    // 0x7d82f8: str             x0, [SP]
    // 0x7d82fc: r0 = size()
    //     0x7d82fc: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d8300: LoadField: d0 = r0->field_f
    //     0x7d8300: ldur            d0, [x0, #0xf]
    // 0x7d8304: r0 = inline_Allocate_Double()
    //     0x7d8304: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d8308: add             x0, x0, #0x10
    //     0x7d830c: cmp             x1, x0
    //     0x7d8310: b.ls            #0x7d8ce4
    //     0x7d8314: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d8318: sub             x0, x0, #0xf
    //     0x7d831c: movz            x1, #0xd148
    //     0x7d8320: movk            x1, #0x3, lsl #16
    //     0x7d8324: stur            x1, [x0, #-1]
    // 0x7d8328: StoreField: r0->field_7 = d0
    //     0x7d8328: stur            d0, [x0, #7]
    // 0x7d832c: cmp             w0, NULL
    // 0x7d8330: b.ne            #0x7d833c
    // 0x7d8334: d1 = 0.000000
    //     0x7d8334: eor             v1.16b, v1.16b, v1.16b
    // 0x7d8338: b               #0x7d8344
    // 0x7d833c: LoadField: d0 = r0->field_7
    //     0x7d833c: ldur            d0, [x0, #7]
    // 0x7d8340: mov             v1.16b, v0.16b
    // 0x7d8344: ldur            d0, [fp, #-0x78]
    // 0x7d8348: fcmp            d0, d1
    // 0x7d834c: b.vs            #0x7d8360
    // 0x7d8350: b.le            #0x7d8360
    // 0x7d8354: mov             v6.16b, v0.16b
    // 0x7d8358: d2 = 0.000000
    //     0x7d8358: eor             v2.16b, v2.16b, v2.16b
    // 0x7d835c: b               #0x7d83a8
    // 0x7d8360: fcmp            d0, d1
    // 0x7d8364: b.vs            #0x7d8378
    // 0x7d8368: b.ge            #0x7d8378
    // 0x7d836c: mov             v6.16b, v1.16b
    // 0x7d8370: d2 = 0.000000
    //     0x7d8370: eor             v2.16b, v2.16b, v2.16b
    // 0x7d8374: b               #0x7d83a8
    // 0x7d8378: d2 = 0.000000
    //     0x7d8378: eor             v2.16b, v2.16b, v2.16b
    // 0x7d837c: fcmp            d0, d2
    // 0x7d8380: b.vs            #0x7d8394
    // 0x7d8384: b.ne            #0x7d8394
    // 0x7d8388: fadd            d3, d0, d1
    // 0x7d838c: mov             v6.16b, v3.16b
    // 0x7d8390: b               #0x7d83a8
    // 0x7d8394: fcmp            d1, d1
    // 0x7d8398: b.vc            #0x7d83a4
    // 0x7d839c: mov             v6.16b, v1.16b
    // 0x7d83a0: b               #0x7d83a8
    // 0x7d83a4: mov             v6.16b, v0.16b
    // 0x7d83a8: ldr             x0, [fp, #0x18]
    // 0x7d83ac: ldur            d4, [fp, #-0x40]
    // 0x7d83b0: ldur            d3, [fp, #-0x80]
    // 0x7d83b4: ldur            d1, [fp, #-0x60]
    // 0x7d83b8: ldur            d0, [fp, #-0x38]
    // 0x7d83bc: ldur            d5, [fp, #-0x70]
    // 0x7d83c0: LoadField: r1 = r0->field_63
    //     0x7d83c0: ldur            w1, [x0, #0x63]
    // 0x7d83c4: DecompressPointer r1
    //     0x7d83c4: add             x1, x1, HEAP, lsl #32
    // 0x7d83c8: LoadField: r2 = r1->field_7
    //     0x7d83c8: ldur            w2, [x1, #7]
    // 0x7d83cc: DecompressPointer r2
    //     0x7d83cc: add             x2, x2, HEAP, lsl #32
    // 0x7d83d0: LoadField: d7 = r2->field_f
    //     0x7d83d0: ldur            d7, [x2, #0xf]
    // 0x7d83d4: fadd            d8, d4, d7
    // 0x7d83d8: fadd            d7, d8, d3
    // 0x7d83dc: fadd            d8, d7, d0
    // 0x7d83e0: fadd            d7, d8, d1
    // 0x7d83e4: LoadField: d8 = r2->field_1f
    //     0x7d83e4: ldur            d8, [x2, #0x1f]
    // 0x7d83e8: fadd            d9, d7, d8
    // 0x7d83ec: fadd            d7, d9, d5
    // 0x7d83f0: fcmp            d6, d7
    // 0x7d83f4: b.vs            #0x7d83fc
    // 0x7d83f8: b.gt            #0x7d8434
    // 0x7d83fc: fcmp            d6, d7
    // 0x7d8400: b.vs            #0x7d8410
    // 0x7d8404: b.ge            #0x7d8410
    // 0x7d8408: mov             v6.16b, v7.16b
    // 0x7d840c: b               #0x7d8434
    // 0x7d8410: fcmp            d6, d2
    // 0x7d8414: b.vs            #0x7d8428
    // 0x7d8418: b.ne            #0x7d8428
    // 0x7d841c: fadd            d8, d6, d7
    // 0x7d8420: mov             v6.16b, v8.16b
    // 0x7d8424: b               #0x7d8434
    // 0x7d8428: fcmp            d7, d7
    // 0x7d842c: b.vc            #0x7d8434
    // 0x7d8430: mov             v6.16b, v7.16b
    // 0x7d8434: stur            d6, [fp, #-0x90]
    // 0x7d8438: LoadField: r2 = r1->field_2f
    //     0x7d8438: ldur            w2, [x1, #0x2f]
    // 0x7d843c: DecompressPointer r2
    //     0x7d843c: add             x2, x2, HEAP, lsl #32
    // 0x7d8440: cmp             w2, NULL
    // 0x7d8444: b.eq            #0x7d8cf4
    // 0x7d8448: tbz             w2, #4, #0x7d8458
    // 0x7d844c: LoadField: r2 = r1->field_b
    //     0x7d844c: ldur            w2, [x1, #0xb]
    // 0x7d8450: DecompressPointer r2
    //     0x7d8450: add             x2, x2, HEAP, lsl #32
    // 0x7d8454: tbnz            w2, #4, #0x7d8460
    // 0x7d8458: d8 = 0.000000
    //     0x7d8458: eor             v8.16b, v8.16b, v8.16b
    // 0x7d845c: b               #0x7d8464
    // 0x7d8460: d8 = 48.000000
    //     0x7d8460: ldr             d8, [PP, #0x6518]  ; [pp+0x6518] IMM: double(48) from 0x4048000000000000
    // 0x7d8464: ldur            x1, [fp, #-0x10]
    // 0x7d8468: ldur            d7, [fp, #-0x48]
    // 0x7d846c: stur            d8, [fp, #-0x88]
    // 0x7d8470: LoadField: d9 = r1->field_1f
    //     0x7d8470: ldur            d9, [x1, #0x1f]
    // 0x7d8474: fsub            d10, d9, d7
    // 0x7d8478: stur            d10, [fp, #-0x78]
    // 0x7d847c: fcmp            d6, d8
    // 0x7d8480: b.vs            #0x7d8490
    // 0x7d8484: b.le            #0x7d8490
    // 0x7d8488: mov             v7.16b, v6.16b
    // 0x7d848c: b               #0x7d84cc
    // 0x7d8490: fcmp            d6, d8
    // 0x7d8494: b.vs            #0x7d84a4
    // 0x7d8498: b.ge            #0x7d84a4
    // 0x7d849c: mov             v7.16b, v8.16b
    // 0x7d84a0: b               #0x7d84cc
    // 0x7d84a4: fcmp            d6, d2
    // 0x7d84a8: b.vs            #0x7d84b8
    // 0x7d84ac: b.ne            #0x7d84b8
    // 0x7d84b0: fadd            d7, d6, d8
    // 0x7d84b4: b               #0x7d84cc
    // 0x7d84b8: fcmp            d8, d8
    // 0x7d84bc: b.vc            #0x7d84c8
    // 0x7d84c0: mov             v7.16b, v8.16b
    // 0x7d84c4: b               #0x7d84cc
    // 0x7d84c8: mov             v7.16b, v6.16b
    // 0x7d84cc: stur            d7, [fp, #-0x48]
    // 0x7d84d0: fcmp            d7, d10
    // 0x7d84d4: b.vs            #0x7d84f0
    // 0x7d84d8: b.le            #0x7d84f0
    // 0x7d84dc: mov             v3.16b, v10.16b
    // 0x7d84e0: mov             v2.16b, v8.16b
    // 0x7d84e4: mov             v0.16b, v10.16b
    // 0x7d84e8: mov             v1.16b, v6.16b
    // 0x7d84ec: b               #0x7d85b4
    // 0x7d84f0: fcmp            d7, d10
    // 0x7d84f4: b.vs            #0x7d8510
    // 0x7d84f8: b.ge            #0x7d8510
    // 0x7d84fc: mov             v3.16b, v7.16b
    // 0x7d8500: mov             v2.16b, v8.16b
    // 0x7d8504: mov             v0.16b, v10.16b
    // 0x7d8508: mov             v1.16b, v6.16b
    // 0x7d850c: b               #0x7d85b4
    // 0x7d8510: fcmp            d7, d2
    // 0x7d8514: b.vs            #0x7d851c
    // 0x7d8518: b.eq            #0x7d8524
    // 0x7d851c: r1 = false
    //     0x7d851c: add             x1, NULL, #0x30  ; false
    // 0x7d8520: b               #0x7d8528
    // 0x7d8524: r1 = true
    //     0x7d8524: add             x1, NULL, #0x20  ; true
    // 0x7d8528: tbnz            w1, #4, #0x7d854c
    // 0x7d852c: fadd            d9, d7, d10
    // 0x7d8530: fmul            d11, d9, d7
    // 0x7d8534: fmul            d7, d11, d10
    // 0x7d8538: mov             v3.16b, v7.16b
    // 0x7d853c: mov             v2.16b, v8.16b
    // 0x7d8540: mov             v0.16b, v10.16b
    // 0x7d8544: mov             v1.16b, v6.16b
    // 0x7d8548: b               #0x7d85b4
    // 0x7d854c: tbnz            w1, #4, #0x7d858c
    // 0x7d8550: r1 = inline_Allocate_Double()
    //     0x7d8550: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x7d8554: add             x1, x1, #0x10
    //     0x7d8558: cmp             x2, x1
    //     0x7d855c: b.ls            #0x7d8cf8
    //     0x7d8560: str             x1, [THR, #0x50]  ; THR::top
    //     0x7d8564: sub             x1, x1, #0xf
    //     0x7d8568: movz            x2, #0xd148
    //     0x7d856c: movk            x2, #0x3, lsl #16
    //     0x7d8570: stur            x2, [x1, #-1]
    // 0x7d8574: StoreField: r1->field_7 = d10
    //     0x7d8574: stur            d10, [x1, #7]
    // 0x7d8578: str             x1, [SP]
    // 0x7d857c: r0 = isNegative()
    //     0x7d857c: bl              #0xc5c7f4  ; [dart:core] _Double::isNegative
    // 0x7d8580: tbnz            w0, #4, #0x7d858c
    // 0x7d8584: ldur            d0, [fp, #-0x78]
    // 0x7d8588: b               #0x7d8598
    // 0x7d858c: ldur            d0, [fp, #-0x78]
    // 0x7d8590: fcmp            d0, d0
    // 0x7d8594: b.vc            #0x7d85a8
    // 0x7d8598: mov             v3.16b, v0.16b
    // 0x7d859c: ldur            d2, [fp, #-0x88]
    // 0x7d85a0: ldur            d1, [fp, #-0x90]
    // 0x7d85a4: b               #0x7d85b4
    // 0x7d85a8: ldur            d3, [fp, #-0x48]
    // 0x7d85ac: ldur            d2, [fp, #-0x88]
    // 0x7d85b0: ldur            d1, [fp, #-0x90]
    // 0x7d85b4: stur            d3, [fp, #-0x98]
    // 0x7d85b8: fcmp            d2, d1
    // 0x7d85bc: b.vs            #0x7d85d8
    // 0x7d85c0: b.le            #0x7d85d8
    // 0x7d85c4: d4 = 2.000000
    //     0x7d85c4: fmov            d4, #2.00000000
    // 0x7d85c8: fsub            d5, d2, d1
    // 0x7d85cc: fdiv            d2, d5, d4
    // 0x7d85d0: mov             v5.16b, v2.16b
    // 0x7d85d4: b               #0x7d85e0
    // 0x7d85d8: d4 = 2.000000
    //     0x7d85d8: fmov            d4, #2.00000000
    // 0x7d85dc: d5 = 0.000000
    //     0x7d85dc: eor             v5.16b, v5.16b, v5.16b
    // 0x7d85e0: d2 = 0.000000
    //     0x7d85e0: eor             v2.16b, v2.16b, v2.16b
    // 0x7d85e4: stur            d5, [fp, #-0x88]
    // 0x7d85e8: fsub            d6, d1, d0
    // 0x7d85ec: fcmp            d2, d6
    // 0x7d85f0: b.vs            #0x7d8600
    // 0x7d85f4: b.le            #0x7d8600
    // 0x7d85f8: d0 = 0.000000
    //     0x7d85f8: eor             v0.16b, v0.16b, v0.16b
    // 0x7d85fc: b               #0x7d863c
    // 0x7d8600: fcmp            d2, d6
    // 0x7d8604: b.vs            #0x7d8614
    // 0x7d8608: b.ge            #0x7d8614
    // 0x7d860c: mov             v0.16b, v6.16b
    // 0x7d8610: b               #0x7d863c
    // 0x7d8614: fcmp            d2, d2
    // 0x7d8618: b.vs            #0x7d8628
    // 0x7d861c: b.ne            #0x7d8628
    // 0x7d8620: fadd            d0, d2, d6
    // 0x7d8624: b               #0x7d863c
    // 0x7d8628: fcmp            d6, d6
    // 0x7d862c: b.vc            #0x7d8638
    // 0x7d8630: mov             v0.16b, v6.16b
    // 0x7d8634: b               #0x7d863c
    // 0x7d8638: d0 = 0.000000
    //     0x7d8638: eor             v0.16b, v0.16b, v0.16b
    // 0x7d863c: stur            d0, [fp, #-0x48]
    // 0x7d8640: ldr             x16, [fp, #0x18]
    // 0x7d8644: str             x16, [SP]
    // 0x7d8648: r0 = _isOutlineAligned()
    //     0x7d8648: bl              #0x7d6b24  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_isOutlineAligned
    // 0x7d864c: tbnz            w0, #4, #0x7d865c
    // 0x7d8650: r1 = Instance_TextAlignVertical
    //     0x7d8650: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d368] Obj!TextAlignVertical@c2f391
    //     0x7d8654: ldr             x1, [x1, #0x368]
    // 0x7d8658: b               #0x7d8664
    // 0x7d865c: r1 = Instance_TextAlignVertical
    //     0x7d865c: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d370] Obj!TextAlignVertical@c2f381
    //     0x7d8660: ldr             x1, [x1, #0x370]
    // 0x7d8664: ldr             x0, [fp, #0x18]
    // 0x7d8668: ldur            d7, [fp, #-0x40]
    // 0x7d866c: ldur            d10, [fp, #-0x68]
    // 0x7d8670: ldur            d2, [fp, #-0x88]
    // 0x7d8674: ldur            d3, [fp, #-0x48]
    // 0x7d8678: ldur            d0, [fp, #-0x98]
    // 0x7d867c: ldur            d6, [fp, #-0x80]
    // 0x7d8680: ldur            d5, [fp, #-0x60]
    // 0x7d8684: ldur            d4, [fp, #-0x38]
    // 0x7d8688: ldur            d9, [fp, #-0x58]
    // 0x7d868c: ldur            d8, [fp, #-0x70]
    // 0x7d8690: d11 = 1.000000
    //     0x7d8690: fmov            d11, #1.00000000
    // 0x7d8694: d1 = 2.000000
    //     0x7d8694: fmov            d1, #2.00000000
    // 0x7d8698: LoadField: d12 = r1->field_7
    //     0x7d8698: ldur            d12, [x1, #7]
    // 0x7d869c: fadd            d13, d12, d11
    // 0x7d86a0: fdiv            d12, d13, d1
    // 0x7d86a4: fsub            d13, d11, d12
    // 0x7d86a8: fmul            d14, d3, d13
    // 0x7d86ac: fsub            d3, d6, d14
    // 0x7d86b0: LoadField: r1 = r0->field_63
    //     0x7d86b0: ldur            w1, [x0, #0x63]
    // 0x7d86b4: DecompressPointer r1
    //     0x7d86b4: add             x1, x1, HEAP, lsl #32
    // 0x7d86b8: LoadField: r2 = r1->field_7
    //     0x7d86b8: ldur            w2, [x1, #7]
    // 0x7d86bc: DecompressPointer r2
    //     0x7d86bc: add             x2, x2, HEAP, lsl #32
    // 0x7d86c0: LoadField: d13 = r2->field_f
    //     0x7d86c0: ldur            d13, [x2, #0xf]
    // 0x7d86c4: fadd            d14, d13, d7
    // 0x7d86c8: fadd            d15, d14, d9
    // 0x7d86cc: fadd            d14, d15, d3
    // 0x7d86d0: fadd            d15, d14, d2
    // 0x7d86d4: fadd            d2, d15, d10
    // 0x7d86d8: stur            d2, [fp, #-0x78]
    // 0x7d86dc: LoadField: d10 = r2->field_1f
    //     0x7d86dc: ldur            d10, [x2, #0x1f]
    // 0x7d86e0: fadd            d14, d13, d10
    // 0x7d86e4: fsub            d10, d0, d14
    // 0x7d86e8: fsub            d13, d10, d7
    // 0x7d86ec: fsub            d7, d13, d8
    // 0x7d86f0: fadd            d8, d6, d4
    // 0x7d86f4: fadd            d6, d8, d5
    // 0x7d86f8: fsub            d5, d7, d6
    // 0x7d86fc: fmul            d6, d5, d12
    // 0x7d8700: fadd            d7, d2, d6
    // 0x7d8704: stur            d7, [fp, #-0x48]
    // 0x7d8708: fdiv            d6, d3, d1
    // 0x7d870c: fadd            d3, d9, d6
    // 0x7d8710: fadd            d6, d1, d4
    // 0x7d8714: fsub            d4, d0, d6
    // 0x7d8718: fdiv            d6, d4, d1
    // 0x7d871c: fadd            d1, d3, d6
    // 0x7d8720: stur            d1, [fp, #-0x40]
    // 0x7d8724: fadd            d3, d2, d5
    // 0x7d8728: stur            d3, [fp, #-0x38]
    // 0x7d872c: str             x0, [SP]
    // 0x7d8730: r0 = _isOutlineAligned()
    //     0x7d8730: bl              #0x7d6b24  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_isOutlineAligned
    // 0x7d8734: tbnz            w0, #4, #0x7d8744
    // 0x7d8738: r0 = Instance_TextAlignVertical
    //     0x7d8738: add             x0, PP, #0x4d, lsl #12  ; [pp+0x4d368] Obj!TextAlignVertical@c2f391
    //     0x7d873c: ldr             x0, [x0, #0x368]
    // 0x7d8740: b               #0x7d874c
    // 0x7d8744: r0 = Instance_TextAlignVertical
    //     0x7d8744: add             x0, PP, #0x4d, lsl #12  ; [pp+0x4d370] Obj!TextAlignVertical@c2f381
    //     0x7d8748: ldr             x0, [x0, #0x370]
    // 0x7d874c: d0 = 0.000000
    //     0x7d874c: eor             v0.16b, v0.16b, v0.16b
    // 0x7d8750: LoadField: d1 = r0->field_7
    //     0x7d8750: ldur            d1, [x0, #7]
    // 0x7d8754: fcmp            d1, d0
    // 0x7d8758: b.vs            #0x7d8794
    // 0x7d875c: b.gt            #0x7d8794
    // 0x7d8760: ldur            d2, [fp, #-0x78]
    // 0x7d8764: ldur            d3, [fp, #-0x40]
    // 0x7d8768: fcmp            d2, d3
    // 0x7d876c: b.vs            #0x7d877c
    // 0x7d8770: b.lt            #0x7d877c
    // 0x7d8774: mov             v1.16b, v3.16b
    // 0x7d8778: b               #0x7d87bc
    // 0x7d877c: d4 = 1.000000
    //     0x7d877c: fmov            d4, #1.00000000
    // 0x7d8780: fadd            d5, d1, d4
    // 0x7d8784: fsub            d1, d3, d2
    // 0x7d8788: fmul            d3, d1, d5
    // 0x7d878c: fadd            d1, d2, d3
    // 0x7d8790: b               #0x7d87bc
    // 0x7d8794: ldur            d3, [fp, #-0x40]
    // 0x7d8798: ldur            d2, [fp, #-0x38]
    // 0x7d879c: fcmp            d3, d2
    // 0x7d87a0: b.vs            #0x7d87b0
    // 0x7d87a4: b.lt            #0x7d87b0
    // 0x7d87a8: mov             v1.16b, v3.16b
    // 0x7d87ac: b               #0x7d87bc
    // 0x7d87b0: fsub            d4, d2, d3
    // 0x7d87b4: fmul            d2, d4, d1
    // 0x7d87b8: fadd            d1, d3, d2
    // 0x7d87bc: stur            d1, [fp, #-0x38]
    // 0x7d87c0: ldr             x16, [fp, #0x18]
    // 0x7d87c4: r30 = Instance__DecorationSlot
    //     0x7d87c4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d87c8: ldr             lr, [lr, #0x1f0]
    // 0x7d87cc: stp             lr, x16, [SP]
    // 0x7d87d0: r0 = childForSlot()
    //     0x7d87d0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d87d4: cmp             w0, NULL
    // 0x7d87d8: b.eq            #0x7d8878
    // 0x7d87dc: ldur            x0, [fp, #-8]
    // 0x7d87e0: ldur            d0, [fp, #-0x98]
    // 0x7d87e4: d1 = 8.000000
    //     0x7d87e4: fmov            d1, #8.00000000
    // 0x7d87e8: fadd            d2, d0, d1
    // 0x7d87ec: stur            d2, [fp, #-0x40]
    // 0x7d87f0: ldr             x16, [fp, #0x18]
    // 0x7d87f4: r30 = Instance__DecorationSlot
    //     0x7d87f4: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d87f8: ldr             lr, [lr, #0x1f0]
    // 0x7d87fc: stp             lr, x16, [SP]
    // 0x7d8800: r0 = childForSlot()
    //     0x7d8800: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d8804: ldur            x1, [fp, #-8]
    // 0x7d8808: r2 = LoadClassIdInstr(r1)
    //     0x7d8808: ldur            x2, [x1, #-1]
    //     0x7d880c: ubfx            x2, x2, #0xc, #0x14
    // 0x7d8810: stp             x0, x1, [SP]
    // 0x7d8814: mov             x0, x2
    // 0x7d8818: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d8818: sub             lr, x0, #0xfb
    //     0x7d881c: ldr             lr, [x21, lr, lsl #3]
    //     0x7d8820: blr             lr
    // 0x7d8824: cmp             w0, NULL
    // 0x7d8828: b.eq            #0x7d8d34
    // 0x7d882c: LoadField: d0 = r0->field_7
    //     0x7d882c: ldur            d0, [x0, #7]
    // 0x7d8830: ldur            d1, [fp, #-0x40]
    // 0x7d8834: fadd            d2, d1, d0
    // 0x7d8838: stur            d2, [fp, #-0x58]
    // 0x7d883c: ldr             x16, [fp, #0x18]
    // 0x7d8840: r30 = Instance__DecorationSlot
    //     0x7d8840: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x7d8844: ldr             lr, [lr, #0x1f0]
    // 0x7d8848: stp             lr, x16, [SP]
    // 0x7d884c: r0 = childForSlot()
    //     0x7d884c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d8850: cmp             w0, NULL
    // 0x7d8854: b.eq            #0x7d8d38
    // 0x7d8858: str             x0, [SP]
    // 0x7d885c: r0 = size()
    //     0x7d885c: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d8860: LoadField: d0 = r0->field_f
    //     0x7d8860: ldur            d0, [x0, #0xf]
    // 0x7d8864: d1 = 8.000000
    //     0x7d8864: fmov            d1, #8.00000000
    // 0x7d8868: fadd            d2, d0, d1
    // 0x7d886c: mov             v0.16b, v2.16b
    // 0x7d8870: ldur            d2, [fp, #-0x58]
    // 0x7d8874: b               #0x7d8884
    // 0x7d8878: d1 = 8.000000
    //     0x7d8878: fmov            d1, #8.00000000
    // 0x7d887c: d2 = 0.000000
    //     0x7d887c: eor             v2.16b, v2.16b, v2.16b
    // 0x7d8880: d0 = 0.000000
    //     0x7d8880: eor             v0.16b, v0.16b, v0.16b
    // 0x7d8884: ldur            x0, [fp, #-0x18]
    // 0x7d8888: stur            d2, [fp, #-0x58]
    // 0x7d888c: stur            d0, [fp, #-0x60]
    // 0x7d8890: tbnz            w0, #4, #0x7d88f4
    // 0x7d8894: ldur            x0, [fp, #-8]
    // 0x7d8898: ldur            d3, [fp, #-0x98]
    // 0x7d889c: fadd            d4, d3, d1
    // 0x7d88a0: stur            d4, [fp, #-0x40]
    // 0x7d88a4: ldr             x16, [fp, #0x18]
    // 0x7d88a8: r30 = Instance__DecorationSlot
    //     0x7d88a8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x7d88ac: ldr             lr, [lr, #0x1e8]
    // 0x7d88b0: stp             lr, x16, [SP]
    // 0x7d88b4: r0 = childForSlot()
    //     0x7d88b4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x7d88b8: ldur            x1, [fp, #-8]
    // 0x7d88bc: r2 = LoadClassIdInstr(r1)
    //     0x7d88bc: ldur            x2, [x1, #-1]
    //     0x7d88c0: ubfx            x2, x2, #0xc, #0x14
    // 0x7d88c4: stp             x0, x1, [SP]
    // 0x7d88c8: mov             x0, x2
    // 0x7d88cc: r0 = GDT[cid_x0 + -0xfb]()
    //     0x7d88cc: sub             lr, x0, #0xfb
    //     0x7d88d0: ldr             lr, [x21, lr, lsl #3]
    //     0x7d88d4: blr             lr
    // 0x7d88d8: cmp             w0, NULL
    // 0x7d88dc: b.eq            #0x7d8d3c
    // 0x7d88e0: LoadField: d0 = r0->field_7
    //     0x7d88e0: ldur            d0, [x0, #7]
    // 0x7d88e4: ldur            d1, [fp, #-0x40]
    // 0x7d88e8: fadd            d2, d1, d0
    // 0x7d88ec: ldur            d1, [fp, #-0x50]
    // 0x7d88f0: b               #0x7d88fc
    // 0x7d88f4: d2 = 0.000000
    //     0x7d88f4: eor             v2.16b, v2.16b, v2.16b
    // 0x7d88f8: d1 = 0.000000
    //     0x7d88f8: eor             v1.16b, v1.16b, v1.16b
    // 0x7d88fc: ldur            d0, [fp, #-0x58]
    // 0x7d8900: fcmp            d0, d2
    // 0x7d8904: b.vs            #0x7d8918
    // 0x7d8908: b.le            #0x7d8918
    // 0x7d890c: mov             v2.16b, v0.16b
    // 0x7d8910: d3 = 0.000000
    //     0x7d8910: eor             v3.16b, v3.16b, v3.16b
    // 0x7d8914: b               #0x7d8954
    // 0x7d8918: fcmp            d0, d2
    // 0x7d891c: b.vs            #0x7d892c
    // 0x7d8920: b.ge            #0x7d892c
    // 0x7d8924: d3 = 0.000000
    //     0x7d8924: eor             v3.16b, v3.16b, v3.16b
    // 0x7d8928: b               #0x7d8954
    // 0x7d892c: d3 = 0.000000
    //     0x7d892c: eor             v3.16b, v3.16b, v3.16b
    // 0x7d8930: fcmp            d0, d3
    // 0x7d8934: b.vs            #0x7d8948
    // 0x7d8938: b.ne            #0x7d8948
    // 0x7d893c: fadd            d4, d0, d2
    // 0x7d8940: mov             v2.16b, v4.16b
    // 0x7d8944: b               #0x7d8954
    // 0x7d8948: fcmp            d2, d2
    // 0x7d894c: b.vs            #0x7d8954
    // 0x7d8950: mov             v2.16b, v0.16b
    // 0x7d8954: ldur            d0, [fp, #-0x60]
    // 0x7d8958: stur            d2, [fp, #-0x50]
    // 0x7d895c: fcmp            d0, d1
    // 0x7d8960: b.vs            #0x7d8970
    // 0x7d8964: b.le            #0x7d8970
    // 0x7d8968: mov             v4.16b, v0.16b
    // 0x7d896c: b               #0x7d89b0
    // 0x7d8970: fcmp            d0, d1
    // 0x7d8974: b.vs            #0x7d8984
    // 0x7d8978: b.ge            #0x7d8984
    // 0x7d897c: mov             v4.16b, v1.16b
    // 0x7d8980: b               #0x7d89b0
    // 0x7d8984: fcmp            d0, d3
    // 0x7d8988: b.vs            #0x7d899c
    // 0x7d898c: b.ne            #0x7d899c
    // 0x7d8990: fadd            d3, d0, d1
    // 0x7d8994: mov             v4.16b, v3.16b
    // 0x7d8998: b               #0x7d89b0
    // 0x7d899c: fcmp            d1, d1
    // 0x7d89a0: b.vc            #0x7d89ac
    // 0x7d89a4: mov             v4.16b, v1.16b
    // 0x7d89a8: b               #0x7d89b0
    // 0x7d89ac: mov             v4.16b, v0.16b
    // 0x7d89b0: ldur            x0, [fp, #-8]
    // 0x7d89b4: ldur            d3, [fp, #-0x48]
    // 0x7d89b8: ldur            d1, [fp, #-0x38]
    // 0x7d89bc: ldur            d0, [fp, #-0x98]
    // 0x7d89c0: stur            d4, [fp, #-0x40]
    // 0x7d89c4: r0 = _RenderDecorationLayout()
    //     0x7d89c4: bl              #0x7d8d40  ; Allocate_RenderDecorationLayoutStub -> _RenderDecorationLayout (size=0x34)
    // 0x7d89c8: ldur            x1, [fp, #-8]
    // 0x7d89cc: StoreField: r0->field_7 = r1
    //     0x7d89cc: stur            w1, [x0, #7]
    // 0x7d89d0: ldur            d0, [fp, #-0x48]
    // 0x7d89d4: StoreField: r0->field_b = d0
    //     0x7d89d4: stur            d0, [x0, #0xb]
    // 0x7d89d8: ldur            d0, [fp, #-0x38]
    // 0x7d89dc: StoreField: r0->field_13 = d0
    //     0x7d89dc: stur            d0, [x0, #0x13]
    // 0x7d89e0: ldur            d0, [fp, #-0x50]
    // 0x7d89e4: StoreField: r0->field_1b = d0
    //     0x7d89e4: stur            d0, [x0, #0x1b]
    // 0x7d89e8: ldur            d0, [fp, #-0x98]
    // 0x7d89ec: StoreField: r0->field_23 = d0
    //     0x7d89ec: stur            d0, [x0, #0x23]
    // 0x7d89f0: ldur            d0, [fp, #-0x40]
    // 0x7d89f4: StoreField: r0->field_2b = d0
    //     0x7d89f4: stur            d0, [x0, #0x2b]
    // 0x7d89f8: LeaveFrame
    //     0x7d89f8: mov             SP, fp
    //     0x7d89fc: ldp             fp, lr, [SP], #0x10
    // 0x7d8a00: ret
    //     0x7d8a00: ret             
    // 0x7d8a04: r0 = StateError()
    //     0x7d8a04: bl              #0x4c3868  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x7d8a08: r5 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x7d8a08: ldr             x5, [PP, #0x5dc8]  ; [pp+0x5dc8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x7d8a0c: StoreField: r0->field_b = r5
    //     0x7d8a0c: stur            w5, [x0, #0xb]
    // 0x7d8a10: r0 = Throw()
    //     0x7d8a10: bl              #0xc5d2b8  ; ThrowStub
    // 0x7d8a14: brk             #0
    // 0x7d8a18: r0 = StateError()
    //     0x7d8a18: bl              #0x4c3868  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0x7d8a1c: mov             x1, x0
    // 0x7d8a20: r0 = "A RenderObject does not have any constraints before it has been laid out."
    //     0x7d8a20: ldr             x0, [PP, #0x5dc8]  ; [pp+0x5dc8] "A RenderObject does not have any constraints before it has been laid out."
    // 0x7d8a24: StoreField: r1->field_b = r0
    //     0x7d8a24: stur            w0, [x1, #0xb]
    // 0x7d8a28: mov             x0, x1
    // 0x7d8a2c: r0 = Throw()
    //     0x7d8a2c: bl              #0xc5d2b8  ; ThrowStub
    // 0x7d8a30: brk             #0
    // 0x7d8a34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d8a34: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d8a38: b               #0x7d6bec
    // 0x7d8a3c: SaveReg d0
    //     0x7d8a3c: str             q0, [SP, #-0x10]!
    // 0x7d8a40: r0 = AllocateDouble()
    //     0x7d8a40: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8a44: RestoreReg d0
    //     0x7d8a44: ldr             q0, [SP], #0x10
    // 0x7d8a48: b               #0x7d6c78
    // 0x7d8a4c: SaveReg d2
    //     0x7d8a4c: str             q2, [SP, #-0x10]!
    // 0x7d8a50: r0 = AllocateDouble()
    //     0x7d8a50: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8a54: RestoreReg d2
    //     0x7d8a54: ldr             q2, [SP], #0x10
    // 0x7d8a58: b               #0x7d6ce8
    // 0x7d8a5c: SaveReg d0
    //     0x7d8a5c: str             q0, [SP, #-0x10]!
    // 0x7d8a60: r0 = AllocateDouble()
    //     0x7d8a60: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8a64: RestoreReg d0
    //     0x7d8a64: ldr             q0, [SP], #0x10
    // 0x7d8a68: b               #0x7d6d68
    // 0x7d8a6c: SaveReg d0
    //     0x7d8a6c: str             q0, [SP, #-0x10]!
    // 0x7d8a70: r0 = AllocateDouble()
    //     0x7d8a70: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8a74: RestoreReg d0
    //     0x7d8a74: ldr             q0, [SP], #0x10
    // 0x7d8a78: b               #0x7d6de4
    // 0x7d8a7c: stp             q1, q2, [SP, #-0x20]!
    // 0x7d8a80: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8a84: r0 = AllocateDouble()
    //     0x7d8a84: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8a88: mov             x2, x0
    // 0x7d8a8c: ldp             x0, x1, [SP], #0x10
    // 0x7d8a90: ldp             q1, q2, [SP], #0x20
    // 0x7d8a94: b               #0x7d6e58
    // 0x7d8a98: SaveReg d0
    //     0x7d8a98: str             q0, [SP, #-0x10]!
    // 0x7d8a9c: r0 = AllocateDouble()
    //     0x7d8a9c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8aa0: RestoreReg d0
    //     0x7d8aa0: ldr             q0, [SP], #0x10
    // 0x7d8aa4: b               #0x7d6ed4
    // 0x7d8aa8: SaveReg d0
    //     0x7d8aa8: str             q0, [SP, #-0x10]!
    // 0x7d8aac: r0 = AllocateDouble()
    //     0x7d8aac: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8ab0: RestoreReg d0
    //     0x7d8ab0: ldr             q0, [SP], #0x10
    // 0x7d8ab4: b               #0x7d6f50
    // 0x7d8ab8: SaveReg d0
    //     0x7d8ab8: str             q0, [SP, #-0x10]!
    // 0x7d8abc: SaveReg r0
    //     0x7d8abc: str             x0, [SP, #-8]!
    // 0x7d8ac0: r0 = AllocateDouble()
    //     0x7d8ac0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8ac4: mov             x1, x0
    // 0x7d8ac8: RestoreReg r0
    //     0x7d8ac8: ldr             x0, [SP], #8
    // 0x7d8acc: RestoreReg d0
    //     0x7d8acc: ldr             q0, [SP], #0x10
    // 0x7d8ad0: b               #0x7d7074
    // 0x7d8ad4: SaveReg d0
    //     0x7d8ad4: str             q0, [SP, #-0x10]!
    // 0x7d8ad8: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8adc: r0 = AllocateDouble()
    //     0x7d8adc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8ae0: mov             x2, x0
    // 0x7d8ae4: ldp             x0, x1, [SP], #0x10
    // 0x7d8ae8: RestoreReg d0
    //     0x7d8ae8: ldr             q0, [SP], #0x10
    // 0x7d8aec: b               #0x7d70a0
    // 0x7d8af0: SaveReg d0
    //     0x7d8af0: str             q0, [SP, #-0x10]!
    // 0x7d8af4: SaveReg r0
    //     0x7d8af4: str             x0, [SP, #-8]!
    // 0x7d8af8: r0 = AllocateDouble()
    //     0x7d8af8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8afc: mov             x1, x0
    // 0x7d8b00: RestoreReg r0
    //     0x7d8b00: ldr             x0, [SP], #8
    // 0x7d8b04: RestoreReg d0
    //     0x7d8b04: ldr             q0, [SP], #0x10
    // 0x7d8b08: b               #0x7d71f4
    // 0x7d8b0c: stp             q0, q1, [SP, #-0x20]!
    // 0x7d8b10: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8b14: r0 = AllocateDouble()
    //     0x7d8b14: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8b18: mov             x2, x0
    // 0x7d8b1c: ldp             x0, x1, [SP], #0x10
    // 0x7d8b20: ldp             q0, q1, [SP], #0x20
    // 0x7d8b24: b               #0x7d7224
    // 0x7d8b28: stp             q1, q2, [SP, #-0x20]!
    // 0x7d8b2c: SaveReg d0
    //     0x7d8b2c: str             q0, [SP, #-0x10]!
    // 0x7d8b30: SaveReg r0
    //     0x7d8b30: str             x0, [SP, #-8]!
    // 0x7d8b34: r0 = AllocateDouble()
    //     0x7d8b34: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8b38: mov             x1, x0
    // 0x7d8b3c: RestoreReg r0
    //     0x7d8b3c: ldr             x0, [SP], #8
    // 0x7d8b40: RestoreReg d0
    //     0x7d8b40: ldr             q0, [SP], #0x10
    // 0x7d8b44: ldp             q1, q2, [SP], #0x20
    // 0x7d8b48: b               #0x7d72c8
    // 0x7d8b4c: stp             q0, q1, [SP, #-0x20]!
    // 0x7d8b50: SaveReg r0
    //     0x7d8b50: str             x0, [SP, #-8]!
    // 0x7d8b54: r0 = AllocateDouble()
    //     0x7d8b54: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8b58: mov             x1, x0
    // 0x7d8b5c: RestoreReg r0
    //     0x7d8b5c: ldr             x0, [SP], #8
    // 0x7d8b60: ldp             q0, q1, [SP], #0x20
    // 0x7d8b64: b               #0x7d735c
    // 0x7d8b68: SaveReg d1
    //     0x7d8b68: str             q1, [SP, #-0x10]!
    // 0x7d8b6c: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8b70: r0 = AllocateDouble()
    //     0x7d8b70: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8b74: mov             x2, x0
    // 0x7d8b78: ldp             x0, x1, [SP], #0x10
    // 0x7d8b7c: RestoreReg d1
    //     0x7d8b7c: ldr             q1, [SP], #0x10
    // 0x7d8b80: b               #0x7d7384
    // 0x7d8b84: SaveReg d2
    //     0x7d8b84: str             q2, [SP, #-0x10]!
    // 0x7d8b88: SaveReg r1
    //     0x7d8b88: str             x1, [SP, #-8]!
    // 0x7d8b8c: r0 = AllocateDouble()
    //     0x7d8b8c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8b90: RestoreReg r1
    //     0x7d8b90: ldr             x1, [SP], #8
    // 0x7d8b94: RestoreReg d2
    //     0x7d8b94: ldr             q2, [SP], #0x10
    // 0x7d8b98: b               #0x7d754c
    // 0x7d8b9c: SaveReg d0
    //     0x7d8b9c: str             q0, [SP, #-0x10]!
    // 0x7d8ba0: r0 = AllocateDouble()
    //     0x7d8ba0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8ba4: RestoreReg d0
    //     0x7d8ba4: ldr             q0, [SP], #0x10
    // 0x7d8ba8: b               #0x7d759c
    // 0x7d8bac: SaveReg d0
    //     0x7d8bac: str             q0, [SP, #-0x10]!
    // 0x7d8bb0: SaveReg r0
    //     0x7d8bb0: str             x0, [SP, #-8]!
    // 0x7d8bb4: r0 = AllocateDouble()
    //     0x7d8bb4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8bb8: mov             x1, x0
    // 0x7d8bbc: RestoreReg r0
    //     0x7d8bbc: ldr             x0, [SP], #8
    // 0x7d8bc0: RestoreReg d0
    //     0x7d8bc0: ldr             q0, [SP], #0x10
    // 0x7d8bc4: b               #0x7d760c
    // 0x7d8bc8: SaveReg d0
    //     0x7d8bc8: str             q0, [SP, #-0x10]!
    // 0x7d8bcc: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8bd0: r0 = AllocateDouble()
    //     0x7d8bd0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8bd4: mov             x2, x0
    // 0x7d8bd8: ldp             x0, x1, [SP], #0x10
    // 0x7d8bdc: RestoreReg d0
    //     0x7d8bdc: ldr             q0, [SP], #0x10
    // 0x7d8be0: b               #0x7d7634
    // 0x7d8be4: SaveReg d0
    //     0x7d8be4: str             q0, [SP, #-0x10]!
    // 0x7d8be8: r0 = AllocateDouble()
    //     0x7d8be8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8bec: RestoreReg d0
    //     0x7d8bec: ldr             q0, [SP], #0x10
    // 0x7d8bf0: b               #0x7d7684
    // 0x7d8bf4: SaveReg d0
    //     0x7d8bf4: str             q0, [SP, #-0x10]!
    // 0x7d8bf8: r0 = AllocateDouble()
    //     0x7d8bf8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8bfc: RestoreReg d0
    //     0x7d8bfc: ldr             q0, [SP], #0x10
    // 0x7d8c00: b               #0x7d7700
    // 0x7d8c04: stp             q0, q1, [SP, #-0x20]!
    // 0x7d8c08: r0 = AllocateDouble()
    //     0x7d8c08: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c0c: ldp             q0, q1, [SP], #0x20
    // 0x7d8c10: b               #0x7d77f8
    // 0x7d8c14: SaveReg d0
    //     0x7d8c14: str             q0, [SP, #-0x10]!
    // 0x7d8c18: r0 = AllocateDouble()
    //     0x7d8c18: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c1c: RestoreReg d0
    //     0x7d8c1c: ldr             q0, [SP], #0x10
    // 0x7d8c20: b               #0x7d7848
    // 0x7d8c24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8c24: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8c28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8c28: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8c2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8c2c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8c30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8c30: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8c34: SaveReg d0
    //     0x7d8c34: str             q0, [SP, #-0x10]!
    // 0x7d8c38: SaveReg r0
    //     0x7d8c38: str             x0, [SP, #-8]!
    // 0x7d8c3c: r0 = AllocateDouble()
    //     0x7d8c3c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c40: mov             x1, x0
    // 0x7d8c44: RestoreReg r0
    //     0x7d8c44: ldr             x0, [SP], #8
    // 0x7d8c48: RestoreReg d0
    //     0x7d8c48: ldr             q0, [SP], #0x10
    // 0x7d8c4c: b               #0x7d7c04
    // 0x7d8c50: SaveReg d0
    //     0x7d8c50: str             q0, [SP, #-0x10]!
    // 0x7d8c54: stp             x0, x1, [SP, #-0x10]!
    // 0x7d8c58: r0 = AllocateDouble()
    //     0x7d8c58: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c5c: mov             x2, x0
    // 0x7d8c60: ldp             x0, x1, [SP], #0x10
    // 0x7d8c64: RestoreReg d0
    //     0x7d8c64: ldr             q0, [SP], #0x10
    // 0x7d8c68: b               #0x7d7c2c
    // 0x7d8c6c: SaveReg d0
    //     0x7d8c6c: str             q0, [SP, #-0x10]!
    // 0x7d8c70: r0 = AllocateDouble()
    //     0x7d8c70: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c74: RestoreReg d0
    //     0x7d8c74: ldr             q0, [SP], #0x10
    // 0x7d8c78: b               #0x7d7c78
    // 0x7d8c7c: SaveReg d0
    //     0x7d8c7c: str             q0, [SP, #-0x10]!
    // 0x7d8c80: r0 = AllocateDouble()
    //     0x7d8c80: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c84: RestoreReg d0
    //     0x7d8c84: ldr             q0, [SP], #0x10
    // 0x7d8c88: b               #0x7d7ce4
    // 0x7d8c8c: SaveReg d0
    //     0x7d8c8c: str             q0, [SP, #-0x10]!
    // 0x7d8c90: r0 = AllocateDouble()
    //     0x7d8c90: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8c94: RestoreReg d0
    //     0x7d8c94: ldr             q0, [SP], #0x10
    // 0x7d8c98: b               #0x7d7d54
    // 0x7d8c9c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8c9c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8ca0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8ca0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8ca4: SaveReg d0
    //     0x7d8ca4: str             q0, [SP, #-0x10]!
    // 0x7d8ca8: r0 = AllocateDouble()
    //     0x7d8ca8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8cac: RestoreReg d0
    //     0x7d8cac: ldr             q0, [SP], #0x10
    // 0x7d8cb0: b               #0x7d7f14
    // 0x7d8cb4: SaveReg d0
    //     0x7d8cb4: str             q0, [SP, #-0x10]!
    // 0x7d8cb8: r0 = AllocateDouble()
    //     0x7d8cb8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8cbc: RestoreReg d0
    //     0x7d8cbc: ldr             q0, [SP], #0x10
    // 0x7d8cc0: b               #0x7d7f84
    // 0x7d8cc4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8cc4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8cc8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8cc8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8ccc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8ccc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8cd0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8cd0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8cd4: SaveReg d0
    //     0x7d8cd4: str             q0, [SP, #-0x10]!
    // 0x7d8cd8: r0 = AllocateDouble()
    //     0x7d8cd8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8cdc: RestoreReg d0
    //     0x7d8cdc: ldr             q0, [SP], #0x10
    // 0x7d8ce0: b               #0x7d82b8
    // 0x7d8ce4: SaveReg d0
    //     0x7d8ce4: str             q0, [SP, #-0x10]!
    // 0x7d8ce8: r0 = AllocateDouble()
    //     0x7d8ce8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8cec: RestoreReg d0
    //     0x7d8cec: ldr             q0, [SP], #0x10
    // 0x7d8cf0: b               #0x7d8328
    // 0x7d8cf4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x7d8cf4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x7d8cf8: stp             q8, q10, [SP, #-0x20]!
    // 0x7d8cfc: stp             q6, q7, [SP, #-0x20]!
    // 0x7d8d00: stp             q4, q5, [SP, #-0x20]!
    // 0x7d8d04: stp             q2, q3, [SP, #-0x20]!
    // 0x7d8d08: stp             q0, q1, [SP, #-0x20]!
    // 0x7d8d0c: SaveReg r0
    //     0x7d8d0c: str             x0, [SP, #-8]!
    // 0x7d8d10: r0 = AllocateDouble()
    //     0x7d8d10: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d8d14: mov             x1, x0
    // 0x7d8d18: RestoreReg r0
    //     0x7d8d18: ldr             x0, [SP], #8
    // 0x7d8d1c: ldp             q0, q1, [SP], #0x20
    // 0x7d8d20: ldp             q2, q3, [SP], #0x20
    // 0x7d8d24: ldp             q4, q5, [SP], #0x20
    // 0x7d8d28: ldp             q6, q7, [SP], #0x20
    // 0x7d8d2c: ldp             q8, q10, [SP], #0x20
    // 0x7d8d30: b               #0x7d8574
    // 0x7d8d34: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8d34: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8d38: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8d38: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d8d3c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8d3c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _layoutLineBox(/* No info */) {
    // ** addr: 0x7d8d4c, size: 0x9c
    // 0x7d8d4c: EnterFrame
    //     0x7d8d4c: stp             fp, lr, [SP, #-0x10]!
    //     0x7d8d50: mov             fp, SP
    // 0x7d8d54: AllocStack(0x18)
    //     0x7d8d54: sub             SP, SP, #0x18
    // 0x7d8d58: CheckStackOverflow
    //     0x7d8d58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d8d5c: cmp             SP, x16
    //     0x7d8d60: b.ls            #0x7d8ddc
    // 0x7d8d64: ldr             x1, [fp, #0x18]
    // 0x7d8d68: cmp             w1, NULL
    // 0x7d8d6c: b.ne            #0x7d8d80
    // 0x7d8d70: d0 = 0.000000
    //     0x7d8d70: eor             v0.16b, v0.16b, v0.16b
    // 0x7d8d74: LeaveFrame
    //     0x7d8d74: mov             SP, fp
    //     0x7d8d78: ldp             fp, lr, [SP], #0x10
    // 0x7d8d7c: ret
    //     0x7d8d7c: ret             
    // 0x7d8d80: r0 = LoadClassIdInstr(r1)
    //     0x7d8d80: ldur            x0, [x1, #-1]
    //     0x7d8d84: ubfx            x0, x0, #0xc, #0x14
    // 0x7d8d88: ldr             x16, [fp, #0x10]
    // 0x7d8d8c: stp             x16, x1, [SP, #8]
    // 0x7d8d90: r16 = true
    //     0x7d8d90: add             x16, NULL, #0x20  ; true
    // 0x7d8d94: str             x16, [SP]
    // 0x7d8d98: r4 = const [0, 0x3, 0x3, 0x2, parentUsesSize, 0x2, null]
    //     0x7d8d98: add             x4, PP, #0xa, lsl #12  ; [pp+0xa1e8] List(7) [0, 0x3, 0x3, 0x2, "parentUsesSize", 0x2, Null]
    //     0x7d8d9c: ldr             x4, [x4, #0x1e8]
    // 0x7d8da0: r0 = GDT[cid_x0 + 0xb275]()
    //     0x7d8da0: movz            x17, #0xb275
    //     0x7d8da4: add             lr, x0, x17
    //     0x7d8da8: ldr             lr, [x21, lr, lsl #3]
    //     0x7d8dac: blr             lr
    // 0x7d8db0: ldr             x16, [fp, #0x18]
    // 0x7d8db4: r30 = Instance_TextBaseline
    //     0x7d8db4: add             lr, PP, #0x32, lsl #12  ; [pp+0x32fa8] Obj!TextBaseline@c46e41
    //     0x7d8db8: ldr             lr, [lr, #0xfa8]
    // 0x7d8dbc: stp             lr, x16, [SP]
    // 0x7d8dc0: r0 = getDistanceToBaseline()
    //     0x7d8dc0: bl              #0x7d8de8  ; [package:flutter/src/rendering/box.dart] RenderBox::getDistanceToBaseline
    // 0x7d8dc4: cmp             w0, NULL
    // 0x7d8dc8: b.eq            #0x7d8de4
    // 0x7d8dcc: LoadField: d0 = r0->field_7
    //     0x7d8dcc: ldur            d0, [x0, #7]
    // 0x7d8dd0: LeaveFrame
    //     0x7d8dd0: mov             SP, fp
    //     0x7d8dd4: ldp             fp, lr, [SP], #0x10
    // 0x7d8dd8: ret
    //     0x7d8dd8: ret             
    // 0x7d8ddc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d8ddc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d8de0: b               #0x7d8d64
    // 0x7d8de4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d8de4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] double baselineLayout(dynamic, RenderBox, double) {
    // ** addr: 0x7d8e80, size: 0x1c0
    // 0x7d8e80: EnterFrame
    //     0x7d8e80: stp             fp, lr, [SP, #-0x10]!
    //     0x7d8e84: mov             fp, SP
    // 0x7d8e88: AllocStack(0x38)
    //     0x7d8e88: sub             SP, SP, #0x38
    // 0x7d8e8c: SetupParameters()
    //     0x7d8e8c: ldr             x0, [fp, #0x20]
    //     0x7d8e90: ldur            w3, [x0, #0x17]
    //     0x7d8e94: add             x3, x3, HEAP, lsl #32
    //     0x7d8e98: stur            x3, [fp, #-0x10]
    // 0x7d8e9c: CheckStackOverflow
    //     0x7d8e9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d8ea0: cmp             SP, x16
    //     0x7d8ea4: b.ls            #0x7d901c
    // 0x7d8ea8: ldr             x4, [fp, #0x18]
    // 0x7d8eac: LoadField: r5 = r4->field_7
    //     0x7d8eac: ldur            w5, [x4, #7]
    // 0x7d8eb0: DecompressPointer r5
    //     0x7d8eb0: add             x5, x5, HEAP, lsl #32
    // 0x7d8eb4: stur            x5, [fp, #-8]
    // 0x7d8eb8: cmp             w5, NULL
    // 0x7d8ebc: b.eq            #0x7d9024
    // 0x7d8ec0: mov             x0, x5
    // 0x7d8ec4: r2 = Null
    //     0x7d8ec4: mov             x2, NULL
    // 0x7d8ec8: r1 = Null
    //     0x7d8ec8: mov             x1, NULL
    // 0x7d8ecc: r4 = LoadClassIdInstr(r0)
    //     0x7d8ecc: ldur            x4, [x0, #-1]
    //     0x7d8ed0: ubfx            x4, x4, #0xc, #0x14
    // 0x7d8ed4: sub             x4, x4, #0x892
    // 0x7d8ed8: cmp             x4, #0xd
    // 0x7d8edc: b.ls            #0x7d8ef4
    // 0x7d8ee0: r8 = BoxParentData
    //     0x7d8ee0: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x7d8ee4: ldr             x8, [x8, #0x318]
    // 0x7d8ee8: r3 = Null
    //     0x7d8ee8: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d318] Null
    //     0x7d8eec: ldr             x3, [x3, #0x318]
    // 0x7d8ef0: r0 = DefaultTypeTest()
    //     0x7d8ef0: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x7d8ef4: ldur            x0, [fp, #-0x10]
    // 0x7d8ef8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x7d8ef8: ldur            w1, [x0, #0x17]
    // 0x7d8efc: DecompressPointer r1
    //     0x7d8efc: add             x1, x1, HEAP, lsl #32
    // 0x7d8f00: r16 = Sentinel
    //     0x7d8f00: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x7d8f04: cmp             w1, w16
    // 0x7d8f08: b.ne            #0x7d8f1c
    // 0x7d8f0c: r16 = "baseline"
    //     0x7d8f0c: add             x16, PP, #0x46, lsl #12  ; [pp+0x46c40] "baseline"
    //     0x7d8f10: ldr             x16, [x16, #0xc40]
    // 0x7d8f14: str             x16, [SP]
    // 0x7d8f18: r0 = _throwLocalNotInitialized()
    //     0x7d8f18: bl              #0x4f0518  ; [dart:_internal] LateError::_throwLocalNotInitialized
    // 0x7d8f1c: ldur            x0, [fp, #-0x10]
    // 0x7d8f20: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x7d8f20: ldur            w1, [x0, #0x17]
    // 0x7d8f24: DecompressPointer r1
    //     0x7d8f24: add             x1, x1, HEAP, lsl #32
    // 0x7d8f28: stur            x1, [fp, #-0x18]
    // 0x7d8f2c: LoadField: r2 = r0->field_f
    //     0x7d8f2c: ldur            w2, [x0, #0xf]
    // 0x7d8f30: DecompressPointer r2
    //     0x7d8f30: add             x2, x2, HEAP, lsl #32
    // 0x7d8f34: LoadField: r0 = r2->field_7
    //     0x7d8f34: ldur            w0, [x2, #7]
    // 0x7d8f38: DecompressPointer r0
    //     0x7d8f38: add             x0, x0, HEAP, lsl #32
    // 0x7d8f3c: stur            x0, [fp, #-0x10]
    // 0x7d8f40: ldr             x16, [fp, #0x18]
    // 0x7d8f44: stp             x16, x0, [SP]
    // 0x7d8f48: r0 = _getValueOrData()
    //     0x7d8f48: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x7d8f4c: mov             x1, x0
    // 0x7d8f50: ldur            x0, [fp, #-0x10]
    // 0x7d8f54: LoadField: r2 = r0->field_f
    //     0x7d8f54: ldur            w2, [x0, #0xf]
    // 0x7d8f58: DecompressPointer r2
    //     0x7d8f58: add             x2, x2, HEAP, lsl #32
    // 0x7d8f5c: cmp             w2, w1
    // 0x7d8f60: b.ne            #0x7d8f6c
    // 0x7d8f64: r3 = Null
    //     0x7d8f64: mov             x3, NULL
    // 0x7d8f68: b               #0x7d8f70
    // 0x7d8f6c: mov             x3, x1
    // 0x7d8f70: ldr             x2, [fp, #0x10]
    // 0x7d8f74: ldur            x0, [fp, #-0x18]
    // 0x7d8f78: ldur            x1, [fp, #-8]
    // 0x7d8f7c: cmp             w3, NULL
    // 0x7d8f80: b.eq            #0x7d9028
    // 0x7d8f84: cmp             w0, NULL
    // 0x7d8f88: b.eq            #0x7d902c
    // 0x7d8f8c: LoadField: d0 = r3->field_7
    //     0x7d8f8c: ldur            d0, [x3, #7]
    // 0x7d8f90: LoadField: d1 = r0->field_7
    //     0x7d8f90: ldur            d1, [x0, #7]
    // 0x7d8f94: fsub            d2, d1, d0
    // 0x7d8f98: stur            d2, [fp, #-0x28]
    // 0x7d8f9c: LoadField: d0 = r2->field_7
    //     0x7d8f9c: ldur            d0, [x2, #7]
    // 0x7d8fa0: stur            d0, [fp, #-0x20]
    // 0x7d8fa4: r0 = Offset()
    //     0x7d8fa4: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x7d8fa8: ldur            d0, [fp, #-0x20]
    // 0x7d8fac: StoreField: r0->field_7 = d0
    //     0x7d8fac: stur            d0, [x0, #7]
    // 0x7d8fb0: ldur            d0, [fp, #-0x28]
    // 0x7d8fb4: StoreField: r0->field_f = d0
    //     0x7d8fb4: stur            d0, [x0, #0xf]
    // 0x7d8fb8: ldur            x1, [fp, #-8]
    // 0x7d8fbc: StoreField: r1->field_7 = r0
    //     0x7d8fbc: stur            w0, [x1, #7]
    //     0x7d8fc0: ldurb           w16, [x1, #-1]
    //     0x7d8fc4: ldurb           w17, [x0, #-1]
    //     0x7d8fc8: and             x16, x17, x16, lsr #2
    //     0x7d8fcc: tst             x16, HEAP, lsr #32
    //     0x7d8fd0: b.eq            #0x7d8fd8
    //     0x7d8fd4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7d8fd8: ldr             x16, [fp, #0x18]
    // 0x7d8fdc: str             x16, [SP]
    // 0x7d8fe0: r0 = size()
    //     0x7d8fe0: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d8fe4: LoadField: d0 = r0->field_7
    //     0x7d8fe4: ldur            d0, [x0, #7]
    // 0x7d8fe8: r0 = inline_Allocate_Double()
    //     0x7d8fe8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d8fec: add             x0, x0, #0x10
    //     0x7d8ff0: cmp             x1, x0
    //     0x7d8ff4: b.ls            #0x7d9030
    //     0x7d8ff8: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d8ffc: sub             x0, x0, #0xf
    //     0x7d9000: movz            x1, #0xd148
    //     0x7d9004: movk            x1, #0x3, lsl #16
    //     0x7d9008: stur            x1, [x0, #-1]
    // 0x7d900c: StoreField: r0->field_7 = d0
    //     0x7d900c: stur            d0, [x0, #7]
    // 0x7d9010: LeaveFrame
    //     0x7d9010: mov             SP, fp
    //     0x7d9014: ldp             fp, lr, [SP], #0x10
    // 0x7d9018: ret
    //     0x7d9018: ret             
    // 0x7d901c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d901c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d9020: b               #0x7d8ea8
    // 0x7d9024: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d9024: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d9028: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d9028: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d902c: r0 = NullErrorSharedWithoutFPURegs()
    //     0x7d902c: bl              #0xc5f5e0  ; NullErrorSharedWithoutFPURegsStub
    // 0x7d9030: SaveReg d0
    //     0x7d9030: str             q0, [SP, #-0x10]!
    // 0x7d9034: r0 = AllocateDouble()
    //     0x7d9034: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d9038: RestoreReg d0
    //     0x7d9038: ldr             q0, [SP], #0x10
    // 0x7d903c: b               #0x7d900c
  }
  [closure] double centerLayout(dynamic, RenderBox, double) {
    // ** addr: 0x7d9040, size: 0x184
    // 0x7d9040: EnterFrame
    //     0x7d9040: stp             fp, lr, [SP, #-0x10]!
    //     0x7d9044: mov             fp, SP
    // 0x7d9048: AllocStack(0x30)
    //     0x7d9048: sub             SP, SP, #0x30
    // 0x7d904c: SetupParameters()
    //     0x7d904c: ldr             x0, [fp, #0x20]
    //     0x7d9050: ldur            w3, [x0, #0x17]
    //     0x7d9054: add             x3, x3, HEAP, lsl #32
    //     0x7d9058: stur            x3, [fp, #-0x10]
    // 0x7d905c: CheckStackOverflow
    //     0x7d905c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d9060: cmp             SP, x16
    //     0x7d9064: b.ls            #0x7d91a4
    // 0x7d9068: ldr             x4, [fp, #0x18]
    // 0x7d906c: LoadField: r5 = r4->field_7
    //     0x7d906c: ldur            w5, [x4, #7]
    // 0x7d9070: DecompressPointer r5
    //     0x7d9070: add             x5, x5, HEAP, lsl #32
    // 0x7d9074: stur            x5, [fp, #-8]
    // 0x7d9078: cmp             w5, NULL
    // 0x7d907c: b.eq            #0x7d91ac
    // 0x7d9080: mov             x0, x5
    // 0x7d9084: r2 = Null
    //     0x7d9084: mov             x2, NULL
    // 0x7d9088: r1 = Null
    //     0x7d9088: mov             x1, NULL
    // 0x7d908c: r4 = LoadClassIdInstr(r0)
    //     0x7d908c: ldur            x4, [x0, #-1]
    //     0x7d9090: ubfx            x4, x4, #0xc, #0x14
    // 0x7d9094: sub             x4, x4, #0x892
    // 0x7d9098: cmp             x4, #0xd
    // 0x7d909c: b.ls            #0x7d90b4
    // 0x7d90a0: r8 = BoxParentData
    //     0x7d90a0: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x7d90a4: ldr             x8, [x8, #0x318]
    // 0x7d90a8: r3 = Null
    //     0x7d90a8: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d328] Null
    //     0x7d90ac: ldr             x3, [x3, #0x328]
    // 0x7d90b0: r0 = DefaultTypeTest()
    //     0x7d90b0: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x7d90b4: ldur            x0, [fp, #-0x10]
    // 0x7d90b8: LoadField: r1 = r0->field_13
    //     0x7d90b8: ldur            w1, [x0, #0x13]
    // 0x7d90bc: DecompressPointer r1
    //     0x7d90bc: add             x1, x1, HEAP, lsl #32
    // 0x7d90c0: r16 = Sentinel
    //     0x7d90c0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x7d90c4: cmp             w1, w16
    // 0x7d90c8: b.ne            #0x7d90d8
    // 0x7d90cc: r16 = "height"
    //     0x7d90cc: ldr             x16, [PP, #0x5b48]  ; [pp+0x5b48] "height"
    // 0x7d90d0: str             x16, [SP]
    // 0x7d90d4: r0 = _throwLocalNotInitialized()
    //     0x7d90d4: bl              #0x4f0518  ; [dart:_internal] LateError::_throwLocalNotInitialized
    // 0x7d90d8: ldr             x2, [fp, #0x10]
    // 0x7d90dc: ldur            x0, [fp, #-0x10]
    // 0x7d90e0: ldur            x1, [fp, #-8]
    // 0x7d90e4: LoadField: r3 = r0->field_13
    //     0x7d90e4: ldur            w3, [x0, #0x13]
    // 0x7d90e8: DecompressPointer r3
    //     0x7d90e8: add             x3, x3, HEAP, lsl #32
    // 0x7d90ec: stur            x3, [fp, #-0x18]
    // 0x7d90f0: ldr             x16, [fp, #0x18]
    // 0x7d90f4: str             x16, [SP]
    // 0x7d90f8: r0 = size()
    //     0x7d90f8: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d90fc: LoadField: d0 = r0->field_f
    //     0x7d90fc: ldur            d0, [x0, #0xf]
    // 0x7d9100: ldur            x0, [fp, #-0x18]
    // 0x7d9104: cmp             w0, NULL
    // 0x7d9108: b.eq            #0x7d91b0
    // 0x7d910c: LoadField: d1 = r0->field_7
    //     0x7d910c: ldur            d1, [x0, #7]
    // 0x7d9110: fsub            d2, d1, d0
    // 0x7d9114: d0 = 2.000000
    //     0x7d9114: fmov            d0, #2.00000000
    // 0x7d9118: fdiv            d1, d2, d0
    // 0x7d911c: ldr             x0, [fp, #0x10]
    // 0x7d9120: stur            d1, [fp, #-0x28]
    // 0x7d9124: LoadField: d0 = r0->field_7
    //     0x7d9124: ldur            d0, [x0, #7]
    // 0x7d9128: stur            d0, [fp, #-0x20]
    // 0x7d912c: r0 = Offset()
    //     0x7d912c: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x7d9130: ldur            d0, [fp, #-0x20]
    // 0x7d9134: StoreField: r0->field_7 = d0
    //     0x7d9134: stur            d0, [x0, #7]
    // 0x7d9138: ldur            d0, [fp, #-0x28]
    // 0x7d913c: StoreField: r0->field_f = d0
    //     0x7d913c: stur            d0, [x0, #0xf]
    // 0x7d9140: ldur            x1, [fp, #-8]
    // 0x7d9144: StoreField: r1->field_7 = r0
    //     0x7d9144: stur            w0, [x1, #7]
    //     0x7d9148: ldurb           w16, [x1, #-1]
    //     0x7d914c: ldurb           w17, [x0, #-1]
    //     0x7d9150: and             x16, x17, x16, lsr #2
    //     0x7d9154: tst             x16, HEAP, lsr #32
    //     0x7d9158: b.eq            #0x7d9160
    //     0x7d915c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7d9160: ldr             x16, [fp, #0x18]
    // 0x7d9164: str             x16, [SP]
    // 0x7d9168: r0 = size()
    //     0x7d9168: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x7d916c: LoadField: d0 = r0->field_7
    //     0x7d916c: ldur            d0, [x0, #7]
    // 0x7d9170: r0 = inline_Allocate_Double()
    //     0x7d9170: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x7d9174: add             x0, x0, #0x10
    //     0x7d9178: cmp             x1, x0
    //     0x7d917c: b.ls            #0x7d91b4
    //     0x7d9180: str             x0, [THR, #0x50]  ; THR::top
    //     0x7d9184: sub             x0, x0, #0xf
    //     0x7d9188: movz            x1, #0xd148
    //     0x7d918c: movk            x1, #0x3, lsl #16
    //     0x7d9190: stur            x1, [x0, #-1]
    // 0x7d9194: StoreField: r0->field_7 = d0
    //     0x7d9194: stur            d0, [x0, #7]
    // 0x7d9198: LeaveFrame
    //     0x7d9198: mov             SP, fp
    //     0x7d919c: ldp             fp, lr, [SP], #0x10
    // 0x7d91a0: ret
    //     0x7d91a0: ret             
    // 0x7d91a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d91a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d91a8: b               #0x7d9068
    // 0x7d91ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x7d91ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x7d91b0: r0 = NullErrorSharedWithFPURegs()
    //     0x7d91b0: bl              #0xc5f62c  ; NullErrorSharedWithFPURegsStub
    // 0x7d91b4: SaveReg d0
    //     0x7d91b4: str             q0, [SP, #-0x10]!
    // 0x7d91b8: r0 = AllocateDouble()
    //     0x7d91b8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x7d91bc: RestoreReg d0
    //     0x7d91bc: ldr             q0, [SP], #0x10
    // 0x7d91c0: b               #0x7d9194
  }
  _ paint(/* No info */) {
    // ** addr: 0x805944, size: 0xda0
    // 0x805944: EnterFrame
    //     0x805944: stp             fp, lr, [SP, #-0x10]!
    //     0x805948: mov             fp, SP
    // 0x80594c: AllocStack(0x78)
    //     0x80594c: sub             SP, SP, #0x78
    // 0x805950: CheckStackOverflow
    //     0x805950: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x805954: cmp             SP, x16
    //     0x805958: b.ls            #0x8065ec
    // 0x80595c: ldr             x16, [fp, #0x20]
    // 0x805960: r30 = Instance__DecorationSlot
    //     0x805960: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x805964: ldr             lr, [lr, #0x1f8]
    // 0x805968: stp             lr, x16, [SP]
    // 0x80596c: r0 = childForSlot()
    //     0x80596c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805970: mov             x3, x0
    // 0x805974: stur            x3, [fp, #-0x10]
    // 0x805978: cmp             w3, NULL
    // 0x80597c: b.eq            #0x8059f4
    // 0x805980: LoadField: r4 = r3->field_7
    //     0x805980: ldur            w4, [x3, #7]
    // 0x805984: DecompressPointer r4
    //     0x805984: add             x4, x4, HEAP, lsl #32
    // 0x805988: stur            x4, [fp, #-8]
    // 0x80598c: cmp             w4, NULL
    // 0x805990: b.eq            #0x8065f4
    // 0x805994: mov             x0, x4
    // 0x805998: r2 = Null
    //     0x805998: mov             x2, NULL
    // 0x80599c: r1 = Null
    //     0x80599c: mov             x1, NULL
    // 0x8059a0: r4 = LoadClassIdInstr(r0)
    //     0x8059a0: ldur            x4, [x0, #-1]
    //     0x8059a4: ubfx            x4, x4, #0xc, #0x14
    // 0x8059a8: sub             x4, x4, #0x892
    // 0x8059ac: cmp             x4, #0xd
    // 0x8059b0: b.ls            #0x8059c8
    // 0x8059b4: r8 = BoxParentData
    //     0x8059b4: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x8059b8: ldr             x8, [x8, #0x318]
    // 0x8059bc: r3 = Null
    //     0x8059bc: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d200] Null
    //     0x8059c0: ldr             x3, [x3, #0x200]
    // 0x8059c4: r0 = DefaultTypeTest()
    //     0x8059c4: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x8059c8: ldur            x0, [fp, #-8]
    // 0x8059cc: LoadField: r1 = r0->field_7
    //     0x8059cc: ldur            w1, [x0, #7]
    // 0x8059d0: DecompressPointer r1
    //     0x8059d0: add             x1, x1, HEAP, lsl #32
    // 0x8059d4: ldr             x16, [fp, #0x10]
    // 0x8059d8: stp             x16, x1, [SP]
    // 0x8059dc: r0 = +()
    //     0x8059dc: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x8059e0: ldr             x16, [fp, #0x18]
    // 0x8059e4: ldur            lr, [fp, #-0x10]
    // 0x8059e8: stp             lr, x16, [SP, #8]
    // 0x8059ec: str             x0, [SP]
    // 0x8059f0: r0 = paintChild()
    //     0x8059f0: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x8059f4: ldr             x16, [fp, #0x20]
    // 0x8059f8: r30 = Instance__DecorationSlot
    //     0x8059f8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x8059fc: ldr             lr, [lr, #0x178]
    // 0x805a00: stp             lr, x16, [SP]
    // 0x805a04: r0 = childForSlot()
    //     0x805a04: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805a08: cmp             w0, NULL
    // 0x805a0c: b.eq            #0x806070
    // 0x805a10: ldr             x0, [fp, #0x20]
    // 0x805a14: r16 = Instance__DecorationSlot
    //     0x805a14: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x805a18: ldr             x16, [x16, #0x178]
    // 0x805a1c: stp             x16, x0, [SP]
    // 0x805a20: r0 = childForSlot()
    //     0x805a20: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805a24: cmp             w0, NULL
    // 0x805a28: b.eq            #0x8065f8
    // 0x805a2c: LoadField: r3 = r0->field_7
    //     0x805a2c: ldur            w3, [x0, #7]
    // 0x805a30: DecompressPointer r3
    //     0x805a30: add             x3, x3, HEAP, lsl #32
    // 0x805a34: stur            x3, [fp, #-8]
    // 0x805a38: cmp             w3, NULL
    // 0x805a3c: b.eq            #0x8065fc
    // 0x805a40: mov             x0, x3
    // 0x805a44: r2 = Null
    //     0x805a44: mov             x2, NULL
    // 0x805a48: r1 = Null
    //     0x805a48: mov             x1, NULL
    // 0x805a4c: r4 = LoadClassIdInstr(r0)
    //     0x805a4c: ldur            x4, [x0, #-1]
    //     0x805a50: ubfx            x4, x4, #0xc, #0x14
    // 0x805a54: sub             x4, x4, #0x892
    // 0x805a58: cmp             x4, #0xd
    // 0x805a5c: b.ls            #0x805a74
    // 0x805a60: r8 = BoxParentData
    //     0x805a60: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x805a64: ldr             x8, [x8, #0x318]
    // 0x805a68: r3 = Null
    //     0x805a68: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d210] Null
    //     0x805a6c: ldr             x3, [x3, #0x210]
    // 0x805a70: r0 = DefaultTypeTest()
    //     0x805a70: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x805a74: ldur            x0, [fp, #-8]
    // 0x805a78: LoadField: r1 = r0->field_7
    //     0x805a78: ldur            w1, [x0, #7]
    // 0x805a7c: DecompressPointer r1
    //     0x805a7c: add             x1, x1, HEAP, lsl #32
    // 0x805a80: stur            x1, [fp, #-0x10]
    // 0x805a84: ldr             x16, [fp, #0x20]
    // 0x805a88: r30 = Instance__DecorationSlot
    //     0x805a88: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x805a8c: ldr             lr, [lr, #0x178]
    // 0x805a90: stp             lr, x16, [SP]
    // 0x805a94: r0 = childForSlot()
    //     0x805a94: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805a98: str             x0, [SP]
    // 0x805a9c: r0 = _boxSize()
    //     0x805a9c: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x805aa0: LoadField: d0 = r0->field_f
    //     0x805aa0: ldur            d0, [x0, #0xf]
    // 0x805aa4: stur            d0, [fp, #-0x30]
    // 0x805aa8: ldr             x16, [fp, #0x20]
    // 0x805aac: r30 = Instance__DecorationSlot
    //     0x805aac: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x805ab0: ldr             lr, [lr, #0x178]
    // 0x805ab4: stp             lr, x16, [SP]
    // 0x805ab8: r0 = childForSlot()
    //     0x805ab8: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805abc: str             x0, [SP]
    // 0x805ac0: r0 = _boxSize()
    //     0x805ac0: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x805ac4: LoadField: d0 = r0->field_7
    //     0x805ac4: ldur            d0, [x0, #7]
    // 0x805ac8: stur            d0, [fp, #-0x40]
    // 0x805acc: d1 = 0.750000
    //     0x805acc: fmov            d1, #0.75000000
    // 0x805ad0: fmul            d2, d0, d1
    // 0x805ad4: ldr             x0, [fp, #0x20]
    // 0x805ad8: stur            d2, [fp, #-0x38]
    // 0x805adc: LoadField: r1 = r0->field_63
    //     0x805adc: ldur            w1, [x0, #0x63]
    // 0x805ae0: DecompressPointer r1
    //     0x805ae0: add             x1, x1, HEAP, lsl #32
    // 0x805ae4: LoadField: r2 = r1->field_23
    //     0x805ae4: ldur            w2, [x1, #0x23]
    // 0x805ae8: DecompressPointer r2
    //     0x805ae8: add             x2, x2, HEAP, lsl #32
    // 0x805aec: LoadField: r3 = r2->field_7
    //     0x805aec: ldur            w3, [x2, #7]
    // 0x805af0: DecompressPointer r3
    //     0x805af0: add             x3, x3, HEAP, lsl #32
    // 0x805af4: LoadField: d3 = r3->field_b
    //     0x805af4: ldur            d3, [x3, #0xb]
    // 0x805af8: ArrayLoad: d4 = r1[0]  ; List_8
    //     0x805af8: ldur            d4, [x1, #0x17]
    // 0x805afc: r3 = LoadClassIdInstr(r2)
    //     0x805afc: ldur            x3, [x2, #-1]
    //     0x805b00: ubfx            x3, x3, #0xc, #0x14
    // 0x805b04: lsl             x3, x3, #1
    // 0x805b08: r17 = 4692
    //     0x805b08: movz            x17, #0x1254
    // 0x805b0c: cmp             w3, w17
    // 0x805b10: b.ne            #0x805b1c
    // 0x805b14: r2 = true
    //     0x805b14: add             x2, NULL, #0x20  ; true
    // 0x805b18: b               #0x805b34
    // 0x805b1c: r17 = 4694
    //     0x805b1c: movz            x17, #0x1256
    // 0x805b20: cmp             w3, w17
    // 0x805b24: b.ne            #0x805b30
    // 0x805b28: r2 = false
    //     0x805b28: add             x2, NULL, #0x30  ; false
    // 0x805b2c: b               #0x805b34
    // 0x805b30: r2 = false
    //     0x805b30: add             x2, NULL, #0x30  ; false
    // 0x805b34: stur            x2, [fp, #-0x18]
    // 0x805b38: tbnz            w2, #4, #0x805b60
    // 0x805b3c: ldur            d5, [fp, #-0x30]
    // 0x805b40: d6 = 2.000000
    //     0x805b40: fmov            d6, #2.00000000
    // 0x805b44: fneg            d7, d5
    // 0x805b48: fmul            d5, d7, d1
    // 0x805b4c: fdiv            d1, d5, d6
    // 0x805b50: fdiv            d5, d3, d6
    // 0x805b54: fadd            d3, d1, d5
    // 0x805b58: mov             v1.16b, v3.16b
    // 0x805b5c: b               #0x805b70
    // 0x805b60: d6 = 2.000000
    //     0x805b60: fmov            d6, #2.00000000
    // 0x805b64: LoadField: r3 = r1->field_7
    //     0x805b64: ldur            w3, [x1, #7]
    // 0x805b68: DecompressPointer r3
    //     0x805b68: add             x3, x3, HEAP, lsl #32
    // 0x805b6c: LoadField: d1 = r3->field_f
    //     0x805b6c: ldur            d1, [x3, #0xf]
    // 0x805b70: stur            d1, [fp, #-0x30]
    // 0x805b74: r1 = inline_Allocate_Double()
    //     0x805b74: ldp             x1, x3, [THR, #0x50]  ; THR::top
    //     0x805b78: add             x1, x1, #0x10
    //     0x805b7c: cmp             x3, x1
    //     0x805b80: b.ls            #0x806600
    //     0x805b84: str             x1, [THR, #0x50]  ; THR::top
    //     0x805b88: sub             x1, x1, #0xf
    //     0x805b8c: movz            x3, #0xd148
    //     0x805b90: movk            x3, #0x3, lsl #16
    //     0x805b94: stur            x3, [x1, #-1]
    // 0x805b98: StoreField: r1->field_7 = d4
    //     0x805b98: stur            d4, [x1, #7]
    // 0x805b9c: stur            x1, [fp, #-8]
    // 0x805ba0: r16 = 1.000000
    //     0x805ba0: ldr             x16, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x805ba4: r30 = 0.750000
    //     0x805ba4: add             lr, PP, #0x34, lsl #12  ; [pp+0x34cb0] 0.75
    //     0x805ba8: ldr             lr, [lr, #0xcb0]
    // 0x805bac: stp             lr, x16, [SP, #8]
    // 0x805bb0: str             x1, [SP]
    // 0x805bb4: r0 = lerpDouble()
    //     0x805bb4: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x805bb8: stur            x0, [fp, #-0x20]
    // 0x805bbc: ldr             x16, [fp, #0x20]
    // 0x805bc0: r30 = Instance__DecorationSlot
    //     0x805bc0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x805bc4: ldr             lr, [lr, #0x1f8]
    // 0x805bc8: stp             lr, x16, [SP]
    // 0x805bcc: r0 = childForSlot()
    //     0x805bcc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805bd0: cmp             w0, NULL
    // 0x805bd4: b.eq            #0x80662c
    // 0x805bd8: LoadField: r3 = r0->field_7
    //     0x805bd8: ldur            w3, [x0, #7]
    // 0x805bdc: DecompressPointer r3
    //     0x805bdc: add             x3, x3, HEAP, lsl #32
    // 0x805be0: stur            x3, [fp, #-0x28]
    // 0x805be4: cmp             w3, NULL
    // 0x805be8: b.eq            #0x806630
    // 0x805bec: mov             x0, x3
    // 0x805bf0: r2 = Null
    //     0x805bf0: mov             x2, NULL
    // 0x805bf4: r1 = Null
    //     0x805bf4: mov             x1, NULL
    // 0x805bf8: r4 = LoadClassIdInstr(r0)
    //     0x805bf8: ldur            x4, [x0, #-1]
    //     0x805bfc: ubfx            x4, x4, #0xc, #0x14
    // 0x805c00: sub             x4, x4, #0x892
    // 0x805c04: cmp             x4, #0xd
    // 0x805c08: b.ls            #0x805c20
    // 0x805c0c: r8 = BoxParentData
    //     0x805c0c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x805c10: ldr             x8, [x8, #0x318]
    // 0x805c14: r3 = Null
    //     0x805c14: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d220] Null
    //     0x805c18: ldr             x3, [x3, #0x220]
    // 0x805c1c: r0 = DefaultTypeTest()
    //     0x805c1c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x805c20: ldur            x0, [fp, #-0x28]
    // 0x805c24: LoadField: r1 = r0->field_7
    //     0x805c24: ldur            w1, [x0, #7]
    // 0x805c28: DecompressPointer r1
    //     0x805c28: add             x1, x1, HEAP, lsl #32
    // 0x805c2c: LoadField: d0 = r1->field_7
    //     0x805c2c: ldur            d0, [x1, #7]
    // 0x805c30: stur            d0, [fp, #-0x48]
    // 0x805c34: ldr             x16, [fp, #0x20]
    // 0x805c38: r30 = Instance__DecorationSlot
    //     0x805c38: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f8] Obj!_DecorationSlot@c449b1
    //     0x805c3c: ldr             lr, [lr, #0x1f8]
    // 0x805c40: stp             lr, x16, [SP]
    // 0x805c44: r0 = childForSlot()
    //     0x805c44: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805c48: str             x0, [SP]
    // 0x805c4c: r0 = _boxSize()
    //     0x805c4c: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x805c50: LoadField: d0 = r0->field_7
    //     0x805c50: ldur            d0, [x0, #7]
    // 0x805c54: d1 = 2.000000
    //     0x805c54: fmov            d1, #2.00000000
    // 0x805c58: fdiv            d2, d0, d1
    // 0x805c5c: ldur            d0, [fp, #-0x48]
    // 0x805c60: fadd            d3, d0, d2
    // 0x805c64: ldur            d0, [fp, #-0x38]
    // 0x805c68: fdiv            d2, d0, d1
    // 0x805c6c: fsub            d0, d3, d2
    // 0x805c70: ldr             x0, [fp, #0x20]
    // 0x805c74: stur            d0, [fp, #-0x48]
    // 0x805c78: LoadField: r1 = r0->field_67
    //     0x805c78: ldur            w1, [x0, #0x67]
    // 0x805c7c: DecompressPointer r1
    //     0x805c7c: add             x1, x1, HEAP, lsl #32
    // 0x805c80: LoadField: r2 = r1->field_7
    //     0x805c80: ldur            x2, [x1, #7]
    // 0x805c84: cmp             x2, #0
    // 0x805c88: b.gt            #0x805d64
    // 0x805c8c: ldur            x2, [fp, #-0x10]
    // 0x805c90: ldur            x1, [fp, #-0x20]
    // 0x805c94: ldur            d1, [fp, #-0x40]
    // 0x805c98: d2 = 1.000000
    //     0x805c98: fmov            d2, #1.00000000
    // 0x805c9c: LoadField: d3 = r2->field_7
    //     0x805c9c: ldur            d3, [x2, #7]
    // 0x805ca0: LoadField: d4 = r1->field_7
    //     0x805ca0: ldur            d4, [x1, #7]
    // 0x805ca4: fsub            d5, d2, d4
    // 0x805ca8: fmul            d2, d1, d5
    // 0x805cac: fadd            d1, d3, d2
    // 0x805cb0: stur            d1, [fp, #-0x38]
    // 0x805cb4: r16 = Instance__DecorationSlot
    //     0x805cb4: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x805cb8: ldr             x16, [x16, #0x1c0]
    // 0x805cbc: stp             x16, x0, [SP]
    // 0x805cc0: r0 = childForSlot()
    //     0x805cc0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805cc4: cmp             w0, NULL
    // 0x805cc8: b.eq            #0x805d48
    // 0x805ccc: ldur            x0, [fp, #-0x18]
    // 0x805cd0: tbnz            w0, #4, #0x805d3c
    // 0x805cd4: ldr             x0, [fp, #0x20]
    // 0x805cd8: LoadField: r1 = r0->field_7b
    //     0x805cd8: ldur            w1, [x0, #0x7b]
    // 0x805cdc: DecompressPointer r1
    //     0x805cdc: add             x1, x1, HEAP, lsl #32
    // 0x805ce0: tbnz            w1, #4, #0x805d24
    // 0x805ce4: r16 = Instance__DecorationSlot
    //     0x805ce4: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x805ce8: ldr             x16, [x16, #0x1c0]
    // 0x805cec: stp             x16, x0, [SP]
    // 0x805cf0: r0 = childForSlot()
    //     0x805cf0: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805cf4: str             x0, [SP]
    // 0x805cf8: r0 = _boxSize()
    //     0x805cf8: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x805cfc: LoadField: d0 = r0->field_7
    //     0x805cfc: ldur            d0, [x0, #7]
    // 0x805d00: ldr             x1, [fp, #0x20]
    // 0x805d04: LoadField: r0 = r1->field_63
    //     0x805d04: ldur            w0, [x1, #0x63]
    // 0x805d08: DecompressPointer r0
    //     0x805d08: add             x0, x0, HEAP, lsl #32
    // 0x805d0c: LoadField: r2 = r0->field_7
    //     0x805d0c: ldur            w2, [x0, #7]
    // 0x805d10: DecompressPointer r2
    //     0x805d10: add             x2, x2, HEAP, lsl #32
    // 0x805d14: LoadField: d1 = r2->field_7
    //     0x805d14: ldur            d1, [x2, #7]
    // 0x805d18: fsub            d2, d0, d1
    // 0x805d1c: mov             v1.16b, v2.16b
    // 0x805d20: b               #0x805d2c
    // 0x805d24: mov             x1, x0
    // 0x805d28: d1 = 0.000000
    //     0x805d28: eor             v1.16b, v1.16b, v1.16b
    // 0x805d2c: ldur            d0, [fp, #-0x38]
    // 0x805d30: fadd            d2, d0, d1
    // 0x805d34: mov             v1.16b, v2.16b
    // 0x805d38: b               #0x805d54
    // 0x805d3c: ldr             x1, [fp, #0x20]
    // 0x805d40: ldur            d0, [fp, #-0x38]
    // 0x805d44: b               #0x805d50
    // 0x805d48: ldr             x1, [fp, #0x20]
    // 0x805d4c: ldur            d0, [fp, #-0x38]
    // 0x805d50: mov             v1.16b, v0.16b
    // 0x805d54: mov             v3.16b, v0.16b
    // 0x805d58: mov             v2.16b, v1.16b
    // 0x805d5c: mov             x0, x1
    // 0x805d60: b               #0x805e1c
    // 0x805d64: mov             x1, x0
    // 0x805d68: ldur            x2, [fp, #-0x10]
    // 0x805d6c: ldur            x0, [fp, #-0x18]
    // 0x805d70: LoadField: d0 = r2->field_7
    //     0x805d70: ldur            d0, [x2, #7]
    // 0x805d74: stur            d0, [fp, #-0x38]
    // 0x805d78: r16 = Instance__DecorationSlot
    //     0x805d78: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x805d7c: ldr             x16, [x16, #0x1c0]
    // 0x805d80: stp             x16, x1, [SP]
    // 0x805d84: r0 = childForSlot()
    //     0x805d84: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805d88: cmp             w0, NULL
    // 0x805d8c: b.eq            #0x805e08
    // 0x805d90: ldur            x0, [fp, #-0x18]
    // 0x805d94: tbnz            w0, #4, #0x805e00
    // 0x805d98: ldr             x0, [fp, #0x20]
    // 0x805d9c: LoadField: r1 = r0->field_7b
    //     0x805d9c: ldur            w1, [x0, #0x7b]
    // 0x805da0: DecompressPointer r1
    //     0x805da0: add             x1, x1, HEAP, lsl #32
    // 0x805da4: tbnz            w1, #4, #0x805dec
    // 0x805da8: r16 = Instance__DecorationSlot
    //     0x805da8: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x805dac: ldr             x16, [x16, #0x1c0]
    // 0x805db0: stp             x16, x0, [SP]
    // 0x805db4: r0 = childForSlot()
    //     0x805db4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x805db8: str             x0, [SP]
    // 0x805dbc: r0 = _boxSize()
    //     0x805dbc: bl              #0x7d6b8c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_boxSize
    // 0x805dc0: LoadField: d0 = r0->field_7
    //     0x805dc0: ldur            d0, [x0, #7]
    // 0x805dc4: fneg            d1, d0
    // 0x805dc8: stur            d1, [fp, #-0x40]
    // 0x805dcc: ldr             x16, [fp, #0x20]
    // 0x805dd0: str             x16, [SP]
    // 0x805dd4: r0 = contentPadding()
    //     0x805dd4: bl              #0x8066e4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::contentPadding
    // 0x805dd8: LoadField: d0 = r0->field_7
    //     0x805dd8: ldur            d0, [x0, #7]
    // 0x805ddc: ldur            d1, [fp, #-0x40]
    // 0x805de0: fadd            d2, d1, d0
    // 0x805de4: mov             v1.16b, v2.16b
    // 0x805de8: b               #0x805df0
    // 0x805dec: d1 = 0.000000
    //     0x805dec: eor             v1.16b, v1.16b, v1.16b
    // 0x805df0: ldur            d0, [fp, #-0x38]
    // 0x805df4: fadd            d2, d0, d1
    // 0x805df8: mov             v1.16b, v2.16b
    // 0x805dfc: b               #0x805e10
    // 0x805e00: ldur            d0, [fp, #-0x38]
    // 0x805e04: b               #0x805e0c
    // 0x805e08: ldur            d0, [fp, #-0x38]
    // 0x805e0c: mov             v1.16b, v0.16b
    // 0x805e10: mov             v3.16b, v0.16b
    // 0x805e14: mov             v2.16b, v1.16b
    // 0x805e18: ldr             x0, [fp, #0x20]
    // 0x805e1c: ldur            x1, [fp, #-0x10]
    // 0x805e20: ldur            d1, [fp, #-0x30]
    // 0x805e24: ldur            d0, [fp, #-0x48]
    // 0x805e28: stur            d3, [fp, #-0x38]
    // 0x805e2c: r2 = inline_Allocate_Double()
    //     0x805e2c: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x805e30: add             x2, x2, #0x10
    //     0x805e34: cmp             x3, x2
    //     0x805e38: b.ls            #0x806634
    //     0x805e3c: str             x2, [THR, #0x50]  ; THR::top
    //     0x805e40: sub             x2, x2, #0xf
    //     0x805e44: movz            x3, #0xd148
    //     0x805e48: movk            x3, #0x3, lsl #16
    //     0x805e4c: stur            x3, [x2, #-1]
    // 0x805e50: StoreField: r2->field_7 = d0
    //     0x805e50: stur            d0, [x2, #7]
    // 0x805e54: r3 = inline_Allocate_Double()
    //     0x805e54: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x805e58: add             x3, x3, #0x10
    //     0x805e5c: cmp             x4, x3
    //     0x805e60: b.ls            #0x806658
    //     0x805e64: str             x3, [THR, #0x50]  ; THR::top
    //     0x805e68: sub             x3, x3, #0xf
    //     0x805e6c: movz            x4, #0xd148
    //     0x805e70: movk            x4, #0x3, lsl #16
    //     0x805e74: stur            x4, [x3, #-1]
    // 0x805e78: StoreField: r3->field_7 = d2
    //     0x805e78: stur            d2, [x3, #7]
    // 0x805e7c: stp             x2, x3, [SP, #8]
    // 0x805e80: r16 = 0.000000
    //     0x805e80: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x805e84: str             x16, [SP]
    // 0x805e88: r0 = lerpDouble()
    //     0x805e88: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x805e8c: ldur            d0, [fp, #-0x38]
    // 0x805e90: r1 = inline_Allocate_Double()
    //     0x805e90: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x805e94: add             x1, x1, #0x10
    //     0x805e98: cmp             x2, x1
    //     0x805e9c: b.ls            #0x806684
    //     0x805ea0: str             x1, [THR, #0x50]  ; THR::top
    //     0x805ea4: sub             x1, x1, #0xf
    //     0x805ea8: movz            x2, #0xd148
    //     0x805eac: movk            x2, #0x3, lsl #16
    //     0x805eb0: stur            x2, [x1, #-1]
    // 0x805eb4: StoreField: r1->field_7 = d0
    //     0x805eb4: stur            d0, [x1, #7]
    // 0x805eb8: stp             x0, x1, [SP, #8]
    // 0x805ebc: ldur            x16, [fp, #-8]
    // 0x805ec0: str             x16, [SP]
    // 0x805ec4: r0 = lerpDouble()
    //     0x805ec4: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x805ec8: mov             x1, x0
    // 0x805ecc: ldur            x0, [fp, #-0x10]
    // 0x805ed0: stur            x1, [fp, #-0x18]
    // 0x805ed4: LoadField: d0 = r0->field_f
    //     0x805ed4: ldur            d0, [x0, #0xf]
    // 0x805ed8: ldur            d1, [fp, #-0x30]
    // 0x805edc: stur            d0, [fp, #-0x38]
    // 0x805ee0: fsub            d2, d1, d0
    // 0x805ee4: r0 = inline_Allocate_Double()
    //     0x805ee4: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x805ee8: add             x0, x0, #0x10
    //     0x805eec: cmp             x2, x0
    //     0x805ef0: b.ls            #0x8066a0
    //     0x805ef4: str             x0, [THR, #0x50]  ; THR::top
    //     0x805ef8: sub             x0, x0, #0xf
    //     0x805efc: movz            x2, #0xd148
    //     0x805f00: movk            x2, #0x3, lsl #16
    //     0x805f04: stur            x2, [x0, #-1]
    // 0x805f08: StoreField: r0->field_7 = d2
    //     0x805f08: stur            d2, [x0, #7]
    // 0x805f0c: r16 = 0.000000
    //     0x805f0c: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x805f10: stp             x0, x16, [SP, #8]
    // 0x805f14: ldur            x16, [fp, #-8]
    // 0x805f18: str             x16, [SP]
    // 0x805f1c: r0 = lerpDouble()
    //     0x805f1c: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x805f20: stur            x0, [fp, #-8]
    // 0x805f24: r0 = Matrix4()
    //     0x805f24: bl              #0x544144  ; AllocateMatrix4Stub -> Matrix4 (size=0xc)
    // 0x805f28: r4 = 32
    //     0x805f28: movz            x4, #0x20
    // 0x805f2c: stur            x0, [fp, #-0x10]
    // 0x805f30: r0 = AllocateFloat64Array()
    //     0x805f30: bl              #0xc5e300  ; AllocateFloat64ArrayStub
    // 0x805f34: mov             x1, x0
    // 0x805f38: ldur            x0, [fp, #-0x10]
    // 0x805f3c: StoreField: r0->field_7 = r1
    //     0x805f3c: stur            w1, [x0, #7]
    // 0x805f40: str             x0, [SP]
    // 0x805f44: r0 = setIdentity()
    //     0x805f44: bl              #0x59bc24  ; [package:vector_math/vector_math_64.dart] Matrix4::setIdentity
    // 0x805f48: ldur            x0, [fp, #-8]
    // 0x805f4c: LoadField: d0 = r0->field_7
    //     0x805f4c: ldur            d0, [x0, #7]
    // 0x805f50: ldur            d1, [fp, #-0x38]
    // 0x805f54: fadd            d2, d1, d0
    // 0x805f58: ldur            x0, [fp, #-0x18]
    // 0x805f5c: LoadField: d0 = r0->field_7
    //     0x805f5c: ldur            d0, [x0, #7]
    // 0x805f60: ldur            x16, [fp, #-0x10]
    // 0x805f64: str             x16, [SP, #0x10]
    // 0x805f68: str             d0, [SP, #8]
    // 0x805f6c: str             d2, [SP]
    // 0x805f70: r0 = translate()
    //     0x805f70: bl              #0x59d4dc  ; [package:vector_math/vector_math_64.dart] Matrix4::translate
    // 0x805f74: ldur            x16, [fp, #-0x10]
    // 0x805f78: ldur            lr, [fp, #-0x20]
    // 0x805f7c: stp             lr, x16, [SP]
    // 0x805f80: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x805f80: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x805f84: r0 = scale()
    //     0x805f84: bl              #0x545b94  ; [package:vector_math/vector_math_64.dart] Matrix4::scale
    // 0x805f88: ldur            x0, [fp, #-0x10]
    // 0x805f8c: ldr             x1, [fp, #0x20]
    // 0x805f90: StoreField: r1->field_7f = r0
    //     0x805f90: stur            w0, [x1, #0x7f]
    //     0x805f94: ldurb           w16, [x1, #-1]
    //     0x805f98: ldurb           w17, [x0, #-1]
    //     0x805f9c: and             x16, x17, x16, lsr #2
    //     0x805fa0: tst             x16, HEAP, lsr #32
    //     0x805fa4: b.eq            #0x805fac
    //     0x805fa8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x805fac: LoadField: r0 = r1->field_37
    //     0x805fac: ldur            w0, [x1, #0x37]
    // 0x805fb0: DecompressPointer r0
    //     0x805fb0: add             x0, x0, HEAP, lsl #32
    // 0x805fb4: r16 = Sentinel
    //     0x805fb4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x805fb8: cmp             w0, w16
    // 0x805fbc: b.eq            #0x8066b8
    // 0x805fc0: stur            x0, [fp, #-8]
    // 0x805fc4: r1 = 1
    //     0x805fc4: movz            x1, #0x1
    // 0x805fc8: r0 = AllocateContext()
    //     0x805fc8: bl              #0xc5def4  ; AllocateContextStub
    // 0x805fcc: mov             x4, x0
    // 0x805fd0: ldr             x3, [fp, #0x20]
    // 0x805fd4: stur            x4, [fp, #-0x28]
    // 0x805fd8: StoreField: r4->field_f = r3
    //     0x805fd8: stur            w3, [x4, #0xf]
    // 0x805fdc: LoadField: r5 = r3->field_2f
    //     0x805fdc: ldur            w5, [x3, #0x2f]
    // 0x805fe0: DecompressPointer r5
    //     0x805fe0: add             x5, x5, HEAP, lsl #32
    // 0x805fe4: stur            x5, [fp, #-0x20]
    // 0x805fe8: LoadField: r6 = r5->field_b
    //     0x805fe8: ldur            w6, [x5, #0xb]
    // 0x805fec: DecompressPointer r6
    //     0x805fec: add             x6, x6, HEAP, lsl #32
    // 0x805ff0: mov             x0, x6
    // 0x805ff4: stur            x6, [fp, #-0x18]
    // 0x805ff8: r2 = Null
    //     0x805ff8: mov             x2, NULL
    // 0x805ffc: r1 = Null
    //     0x805ffc: mov             x1, NULL
    // 0x806000: r4 = LoadClassIdInstr(r0)
    //     0x806000: ldur            x4, [x0, #-1]
    //     0x806004: ubfx            x4, x4, #0xc, #0x14
    // 0x806008: cmp             x4, #0x7a3
    // 0x80600c: b.eq            #0x806024
    // 0x806010: r8 = TransformLayer?
    //     0x806010: add             x8, PP, #0x24, lsl #12  ; [pp+0x24b20] Type: TransformLayer?
    //     0x806014: ldr             x8, [x8, #0xb20]
    // 0x806018: r3 = Null
    //     0x806018: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d230] Null
    //     0x80601c: ldr             x3, [x3, #0x230]
    // 0x806020: r0 = DefaultNullableTypeTest()
    //     0x806020: bl              #0xc5cf30  ; DefaultNullableTypeTestStub
    // 0x806024: ldur            x2, [fp, #-0x28]
    // 0x806028: r1 = Function '_paintLabel@159019562':.
    //     0x806028: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d240] AnonymousClosure: (0x8066fc), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_paintLabel (0x806750)
    //     0x80602c: ldr             x1, [x1, #0x240]
    // 0x806030: r0 = AllocateClosure()
    //     0x806030: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x806034: ldr             x16, [fp, #0x18]
    // 0x806038: ldur            lr, [fp, #-8]
    // 0x80603c: stp             lr, x16, [SP, #0x20]
    // 0x806040: ldr             x16, [fp, #0x10]
    // 0x806044: ldur            lr, [fp, #-0x10]
    // 0x806048: stp             lr, x16, [SP, #0x10]
    // 0x80604c: ldur            x16, [fp, #-0x18]
    // 0x806050: stp             x16, x0, [SP]
    // 0x806054: r4 = const [0, 0x6, 0x6, 0x5, oldLayer, 0x5, null]
    //     0x806054: add             x4, PP, #0x1e, lsl #12  ; [pp+0x1e878] List(7) [0, 0x6, 0x6, 0x5, "oldLayer", 0x5, Null]
    //     0x806058: ldr             x4, [x4, #0x878]
    // 0x80605c: r0 = pushTransform()
    //     0x80605c: bl              #0x7fa750  ; [package:flutter/src/rendering/object.dart] PaintingContext::pushTransform
    // 0x806060: ldur            x16, [fp, #-0x20]
    // 0x806064: stp             x0, x16, [SP]
    // 0x806068: r0 = layer=()
    //     0x806068: bl              #0x5b4a40  ; [package:flutter/src/rendering/layer.dart] LayerHandle::layer=
    // 0x80606c: b               #0x806084
    // 0x806070: ldr             x0, [fp, #0x20]
    // 0x806074: LoadField: r1 = r0->field_2f
    //     0x806074: ldur            w1, [x0, #0x2f]
    // 0x806078: DecompressPointer r1
    //     0x806078: add             x1, x1, HEAP, lsl #32
    // 0x80607c: stp             NULL, x1, [SP]
    // 0x806080: r0 = layer=()
    //     0x806080: bl              #0x5b4a40  ; [package:flutter/src/rendering/layer.dart] LayerHandle::layer=
    // 0x806084: ldr             x16, [fp, #0x20]
    // 0x806088: r30 = Instance__DecorationSlot
    //     0x806088: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b0] Obj!_DecorationSlot@c44931
    //     0x80608c: ldr             lr, [lr, #0x1b0]
    // 0x806090: stp             lr, x16, [SP]
    // 0x806094: r0 = childForSlot()
    //     0x806094: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806098: mov             x3, x0
    // 0x80609c: stur            x3, [fp, #-0x10]
    // 0x8060a0: cmp             w3, NULL
    // 0x8060a4: b.eq            #0x80611c
    // 0x8060a8: LoadField: r4 = r3->field_7
    //     0x8060a8: ldur            w4, [x3, #7]
    // 0x8060ac: DecompressPointer r4
    //     0x8060ac: add             x4, x4, HEAP, lsl #32
    // 0x8060b0: stur            x4, [fp, #-8]
    // 0x8060b4: cmp             w4, NULL
    // 0x8060b8: b.eq            #0x8066c0
    // 0x8060bc: mov             x0, x4
    // 0x8060c0: r2 = Null
    //     0x8060c0: mov             x2, NULL
    // 0x8060c4: r1 = Null
    //     0x8060c4: mov             x1, NULL
    // 0x8060c8: r4 = LoadClassIdInstr(r0)
    //     0x8060c8: ldur            x4, [x0, #-1]
    //     0x8060cc: ubfx            x4, x4, #0xc, #0x14
    // 0x8060d0: sub             x4, x4, #0x892
    // 0x8060d4: cmp             x4, #0xd
    // 0x8060d8: b.ls            #0x8060f0
    // 0x8060dc: r8 = BoxParentData
    //     0x8060dc: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x8060e0: ldr             x8, [x8, #0x318]
    // 0x8060e4: r3 = Null
    //     0x8060e4: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d248] Null
    //     0x8060e8: ldr             x3, [x3, #0x248]
    // 0x8060ec: r0 = DefaultTypeTest()
    //     0x8060ec: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x8060f0: ldur            x0, [fp, #-8]
    // 0x8060f4: LoadField: r1 = r0->field_7
    //     0x8060f4: ldur            w1, [x0, #7]
    // 0x8060f8: DecompressPointer r1
    //     0x8060f8: add             x1, x1, HEAP, lsl #32
    // 0x8060fc: ldr             x16, [fp, #0x10]
    // 0x806100: stp             x16, x1, [SP]
    // 0x806104: r0 = +()
    //     0x806104: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806108: ldr             x16, [fp, #0x18]
    // 0x80610c: ldur            lr, [fp, #-0x10]
    // 0x806110: stp             lr, x16, [SP, #8]
    // 0x806114: str             x0, [SP]
    // 0x806118: r0 = paintChild()
    //     0x806118: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x80611c: ldr             x16, [fp, #0x20]
    // 0x806120: r30 = Instance__DecorationSlot
    //     0x806120: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d0] Obj!_DecorationSlot@c448f1
    //     0x806124: ldr             lr, [lr, #0x1d0]
    // 0x806128: stp             lr, x16, [SP]
    // 0x80612c: r0 = childForSlot()
    //     0x80612c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806130: mov             x3, x0
    // 0x806134: stur            x3, [fp, #-0x10]
    // 0x806138: cmp             w3, NULL
    // 0x80613c: b.eq            #0x8061b4
    // 0x806140: LoadField: r4 = r3->field_7
    //     0x806140: ldur            w4, [x3, #7]
    // 0x806144: DecompressPointer r4
    //     0x806144: add             x4, x4, HEAP, lsl #32
    // 0x806148: stur            x4, [fp, #-8]
    // 0x80614c: cmp             w4, NULL
    // 0x806150: b.eq            #0x8066c4
    // 0x806154: mov             x0, x4
    // 0x806158: r2 = Null
    //     0x806158: mov             x2, NULL
    // 0x80615c: r1 = Null
    //     0x80615c: mov             x1, NULL
    // 0x806160: r4 = LoadClassIdInstr(r0)
    //     0x806160: ldur            x4, [x0, #-1]
    //     0x806164: ubfx            x4, x4, #0xc, #0x14
    // 0x806168: sub             x4, x4, #0x892
    // 0x80616c: cmp             x4, #0xd
    // 0x806170: b.ls            #0x806188
    // 0x806174: r8 = BoxParentData
    //     0x806174: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x806178: ldr             x8, [x8, #0x318]
    // 0x80617c: r3 = Null
    //     0x80617c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d258] Null
    //     0x806180: ldr             x3, [x3, #0x258]
    // 0x806184: r0 = DefaultTypeTest()
    //     0x806184: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x806188: ldur            x0, [fp, #-8]
    // 0x80618c: LoadField: r1 = r0->field_7
    //     0x80618c: ldur            w1, [x0, #7]
    // 0x806190: DecompressPointer r1
    //     0x806190: add             x1, x1, HEAP, lsl #32
    // 0x806194: ldr             x16, [fp, #0x10]
    // 0x806198: stp             x16, x1, [SP]
    // 0x80619c: r0 = +()
    //     0x80619c: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x8061a0: ldr             x16, [fp, #0x18]
    // 0x8061a4: ldur            lr, [fp, #-0x10]
    // 0x8061a8: stp             lr, x16, [SP, #8]
    // 0x8061ac: str             x0, [SP]
    // 0x8061b0: r0 = paintChild()
    //     0x8061b0: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x8061b4: ldr             x16, [fp, #0x20]
    // 0x8061b8: r30 = Instance__DecorationSlot
    //     0x8061b8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1d8] Obj!_DecorationSlot@c44891
    //     0x8061bc: ldr             lr, [lr, #0x1d8]
    // 0x8061c0: stp             lr, x16, [SP]
    // 0x8061c4: r0 = childForSlot()
    //     0x8061c4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x8061c8: mov             x3, x0
    // 0x8061cc: stur            x3, [fp, #-0x10]
    // 0x8061d0: cmp             w3, NULL
    // 0x8061d4: b.eq            #0x80624c
    // 0x8061d8: LoadField: r4 = r3->field_7
    //     0x8061d8: ldur            w4, [x3, #7]
    // 0x8061dc: DecompressPointer r4
    //     0x8061dc: add             x4, x4, HEAP, lsl #32
    // 0x8061e0: stur            x4, [fp, #-8]
    // 0x8061e4: cmp             w4, NULL
    // 0x8061e8: b.eq            #0x8066c8
    // 0x8061ec: mov             x0, x4
    // 0x8061f0: r2 = Null
    //     0x8061f0: mov             x2, NULL
    // 0x8061f4: r1 = Null
    //     0x8061f4: mov             x1, NULL
    // 0x8061f8: r4 = LoadClassIdInstr(r0)
    //     0x8061f8: ldur            x4, [x0, #-1]
    //     0x8061fc: ubfx            x4, x4, #0xc, #0x14
    // 0x806200: sub             x4, x4, #0x892
    // 0x806204: cmp             x4, #0xd
    // 0x806208: b.ls            #0x806220
    // 0x80620c: r8 = BoxParentData
    //     0x80620c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x806210: ldr             x8, [x8, #0x318]
    // 0x806214: r3 = Null
    //     0x806214: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d268] Null
    //     0x806218: ldr             x3, [x3, #0x268]
    // 0x80621c: r0 = DefaultTypeTest()
    //     0x80621c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x806220: ldur            x0, [fp, #-8]
    // 0x806224: LoadField: r1 = r0->field_7
    //     0x806224: ldur            w1, [x0, #7]
    // 0x806228: DecompressPointer r1
    //     0x806228: add             x1, x1, HEAP, lsl #32
    // 0x80622c: ldr             x16, [fp, #0x10]
    // 0x806230: stp             x16, x1, [SP]
    // 0x806234: r0 = +()
    //     0x806234: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806238: ldr             x16, [fp, #0x18]
    // 0x80623c: ldur            lr, [fp, #-0x10]
    // 0x806240: stp             lr, x16, [SP, #8]
    // 0x806244: str             x0, [SP]
    // 0x806248: r0 = paintChild()
    //     0x806248: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x80624c: ldr             x16, [fp, #0x20]
    // 0x806250: r30 = Instance__DecorationSlot
    //     0x806250: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c0] Obj!_DecorationSlot@c44911
    //     0x806254: ldr             lr, [lr, #0x1c0]
    // 0x806258: stp             lr, x16, [SP]
    // 0x80625c: r0 = childForSlot()
    //     0x80625c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806260: mov             x3, x0
    // 0x806264: stur            x3, [fp, #-0x10]
    // 0x806268: cmp             w3, NULL
    // 0x80626c: b.eq            #0x8062e4
    // 0x806270: LoadField: r4 = r3->field_7
    //     0x806270: ldur            w4, [x3, #7]
    // 0x806274: DecompressPointer r4
    //     0x806274: add             x4, x4, HEAP, lsl #32
    // 0x806278: stur            x4, [fp, #-8]
    // 0x80627c: cmp             w4, NULL
    // 0x806280: b.eq            #0x8066cc
    // 0x806284: mov             x0, x4
    // 0x806288: r2 = Null
    //     0x806288: mov             x2, NULL
    // 0x80628c: r1 = Null
    //     0x80628c: mov             x1, NULL
    // 0x806290: r4 = LoadClassIdInstr(r0)
    //     0x806290: ldur            x4, [x0, #-1]
    //     0x806294: ubfx            x4, x4, #0xc, #0x14
    // 0x806298: sub             x4, x4, #0x892
    // 0x80629c: cmp             x4, #0xd
    // 0x8062a0: b.ls            #0x8062b8
    // 0x8062a4: r8 = BoxParentData
    //     0x8062a4: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x8062a8: ldr             x8, [x8, #0x318]
    // 0x8062ac: r3 = Null
    //     0x8062ac: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d278] Null
    //     0x8062b0: ldr             x3, [x3, #0x278]
    // 0x8062b4: r0 = DefaultTypeTest()
    //     0x8062b4: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x8062b8: ldur            x0, [fp, #-8]
    // 0x8062bc: LoadField: r1 = r0->field_7
    //     0x8062bc: ldur            w1, [x0, #7]
    // 0x8062c0: DecompressPointer r1
    //     0x8062c0: add             x1, x1, HEAP, lsl #32
    // 0x8062c4: ldr             x16, [fp, #0x10]
    // 0x8062c8: stp             x16, x1, [SP]
    // 0x8062cc: r0 = +()
    //     0x8062cc: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x8062d0: ldr             x16, [fp, #0x18]
    // 0x8062d4: ldur            lr, [fp, #-0x10]
    // 0x8062d8: stp             lr, x16, [SP, #8]
    // 0x8062dc: str             x0, [SP]
    // 0x8062e0: r0 = paintChild()
    //     0x8062e0: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x8062e4: ldr             x16, [fp, #0x20]
    // 0x8062e8: r30 = Instance__DecorationSlot
    //     0x8062e8: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1c8] Obj!_DecorationSlot@c44871
    //     0x8062ec: ldr             lr, [lr, #0x1c8]
    // 0x8062f0: stp             lr, x16, [SP]
    // 0x8062f4: r0 = childForSlot()
    //     0x8062f4: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x8062f8: mov             x3, x0
    // 0x8062fc: stur            x3, [fp, #-0x10]
    // 0x806300: cmp             w3, NULL
    // 0x806304: b.eq            #0x80637c
    // 0x806308: LoadField: r4 = r3->field_7
    //     0x806308: ldur            w4, [x3, #7]
    // 0x80630c: DecompressPointer r4
    //     0x80630c: add             x4, x4, HEAP, lsl #32
    // 0x806310: stur            x4, [fp, #-8]
    // 0x806314: cmp             w4, NULL
    // 0x806318: b.eq            #0x8066d0
    // 0x80631c: mov             x0, x4
    // 0x806320: r2 = Null
    //     0x806320: mov             x2, NULL
    // 0x806324: r1 = Null
    //     0x806324: mov             x1, NULL
    // 0x806328: r4 = LoadClassIdInstr(r0)
    //     0x806328: ldur            x4, [x0, #-1]
    //     0x80632c: ubfx            x4, x4, #0xc, #0x14
    // 0x806330: sub             x4, x4, #0x892
    // 0x806334: cmp             x4, #0xd
    // 0x806338: b.ls            #0x806350
    // 0x80633c: r8 = BoxParentData
    //     0x80633c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x806340: ldr             x8, [x8, #0x318]
    // 0x806344: r3 = Null
    //     0x806344: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d288] Null
    //     0x806348: ldr             x3, [x3, #0x288]
    // 0x80634c: r0 = DefaultTypeTest()
    //     0x80634c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x806350: ldur            x0, [fp, #-8]
    // 0x806354: LoadField: r1 = r0->field_7
    //     0x806354: ldur            w1, [x0, #7]
    // 0x806358: DecompressPointer r1
    //     0x806358: add             x1, x1, HEAP, lsl #32
    // 0x80635c: ldr             x16, [fp, #0x10]
    // 0x806360: stp             x16, x1, [SP]
    // 0x806364: r0 = +()
    //     0x806364: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806368: ldr             x16, [fp, #0x18]
    // 0x80636c: ldur            lr, [fp, #-0x10]
    // 0x806370: stp             lr, x16, [SP, #8]
    // 0x806374: str             x0, [SP]
    // 0x806378: r0 = paintChild()
    //     0x806378: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x80637c: ldr             x16, [fp, #0x20]
    // 0x806380: r30 = Instance__DecorationSlot
    //     0x806380: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e0] Obj!_DecorationSlot@c448b1
    //     0x806384: ldr             lr, [lr, #0x1e0]
    // 0x806388: stp             lr, x16, [SP]
    // 0x80638c: r0 = childForSlot()
    //     0x80638c: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806390: mov             x3, x0
    // 0x806394: stur            x3, [fp, #-0x10]
    // 0x806398: cmp             w3, NULL
    // 0x80639c: b.eq            #0x806414
    // 0x8063a0: LoadField: r4 = r3->field_7
    //     0x8063a0: ldur            w4, [x3, #7]
    // 0x8063a4: DecompressPointer r4
    //     0x8063a4: add             x4, x4, HEAP, lsl #32
    // 0x8063a8: stur            x4, [fp, #-8]
    // 0x8063ac: cmp             w4, NULL
    // 0x8063b0: b.eq            #0x8066d4
    // 0x8063b4: mov             x0, x4
    // 0x8063b8: r2 = Null
    //     0x8063b8: mov             x2, NULL
    // 0x8063bc: r1 = Null
    //     0x8063bc: mov             x1, NULL
    // 0x8063c0: r4 = LoadClassIdInstr(r0)
    //     0x8063c0: ldur            x4, [x0, #-1]
    //     0x8063c4: ubfx            x4, x4, #0xc, #0x14
    // 0x8063c8: sub             x4, x4, #0x892
    // 0x8063cc: cmp             x4, #0xd
    // 0x8063d0: b.ls            #0x8063e8
    // 0x8063d4: r8 = BoxParentData
    //     0x8063d4: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x8063d8: ldr             x8, [x8, #0x318]
    // 0x8063dc: r3 = Null
    //     0x8063dc: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d298] Null
    //     0x8063e0: ldr             x3, [x3, #0x298]
    // 0x8063e4: r0 = DefaultTypeTest()
    //     0x8063e4: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x8063e8: ldur            x0, [fp, #-8]
    // 0x8063ec: LoadField: r1 = r0->field_7
    //     0x8063ec: ldur            w1, [x0, #7]
    // 0x8063f0: DecompressPointer r1
    //     0x8063f0: add             x1, x1, HEAP, lsl #32
    // 0x8063f4: ldr             x16, [fp, #0x10]
    // 0x8063f8: stp             x16, x1, [SP]
    // 0x8063fc: r0 = +()
    //     0x8063fc: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806400: ldr             x16, [fp, #0x18]
    // 0x806404: ldur            lr, [fp, #-0x10]
    // 0x806408: stp             lr, x16, [SP, #8]
    // 0x80640c: str             x0, [SP]
    // 0x806410: r0 = paintChild()
    //     0x806410: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x806414: ldr             x16, [fp, #0x20]
    // 0x806418: r30 = Instance__DecorationSlot
    //     0x806418: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1b8] Obj!_DecorationSlot@c448d1
    //     0x80641c: ldr             lr, [lr, #0x1b8]
    // 0x806420: stp             lr, x16, [SP]
    // 0x806424: r0 = childForSlot()
    //     0x806424: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806428: mov             x3, x0
    // 0x80642c: stur            x3, [fp, #-0x10]
    // 0x806430: cmp             w3, NULL
    // 0x806434: b.eq            #0x8064ac
    // 0x806438: LoadField: r4 = r3->field_7
    //     0x806438: ldur            w4, [x3, #7]
    // 0x80643c: DecompressPointer r4
    //     0x80643c: add             x4, x4, HEAP, lsl #32
    // 0x806440: stur            x4, [fp, #-8]
    // 0x806444: cmp             w4, NULL
    // 0x806448: b.eq            #0x8066d8
    // 0x80644c: mov             x0, x4
    // 0x806450: r2 = Null
    //     0x806450: mov             x2, NULL
    // 0x806454: r1 = Null
    //     0x806454: mov             x1, NULL
    // 0x806458: r4 = LoadClassIdInstr(r0)
    //     0x806458: ldur            x4, [x0, #-1]
    //     0x80645c: ubfx            x4, x4, #0xc, #0x14
    // 0x806460: sub             x4, x4, #0x892
    // 0x806464: cmp             x4, #0xd
    // 0x806468: b.ls            #0x806480
    // 0x80646c: r8 = BoxParentData
    //     0x80646c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x806470: ldr             x8, [x8, #0x318]
    // 0x806474: r3 = Null
    //     0x806474: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d2a8] Null
    //     0x806478: ldr             x3, [x3, #0x2a8]
    // 0x80647c: r0 = DefaultTypeTest()
    //     0x80647c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x806480: ldur            x0, [fp, #-8]
    // 0x806484: LoadField: r1 = r0->field_7
    //     0x806484: ldur            w1, [x0, #7]
    // 0x806488: DecompressPointer r1
    //     0x806488: add             x1, x1, HEAP, lsl #32
    // 0x80648c: ldr             x16, [fp, #0x10]
    // 0x806490: stp             x16, x1, [SP]
    // 0x806494: r0 = +()
    //     0x806494: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806498: ldr             x16, [fp, #0x18]
    // 0x80649c: ldur            lr, [fp, #-0x10]
    // 0x8064a0: stp             lr, x16, [SP, #8]
    // 0x8064a4: str             x0, [SP]
    // 0x8064a8: r0 = paintChild()
    //     0x8064a8: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x8064ac: ldr             x16, [fp, #0x20]
    // 0x8064b0: r30 = Instance__DecorationSlot
    //     0x8064b0: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1e8] Obj!_DecorationSlot@c44971
    //     0x8064b4: ldr             lr, [lr, #0x1e8]
    // 0x8064b8: stp             lr, x16, [SP]
    // 0x8064bc: r0 = childForSlot()
    //     0x8064bc: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x8064c0: mov             x3, x0
    // 0x8064c4: stur            x3, [fp, #-0x10]
    // 0x8064c8: cmp             w3, NULL
    // 0x8064cc: b.eq            #0x806544
    // 0x8064d0: LoadField: r4 = r3->field_7
    //     0x8064d0: ldur            w4, [x3, #7]
    // 0x8064d4: DecompressPointer r4
    //     0x8064d4: add             x4, x4, HEAP, lsl #32
    // 0x8064d8: stur            x4, [fp, #-8]
    // 0x8064dc: cmp             w4, NULL
    // 0x8064e0: b.eq            #0x8066dc
    // 0x8064e4: mov             x0, x4
    // 0x8064e8: r2 = Null
    //     0x8064e8: mov             x2, NULL
    // 0x8064ec: r1 = Null
    //     0x8064ec: mov             x1, NULL
    // 0x8064f0: r4 = LoadClassIdInstr(r0)
    //     0x8064f0: ldur            x4, [x0, #-1]
    //     0x8064f4: ubfx            x4, x4, #0xc, #0x14
    // 0x8064f8: sub             x4, x4, #0x892
    // 0x8064fc: cmp             x4, #0xd
    // 0x806500: b.ls            #0x806518
    // 0x806504: r8 = BoxParentData
    //     0x806504: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x806508: ldr             x8, [x8, #0x318]
    // 0x80650c: r3 = Null
    //     0x80650c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d2b8] Null
    //     0x806510: ldr             x3, [x3, #0x2b8]
    // 0x806514: r0 = DefaultTypeTest()
    //     0x806514: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x806518: ldur            x0, [fp, #-8]
    // 0x80651c: LoadField: r1 = r0->field_7
    //     0x80651c: ldur            w1, [x0, #7]
    // 0x806520: DecompressPointer r1
    //     0x806520: add             x1, x1, HEAP, lsl #32
    // 0x806524: ldr             x16, [fp, #0x10]
    // 0x806528: stp             x16, x1, [SP]
    // 0x80652c: r0 = +()
    //     0x80652c: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x806530: ldr             x16, [fp, #0x18]
    // 0x806534: ldur            lr, [fp, #-0x10]
    // 0x806538: stp             lr, x16, [SP, #8]
    // 0x80653c: str             x0, [SP]
    // 0x806540: r0 = paintChild()
    //     0x806540: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x806544: ldr             x16, [fp, #0x20]
    // 0x806548: r30 = Instance__DecorationSlot
    //     0x806548: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d1f0] Obj!_DecorationSlot@c44991
    //     0x80654c: ldr             lr, [lr, #0x1f0]
    // 0x806550: stp             lr, x16, [SP]
    // 0x806554: r0 = childForSlot()
    //     0x806554: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x806558: mov             x3, x0
    // 0x80655c: stur            x3, [fp, #-0x10]
    // 0x806560: cmp             w3, NULL
    // 0x806564: b.eq            #0x8065dc
    // 0x806568: LoadField: r4 = r3->field_7
    //     0x806568: ldur            w4, [x3, #7]
    // 0x80656c: DecompressPointer r4
    //     0x80656c: add             x4, x4, HEAP, lsl #32
    // 0x806570: stur            x4, [fp, #-8]
    // 0x806574: cmp             w4, NULL
    // 0x806578: b.eq            #0x8066e0
    // 0x80657c: mov             x0, x4
    // 0x806580: r2 = Null
    //     0x806580: mov             x2, NULL
    // 0x806584: r1 = Null
    //     0x806584: mov             x1, NULL
    // 0x806588: r4 = LoadClassIdInstr(r0)
    //     0x806588: ldur            x4, [x0, #-1]
    //     0x80658c: ubfx            x4, x4, #0xc, #0x14
    // 0x806590: sub             x4, x4, #0x892
    // 0x806594: cmp             x4, #0xd
    // 0x806598: b.ls            #0x8065b0
    // 0x80659c: r8 = BoxParentData
    //     0x80659c: add             x8, PP, #0xa, lsl #12  ; [pp+0xa318] Type: BoxParentData
    //     0x8065a0: ldr             x8, [x8, #0x318]
    // 0x8065a4: r3 = Null
    //     0x8065a4: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d2c8] Null
    //     0x8065a8: ldr             x3, [x3, #0x2c8]
    // 0x8065ac: r0 = DefaultTypeTest()
    //     0x8065ac: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x8065b0: ldur            x0, [fp, #-8]
    // 0x8065b4: LoadField: r1 = r0->field_7
    //     0x8065b4: ldur            w1, [x0, #7]
    // 0x8065b8: DecompressPointer r1
    //     0x8065b8: add             x1, x1, HEAP, lsl #32
    // 0x8065bc: ldr             x16, [fp, #0x10]
    // 0x8065c0: stp             x16, x1, [SP]
    // 0x8065c4: r0 = +()
    //     0x8065c4: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x8065c8: ldr             x16, [fp, #0x18]
    // 0x8065cc: ldur            lr, [fp, #-0x10]
    // 0x8065d0: stp             lr, x16, [SP, #8]
    // 0x8065d4: str             x0, [SP]
    // 0x8065d8: r0 = paintChild()
    //     0x8065d8: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x8065dc: r0 = Null
    //     0x8065dc: mov             x0, NULL
    // 0x8065e0: LeaveFrame
    //     0x8065e0: mov             SP, fp
    //     0x8065e4: ldp             fp, lr, [SP], #0x10
    // 0x8065e8: ret
    //     0x8065e8: ret             
    // 0x8065ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8065ec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8065f0: b               #0x80595c
    // 0x8065f4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8065f4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8065f8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8065f8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8065fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8065fc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x806600: stp             q4, q6, [SP, #-0x20]!
    // 0x806604: stp             q1, q2, [SP, #-0x20]!
    // 0x806608: SaveReg d0
    //     0x806608: str             q0, [SP, #-0x10]!
    // 0x80660c: stp             x0, x2, [SP, #-0x10]!
    // 0x806610: r0 = AllocateDouble()
    //     0x806610: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x806614: mov             x1, x0
    // 0x806618: ldp             x0, x2, [SP], #0x10
    // 0x80661c: RestoreReg d0
    //     0x80661c: ldr             q0, [SP], #0x10
    // 0x806620: ldp             q1, q2, [SP], #0x20
    // 0x806624: ldp             q4, q6, [SP], #0x20
    // 0x806628: b               #0x805b98
    // 0x80662c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x80662c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x806630: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x806630: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x806634: stp             q2, q3, [SP, #-0x20]!
    // 0x806638: stp             q0, q1, [SP, #-0x20]!
    // 0x80663c: stp             x0, x1, [SP, #-0x10]!
    // 0x806640: r0 = AllocateDouble()
    //     0x806640: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x806644: mov             x2, x0
    // 0x806648: ldp             x0, x1, [SP], #0x10
    // 0x80664c: ldp             q0, q1, [SP], #0x20
    // 0x806650: ldp             q2, q3, [SP], #0x20
    // 0x806654: b               #0x805e50
    // 0x806658: stp             q2, q3, [SP, #-0x20]!
    // 0x80665c: SaveReg d1
    //     0x80665c: str             q1, [SP, #-0x10]!
    // 0x806660: stp             x1, x2, [SP, #-0x10]!
    // 0x806664: SaveReg r0
    //     0x806664: str             x0, [SP, #-8]!
    // 0x806668: r0 = AllocateDouble()
    //     0x806668: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x80666c: mov             x3, x0
    // 0x806670: RestoreReg r0
    //     0x806670: ldr             x0, [SP], #8
    // 0x806674: ldp             x1, x2, [SP], #0x10
    // 0x806678: RestoreReg d1
    //     0x806678: ldr             q1, [SP], #0x10
    // 0x80667c: ldp             q2, q3, [SP], #0x20
    // 0x806680: b               #0x805e78
    // 0x806684: SaveReg d0
    //     0x806684: str             q0, [SP, #-0x10]!
    // 0x806688: SaveReg r0
    //     0x806688: str             x0, [SP, #-8]!
    // 0x80668c: r0 = AllocateDouble()
    //     0x80668c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x806690: mov             x1, x0
    // 0x806694: RestoreReg r0
    //     0x806694: ldr             x0, [SP], #8
    // 0x806698: RestoreReg d0
    //     0x806698: ldr             q0, [SP], #0x10
    // 0x80669c: b               #0x805eb4
    // 0x8066a0: stp             q0, q2, [SP, #-0x20]!
    // 0x8066a4: SaveReg r1
    //     0x8066a4: str             x1, [SP, #-8]!
    // 0x8066a8: r0 = AllocateDouble()
    //     0x8066a8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x8066ac: RestoreReg r1
    //     0x8066ac: ldr             x1, [SP], #8
    // 0x8066b0: ldp             q0, q2, [SP], #0x20
    // 0x8066b4: b               #0x805f08
    // 0x8066b8: r9 = _needsCompositing
    //     0x8066b8: ldr             x9, [PP, #0x4128]  ; [pp+0x4128] Field <RenderObject._needsCompositing@353266271>: late (offset: 0x38)
    // 0x8066bc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8066bc: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8066c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066c8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066cc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066d8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066dc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8066e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8066e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ contentPadding(/* No info */) {
    // ** addr: 0x8066e4, size: 0x18
    // 0x8066e4: ldr             x1, [SP]
    // 0x8066e8: LoadField: r2 = r1->field_63
    //     0x8066e8: ldur            w2, [x1, #0x63]
    // 0x8066ec: DecompressPointer r2
    //     0x8066ec: add             x2, x2, HEAP, lsl #32
    // 0x8066f0: LoadField: r0 = r2->field_7
    //     0x8066f0: ldur            w0, [x2, #7]
    // 0x8066f4: DecompressPointer r0
    //     0x8066f4: add             x0, x0, HEAP, lsl #32
    // 0x8066f8: ret
    //     0x8066f8: ret             
  }
  [closure] void _paintLabel(dynamic, PaintingContext, Offset) {
    // ** addr: 0x8066fc, size: 0x54
    // 0x8066fc: EnterFrame
    //     0x8066fc: stp             fp, lr, [SP, #-0x10]!
    //     0x806700: mov             fp, SP
    // 0x806704: AllocStack(0x18)
    //     0x806704: sub             SP, SP, #0x18
    // 0x806708: SetupParameters()
    //     0x806708: ldr             x0, [fp, #0x20]
    //     0x80670c: ldur            w1, [x0, #0x17]
    //     0x806710: add             x1, x1, HEAP, lsl #32
    // 0x806714: CheckStackOverflow
    //     0x806714: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x806718: cmp             SP, x16
    //     0x80671c: b.ls            #0x806748
    // 0x806720: LoadField: r0 = r1->field_f
    //     0x806720: ldur            w0, [x1, #0xf]
    // 0x806724: DecompressPointer r0
    //     0x806724: add             x0, x0, HEAP, lsl #32
    // 0x806728: ldr             x16, [fp, #0x18]
    // 0x80672c: stp             x16, x0, [SP, #8]
    // 0x806730: ldr             x16, [fp, #0x10]
    // 0x806734: str             x16, [SP]
    // 0x806738: r0 = _paintLabel()
    //     0x806738: bl              #0x806750  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_paintLabel
    // 0x80673c: LeaveFrame
    //     0x80673c: mov             SP, fp
    //     0x806740: ldp             fp, lr, [SP], #0x10
    // 0x806744: ret
    //     0x806744: ret             
    // 0x806748: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x806748: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x80674c: b               #0x806720
  }
  _ _paintLabel(/* No info */) {
    // ** addr: 0x806750, size: 0x64
    // 0x806750: EnterFrame
    //     0x806750: stp             fp, lr, [SP, #-0x10]!
    //     0x806754: mov             fp, SP
    // 0x806758: AllocStack(0x18)
    //     0x806758: sub             SP, SP, #0x18
    // 0x80675c: CheckStackOverflow
    //     0x80675c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x806760: cmp             SP, x16
    //     0x806764: b.ls            #0x8067a8
    // 0x806768: ldr             x16, [fp, #0x20]
    // 0x80676c: r30 = Instance__DecorationSlot
    //     0x80676c: add             lr, PP, #0x4d, lsl #12  ; [pp+0x4d178] Obj!_DecorationSlot@c44951
    //     0x806770: ldr             lr, [lr, #0x178]
    // 0x806774: stp             lr, x16, [SP]
    // 0x806778: r0 = childForSlot()
    //     0x806778: bl              #0x57b8b4  ; [package:flutter/src/material/input_decorator.dart] __RenderDecoration&RenderBox&SlottedContainerRenderObjectMixin::childForSlot
    // 0x80677c: cmp             w0, NULL
    // 0x806780: b.eq            #0x8067b0
    // 0x806784: ldr             x16, [fp, #0x18]
    // 0x806788: stp             x0, x16, [SP, #8]
    // 0x80678c: ldr             x16, [fp, #0x10]
    // 0x806790: str             x16, [SP]
    // 0x806794: r0 = paintChild()
    //     0x806794: bl              #0x7f7f30  ; [package:flutter/src/rendering/object.dart] PaintingContext::paintChild
    // 0x806798: r0 = Null
    //     0x806798: mov             x0, NULL
    // 0x80679c: LeaveFrame
    //     0x80679c: mov             SP, fp
    //     0x8067a0: ldp             fp, lr, [SP], #0x10
    // 0x8067a4: ret
    //     0x8067a4: ret             
    // 0x8067a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8067a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8067ac: b               #0x806768
    // 0x8067b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8067b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ describeSemanticsConfiguration(/* No info */) {
    // ** addr: 0x81fb64, size: 0x5c
    // 0x81fb64: EnterFrame
    //     0x81fb64: stp             fp, lr, [SP, #-0x10]!
    //     0x81fb68: mov             fp, SP
    // 0x81fb6c: r1 = 1
    //     0x81fb6c: movz            x1, #0x1
    // 0x81fb70: r0 = AllocateContext()
    //     0x81fb70: bl              #0xc5def4  ; AllocateContextStub
    // 0x81fb74: mov             x1, x0
    // 0x81fb78: ldr             x0, [fp, #0x18]
    // 0x81fb7c: StoreField: r1->field_f = r0
    //     0x81fb7c: stur            w0, [x1, #0xf]
    // 0x81fb80: mov             x2, x1
    // 0x81fb84: r1 = Function '_childSemanticsConfigurationDelegate@159019562':.
    //     0x81fb84: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d378] AnonymousClosure: (0x81fbc0), in [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_childSemanticsConfigurationDelegate (0x81fc0c)
    //     0x81fb88: ldr             x1, [x1, #0x378]
    // 0x81fb8c: r0 = AllocateClosure()
    //     0x81fb8c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x81fb90: ldr             x1, [fp, #0x10]
    // 0x81fb94: StoreField: r1->field_27 = r0
    //     0x81fb94: stur            w0, [x1, #0x27]
    //     0x81fb98: ldurb           w16, [x1, #-1]
    //     0x81fb9c: ldurb           w17, [x0, #-1]
    //     0x81fba0: and             x16, x17, x16, lsr #2
    //     0x81fba4: tst             x16, HEAP, lsr #32
    //     0x81fba8: b.eq            #0x81fbb0
    //     0x81fbac: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x81fbb0: r0 = Null
    //     0x81fbb0: mov             x0, NULL
    // 0x81fbb4: LeaveFrame
    //     0x81fbb4: mov             SP, fp
    //     0x81fbb8: ldp             fp, lr, [SP], #0x10
    // 0x81fbbc: ret
    //     0x81fbbc: ret             
  }
  [closure] ChildSemanticsConfigurationsResult _childSemanticsConfigurationDelegate(dynamic, List<SemanticsConfiguration>) {
    // ** addr: 0x81fbc0, size: 0x4c
    // 0x81fbc0: EnterFrame
    //     0x81fbc0: stp             fp, lr, [SP, #-0x10]!
    //     0x81fbc4: mov             fp, SP
    // 0x81fbc8: AllocStack(0x10)
    //     0x81fbc8: sub             SP, SP, #0x10
    // 0x81fbcc: SetupParameters()
    //     0x81fbcc: ldr             x0, [fp, #0x18]
    //     0x81fbd0: ldur            w1, [x0, #0x17]
    //     0x81fbd4: add             x1, x1, HEAP, lsl #32
    // 0x81fbd8: CheckStackOverflow
    //     0x81fbd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x81fbdc: cmp             SP, x16
    //     0x81fbe0: b.ls            #0x81fc04
    // 0x81fbe4: LoadField: r0 = r1->field_f
    //     0x81fbe4: ldur            w0, [x1, #0xf]
    // 0x81fbe8: DecompressPointer r0
    //     0x81fbe8: add             x0, x0, HEAP, lsl #32
    // 0x81fbec: ldr             x16, [fp, #0x10]
    // 0x81fbf0: stp             x16, x0, [SP]
    // 0x81fbf4: r0 = _childSemanticsConfigurationDelegate()
    //     0x81fbf4: bl              #0x81fc0c  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_childSemanticsConfigurationDelegate
    // 0x81fbf8: LeaveFrame
    //     0x81fbf8: mov             SP, fp
    //     0x81fbfc: ldp             fp, lr, [SP], #0x10
    // 0x81fc00: ret
    //     0x81fc00: ret             
    // 0x81fc04: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x81fc04: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x81fc08: b               #0x81fbe4
  }
  _ _childSemanticsConfigurationDelegate(/* No info */) {
    // ** addr: 0x81fc0c, size: 0x4d0
    // 0x81fc0c: EnterFrame
    //     0x81fc0c: stp             fp, lr, [SP, #-0x10]!
    //     0x81fc10: mov             fp, SP
    // 0x81fc14: AllocStack(0x48)
    //     0x81fc14: sub             SP, SP, #0x48
    // 0x81fc18: CheckStackOverflow
    //     0x81fc18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x81fc1c: cmp             SP, x16
    //     0x81fc20: b.ls            #0x8200c0
    // 0x81fc24: r0 = ChildSemanticsConfigurationsResultBuilder()
    //     0x81fc24: bl              #0x8202f8  ; AllocateChildSemanticsConfigurationsResultBuilderStub -> ChildSemanticsConfigurationsResultBuilder (size=0x10)
    // 0x81fc28: stur            x0, [fp, #-8]
    // 0x81fc2c: str             x0, [SP]
    // 0x81fc30: r0 = ChildSemanticsConfigurationsResultBuilder()
    //     0x81fc30: bl              #0x8201f8  ; [package:flutter/src/semantics/semantics.dart] ChildSemanticsConfigurationsResultBuilder::ChildSemanticsConfigurationsResultBuilder
    // 0x81fc34: ldr             x0, [fp, #0x10]
    // 0x81fc38: r1 = LoadClassIdInstr(r0)
    //     0x81fc38: ldur            x1, [x0, #-1]
    //     0x81fc3c: ubfx            x1, x1, #0xc, #0x14
    // 0x81fc40: str             x0, [SP]
    // 0x81fc44: mov             x0, x1
    // 0x81fc48: r0 = GDT[cid_x0 + 0x11777]()
    //     0x81fc48: movz            x17, #0x1777
    //     0x81fc4c: movk            x17, #0x1, lsl #16
    //     0x81fc50: add             lr, x0, x17
    //     0x81fc54: ldr             lr, [x21, lr, lsl #3]
    //     0x81fc58: blr             lr
    // 0x81fc5c: mov             x2, x0
    // 0x81fc60: ldur            x1, [fp, #-8]
    // 0x81fc64: stur            x2, [fp, #-0x28]
    // 0x81fc68: LoadField: r3 = r1->field_7
    //     0x81fc68: ldur            w3, [x1, #7]
    // 0x81fc6c: DecompressPointer r3
    //     0x81fc6c: add             x3, x3, HEAP, lsl #32
    // 0x81fc70: stur            x3, [fp, #-0x20]
    // 0x81fc74: r5 = Null
    //     0x81fc74: mov             x5, NULL
    // 0x81fc78: r4 = Null
    //     0x81fc78: mov             x4, NULL
    // 0x81fc7c: stur            x5, [fp, #-0x10]
    // 0x81fc80: stur            x4, [fp, #-0x18]
    // 0x81fc84: CheckStackOverflow
    //     0x81fc84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x81fc88: cmp             SP, x16
    //     0x81fc8c: b.ls            #0x8200c8
    // 0x81fc90: r0 = LoadClassIdInstr(r2)
    //     0x81fc90: ldur            x0, [x2, #-1]
    //     0x81fc94: ubfx            x0, x0, #0xc, #0x14
    // 0x81fc98: str             x2, [SP]
    // 0x81fc9c: r0 = GDT[cid_x0 + 0x446]()
    //     0x81fc9c: add             lr, x0, #0x446
    //     0x81fca0: ldr             lr, [x21, lr, lsl #3]
    //     0x81fca4: blr             lr
    // 0x81fca8: tbnz            w0, #4, #0x81fef8
    // 0x81fcac: ldur            x1, [fp, #-0x28]
    // 0x81fcb0: r0 = LoadClassIdInstr(r1)
    //     0x81fcb0: ldur            x0, [x1, #-1]
    //     0x81fcb4: ubfx            x0, x0, #0xc, #0x14
    // 0x81fcb8: str             x1, [SP]
    // 0x81fcbc: r0 = GDT[cid_x0 + 0x598]()
    //     0x81fcbc: add             lr, x0, #0x598
    //     0x81fcc0: ldr             lr, [x21, lr, lsl #3]
    //     0x81fcc4: blr             lr
    // 0x81fcc8: stur            x0, [fp, #-0x30]
    // 0x81fccc: LoadField: r1 = r0->field_8f
    //     0x81fccc: ldur            w1, [x0, #0x8f]
    // 0x81fcd0: DecompressPointer r1
    //     0x81fcd0: add             x1, x1, HEAP, lsl #32
    // 0x81fcd4: cmp             w1, NULL
    // 0x81fcd8: b.ne            #0x81fce4
    // 0x81fcdc: r0 = Null
    //     0x81fcdc: mov             x0, NULL
    // 0x81fce0: b               #0x81fcf4
    // 0x81fce4: r16 = Instance_SemanticsTag
    //     0x81fce4: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d380] Obj!SemanticsTag@c2d2d1
    //     0x81fce8: ldr             x16, [x16, #0x380]
    // 0x81fcec: stp             x16, x1, [SP]
    // 0x81fcf0: r0 = contains()
    //     0x81fcf0: bl              #0x5a950c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::contains
    // 0x81fcf4: cmp             w0, NULL
    // 0x81fcf8: b.ne            #0x81fd04
    // 0x81fcfc: ldur            x0, [fp, #-0x10]
    // 0x81fd00: b               #0x81fd90
    // 0x81fd04: tbnz            w0, #4, #0x81fd8c
    // 0x81fd08: ldur            x0, [fp, #-0x10]
    // 0x81fd0c: cmp             w0, NULL
    // 0x81fd10: b.ne            #0x81fd50
    // 0x81fd14: r0 = InitLateStaticField(0x0) // [dart:core] _GrowableList<X0>::_emptyList
    //     0x81fd14: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x81fd18: ldr             x0, [x0]
    //     0x81fd1c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x81fd20: cmp             w0, w16
    //     0x81fd24: b.ne            #0x81fd30
    //     0x81fd28: ldr             x2, [PP, #0x508]  ; [pp+0x508] Field <_GrowableList@0150898._emptyList@0150898>: static late final (offset: 0x0)
    //     0x81fd2c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x81fd30: r1 = <SemanticsConfiguration>
    //     0x81fd30: ldr             x1, [PP, #0x3be8]  ; [pp+0x3be8] TypeArguments: <SemanticsConfiguration>
    // 0x81fd34: stur            x0, [fp, #-0x38]
    // 0x81fd38: r0 = AllocateGrowableArray()
    //     0x81fd38: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x81fd3c: mov             x1, x0
    // 0x81fd40: ldur            x0, [fp, #-0x38]
    // 0x81fd44: StoreField: r1->field_f = r0
    //     0x81fd44: stur            w0, [x1, #0xf]
    // 0x81fd48: StoreField: r1->field_b = rZR
    //     0x81fd48: stur            wzr, [x1, #0xb]
    // 0x81fd4c: b               #0x81fd54
    // 0x81fd50: mov             x1, x0
    // 0x81fd54: stur            x1, [fp, #-0x38]
    // 0x81fd58: r0 = LoadClassIdInstr(r1)
    //     0x81fd58: ldur            x0, [x1, #-1]
    //     0x81fd5c: ubfx            x0, x0, #0xc, #0x14
    // 0x81fd60: ldur            x16, [fp, #-0x30]
    // 0x81fd64: stp             x16, x1, [SP]
    // 0x81fd68: r0 = GDT[cid_x0 + 0x12a20]()
    //     0x81fd68: movz            x17, #0x2a20
    //     0x81fd6c: movk            x17, #0x1, lsl #16
    //     0x81fd70: add             lr, x0, x17
    //     0x81fd74: ldr             lr, [x21, lr, lsl #3]
    //     0x81fd78: blr             lr
    // 0x81fd7c: ldur            x5, [fp, #-0x38]
    // 0x81fd80: ldur            x4, [fp, #-0x18]
    // 0x81fd84: ldur            x2, [fp, #-0x20]
    // 0x81fd88: b               #0x81fee8
    // 0x81fd8c: ldur            x0, [fp, #-0x10]
    // 0x81fd90: ldur            x1, [fp, #-0x30]
    // 0x81fd94: LoadField: r2 = r1->field_8f
    //     0x81fd94: ldur            w2, [x1, #0x8f]
    // 0x81fd98: DecompressPointer r2
    //     0x81fd98: add             x2, x2, HEAP, lsl #32
    // 0x81fd9c: cmp             w2, NULL
    // 0x81fda0: b.ne            #0x81fdac
    // 0x81fda4: r0 = Null
    //     0x81fda4: mov             x0, NULL
    // 0x81fda8: b               #0x81fdbc
    // 0x81fdac: r16 = Instance_SemanticsTag
    //     0x81fdac: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d388] Obj!SemanticsTag@c2d2c1
    //     0x81fdb0: ldr             x16, [x16, #0x388]
    // 0x81fdb4: stp             x16, x2, [SP]
    // 0x81fdb8: r0 = contains()
    //     0x81fdb8: bl              #0x5a950c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::contains
    // 0x81fdbc: cmp             w0, NULL
    // 0x81fdc0: b.ne            #0x81fdcc
    // 0x81fdc4: ldur            x0, [fp, #-0x18]
    // 0x81fdc8: b               #0x81fe54
    // 0x81fdcc: tbnz            w0, #4, #0x81fe50
    // 0x81fdd0: ldur            x0, [fp, #-0x18]
    // 0x81fdd4: cmp             w0, NULL
    // 0x81fdd8: b.ne            #0x81fe18
    // 0x81fddc: r0 = InitLateStaticField(0x0) // [dart:core] _GrowableList<X0>::_emptyList
    //     0x81fddc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x81fde0: ldr             x0, [x0]
    //     0x81fde4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x81fde8: cmp             w0, w16
    //     0x81fdec: b.ne            #0x81fdf8
    //     0x81fdf0: ldr             x2, [PP, #0x508]  ; [pp+0x508] Field <_GrowableList@0150898._emptyList@0150898>: static late final (offset: 0x0)
    //     0x81fdf4: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x81fdf8: r1 = <SemanticsConfiguration>
    //     0x81fdf8: ldr             x1, [PP, #0x3be8]  ; [pp+0x3be8] TypeArguments: <SemanticsConfiguration>
    // 0x81fdfc: stur            x0, [fp, #-0x38]
    // 0x81fe00: r0 = AllocateGrowableArray()
    //     0x81fe00: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x81fe04: mov             x1, x0
    // 0x81fe08: ldur            x0, [fp, #-0x38]
    // 0x81fe0c: StoreField: r1->field_f = r0
    //     0x81fe0c: stur            w0, [x1, #0xf]
    // 0x81fe10: StoreField: r1->field_b = rZR
    //     0x81fe10: stur            wzr, [x1, #0xb]
    // 0x81fe14: b               #0x81fe1c
    // 0x81fe18: mov             x1, x0
    // 0x81fe1c: stur            x1, [fp, #-0x38]
    // 0x81fe20: r0 = LoadClassIdInstr(r1)
    //     0x81fe20: ldur            x0, [x1, #-1]
    //     0x81fe24: ubfx            x0, x0, #0xc, #0x14
    // 0x81fe28: ldur            x16, [fp, #-0x30]
    // 0x81fe2c: stp             x16, x1, [SP]
    // 0x81fe30: r0 = GDT[cid_x0 + 0x12a20]()
    //     0x81fe30: movz            x17, #0x2a20
    //     0x81fe34: movk            x17, #0x1, lsl #16
    //     0x81fe38: add             lr, x0, x17
    //     0x81fe3c: ldr             lr, [x21, lr, lsl #3]
    //     0x81fe40: blr             lr
    // 0x81fe44: ldur            x0, [fp, #-0x38]
    // 0x81fe48: ldur            x2, [fp, #-0x20]
    // 0x81fe4c: b               #0x81fee0
    // 0x81fe50: ldur            x0, [fp, #-0x18]
    // 0x81fe54: ldur            x1, [fp, #-0x20]
    // 0x81fe58: LoadField: r2 = r1->field_b
    //     0x81fe58: ldur            w2, [x1, #0xb]
    // 0x81fe5c: DecompressPointer r2
    //     0x81fe5c: add             x2, x2, HEAP, lsl #32
    // 0x81fe60: stur            x2, [fp, #-0x38]
    // 0x81fe64: LoadField: r3 = r1->field_f
    //     0x81fe64: ldur            w3, [x1, #0xf]
    // 0x81fe68: DecompressPointer r3
    //     0x81fe68: add             x3, x3, HEAP, lsl #32
    // 0x81fe6c: LoadField: r4 = r3->field_b
    //     0x81fe6c: ldur            w4, [x3, #0xb]
    // 0x81fe70: DecompressPointer r4
    //     0x81fe70: add             x4, x4, HEAP, lsl #32
    // 0x81fe74: cmp             w2, w4
    // 0x81fe78: b.ne            #0x81fe84
    // 0x81fe7c: str             x1, [SP]
    // 0x81fe80: r0 = _growToNextCapacity()
    //     0x81fe80: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x81fe84: ldur            x2, [fp, #-0x20]
    // 0x81fe88: ldur            x0, [fp, #-0x38]
    // 0x81fe8c: r3 = LoadInt32Instr(r0)
    //     0x81fe8c: sbfx            x3, x0, #1, #0x1f
    // 0x81fe90: add             x0, x3, #1
    // 0x81fe94: lsl             x1, x0, #1
    // 0x81fe98: StoreField: r2->field_b = r1
    //     0x81fe98: stur            w1, [x2, #0xb]
    // 0x81fe9c: mov             x1, x3
    // 0x81fea0: cmp             x1, x0
    // 0x81fea4: b.hs            #0x8200d0
    // 0x81fea8: LoadField: r1 = r2->field_f
    //     0x81fea8: ldur            w1, [x2, #0xf]
    // 0x81feac: DecompressPointer r1
    //     0x81feac: add             x1, x1, HEAP, lsl #32
    // 0x81feb0: ldur            x0, [fp, #-0x30]
    // 0x81feb4: ArrayStore: r1[r3] = r0  ; List_4
    //     0x81feb4: add             x25, x1, x3, lsl #2
    //     0x81feb8: add             x25, x25, #0xf
    //     0x81febc: str             w0, [x25]
    //     0x81fec0: tbz             w0, #0, #0x81fedc
    //     0x81fec4: ldurb           w16, [x1, #-1]
    //     0x81fec8: ldurb           w17, [x0, #-1]
    //     0x81fecc: and             x16, x17, x16, lsr #2
    //     0x81fed0: tst             x16, HEAP, lsr #32
    //     0x81fed4: b.eq            #0x81fedc
    //     0x81fed8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x81fedc: ldur            x0, [fp, #-0x18]
    // 0x81fee0: ldur            x5, [fp, #-0x10]
    // 0x81fee4: mov             x4, x0
    // 0x81fee8: ldur            x1, [fp, #-8]
    // 0x81feec: mov             x3, x2
    // 0x81fef0: ldur            x2, [fp, #-0x28]
    // 0x81fef4: b               #0x81fc7c
    // 0x81fef8: ldur            x3, [fp, #-0x10]
    // 0x81fefc: cmp             w3, NULL
    // 0x81ff00: b.eq            #0x81ffd0
    // 0x81ff04: ldur            x4, [fp, #-8]
    // 0x81ff08: LoadField: r5 = r4->field_b
    //     0x81ff08: ldur            w5, [x4, #0xb]
    // 0x81ff0c: DecompressPointer r5
    //     0x81ff0c: add             x5, x5, HEAP, lsl #32
    // 0x81ff10: stur            x5, [fp, #-0x20]
    // 0x81ff14: LoadField: r2 = r5->field_7
    //     0x81ff14: ldur            w2, [x5, #7]
    // 0x81ff18: DecompressPointer r2
    //     0x81ff18: add             x2, x2, HEAP, lsl #32
    // 0x81ff1c: mov             x0, x3
    // 0x81ff20: r1 = Null
    //     0x81ff20: mov             x1, NULL
    // 0x81ff24: cmp             w2, NULL
    // 0x81ff28: b.eq            #0x81ff48
    // 0x81ff2c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x81ff2c: ldur            w4, [x2, #0x17]
    // 0x81ff30: DecompressPointer r4
    //     0x81ff30: add             x4, x4, HEAP, lsl #32
    // 0x81ff34: r8 = X0
    //     0x81ff34: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x81ff38: LoadField: r9 = r4->field_7
    //     0x81ff38: ldur            x9, [x4, #7]
    // 0x81ff3c: r3 = Null
    //     0x81ff3c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d390] Null
    //     0x81ff40: ldr             x3, [x3, #0x390]
    // 0x81ff44: blr             x9
    // 0x81ff48: ldur            x0, [fp, #-0x20]
    // 0x81ff4c: LoadField: r1 = r0->field_b
    //     0x81ff4c: ldur            w1, [x0, #0xb]
    // 0x81ff50: DecompressPointer r1
    //     0x81ff50: add             x1, x1, HEAP, lsl #32
    // 0x81ff54: stur            x1, [fp, #-0x28]
    // 0x81ff58: LoadField: r2 = r0->field_f
    //     0x81ff58: ldur            w2, [x0, #0xf]
    // 0x81ff5c: DecompressPointer r2
    //     0x81ff5c: add             x2, x2, HEAP, lsl #32
    // 0x81ff60: LoadField: r3 = r2->field_b
    //     0x81ff60: ldur            w3, [x2, #0xb]
    // 0x81ff64: DecompressPointer r3
    //     0x81ff64: add             x3, x3, HEAP, lsl #32
    // 0x81ff68: cmp             w1, w3
    // 0x81ff6c: b.ne            #0x81ff78
    // 0x81ff70: str             x0, [SP]
    // 0x81ff74: r0 = _growToNextCapacity()
    //     0x81ff74: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x81ff78: ldur            x2, [fp, #-0x20]
    // 0x81ff7c: ldur            x0, [fp, #-0x28]
    // 0x81ff80: r3 = LoadInt32Instr(r0)
    //     0x81ff80: sbfx            x3, x0, #1, #0x1f
    // 0x81ff84: add             x0, x3, #1
    // 0x81ff88: lsl             x1, x0, #1
    // 0x81ff8c: StoreField: r2->field_b = r1
    //     0x81ff8c: stur            w1, [x2, #0xb]
    // 0x81ff90: mov             x1, x3
    // 0x81ff94: cmp             x1, x0
    // 0x81ff98: b.hs            #0x8200d4
    // 0x81ff9c: LoadField: r1 = r2->field_f
    //     0x81ff9c: ldur            w1, [x2, #0xf]
    // 0x81ffa0: DecompressPointer r1
    //     0x81ffa0: add             x1, x1, HEAP, lsl #32
    // 0x81ffa4: ldur            x0, [fp, #-0x10]
    // 0x81ffa8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x81ffa8: add             x25, x1, x3, lsl #2
    //     0x81ffac: add             x25, x25, #0xf
    //     0x81ffb0: str             w0, [x25]
    //     0x81ffb4: tbz             w0, #0, #0x81ffd0
    //     0x81ffb8: ldurb           w16, [x1, #-1]
    //     0x81ffbc: ldurb           w17, [x0, #-1]
    //     0x81ffc0: and             x16, x17, x16, lsr #2
    //     0x81ffc4: tst             x16, HEAP, lsr #32
    //     0x81ffc8: b.eq            #0x81ffd0
    //     0x81ffcc: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x81ffd0: ldur            x3, [fp, #-0x18]
    // 0x81ffd4: cmp             w3, NULL
    // 0x81ffd8: b.eq            #0x8200a8
    // 0x81ffdc: ldur            x4, [fp, #-8]
    // 0x81ffe0: LoadField: r5 = r4->field_b
    //     0x81ffe0: ldur            w5, [x4, #0xb]
    // 0x81ffe4: DecompressPointer r5
    //     0x81ffe4: add             x5, x5, HEAP, lsl #32
    // 0x81ffe8: stur            x5, [fp, #-0x10]
    // 0x81ffec: LoadField: r2 = r5->field_7
    //     0x81ffec: ldur            w2, [x5, #7]
    // 0x81fff0: DecompressPointer r2
    //     0x81fff0: add             x2, x2, HEAP, lsl #32
    // 0x81fff4: mov             x0, x3
    // 0x81fff8: r1 = Null
    //     0x81fff8: mov             x1, NULL
    // 0x81fffc: cmp             w2, NULL
    // 0x820000: b.eq            #0x820020
    // 0x820004: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x820004: ldur            w4, [x2, #0x17]
    // 0x820008: DecompressPointer r4
    //     0x820008: add             x4, x4, HEAP, lsl #32
    // 0x82000c: r8 = X0
    //     0x82000c: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x820010: LoadField: r9 = r4->field_7
    //     0x820010: ldur            x9, [x4, #7]
    // 0x820014: r3 = Null
    //     0x820014: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d3a0] Null
    //     0x820018: ldr             x3, [x3, #0x3a0]
    // 0x82001c: blr             x9
    // 0x820020: ldur            x0, [fp, #-0x10]
    // 0x820024: LoadField: r1 = r0->field_b
    //     0x820024: ldur            w1, [x0, #0xb]
    // 0x820028: DecompressPointer r1
    //     0x820028: add             x1, x1, HEAP, lsl #32
    // 0x82002c: stur            x1, [fp, #-0x20]
    // 0x820030: LoadField: r2 = r0->field_f
    //     0x820030: ldur            w2, [x0, #0xf]
    // 0x820034: DecompressPointer r2
    //     0x820034: add             x2, x2, HEAP, lsl #32
    // 0x820038: LoadField: r3 = r2->field_b
    //     0x820038: ldur            w3, [x2, #0xb]
    // 0x82003c: DecompressPointer r3
    //     0x82003c: add             x3, x3, HEAP, lsl #32
    // 0x820040: cmp             w1, w3
    // 0x820044: b.ne            #0x820050
    // 0x820048: str             x0, [SP]
    // 0x82004c: r0 = _growToNextCapacity()
    //     0x82004c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x820050: ldur            x2, [fp, #-0x10]
    // 0x820054: ldur            x0, [fp, #-0x20]
    // 0x820058: r3 = LoadInt32Instr(r0)
    //     0x820058: sbfx            x3, x0, #1, #0x1f
    // 0x82005c: add             x0, x3, #1
    // 0x820060: lsl             x1, x0, #1
    // 0x820064: StoreField: r2->field_b = r1
    //     0x820064: stur            w1, [x2, #0xb]
    // 0x820068: mov             x1, x3
    // 0x82006c: cmp             x1, x0
    // 0x820070: b.hs            #0x8200d8
    // 0x820074: LoadField: r1 = r2->field_f
    //     0x820074: ldur            w1, [x2, #0xf]
    // 0x820078: DecompressPointer r1
    //     0x820078: add             x1, x1, HEAP, lsl #32
    // 0x82007c: ldur            x0, [fp, #-0x18]
    // 0x820080: ArrayStore: r1[r3] = r0  ; List_4
    //     0x820080: add             x25, x1, x3, lsl #2
    //     0x820084: add             x25, x25, #0xf
    //     0x820088: str             w0, [x25]
    //     0x82008c: tbz             w0, #0, #0x8200a8
    //     0x820090: ldurb           w16, [x1, #-1]
    //     0x820094: ldurb           w17, [x0, #-1]
    //     0x820098: and             x16, x17, x16, lsr #2
    //     0x82009c: tst             x16, HEAP, lsr #32
    //     0x8200a0: b.eq            #0x8200a8
    //     0x8200a4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x8200a8: ldur            x16, [fp, #-8]
    // 0x8200ac: str             x16, [SP]
    // 0x8200b0: r0 = build()
    //     0x8200b0: bl              #0x8201a4  ; [package:flutter/src/semantics/semantics.dart] ChildSemanticsConfigurationsResultBuilder::build
    // 0x8200b4: LeaveFrame
    //     0x8200b4: mov             SP, fp
    //     0x8200b8: ldp             fp, lr, [SP], #0x10
    // 0x8200bc: ret
    //     0x8200bc: ret             
    // 0x8200c0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8200c0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8200c4: b               #0x81fc24
    // 0x8200c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8200c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8200cc: b               #0x81fc90
    // 0x8200d0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8200d0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8200d4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8200d4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8200d8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8200d8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  set _ textDirection=(/* No info */) {
    // ** addr: 0xa71454, size: 0x80
    // 0xa71454: EnterFrame
    //     0xa71454: stp             fp, lr, [SP, #-0x10]!
    //     0xa71458: mov             fp, SP
    // 0xa7145c: AllocStack(0x8)
    //     0xa7145c: sub             SP, SP, #8
    // 0xa71460: CheckStackOverflow
    //     0xa71460: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa71464: cmp             SP, x16
    //     0xa71468: b.ls            #0xa714cc
    // 0xa7146c: ldr             x1, [fp, #0x18]
    // 0xa71470: LoadField: r0 = r1->field_67
    //     0xa71470: ldur            w0, [x1, #0x67]
    // 0xa71474: DecompressPointer r0
    //     0xa71474: add             x0, x0, HEAP, lsl #32
    // 0xa71478: ldr             x2, [fp, #0x10]
    // 0xa7147c: cmp             w0, w2
    // 0xa71480: b.ne            #0xa71494
    // 0xa71484: r0 = Null
    //     0xa71484: mov             x0, NULL
    // 0xa71488: LeaveFrame
    //     0xa71488: mov             SP, fp
    //     0xa7148c: ldp             fp, lr, [SP], #0x10
    // 0xa71490: ret
    //     0xa71490: ret             
    // 0xa71494: mov             x0, x2
    // 0xa71498: StoreField: r1->field_67 = r0
    //     0xa71498: stur            w0, [x1, #0x67]
    //     0xa7149c: ldurb           w16, [x1, #-1]
    //     0xa714a0: ldurb           w17, [x0, #-1]
    //     0xa714a4: and             x16, x17, x16, lsr #2
    //     0xa714a8: tst             x16, HEAP, lsr #32
    //     0xa714ac: b.eq            #0xa714b4
    //     0xa714b0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa714b4: str             x1, [SP]
    // 0xa714b8: r0 = markNeedsLayout()
    //     0xa714b8: bl              #0x7c70e4  ; [package:flutter/src/rendering/box.dart] RenderBox::markNeedsLayout
    // 0xa714bc: r0 = Null
    //     0xa714bc: mov             x0, NULL
    // 0xa714c0: LeaveFrame
    //     0xa714c0: mov             SP, fp
    //     0xa714c4: ldp             fp, lr, [SP], #0x10
    // 0xa714c8: ret
    //     0xa714c8: ret             
    // 0xa714cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa714cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa714d0: b               #0xa7146c
  }
  set _ textBaseline=(/* No info */) {
    // ** addr: 0xa714d4, size: 0x80
    // 0xa714d4: EnterFrame
    //     0xa714d4: stp             fp, lr, [SP, #-0x10]!
    //     0xa714d8: mov             fp, SP
    // 0xa714dc: AllocStack(0x8)
    //     0xa714dc: sub             SP, SP, #8
    // 0xa714e0: CheckStackOverflow
    //     0xa714e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa714e4: cmp             SP, x16
    //     0xa714e8: b.ls            #0xa7154c
    // 0xa714ec: ldr             x1, [fp, #0x18]
    // 0xa714f0: LoadField: r0 = r1->field_6b
    //     0xa714f0: ldur            w0, [x1, #0x6b]
    // 0xa714f4: DecompressPointer r0
    //     0xa714f4: add             x0, x0, HEAP, lsl #32
    // 0xa714f8: ldr             x2, [fp, #0x10]
    // 0xa714fc: cmp             w0, w2
    // 0xa71500: b.ne            #0xa71514
    // 0xa71504: r0 = Null
    //     0xa71504: mov             x0, NULL
    // 0xa71508: LeaveFrame
    //     0xa71508: mov             SP, fp
    //     0xa7150c: ldp             fp, lr, [SP], #0x10
    // 0xa71510: ret
    //     0xa71510: ret             
    // 0xa71514: mov             x0, x2
    // 0xa71518: StoreField: r1->field_6b = r0
    //     0xa71518: stur            w0, [x1, #0x6b]
    //     0xa7151c: ldurb           w16, [x1, #-1]
    //     0xa71520: ldurb           w17, [x0, #-1]
    //     0xa71524: and             x16, x17, x16, lsr #2
    //     0xa71528: tst             x16, HEAP, lsr #32
    //     0xa7152c: b.eq            #0xa71534
    //     0xa71530: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa71534: str             x1, [SP]
    // 0xa71538: r0 = markNeedsLayout()
    //     0xa71538: bl              #0x7c70e4  ; [package:flutter/src/rendering/box.dart] RenderBox::markNeedsLayout
    // 0xa7153c: r0 = Null
    //     0xa7153c: mov             x0, NULL
    // 0xa71540: LeaveFrame
    //     0xa71540: mov             SP, fp
    //     0xa71544: ldp             fp, lr, [SP], #0x10
    // 0xa71548: ret
    //     0xa71548: ret             
    // 0xa7154c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7154c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa71550: b               #0xa714ec
  }
  set _ isFocused=(/* No info */) {
    // ** addr: 0xa71554, size: 0x64
    // 0xa71554: EnterFrame
    //     0xa71554: stp             fp, lr, [SP, #-0x10]!
    //     0xa71558: mov             fp, SP
    // 0xa7155c: AllocStack(0x8)
    //     0xa7155c: sub             SP, SP, #8
    // 0xa71560: CheckStackOverflow
    //     0xa71560: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa71564: cmp             SP, x16
    //     0xa71568: b.ls            #0xa715b0
    // 0xa7156c: ldr             x0, [fp, #0x18]
    // 0xa71570: LoadField: r1 = r0->field_73
    //     0xa71570: ldur            w1, [x0, #0x73]
    // 0xa71574: DecompressPointer r1
    //     0xa71574: add             x1, x1, HEAP, lsl #32
    // 0xa71578: ldr             x2, [fp, #0x10]
    // 0xa7157c: cmp             w1, w2
    // 0xa71580: b.ne            #0xa71594
    // 0xa71584: r0 = Null
    //     0xa71584: mov             x0, NULL
    // 0xa71588: LeaveFrame
    //     0xa71588: mov             SP, fp
    //     0xa7158c: ldp             fp, lr, [SP], #0x10
    // 0xa71590: ret
    //     0xa71590: ret             
    // 0xa71594: StoreField: r0->field_73 = r2
    //     0xa71594: stur            w2, [x0, #0x73]
    // 0xa71598: str             x0, [SP]
    // 0xa7159c: r0 = markNeedsSemanticsUpdate()
    //     0xa7159c: bl              #0x5fbccc  ; [package:flutter/src/rendering/object.dart] RenderObject::markNeedsSemanticsUpdate
    // 0xa715a0: r0 = Null
    //     0xa715a0: mov             x0, NULL
    // 0xa715a4: LeaveFrame
    //     0xa715a4: mov             SP, fp
    //     0xa715a8: ldp             fp, lr, [SP], #0x10
    // 0xa715ac: ret
    //     0xa715ac: ret             
    // 0xa715b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa715b0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa715b4: b               #0xa7156c
  }
  set _ decoration=(/* No info */) {
    // ** addr: 0xa715b8, size: 0x88
    // 0xa715b8: EnterFrame
    //     0xa715b8: stp             fp, lr, [SP, #-0x10]!
    //     0xa715bc: mov             fp, SP
    // 0xa715c0: AllocStack(0x10)
    //     0xa715c0: sub             SP, SP, #0x10
    // 0xa715c4: CheckStackOverflow
    //     0xa715c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa715c8: cmp             SP, x16
    //     0xa715cc: b.ls            #0xa71638
    // 0xa715d0: ldr             x0, [fp, #0x18]
    // 0xa715d4: LoadField: r1 = r0->field_63
    //     0xa715d4: ldur            w1, [x0, #0x63]
    // 0xa715d8: DecompressPointer r1
    //     0xa715d8: add             x1, x1, HEAP, lsl #32
    // 0xa715dc: ldr             x16, [fp, #0x10]
    // 0xa715e0: stp             x16, x1, [SP]
    // 0xa715e4: r0 = ==()
    //     0xa715e4: bl              #0xbd70d4  ; [package:flutter/src/material/input_decorator.dart] _Decoration::==
    // 0xa715e8: tbnz            w0, #4, #0xa715fc
    // 0xa715ec: r0 = Null
    //     0xa715ec: mov             x0, NULL
    // 0xa715f0: LeaveFrame
    //     0xa715f0: mov             SP, fp
    //     0xa715f4: ldp             fp, lr, [SP], #0x10
    // 0xa715f8: ret
    //     0xa715f8: ret             
    // 0xa715fc: ldr             x1, [fp, #0x18]
    // 0xa71600: ldr             x0, [fp, #0x10]
    // 0xa71604: StoreField: r1->field_63 = r0
    //     0xa71604: stur            w0, [x1, #0x63]
    //     0xa71608: ldurb           w16, [x1, #-1]
    //     0xa7160c: ldurb           w17, [x0, #-1]
    //     0xa71610: and             x16, x17, x16, lsr #2
    //     0xa71614: tst             x16, HEAP, lsr #32
    //     0xa71618: b.eq            #0xa71620
    //     0xa7161c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa71620: str             x1, [SP]
    // 0xa71624: r0 = markNeedsLayout()
    //     0xa71624: bl              #0x7c70e4  ; [package:flutter/src/rendering/box.dart] RenderBox::markNeedsLayout
    // 0xa71628: r0 = Null
    //     0xa71628: mov             x0, NULL
    // 0xa7162c: LeaveFrame
    //     0xa7162c: mov             SP, fp
    //     0xa71630: ldp             fp, lr, [SP], #0x10
    // 0xa71634: ret
    //     0xa71634: ret             
    // 0xa71638: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa71638: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7163c: b               #0xa715d0
  }
  _ _RenderDecoration(/* No info */) {
    // ** addr: 0xa7b2c0, size: 0xe8
    // 0xa7b2c0: EnterFrame
    //     0xa7b2c0: stp             fp, lr, [SP, #-0x10]!
    //     0xa7b2c4: mov             fp, SP
    // 0xa7b2c8: AllocStack(0x10)
    //     0xa7b2c8: sub             SP, SP, #0x10
    // 0xa7b2cc: r1 = false
    //     0xa7b2cc: add             x1, NULL, #0x30  ; false
    // 0xa7b2d0: CheckStackOverflow
    //     0xa7b2d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7b2d4: cmp             SP, x16
    //     0xa7b2d8: b.ls            #0xa7b3a0
    // 0xa7b2dc: ldr             x0, [fp, #0x30]
    // 0xa7b2e0: ldr             x2, [fp, #0x38]
    // 0xa7b2e4: StoreField: r2->field_63 = r0
    //     0xa7b2e4: stur            w0, [x2, #0x63]
    //     0xa7b2e8: ldurb           w16, [x2, #-1]
    //     0xa7b2ec: ldurb           w17, [x0, #-1]
    //     0xa7b2f0: and             x16, x17, x16, lsr #2
    //     0xa7b2f4: tst             x16, HEAP, lsr #32
    //     0xa7b2f8: b.eq            #0xa7b300
    //     0xa7b2fc: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa7b300: ldr             x0, [fp, #0x10]
    // 0xa7b304: StoreField: r2->field_67 = r0
    //     0xa7b304: stur            w0, [x2, #0x67]
    //     0xa7b308: ldurb           w16, [x2, #-1]
    //     0xa7b30c: ldurb           w17, [x0, #-1]
    //     0xa7b310: and             x16, x17, x16, lsr #2
    //     0xa7b314: tst             x16, HEAP, lsr #32
    //     0xa7b318: b.eq            #0xa7b320
    //     0xa7b31c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa7b320: ldr             x0, [fp, #0x18]
    // 0xa7b324: StoreField: r2->field_6b = r0
    //     0xa7b324: stur            w0, [x2, #0x6b]
    //     0xa7b328: ldurb           w16, [x2, #-1]
    //     0xa7b32c: ldurb           w17, [x0, #-1]
    //     0xa7b330: and             x16, x17, x16, lsr #2
    //     0xa7b334: tst             x16, HEAP, lsr #32
    //     0xa7b338: b.eq            #0xa7b340
    //     0xa7b33c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa7b340: ldr             x0, [fp, #0x28]
    // 0xa7b344: StoreField: r2->field_73 = r0
    //     0xa7b344: stur            w0, [x2, #0x73]
    // 0xa7b348: StoreField: r2->field_77 = r1
    //     0xa7b348: stur            w1, [x2, #0x77]
    // 0xa7b34c: ldr             x0, [fp, #0x20]
    // 0xa7b350: StoreField: r2->field_7b = r0
    //     0xa7b350: stur            w0, [x2, #0x7b]
    // 0xa7b354: r16 = <_DecorationSlot, RenderBox>
    //     0xa7b354: add             x16, PP, #0x41, lsl #12  ; [pp+0x419a8] TypeArguments: <_DecorationSlot, RenderBox>
    //     0xa7b358: ldr             x16, [x16, #0x9a8]
    // 0xa7b35c: ldr             lr, [THR, #0x88]  ; THR::empty_array
    // 0xa7b360: stp             lr, x16, [SP]
    // 0xa7b364: r0 = Map._fromLiteral()
    //     0xa7b364: bl              #0x4da070  ; [dart:core] Map::Map._fromLiteral
    // 0xa7b368: ldr             x1, [fp, #0x38]
    // 0xa7b36c: StoreField: r1->field_5f = r0
    //     0xa7b36c: stur            w0, [x1, #0x5f]
    //     0xa7b370: ldurb           w16, [x1, #-1]
    //     0xa7b374: ldurb           w17, [x0, #-1]
    //     0xa7b378: and             x16, x17, x16, lsr #2
    //     0xa7b37c: tst             x16, HEAP, lsr #32
    //     0xa7b380: b.eq            #0xa7b388
    //     0xa7b384: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa7b388: str             x1, [SP]
    // 0xa7b38c: r0 = RenderObject()
    //     0xa7b38c: bl              #0x5b4f80  ; [package:flutter/src/rendering/object.dart] RenderObject::RenderObject
    // 0xa7b390: r0 = Null
    //     0xa7b390: mov             x0, NULL
    // 0xa7b394: LeaveFrame
    //     0xa7b394: mov             SP, fp
    //     0xa7b398: ldp             fp, lr, [SP], #0x10
    // 0xa7b39c: ret
    //     0xa7b39c: ret             
    // 0xa7b3a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7b3a0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7b3a4: b               #0xa7b2dc
  }
}

// class id: 2327, size: 0xd4, field offset: 0x8
//   const constructor, 
class InputDecoration extends Object {

  bool field_5c;
  _OneByteString field_90;
  _NoInputBorder field_c0;
  bool field_c4;
  _OneByteString field_2c;
  TextStyle field_30;

  _ applyDefaults(/* No info */) {
    // ** addr: 0x8ae664, size: 0x170
    // 0x8ae664: EnterFrame
    //     0x8ae664: stp             fp, lr, [SP, #-0x10]!
    //     0x8ae668: mov             fp, SP
    // 0x8ae66c: AllocStack(0x78)
    //     0x8ae66c: sub             SP, SP, #0x78
    // 0x8ae670: CheckStackOverflow
    //     0x8ae670: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ae674: cmp             SP, x16
    //     0x8ae678: b.ls            #0x8ae7cc
    // 0x8ae67c: ldr             x0, [fp, #0x10]
    // 0x8ae680: LoadField: r1 = r0->field_2f
    //     0x8ae680: ldur            w1, [x0, #0x2f]
    // 0x8ae684: DecompressPointer r1
    //     0x8ae684: add             x1, x1, HEAP, lsl #32
    // 0x8ae688: cmp             w1, NULL
    // 0x8ae68c: b.ne            #0x8ae694
    // 0x8ae690: r1 = Null
    //     0x8ae690: mov             x1, NULL
    // 0x8ae694: LoadField: r2 = r0->field_4b
    //     0x8ae694: ldur            w2, [x0, #0x4b]
    // 0x8ae698: DecompressPointer r2
    //     0x8ae698: add             x2, x2, HEAP, lsl #32
    // 0x8ae69c: cmp             w2, NULL
    // 0x8ae6a0: b.ne            #0x8ae6ac
    // 0x8ae6a4: r2 = Instance_FloatingLabelBehavior
    //     0x8ae6a4: add             x2, PP, #0xf, lsl #12  ; [pp+0xf698] Obj!FloatingLabelBehavior@c449d1
    //     0x8ae6a8: ldr             x2, [x2, #0x698]
    // 0x8ae6ac: LoadField: r3 = r0->field_4f
    //     0x8ae6ac: ldur            w3, [x0, #0x4f]
    // 0x8ae6b0: DecompressPointer r3
    //     0x8ae6b0: add             x3, x3, HEAP, lsl #32
    // 0x8ae6b4: cmp             w3, NULL
    // 0x8ae6b8: b.ne            #0x8ae6c4
    // 0x8ae6bc: r3 = Instance_FloatingLabelAlignment
    //     0x8ae6bc: add             x3, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0x8ae6c0: ldr             x3, [x3, #0x6a0]
    // 0x8ae6c4: LoadField: r4 = r0->field_53
    //     0x8ae6c4: ldur            w4, [x0, #0x53]
    // 0x8ae6c8: DecompressPointer r4
    //     0x8ae6c8: add             x4, x4, HEAP, lsl #32
    // 0x8ae6cc: cmp             w4, NULL
    // 0x8ae6d0: b.ne            #0x8ae6d8
    // 0x8ae6d4: r4 = false
    //     0x8ae6d4: add             x4, NULL, #0x30  ; false
    // 0x8ae6d8: LoadField: r5 = r0->field_57
    //     0x8ae6d8: ldur            w5, [x0, #0x57]
    // 0x8ae6dc: DecompressPointer r5
    //     0x8ae6dc: add             x5, x5, HEAP, lsl #32
    // 0x8ae6e0: cmp             w5, NULL
    // 0x8ae6e4: b.ne            #0x8ae6ec
    // 0x8ae6e8: r5 = Null
    //     0x8ae6e8: mov             x5, NULL
    // 0x8ae6ec: LoadField: r6 = r0->field_5b
    //     0x8ae6ec: ldur            w6, [x0, #0x5b]
    // 0x8ae6f0: DecompressPointer r6
    //     0x8ae6f0: add             x6, x6, HEAP, lsl #32
    // 0x8ae6f4: LoadField: r7 = r0->field_97
    //     0x8ae6f4: ldur            w7, [x0, #0x97]
    // 0x8ae6f8: DecompressPointer r7
    //     0x8ae6f8: add             x7, x7, HEAP, lsl #32
    // 0x8ae6fc: cmp             w7, NULL
    // 0x8ae700: b.ne            #0x8ae708
    // 0x8ae704: r7 = Null
    //     0x8ae704: mov             x7, NULL
    // 0x8ae708: LoadField: r8 = r0->field_9b
    //     0x8ae708: ldur            w8, [x0, #0x9b]
    // 0x8ae70c: DecompressPointer r8
    //     0x8ae70c: add             x8, x8, HEAP, lsl #32
    // 0x8ae710: cmp             w8, NULL
    // 0x8ae714: b.ne            #0x8ae71c
    // 0x8ae718: r8 = false
    //     0x8ae718: add             x8, NULL, #0x30  ; false
    // 0x8ae71c: LoadField: r9 = r0->field_9f
    //     0x8ae71c: ldur            w9, [x0, #0x9f]
    // 0x8ae720: DecompressPointer r9
    //     0x8ae720: add             x9, x9, HEAP, lsl #32
    // 0x8ae724: cmp             w9, NULL
    // 0x8ae728: b.ne            #0x8ae730
    // 0x8ae72c: r9 = Null
    //     0x8ae72c: mov             x9, NULL
    // 0x8ae730: LoadField: r10 = r0->field_af
    //     0x8ae730: ldur            w10, [x0, #0xaf]
    // 0x8ae734: DecompressPointer r10
    //     0x8ae734: add             x10, x10, HEAP, lsl #32
    // 0x8ae738: cmp             w10, NULL
    // 0x8ae73c: b.ne            #0x8ae744
    // 0x8ae740: r10 = Null
    //     0x8ae740: mov             x10, NULL
    // 0x8ae744: LoadField: r11 = r0->field_b7
    //     0x8ae744: ldur            w11, [x0, #0xb7]
    // 0x8ae748: DecompressPointer r11
    //     0x8ae748: add             x11, x11, HEAP, lsl #32
    // 0x8ae74c: cmp             w11, NULL
    // 0x8ae750: b.ne            #0x8ae758
    // 0x8ae754: r11 = Null
    //     0x8ae754: mov             x11, NULL
    // 0x8ae758: LoadField: r12 = r0->field_bb
    //     0x8ae758: ldur            w12, [x0, #0xbb]
    // 0x8ae75c: DecompressPointer r12
    //     0x8ae75c: add             x12, x12, HEAP, lsl #32
    // 0x8ae760: cmp             w12, NULL
    // 0x8ae764: b.ne            #0x8ae76c
    // 0x8ae768: r12 = Null
    //     0x8ae768: mov             x12, NULL
    // 0x8ae76c: LoadField: r13 = r0->field_bf
    //     0x8ae76c: ldur            w13, [x0, #0xbf]
    // 0x8ae770: DecompressPointer r13
    //     0x8ae770: add             x13, x13, HEAP, lsl #32
    // 0x8ae774: cmp             w13, NULL
    // 0x8ae778: b.ne            #0x8ae780
    // 0x8ae77c: r13 = Null
    //     0x8ae77c: mov             x13, NULL
    // 0x8ae780: LoadField: r14 = r0->field_cb
    //     0x8ae780: ldur            w14, [x0, #0xcb]
    // 0x8ae784: DecompressPointer r14
    //     0x8ae784: add             x14, x14, HEAP, lsl #32
    // 0x8ae788: cmp             w14, NULL
    // 0x8ae78c: b.ne            #0x8ae794
    // 0x8ae790: r14 = false
    //     0x8ae790: add             x14, NULL, #0x30  ; false
    // 0x8ae794: stp             x1, x0, [SP, #0x68]
    // 0x8ae798: stp             x3, x2, [SP, #0x58]
    // 0x8ae79c: stp             x5, x4, [SP, #0x48]
    // 0x8ae7a0: stp             x7, x6, [SP, #0x38]
    // 0x8ae7a4: stp             x9, x8, [SP, #0x28]
    // 0x8ae7a8: stp             x11, x10, [SP, #0x18]
    // 0x8ae7ac: stp             x13, x12, [SP, #8]
    // 0x8ae7b0: str             x14, [SP]
    // 0x8ae7b4: r4 = const [0, 0xf, 0xf, 0x1, alignLabelWithHint, 0xe, border, 0xd, contentPadding, 0x5, counterStyle, 0x7, disabledBorder, 0xb, enabledBorder, 0xc, fillColor, 0x9, filled, 0x8, floatingLabelAlignment, 0x3, floatingLabelBehavior, 0x2, focusedBorder, 0xa, hintStyle, 0x1, isCollapsed, 0x6, isDense, 0x4, null]
    //     0x8ae7b4: add             x4, PP, #0x34, lsl #12  ; [pp+0x34a40] List(33) [0, 0xf, 0xf, 0x1, "alignLabelWithHint", 0xe, "border", 0xd, "contentPadding", 0x5, "counterStyle", 0x7, "disabledBorder", 0xb, "enabledBorder", 0xc, "fillColor", 0x9, "filled", 0x8, "floatingLabelAlignment", 0x3, "floatingLabelBehavior", 0x2, "focusedBorder", 0xa, "hintStyle", 0x1, "isCollapsed", 0x6, "isDense", 0x4, Null]
    //     0x8ae7b8: ldr             x4, [x4, #0xa40]
    // 0x8ae7bc: r0 = copyWith()
    //     0x8ae7bc: bl              #0x8ae7d4  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::copyWith
    // 0x8ae7c0: LeaveFrame
    //     0x8ae7c0: mov             SP, fp
    //     0x8ae7c4: ldp             fp, lr, [SP], #0x10
    // 0x8ae7c8: ret
    //     0x8ae7c8: ret             
    // 0x8ae7cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ae7cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ae7d0: b               #0x8ae67c
  }
  _ copyWith(/* No info */) {
    // ** addr: 0x8ae7d4, size: 0xa1c
    // 0x8ae7d4: EnterFrame
    //     0x8ae7d4: stp             fp, lr, [SP, #-0x10]!
    //     0x8ae7d8: mov             fp, SP
    // 0x8ae7dc: AllocStack(0xb8)
    //     0x8ae7dc: sub             SP, SP, #0xb8
    // 0x8ae7e0: SetupParameters(InputDecoration this /* r3 */, {dynamic alignLabelWithHint = Null /* fp-0x8 */, dynamic border = Null /* fp-0x18 */, dynamic contentPadding = Null /* r6 */, dynamic counter = Null /* r7 */, dynamic counterStyle = Null /* r8 */, dynamic counterText = Null /* r9 */, dynamic disabledBorder = Null /* fp-0x28 */, dynamic enabled = Null /* fp-0x10 */, dynamic enabledBorder = Null /* fp-0x20 */, dynamic errorText = Null /* r13 */, dynamic fillColor = Null /* r14 */, dynamic filled = Null /* r19 */, dynamic floatingLabelAlignment = Null /* r20 */, dynamic floatingLabelBehavior = Null /* r4 */, dynamic focusedBorder = Null /* fp-0x30 */, dynamic hintMaxLines = Null /* r5 */, dynamic hintStyle = Null /* r12 */, dynamic isCollapsed = Null /* r10 */, dynamic isDense = Null /* r11 */, dynamic semanticCounterText = Null /* r0 */})
    //     0x8ae7e0: mov             x0, x4
    //     0x8ae7e4: ldur            w1, [x0, #0x13]
    //     0x8ae7e8: add             x1, x1, HEAP, lsl #32
    //     0x8ae7ec: sub             x2, x1, #2
    //     0x8ae7f0: add             x3, fp, w2, sxtw #2
    //     0x8ae7f4: ldr             x3, [x3, #0x10]
    //     0x8ae7f8: ldur            w2, [x0, #0x1f]
    //     0x8ae7fc: add             x2, x2, HEAP, lsl #32
    //     0x8ae800: add             x16, PP, #0x34, lsl #12  ; [pp+0x349a8] "alignLabelWithHint"
    //     0x8ae804: ldr             x16, [x16, #0x9a8]
    //     0x8ae808: cmp             w2, w16
    //     0x8ae80c: b.ne            #0x8ae830
    //     0x8ae810: ldur            w2, [x0, #0x23]
    //     0x8ae814: add             x2, x2, HEAP, lsl #32
    //     0x8ae818: sub             w4, w1, w2
    //     0x8ae81c: add             x2, fp, w4, sxtw #2
    //     0x8ae820: ldr             x2, [x2, #8]
    //     0x8ae824: mov             x4, x2
    //     0x8ae828: movz            x2, #0x1
    //     0x8ae82c: b               #0x8ae838
    //     0x8ae830: mov             x4, NULL
    //     0x8ae834: movz            x2, #0
    //     0x8ae838: stur            x4, [fp, #-8]
    //     0x8ae83c: lsl             x5, x2, #1
    //     0x8ae840: lsl             w6, w5, #1
    //     0x8ae844: add             w7, w6, #8
    //     0x8ae848: add             x16, x0, w7, sxtw #1
    //     0x8ae84c: ldur            w8, [x16, #0xf]
    //     0x8ae850: add             x8, x8, HEAP, lsl #32
    //     0x8ae854: add             x16, PP, #0x34, lsl #12  ; [pp+0x349b0] "border"
    //     0x8ae858: ldr             x16, [x16, #0x9b0]
    //     0x8ae85c: cmp             w8, w16
    //     0x8ae860: b.ne            #0x8ae894
    //     0x8ae864: add             w2, w6, #0xa
    //     0x8ae868: add             x16, x0, w2, sxtw #1
    //     0x8ae86c: ldur            w6, [x16, #0xf]
    //     0x8ae870: add             x6, x6, HEAP, lsl #32
    //     0x8ae874: sub             w2, w1, w6
    //     0x8ae878: add             x6, fp, w2, sxtw #2
    //     0x8ae87c: ldr             x6, [x6, #8]
    //     0x8ae880: add             w2, w5, #2
    //     0x8ae884: sbfx            x5, x2, #1, #0x1f
    //     0x8ae888: mov             x2, x5
    //     0x8ae88c: mov             x5, x6
    //     0x8ae890: b               #0x8ae898
    //     0x8ae894: mov             x5, NULL
    //     0x8ae898: stur            x5, [fp, #-0x18]
    //     0x8ae89c: lsl             x6, x2, #1
    //     0x8ae8a0: lsl             w7, w6, #1
    //     0x8ae8a4: add             w8, w7, #8
    //     0x8ae8a8: add             x16, x0, w8, sxtw #1
    //     0x8ae8ac: ldur            w9, [x16, #0xf]
    //     0x8ae8b0: add             x9, x9, HEAP, lsl #32
    //     0x8ae8b4: add             x16, PP, #0x34, lsl #12  ; [pp+0x349b8] "contentPadding"
    //     0x8ae8b8: ldr             x16, [x16, #0x9b8]
    //     0x8ae8bc: cmp             w9, w16
    //     0x8ae8c0: b.ne            #0x8ae8f4
    //     0x8ae8c4: add             w2, w7, #0xa
    //     0x8ae8c8: add             x16, x0, w2, sxtw #1
    //     0x8ae8cc: ldur            w7, [x16, #0xf]
    //     0x8ae8d0: add             x7, x7, HEAP, lsl #32
    //     0x8ae8d4: sub             w2, w1, w7
    //     0x8ae8d8: add             x7, fp, w2, sxtw #2
    //     0x8ae8dc: ldr             x7, [x7, #8]
    //     0x8ae8e0: add             w2, w6, #2
    //     0x8ae8e4: sbfx            x6, x2, #1, #0x1f
    //     0x8ae8e8: mov             x2, x6
    //     0x8ae8ec: mov             x6, x7
    //     0x8ae8f0: b               #0x8ae8f8
    //     0x8ae8f4: mov             x6, NULL
    //     0x8ae8f8: lsl             x7, x2, #1
    //     0x8ae8fc: lsl             w8, w7, #1
    //     0x8ae900: add             w9, w8, #8
    //     0x8ae904: add             x16, x0, w9, sxtw #1
    //     0x8ae908: ldur            w10, [x16, #0xf]
    //     0x8ae90c: add             x10, x10, HEAP, lsl #32
    //     0x8ae910: add             x16, PP, #0x34, lsl #12  ; [pp+0x349c0] "counter"
    //     0x8ae914: ldr             x16, [x16, #0x9c0]
    //     0x8ae918: cmp             w10, w16
    //     0x8ae91c: b.ne            #0x8ae950
    //     0x8ae920: add             w2, w8, #0xa
    //     0x8ae924: add             x16, x0, w2, sxtw #1
    //     0x8ae928: ldur            w8, [x16, #0xf]
    //     0x8ae92c: add             x8, x8, HEAP, lsl #32
    //     0x8ae930: sub             w2, w1, w8
    //     0x8ae934: add             x8, fp, w2, sxtw #2
    //     0x8ae938: ldr             x8, [x8, #8]
    //     0x8ae93c: add             w2, w7, #2
    //     0x8ae940: sbfx            x7, x2, #1, #0x1f
    //     0x8ae944: mov             x2, x7
    //     0x8ae948: mov             x7, x8
    //     0x8ae94c: b               #0x8ae954
    //     0x8ae950: mov             x7, NULL
    //     0x8ae954: lsl             x8, x2, #1
    //     0x8ae958: lsl             w9, w8, #1
    //     0x8ae95c: add             w10, w9, #8
    //     0x8ae960: add             x16, x0, w10, sxtw #1
    //     0x8ae964: ldur            w11, [x16, #0xf]
    //     0x8ae968: add             x11, x11, HEAP, lsl #32
    //     0x8ae96c: add             x16, PP, #0x34, lsl #12  ; [pp+0x349c8] "counterStyle"
    //     0x8ae970: ldr             x16, [x16, #0x9c8]
    //     0x8ae974: cmp             w11, w16
    //     0x8ae978: b.ne            #0x8ae9ac
    //     0x8ae97c: add             w2, w9, #0xa
    //     0x8ae980: add             x16, x0, w2, sxtw #1
    //     0x8ae984: ldur            w9, [x16, #0xf]
    //     0x8ae988: add             x9, x9, HEAP, lsl #32
    //     0x8ae98c: sub             w2, w1, w9
    //     0x8ae990: add             x9, fp, w2, sxtw #2
    //     0x8ae994: ldr             x9, [x9, #8]
    //     0x8ae998: add             w2, w8, #2
    //     0x8ae99c: sbfx            x8, x2, #1, #0x1f
    //     0x8ae9a0: mov             x2, x8
    //     0x8ae9a4: mov             x8, x9
    //     0x8ae9a8: b               #0x8ae9b0
    //     0x8ae9ac: mov             x8, NULL
    //     0x8ae9b0: lsl             x9, x2, #1
    //     0x8ae9b4: lsl             w10, w9, #1
    //     0x8ae9b8: add             w11, w10, #8
    //     0x8ae9bc: add             x16, x0, w11, sxtw #1
    //     0x8ae9c0: ldur            w12, [x16, #0xf]
    //     0x8ae9c4: add             x12, x12, HEAP, lsl #32
    //     0x8ae9c8: add             x16, PP, #0x34, lsl #12  ; [pp+0x349d0] "counterText"
    //     0x8ae9cc: ldr             x16, [x16, #0x9d0]
    //     0x8ae9d0: cmp             w12, w16
    //     0x8ae9d4: b.ne            #0x8aea08
    //     0x8ae9d8: add             w2, w10, #0xa
    //     0x8ae9dc: add             x16, x0, w2, sxtw #1
    //     0x8ae9e0: ldur            w10, [x16, #0xf]
    //     0x8ae9e4: add             x10, x10, HEAP, lsl #32
    //     0x8ae9e8: sub             w2, w1, w10
    //     0x8ae9ec: add             x10, fp, w2, sxtw #2
    //     0x8ae9f0: ldr             x10, [x10, #8]
    //     0x8ae9f4: add             w2, w9, #2
    //     0x8ae9f8: sbfx            x9, x2, #1, #0x1f
    //     0x8ae9fc: mov             x2, x9
    //     0x8aea00: mov             x9, x10
    //     0x8aea04: b               #0x8aea0c
    //     0x8aea08: mov             x9, NULL
    //     0x8aea0c: lsl             x10, x2, #1
    //     0x8aea10: lsl             w11, w10, #1
    //     0x8aea14: add             w12, w11, #8
    //     0x8aea18: add             x16, x0, w12, sxtw #1
    //     0x8aea1c: ldur            w13, [x16, #0xf]
    //     0x8aea20: add             x13, x13, HEAP, lsl #32
    //     0x8aea24: add             x16, PP, #0x34, lsl #12  ; [pp+0x349d8] "disabledBorder"
    //     0x8aea28: ldr             x16, [x16, #0x9d8]
    //     0x8aea2c: cmp             w13, w16
    //     0x8aea30: b.ne            #0x8aea64
    //     0x8aea34: add             w2, w11, #0xa
    //     0x8aea38: add             x16, x0, w2, sxtw #1
    //     0x8aea3c: ldur            w11, [x16, #0xf]
    //     0x8aea40: add             x11, x11, HEAP, lsl #32
    //     0x8aea44: sub             w2, w1, w11
    //     0x8aea48: add             x11, fp, w2, sxtw #2
    //     0x8aea4c: ldr             x11, [x11, #8]
    //     0x8aea50: add             w2, w10, #2
    //     0x8aea54: sbfx            x10, x2, #1, #0x1f
    //     0x8aea58: mov             x2, x10
    //     0x8aea5c: mov             x10, x11
    //     0x8aea60: b               #0x8aea68
    //     0x8aea64: mov             x10, NULL
    //     0x8aea68: stur            x10, [fp, #-0x28]
    //     0x8aea6c: lsl             x11, x2, #1
    //     0x8aea70: lsl             w12, w11, #1
    //     0x8aea74: add             w13, w12, #8
    //     0x8aea78: add             x16, x0, w13, sxtw #1
    //     0x8aea7c: ldur            w14, [x16, #0xf]
    //     0x8aea80: add             x14, x14, HEAP, lsl #32
    //     0x8aea84: ldr             x16, [PP, #0x1860]  ; [pp+0x1860] "enabled"
    //     0x8aea88: cmp             w14, w16
    //     0x8aea8c: b.ne            #0x8aeac0
    //     0x8aea90: add             w2, w12, #0xa
    //     0x8aea94: add             x16, x0, w2, sxtw #1
    //     0x8aea98: ldur            w12, [x16, #0xf]
    //     0x8aea9c: add             x12, x12, HEAP, lsl #32
    //     0x8aeaa0: sub             w2, w1, w12
    //     0x8aeaa4: add             x12, fp, w2, sxtw #2
    //     0x8aeaa8: ldr             x12, [x12, #8]
    //     0x8aeaac: add             w2, w11, #2
    //     0x8aeab0: sbfx            x11, x2, #1, #0x1f
    //     0x8aeab4: mov             x2, x11
    //     0x8aeab8: mov             x11, x12
    //     0x8aeabc: b               #0x8aeac4
    //     0x8aeac0: mov             x11, NULL
    //     0x8aeac4: stur            x11, [fp, #-0x10]
    //     0x8aeac8: lsl             x12, x2, #1
    //     0x8aeacc: lsl             w13, w12, #1
    //     0x8aead0: add             w14, w13, #8
    //     0x8aead4: add             x16, x0, w14, sxtw #1
    //     0x8aead8: ldur            w19, [x16, #0xf]
    //     0x8aeadc: add             x19, x19, HEAP, lsl #32
    //     0x8aeae0: add             x16, PP, #0x34, lsl #12  ; [pp+0x349e0] "enabledBorder"
    //     0x8aeae4: ldr             x16, [x16, #0x9e0]
    //     0x8aeae8: cmp             w19, w16
    //     0x8aeaec: b.ne            #0x8aeb20
    //     0x8aeaf0: add             w2, w13, #0xa
    //     0x8aeaf4: add             x16, x0, w2, sxtw #1
    //     0x8aeaf8: ldur            w13, [x16, #0xf]
    //     0x8aeafc: add             x13, x13, HEAP, lsl #32
    //     0x8aeb00: sub             w2, w1, w13
    //     0x8aeb04: add             x13, fp, w2, sxtw #2
    //     0x8aeb08: ldr             x13, [x13, #8]
    //     0x8aeb0c: add             w2, w12, #2
    //     0x8aeb10: sbfx            x12, x2, #1, #0x1f
    //     0x8aeb14: mov             x2, x12
    //     0x8aeb18: mov             x12, x13
    //     0x8aeb1c: b               #0x8aeb24
    //     0x8aeb20: mov             x12, NULL
    //     0x8aeb24: stur            x12, [fp, #-0x20]
    //     0x8aeb28: lsl             x13, x2, #1
    //     0x8aeb2c: lsl             w14, w13, #1
    //     0x8aeb30: add             w19, w14, #8
    //     0x8aeb34: add             x16, x0, w19, sxtw #1
    //     0x8aeb38: ldur            w20, [x16, #0xf]
    //     0x8aeb3c: add             x20, x20, HEAP, lsl #32
    //     0x8aeb40: add             x16, PP, #0x34, lsl #12  ; [pp+0x349e8] "errorText"
    //     0x8aeb44: ldr             x16, [x16, #0x9e8]
    //     0x8aeb48: cmp             w20, w16
    //     0x8aeb4c: b.ne            #0x8aeb80
    //     0x8aeb50: add             w2, w14, #0xa
    //     0x8aeb54: add             x16, x0, w2, sxtw #1
    //     0x8aeb58: ldur            w14, [x16, #0xf]
    //     0x8aeb5c: add             x14, x14, HEAP, lsl #32
    //     0x8aeb60: sub             w2, w1, w14
    //     0x8aeb64: add             x14, fp, w2, sxtw #2
    //     0x8aeb68: ldr             x14, [x14, #8]
    //     0x8aeb6c: add             w2, w13, #2
    //     0x8aeb70: sbfx            x13, x2, #1, #0x1f
    //     0x8aeb74: mov             x2, x13
    //     0x8aeb78: mov             x13, x14
    //     0x8aeb7c: b               #0x8aeb84
    //     0x8aeb80: mov             x13, NULL
    //     0x8aeb84: lsl             x14, x2, #1
    //     0x8aeb88: lsl             w19, w14, #1
    //     0x8aeb8c: add             w20, w19, #8
    //     0x8aeb90: add             x16, x0, w20, sxtw #1
    //     0x8aeb94: ldur            w23, [x16, #0xf]
    //     0x8aeb98: add             x23, x23, HEAP, lsl #32
    //     0x8aeb9c: add             x16, PP, #0x34, lsl #12  ; [pp+0x349f0] "fillColor"
    //     0x8aeba0: ldr             x16, [x16, #0x9f0]
    //     0x8aeba4: cmp             w23, w16
    //     0x8aeba8: b.ne            #0x8aebdc
    //     0x8aebac: add             w2, w19, #0xa
    //     0x8aebb0: add             x16, x0, w2, sxtw #1
    //     0x8aebb4: ldur            w19, [x16, #0xf]
    //     0x8aebb8: add             x19, x19, HEAP, lsl #32
    //     0x8aebbc: sub             w2, w1, w19
    //     0x8aebc0: add             x19, fp, w2, sxtw #2
    //     0x8aebc4: ldr             x19, [x19, #8]
    //     0x8aebc8: add             w2, w14, #2
    //     0x8aebcc: sbfx            x14, x2, #1, #0x1f
    //     0x8aebd0: mov             x2, x14
    //     0x8aebd4: mov             x14, x19
    //     0x8aebd8: b               #0x8aebe0
    //     0x8aebdc: mov             x14, NULL
    //     0x8aebe0: lsl             x19, x2, #1
    //     0x8aebe4: lsl             w20, w19, #1
    //     0x8aebe8: add             w23, w20, #8
    //     0x8aebec: add             x16, x0, w23, sxtw #1
    //     0x8aebf0: ldur            w24, [x16, #0xf]
    //     0x8aebf4: add             x24, x24, HEAP, lsl #32
    //     0x8aebf8: add             x16, PP, #0x34, lsl #12  ; [pp+0x349f8] "filled"
    //     0x8aebfc: ldr             x16, [x16, #0x9f8]
    //     0x8aec00: cmp             w24, w16
    //     0x8aec04: b.ne            #0x8aec38
    //     0x8aec08: add             w2, w20, #0xa
    //     0x8aec0c: add             x16, x0, w2, sxtw #1
    //     0x8aec10: ldur            w20, [x16, #0xf]
    //     0x8aec14: add             x20, x20, HEAP, lsl #32
    //     0x8aec18: sub             w2, w1, w20
    //     0x8aec1c: add             x20, fp, w2, sxtw #2
    //     0x8aec20: ldr             x20, [x20, #8]
    //     0x8aec24: add             w2, w19, #2
    //     0x8aec28: sbfx            x19, x2, #1, #0x1f
    //     0x8aec2c: mov             x2, x19
    //     0x8aec30: mov             x19, x20
    //     0x8aec34: b               #0x8aec3c
    //     0x8aec38: mov             x19, NULL
    //     0x8aec3c: lsl             x20, x2, #1
    //     0x8aec40: lsl             w23, w20, #1
    //     0x8aec44: add             w24, w23, #8
    //     0x8aec48: add             x16, x0, w24, sxtw #1
    //     0x8aec4c: ldur            w25, [x16, #0xf]
    //     0x8aec50: add             x25, x25, HEAP, lsl #32
    //     0x8aec54: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a00] "floatingLabelAlignment"
    //     0x8aec58: ldr             x16, [x16, #0xa00]
    //     0x8aec5c: cmp             w25, w16
    //     0x8aec60: b.ne            #0x8aec94
    //     0x8aec64: add             w2, w23, #0xa
    //     0x8aec68: add             x16, x0, w2, sxtw #1
    //     0x8aec6c: ldur            w23, [x16, #0xf]
    //     0x8aec70: add             x23, x23, HEAP, lsl #32
    //     0x8aec74: sub             w2, w1, w23
    //     0x8aec78: add             x23, fp, w2, sxtw #2
    //     0x8aec7c: ldr             x23, [x23, #8]
    //     0x8aec80: add             w2, w20, #2
    //     0x8aec84: sbfx            x20, x2, #1, #0x1f
    //     0x8aec88: mov             x2, x20
    //     0x8aec8c: mov             x20, x23
    //     0x8aec90: b               #0x8aec98
    //     0x8aec94: mov             x20, NULL
    //     0x8aec98: lsl             x23, x2, #1
    //     0x8aec9c: lsl             w24, w23, #1
    //     0x8aeca0: add             w25, w24, #8
    //     0x8aeca4: add             x16, x0, w25, sxtw #1
    //     0x8aeca8: ldur            w4, [x16, #0xf]
    //     0x8aecac: add             x4, x4, HEAP, lsl #32
    //     0x8aecb0: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a08] "floatingLabelBehavior"
    //     0x8aecb4: ldr             x16, [x16, #0xa08]
    //     0x8aecb8: cmp             w4, w16
    //     0x8aecbc: b.ne            #0x8aecec
    //     0x8aecc0: add             w2, w24, #0xa
    //     0x8aecc4: add             x16, x0, w2, sxtw #1
    //     0x8aecc8: ldur            w4, [x16, #0xf]
    //     0x8aeccc: add             x4, x4, HEAP, lsl #32
    //     0x8aecd0: sub             w2, w1, w4
    //     0x8aecd4: add             x4, fp, w2, sxtw #2
    //     0x8aecd8: ldr             x4, [x4, #8]
    //     0x8aecdc: add             w2, w23, #2
    //     0x8aece0: sbfx            x23, x2, #1, #0x1f
    //     0x8aece4: mov             x2, x23
    //     0x8aece8: b               #0x8aecf0
    //     0x8aecec: mov             x4, NULL
    //     0x8aecf0: lsl             x23, x2, #1
    //     0x8aecf4: lsl             w24, w23, #1
    //     0x8aecf8: add             w25, w24, #8
    //     0x8aecfc: add             x16, x0, w25, sxtw #1
    //     0x8aed00: ldur            w11, [x16, #0xf]
    //     0x8aed04: add             x11, x11, HEAP, lsl #32
    //     0x8aed08: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a10] "focusedBorder"
    //     0x8aed0c: ldr             x16, [x16, #0xa10]
    //     0x8aed10: cmp             w11, w16
    //     0x8aed14: b.ne            #0x8aed44
    //     0x8aed18: add             w2, w24, #0xa
    //     0x8aed1c: add             x16, x0, w2, sxtw #1
    //     0x8aed20: ldur            w11, [x16, #0xf]
    //     0x8aed24: add             x11, x11, HEAP, lsl #32
    //     0x8aed28: sub             w2, w1, w11
    //     0x8aed2c: add             x11, fp, w2, sxtw #2
    //     0x8aed30: ldr             x11, [x11, #8]
    //     0x8aed34: add             w2, w23, #2
    //     0x8aed38: sbfx            x23, x2, #1, #0x1f
    //     0x8aed3c: mov             x2, x23
    //     0x8aed40: b               #0x8aed48
    //     0x8aed44: mov             x11, NULL
    //     0x8aed48: stur            x11, [fp, #-0x30]
    //     0x8aed4c: lsl             x23, x2, #1
    //     0x8aed50: lsl             w24, w23, #1
    //     0x8aed54: add             w25, w24, #8
    //     0x8aed58: add             x16, x0, w25, sxtw #1
    //     0x8aed5c: ldur            w5, [x16, #0xf]
    //     0x8aed60: add             x5, x5, HEAP, lsl #32
    //     0x8aed64: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a18] "hintMaxLines"
    //     0x8aed68: ldr             x16, [x16, #0xa18]
    //     0x8aed6c: cmp             w5, w16
    //     0x8aed70: b.ne            #0x8aeda0
    //     0x8aed74: add             w2, w24, #0xa
    //     0x8aed78: add             x16, x0, w2, sxtw #1
    //     0x8aed7c: ldur            w5, [x16, #0xf]
    //     0x8aed80: add             x5, x5, HEAP, lsl #32
    //     0x8aed84: sub             w2, w1, w5
    //     0x8aed88: add             x5, fp, w2, sxtw #2
    //     0x8aed8c: ldr             x5, [x5, #8]
    //     0x8aed90: add             w2, w23, #2
    //     0x8aed94: sbfx            x23, x2, #1, #0x1f
    //     0x8aed98: mov             x2, x23
    //     0x8aed9c: b               #0x8aeda4
    //     0x8aeda0: mov             x5, NULL
    //     0x8aeda4: lsl             x23, x2, #1
    //     0x8aeda8: lsl             w24, w23, #1
    //     0x8aedac: add             w25, w24, #8
    //     0x8aedb0: add             x16, x0, w25, sxtw #1
    //     0x8aedb4: ldur            w12, [x16, #0xf]
    //     0x8aedb8: add             x12, x12, HEAP, lsl #32
    //     0x8aedbc: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a20] "hintStyle"
    //     0x8aedc0: ldr             x16, [x16, #0xa20]
    //     0x8aedc4: cmp             w12, w16
    //     0x8aedc8: b.ne            #0x8aedf8
    //     0x8aedcc: add             w2, w24, #0xa
    //     0x8aedd0: add             x16, x0, w2, sxtw #1
    //     0x8aedd4: ldur            w12, [x16, #0xf]
    //     0x8aedd8: add             x12, x12, HEAP, lsl #32
    //     0x8aeddc: sub             w2, w1, w12
    //     0x8aede0: add             x12, fp, w2, sxtw #2
    //     0x8aede4: ldr             x12, [x12, #8]
    //     0x8aede8: add             w2, w23, #2
    //     0x8aedec: sbfx            x23, x2, #1, #0x1f
    //     0x8aedf0: mov             x2, x23
    //     0x8aedf4: b               #0x8aedfc
    //     0x8aedf8: mov             x12, NULL
    //     0x8aedfc: lsl             x23, x2, #1
    //     0x8aee00: lsl             w24, w23, #1
    //     0x8aee04: add             w25, w24, #8
    //     0x8aee08: add             x16, x0, w25, sxtw #1
    //     0x8aee0c: ldur            w10, [x16, #0xf]
    //     0x8aee10: add             x10, x10, HEAP, lsl #32
    //     0x8aee14: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a28] "isCollapsed"
    //     0x8aee18: ldr             x16, [x16, #0xa28]
    //     0x8aee1c: cmp             w10, w16
    //     0x8aee20: b.ne            #0x8aee50
    //     0x8aee24: add             w2, w24, #0xa
    //     0x8aee28: add             x16, x0, w2, sxtw #1
    //     0x8aee2c: ldur            w10, [x16, #0xf]
    //     0x8aee30: add             x10, x10, HEAP, lsl #32
    //     0x8aee34: sub             w2, w1, w10
    //     0x8aee38: add             x10, fp, w2, sxtw #2
    //     0x8aee3c: ldr             x10, [x10, #8]
    //     0x8aee40: add             w2, w23, #2
    //     0x8aee44: sbfx            x23, x2, #1, #0x1f
    //     0x8aee48: mov             x2, x23
    //     0x8aee4c: b               #0x8aee54
    //     0x8aee50: mov             x10, NULL
    //     0x8aee54: lsl             x23, x2, #1
    //     0x8aee58: lsl             w24, w23, #1
    //     0x8aee5c: add             w25, w24, #8
    //     0x8aee60: add             x16, x0, w25, sxtw #1
    //     0x8aee64: ldur            w11, [x16, #0xf]
    //     0x8aee68: add             x11, x11, HEAP, lsl #32
    //     0x8aee6c: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a30] "isDense"
    //     0x8aee70: ldr             x16, [x16, #0xa30]
    //     0x8aee74: cmp             w11, w16
    //     0x8aee78: b.ne            #0x8aeea8
    //     0x8aee7c: add             w2, w24, #0xa
    //     0x8aee80: add             x16, x0, w2, sxtw #1
    //     0x8aee84: ldur            w11, [x16, #0xf]
    //     0x8aee88: add             x11, x11, HEAP, lsl #32
    //     0x8aee8c: sub             w2, w1, w11
    //     0x8aee90: add             x11, fp, w2, sxtw #2
    //     0x8aee94: ldr             x11, [x11, #8]
    //     0x8aee98: add             w2, w23, #2
    //     0x8aee9c: sbfx            x23, x2, #1, #0x1f
    //     0x8aeea0: mov             x2, x23
    //     0x8aeea4: b               #0x8aeeac
    //     0x8aeea8: mov             x11, NULL
    //     0x8aeeac: lsl             x23, x2, #1
    //     0x8aeeb0: lsl             w2, w23, #1
    //     0x8aeeb4: add             w23, w2, #8
    //     0x8aeeb8: add             x16, x0, w23, sxtw #1
    //     0x8aeebc: ldur            w24, [x16, #0xf]
    //     0x8aeec0: add             x24, x24, HEAP, lsl #32
    //     0x8aeec4: add             x16, PP, #0x34, lsl #12  ; [pp+0x34a38] "semanticCounterText"
    //     0x8aeec8: ldr             x16, [x16, #0xa38]
    //     0x8aeecc: cmp             w24, w16
    //     0x8aeed0: b.ne            #0x8aeef8
    //     0x8aeed4: add             w23, w2, #0xa
    //     0x8aeed8: add             x16, x0, w23, sxtw #1
    //     0x8aeedc: ldur            w2, [x16, #0xf]
    //     0x8aeee0: add             x2, x2, HEAP, lsl #32
    //     0x8aeee4: sub             w0, w1, w2
    //     0x8aeee8: add             x1, fp, w0, sxtw #2
    //     0x8aeeec: ldr             x1, [x1, #8]
    //     0x8aeef0: mov             x0, x1
    //     0x8aeef4: b               #0x8aeefc
    //     0x8aeef8: mov             x0, NULL
    // 0x8aeefc: LoadField: r1 = r3->field_2b
    //     0x8aeefc: ldur            w1, [x3, #0x2b]
    // 0x8aef00: DecompressPointer r1
    //     0x8aef00: add             x1, x1, HEAP, lsl #32
    // 0x8aef04: stur            x1, [fp, #-0xb8]
    // 0x8aef08: cmp             w12, NULL
    // 0x8aef0c: b.ne            #0x8aef1c
    // 0x8aef10: LoadField: r2 = r3->field_2f
    //     0x8aef10: ldur            w2, [x3, #0x2f]
    // 0x8aef14: DecompressPointer r2
    //     0x8aef14: add             x2, x2, HEAP, lsl #32
    // 0x8aef18: b               #0x8aef20
    // 0x8aef1c: mov             x2, x12
    // 0x8aef20: stur            x2, [fp, #-0xb0]
    // 0x8aef24: cmp             w5, NULL
    // 0x8aef28: b.ne            #0x8aef34
    // 0x8aef2c: LoadField: r5 = r3->field_37
    //     0x8aef2c: ldur            w5, [x3, #0x37]
    // 0x8aef30: DecompressPointer r5
    //     0x8aef30: add             x5, x5, HEAP, lsl #32
    // 0x8aef34: stur            x5, [fp, #-0xa8]
    // 0x8aef38: cmp             w13, NULL
    // 0x8aef3c: b.ne            #0x8aef4c
    // 0x8aef40: LoadField: r12 = r3->field_3f
    //     0x8aef40: ldur            w12, [x3, #0x3f]
    // 0x8aef44: DecompressPointer r12
    //     0x8aef44: add             x12, x12, HEAP, lsl #32
    // 0x8aef48: b               #0x8aef50
    // 0x8aef4c: mov             x12, x13
    // 0x8aef50: stur            x12, [fp, #-0xa0]
    // 0x8aef54: cmp             w4, NULL
    // 0x8aef58: b.ne            #0x8aef64
    // 0x8aef5c: LoadField: r4 = r3->field_4b
    //     0x8aef5c: ldur            w4, [x3, #0x4b]
    // 0x8aef60: DecompressPointer r4
    //     0x8aef60: add             x4, x4, HEAP, lsl #32
    // 0x8aef64: stur            x4, [fp, #-0x98]
    // 0x8aef68: cmp             w20, NULL
    // 0x8aef6c: b.ne            #0x8aef7c
    // 0x8aef70: LoadField: r13 = r3->field_4f
    //     0x8aef70: ldur            w13, [x3, #0x4f]
    // 0x8aef74: DecompressPointer r13
    //     0x8aef74: add             x13, x13, HEAP, lsl #32
    // 0x8aef78: b               #0x8aef80
    // 0x8aef7c: mov             x13, x20
    // 0x8aef80: stur            x13, [fp, #-0x90]
    // 0x8aef84: cmp             w10, NULL
    // 0x8aef88: b.ne            #0x8aef94
    // 0x8aef8c: LoadField: r10 = r3->field_5b
    //     0x8aef8c: ldur            w10, [x3, #0x5b]
    // 0x8aef90: DecompressPointer r10
    //     0x8aef90: add             x10, x10, HEAP, lsl #32
    // 0x8aef94: stur            x10, [fp, #-0x88]
    // 0x8aef98: cmp             w11, NULL
    // 0x8aef9c: b.ne            #0x8aefa8
    // 0x8aefa0: LoadField: r11 = r3->field_53
    //     0x8aefa0: ldur            w11, [x3, #0x53]
    // 0x8aefa4: DecompressPointer r11
    //     0x8aefa4: add             x11, x11, HEAP, lsl #32
    // 0x8aefa8: stur            x11, [fp, #-0x80]
    // 0x8aefac: cmp             w6, NULL
    // 0x8aefb0: b.ne            #0x8aefbc
    // 0x8aefb4: LoadField: r6 = r3->field_57
    //     0x8aefb4: ldur            w6, [x3, #0x57]
    // 0x8aefb8: DecompressPointer r6
    //     0x8aefb8: add             x6, x6, HEAP, lsl #32
    // 0x8aefbc: stur            x6, [fp, #-0x78]
    // 0x8aefc0: LoadField: r20 = r3->field_5f
    //     0x8aefc0: ldur            w20, [x3, #0x5f]
    // 0x8aefc4: DecompressPointer r20
    //     0x8aefc4: add             x20, x20, HEAP, lsl #32
    // 0x8aefc8: stur            x20, [fp, #-0x70]
    // 0x8aefcc: LoadField: r23 = r3->field_77
    //     0x8aefcc: ldur            w23, [x3, #0x77]
    // 0x8aefd0: DecompressPointer r23
    //     0x8aefd0: add             x23, x23, HEAP, lsl #32
    // 0x8aefd4: stur            x23, [fp, #-0x68]
    // 0x8aefd8: cmp             w7, NULL
    // 0x8aefdc: b.ne            #0x8aefe8
    // 0x8aefe0: LoadField: r7 = r3->field_93
    //     0x8aefe0: ldur            w7, [x3, #0x93]
    // 0x8aefe4: DecompressPointer r7
    //     0x8aefe4: add             x7, x7, HEAP, lsl #32
    // 0x8aefe8: stur            x7, [fp, #-0x60]
    // 0x8aefec: cmp             w9, NULL
    // 0x8aeff0: b.ne            #0x8aeffc
    // 0x8aeff4: LoadField: r9 = r3->field_8f
    //     0x8aeff4: ldur            w9, [x3, #0x8f]
    // 0x8aeff8: DecompressPointer r9
    //     0x8aeff8: add             x9, x9, HEAP, lsl #32
    // 0x8aeffc: stur            x9, [fp, #-0x58]
    // 0x8af000: cmp             w8, NULL
    // 0x8af004: b.ne            #0x8af010
    // 0x8af008: LoadField: r8 = r3->field_97
    //     0x8af008: ldur            w8, [x3, #0x97]
    // 0x8af00c: DecompressPointer r8
    //     0x8af00c: add             x8, x8, HEAP, lsl #32
    // 0x8af010: stur            x8, [fp, #-0x50]
    // 0x8af014: cmp             w19, NULL
    // 0x8af018: b.ne            #0x8af024
    // 0x8af01c: LoadField: r19 = r3->field_9b
    //     0x8af01c: ldur            w19, [x3, #0x9b]
    // 0x8af020: DecompressPointer r19
    //     0x8af020: add             x19, x19, HEAP, lsl #32
    // 0x8af024: stur            x19, [fp, #-0x48]
    // 0x8af028: cmp             w14, NULL
    // 0x8af02c: b.ne            #0x8af040
    // 0x8af030: LoadField: r14 = r3->field_9f
    //     0x8af030: ldur            w14, [x3, #0x9f]
    // 0x8af034: DecompressPointer r14
    //     0x8af034: add             x14, x14, HEAP, lsl #32
    // 0x8af038: mov             x24, x14
    // 0x8af03c: b               #0x8af044
    // 0x8af040: mov             x24, x14
    // 0x8af044: ldur            x14, [fp, #-0x30]
    // 0x8af048: stur            x24, [fp, #-0x40]
    // 0x8af04c: cmp             w14, NULL
    // 0x8af050: b.ne            #0x8af064
    // 0x8af054: LoadField: r14 = r3->field_af
    //     0x8af054: ldur            w14, [x3, #0xaf]
    // 0x8af058: DecompressPointer r14
    //     0x8af058: add             x14, x14, HEAP, lsl #32
    // 0x8af05c: mov             x25, x14
    // 0x8af060: b               #0x8af068
    // 0x8af064: mov             x25, x14
    // 0x8af068: ldur            x14, [fp, #-0x28]
    // 0x8af06c: stur            x25, [fp, #-0x38]
    // 0x8af070: cmp             w14, NULL
    // 0x8af074: b.ne            #0x8af088
    // 0x8af078: LoadField: r14 = r3->field_b7
    //     0x8af078: ldur            w14, [x3, #0xb7]
    // 0x8af07c: DecompressPointer r14
    //     0x8af07c: add             x14, x14, HEAP, lsl #32
    // 0x8af080: stur            x14, [fp, #-0x28]
    // 0x8af084: b               #0x8af08c
    // 0x8af088: stur            x14, [fp, #-0x28]
    // 0x8af08c: ldur            x14, [fp, #-0x20]
    // 0x8af090: cmp             w14, NULL
    // 0x8af094: b.ne            #0x8af0a8
    // 0x8af098: LoadField: r14 = r3->field_bb
    //     0x8af098: ldur            w14, [x3, #0xbb]
    // 0x8af09c: DecompressPointer r14
    //     0x8af09c: add             x14, x14, HEAP, lsl #32
    // 0x8af0a0: stur            x14, [fp, #-0x20]
    // 0x8af0a4: b               #0x8af0ac
    // 0x8af0a8: stur            x14, [fp, #-0x20]
    // 0x8af0ac: ldur            x14, [fp, #-0x18]
    // 0x8af0b0: cmp             w14, NULL
    // 0x8af0b4: b.ne            #0x8af0c8
    // 0x8af0b8: LoadField: r14 = r3->field_bf
    //     0x8af0b8: ldur            w14, [x3, #0xbf]
    // 0x8af0bc: DecompressPointer r14
    //     0x8af0bc: add             x14, x14, HEAP, lsl #32
    // 0x8af0c0: stur            x14, [fp, #-0x18]
    // 0x8af0c4: b               #0x8af0cc
    // 0x8af0c8: stur            x14, [fp, #-0x18]
    // 0x8af0cc: ldur            x14, [fp, #-0x10]
    // 0x8af0d0: cmp             w14, NULL
    // 0x8af0d4: b.ne            #0x8af0e0
    // 0x8af0d8: LoadField: r14 = r3->field_c3
    //     0x8af0d8: ldur            w14, [x3, #0xc3]
    // 0x8af0dc: DecompressPointer r14
    //     0x8af0dc: add             x14, x14, HEAP, lsl #32
    // 0x8af0e0: stur            x14, [fp, #-0x30]
    // 0x8af0e4: cmp             w0, NULL
    // 0x8af0e8: b.ne            #0x8af0fc
    // 0x8af0ec: LoadField: r0 = r3->field_c7
    //     0x8af0ec: ldur            w0, [x3, #0xc7]
    // 0x8af0f0: DecompressPointer r0
    //     0x8af0f0: add             x0, x0, HEAP, lsl #32
    // 0x8af0f4: stur            x0, [fp, #-0x10]
    // 0x8af0f8: b               #0x8af100
    // 0x8af0fc: stur            x0, [fp, #-0x10]
    // 0x8af100: ldur            x0, [fp, #-8]
    // 0x8af104: cmp             w0, NULL
    // 0x8af108: b.ne            #0x8af11c
    // 0x8af10c: LoadField: r0 = r3->field_cb
    //     0x8af10c: ldur            w0, [x3, #0xcb]
    // 0x8af110: DecompressPointer r0
    //     0x8af110: add             x0, x0, HEAP, lsl #32
    // 0x8af114: stur            x0, [fp, #-8]
    // 0x8af118: b               #0x8af120
    // 0x8af11c: stur            x0, [fp, #-8]
    // 0x8af120: ldur            x3, [fp, #-0x18]
    // 0x8af124: ldur            x0, [fp, #-0x10]
    // 0x8af128: r0 = InputDecoration()
    //     0x8af128: bl              #0x6e7180  ; AllocateInputDecorationStub -> InputDecoration (size=0xd4)
    // 0x8af12c: ldur            x1, [fp, #-0xb8]
    // 0x8af130: StoreField: r0->field_2b = r1
    //     0x8af130: stur            w1, [x0, #0x2b]
    // 0x8af134: ldur            x1, [fp, #-0xb0]
    // 0x8af138: StoreField: r0->field_2f = r1
    //     0x8af138: stur            w1, [x0, #0x2f]
    // 0x8af13c: ldur            x1, [fp, #-0xa8]
    // 0x8af140: StoreField: r0->field_37 = r1
    //     0x8af140: stur            w1, [x0, #0x37]
    // 0x8af144: ldur            x1, [fp, #-0xa0]
    // 0x8af148: StoreField: r0->field_3f = r1
    //     0x8af148: stur            w1, [x0, #0x3f]
    // 0x8af14c: ldur            x1, [fp, #-0x98]
    // 0x8af150: StoreField: r0->field_4b = r1
    //     0x8af150: stur            w1, [x0, #0x4b]
    // 0x8af154: ldur            x1, [fp, #-0x90]
    // 0x8af158: StoreField: r0->field_4f = r1
    //     0x8af158: stur            w1, [x0, #0x4f]
    // 0x8af15c: ldur            x1, [fp, #-0x88]
    // 0x8af160: StoreField: r0->field_5b = r1
    //     0x8af160: stur            w1, [x0, #0x5b]
    // 0x8af164: ldur            x1, [fp, #-0x80]
    // 0x8af168: StoreField: r0->field_53 = r1
    //     0x8af168: stur            w1, [x0, #0x53]
    // 0x8af16c: ldur            x1, [fp, #-0x78]
    // 0x8af170: StoreField: r0->field_57 = r1
    //     0x8af170: stur            w1, [x0, #0x57]
    // 0x8af174: ldur            x1, [fp, #-0x70]
    // 0x8af178: StoreField: r0->field_5f = r1
    //     0x8af178: stur            w1, [x0, #0x5f]
    // 0x8af17c: ldur            x1, [fp, #-0x68]
    // 0x8af180: StoreField: r0->field_77 = r1
    //     0x8af180: stur            w1, [x0, #0x77]
    // 0x8af184: ldur            x1, [fp, #-0x60]
    // 0x8af188: StoreField: r0->field_93 = r1
    //     0x8af188: stur            w1, [x0, #0x93]
    // 0x8af18c: ldur            x1, [fp, #-0x58]
    // 0x8af190: StoreField: r0->field_8f = r1
    //     0x8af190: stur            w1, [x0, #0x8f]
    // 0x8af194: ldur            x1, [fp, #-0x50]
    // 0x8af198: StoreField: r0->field_97 = r1
    //     0x8af198: stur            w1, [x0, #0x97]
    // 0x8af19c: ldur            x1, [fp, #-0x48]
    // 0x8af1a0: StoreField: r0->field_9b = r1
    //     0x8af1a0: stur            w1, [x0, #0x9b]
    // 0x8af1a4: ldur            x1, [fp, #-0x40]
    // 0x8af1a8: StoreField: r0->field_9f = r1
    //     0x8af1a8: stur            w1, [x0, #0x9f]
    // 0x8af1ac: ldur            x1, [fp, #-0x38]
    // 0x8af1b0: StoreField: r0->field_af = r1
    //     0x8af1b0: stur            w1, [x0, #0xaf]
    // 0x8af1b4: ldur            x1, [fp, #-0x28]
    // 0x8af1b8: StoreField: r0->field_b7 = r1
    //     0x8af1b8: stur            w1, [x0, #0xb7]
    // 0x8af1bc: ldur            x1, [fp, #-0x20]
    // 0x8af1c0: StoreField: r0->field_bb = r1
    //     0x8af1c0: stur            w1, [x0, #0xbb]
    // 0x8af1c4: ldur            x1, [fp, #-0x18]
    // 0x8af1c8: StoreField: r0->field_bf = r1
    //     0x8af1c8: stur            w1, [x0, #0xbf]
    // 0x8af1cc: ldur            x1, [fp, #-0x30]
    // 0x8af1d0: StoreField: r0->field_c3 = r1
    //     0x8af1d0: stur            w1, [x0, #0xc3]
    // 0x8af1d4: ldur            x1, [fp, #-0x10]
    // 0x8af1d8: StoreField: r0->field_c7 = r1
    //     0x8af1d8: stur            w1, [x0, #0xc7]
    // 0x8af1dc: ldur            x1, [fp, #-8]
    // 0x8af1e0: StoreField: r0->field_cb = r1
    //     0x8af1e0: stur            w1, [x0, #0xcb]
    // 0x8af1e4: LeaveFrame
    //     0x8af1e4: mov             SP, fp
    //     0x8af1e8: ldp             fp, lr, [SP], #0x10
    // 0x8af1ec: ret
    //     0x8af1ec: ret             
  }
  get _ hashCode(/* No info */) {
    // ** addr: 0xadd014, size: 0x2f4
    // 0xadd014: EnterFrame
    //     0xadd014: stp             fp, lr, [SP, #-0x10]!
    //     0xadd018: mov             fp, SP
    // 0xadd01c: AllocStack(0x18)
    //     0xadd01c: sub             SP, SP, #0x18
    // 0xadd020: r0 = 102
    //     0xadd020: movz            x0, #0x66
    // 0xadd024: CheckStackOverflow
    //     0xadd024: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xadd028: cmp             SP, x16
    //     0xadd02c: b.ls            #0xadd300
    // 0xadd030: ldr             x3, [fp, #0x10]
    // 0xadd034: LoadField: r4 = r3->field_7
    //     0xadd034: ldur            w4, [x3, #7]
    // 0xadd038: DecompressPointer r4
    //     0xadd038: add             x4, x4, HEAP, lsl #32
    // 0xadd03c: mov             x2, x0
    // 0xadd040: stur            x4, [fp, #-8]
    // 0xadd044: r1 = <Object?>
    //     0xadd044: ldr             x1, [PP, #0x718]  ; [pp+0x718] TypeArguments: <Object?>
    // 0xadd048: r0 = AllocateArray()
    //     0xadd048: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xadd04c: mov             x2, x0
    // 0xadd050: ldur            x0, [fp, #-8]
    // 0xadd054: stur            x2, [fp, #-0x10]
    // 0xadd058: StoreField: r2->field_f = r0
    //     0xadd058: stur            w0, [x2, #0xf]
    // 0xadd05c: ldr             x0, [fp, #0x10]
    // 0xadd060: LoadField: r1 = r0->field_b
    //     0xadd060: ldur            w1, [x0, #0xb]
    // 0xadd064: DecompressPointer r1
    //     0xadd064: add             x1, x1, HEAP, lsl #32
    // 0xadd068: StoreField: r2->field_13 = r1
    //     0xadd068: stur            w1, [x2, #0x13]
    // 0xadd06c: LoadField: r1 = r0->field_f
    //     0xadd06c: ldur            w1, [x0, #0xf]
    // 0xadd070: DecompressPointer r1
    //     0xadd070: add             x1, x1, HEAP, lsl #32
    // 0xadd074: ArrayStore: r2[0] = r1  ; List_4
    //     0xadd074: stur            w1, [x2, #0x17]
    // 0xadd078: LoadField: r1 = r0->field_13
    //     0xadd078: ldur            w1, [x0, #0x13]
    // 0xadd07c: DecompressPointer r1
    //     0xadd07c: add             x1, x1, HEAP, lsl #32
    // 0xadd080: StoreField: r2->field_1b = r1
    //     0xadd080: stur            w1, [x2, #0x1b]
    // 0xadd084: LoadField: r1 = r0->field_1b
    //     0xadd084: ldur            w1, [x0, #0x1b]
    // 0xadd088: DecompressPointer r1
    //     0xadd088: add             x1, x1, HEAP, lsl #32
    // 0xadd08c: StoreField: r2->field_1f = r1
    //     0xadd08c: stur            w1, [x2, #0x1f]
    // 0xadd090: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xadd090: ldur            w1, [x0, #0x17]
    // 0xadd094: DecompressPointer r1
    //     0xadd094: add             x1, x1, HEAP, lsl #32
    // 0xadd098: StoreField: r2->field_23 = r1
    //     0xadd098: stur            w1, [x2, #0x23]
    // 0xadd09c: LoadField: r1 = r0->field_1f
    //     0xadd09c: ldur            w1, [x0, #0x1f]
    // 0xadd0a0: DecompressPointer r1
    //     0xadd0a0: add             x1, x1, HEAP, lsl #32
    // 0xadd0a4: StoreField: r2->field_27 = r1
    //     0xadd0a4: stur            w1, [x2, #0x27]
    // 0xadd0a8: LoadField: r1 = r0->field_23
    //     0xadd0a8: ldur            w1, [x0, #0x23]
    // 0xadd0ac: DecompressPointer r1
    //     0xadd0ac: add             x1, x1, HEAP, lsl #32
    // 0xadd0b0: StoreField: r2->field_2b = r1
    //     0xadd0b0: stur            w1, [x2, #0x2b]
    // 0xadd0b4: LoadField: r1 = r0->field_27
    //     0xadd0b4: ldur            w1, [x0, #0x27]
    // 0xadd0b8: DecompressPointer r1
    //     0xadd0b8: add             x1, x1, HEAP, lsl #32
    // 0xadd0bc: StoreField: r2->field_2f = r1
    //     0xadd0bc: stur            w1, [x2, #0x2f]
    // 0xadd0c0: LoadField: r1 = r0->field_2b
    //     0xadd0c0: ldur            w1, [x0, #0x2b]
    // 0xadd0c4: DecompressPointer r1
    //     0xadd0c4: add             x1, x1, HEAP, lsl #32
    // 0xadd0c8: StoreField: r2->field_33 = r1
    //     0xadd0c8: stur            w1, [x2, #0x33]
    // 0xadd0cc: LoadField: r1 = r0->field_2f
    //     0xadd0cc: ldur            w1, [x0, #0x2f]
    // 0xadd0d0: DecompressPointer r1
    //     0xadd0d0: add             x1, x1, HEAP, lsl #32
    // 0xadd0d4: StoreField: r2->field_37 = r1
    //     0xadd0d4: stur            w1, [x2, #0x37]
    // 0xadd0d8: LoadField: r1 = r0->field_33
    //     0xadd0d8: ldur            w1, [x0, #0x33]
    // 0xadd0dc: DecompressPointer r1
    //     0xadd0dc: add             x1, x1, HEAP, lsl #32
    // 0xadd0e0: StoreField: r2->field_3b = r1
    //     0xadd0e0: stur            w1, [x2, #0x3b]
    // 0xadd0e4: LoadField: r1 = r0->field_37
    //     0xadd0e4: ldur            w1, [x0, #0x37]
    // 0xadd0e8: DecompressPointer r1
    //     0xadd0e8: add             x1, x1, HEAP, lsl #32
    // 0xadd0ec: StoreField: r2->field_3f = r1
    //     0xadd0ec: stur            w1, [x2, #0x3f]
    // 0xadd0f0: LoadField: r1 = r0->field_3b
    //     0xadd0f0: ldur            w1, [x0, #0x3b]
    // 0xadd0f4: DecompressPointer r1
    //     0xadd0f4: add             x1, x1, HEAP, lsl #32
    // 0xadd0f8: StoreField: r2->field_43 = r1
    //     0xadd0f8: stur            w1, [x2, #0x43]
    // 0xadd0fc: LoadField: r1 = r0->field_3f
    //     0xadd0fc: ldur            w1, [x0, #0x3f]
    // 0xadd100: DecompressPointer r1
    //     0xadd100: add             x1, x1, HEAP, lsl #32
    // 0xadd104: StoreField: r2->field_47 = r1
    //     0xadd104: stur            w1, [x2, #0x47]
    // 0xadd108: LoadField: r1 = r0->field_43
    //     0xadd108: ldur            w1, [x0, #0x43]
    // 0xadd10c: DecompressPointer r1
    //     0xadd10c: add             x1, x1, HEAP, lsl #32
    // 0xadd110: StoreField: r2->field_4b = r1
    //     0xadd110: stur            w1, [x2, #0x4b]
    // 0xadd114: LoadField: r1 = r0->field_47
    //     0xadd114: ldur            w1, [x0, #0x47]
    // 0xadd118: DecompressPointer r1
    //     0xadd118: add             x1, x1, HEAP, lsl #32
    // 0xadd11c: StoreField: r2->field_4f = r1
    //     0xadd11c: stur            w1, [x2, #0x4f]
    // 0xadd120: LoadField: r1 = r0->field_4b
    //     0xadd120: ldur            w1, [x0, #0x4b]
    // 0xadd124: DecompressPointer r1
    //     0xadd124: add             x1, x1, HEAP, lsl #32
    // 0xadd128: StoreField: r2->field_53 = r1
    //     0xadd128: stur            w1, [x2, #0x53]
    // 0xadd12c: LoadField: r1 = r0->field_4f
    //     0xadd12c: ldur            w1, [x0, #0x4f]
    // 0xadd130: DecompressPointer r1
    //     0xadd130: add             x1, x1, HEAP, lsl #32
    // 0xadd134: StoreField: r2->field_57 = r1
    //     0xadd134: stur            w1, [x2, #0x57]
    // 0xadd138: LoadField: r1 = r0->field_53
    //     0xadd138: ldur            w1, [x0, #0x53]
    // 0xadd13c: DecompressPointer r1
    //     0xadd13c: add             x1, x1, HEAP, lsl #32
    // 0xadd140: StoreField: r2->field_5b = r1
    //     0xadd140: stur            w1, [x2, #0x5b]
    // 0xadd144: LoadField: r1 = r0->field_57
    //     0xadd144: ldur            w1, [x0, #0x57]
    // 0xadd148: DecompressPointer r1
    //     0xadd148: add             x1, x1, HEAP, lsl #32
    // 0xadd14c: StoreField: r2->field_5f = r1
    //     0xadd14c: stur            w1, [x2, #0x5f]
    // 0xadd150: LoadField: r1 = r0->field_5b
    //     0xadd150: ldur            w1, [x0, #0x5b]
    // 0xadd154: DecompressPointer r1
    //     0xadd154: add             x1, x1, HEAP, lsl #32
    // 0xadd158: StoreField: r2->field_63 = r1
    //     0xadd158: stur            w1, [x2, #0x63]
    // 0xadd15c: LoadField: r1 = r0->field_9b
    //     0xadd15c: ldur            w1, [x0, #0x9b]
    // 0xadd160: DecompressPointer r1
    //     0xadd160: add             x1, x1, HEAP, lsl #32
    // 0xadd164: StoreField: r2->field_67 = r1
    //     0xadd164: stur            w1, [x2, #0x67]
    // 0xadd168: LoadField: r1 = r0->field_9f
    //     0xadd168: ldur            w1, [x0, #0x9f]
    // 0xadd16c: DecompressPointer r1
    //     0xadd16c: add             x1, x1, HEAP, lsl #32
    // 0xadd170: StoreField: r2->field_6b = r1
    //     0xadd170: stur            w1, [x2, #0x6b]
    // 0xadd174: LoadField: r1 = r0->field_a3
    //     0xadd174: ldur            w1, [x0, #0xa3]
    // 0xadd178: DecompressPointer r1
    //     0xadd178: add             x1, x1, HEAP, lsl #32
    // 0xadd17c: StoreField: r2->field_6f = r1
    //     0xadd17c: stur            w1, [x2, #0x6f]
    // 0xadd180: LoadField: r1 = r0->field_a7
    //     0xadd180: ldur            w1, [x0, #0xa7]
    // 0xadd184: DecompressPointer r1
    //     0xadd184: add             x1, x1, HEAP, lsl #32
    // 0xadd188: StoreField: r2->field_73 = r1
    //     0xadd188: stur            w1, [x2, #0x73]
    // 0xadd18c: LoadField: r1 = r0->field_5f
    //     0xadd18c: ldur            w1, [x0, #0x5f]
    // 0xadd190: DecompressPointer r1
    //     0xadd190: add             x1, x1, HEAP, lsl #32
    // 0xadd194: StoreField: r2->field_77 = r1
    //     0xadd194: stur            w1, [x2, #0x77]
    // 0xadd198: LoadField: r1 = r0->field_73
    //     0xadd198: ldur            w1, [x0, #0x73]
    // 0xadd19c: DecompressPointer r1
    //     0xadd19c: add             x1, x1, HEAP, lsl #32
    // 0xadd1a0: StoreField: r2->field_7b = r1
    //     0xadd1a0: stur            w1, [x2, #0x7b]
    // 0xadd1a4: LoadField: r1 = r0->field_67
    //     0xadd1a4: ldur            w1, [x0, #0x67]
    // 0xadd1a8: DecompressPointer r1
    //     0xadd1a8: add             x1, x1, HEAP, lsl #32
    // 0xadd1ac: StoreField: r2->field_7f = r1
    //     0xadd1ac: stur            w1, [x2, #0x7f]
    // 0xadd1b0: LoadField: r1 = r0->field_6b
    //     0xadd1b0: ldur            w1, [x0, #0x6b]
    // 0xadd1b4: DecompressPointer r1
    //     0xadd1b4: add             x1, x1, HEAP, lsl #32
    // 0xadd1b8: StoreField: r2->field_83 = r1
    //     0xadd1b8: stur            w1, [x2, #0x83]
    // 0xadd1bc: LoadField: r1 = r0->field_6f
    //     0xadd1bc: ldur            w1, [x0, #0x6f]
    // 0xadd1c0: DecompressPointer r1
    //     0xadd1c0: add             x1, x1, HEAP, lsl #32
    // 0xadd1c4: StoreField: r2->field_87 = r1
    //     0xadd1c4: stur            w1, [x2, #0x87]
    // 0xadd1c8: LoadField: r1 = r0->field_63
    //     0xadd1c8: ldur            w1, [x0, #0x63]
    // 0xadd1cc: DecompressPointer r1
    //     0xadd1cc: add             x1, x1, HEAP, lsl #32
    // 0xadd1d0: StoreField: r2->field_8b = r1
    //     0xadd1d0: stur            w1, [x2, #0x8b]
    // 0xadd1d4: LoadField: r1 = r0->field_77
    //     0xadd1d4: ldur            w1, [x0, #0x77]
    // 0xadd1d8: DecompressPointer r1
    //     0xadd1d8: add             x1, x1, HEAP, lsl #32
    // 0xadd1dc: StoreField: r2->field_8f = r1
    //     0xadd1dc: stur            w1, [x2, #0x8f]
    // 0xadd1e0: LoadField: r1 = r0->field_87
    //     0xadd1e0: ldur            w1, [x0, #0x87]
    // 0xadd1e4: DecompressPointer r1
    //     0xadd1e4: add             x1, x1, HEAP, lsl #32
    // 0xadd1e8: StoreField: r2->field_93 = r1
    //     0xadd1e8: stur            w1, [x2, #0x93]
    // 0xadd1ec: LoadField: r1 = r0->field_7b
    //     0xadd1ec: ldur            w1, [x0, #0x7b]
    // 0xadd1f0: DecompressPointer r1
    //     0xadd1f0: add             x1, x1, HEAP, lsl #32
    // 0xadd1f4: StoreField: r2->field_97 = r1
    //     0xadd1f4: stur            w1, [x2, #0x97]
    // 0xadd1f8: LoadField: r1 = r0->field_7f
    //     0xadd1f8: ldur            w1, [x0, #0x7f]
    // 0xadd1fc: DecompressPointer r1
    //     0xadd1fc: add             x1, x1, HEAP, lsl #32
    // 0xadd200: StoreField: r2->field_9b = r1
    //     0xadd200: stur            w1, [x2, #0x9b]
    // 0xadd204: LoadField: r1 = r0->field_83
    //     0xadd204: ldur            w1, [x0, #0x83]
    // 0xadd208: DecompressPointer r1
    //     0xadd208: add             x1, x1, HEAP, lsl #32
    // 0xadd20c: StoreField: r2->field_9f = r1
    //     0xadd20c: stur            w1, [x2, #0x9f]
    // 0xadd210: LoadField: r1 = r0->field_8b
    //     0xadd210: ldur            w1, [x0, #0x8b]
    // 0xadd214: DecompressPointer r1
    //     0xadd214: add             x1, x1, HEAP, lsl #32
    // 0xadd218: StoreField: r2->field_a3 = r1
    //     0xadd218: stur            w1, [x2, #0xa3]
    // 0xadd21c: LoadField: r1 = r0->field_93
    //     0xadd21c: ldur            w1, [x0, #0x93]
    // 0xadd220: DecompressPointer r1
    //     0xadd220: add             x1, x1, HEAP, lsl #32
    // 0xadd224: StoreField: r2->field_a7 = r1
    //     0xadd224: stur            w1, [x2, #0xa7]
    // 0xadd228: LoadField: r1 = r0->field_8f
    //     0xadd228: ldur            w1, [x0, #0x8f]
    // 0xadd22c: DecompressPointer r1
    //     0xadd22c: add             x1, x1, HEAP, lsl #32
    // 0xadd230: StoreField: r2->field_ab = r1
    //     0xadd230: stur            w1, [x2, #0xab]
    // 0xadd234: LoadField: r1 = r0->field_97
    //     0xadd234: ldur            w1, [x0, #0x97]
    // 0xadd238: DecompressPointer r1
    //     0xadd238: add             x1, x1, HEAP, lsl #32
    // 0xadd23c: StoreField: r2->field_af = r1
    //     0xadd23c: stur            w1, [x2, #0xaf]
    // 0xadd240: LoadField: r1 = r0->field_ab
    //     0xadd240: ldur            w1, [x0, #0xab]
    // 0xadd244: DecompressPointer r1
    //     0xadd244: add             x1, x1, HEAP, lsl #32
    // 0xadd248: StoreField: r2->field_b3 = r1
    //     0xadd248: stur            w1, [x2, #0xb3]
    // 0xadd24c: LoadField: r1 = r0->field_af
    //     0xadd24c: ldur            w1, [x0, #0xaf]
    // 0xadd250: DecompressPointer r1
    //     0xadd250: add             x1, x1, HEAP, lsl #32
    // 0xadd254: StoreField: r2->field_b7 = r1
    //     0xadd254: stur            w1, [x2, #0xb7]
    // 0xadd258: LoadField: r1 = r0->field_b3
    //     0xadd258: ldur            w1, [x0, #0xb3]
    // 0xadd25c: DecompressPointer r1
    //     0xadd25c: add             x1, x1, HEAP, lsl #32
    // 0xadd260: StoreField: r2->field_bb = r1
    //     0xadd260: stur            w1, [x2, #0xbb]
    // 0xadd264: LoadField: r1 = r0->field_b7
    //     0xadd264: ldur            w1, [x0, #0xb7]
    // 0xadd268: DecompressPointer r1
    //     0xadd268: add             x1, x1, HEAP, lsl #32
    // 0xadd26c: StoreField: r2->field_bf = r1
    //     0xadd26c: stur            w1, [x2, #0xbf]
    // 0xadd270: LoadField: r1 = r0->field_bb
    //     0xadd270: ldur            w1, [x0, #0xbb]
    // 0xadd274: DecompressPointer r1
    //     0xadd274: add             x1, x1, HEAP, lsl #32
    // 0xadd278: StoreField: r2->field_c3 = r1
    //     0xadd278: stur            w1, [x2, #0xc3]
    // 0xadd27c: LoadField: r1 = r0->field_bf
    //     0xadd27c: ldur            w1, [x0, #0xbf]
    // 0xadd280: DecompressPointer r1
    //     0xadd280: add             x1, x1, HEAP, lsl #32
    // 0xadd284: StoreField: r2->field_c7 = r1
    //     0xadd284: stur            w1, [x2, #0xc7]
    // 0xadd288: LoadField: r1 = r0->field_c3
    //     0xadd288: ldur            w1, [x0, #0xc3]
    // 0xadd28c: DecompressPointer r1
    //     0xadd28c: add             x1, x1, HEAP, lsl #32
    // 0xadd290: StoreField: r2->field_cb = r1
    //     0xadd290: stur            w1, [x2, #0xcb]
    // 0xadd294: LoadField: r1 = r0->field_c7
    //     0xadd294: ldur            w1, [x0, #0xc7]
    // 0xadd298: DecompressPointer r1
    //     0xadd298: add             x1, x1, HEAP, lsl #32
    // 0xadd29c: StoreField: r2->field_cf = r1
    //     0xadd29c: stur            w1, [x2, #0xcf]
    // 0xadd2a0: LoadField: r1 = r0->field_cb
    //     0xadd2a0: ldur            w1, [x0, #0xcb]
    // 0xadd2a4: DecompressPointer r1
    //     0xadd2a4: add             x1, x1, HEAP, lsl #32
    // 0xadd2a8: StoreField: r2->field_d3 = r1
    //     0xadd2a8: stur            w1, [x2, #0xd3]
    // 0xadd2ac: LoadField: r1 = r0->field_cf
    //     0xadd2ac: ldur            w1, [x0, #0xcf]
    // 0xadd2b0: DecompressPointer r1
    //     0xadd2b0: add             x1, x1, HEAP, lsl #32
    // 0xadd2b4: StoreField: r2->field_d7 = r1
    //     0xadd2b4: stur            w1, [x2, #0xd7]
    // 0xadd2b8: r1 = <Object?>
    //     0xadd2b8: ldr             x1, [PP, #0x718]  ; [pp+0x718] TypeArguments: <Object?>
    // 0xadd2bc: r0 = AllocateGrowableArray()
    //     0xadd2bc: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0xadd2c0: mov             x1, x0
    // 0xadd2c4: ldur            x0, [fp, #-0x10]
    // 0xadd2c8: StoreField: r1->field_f = r0
    //     0xadd2c8: stur            w0, [x1, #0xf]
    // 0xadd2cc: r0 = 102
    //     0xadd2cc: movz            x0, #0x66
    // 0xadd2d0: StoreField: r1->field_b = r0
    //     0xadd2d0: stur            w0, [x1, #0xb]
    // 0xadd2d4: str             x1, [SP]
    // 0xadd2d8: r0 = hashAll()
    //     0xadd2d8: bl              #0xad0964  ; [dart:core] Object::hashAll
    // 0xadd2dc: mov             x2, x0
    // 0xadd2e0: r0 = BoxInt64Instr(r2)
    //     0xadd2e0: sbfiz           x0, x2, #1, #0x1f
    //     0xadd2e4: cmp             x2, x0, asr #1
    //     0xadd2e8: b.eq            #0xadd2f4
    //     0xadd2ec: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xadd2f0: stur            x2, [x0, #7]
    // 0xadd2f4: LeaveFrame
    //     0xadd2f4: mov             SP, fp
    //     0xadd2f8: ldp             fp, lr, [SP], #0x10
    // 0xadd2fc: ret
    //     0xadd2fc: ret             
    // 0xadd300: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xadd300: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xadd304: b               #0xadd030
  }
  _ toString(/* No info */) {
    // ** addr: 0xaf8d40, size: 0x127c
    // 0xaf8d40: EnterFrame
    //     0xaf8d40: stp             fp, lr, [SP, #-0x10]!
    //     0xaf8d44: mov             fp, SP
    // 0xaf8d48: AllocStack(0x28)
    //     0xaf8d48: sub             SP, SP, #0x28
    // 0xaf8d4c: CheckStackOverflow
    //     0xaf8d4c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xaf8d50: cmp             SP, x16
    //     0xaf8d54: b.ls            #0xaf9f5c
    // 0xaf8d58: r16 = <String>
    //     0xaf8d58: ldr             x16, [PP, #0x918]  ; [pp+0x918] TypeArguments: <String>
    // 0xaf8d5c: stp             xzr, x16, [SP]
    // 0xaf8d60: r0 = _GrowableList()
    //     0xaf8d60: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0xaf8d64: mov             x3, x0
    // 0xaf8d68: ldr             x0, [fp, #0x10]
    // 0xaf8d6c: stur            x3, [fp, #-0x10]
    // 0xaf8d70: LoadField: r4 = r0->field_2b
    //     0xaf8d70: ldur            w4, [x0, #0x2b]
    // 0xaf8d74: DecompressPointer r4
    //     0xaf8d74: add             x4, x4, HEAP, lsl #32
    // 0xaf8d78: stur            x4, [fp, #-8]
    // 0xaf8d7c: cmp             w4, NULL
    // 0xaf8d80: b.eq            #0xaf8e44
    // 0xaf8d84: r1 = Null
    //     0xaf8d84: mov             x1, NULL
    // 0xaf8d88: r2 = 6
    //     0xaf8d88: movz            x2, #0x6
    // 0xaf8d8c: r0 = AllocateArray()
    //     0xaf8d8c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf8d90: r17 = "hintText: \""
    //     0xaf8d90: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c390] "hintText: \""
    //     0xaf8d94: ldr             x17, [x17, #0x390]
    // 0xaf8d98: StoreField: r0->field_f = r17
    //     0xaf8d98: stur            w17, [x0, #0xf]
    // 0xaf8d9c: ldur            x1, [fp, #-8]
    // 0xaf8da0: StoreField: r0->field_13 = r1
    //     0xaf8da0: stur            w1, [x0, #0x13]
    // 0xaf8da4: r17 = "\""
    //     0xaf8da4: ldr             x17, [PP, #0x1ca0]  ; [pp+0x1ca0] "\""
    // 0xaf8da8: ArrayStore: r0[0] = r17  ; List_4
    //     0xaf8da8: stur            w17, [x0, #0x17]
    // 0xaf8dac: str             x0, [SP]
    // 0xaf8db0: r0 = _interpolate()
    //     0xaf8db0: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf8db4: mov             x1, x0
    // 0xaf8db8: ldur            x0, [fp, #-0x10]
    // 0xaf8dbc: stur            x1, [fp, #-0x18]
    // 0xaf8dc0: LoadField: r2 = r0->field_b
    //     0xaf8dc0: ldur            w2, [x0, #0xb]
    // 0xaf8dc4: DecompressPointer r2
    //     0xaf8dc4: add             x2, x2, HEAP, lsl #32
    // 0xaf8dc8: stur            x2, [fp, #-8]
    // 0xaf8dcc: LoadField: r3 = r0->field_f
    //     0xaf8dcc: ldur            w3, [x0, #0xf]
    // 0xaf8dd0: DecompressPointer r3
    //     0xaf8dd0: add             x3, x3, HEAP, lsl #32
    // 0xaf8dd4: LoadField: r4 = r3->field_b
    //     0xaf8dd4: ldur            w4, [x3, #0xb]
    // 0xaf8dd8: DecompressPointer r4
    //     0xaf8dd8: add             x4, x4, HEAP, lsl #32
    // 0xaf8ddc: cmp             w2, w4
    // 0xaf8de0: b.ne            #0xaf8dec
    // 0xaf8de4: str             x0, [SP]
    // 0xaf8de8: r0 = _growToNextCapacity()
    //     0xaf8de8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf8dec: ldur            x3, [fp, #-0x10]
    // 0xaf8df0: ldur            x0, [fp, #-8]
    // 0xaf8df4: r2 = LoadInt32Instr(r0)
    //     0xaf8df4: sbfx            x2, x0, #1, #0x1f
    // 0xaf8df8: add             x0, x2, #1
    // 0xaf8dfc: lsl             x1, x0, #1
    // 0xaf8e00: StoreField: r3->field_b = r1
    //     0xaf8e00: stur            w1, [x3, #0xb]
    // 0xaf8e04: mov             x1, x2
    // 0xaf8e08: cmp             x1, x0
    // 0xaf8e0c: b.hs            #0xaf9f64
    // 0xaf8e10: LoadField: r1 = r3->field_f
    //     0xaf8e10: ldur            w1, [x3, #0xf]
    // 0xaf8e14: DecompressPointer r1
    //     0xaf8e14: add             x1, x1, HEAP, lsl #32
    // 0xaf8e18: ldur            x0, [fp, #-0x18]
    // 0xaf8e1c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf8e1c: add             x25, x1, x2, lsl #2
    //     0xaf8e20: add             x25, x25, #0xf
    //     0xaf8e24: str             w0, [x25]
    //     0xaf8e28: tbz             w0, #0, #0xaf8e44
    //     0xaf8e2c: ldurb           w16, [x1, #-1]
    //     0xaf8e30: ldurb           w17, [x0, #-1]
    //     0xaf8e34: and             x16, x17, x16, lsr #2
    //     0xaf8e38: tst             x16, HEAP, lsr #32
    //     0xaf8e3c: b.eq            #0xaf8e44
    //     0xaf8e40: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf8e44: ldr             x0, [fp, #0x10]
    // 0xaf8e48: LoadField: r4 = r0->field_37
    //     0xaf8e48: ldur            w4, [x0, #0x37]
    // 0xaf8e4c: DecompressPointer r4
    //     0xaf8e4c: add             x4, x4, HEAP, lsl #32
    // 0xaf8e50: stur            x4, [fp, #-8]
    // 0xaf8e54: cmp             w4, NULL
    // 0xaf8e58: b.eq            #0xaf8f1c
    // 0xaf8e5c: r1 = Null
    //     0xaf8e5c: mov             x1, NULL
    // 0xaf8e60: r2 = 6
    //     0xaf8e60: movz            x2, #0x6
    // 0xaf8e64: r0 = AllocateArray()
    //     0xaf8e64: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf8e68: r17 = "hintMaxLines: \""
    //     0xaf8e68: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c398] "hintMaxLines: \""
    //     0xaf8e6c: ldr             x17, [x17, #0x398]
    // 0xaf8e70: StoreField: r0->field_f = r17
    //     0xaf8e70: stur            w17, [x0, #0xf]
    // 0xaf8e74: ldur            x1, [fp, #-8]
    // 0xaf8e78: StoreField: r0->field_13 = r1
    //     0xaf8e78: stur            w1, [x0, #0x13]
    // 0xaf8e7c: r17 = "\""
    //     0xaf8e7c: ldr             x17, [PP, #0x1ca0]  ; [pp+0x1ca0] "\""
    // 0xaf8e80: ArrayStore: r0[0] = r17  ; List_4
    //     0xaf8e80: stur            w17, [x0, #0x17]
    // 0xaf8e84: str             x0, [SP]
    // 0xaf8e88: r0 = _interpolate()
    //     0xaf8e88: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf8e8c: mov             x1, x0
    // 0xaf8e90: ldur            x0, [fp, #-0x10]
    // 0xaf8e94: stur            x1, [fp, #-0x18]
    // 0xaf8e98: LoadField: r2 = r0->field_b
    //     0xaf8e98: ldur            w2, [x0, #0xb]
    // 0xaf8e9c: DecompressPointer r2
    //     0xaf8e9c: add             x2, x2, HEAP, lsl #32
    // 0xaf8ea0: stur            x2, [fp, #-8]
    // 0xaf8ea4: LoadField: r3 = r0->field_f
    //     0xaf8ea4: ldur            w3, [x0, #0xf]
    // 0xaf8ea8: DecompressPointer r3
    //     0xaf8ea8: add             x3, x3, HEAP, lsl #32
    // 0xaf8eac: LoadField: r4 = r3->field_b
    //     0xaf8eac: ldur            w4, [x3, #0xb]
    // 0xaf8eb0: DecompressPointer r4
    //     0xaf8eb0: add             x4, x4, HEAP, lsl #32
    // 0xaf8eb4: cmp             w2, w4
    // 0xaf8eb8: b.ne            #0xaf8ec4
    // 0xaf8ebc: str             x0, [SP]
    // 0xaf8ec0: r0 = _growToNextCapacity()
    //     0xaf8ec0: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf8ec4: ldur            x3, [fp, #-0x10]
    // 0xaf8ec8: ldur            x0, [fp, #-8]
    // 0xaf8ecc: r2 = LoadInt32Instr(r0)
    //     0xaf8ecc: sbfx            x2, x0, #1, #0x1f
    // 0xaf8ed0: add             x0, x2, #1
    // 0xaf8ed4: lsl             x1, x0, #1
    // 0xaf8ed8: StoreField: r3->field_b = r1
    //     0xaf8ed8: stur            w1, [x3, #0xb]
    // 0xaf8edc: mov             x1, x2
    // 0xaf8ee0: cmp             x1, x0
    // 0xaf8ee4: b.hs            #0xaf9f68
    // 0xaf8ee8: LoadField: r1 = r3->field_f
    //     0xaf8ee8: ldur            w1, [x3, #0xf]
    // 0xaf8eec: DecompressPointer r1
    //     0xaf8eec: add             x1, x1, HEAP, lsl #32
    // 0xaf8ef0: ldur            x0, [fp, #-0x18]
    // 0xaf8ef4: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf8ef4: add             x25, x1, x2, lsl #2
    //     0xaf8ef8: add             x25, x25, #0xf
    //     0xaf8efc: str             w0, [x25]
    //     0xaf8f00: tbz             w0, #0, #0xaf8f1c
    //     0xaf8f04: ldurb           w16, [x1, #-1]
    //     0xaf8f08: ldurb           w17, [x0, #-1]
    //     0xaf8f0c: and             x16, x17, x16, lsr #2
    //     0xaf8f10: tst             x16, HEAP, lsr #32
    //     0xaf8f14: b.eq            #0xaf8f1c
    //     0xaf8f18: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf8f1c: ldr             x0, [fp, #0x10]
    // 0xaf8f20: LoadField: r4 = r0->field_3f
    //     0xaf8f20: ldur            w4, [x0, #0x3f]
    // 0xaf8f24: DecompressPointer r4
    //     0xaf8f24: add             x4, x4, HEAP, lsl #32
    // 0xaf8f28: stur            x4, [fp, #-8]
    // 0xaf8f2c: cmp             w4, NULL
    // 0xaf8f30: b.eq            #0xaf8ff4
    // 0xaf8f34: r1 = Null
    //     0xaf8f34: mov             x1, NULL
    // 0xaf8f38: r2 = 6
    //     0xaf8f38: movz            x2, #0x6
    // 0xaf8f3c: r0 = AllocateArray()
    //     0xaf8f3c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf8f40: r17 = "errorText: \""
    //     0xaf8f40: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3a0] "errorText: \""
    //     0xaf8f44: ldr             x17, [x17, #0x3a0]
    // 0xaf8f48: StoreField: r0->field_f = r17
    //     0xaf8f48: stur            w17, [x0, #0xf]
    // 0xaf8f4c: ldur            x1, [fp, #-8]
    // 0xaf8f50: StoreField: r0->field_13 = r1
    //     0xaf8f50: stur            w1, [x0, #0x13]
    // 0xaf8f54: r17 = "\""
    //     0xaf8f54: ldr             x17, [PP, #0x1ca0]  ; [pp+0x1ca0] "\""
    // 0xaf8f58: ArrayStore: r0[0] = r17  ; List_4
    //     0xaf8f58: stur            w17, [x0, #0x17]
    // 0xaf8f5c: str             x0, [SP]
    // 0xaf8f60: r0 = _interpolate()
    //     0xaf8f60: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf8f64: mov             x1, x0
    // 0xaf8f68: ldur            x0, [fp, #-0x10]
    // 0xaf8f6c: stur            x1, [fp, #-0x18]
    // 0xaf8f70: LoadField: r2 = r0->field_b
    //     0xaf8f70: ldur            w2, [x0, #0xb]
    // 0xaf8f74: DecompressPointer r2
    //     0xaf8f74: add             x2, x2, HEAP, lsl #32
    // 0xaf8f78: stur            x2, [fp, #-8]
    // 0xaf8f7c: LoadField: r3 = r0->field_f
    //     0xaf8f7c: ldur            w3, [x0, #0xf]
    // 0xaf8f80: DecompressPointer r3
    //     0xaf8f80: add             x3, x3, HEAP, lsl #32
    // 0xaf8f84: LoadField: r4 = r3->field_b
    //     0xaf8f84: ldur            w4, [x3, #0xb]
    // 0xaf8f88: DecompressPointer r4
    //     0xaf8f88: add             x4, x4, HEAP, lsl #32
    // 0xaf8f8c: cmp             w2, w4
    // 0xaf8f90: b.ne            #0xaf8f9c
    // 0xaf8f94: str             x0, [SP]
    // 0xaf8f98: r0 = _growToNextCapacity()
    //     0xaf8f98: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf8f9c: ldur            x3, [fp, #-0x10]
    // 0xaf8fa0: ldur            x0, [fp, #-8]
    // 0xaf8fa4: r2 = LoadInt32Instr(r0)
    //     0xaf8fa4: sbfx            x2, x0, #1, #0x1f
    // 0xaf8fa8: add             x0, x2, #1
    // 0xaf8fac: lsl             x1, x0, #1
    // 0xaf8fb0: StoreField: r3->field_b = r1
    //     0xaf8fb0: stur            w1, [x3, #0xb]
    // 0xaf8fb4: mov             x1, x2
    // 0xaf8fb8: cmp             x1, x0
    // 0xaf8fbc: b.hs            #0xaf9f6c
    // 0xaf8fc0: LoadField: r1 = r3->field_f
    //     0xaf8fc0: ldur            w1, [x3, #0xf]
    // 0xaf8fc4: DecompressPointer r1
    //     0xaf8fc4: add             x1, x1, HEAP, lsl #32
    // 0xaf8fc8: ldur            x0, [fp, #-0x18]
    // 0xaf8fcc: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf8fcc: add             x25, x1, x2, lsl #2
    //     0xaf8fd0: add             x25, x25, #0xf
    //     0xaf8fd4: str             w0, [x25]
    //     0xaf8fd8: tbz             w0, #0, #0xaf8ff4
    //     0xaf8fdc: ldurb           w16, [x1, #-1]
    //     0xaf8fe0: ldurb           w17, [x0, #-1]
    //     0xaf8fe4: and             x16, x17, x16, lsr #2
    //     0xaf8fe8: tst             x16, HEAP, lsr #32
    //     0xaf8fec: b.eq            #0xaf8ff4
    //     0xaf8ff0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf8ff4: ldr             x0, [fp, #0x10]
    // 0xaf8ff8: LoadField: r4 = r0->field_4b
    //     0xaf8ff8: ldur            w4, [x0, #0x4b]
    // 0xaf8ffc: DecompressPointer r4
    //     0xaf8ffc: add             x4, x4, HEAP, lsl #32
    // 0xaf9000: stur            x4, [fp, #-8]
    // 0xaf9004: cmp             w4, NULL
    // 0xaf9008: b.eq            #0xaf90c4
    // 0xaf900c: r1 = Null
    //     0xaf900c: mov             x1, NULL
    // 0xaf9010: r2 = 4
    //     0xaf9010: movz            x2, #0x4
    // 0xaf9014: r0 = AllocateArray()
    //     0xaf9014: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9018: r17 = "floatingLabelBehavior: "
    //     0xaf9018: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3a8] "floatingLabelBehavior: "
    //     0xaf901c: ldr             x17, [x17, #0x3a8]
    // 0xaf9020: StoreField: r0->field_f = r17
    //     0xaf9020: stur            w17, [x0, #0xf]
    // 0xaf9024: ldur            x1, [fp, #-8]
    // 0xaf9028: StoreField: r0->field_13 = r1
    //     0xaf9028: stur            w1, [x0, #0x13]
    // 0xaf902c: str             x0, [SP]
    // 0xaf9030: r0 = _interpolate()
    //     0xaf9030: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9034: mov             x1, x0
    // 0xaf9038: ldur            x0, [fp, #-0x10]
    // 0xaf903c: stur            x1, [fp, #-0x18]
    // 0xaf9040: LoadField: r2 = r0->field_b
    //     0xaf9040: ldur            w2, [x0, #0xb]
    // 0xaf9044: DecompressPointer r2
    //     0xaf9044: add             x2, x2, HEAP, lsl #32
    // 0xaf9048: stur            x2, [fp, #-8]
    // 0xaf904c: LoadField: r3 = r0->field_f
    //     0xaf904c: ldur            w3, [x0, #0xf]
    // 0xaf9050: DecompressPointer r3
    //     0xaf9050: add             x3, x3, HEAP, lsl #32
    // 0xaf9054: LoadField: r4 = r3->field_b
    //     0xaf9054: ldur            w4, [x3, #0xb]
    // 0xaf9058: DecompressPointer r4
    //     0xaf9058: add             x4, x4, HEAP, lsl #32
    // 0xaf905c: cmp             w2, w4
    // 0xaf9060: b.ne            #0xaf906c
    // 0xaf9064: str             x0, [SP]
    // 0xaf9068: r0 = _growToNextCapacity()
    //     0xaf9068: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf906c: ldur            x3, [fp, #-0x10]
    // 0xaf9070: ldur            x0, [fp, #-8]
    // 0xaf9074: r2 = LoadInt32Instr(r0)
    //     0xaf9074: sbfx            x2, x0, #1, #0x1f
    // 0xaf9078: add             x0, x2, #1
    // 0xaf907c: lsl             x1, x0, #1
    // 0xaf9080: StoreField: r3->field_b = r1
    //     0xaf9080: stur            w1, [x3, #0xb]
    // 0xaf9084: mov             x1, x2
    // 0xaf9088: cmp             x1, x0
    // 0xaf908c: b.hs            #0xaf9f70
    // 0xaf9090: LoadField: r1 = r3->field_f
    //     0xaf9090: ldur            w1, [x3, #0xf]
    // 0xaf9094: DecompressPointer r1
    //     0xaf9094: add             x1, x1, HEAP, lsl #32
    // 0xaf9098: ldur            x0, [fp, #-0x18]
    // 0xaf909c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf909c: add             x25, x1, x2, lsl #2
    //     0xaf90a0: add             x25, x25, #0xf
    //     0xaf90a4: str             w0, [x25]
    //     0xaf90a8: tbz             w0, #0, #0xaf90c4
    //     0xaf90ac: ldurb           w16, [x1, #-1]
    //     0xaf90b0: ldurb           w17, [x0, #-1]
    //     0xaf90b4: and             x16, x17, x16, lsr #2
    //     0xaf90b8: tst             x16, HEAP, lsr #32
    //     0xaf90bc: b.eq            #0xaf90c4
    //     0xaf90c0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf90c4: ldr             x0, [fp, #0x10]
    // 0xaf90c8: LoadField: r4 = r0->field_4f
    //     0xaf90c8: ldur            w4, [x0, #0x4f]
    // 0xaf90cc: DecompressPointer r4
    //     0xaf90cc: add             x4, x4, HEAP, lsl #32
    // 0xaf90d0: stur            x4, [fp, #-8]
    // 0xaf90d4: cmp             w4, NULL
    // 0xaf90d8: b.eq            #0xaf9194
    // 0xaf90dc: r1 = Null
    //     0xaf90dc: mov             x1, NULL
    // 0xaf90e0: r2 = 4
    //     0xaf90e0: movz            x2, #0x4
    // 0xaf90e4: r0 = AllocateArray()
    //     0xaf90e4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf90e8: r17 = "floatingLabelAlignment: "
    //     0xaf90e8: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3b0] "floatingLabelAlignment: "
    //     0xaf90ec: ldr             x17, [x17, #0x3b0]
    // 0xaf90f0: StoreField: r0->field_f = r17
    //     0xaf90f0: stur            w17, [x0, #0xf]
    // 0xaf90f4: ldur            x1, [fp, #-8]
    // 0xaf90f8: StoreField: r0->field_13 = r1
    //     0xaf90f8: stur            w1, [x0, #0x13]
    // 0xaf90fc: str             x0, [SP]
    // 0xaf9100: r0 = _interpolate()
    //     0xaf9100: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9104: mov             x1, x0
    // 0xaf9108: ldur            x0, [fp, #-0x10]
    // 0xaf910c: stur            x1, [fp, #-0x18]
    // 0xaf9110: LoadField: r2 = r0->field_b
    //     0xaf9110: ldur            w2, [x0, #0xb]
    // 0xaf9114: DecompressPointer r2
    //     0xaf9114: add             x2, x2, HEAP, lsl #32
    // 0xaf9118: stur            x2, [fp, #-8]
    // 0xaf911c: LoadField: r3 = r0->field_f
    //     0xaf911c: ldur            w3, [x0, #0xf]
    // 0xaf9120: DecompressPointer r3
    //     0xaf9120: add             x3, x3, HEAP, lsl #32
    // 0xaf9124: LoadField: r4 = r3->field_b
    //     0xaf9124: ldur            w4, [x3, #0xb]
    // 0xaf9128: DecompressPointer r4
    //     0xaf9128: add             x4, x4, HEAP, lsl #32
    // 0xaf912c: cmp             w2, w4
    // 0xaf9130: b.ne            #0xaf913c
    // 0xaf9134: str             x0, [SP]
    // 0xaf9138: r0 = _growToNextCapacity()
    //     0xaf9138: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf913c: ldur            x3, [fp, #-0x10]
    // 0xaf9140: ldur            x0, [fp, #-8]
    // 0xaf9144: r2 = LoadInt32Instr(r0)
    //     0xaf9144: sbfx            x2, x0, #1, #0x1f
    // 0xaf9148: add             x0, x2, #1
    // 0xaf914c: lsl             x1, x0, #1
    // 0xaf9150: StoreField: r3->field_b = r1
    //     0xaf9150: stur            w1, [x3, #0xb]
    // 0xaf9154: mov             x1, x2
    // 0xaf9158: cmp             x1, x0
    // 0xaf915c: b.hs            #0xaf9f74
    // 0xaf9160: LoadField: r1 = r3->field_f
    //     0xaf9160: ldur            w1, [x3, #0xf]
    // 0xaf9164: DecompressPointer r1
    //     0xaf9164: add             x1, x1, HEAP, lsl #32
    // 0xaf9168: ldur            x0, [fp, #-0x18]
    // 0xaf916c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf916c: add             x25, x1, x2, lsl #2
    //     0xaf9170: add             x25, x25, #0xf
    //     0xaf9174: str             w0, [x25]
    //     0xaf9178: tbz             w0, #0, #0xaf9194
    //     0xaf917c: ldurb           w16, [x1, #-1]
    //     0xaf9180: ldurb           w17, [x0, #-1]
    //     0xaf9184: and             x16, x17, x16, lsr #2
    //     0xaf9188: tst             x16, HEAP, lsr #32
    //     0xaf918c: b.eq            #0xaf9194
    //     0xaf9190: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9194: ldr             x0, [fp, #0x10]
    // 0xaf9198: LoadField: r4 = r0->field_53
    //     0xaf9198: ldur            w4, [x0, #0x53]
    // 0xaf919c: DecompressPointer r4
    //     0xaf919c: add             x4, x4, HEAP, lsl #32
    // 0xaf91a0: stur            x4, [fp, #-8]
    // 0xaf91a4: cmp             w4, NULL
    // 0xaf91a8: b.eq            #0xaf9268
    // 0xaf91ac: tbnz            w4, #4, #0xaf9268
    // 0xaf91b0: r1 = Null
    //     0xaf91b0: mov             x1, NULL
    // 0xaf91b4: r2 = 4
    //     0xaf91b4: movz            x2, #0x4
    // 0xaf91b8: r0 = AllocateArray()
    //     0xaf91b8: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf91bc: r17 = "isDense: "
    //     0xaf91bc: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3b8] "isDense: "
    //     0xaf91c0: ldr             x17, [x17, #0x3b8]
    // 0xaf91c4: StoreField: r0->field_f = r17
    //     0xaf91c4: stur            w17, [x0, #0xf]
    // 0xaf91c8: ldur            x1, [fp, #-8]
    // 0xaf91cc: StoreField: r0->field_13 = r1
    //     0xaf91cc: stur            w1, [x0, #0x13]
    // 0xaf91d0: str             x0, [SP]
    // 0xaf91d4: r0 = _interpolate()
    //     0xaf91d4: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf91d8: mov             x1, x0
    // 0xaf91dc: ldur            x0, [fp, #-0x10]
    // 0xaf91e0: stur            x1, [fp, #-0x18]
    // 0xaf91e4: LoadField: r2 = r0->field_b
    //     0xaf91e4: ldur            w2, [x0, #0xb]
    // 0xaf91e8: DecompressPointer r2
    //     0xaf91e8: add             x2, x2, HEAP, lsl #32
    // 0xaf91ec: stur            x2, [fp, #-8]
    // 0xaf91f0: LoadField: r3 = r0->field_f
    //     0xaf91f0: ldur            w3, [x0, #0xf]
    // 0xaf91f4: DecompressPointer r3
    //     0xaf91f4: add             x3, x3, HEAP, lsl #32
    // 0xaf91f8: LoadField: r4 = r3->field_b
    //     0xaf91f8: ldur            w4, [x3, #0xb]
    // 0xaf91fc: DecompressPointer r4
    //     0xaf91fc: add             x4, x4, HEAP, lsl #32
    // 0xaf9200: cmp             w2, w4
    // 0xaf9204: b.ne            #0xaf9210
    // 0xaf9208: str             x0, [SP]
    // 0xaf920c: r0 = _growToNextCapacity()
    //     0xaf920c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9210: ldur            x3, [fp, #-0x10]
    // 0xaf9214: ldur            x0, [fp, #-8]
    // 0xaf9218: r2 = LoadInt32Instr(r0)
    //     0xaf9218: sbfx            x2, x0, #1, #0x1f
    // 0xaf921c: add             x0, x2, #1
    // 0xaf9220: lsl             x1, x0, #1
    // 0xaf9224: StoreField: r3->field_b = r1
    //     0xaf9224: stur            w1, [x3, #0xb]
    // 0xaf9228: mov             x1, x2
    // 0xaf922c: cmp             x1, x0
    // 0xaf9230: b.hs            #0xaf9f78
    // 0xaf9234: LoadField: r1 = r3->field_f
    //     0xaf9234: ldur            w1, [x3, #0xf]
    // 0xaf9238: DecompressPointer r1
    //     0xaf9238: add             x1, x1, HEAP, lsl #32
    // 0xaf923c: ldur            x0, [fp, #-0x18]
    // 0xaf9240: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9240: add             x25, x1, x2, lsl #2
    //     0xaf9244: add             x25, x25, #0xf
    //     0xaf9248: str             w0, [x25]
    //     0xaf924c: tbz             w0, #0, #0xaf9268
    //     0xaf9250: ldurb           w16, [x1, #-1]
    //     0xaf9254: ldurb           w17, [x0, #-1]
    //     0xaf9258: and             x16, x17, x16, lsr #2
    //     0xaf925c: tst             x16, HEAP, lsr #32
    //     0xaf9260: b.eq            #0xaf9268
    //     0xaf9264: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9268: ldr             x0, [fp, #0x10]
    // 0xaf926c: LoadField: r4 = r0->field_57
    //     0xaf926c: ldur            w4, [x0, #0x57]
    // 0xaf9270: DecompressPointer r4
    //     0xaf9270: add             x4, x4, HEAP, lsl #32
    // 0xaf9274: stur            x4, [fp, #-8]
    // 0xaf9278: cmp             w4, NULL
    // 0xaf927c: b.eq            #0xaf9338
    // 0xaf9280: r1 = Null
    //     0xaf9280: mov             x1, NULL
    // 0xaf9284: r2 = 4
    //     0xaf9284: movz            x2, #0x4
    // 0xaf9288: r0 = AllocateArray()
    //     0xaf9288: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf928c: r17 = "contentPadding: "
    //     0xaf928c: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3c0] "contentPadding: "
    //     0xaf9290: ldr             x17, [x17, #0x3c0]
    // 0xaf9294: StoreField: r0->field_f = r17
    //     0xaf9294: stur            w17, [x0, #0xf]
    // 0xaf9298: ldur            x1, [fp, #-8]
    // 0xaf929c: StoreField: r0->field_13 = r1
    //     0xaf929c: stur            w1, [x0, #0x13]
    // 0xaf92a0: str             x0, [SP]
    // 0xaf92a4: r0 = _interpolate()
    //     0xaf92a4: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf92a8: mov             x1, x0
    // 0xaf92ac: ldur            x0, [fp, #-0x10]
    // 0xaf92b0: stur            x1, [fp, #-0x18]
    // 0xaf92b4: LoadField: r2 = r0->field_b
    //     0xaf92b4: ldur            w2, [x0, #0xb]
    // 0xaf92b8: DecompressPointer r2
    //     0xaf92b8: add             x2, x2, HEAP, lsl #32
    // 0xaf92bc: stur            x2, [fp, #-8]
    // 0xaf92c0: LoadField: r3 = r0->field_f
    //     0xaf92c0: ldur            w3, [x0, #0xf]
    // 0xaf92c4: DecompressPointer r3
    //     0xaf92c4: add             x3, x3, HEAP, lsl #32
    // 0xaf92c8: LoadField: r4 = r3->field_b
    //     0xaf92c8: ldur            w4, [x3, #0xb]
    // 0xaf92cc: DecompressPointer r4
    //     0xaf92cc: add             x4, x4, HEAP, lsl #32
    // 0xaf92d0: cmp             w2, w4
    // 0xaf92d4: b.ne            #0xaf92e0
    // 0xaf92d8: str             x0, [SP]
    // 0xaf92dc: r0 = _growToNextCapacity()
    //     0xaf92dc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf92e0: ldur            x3, [fp, #-0x10]
    // 0xaf92e4: ldur            x0, [fp, #-8]
    // 0xaf92e8: r2 = LoadInt32Instr(r0)
    //     0xaf92e8: sbfx            x2, x0, #1, #0x1f
    // 0xaf92ec: add             x0, x2, #1
    // 0xaf92f0: lsl             x1, x0, #1
    // 0xaf92f4: StoreField: r3->field_b = r1
    //     0xaf92f4: stur            w1, [x3, #0xb]
    // 0xaf92f8: mov             x1, x2
    // 0xaf92fc: cmp             x1, x0
    // 0xaf9300: b.hs            #0xaf9f7c
    // 0xaf9304: LoadField: r1 = r3->field_f
    //     0xaf9304: ldur            w1, [x3, #0xf]
    // 0xaf9308: DecompressPointer r1
    //     0xaf9308: add             x1, x1, HEAP, lsl #32
    // 0xaf930c: ldur            x0, [fp, #-0x18]
    // 0xaf9310: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9310: add             x25, x1, x2, lsl #2
    //     0xaf9314: add             x25, x25, #0xf
    //     0xaf9318: str             w0, [x25]
    //     0xaf931c: tbz             w0, #0, #0xaf9338
    //     0xaf9320: ldurb           w16, [x1, #-1]
    //     0xaf9324: ldurb           w17, [x0, #-1]
    //     0xaf9328: and             x16, x17, x16, lsr #2
    //     0xaf932c: tst             x16, HEAP, lsr #32
    //     0xaf9330: b.eq            #0xaf9338
    //     0xaf9334: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9338: ldr             x0, [fp, #0x10]
    // 0xaf933c: LoadField: r4 = r0->field_5b
    //     0xaf933c: ldur            w4, [x0, #0x5b]
    // 0xaf9340: DecompressPointer r4
    //     0xaf9340: add             x4, x4, HEAP, lsl #32
    // 0xaf9344: stur            x4, [fp, #-8]
    // 0xaf9348: tbnz            w4, #4, #0xaf9404
    // 0xaf934c: r1 = Null
    //     0xaf934c: mov             x1, NULL
    // 0xaf9350: r2 = 4
    //     0xaf9350: movz            x2, #0x4
    // 0xaf9354: r0 = AllocateArray()
    //     0xaf9354: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9358: r17 = "isCollapsed: "
    //     0xaf9358: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3c8] "isCollapsed: "
    //     0xaf935c: ldr             x17, [x17, #0x3c8]
    // 0xaf9360: StoreField: r0->field_f = r17
    //     0xaf9360: stur            w17, [x0, #0xf]
    // 0xaf9364: ldur            x1, [fp, #-8]
    // 0xaf9368: StoreField: r0->field_13 = r1
    //     0xaf9368: stur            w1, [x0, #0x13]
    // 0xaf936c: str             x0, [SP]
    // 0xaf9370: r0 = _interpolate()
    //     0xaf9370: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9374: mov             x1, x0
    // 0xaf9378: ldur            x0, [fp, #-0x10]
    // 0xaf937c: stur            x1, [fp, #-0x18]
    // 0xaf9380: LoadField: r2 = r0->field_b
    //     0xaf9380: ldur            w2, [x0, #0xb]
    // 0xaf9384: DecompressPointer r2
    //     0xaf9384: add             x2, x2, HEAP, lsl #32
    // 0xaf9388: stur            x2, [fp, #-8]
    // 0xaf938c: LoadField: r3 = r0->field_f
    //     0xaf938c: ldur            w3, [x0, #0xf]
    // 0xaf9390: DecompressPointer r3
    //     0xaf9390: add             x3, x3, HEAP, lsl #32
    // 0xaf9394: LoadField: r4 = r3->field_b
    //     0xaf9394: ldur            w4, [x3, #0xb]
    // 0xaf9398: DecompressPointer r4
    //     0xaf9398: add             x4, x4, HEAP, lsl #32
    // 0xaf939c: cmp             w2, w4
    // 0xaf93a0: b.ne            #0xaf93ac
    // 0xaf93a4: str             x0, [SP]
    // 0xaf93a8: r0 = _growToNextCapacity()
    //     0xaf93a8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf93ac: ldur            x3, [fp, #-0x10]
    // 0xaf93b0: ldur            x0, [fp, #-8]
    // 0xaf93b4: r2 = LoadInt32Instr(r0)
    //     0xaf93b4: sbfx            x2, x0, #1, #0x1f
    // 0xaf93b8: add             x0, x2, #1
    // 0xaf93bc: lsl             x1, x0, #1
    // 0xaf93c0: StoreField: r3->field_b = r1
    //     0xaf93c0: stur            w1, [x3, #0xb]
    // 0xaf93c4: mov             x1, x2
    // 0xaf93c8: cmp             x1, x0
    // 0xaf93cc: b.hs            #0xaf9f80
    // 0xaf93d0: LoadField: r1 = r3->field_f
    //     0xaf93d0: ldur            w1, [x3, #0xf]
    // 0xaf93d4: DecompressPointer r1
    //     0xaf93d4: add             x1, x1, HEAP, lsl #32
    // 0xaf93d8: ldur            x0, [fp, #-0x18]
    // 0xaf93dc: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf93dc: add             x25, x1, x2, lsl #2
    //     0xaf93e0: add             x25, x25, #0xf
    //     0xaf93e4: str             w0, [x25]
    //     0xaf93e8: tbz             w0, #0, #0xaf9404
    //     0xaf93ec: ldurb           w16, [x1, #-1]
    //     0xaf93f0: ldurb           w17, [x0, #-1]
    //     0xaf93f4: and             x16, x17, x16, lsr #2
    //     0xaf93f8: tst             x16, HEAP, lsr #32
    //     0xaf93fc: b.eq            #0xaf9404
    //     0xaf9400: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9404: ldr             x0, [fp, #0x10]
    // 0xaf9408: LoadField: r4 = r0->field_5f
    //     0xaf9408: ldur            w4, [x0, #0x5f]
    // 0xaf940c: DecompressPointer r4
    //     0xaf940c: add             x4, x4, HEAP, lsl #32
    // 0xaf9410: stur            x4, [fp, #-8]
    // 0xaf9414: cmp             w4, NULL
    // 0xaf9418: b.eq            #0xaf94d4
    // 0xaf941c: r1 = Null
    //     0xaf941c: mov             x1, NULL
    // 0xaf9420: r2 = 4
    //     0xaf9420: movz            x2, #0x4
    // 0xaf9424: r0 = AllocateArray()
    //     0xaf9424: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9428: r17 = "prefixIcon: "
    //     0xaf9428: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3d0] "prefixIcon: "
    //     0xaf942c: ldr             x17, [x17, #0x3d0]
    // 0xaf9430: StoreField: r0->field_f = r17
    //     0xaf9430: stur            w17, [x0, #0xf]
    // 0xaf9434: ldur            x1, [fp, #-8]
    // 0xaf9438: StoreField: r0->field_13 = r1
    //     0xaf9438: stur            w1, [x0, #0x13]
    // 0xaf943c: str             x0, [SP]
    // 0xaf9440: r0 = _interpolate()
    //     0xaf9440: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9444: mov             x1, x0
    // 0xaf9448: ldur            x0, [fp, #-0x10]
    // 0xaf944c: stur            x1, [fp, #-0x18]
    // 0xaf9450: LoadField: r2 = r0->field_b
    //     0xaf9450: ldur            w2, [x0, #0xb]
    // 0xaf9454: DecompressPointer r2
    //     0xaf9454: add             x2, x2, HEAP, lsl #32
    // 0xaf9458: stur            x2, [fp, #-8]
    // 0xaf945c: LoadField: r3 = r0->field_f
    //     0xaf945c: ldur            w3, [x0, #0xf]
    // 0xaf9460: DecompressPointer r3
    //     0xaf9460: add             x3, x3, HEAP, lsl #32
    // 0xaf9464: LoadField: r4 = r3->field_b
    //     0xaf9464: ldur            w4, [x3, #0xb]
    // 0xaf9468: DecompressPointer r4
    //     0xaf9468: add             x4, x4, HEAP, lsl #32
    // 0xaf946c: cmp             w2, w4
    // 0xaf9470: b.ne            #0xaf947c
    // 0xaf9474: str             x0, [SP]
    // 0xaf9478: r0 = _growToNextCapacity()
    //     0xaf9478: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf947c: ldur            x3, [fp, #-0x10]
    // 0xaf9480: ldur            x0, [fp, #-8]
    // 0xaf9484: r2 = LoadInt32Instr(r0)
    //     0xaf9484: sbfx            x2, x0, #1, #0x1f
    // 0xaf9488: add             x0, x2, #1
    // 0xaf948c: lsl             x1, x0, #1
    // 0xaf9490: StoreField: r3->field_b = r1
    //     0xaf9490: stur            w1, [x3, #0xb]
    // 0xaf9494: mov             x1, x2
    // 0xaf9498: cmp             x1, x0
    // 0xaf949c: b.hs            #0xaf9f84
    // 0xaf94a0: LoadField: r1 = r3->field_f
    //     0xaf94a0: ldur            w1, [x3, #0xf]
    // 0xaf94a4: DecompressPointer r1
    //     0xaf94a4: add             x1, x1, HEAP, lsl #32
    // 0xaf94a8: ldur            x0, [fp, #-0x18]
    // 0xaf94ac: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf94ac: add             x25, x1, x2, lsl #2
    //     0xaf94b0: add             x25, x25, #0xf
    //     0xaf94b4: str             w0, [x25]
    //     0xaf94b8: tbz             w0, #0, #0xaf94d4
    //     0xaf94bc: ldurb           w16, [x1, #-1]
    //     0xaf94c0: ldurb           w17, [x0, #-1]
    //     0xaf94c4: and             x16, x17, x16, lsr #2
    //     0xaf94c8: tst             x16, HEAP, lsr #32
    //     0xaf94cc: b.eq            #0xaf94d4
    //     0xaf94d0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf94d4: ldr             x0, [fp, #0x10]
    // 0xaf94d8: LoadField: r4 = r0->field_77
    //     0xaf94d8: ldur            w4, [x0, #0x77]
    // 0xaf94dc: DecompressPointer r4
    //     0xaf94dc: add             x4, x4, HEAP, lsl #32
    // 0xaf94e0: stur            x4, [fp, #-8]
    // 0xaf94e4: cmp             w4, NULL
    // 0xaf94e8: b.eq            #0xaf95a4
    // 0xaf94ec: r1 = Null
    //     0xaf94ec: mov             x1, NULL
    // 0xaf94f0: r2 = 4
    //     0xaf94f0: movz            x2, #0x4
    // 0xaf94f4: r0 = AllocateArray()
    //     0xaf94f4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf94f8: r17 = "suffixIcon: "
    //     0xaf94f8: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3d8] "suffixIcon: "
    //     0xaf94fc: ldr             x17, [x17, #0x3d8]
    // 0xaf9500: StoreField: r0->field_f = r17
    //     0xaf9500: stur            w17, [x0, #0xf]
    // 0xaf9504: ldur            x1, [fp, #-8]
    // 0xaf9508: StoreField: r0->field_13 = r1
    //     0xaf9508: stur            w1, [x0, #0x13]
    // 0xaf950c: str             x0, [SP]
    // 0xaf9510: r0 = _interpolate()
    //     0xaf9510: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9514: mov             x1, x0
    // 0xaf9518: ldur            x0, [fp, #-0x10]
    // 0xaf951c: stur            x1, [fp, #-0x18]
    // 0xaf9520: LoadField: r2 = r0->field_b
    //     0xaf9520: ldur            w2, [x0, #0xb]
    // 0xaf9524: DecompressPointer r2
    //     0xaf9524: add             x2, x2, HEAP, lsl #32
    // 0xaf9528: stur            x2, [fp, #-8]
    // 0xaf952c: LoadField: r3 = r0->field_f
    //     0xaf952c: ldur            w3, [x0, #0xf]
    // 0xaf9530: DecompressPointer r3
    //     0xaf9530: add             x3, x3, HEAP, lsl #32
    // 0xaf9534: LoadField: r4 = r3->field_b
    //     0xaf9534: ldur            w4, [x3, #0xb]
    // 0xaf9538: DecompressPointer r4
    //     0xaf9538: add             x4, x4, HEAP, lsl #32
    // 0xaf953c: cmp             w2, w4
    // 0xaf9540: b.ne            #0xaf954c
    // 0xaf9544: str             x0, [SP]
    // 0xaf9548: r0 = _growToNextCapacity()
    //     0xaf9548: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf954c: ldur            x3, [fp, #-0x10]
    // 0xaf9550: ldur            x0, [fp, #-8]
    // 0xaf9554: r2 = LoadInt32Instr(r0)
    //     0xaf9554: sbfx            x2, x0, #1, #0x1f
    // 0xaf9558: add             x0, x2, #1
    // 0xaf955c: lsl             x1, x0, #1
    // 0xaf9560: StoreField: r3->field_b = r1
    //     0xaf9560: stur            w1, [x3, #0xb]
    // 0xaf9564: mov             x1, x2
    // 0xaf9568: cmp             x1, x0
    // 0xaf956c: b.hs            #0xaf9f88
    // 0xaf9570: LoadField: r1 = r3->field_f
    //     0xaf9570: ldur            w1, [x3, #0xf]
    // 0xaf9574: DecompressPointer r1
    //     0xaf9574: add             x1, x1, HEAP, lsl #32
    // 0xaf9578: ldur            x0, [fp, #-0x18]
    // 0xaf957c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf957c: add             x25, x1, x2, lsl #2
    //     0xaf9580: add             x25, x25, #0xf
    //     0xaf9584: str             w0, [x25]
    //     0xaf9588: tbz             w0, #0, #0xaf95a4
    //     0xaf958c: ldurb           w16, [x1, #-1]
    //     0xaf9590: ldurb           w17, [x0, #-1]
    //     0xaf9594: and             x16, x17, x16, lsr #2
    //     0xaf9598: tst             x16, HEAP, lsr #32
    //     0xaf959c: b.eq            #0xaf95a4
    //     0xaf95a0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf95a4: ldr             x0, [fp, #0x10]
    // 0xaf95a8: LoadField: r4 = r0->field_93
    //     0xaf95a8: ldur            w4, [x0, #0x93]
    // 0xaf95ac: DecompressPointer r4
    //     0xaf95ac: add             x4, x4, HEAP, lsl #32
    // 0xaf95b0: stur            x4, [fp, #-8]
    // 0xaf95b4: cmp             w4, NULL
    // 0xaf95b8: b.eq            #0xaf9674
    // 0xaf95bc: r1 = Null
    //     0xaf95bc: mov             x1, NULL
    // 0xaf95c0: r2 = 4
    //     0xaf95c0: movz            x2, #0x4
    // 0xaf95c4: r0 = AllocateArray()
    //     0xaf95c4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf95c8: r17 = "counter: "
    //     0xaf95c8: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3e0] "counter: "
    //     0xaf95cc: ldr             x17, [x17, #0x3e0]
    // 0xaf95d0: StoreField: r0->field_f = r17
    //     0xaf95d0: stur            w17, [x0, #0xf]
    // 0xaf95d4: ldur            x1, [fp, #-8]
    // 0xaf95d8: StoreField: r0->field_13 = r1
    //     0xaf95d8: stur            w1, [x0, #0x13]
    // 0xaf95dc: str             x0, [SP]
    // 0xaf95e0: r0 = _interpolate()
    //     0xaf95e0: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf95e4: mov             x1, x0
    // 0xaf95e8: ldur            x0, [fp, #-0x10]
    // 0xaf95ec: stur            x1, [fp, #-0x18]
    // 0xaf95f0: LoadField: r2 = r0->field_b
    //     0xaf95f0: ldur            w2, [x0, #0xb]
    // 0xaf95f4: DecompressPointer r2
    //     0xaf95f4: add             x2, x2, HEAP, lsl #32
    // 0xaf95f8: stur            x2, [fp, #-8]
    // 0xaf95fc: LoadField: r3 = r0->field_f
    //     0xaf95fc: ldur            w3, [x0, #0xf]
    // 0xaf9600: DecompressPointer r3
    //     0xaf9600: add             x3, x3, HEAP, lsl #32
    // 0xaf9604: LoadField: r4 = r3->field_b
    //     0xaf9604: ldur            w4, [x3, #0xb]
    // 0xaf9608: DecompressPointer r4
    //     0xaf9608: add             x4, x4, HEAP, lsl #32
    // 0xaf960c: cmp             w2, w4
    // 0xaf9610: b.ne            #0xaf961c
    // 0xaf9614: str             x0, [SP]
    // 0xaf9618: r0 = _growToNextCapacity()
    //     0xaf9618: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf961c: ldur            x3, [fp, #-0x10]
    // 0xaf9620: ldur            x0, [fp, #-8]
    // 0xaf9624: r2 = LoadInt32Instr(r0)
    //     0xaf9624: sbfx            x2, x0, #1, #0x1f
    // 0xaf9628: add             x0, x2, #1
    // 0xaf962c: lsl             x1, x0, #1
    // 0xaf9630: StoreField: r3->field_b = r1
    //     0xaf9630: stur            w1, [x3, #0xb]
    // 0xaf9634: mov             x1, x2
    // 0xaf9638: cmp             x1, x0
    // 0xaf963c: b.hs            #0xaf9f8c
    // 0xaf9640: LoadField: r1 = r3->field_f
    //     0xaf9640: ldur            w1, [x3, #0xf]
    // 0xaf9644: DecompressPointer r1
    //     0xaf9644: add             x1, x1, HEAP, lsl #32
    // 0xaf9648: ldur            x0, [fp, #-0x18]
    // 0xaf964c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf964c: add             x25, x1, x2, lsl #2
    //     0xaf9650: add             x25, x25, #0xf
    //     0xaf9654: str             w0, [x25]
    //     0xaf9658: tbz             w0, #0, #0xaf9674
    //     0xaf965c: ldurb           w16, [x1, #-1]
    //     0xaf9660: ldurb           w17, [x0, #-1]
    //     0xaf9664: and             x16, x17, x16, lsr #2
    //     0xaf9668: tst             x16, HEAP, lsr #32
    //     0xaf966c: b.eq            #0xaf9674
    //     0xaf9670: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9674: ldr             x0, [fp, #0x10]
    // 0xaf9678: LoadField: r4 = r0->field_8f
    //     0xaf9678: ldur            w4, [x0, #0x8f]
    // 0xaf967c: DecompressPointer r4
    //     0xaf967c: add             x4, x4, HEAP, lsl #32
    // 0xaf9680: stur            x4, [fp, #-8]
    // 0xaf9684: cmp             w4, NULL
    // 0xaf9688: b.eq            #0xaf9744
    // 0xaf968c: r1 = Null
    //     0xaf968c: mov             x1, NULL
    // 0xaf9690: r2 = 4
    //     0xaf9690: movz            x2, #0x4
    // 0xaf9694: r0 = AllocateArray()
    //     0xaf9694: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9698: r17 = "counterText: "
    //     0xaf9698: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3e8] "counterText: "
    //     0xaf969c: ldr             x17, [x17, #0x3e8]
    // 0xaf96a0: StoreField: r0->field_f = r17
    //     0xaf96a0: stur            w17, [x0, #0xf]
    // 0xaf96a4: ldur            x1, [fp, #-8]
    // 0xaf96a8: StoreField: r0->field_13 = r1
    //     0xaf96a8: stur            w1, [x0, #0x13]
    // 0xaf96ac: str             x0, [SP]
    // 0xaf96b0: r0 = _interpolate()
    //     0xaf96b0: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf96b4: mov             x1, x0
    // 0xaf96b8: ldur            x0, [fp, #-0x10]
    // 0xaf96bc: stur            x1, [fp, #-0x18]
    // 0xaf96c0: LoadField: r2 = r0->field_b
    //     0xaf96c0: ldur            w2, [x0, #0xb]
    // 0xaf96c4: DecompressPointer r2
    //     0xaf96c4: add             x2, x2, HEAP, lsl #32
    // 0xaf96c8: stur            x2, [fp, #-8]
    // 0xaf96cc: LoadField: r3 = r0->field_f
    //     0xaf96cc: ldur            w3, [x0, #0xf]
    // 0xaf96d0: DecompressPointer r3
    //     0xaf96d0: add             x3, x3, HEAP, lsl #32
    // 0xaf96d4: LoadField: r4 = r3->field_b
    //     0xaf96d4: ldur            w4, [x3, #0xb]
    // 0xaf96d8: DecompressPointer r4
    //     0xaf96d8: add             x4, x4, HEAP, lsl #32
    // 0xaf96dc: cmp             w2, w4
    // 0xaf96e0: b.ne            #0xaf96ec
    // 0xaf96e4: str             x0, [SP]
    // 0xaf96e8: r0 = _growToNextCapacity()
    //     0xaf96e8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf96ec: ldur            x3, [fp, #-0x10]
    // 0xaf96f0: ldur            x0, [fp, #-8]
    // 0xaf96f4: r2 = LoadInt32Instr(r0)
    //     0xaf96f4: sbfx            x2, x0, #1, #0x1f
    // 0xaf96f8: add             x0, x2, #1
    // 0xaf96fc: lsl             x1, x0, #1
    // 0xaf9700: StoreField: r3->field_b = r1
    //     0xaf9700: stur            w1, [x3, #0xb]
    // 0xaf9704: mov             x1, x2
    // 0xaf9708: cmp             x1, x0
    // 0xaf970c: b.hs            #0xaf9f90
    // 0xaf9710: LoadField: r1 = r3->field_f
    //     0xaf9710: ldur            w1, [x3, #0xf]
    // 0xaf9714: DecompressPointer r1
    //     0xaf9714: add             x1, x1, HEAP, lsl #32
    // 0xaf9718: ldur            x0, [fp, #-0x18]
    // 0xaf971c: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf971c: add             x25, x1, x2, lsl #2
    //     0xaf9720: add             x25, x25, #0xf
    //     0xaf9724: str             w0, [x25]
    //     0xaf9728: tbz             w0, #0, #0xaf9744
    //     0xaf972c: ldurb           w16, [x1, #-1]
    //     0xaf9730: ldurb           w17, [x0, #-1]
    //     0xaf9734: and             x16, x17, x16, lsr #2
    //     0xaf9738: tst             x16, HEAP, lsr #32
    //     0xaf973c: b.eq            #0xaf9744
    //     0xaf9740: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9744: ldr             x0, [fp, #0x10]
    // 0xaf9748: LoadField: r4 = r0->field_97
    //     0xaf9748: ldur            w4, [x0, #0x97]
    // 0xaf974c: DecompressPointer r4
    //     0xaf974c: add             x4, x4, HEAP, lsl #32
    // 0xaf9750: stur            x4, [fp, #-8]
    // 0xaf9754: cmp             w4, NULL
    // 0xaf9758: b.eq            #0xaf9818
    // 0xaf975c: r1 = Null
    //     0xaf975c: mov             x1, NULL
    // 0xaf9760: r2 = 4
    //     0xaf9760: movz            x2, #0x4
    // 0xaf9764: r0 = AllocateArray()
    //     0xaf9764: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9768: r17 = "counterStyle: "
    //     0xaf9768: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3f0] "counterStyle: "
    //     0xaf976c: ldr             x17, [x17, #0x3f0]
    // 0xaf9770: StoreField: r0->field_f = r17
    //     0xaf9770: stur            w17, [x0, #0xf]
    // 0xaf9774: ldur            x1, [fp, #-8]
    // 0xaf9778: StoreField: r0->field_13 = r1
    //     0xaf9778: stur            w1, [x0, #0x13]
    // 0xaf977c: str             x0, [SP]
    // 0xaf9780: r0 = _interpolate()
    //     0xaf9780: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9784: mov             x1, x0
    // 0xaf9788: ldur            x0, [fp, #-0x10]
    // 0xaf978c: stur            x1, [fp, #-0x18]
    // 0xaf9790: LoadField: r2 = r0->field_b
    //     0xaf9790: ldur            w2, [x0, #0xb]
    // 0xaf9794: DecompressPointer r2
    //     0xaf9794: add             x2, x2, HEAP, lsl #32
    // 0xaf9798: stur            x2, [fp, #-8]
    // 0xaf979c: LoadField: r3 = r0->field_f
    //     0xaf979c: ldur            w3, [x0, #0xf]
    // 0xaf97a0: DecompressPointer r3
    //     0xaf97a0: add             x3, x3, HEAP, lsl #32
    // 0xaf97a4: LoadField: r4 = r3->field_b
    //     0xaf97a4: ldur            w4, [x3, #0xb]
    // 0xaf97a8: DecompressPointer r4
    //     0xaf97a8: add             x4, x4, HEAP, lsl #32
    // 0xaf97ac: cmp             w2, w4
    // 0xaf97b0: b.ne            #0xaf97bc
    // 0xaf97b4: str             x0, [SP]
    // 0xaf97b8: r0 = _growToNextCapacity()
    //     0xaf97b8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf97bc: ldur            x2, [fp, #-0x10]
    // 0xaf97c0: ldur            x0, [fp, #-8]
    // 0xaf97c4: r3 = LoadInt32Instr(r0)
    //     0xaf97c4: sbfx            x3, x0, #1, #0x1f
    // 0xaf97c8: add             x0, x3, #1
    // 0xaf97cc: lsl             x1, x0, #1
    // 0xaf97d0: StoreField: r2->field_b = r1
    //     0xaf97d0: stur            w1, [x2, #0xb]
    // 0xaf97d4: mov             x1, x3
    // 0xaf97d8: cmp             x1, x0
    // 0xaf97dc: b.hs            #0xaf9f94
    // 0xaf97e0: LoadField: r1 = r2->field_f
    //     0xaf97e0: ldur            w1, [x2, #0xf]
    // 0xaf97e4: DecompressPointer r1
    //     0xaf97e4: add             x1, x1, HEAP, lsl #32
    // 0xaf97e8: ldur            x0, [fp, #-0x18]
    // 0xaf97ec: ArrayStore: r1[r3] = r0  ; List_4
    //     0xaf97ec: add             x25, x1, x3, lsl #2
    //     0xaf97f0: add             x25, x25, #0xf
    //     0xaf97f4: str             w0, [x25]
    //     0xaf97f8: tbz             w0, #0, #0xaf9814
    //     0xaf97fc: ldurb           w16, [x1, #-1]
    //     0xaf9800: ldurb           w17, [x0, #-1]
    //     0xaf9804: and             x16, x17, x16, lsr #2
    //     0xaf9808: tst             x16, HEAP, lsr #32
    //     0xaf980c: b.eq            #0xaf9814
    //     0xaf9810: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9814: b               #0xaf981c
    // 0xaf9818: mov             x2, x3
    // 0xaf981c: ldr             x0, [fp, #0x10]
    // 0xaf9820: LoadField: r1 = r0->field_9b
    //     0xaf9820: ldur            w1, [x0, #0x9b]
    // 0xaf9824: DecompressPointer r1
    //     0xaf9824: add             x1, x1, HEAP, lsl #32
    // 0xaf9828: cmp             w1, NULL
    // 0xaf982c: b.ne            #0xaf9838
    // 0xaf9830: mov             x3, x2
    // 0xaf9834: b               #0xaf98ac
    // 0xaf9838: tbnz            w1, #4, #0xaf98a8
    // 0xaf983c: LoadField: r1 = r2->field_b
    //     0xaf983c: ldur            w1, [x2, #0xb]
    // 0xaf9840: DecompressPointer r1
    //     0xaf9840: add             x1, x1, HEAP, lsl #32
    // 0xaf9844: stur            x1, [fp, #-8]
    // 0xaf9848: LoadField: r3 = r2->field_f
    //     0xaf9848: ldur            w3, [x2, #0xf]
    // 0xaf984c: DecompressPointer r3
    //     0xaf984c: add             x3, x3, HEAP, lsl #32
    // 0xaf9850: LoadField: r4 = r3->field_b
    //     0xaf9850: ldur            w4, [x3, #0xb]
    // 0xaf9854: DecompressPointer r4
    //     0xaf9854: add             x4, x4, HEAP, lsl #32
    // 0xaf9858: cmp             w1, w4
    // 0xaf985c: b.ne            #0xaf9868
    // 0xaf9860: str             x2, [SP]
    // 0xaf9864: r0 = _growToNextCapacity()
    //     0xaf9864: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9868: ldur            x3, [fp, #-0x10]
    // 0xaf986c: ldur            x0, [fp, #-8]
    // 0xaf9870: r2 = LoadInt32Instr(r0)
    //     0xaf9870: sbfx            x2, x0, #1, #0x1f
    // 0xaf9874: add             x0, x2, #1
    // 0xaf9878: lsl             x1, x0, #1
    // 0xaf987c: StoreField: r3->field_b = r1
    //     0xaf987c: stur            w1, [x3, #0xb]
    // 0xaf9880: mov             x1, x2
    // 0xaf9884: cmp             x1, x0
    // 0xaf9888: b.hs            #0xaf9f98
    // 0xaf988c: LoadField: r0 = r3->field_f
    //     0xaf988c: ldur            w0, [x3, #0xf]
    // 0xaf9890: DecompressPointer r0
    //     0xaf9890: add             x0, x0, HEAP, lsl #32
    // 0xaf9894: add             x1, x0, x2, lsl #2
    // 0xaf9898: r17 = "filled: true"
    //     0xaf9898: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c3f8] "filled: true"
    //     0xaf989c: ldr             x17, [x17, #0x3f8]
    // 0xaf98a0: StoreField: r1->field_f = r17
    //     0xaf98a0: stur            w17, [x1, #0xf]
    // 0xaf98a4: b               #0xaf98ac
    // 0xaf98a8: mov             x3, x2
    // 0xaf98ac: ldr             x0, [fp, #0x10]
    // 0xaf98b0: LoadField: r4 = r0->field_9f
    //     0xaf98b0: ldur            w4, [x0, #0x9f]
    // 0xaf98b4: DecompressPointer r4
    //     0xaf98b4: add             x4, x4, HEAP, lsl #32
    // 0xaf98b8: stur            x4, [fp, #-8]
    // 0xaf98bc: cmp             w4, NULL
    // 0xaf98c0: b.eq            #0xaf997c
    // 0xaf98c4: r1 = Null
    //     0xaf98c4: mov             x1, NULL
    // 0xaf98c8: r2 = 4
    //     0xaf98c8: movz            x2, #0x4
    // 0xaf98cc: r0 = AllocateArray()
    //     0xaf98cc: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf98d0: r17 = "fillColor: "
    //     0xaf98d0: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c400] "fillColor: "
    //     0xaf98d4: ldr             x17, [x17, #0x400]
    // 0xaf98d8: StoreField: r0->field_f = r17
    //     0xaf98d8: stur            w17, [x0, #0xf]
    // 0xaf98dc: ldur            x1, [fp, #-8]
    // 0xaf98e0: StoreField: r0->field_13 = r1
    //     0xaf98e0: stur            w1, [x0, #0x13]
    // 0xaf98e4: str             x0, [SP]
    // 0xaf98e8: r0 = _interpolate()
    //     0xaf98e8: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf98ec: mov             x1, x0
    // 0xaf98f0: ldur            x0, [fp, #-0x10]
    // 0xaf98f4: stur            x1, [fp, #-0x18]
    // 0xaf98f8: LoadField: r2 = r0->field_b
    //     0xaf98f8: ldur            w2, [x0, #0xb]
    // 0xaf98fc: DecompressPointer r2
    //     0xaf98fc: add             x2, x2, HEAP, lsl #32
    // 0xaf9900: stur            x2, [fp, #-8]
    // 0xaf9904: LoadField: r3 = r0->field_f
    //     0xaf9904: ldur            w3, [x0, #0xf]
    // 0xaf9908: DecompressPointer r3
    //     0xaf9908: add             x3, x3, HEAP, lsl #32
    // 0xaf990c: LoadField: r4 = r3->field_b
    //     0xaf990c: ldur            w4, [x3, #0xb]
    // 0xaf9910: DecompressPointer r4
    //     0xaf9910: add             x4, x4, HEAP, lsl #32
    // 0xaf9914: cmp             w2, w4
    // 0xaf9918: b.ne            #0xaf9924
    // 0xaf991c: str             x0, [SP]
    // 0xaf9920: r0 = _growToNextCapacity()
    //     0xaf9920: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9924: ldur            x3, [fp, #-0x10]
    // 0xaf9928: ldur            x0, [fp, #-8]
    // 0xaf992c: r2 = LoadInt32Instr(r0)
    //     0xaf992c: sbfx            x2, x0, #1, #0x1f
    // 0xaf9930: add             x0, x2, #1
    // 0xaf9934: lsl             x1, x0, #1
    // 0xaf9938: StoreField: r3->field_b = r1
    //     0xaf9938: stur            w1, [x3, #0xb]
    // 0xaf993c: mov             x1, x2
    // 0xaf9940: cmp             x1, x0
    // 0xaf9944: b.hs            #0xaf9f9c
    // 0xaf9948: LoadField: r1 = r3->field_f
    //     0xaf9948: ldur            w1, [x3, #0xf]
    // 0xaf994c: DecompressPointer r1
    //     0xaf994c: add             x1, x1, HEAP, lsl #32
    // 0xaf9950: ldur            x0, [fp, #-0x18]
    // 0xaf9954: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9954: add             x25, x1, x2, lsl #2
    //     0xaf9958: add             x25, x25, #0xf
    //     0xaf995c: str             w0, [x25]
    //     0xaf9960: tbz             w0, #0, #0xaf997c
    //     0xaf9964: ldurb           w16, [x1, #-1]
    //     0xaf9968: ldurb           w17, [x0, #-1]
    //     0xaf996c: and             x16, x17, x16, lsr #2
    //     0xaf9970: tst             x16, HEAP, lsr #32
    //     0xaf9974: b.eq            #0xaf997c
    //     0xaf9978: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf997c: ldr             x0, [fp, #0x10]
    // 0xaf9980: LoadField: r4 = r0->field_af
    //     0xaf9980: ldur            w4, [x0, #0xaf]
    // 0xaf9984: DecompressPointer r4
    //     0xaf9984: add             x4, x4, HEAP, lsl #32
    // 0xaf9988: stur            x4, [fp, #-8]
    // 0xaf998c: cmp             w4, NULL
    // 0xaf9990: b.eq            #0xaf9a4c
    // 0xaf9994: r1 = Null
    //     0xaf9994: mov             x1, NULL
    // 0xaf9998: r2 = 4
    //     0xaf9998: movz            x2, #0x4
    // 0xaf999c: r0 = AllocateArray()
    //     0xaf999c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf99a0: r17 = "focusedBorder: "
    //     0xaf99a0: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c408] "focusedBorder: "
    //     0xaf99a4: ldr             x17, [x17, #0x408]
    // 0xaf99a8: StoreField: r0->field_f = r17
    //     0xaf99a8: stur            w17, [x0, #0xf]
    // 0xaf99ac: ldur            x1, [fp, #-8]
    // 0xaf99b0: StoreField: r0->field_13 = r1
    //     0xaf99b0: stur            w1, [x0, #0x13]
    // 0xaf99b4: str             x0, [SP]
    // 0xaf99b8: r0 = _interpolate()
    //     0xaf99b8: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf99bc: mov             x1, x0
    // 0xaf99c0: ldur            x0, [fp, #-0x10]
    // 0xaf99c4: stur            x1, [fp, #-0x18]
    // 0xaf99c8: LoadField: r2 = r0->field_b
    //     0xaf99c8: ldur            w2, [x0, #0xb]
    // 0xaf99cc: DecompressPointer r2
    //     0xaf99cc: add             x2, x2, HEAP, lsl #32
    // 0xaf99d0: stur            x2, [fp, #-8]
    // 0xaf99d4: LoadField: r3 = r0->field_f
    //     0xaf99d4: ldur            w3, [x0, #0xf]
    // 0xaf99d8: DecompressPointer r3
    //     0xaf99d8: add             x3, x3, HEAP, lsl #32
    // 0xaf99dc: LoadField: r4 = r3->field_b
    //     0xaf99dc: ldur            w4, [x3, #0xb]
    // 0xaf99e0: DecompressPointer r4
    //     0xaf99e0: add             x4, x4, HEAP, lsl #32
    // 0xaf99e4: cmp             w2, w4
    // 0xaf99e8: b.ne            #0xaf99f4
    // 0xaf99ec: str             x0, [SP]
    // 0xaf99f0: r0 = _growToNextCapacity()
    //     0xaf99f0: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf99f4: ldur            x3, [fp, #-0x10]
    // 0xaf99f8: ldur            x0, [fp, #-8]
    // 0xaf99fc: r2 = LoadInt32Instr(r0)
    //     0xaf99fc: sbfx            x2, x0, #1, #0x1f
    // 0xaf9a00: add             x0, x2, #1
    // 0xaf9a04: lsl             x1, x0, #1
    // 0xaf9a08: StoreField: r3->field_b = r1
    //     0xaf9a08: stur            w1, [x3, #0xb]
    // 0xaf9a0c: mov             x1, x2
    // 0xaf9a10: cmp             x1, x0
    // 0xaf9a14: b.hs            #0xaf9fa0
    // 0xaf9a18: LoadField: r1 = r3->field_f
    //     0xaf9a18: ldur            w1, [x3, #0xf]
    // 0xaf9a1c: DecompressPointer r1
    //     0xaf9a1c: add             x1, x1, HEAP, lsl #32
    // 0xaf9a20: ldur            x0, [fp, #-0x18]
    // 0xaf9a24: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9a24: add             x25, x1, x2, lsl #2
    //     0xaf9a28: add             x25, x25, #0xf
    //     0xaf9a2c: str             w0, [x25]
    //     0xaf9a30: tbz             w0, #0, #0xaf9a4c
    //     0xaf9a34: ldurb           w16, [x1, #-1]
    //     0xaf9a38: ldurb           w17, [x0, #-1]
    //     0xaf9a3c: and             x16, x17, x16, lsr #2
    //     0xaf9a40: tst             x16, HEAP, lsr #32
    //     0xaf9a44: b.eq            #0xaf9a4c
    //     0xaf9a48: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9a4c: ldr             x0, [fp, #0x10]
    // 0xaf9a50: LoadField: r4 = r0->field_b7
    //     0xaf9a50: ldur            w4, [x0, #0xb7]
    // 0xaf9a54: DecompressPointer r4
    //     0xaf9a54: add             x4, x4, HEAP, lsl #32
    // 0xaf9a58: stur            x4, [fp, #-8]
    // 0xaf9a5c: cmp             w4, NULL
    // 0xaf9a60: b.eq            #0xaf9b1c
    // 0xaf9a64: r1 = Null
    //     0xaf9a64: mov             x1, NULL
    // 0xaf9a68: r2 = 4
    //     0xaf9a68: movz            x2, #0x4
    // 0xaf9a6c: r0 = AllocateArray()
    //     0xaf9a6c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9a70: r17 = "disabledBorder: "
    //     0xaf9a70: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c410] "disabledBorder: "
    //     0xaf9a74: ldr             x17, [x17, #0x410]
    // 0xaf9a78: StoreField: r0->field_f = r17
    //     0xaf9a78: stur            w17, [x0, #0xf]
    // 0xaf9a7c: ldur            x1, [fp, #-8]
    // 0xaf9a80: StoreField: r0->field_13 = r1
    //     0xaf9a80: stur            w1, [x0, #0x13]
    // 0xaf9a84: str             x0, [SP]
    // 0xaf9a88: r0 = _interpolate()
    //     0xaf9a88: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9a8c: mov             x1, x0
    // 0xaf9a90: ldur            x0, [fp, #-0x10]
    // 0xaf9a94: stur            x1, [fp, #-0x18]
    // 0xaf9a98: LoadField: r2 = r0->field_b
    //     0xaf9a98: ldur            w2, [x0, #0xb]
    // 0xaf9a9c: DecompressPointer r2
    //     0xaf9a9c: add             x2, x2, HEAP, lsl #32
    // 0xaf9aa0: stur            x2, [fp, #-8]
    // 0xaf9aa4: LoadField: r3 = r0->field_f
    //     0xaf9aa4: ldur            w3, [x0, #0xf]
    // 0xaf9aa8: DecompressPointer r3
    //     0xaf9aa8: add             x3, x3, HEAP, lsl #32
    // 0xaf9aac: LoadField: r4 = r3->field_b
    //     0xaf9aac: ldur            w4, [x3, #0xb]
    // 0xaf9ab0: DecompressPointer r4
    //     0xaf9ab0: add             x4, x4, HEAP, lsl #32
    // 0xaf9ab4: cmp             w2, w4
    // 0xaf9ab8: b.ne            #0xaf9ac4
    // 0xaf9abc: str             x0, [SP]
    // 0xaf9ac0: r0 = _growToNextCapacity()
    //     0xaf9ac0: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9ac4: ldur            x3, [fp, #-0x10]
    // 0xaf9ac8: ldur            x0, [fp, #-8]
    // 0xaf9acc: r2 = LoadInt32Instr(r0)
    //     0xaf9acc: sbfx            x2, x0, #1, #0x1f
    // 0xaf9ad0: add             x0, x2, #1
    // 0xaf9ad4: lsl             x1, x0, #1
    // 0xaf9ad8: StoreField: r3->field_b = r1
    //     0xaf9ad8: stur            w1, [x3, #0xb]
    // 0xaf9adc: mov             x1, x2
    // 0xaf9ae0: cmp             x1, x0
    // 0xaf9ae4: b.hs            #0xaf9fa4
    // 0xaf9ae8: LoadField: r1 = r3->field_f
    //     0xaf9ae8: ldur            w1, [x3, #0xf]
    // 0xaf9aec: DecompressPointer r1
    //     0xaf9aec: add             x1, x1, HEAP, lsl #32
    // 0xaf9af0: ldur            x0, [fp, #-0x18]
    // 0xaf9af4: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9af4: add             x25, x1, x2, lsl #2
    //     0xaf9af8: add             x25, x25, #0xf
    //     0xaf9afc: str             w0, [x25]
    //     0xaf9b00: tbz             w0, #0, #0xaf9b1c
    //     0xaf9b04: ldurb           w16, [x1, #-1]
    //     0xaf9b08: ldurb           w17, [x0, #-1]
    //     0xaf9b0c: and             x16, x17, x16, lsr #2
    //     0xaf9b10: tst             x16, HEAP, lsr #32
    //     0xaf9b14: b.eq            #0xaf9b1c
    //     0xaf9b18: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9b1c: ldr             x0, [fp, #0x10]
    // 0xaf9b20: LoadField: r4 = r0->field_bb
    //     0xaf9b20: ldur            w4, [x0, #0xbb]
    // 0xaf9b24: DecompressPointer r4
    //     0xaf9b24: add             x4, x4, HEAP, lsl #32
    // 0xaf9b28: stur            x4, [fp, #-8]
    // 0xaf9b2c: cmp             w4, NULL
    // 0xaf9b30: b.eq            #0xaf9bec
    // 0xaf9b34: r1 = Null
    //     0xaf9b34: mov             x1, NULL
    // 0xaf9b38: r2 = 4
    //     0xaf9b38: movz            x2, #0x4
    // 0xaf9b3c: r0 = AllocateArray()
    //     0xaf9b3c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9b40: r17 = "enabledBorder: "
    //     0xaf9b40: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c418] "enabledBorder: "
    //     0xaf9b44: ldr             x17, [x17, #0x418]
    // 0xaf9b48: StoreField: r0->field_f = r17
    //     0xaf9b48: stur            w17, [x0, #0xf]
    // 0xaf9b4c: ldur            x1, [fp, #-8]
    // 0xaf9b50: StoreField: r0->field_13 = r1
    //     0xaf9b50: stur            w1, [x0, #0x13]
    // 0xaf9b54: str             x0, [SP]
    // 0xaf9b58: r0 = _interpolate()
    //     0xaf9b58: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9b5c: mov             x1, x0
    // 0xaf9b60: ldur            x0, [fp, #-0x10]
    // 0xaf9b64: stur            x1, [fp, #-0x18]
    // 0xaf9b68: LoadField: r2 = r0->field_b
    //     0xaf9b68: ldur            w2, [x0, #0xb]
    // 0xaf9b6c: DecompressPointer r2
    //     0xaf9b6c: add             x2, x2, HEAP, lsl #32
    // 0xaf9b70: stur            x2, [fp, #-8]
    // 0xaf9b74: LoadField: r3 = r0->field_f
    //     0xaf9b74: ldur            w3, [x0, #0xf]
    // 0xaf9b78: DecompressPointer r3
    //     0xaf9b78: add             x3, x3, HEAP, lsl #32
    // 0xaf9b7c: LoadField: r4 = r3->field_b
    //     0xaf9b7c: ldur            w4, [x3, #0xb]
    // 0xaf9b80: DecompressPointer r4
    //     0xaf9b80: add             x4, x4, HEAP, lsl #32
    // 0xaf9b84: cmp             w2, w4
    // 0xaf9b88: b.ne            #0xaf9b94
    // 0xaf9b8c: str             x0, [SP]
    // 0xaf9b90: r0 = _growToNextCapacity()
    //     0xaf9b90: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9b94: ldur            x3, [fp, #-0x10]
    // 0xaf9b98: ldur            x0, [fp, #-8]
    // 0xaf9b9c: r2 = LoadInt32Instr(r0)
    //     0xaf9b9c: sbfx            x2, x0, #1, #0x1f
    // 0xaf9ba0: add             x0, x2, #1
    // 0xaf9ba4: lsl             x1, x0, #1
    // 0xaf9ba8: StoreField: r3->field_b = r1
    //     0xaf9ba8: stur            w1, [x3, #0xb]
    // 0xaf9bac: mov             x1, x2
    // 0xaf9bb0: cmp             x1, x0
    // 0xaf9bb4: b.hs            #0xaf9fa8
    // 0xaf9bb8: LoadField: r1 = r3->field_f
    //     0xaf9bb8: ldur            w1, [x3, #0xf]
    // 0xaf9bbc: DecompressPointer r1
    //     0xaf9bbc: add             x1, x1, HEAP, lsl #32
    // 0xaf9bc0: ldur            x0, [fp, #-0x18]
    // 0xaf9bc4: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9bc4: add             x25, x1, x2, lsl #2
    //     0xaf9bc8: add             x25, x25, #0xf
    //     0xaf9bcc: str             w0, [x25]
    //     0xaf9bd0: tbz             w0, #0, #0xaf9bec
    //     0xaf9bd4: ldurb           w16, [x1, #-1]
    //     0xaf9bd8: ldurb           w17, [x0, #-1]
    //     0xaf9bdc: and             x16, x17, x16, lsr #2
    //     0xaf9be0: tst             x16, HEAP, lsr #32
    //     0xaf9be4: b.eq            #0xaf9bec
    //     0xaf9be8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9bec: ldr             x0, [fp, #0x10]
    // 0xaf9bf0: LoadField: r4 = r0->field_bf
    //     0xaf9bf0: ldur            w4, [x0, #0xbf]
    // 0xaf9bf4: DecompressPointer r4
    //     0xaf9bf4: add             x4, x4, HEAP, lsl #32
    // 0xaf9bf8: stur            x4, [fp, #-8]
    // 0xaf9bfc: cmp             w4, NULL
    // 0xaf9c00: b.eq            #0xaf9cc0
    // 0xaf9c04: r1 = Null
    //     0xaf9c04: mov             x1, NULL
    // 0xaf9c08: r2 = 4
    //     0xaf9c08: movz            x2, #0x4
    // 0xaf9c0c: r0 = AllocateArray()
    //     0xaf9c0c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9c10: r17 = "border: "
    //     0xaf9c10: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c420] "border: "
    //     0xaf9c14: ldr             x17, [x17, #0x420]
    // 0xaf9c18: StoreField: r0->field_f = r17
    //     0xaf9c18: stur            w17, [x0, #0xf]
    // 0xaf9c1c: ldur            x1, [fp, #-8]
    // 0xaf9c20: StoreField: r0->field_13 = r1
    //     0xaf9c20: stur            w1, [x0, #0x13]
    // 0xaf9c24: str             x0, [SP]
    // 0xaf9c28: r0 = _interpolate()
    //     0xaf9c28: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9c2c: mov             x1, x0
    // 0xaf9c30: ldur            x0, [fp, #-0x10]
    // 0xaf9c34: stur            x1, [fp, #-0x18]
    // 0xaf9c38: LoadField: r2 = r0->field_b
    //     0xaf9c38: ldur            w2, [x0, #0xb]
    // 0xaf9c3c: DecompressPointer r2
    //     0xaf9c3c: add             x2, x2, HEAP, lsl #32
    // 0xaf9c40: stur            x2, [fp, #-8]
    // 0xaf9c44: LoadField: r3 = r0->field_f
    //     0xaf9c44: ldur            w3, [x0, #0xf]
    // 0xaf9c48: DecompressPointer r3
    //     0xaf9c48: add             x3, x3, HEAP, lsl #32
    // 0xaf9c4c: LoadField: r4 = r3->field_b
    //     0xaf9c4c: ldur            w4, [x3, #0xb]
    // 0xaf9c50: DecompressPointer r4
    //     0xaf9c50: add             x4, x4, HEAP, lsl #32
    // 0xaf9c54: cmp             w2, w4
    // 0xaf9c58: b.ne            #0xaf9c64
    // 0xaf9c5c: str             x0, [SP]
    // 0xaf9c60: r0 = _growToNextCapacity()
    //     0xaf9c60: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9c64: ldur            x2, [fp, #-0x10]
    // 0xaf9c68: ldur            x0, [fp, #-8]
    // 0xaf9c6c: r3 = LoadInt32Instr(r0)
    //     0xaf9c6c: sbfx            x3, x0, #1, #0x1f
    // 0xaf9c70: add             x0, x3, #1
    // 0xaf9c74: lsl             x1, x0, #1
    // 0xaf9c78: StoreField: r2->field_b = r1
    //     0xaf9c78: stur            w1, [x2, #0xb]
    // 0xaf9c7c: mov             x1, x3
    // 0xaf9c80: cmp             x1, x0
    // 0xaf9c84: b.hs            #0xaf9fac
    // 0xaf9c88: LoadField: r1 = r2->field_f
    //     0xaf9c88: ldur            w1, [x2, #0xf]
    // 0xaf9c8c: DecompressPointer r1
    //     0xaf9c8c: add             x1, x1, HEAP, lsl #32
    // 0xaf9c90: ldur            x0, [fp, #-0x18]
    // 0xaf9c94: ArrayStore: r1[r3] = r0  ; List_4
    //     0xaf9c94: add             x25, x1, x3, lsl #2
    //     0xaf9c98: add             x25, x25, #0xf
    //     0xaf9c9c: str             w0, [x25]
    //     0xaf9ca0: tbz             w0, #0, #0xaf9cbc
    //     0xaf9ca4: ldurb           w16, [x1, #-1]
    //     0xaf9ca8: ldurb           w17, [x0, #-1]
    //     0xaf9cac: and             x16, x17, x16, lsr #2
    //     0xaf9cb0: tst             x16, HEAP, lsr #32
    //     0xaf9cb4: b.eq            #0xaf9cbc
    //     0xaf9cb8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9cbc: b               #0xaf9cc4
    // 0xaf9cc0: mov             x2, x3
    // 0xaf9cc4: ldr             x0, [fp, #0x10]
    // 0xaf9cc8: LoadField: r1 = r0->field_c3
    //     0xaf9cc8: ldur            w1, [x0, #0xc3]
    // 0xaf9ccc: DecompressPointer r1
    //     0xaf9ccc: add             x1, x1, HEAP, lsl #32
    // 0xaf9cd0: tbz             w1, #4, #0xaf9d40
    // 0xaf9cd4: LoadField: r1 = r2->field_b
    //     0xaf9cd4: ldur            w1, [x2, #0xb]
    // 0xaf9cd8: DecompressPointer r1
    //     0xaf9cd8: add             x1, x1, HEAP, lsl #32
    // 0xaf9cdc: stur            x1, [fp, #-8]
    // 0xaf9ce0: LoadField: r3 = r2->field_f
    //     0xaf9ce0: ldur            w3, [x2, #0xf]
    // 0xaf9ce4: DecompressPointer r3
    //     0xaf9ce4: add             x3, x3, HEAP, lsl #32
    // 0xaf9ce8: LoadField: r4 = r3->field_b
    //     0xaf9ce8: ldur            w4, [x3, #0xb]
    // 0xaf9cec: DecompressPointer r4
    //     0xaf9cec: add             x4, x4, HEAP, lsl #32
    // 0xaf9cf0: cmp             w1, w4
    // 0xaf9cf4: b.ne            #0xaf9d00
    // 0xaf9cf8: str             x2, [SP]
    // 0xaf9cfc: r0 = _growToNextCapacity()
    //     0xaf9cfc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9d00: ldur            x3, [fp, #-0x10]
    // 0xaf9d04: ldur            x0, [fp, #-8]
    // 0xaf9d08: r2 = LoadInt32Instr(r0)
    //     0xaf9d08: sbfx            x2, x0, #1, #0x1f
    // 0xaf9d0c: add             x0, x2, #1
    // 0xaf9d10: lsl             x1, x0, #1
    // 0xaf9d14: StoreField: r3->field_b = r1
    //     0xaf9d14: stur            w1, [x3, #0xb]
    // 0xaf9d18: mov             x1, x2
    // 0xaf9d1c: cmp             x1, x0
    // 0xaf9d20: b.hs            #0xaf9fb0
    // 0xaf9d24: LoadField: r0 = r3->field_f
    //     0xaf9d24: ldur            w0, [x3, #0xf]
    // 0xaf9d28: DecompressPointer r0
    //     0xaf9d28: add             x0, x0, HEAP, lsl #32
    // 0xaf9d2c: add             x1, x0, x2, lsl #2
    // 0xaf9d30: r17 = "enabled: false"
    //     0xaf9d30: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c428] "enabled: false"
    //     0xaf9d34: ldr             x17, [x17, #0x428]
    // 0xaf9d38: StoreField: r1->field_f = r17
    //     0xaf9d38: stur            w17, [x1, #0xf]
    // 0xaf9d3c: b               #0xaf9d44
    // 0xaf9d40: mov             x3, x2
    // 0xaf9d44: ldr             x0, [fp, #0x10]
    // 0xaf9d48: LoadField: r4 = r0->field_c7
    //     0xaf9d48: ldur            w4, [x0, #0xc7]
    // 0xaf9d4c: DecompressPointer r4
    //     0xaf9d4c: add             x4, x4, HEAP, lsl #32
    // 0xaf9d50: stur            x4, [fp, #-8]
    // 0xaf9d54: cmp             w4, NULL
    // 0xaf9d58: b.eq            #0xaf9e14
    // 0xaf9d5c: r1 = Null
    //     0xaf9d5c: mov             x1, NULL
    // 0xaf9d60: r2 = 4
    //     0xaf9d60: movz            x2, #0x4
    // 0xaf9d64: r0 = AllocateArray()
    //     0xaf9d64: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9d68: r17 = "semanticCounterText: "
    //     0xaf9d68: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c430] "semanticCounterText: "
    //     0xaf9d6c: ldr             x17, [x17, #0x430]
    // 0xaf9d70: StoreField: r0->field_f = r17
    //     0xaf9d70: stur            w17, [x0, #0xf]
    // 0xaf9d74: ldur            x1, [fp, #-8]
    // 0xaf9d78: StoreField: r0->field_13 = r1
    //     0xaf9d78: stur            w1, [x0, #0x13]
    // 0xaf9d7c: str             x0, [SP]
    // 0xaf9d80: r0 = _interpolate()
    //     0xaf9d80: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9d84: mov             x1, x0
    // 0xaf9d88: ldur            x0, [fp, #-0x10]
    // 0xaf9d8c: stur            x1, [fp, #-0x18]
    // 0xaf9d90: LoadField: r2 = r0->field_b
    //     0xaf9d90: ldur            w2, [x0, #0xb]
    // 0xaf9d94: DecompressPointer r2
    //     0xaf9d94: add             x2, x2, HEAP, lsl #32
    // 0xaf9d98: stur            x2, [fp, #-8]
    // 0xaf9d9c: LoadField: r3 = r0->field_f
    //     0xaf9d9c: ldur            w3, [x0, #0xf]
    // 0xaf9da0: DecompressPointer r3
    //     0xaf9da0: add             x3, x3, HEAP, lsl #32
    // 0xaf9da4: LoadField: r4 = r3->field_b
    //     0xaf9da4: ldur            w4, [x3, #0xb]
    // 0xaf9da8: DecompressPointer r4
    //     0xaf9da8: add             x4, x4, HEAP, lsl #32
    // 0xaf9dac: cmp             w2, w4
    // 0xaf9db0: b.ne            #0xaf9dbc
    // 0xaf9db4: str             x0, [SP]
    // 0xaf9db8: r0 = _growToNextCapacity()
    //     0xaf9db8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9dbc: ldur            x3, [fp, #-0x10]
    // 0xaf9dc0: ldur            x0, [fp, #-8]
    // 0xaf9dc4: r2 = LoadInt32Instr(r0)
    //     0xaf9dc4: sbfx            x2, x0, #1, #0x1f
    // 0xaf9dc8: add             x0, x2, #1
    // 0xaf9dcc: lsl             x1, x0, #1
    // 0xaf9dd0: StoreField: r3->field_b = r1
    //     0xaf9dd0: stur            w1, [x3, #0xb]
    // 0xaf9dd4: mov             x1, x2
    // 0xaf9dd8: cmp             x1, x0
    // 0xaf9ddc: b.hs            #0xaf9fb4
    // 0xaf9de0: LoadField: r1 = r3->field_f
    //     0xaf9de0: ldur            w1, [x3, #0xf]
    // 0xaf9de4: DecompressPointer r1
    //     0xaf9de4: add             x1, x1, HEAP, lsl #32
    // 0xaf9de8: ldur            x0, [fp, #-0x18]
    // 0xaf9dec: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9dec: add             x25, x1, x2, lsl #2
    //     0xaf9df0: add             x25, x25, #0xf
    //     0xaf9df4: str             w0, [x25]
    //     0xaf9df8: tbz             w0, #0, #0xaf9e14
    //     0xaf9dfc: ldurb           w16, [x1, #-1]
    //     0xaf9e00: ldurb           w17, [x0, #-1]
    //     0xaf9e04: and             x16, x17, x16, lsr #2
    //     0xaf9e08: tst             x16, HEAP, lsr #32
    //     0xaf9e0c: b.eq            #0xaf9e14
    //     0xaf9e10: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9e14: ldr             x0, [fp, #0x10]
    // 0xaf9e18: LoadField: r4 = r0->field_cb
    //     0xaf9e18: ldur            w4, [x0, #0xcb]
    // 0xaf9e1c: DecompressPointer r4
    //     0xaf9e1c: add             x4, x4, HEAP, lsl #32
    // 0xaf9e20: stur            x4, [fp, #-8]
    // 0xaf9e24: cmp             w4, NULL
    // 0xaf9e28: b.eq            #0xaf9ee4
    // 0xaf9e2c: r1 = Null
    //     0xaf9e2c: mov             x1, NULL
    // 0xaf9e30: r2 = 4
    //     0xaf9e30: movz            x2, #0x4
    // 0xaf9e34: r0 = AllocateArray()
    //     0xaf9e34: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9e38: r17 = "alignLabelWithHint: "
    //     0xaf9e38: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c438] "alignLabelWithHint: "
    //     0xaf9e3c: ldr             x17, [x17, #0x438]
    // 0xaf9e40: StoreField: r0->field_f = r17
    //     0xaf9e40: stur            w17, [x0, #0xf]
    // 0xaf9e44: ldur            x1, [fp, #-8]
    // 0xaf9e48: StoreField: r0->field_13 = r1
    //     0xaf9e48: stur            w1, [x0, #0x13]
    // 0xaf9e4c: str             x0, [SP]
    // 0xaf9e50: r0 = _interpolate()
    //     0xaf9e50: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9e54: mov             x1, x0
    // 0xaf9e58: ldur            x0, [fp, #-0x10]
    // 0xaf9e5c: stur            x1, [fp, #-0x18]
    // 0xaf9e60: LoadField: r2 = r0->field_b
    //     0xaf9e60: ldur            w2, [x0, #0xb]
    // 0xaf9e64: DecompressPointer r2
    //     0xaf9e64: add             x2, x2, HEAP, lsl #32
    // 0xaf9e68: stur            x2, [fp, #-8]
    // 0xaf9e6c: LoadField: r3 = r0->field_f
    //     0xaf9e6c: ldur            w3, [x0, #0xf]
    // 0xaf9e70: DecompressPointer r3
    //     0xaf9e70: add             x3, x3, HEAP, lsl #32
    // 0xaf9e74: LoadField: r4 = r3->field_b
    //     0xaf9e74: ldur            w4, [x3, #0xb]
    // 0xaf9e78: DecompressPointer r4
    //     0xaf9e78: add             x4, x4, HEAP, lsl #32
    // 0xaf9e7c: cmp             w2, w4
    // 0xaf9e80: b.ne            #0xaf9e8c
    // 0xaf9e84: str             x0, [SP]
    // 0xaf9e88: r0 = _growToNextCapacity()
    //     0xaf9e88: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0xaf9e8c: ldur            x3, [fp, #-0x10]
    // 0xaf9e90: ldur            x0, [fp, #-8]
    // 0xaf9e94: r2 = LoadInt32Instr(r0)
    //     0xaf9e94: sbfx            x2, x0, #1, #0x1f
    // 0xaf9e98: add             x0, x2, #1
    // 0xaf9e9c: lsl             x1, x0, #1
    // 0xaf9ea0: StoreField: r3->field_b = r1
    //     0xaf9ea0: stur            w1, [x3, #0xb]
    // 0xaf9ea4: mov             x1, x2
    // 0xaf9ea8: cmp             x1, x0
    // 0xaf9eac: b.hs            #0xaf9fb8
    // 0xaf9eb0: LoadField: r1 = r3->field_f
    //     0xaf9eb0: ldur            w1, [x3, #0xf]
    // 0xaf9eb4: DecompressPointer r1
    //     0xaf9eb4: add             x1, x1, HEAP, lsl #32
    // 0xaf9eb8: ldur            x0, [fp, #-0x18]
    // 0xaf9ebc: ArrayStore: r1[r2] = r0  ; List_4
    //     0xaf9ebc: add             x25, x1, x2, lsl #2
    //     0xaf9ec0: add             x25, x25, #0xf
    //     0xaf9ec4: str             w0, [x25]
    //     0xaf9ec8: tbz             w0, #0, #0xaf9ee4
    //     0xaf9ecc: ldurb           w16, [x1, #-1]
    //     0xaf9ed0: ldurb           w17, [x0, #-1]
    //     0xaf9ed4: and             x16, x17, x16, lsr #2
    //     0xaf9ed8: tst             x16, HEAP, lsr #32
    //     0xaf9edc: b.eq            #0xaf9ee4
    //     0xaf9ee0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9ee4: r1 = Null
    //     0xaf9ee4: mov             x1, NULL
    // 0xaf9ee8: r2 = 6
    //     0xaf9ee8: movz            x2, #0x6
    // 0xaf9eec: r0 = AllocateArray()
    //     0xaf9eec: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf9ef0: stur            x0, [fp, #-8]
    // 0xaf9ef4: r17 = "InputDecoration("
    //     0xaf9ef4: add             x17, PP, #0x2c, lsl #12  ; [pp+0x2c440] "InputDecoration("
    //     0xaf9ef8: ldr             x17, [x17, #0x440]
    // 0xaf9efc: StoreField: r0->field_f = r17
    //     0xaf9efc: stur            w17, [x0, #0xf]
    // 0xaf9f00: ldur            x16, [fp, #-0x10]
    // 0xaf9f04: r30 = ", "
    //     0xaf9f04: ldr             lr, [PP, #0x2d40]  ; [pp+0x2d40] ", "
    // 0xaf9f08: stp             lr, x16, [SP]
    // 0xaf9f0c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0xaf9f0c: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0xaf9f10: r0 = join()
    //     0xaf9f10: bl              #0x5771f4  ; [dart:core] _GrowableList::join
    // 0xaf9f14: ldur            x1, [fp, #-8]
    // 0xaf9f18: ArrayStore: r1[1] = r0  ; List_4
    //     0xaf9f18: add             x25, x1, #0x13
    //     0xaf9f1c: str             w0, [x25]
    //     0xaf9f20: tbz             w0, #0, #0xaf9f3c
    //     0xaf9f24: ldurb           w16, [x1, #-1]
    //     0xaf9f28: ldurb           w17, [x0, #-1]
    //     0xaf9f2c: and             x16, x17, x16, lsr #2
    //     0xaf9f30: tst             x16, HEAP, lsr #32
    //     0xaf9f34: b.eq            #0xaf9f3c
    //     0xaf9f38: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf9f3c: ldur            x0, [fp, #-8]
    // 0xaf9f40: r17 = ")"
    //     0xaf9f40: ldr             x17, [PP, #0x2d20]  ; [pp+0x2d20] ")"
    // 0xaf9f44: ArrayStore: r0[0] = r17  ; List_4
    //     0xaf9f44: stur            w17, [x0, #0x17]
    // 0xaf9f48: str             x0, [SP]
    // 0xaf9f4c: r0 = _interpolate()
    //     0xaf9f4c: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf9f50: LeaveFrame
    //     0xaf9f50: mov             SP, fp
    //     0xaf9f54: ldp             fp, lr, [SP], #0x10
    // 0xaf9f58: ret
    //     0xaf9f58: ret             
    // 0xaf9f5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xaf9f5c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xaf9f60: b               #0xaf8d58
    // 0xaf9f64: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f64: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f68: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f68: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f6c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f6c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f70: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f70: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f74: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f74: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f78: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f78: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f7c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f7c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f80: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f80: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f84: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f84: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f88: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f88: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f8c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f8c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f90: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f90: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f94: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f94: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f98: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f98: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9f9c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9f9c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fa0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fa0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fa4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fa4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fa8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fa8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fac: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fac: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fb0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fb0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fb4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fb4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xaf9fb8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xaf9fb8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ ==(/* No info */) {
    // ** addr: 0xbd74f8, size: 0x554
    // 0xbd74f8: EnterFrame
    //     0xbd74f8: stp             fp, lr, [SP, #-0x10]!
    //     0xbd74fc: mov             fp, SP
    // 0xbd7500: AllocStack(0x10)
    //     0xbd7500: sub             SP, SP, #0x10
    // 0xbd7504: CheckStackOverflow
    //     0xbd7504: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbd7508: cmp             SP, x16
    //     0xbd750c: b.ls            #0xbd7a44
    // 0xbd7510: ldr             x1, [fp, #0x10]
    // 0xbd7514: cmp             w1, NULL
    // 0xbd7518: b.ne            #0xbd752c
    // 0xbd751c: r0 = false
    //     0xbd751c: add             x0, NULL, #0x30  ; false
    // 0xbd7520: LeaveFrame
    //     0xbd7520: mov             SP, fp
    //     0xbd7524: ldp             fp, lr, [SP], #0x10
    // 0xbd7528: ret
    //     0xbd7528: ret             
    // 0xbd752c: ldr             x2, [fp, #0x18]
    // 0xbd7530: cmp             w2, w1
    // 0xbd7534: b.ne            #0xbd7548
    // 0xbd7538: r0 = true
    //     0xbd7538: add             x0, NULL, #0x20  ; true
    // 0xbd753c: LeaveFrame
    //     0xbd753c: mov             SP, fp
    //     0xbd7540: ldp             fp, lr, [SP], #0x10
    // 0xbd7544: ret
    //     0xbd7544: ret             
    // 0xbd7548: r0 = 59
    //     0xbd7548: movz            x0, #0x3b
    // 0xbd754c: branchIfSmi(r1, 0xbd7558)
    //     0xbd754c: tbz             w1, #0, #0xbd7558
    // 0xbd7550: r0 = LoadClassIdInstr(r1)
    //     0xbd7550: ldur            x0, [x1, #-1]
    //     0xbd7554: ubfx            x0, x0, #0xc, #0x14
    // 0xbd7558: str             x1, [SP]
    // 0xbd755c: r0 = GDT[cid_x0 + 0x55ae]()
    //     0xbd755c: movz            x17, #0x55ae
    //     0xbd7560: add             lr, x0, x17
    //     0xbd7564: ldr             lr, [x21, lr, lsl #3]
    //     0xbd7568: blr             lr
    // 0xbd756c: r1 = LoadClassIdInstr(r0)
    //     0xbd756c: ldur            x1, [x0, #-1]
    //     0xbd7570: ubfx            x1, x1, #0xc, #0x14
    // 0xbd7574: r16 = InputDecoration
    //     0xbd7574: add             x16, PP, #0x2c, lsl #12  ; [pp+0x2c448] Type: InputDecoration
    //     0xbd7578: ldr             x16, [x16, #0x448]
    // 0xbd757c: stp             x16, x0, [SP]
    // 0xbd7580: mov             x0, x1
    // 0xbd7584: mov             lr, x0
    // 0xbd7588: ldr             lr, [x21, lr, lsl #3]
    // 0xbd758c: blr             lr
    // 0xbd7590: tbz             w0, #4, #0xbd75a4
    // 0xbd7594: r0 = false
    //     0xbd7594: add             x0, NULL, #0x30  ; false
    // 0xbd7598: LeaveFrame
    //     0xbd7598: mov             SP, fp
    //     0xbd759c: ldp             fp, lr, [SP], #0x10
    // 0xbd75a0: ret
    //     0xbd75a0: ret             
    // 0xbd75a4: ldr             x1, [fp, #0x10]
    // 0xbd75a8: r0 = LoadTaggedClassIdMayBeSmiInstr(r1)
    //     0xbd75a8: movz            x0, #0x76
    //     0xbd75ac: tbz             w1, #0, #0xbd75bc
    //     0xbd75b0: ldur            x0, [x1, #-1]
    //     0xbd75b4: ubfx            x0, x0, #0xc, #0x14
    //     0xbd75b8: lsl             x0, x0, #1
    // 0xbd75bc: r17 = 4654
    //     0xbd75bc: movz            x17, #0x122e
    // 0xbd75c0: cmp             w0, w17
    // 0xbd75c4: b.ne            #0xbd7a34
    // 0xbd75c8: ldr             x2, [fp, #0x18]
    // 0xbd75cc: LoadField: r0 = r1->field_2b
    //     0xbd75cc: ldur            w0, [x1, #0x2b]
    // 0xbd75d0: DecompressPointer r0
    //     0xbd75d0: add             x0, x0, HEAP, lsl #32
    // 0xbd75d4: LoadField: r3 = r2->field_2b
    //     0xbd75d4: ldur            w3, [x2, #0x2b]
    // 0xbd75d8: DecompressPointer r3
    //     0xbd75d8: add             x3, x3, HEAP, lsl #32
    // 0xbd75dc: r4 = LoadClassIdInstr(r0)
    //     0xbd75dc: ldur            x4, [x0, #-1]
    //     0xbd75e0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd75e4: stp             x3, x0, [SP]
    // 0xbd75e8: mov             x0, x4
    // 0xbd75ec: mov             lr, x0
    // 0xbd75f0: ldr             lr, [x21, lr, lsl #3]
    // 0xbd75f4: blr             lr
    // 0xbd75f8: tbnz            w0, #4, #0xbd7a34
    // 0xbd75fc: ldr             x2, [fp, #0x18]
    // 0xbd7600: ldr             x1, [fp, #0x10]
    // 0xbd7604: LoadField: r0 = r1->field_2f
    //     0xbd7604: ldur            w0, [x1, #0x2f]
    // 0xbd7608: DecompressPointer r0
    //     0xbd7608: add             x0, x0, HEAP, lsl #32
    // 0xbd760c: LoadField: r3 = r2->field_2f
    //     0xbd760c: ldur            w3, [x2, #0x2f]
    // 0xbd7610: DecompressPointer r3
    //     0xbd7610: add             x3, x3, HEAP, lsl #32
    // 0xbd7614: r4 = LoadClassIdInstr(r0)
    //     0xbd7614: ldur            x4, [x0, #-1]
    //     0xbd7618: ubfx            x4, x4, #0xc, #0x14
    // 0xbd761c: stp             x3, x0, [SP]
    // 0xbd7620: mov             x0, x4
    // 0xbd7624: mov             lr, x0
    // 0xbd7628: ldr             lr, [x21, lr, lsl #3]
    // 0xbd762c: blr             lr
    // 0xbd7630: tbnz            w0, #4, #0xbd7a34
    // 0xbd7634: ldr             x2, [fp, #0x18]
    // 0xbd7638: ldr             x1, [fp, #0x10]
    // 0xbd763c: LoadField: r0 = r1->field_37
    //     0xbd763c: ldur            w0, [x1, #0x37]
    // 0xbd7640: DecompressPointer r0
    //     0xbd7640: add             x0, x0, HEAP, lsl #32
    // 0xbd7644: LoadField: r3 = r2->field_37
    //     0xbd7644: ldur            w3, [x2, #0x37]
    // 0xbd7648: DecompressPointer r3
    //     0xbd7648: add             x3, x3, HEAP, lsl #32
    // 0xbd764c: cmp             w0, w3
    // 0xbd7650: b.eq            #0xbd768c
    // 0xbd7654: and             w16, w0, w3
    // 0xbd7658: branchIfSmi(r16, 0xbd7a34)
    //     0xbd7658: tbz             w16, #0, #0xbd7a34
    // 0xbd765c: r16 = LoadClassIdInstr(r0)
    //     0xbd765c: ldur            x16, [x0, #-1]
    //     0xbd7660: ubfx            x16, x16, #0xc, #0x14
    // 0xbd7664: cmp             x16, #0x3c
    // 0xbd7668: b.ne            #0xbd7a34
    // 0xbd766c: r16 = LoadClassIdInstr(r3)
    //     0xbd766c: ldur            x16, [x3, #-1]
    //     0xbd7670: ubfx            x16, x16, #0xc, #0x14
    // 0xbd7674: cmp             x16, #0x3c
    // 0xbd7678: b.ne            #0xbd7a34
    // 0xbd767c: LoadField: r16 = r0->field_7
    //     0xbd767c: ldur            x16, [x0, #7]
    // 0xbd7680: LoadField: r17 = r3->field_7
    //     0xbd7680: ldur            x17, [x3, #7]
    // 0xbd7684: cmp             x16, x17
    // 0xbd7688: b.ne            #0xbd7a34
    // 0xbd768c: LoadField: r0 = r1->field_3f
    //     0xbd768c: ldur            w0, [x1, #0x3f]
    // 0xbd7690: DecompressPointer r0
    //     0xbd7690: add             x0, x0, HEAP, lsl #32
    // 0xbd7694: LoadField: r3 = r2->field_3f
    //     0xbd7694: ldur            w3, [x2, #0x3f]
    // 0xbd7698: DecompressPointer r3
    //     0xbd7698: add             x3, x3, HEAP, lsl #32
    // 0xbd769c: r4 = LoadClassIdInstr(r0)
    //     0xbd769c: ldur            x4, [x0, #-1]
    //     0xbd76a0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd76a4: stp             x3, x0, [SP]
    // 0xbd76a8: mov             x0, x4
    // 0xbd76ac: mov             lr, x0
    // 0xbd76b0: ldr             lr, [x21, lr, lsl #3]
    // 0xbd76b4: blr             lr
    // 0xbd76b8: tbnz            w0, #4, #0xbd7a34
    // 0xbd76bc: ldr             x2, [fp, #0x18]
    // 0xbd76c0: ldr             x1, [fp, #0x10]
    // 0xbd76c4: LoadField: r0 = r1->field_4b
    //     0xbd76c4: ldur            w0, [x1, #0x4b]
    // 0xbd76c8: DecompressPointer r0
    //     0xbd76c8: add             x0, x0, HEAP, lsl #32
    // 0xbd76cc: LoadField: r3 = r2->field_4b
    //     0xbd76cc: ldur            w3, [x2, #0x4b]
    // 0xbd76d0: DecompressPointer r3
    //     0xbd76d0: add             x3, x3, HEAP, lsl #32
    // 0xbd76d4: cmp             w0, w3
    // 0xbd76d8: b.ne            #0xbd7a34
    // 0xbd76dc: LoadField: r0 = r1->field_4f
    //     0xbd76dc: ldur            w0, [x1, #0x4f]
    // 0xbd76e0: DecompressPointer r0
    //     0xbd76e0: add             x0, x0, HEAP, lsl #32
    // 0xbd76e4: LoadField: r3 = r2->field_4f
    //     0xbd76e4: ldur            w3, [x2, #0x4f]
    // 0xbd76e8: DecompressPointer r3
    //     0xbd76e8: add             x3, x3, HEAP, lsl #32
    // 0xbd76ec: r4 = LoadClassIdInstr(r0)
    //     0xbd76ec: ldur            x4, [x0, #-1]
    //     0xbd76f0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd76f4: stp             x3, x0, [SP]
    // 0xbd76f8: mov             x0, x4
    // 0xbd76fc: mov             lr, x0
    // 0xbd7700: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7704: blr             lr
    // 0xbd7708: tbnz            w0, #4, #0xbd7a34
    // 0xbd770c: ldr             x2, [fp, #0x18]
    // 0xbd7710: ldr             x1, [fp, #0x10]
    // 0xbd7714: LoadField: r0 = r1->field_53
    //     0xbd7714: ldur            w0, [x1, #0x53]
    // 0xbd7718: DecompressPointer r0
    //     0xbd7718: add             x0, x0, HEAP, lsl #32
    // 0xbd771c: LoadField: r3 = r2->field_53
    //     0xbd771c: ldur            w3, [x2, #0x53]
    // 0xbd7720: DecompressPointer r3
    //     0xbd7720: add             x3, x3, HEAP, lsl #32
    // 0xbd7724: cmp             w0, w3
    // 0xbd7728: b.ne            #0xbd7a34
    // 0xbd772c: LoadField: r0 = r1->field_57
    //     0xbd772c: ldur            w0, [x1, #0x57]
    // 0xbd7730: DecompressPointer r0
    //     0xbd7730: add             x0, x0, HEAP, lsl #32
    // 0xbd7734: LoadField: r3 = r2->field_57
    //     0xbd7734: ldur            w3, [x2, #0x57]
    // 0xbd7738: DecompressPointer r3
    //     0xbd7738: add             x3, x3, HEAP, lsl #32
    // 0xbd773c: r4 = LoadClassIdInstr(r0)
    //     0xbd773c: ldur            x4, [x0, #-1]
    //     0xbd7740: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7744: stp             x3, x0, [SP]
    // 0xbd7748: mov             x0, x4
    // 0xbd774c: mov             lr, x0
    // 0xbd7750: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7754: blr             lr
    // 0xbd7758: tbnz            w0, #4, #0xbd7a34
    // 0xbd775c: ldr             x2, [fp, #0x18]
    // 0xbd7760: ldr             x1, [fp, #0x10]
    // 0xbd7764: LoadField: r0 = r1->field_5b
    //     0xbd7764: ldur            w0, [x1, #0x5b]
    // 0xbd7768: DecompressPointer r0
    //     0xbd7768: add             x0, x0, HEAP, lsl #32
    // 0xbd776c: LoadField: r3 = r2->field_5b
    //     0xbd776c: ldur            w3, [x2, #0x5b]
    // 0xbd7770: DecompressPointer r3
    //     0xbd7770: add             x3, x3, HEAP, lsl #32
    // 0xbd7774: cmp             w0, w3
    // 0xbd7778: b.ne            #0xbd7a34
    // 0xbd777c: LoadField: r0 = r1->field_5f
    //     0xbd777c: ldur            w0, [x1, #0x5f]
    // 0xbd7780: DecompressPointer r0
    //     0xbd7780: add             x0, x0, HEAP, lsl #32
    // 0xbd7784: LoadField: r3 = r2->field_5f
    //     0xbd7784: ldur            w3, [x2, #0x5f]
    // 0xbd7788: DecompressPointer r3
    //     0xbd7788: add             x3, x3, HEAP, lsl #32
    // 0xbd778c: r4 = LoadClassIdInstr(r0)
    //     0xbd778c: ldur            x4, [x0, #-1]
    //     0xbd7790: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7794: stp             x3, x0, [SP]
    // 0xbd7798: mov             x0, x4
    // 0xbd779c: mov             lr, x0
    // 0xbd77a0: ldr             lr, [x21, lr, lsl #3]
    // 0xbd77a4: blr             lr
    // 0xbd77a8: tbnz            w0, #4, #0xbd7a34
    // 0xbd77ac: ldr             x2, [fp, #0x18]
    // 0xbd77b0: ldr             x1, [fp, #0x10]
    // 0xbd77b4: LoadField: r0 = r1->field_77
    //     0xbd77b4: ldur            w0, [x1, #0x77]
    // 0xbd77b8: DecompressPointer r0
    //     0xbd77b8: add             x0, x0, HEAP, lsl #32
    // 0xbd77bc: LoadField: r3 = r2->field_77
    //     0xbd77bc: ldur            w3, [x2, #0x77]
    // 0xbd77c0: DecompressPointer r3
    //     0xbd77c0: add             x3, x3, HEAP, lsl #32
    // 0xbd77c4: r4 = LoadClassIdInstr(r0)
    //     0xbd77c4: ldur            x4, [x0, #-1]
    //     0xbd77c8: ubfx            x4, x4, #0xc, #0x14
    // 0xbd77cc: stp             x3, x0, [SP]
    // 0xbd77d0: mov             x0, x4
    // 0xbd77d4: mov             lr, x0
    // 0xbd77d8: ldr             lr, [x21, lr, lsl #3]
    // 0xbd77dc: blr             lr
    // 0xbd77e0: tbnz            w0, #4, #0xbd7a34
    // 0xbd77e4: ldr             x2, [fp, #0x18]
    // 0xbd77e8: ldr             x1, [fp, #0x10]
    // 0xbd77ec: LoadField: r0 = r1->field_93
    //     0xbd77ec: ldur            w0, [x1, #0x93]
    // 0xbd77f0: DecompressPointer r0
    //     0xbd77f0: add             x0, x0, HEAP, lsl #32
    // 0xbd77f4: LoadField: r3 = r2->field_93
    //     0xbd77f4: ldur            w3, [x2, #0x93]
    // 0xbd77f8: DecompressPointer r3
    //     0xbd77f8: add             x3, x3, HEAP, lsl #32
    // 0xbd77fc: r4 = LoadClassIdInstr(r0)
    //     0xbd77fc: ldur            x4, [x0, #-1]
    //     0xbd7800: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7804: stp             x3, x0, [SP]
    // 0xbd7808: mov             x0, x4
    // 0xbd780c: mov             lr, x0
    // 0xbd7810: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7814: blr             lr
    // 0xbd7818: tbnz            w0, #4, #0xbd7a34
    // 0xbd781c: ldr             x2, [fp, #0x18]
    // 0xbd7820: ldr             x1, [fp, #0x10]
    // 0xbd7824: LoadField: r0 = r1->field_8f
    //     0xbd7824: ldur            w0, [x1, #0x8f]
    // 0xbd7828: DecompressPointer r0
    //     0xbd7828: add             x0, x0, HEAP, lsl #32
    // 0xbd782c: LoadField: r3 = r2->field_8f
    //     0xbd782c: ldur            w3, [x2, #0x8f]
    // 0xbd7830: DecompressPointer r3
    //     0xbd7830: add             x3, x3, HEAP, lsl #32
    // 0xbd7834: r4 = LoadClassIdInstr(r0)
    //     0xbd7834: ldur            x4, [x0, #-1]
    //     0xbd7838: ubfx            x4, x4, #0xc, #0x14
    // 0xbd783c: stp             x3, x0, [SP]
    // 0xbd7840: mov             x0, x4
    // 0xbd7844: mov             lr, x0
    // 0xbd7848: ldr             lr, [x21, lr, lsl #3]
    // 0xbd784c: blr             lr
    // 0xbd7850: tbnz            w0, #4, #0xbd7a34
    // 0xbd7854: ldr             x2, [fp, #0x18]
    // 0xbd7858: ldr             x1, [fp, #0x10]
    // 0xbd785c: LoadField: r0 = r1->field_97
    //     0xbd785c: ldur            w0, [x1, #0x97]
    // 0xbd7860: DecompressPointer r0
    //     0xbd7860: add             x0, x0, HEAP, lsl #32
    // 0xbd7864: LoadField: r3 = r2->field_97
    //     0xbd7864: ldur            w3, [x2, #0x97]
    // 0xbd7868: DecompressPointer r3
    //     0xbd7868: add             x3, x3, HEAP, lsl #32
    // 0xbd786c: r4 = LoadClassIdInstr(r0)
    //     0xbd786c: ldur            x4, [x0, #-1]
    //     0xbd7870: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7874: stp             x3, x0, [SP]
    // 0xbd7878: mov             x0, x4
    // 0xbd787c: mov             lr, x0
    // 0xbd7880: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7884: blr             lr
    // 0xbd7888: tbnz            w0, #4, #0xbd7a34
    // 0xbd788c: ldr             x2, [fp, #0x18]
    // 0xbd7890: ldr             x1, [fp, #0x10]
    // 0xbd7894: LoadField: r0 = r1->field_9b
    //     0xbd7894: ldur            w0, [x1, #0x9b]
    // 0xbd7898: DecompressPointer r0
    //     0xbd7898: add             x0, x0, HEAP, lsl #32
    // 0xbd789c: LoadField: r3 = r2->field_9b
    //     0xbd789c: ldur            w3, [x2, #0x9b]
    // 0xbd78a0: DecompressPointer r3
    //     0xbd78a0: add             x3, x3, HEAP, lsl #32
    // 0xbd78a4: cmp             w0, w3
    // 0xbd78a8: b.ne            #0xbd7a34
    // 0xbd78ac: LoadField: r0 = r1->field_9f
    //     0xbd78ac: ldur            w0, [x1, #0x9f]
    // 0xbd78b0: DecompressPointer r0
    //     0xbd78b0: add             x0, x0, HEAP, lsl #32
    // 0xbd78b4: LoadField: r3 = r2->field_9f
    //     0xbd78b4: ldur            w3, [x2, #0x9f]
    // 0xbd78b8: DecompressPointer r3
    //     0xbd78b8: add             x3, x3, HEAP, lsl #32
    // 0xbd78bc: r4 = LoadClassIdInstr(r0)
    //     0xbd78bc: ldur            x4, [x0, #-1]
    //     0xbd78c0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd78c4: stp             x3, x0, [SP]
    // 0xbd78c8: mov             x0, x4
    // 0xbd78cc: mov             lr, x0
    // 0xbd78d0: ldr             lr, [x21, lr, lsl #3]
    // 0xbd78d4: blr             lr
    // 0xbd78d8: tbnz            w0, #4, #0xbd7a34
    // 0xbd78dc: ldr             x2, [fp, #0x18]
    // 0xbd78e0: ldr             x1, [fp, #0x10]
    // 0xbd78e4: LoadField: r0 = r1->field_af
    //     0xbd78e4: ldur            w0, [x1, #0xaf]
    // 0xbd78e8: DecompressPointer r0
    //     0xbd78e8: add             x0, x0, HEAP, lsl #32
    // 0xbd78ec: LoadField: r3 = r2->field_af
    //     0xbd78ec: ldur            w3, [x2, #0xaf]
    // 0xbd78f0: DecompressPointer r3
    //     0xbd78f0: add             x3, x3, HEAP, lsl #32
    // 0xbd78f4: r4 = LoadClassIdInstr(r0)
    //     0xbd78f4: ldur            x4, [x0, #-1]
    //     0xbd78f8: ubfx            x4, x4, #0xc, #0x14
    // 0xbd78fc: stp             x3, x0, [SP]
    // 0xbd7900: mov             x0, x4
    // 0xbd7904: mov             lr, x0
    // 0xbd7908: ldr             lr, [x21, lr, lsl #3]
    // 0xbd790c: blr             lr
    // 0xbd7910: tbnz            w0, #4, #0xbd7a34
    // 0xbd7914: ldr             x2, [fp, #0x18]
    // 0xbd7918: ldr             x1, [fp, #0x10]
    // 0xbd791c: LoadField: r0 = r1->field_b7
    //     0xbd791c: ldur            w0, [x1, #0xb7]
    // 0xbd7920: DecompressPointer r0
    //     0xbd7920: add             x0, x0, HEAP, lsl #32
    // 0xbd7924: LoadField: r3 = r2->field_b7
    //     0xbd7924: ldur            w3, [x2, #0xb7]
    // 0xbd7928: DecompressPointer r3
    //     0xbd7928: add             x3, x3, HEAP, lsl #32
    // 0xbd792c: r4 = LoadClassIdInstr(r0)
    //     0xbd792c: ldur            x4, [x0, #-1]
    //     0xbd7930: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7934: stp             x3, x0, [SP]
    // 0xbd7938: mov             x0, x4
    // 0xbd793c: mov             lr, x0
    // 0xbd7940: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7944: blr             lr
    // 0xbd7948: tbnz            w0, #4, #0xbd7a34
    // 0xbd794c: ldr             x2, [fp, #0x18]
    // 0xbd7950: ldr             x1, [fp, #0x10]
    // 0xbd7954: LoadField: r0 = r1->field_bb
    //     0xbd7954: ldur            w0, [x1, #0xbb]
    // 0xbd7958: DecompressPointer r0
    //     0xbd7958: add             x0, x0, HEAP, lsl #32
    // 0xbd795c: LoadField: r3 = r2->field_bb
    //     0xbd795c: ldur            w3, [x2, #0xbb]
    // 0xbd7960: DecompressPointer r3
    //     0xbd7960: add             x3, x3, HEAP, lsl #32
    // 0xbd7964: r4 = LoadClassIdInstr(r0)
    //     0xbd7964: ldur            x4, [x0, #-1]
    //     0xbd7968: ubfx            x4, x4, #0xc, #0x14
    // 0xbd796c: stp             x3, x0, [SP]
    // 0xbd7970: mov             x0, x4
    // 0xbd7974: mov             lr, x0
    // 0xbd7978: ldr             lr, [x21, lr, lsl #3]
    // 0xbd797c: blr             lr
    // 0xbd7980: tbnz            w0, #4, #0xbd7a34
    // 0xbd7984: ldr             x2, [fp, #0x18]
    // 0xbd7988: ldr             x1, [fp, #0x10]
    // 0xbd798c: LoadField: r0 = r1->field_bf
    //     0xbd798c: ldur            w0, [x1, #0xbf]
    // 0xbd7990: DecompressPointer r0
    //     0xbd7990: add             x0, x0, HEAP, lsl #32
    // 0xbd7994: LoadField: r3 = r2->field_bf
    //     0xbd7994: ldur            w3, [x2, #0xbf]
    // 0xbd7998: DecompressPointer r3
    //     0xbd7998: add             x3, x3, HEAP, lsl #32
    // 0xbd799c: r4 = LoadClassIdInstr(r0)
    //     0xbd799c: ldur            x4, [x0, #-1]
    //     0xbd79a0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd79a4: stp             x3, x0, [SP]
    // 0xbd79a8: mov             x0, x4
    // 0xbd79ac: mov             lr, x0
    // 0xbd79b0: ldr             lr, [x21, lr, lsl #3]
    // 0xbd79b4: blr             lr
    // 0xbd79b8: tbnz            w0, #4, #0xbd7a34
    // 0xbd79bc: ldr             x2, [fp, #0x18]
    // 0xbd79c0: ldr             x1, [fp, #0x10]
    // 0xbd79c4: LoadField: r0 = r1->field_c3
    //     0xbd79c4: ldur            w0, [x1, #0xc3]
    // 0xbd79c8: DecompressPointer r0
    //     0xbd79c8: add             x0, x0, HEAP, lsl #32
    // 0xbd79cc: LoadField: r3 = r2->field_c3
    //     0xbd79cc: ldur            w3, [x2, #0xc3]
    // 0xbd79d0: DecompressPointer r3
    //     0xbd79d0: add             x3, x3, HEAP, lsl #32
    // 0xbd79d4: cmp             w0, w3
    // 0xbd79d8: b.ne            #0xbd7a34
    // 0xbd79dc: LoadField: r0 = r1->field_c7
    //     0xbd79dc: ldur            w0, [x1, #0xc7]
    // 0xbd79e0: DecompressPointer r0
    //     0xbd79e0: add             x0, x0, HEAP, lsl #32
    // 0xbd79e4: LoadField: r3 = r2->field_c7
    //     0xbd79e4: ldur            w3, [x2, #0xc7]
    // 0xbd79e8: DecompressPointer r3
    //     0xbd79e8: add             x3, x3, HEAP, lsl #32
    // 0xbd79ec: r4 = LoadClassIdInstr(r0)
    //     0xbd79ec: ldur            x4, [x0, #-1]
    //     0xbd79f0: ubfx            x4, x4, #0xc, #0x14
    // 0xbd79f4: stp             x3, x0, [SP]
    // 0xbd79f8: mov             x0, x4
    // 0xbd79fc: mov             lr, x0
    // 0xbd7a00: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7a04: blr             lr
    // 0xbd7a08: tbnz            w0, #4, #0xbd7a34
    // 0xbd7a0c: ldr             x2, [fp, #0x18]
    // 0xbd7a10: ldr             x1, [fp, #0x10]
    // 0xbd7a14: LoadField: r3 = r1->field_cb
    //     0xbd7a14: ldur            w3, [x1, #0xcb]
    // 0xbd7a18: DecompressPointer r3
    //     0xbd7a18: add             x3, x3, HEAP, lsl #32
    // 0xbd7a1c: LoadField: r1 = r2->field_cb
    //     0xbd7a1c: ldur            w1, [x2, #0xcb]
    // 0xbd7a20: DecompressPointer r1
    //     0xbd7a20: add             x1, x1, HEAP, lsl #32
    // 0xbd7a24: cmp             w3, w1
    // 0xbd7a28: b.ne            #0xbd7a34
    // 0xbd7a2c: r0 = true
    //     0xbd7a2c: add             x0, NULL, #0x20  ; true
    // 0xbd7a30: b               #0xbd7a38
    // 0xbd7a34: r0 = false
    //     0xbd7a34: add             x0, NULL, #0x30  ; false
    // 0xbd7a38: LeaveFrame
    //     0xbd7a38: mov             SP, fp
    //     0xbd7a3c: ldp             fp, lr, [SP], #0x10
    // 0xbd7a40: ret
    //     0xbd7a40: ret             
    // 0xbd7a44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbd7a44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbd7a48: b               #0xbd7510
  }
}

// class id: 2328, size: 0x34, field offset: 0x8
//   const constructor, 
class _RenderDecorationLayout extends Object {
}

// class id: 2329, size: 0x64, field offset: 0x8
//   const constructor, 
class _Decoration extends Object {

  get _ hashCode(/* No info */) {
    // ** addr: 0xadce2c, size: 0x1e8
    // 0xadce2c: EnterFrame
    //     0xadce2c: stp             fp, lr, [SP, #-0x10]!
    //     0xadce30: mov             fp, SP
    // 0xadce34: AllocStack(0xa0)
    //     0xadce34: sub             SP, SP, #0xa0
    // 0xadce38: CheckStackOverflow
    //     0xadce38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xadce3c: cmp             SP, x16
    //     0xadce40: b.ls            #0xadcf70
    // 0xadce44: ldr             x0, [fp, #0x10]
    // 0xadce48: LoadField: r1 = r0->field_7
    //     0xadce48: ldur            w1, [x0, #7]
    // 0xadce4c: DecompressPointer r1
    //     0xadce4c: add             x1, x1, HEAP, lsl #32
    // 0xadce50: LoadField: d0 = r0->field_f
    //     0xadce50: ldur            d0, [x0, #0xf]
    // 0xadce54: ArrayLoad: d1 = r0[0]  ; List_8
    //     0xadce54: ldur            d1, [x0, #0x17]
    // 0xadce58: LoadField: r2 = r0->field_23
    //     0xadce58: ldur            w2, [x0, #0x23]
    // 0xadce5c: DecompressPointer r2
    //     0xadce5c: add             x2, x2, HEAP, lsl #32
    // 0xadce60: LoadField: r3 = r0->field_27
    //     0xadce60: ldur            w3, [x0, #0x27]
    // 0xadce64: DecompressPointer r3
    //     0xadce64: add             x3, x3, HEAP, lsl #32
    // 0xadce68: LoadField: r4 = r0->field_2f
    //     0xadce68: ldur            w4, [x0, #0x2f]
    // 0xadce6c: DecompressPointer r4
    //     0xadce6c: add             x4, x4, HEAP, lsl #32
    // 0xadce70: LoadField: r5 = r0->field_33
    //     0xadce70: ldur            w5, [x0, #0x33]
    // 0xadce74: DecompressPointer r5
    //     0xadce74: add             x5, x5, HEAP, lsl #32
    // 0xadce78: LoadField: r6 = r0->field_3b
    //     0xadce78: ldur            w6, [x0, #0x3b]
    // 0xadce7c: DecompressPointer r6
    //     0xadce7c: add             x6, x6, HEAP, lsl #32
    // 0xadce80: LoadField: r7 = r0->field_43
    //     0xadce80: ldur            w7, [x0, #0x43]
    // 0xadce84: DecompressPointer r7
    //     0xadce84: add             x7, x7, HEAP, lsl #32
    // 0xadce88: LoadField: r8 = r0->field_47
    //     0xadce88: ldur            w8, [x0, #0x47]
    // 0xadce8c: DecompressPointer r8
    //     0xadce8c: add             x8, x8, HEAP, lsl #32
    // 0xadce90: LoadField: r9 = r0->field_4b
    //     0xadce90: ldur            w9, [x0, #0x4b]
    // 0xadce94: DecompressPointer r9
    //     0xadce94: add             x9, x9, HEAP, lsl #32
    // 0xadce98: LoadField: r10 = r0->field_4f
    //     0xadce98: ldur            w10, [x0, #0x4f]
    // 0xadce9c: DecompressPointer r10
    //     0xadce9c: add             x10, x10, HEAP, lsl #32
    // 0xadcea0: LoadField: r11 = r0->field_53
    //     0xadcea0: ldur            w11, [x0, #0x53]
    // 0xadcea4: DecompressPointer r11
    //     0xadcea4: add             x11, x11, HEAP, lsl #32
    // 0xadcea8: LoadField: r12 = r0->field_57
    //     0xadcea8: ldur            w12, [x0, #0x57]
    // 0xadceac: DecompressPointer r12
    //     0xadceac: add             x12, x12, HEAP, lsl #32
    // 0xadceb0: LoadField: r13 = r0->field_5b
    //     0xadceb0: ldur            w13, [x0, #0x5b]
    // 0xadceb4: DecompressPointer r13
    //     0xadceb4: add             x13, x13, HEAP, lsl #32
    // 0xadceb8: LoadField: r14 = r0->field_5f
    //     0xadceb8: ldur            w14, [x0, #0x5f]
    // 0xadcebc: DecompressPointer r14
    //     0xadcebc: add             x14, x14, HEAP, lsl #32
    // 0xadcec0: r0 = inline_Allocate_Double()
    //     0xadcec0: ldp             x0, x19, [THR, #0x50]  ; THR::top
    //     0xadcec4: add             x0, x0, #0x10
    //     0xadcec8: cmp             x19, x0
    //     0xadcecc: b.ls            #0xadcf78
    //     0xadced0: str             x0, [THR, #0x50]  ; THR::top
    //     0xadced4: sub             x0, x0, #0xf
    //     0xadced8: movz            x19, #0xd148
    //     0xadcedc: movk            x19, #0x3, lsl #16
    //     0xadcee0: stur            x19, [x0, #-1]
    // 0xadcee4: StoreField: r0->field_7 = d0
    //     0xadcee4: stur            d0, [x0, #7]
    // 0xadcee8: r19 = inline_Allocate_Double()
    //     0xadcee8: ldp             x19, x20, [THR, #0x50]  ; THR::top
    //     0xadceec: add             x19, x19, #0x10
    //     0xadcef0: cmp             x20, x19
    //     0xadcef4: b.ls            #0xadcfc0
    //     0xadcef8: str             x19, [THR, #0x50]  ; THR::top
    //     0xadcefc: sub             x19, x19, #0xf
    //     0xadcf00: movz            x20, #0xd148
    //     0xadcf04: movk            x20, #0x3, lsl #16
    //     0xadcf08: stur            x20, [x19, #-1]
    // 0xadcf0c: StoreField: r19->field_7 = d1
    //     0xadcf0c: stur            d1, [x19, #7]
    // 0xadcf10: stp             x0, x1, [SP, #0x90]
    // 0xadcf14: r16 = Instance_FloatingLabelAlignment
    //     0xadcf14: add             x16, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0xadcf18: ldr             x16, [x16, #0x6a0]
    // 0xadcf1c: stp             x16, x19, [SP, #0x80]
    // 0xadcf20: stp             x3, x2, [SP, #0x70]
    // 0xadcf24: r16 = false
    //     0xadcf24: add             x16, NULL, #0x30  ; false
    // 0xadcf28: stp             x4, x16, [SP, #0x60]
    // 0xadcf2c: stp             NULL, x5, [SP, #0x50]
    // 0xadcf30: stp             NULL, x6, [SP, #0x40]
    // 0xadcf34: stp             x8, x7, [SP, #0x30]
    // 0xadcf38: stp             x10, x9, [SP, #0x20]
    // 0xadcf3c: stp             x12, x11, [SP, #0x10]
    // 0xadcf40: stp             x14, x13, [SP]
    // 0xadcf44: r4 = const [0, 0x14, 0x14, 0x14, null]
    //     0xadcf44: ldr             x4, [PP, #0x7618]  ; [pp+0x7618] List(5) [0, 0x14, 0x14, 0x14, Null]
    // 0xadcf48: r0 = hash()
    //     0xadcf48: bl              #0x5f0bd8  ; [dart:core] Object::hash
    // 0xadcf4c: mov             x2, x0
    // 0xadcf50: r0 = BoxInt64Instr(r2)
    //     0xadcf50: sbfiz           x0, x2, #1, #0x1f
    //     0xadcf54: cmp             x2, x0, asr #1
    //     0xadcf58: b.eq            #0xadcf64
    //     0xadcf5c: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xadcf60: stur            x2, [x0, #7]
    // 0xadcf64: LeaveFrame
    //     0xadcf64: mov             SP, fp
    //     0xadcf68: ldp             fp, lr, [SP], #0x10
    // 0xadcf6c: ret
    //     0xadcf6c: ret             
    // 0xadcf70: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xadcf70: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xadcf74: b               #0xadce44
    // 0xadcf78: stp             q0, q1, [SP, #-0x20]!
    // 0xadcf7c: stp             x13, x14, [SP, #-0x10]!
    // 0xadcf80: stp             x11, x12, [SP, #-0x10]!
    // 0xadcf84: stp             x9, x10, [SP, #-0x10]!
    // 0xadcf88: stp             x7, x8, [SP, #-0x10]!
    // 0xadcf8c: stp             x5, x6, [SP, #-0x10]!
    // 0xadcf90: stp             x3, x4, [SP, #-0x10]!
    // 0xadcf94: stp             x1, x2, [SP, #-0x10]!
    // 0xadcf98: r0 = AllocateDouble()
    //     0xadcf98: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xadcf9c: ldp             x1, x2, [SP], #0x10
    // 0xadcfa0: ldp             x3, x4, [SP], #0x10
    // 0xadcfa4: ldp             x5, x6, [SP], #0x10
    // 0xadcfa8: ldp             x7, x8, [SP], #0x10
    // 0xadcfac: ldp             x9, x10, [SP], #0x10
    // 0xadcfb0: ldp             x11, x12, [SP], #0x10
    // 0xadcfb4: ldp             x13, x14, [SP], #0x10
    // 0xadcfb8: ldp             q0, q1, [SP], #0x20
    // 0xadcfbc: b               #0xadcee4
    // 0xadcfc0: SaveReg d1
    //     0xadcfc0: str             q1, [SP, #-0x10]!
    // 0xadcfc4: stp             x13, x14, [SP, #-0x10]!
    // 0xadcfc8: stp             x11, x12, [SP, #-0x10]!
    // 0xadcfcc: stp             x9, x10, [SP, #-0x10]!
    // 0xadcfd0: stp             x7, x8, [SP, #-0x10]!
    // 0xadcfd4: stp             x5, x6, [SP, #-0x10]!
    // 0xadcfd8: stp             x3, x4, [SP, #-0x10]!
    // 0xadcfdc: stp             x1, x2, [SP, #-0x10]!
    // 0xadcfe0: SaveReg r0
    //     0xadcfe0: str             x0, [SP, #-8]!
    // 0xadcfe4: r0 = AllocateDouble()
    //     0xadcfe4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xadcfe8: mov             x19, x0
    // 0xadcfec: RestoreReg r0
    //     0xadcfec: ldr             x0, [SP], #8
    // 0xadcff0: ldp             x1, x2, [SP], #0x10
    // 0xadcff4: ldp             x3, x4, [SP], #0x10
    // 0xadcff8: ldp             x5, x6, [SP], #0x10
    // 0xadcffc: ldp             x7, x8, [SP], #0x10
    // 0xadd000: ldp             x9, x10, [SP], #0x10
    // 0xadd004: ldp             x11, x12, [SP], #0x10
    // 0xadd008: ldp             x13, x14, [SP], #0x10
    // 0xadd00c: RestoreReg d1
    //     0xadd00c: ldr             q1, [SP], #0x10
    // 0xadd010: b               #0xadcf0c
  }
  _ ==(/* No info */) {
    // ** addr: 0xbd70d4, size: 0x424
    // 0xbd70d4: EnterFrame
    //     0xbd70d4: stp             fp, lr, [SP, #-0x10]!
    //     0xbd70d8: mov             fp, SP
    // 0xbd70dc: AllocStack(0x20)
    //     0xbd70dc: sub             SP, SP, #0x20
    // 0xbd70e0: CheckStackOverflow
    //     0xbd70e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbd70e4: cmp             SP, x16
    //     0xbd70e8: b.ls            #0xbd74f0
    // 0xbd70ec: ldr             x1, [fp, #0x10]
    // 0xbd70f0: cmp             w1, NULL
    // 0xbd70f4: b.ne            #0xbd7108
    // 0xbd70f8: r0 = false
    //     0xbd70f8: add             x0, NULL, #0x30  ; false
    // 0xbd70fc: LeaveFrame
    //     0xbd70fc: mov             SP, fp
    //     0xbd7100: ldp             fp, lr, [SP], #0x10
    // 0xbd7104: ret
    //     0xbd7104: ret             
    // 0xbd7108: ldr             x2, [fp, #0x18]
    // 0xbd710c: cmp             w2, w1
    // 0xbd7110: b.ne            #0xbd7124
    // 0xbd7114: r0 = true
    //     0xbd7114: add             x0, NULL, #0x20  ; true
    // 0xbd7118: LeaveFrame
    //     0xbd7118: mov             SP, fp
    //     0xbd711c: ldp             fp, lr, [SP], #0x10
    // 0xbd7120: ret
    //     0xbd7120: ret             
    // 0xbd7124: r0 = 59
    //     0xbd7124: movz            x0, #0x3b
    // 0xbd7128: branchIfSmi(r1, 0xbd7134)
    //     0xbd7128: tbz             w1, #0, #0xbd7134
    // 0xbd712c: r0 = LoadClassIdInstr(r1)
    //     0xbd712c: ldur            x0, [x1, #-1]
    //     0xbd7130: ubfx            x0, x0, #0xc, #0x14
    // 0xbd7134: str             x1, [SP]
    // 0xbd7138: r0 = GDT[cid_x0 + 0x55ae]()
    //     0xbd7138: movz            x17, #0x55ae
    //     0xbd713c: add             lr, x0, x17
    //     0xbd7140: ldr             lr, [x21, lr, lsl #3]
    //     0xbd7144: blr             lr
    // 0xbd7148: r1 = LoadClassIdInstr(r0)
    //     0xbd7148: ldur            x1, [x0, #-1]
    //     0xbd714c: ubfx            x1, x1, #0xc, #0x14
    // 0xbd7150: r16 = _Decoration
    //     0xbd7150: add             x16, PP, #0x47, lsl #12  ; [pp+0x47998] Type: _Decoration
    //     0xbd7154: ldr             x16, [x16, #0x998]
    // 0xbd7158: stp             x16, x0, [SP]
    // 0xbd715c: mov             x0, x1
    // 0xbd7160: mov             lr, x0
    // 0xbd7164: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7168: blr             lr
    // 0xbd716c: tbz             w0, #4, #0xbd7180
    // 0xbd7170: r0 = false
    //     0xbd7170: add             x0, NULL, #0x30  ; false
    // 0xbd7174: LeaveFrame
    //     0xbd7174: mov             SP, fp
    //     0xbd7178: ldp             fp, lr, [SP], #0x10
    // 0xbd717c: ret
    //     0xbd717c: ret             
    // 0xbd7180: ldr             x0, [fp, #0x10]
    // 0xbd7184: r1 = LoadTaggedClassIdMayBeSmiInstr(r0)
    //     0xbd7184: movz            x1, #0x76
    //     0xbd7188: tbz             w0, #0, #0xbd7198
    //     0xbd718c: ldur            x1, [x0, #-1]
    //     0xbd7190: ubfx            x1, x1, #0xc, #0x14
    //     0xbd7194: lsl             x1, x1, #1
    // 0xbd7198: r17 = 4658
    //     0xbd7198: movz            x17, #0x1232
    // 0xbd719c: cmp             w1, w17
    // 0xbd71a0: b.ne            #0xbd74e0
    // 0xbd71a4: ldr             x1, [fp, #0x18]
    // 0xbd71a8: LoadField: r2 = r0->field_7
    //     0xbd71a8: ldur            w2, [x0, #7]
    // 0xbd71ac: DecompressPointer r2
    //     0xbd71ac: add             x2, x2, HEAP, lsl #32
    // 0xbd71b0: LoadField: r3 = r1->field_7
    //     0xbd71b0: ldur            w3, [x1, #7]
    // 0xbd71b4: DecompressPointer r3
    //     0xbd71b4: add             x3, x3, HEAP, lsl #32
    // 0xbd71b8: stp             x3, x2, [SP]
    // 0xbd71bc: r0 = ==()
    //     0xbd71bc: bl              #0xbd9800  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsetsGeometry::==
    // 0xbd71c0: tbnz            w0, #4, #0xbd74e0
    // 0xbd71c4: ldr             x2, [fp, #0x18]
    // 0xbd71c8: ldr             x1, [fp, #0x10]
    // 0xbd71cc: LoadField: r0 = r1->field_b
    //     0xbd71cc: ldur            w0, [x1, #0xb]
    // 0xbd71d0: DecompressPointer r0
    //     0xbd71d0: add             x0, x0, HEAP, lsl #32
    // 0xbd71d4: LoadField: r3 = r2->field_b
    //     0xbd71d4: ldur            w3, [x2, #0xb]
    // 0xbd71d8: DecompressPointer r3
    //     0xbd71d8: add             x3, x3, HEAP, lsl #32
    // 0xbd71dc: cmp             w0, w3
    // 0xbd71e0: b.ne            #0xbd74e0
    // 0xbd71e4: LoadField: d0 = r1->field_f
    //     0xbd71e4: ldur            d0, [x1, #0xf]
    // 0xbd71e8: LoadField: d1 = r2->field_f
    //     0xbd71e8: ldur            d1, [x2, #0xf]
    // 0xbd71ec: fcmp            d0, d1
    // 0xbd71f0: b.vs            #0xbd74e0
    // 0xbd71f4: b.ne            #0xbd74e0
    // 0xbd71f8: ArrayLoad: d0 = r1[0]  ; List_8
    //     0xbd71f8: ldur            d0, [x1, #0x17]
    // 0xbd71fc: ArrayLoad: d1 = r2[0]  ; List_8
    //     0xbd71fc: ldur            d1, [x2, #0x17]
    // 0xbd7200: fcmp            d0, d1
    // 0xbd7204: b.vs            #0xbd74e0
    // 0xbd7208: b.ne            #0xbd74e0
    // 0xbd720c: LoadField: r0 = r1->field_23
    //     0xbd720c: ldur            w0, [x1, #0x23]
    // 0xbd7210: DecompressPointer r0
    //     0xbd7210: add             x0, x0, HEAP, lsl #32
    // 0xbd7214: LoadField: r3 = r2->field_23
    //     0xbd7214: ldur            w3, [x2, #0x23]
    // 0xbd7218: DecompressPointer r3
    //     0xbd7218: add             x3, x3, HEAP, lsl #32
    // 0xbd721c: r4 = LoadClassIdInstr(r0)
    //     0xbd721c: ldur            x4, [x0, #-1]
    //     0xbd7220: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7224: lsl             x4, x4, #1
    // 0xbd7228: r17 = 4696
    //     0xbd7228: movz            x17, #0x1258
    // 0xbd722c: cmp             w4, w17
    // 0xbd7230: b.ne            #0xbd7248
    // 0xbd7234: cmp             w0, w3
    // 0xbd7238: b.ne            #0xbd74e0
    // 0xbd723c: mov             x0, x1
    // 0xbd7240: mov             x1, x2
    // 0xbd7244: b               #0xbd7270
    // 0xbd7248: r4 = LoadClassIdInstr(r0)
    //     0xbd7248: ldur            x4, [x0, #-1]
    //     0xbd724c: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7250: stp             x3, x0, [SP]
    // 0xbd7254: mov             x0, x4
    // 0xbd7258: mov             lr, x0
    // 0xbd725c: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7260: blr             lr
    // 0xbd7264: tbnz            w0, #4, #0xbd74e0
    // 0xbd7268: ldr             x1, [fp, #0x18]
    // 0xbd726c: ldr             x0, [fp, #0x10]
    // 0xbd7270: LoadField: r2 = r0->field_27
    //     0xbd7270: ldur            w2, [x0, #0x27]
    // 0xbd7274: DecompressPointer r2
    //     0xbd7274: add             x2, x2, HEAP, lsl #32
    // 0xbd7278: LoadField: r3 = r1->field_27
    //     0xbd7278: ldur            w3, [x1, #0x27]
    // 0xbd727c: DecompressPointer r3
    //     0xbd727c: add             x3, x3, HEAP, lsl #32
    // 0xbd7280: stp             x3, x2, [SP]
    // 0xbd7284: r0 = ==()
    //     0xbd7284: bl              #0xbb77e8  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::==
    // 0xbd7288: tbnz            w0, #4, #0xbd74e0
    // 0xbd728c: ldr             x1, [fp, #0x18]
    // 0xbd7290: ldr             x0, [fp, #0x10]
    // 0xbd7294: LoadField: r2 = r0->field_2f
    //     0xbd7294: ldur            w2, [x0, #0x2f]
    // 0xbd7298: DecompressPointer r2
    //     0xbd7298: add             x2, x2, HEAP, lsl #32
    // 0xbd729c: LoadField: r3 = r1->field_2f
    //     0xbd729c: ldur            w3, [x1, #0x2f]
    // 0xbd72a0: DecompressPointer r3
    //     0xbd72a0: add             x3, x3, HEAP, lsl #32
    // 0xbd72a4: cmp             w2, w3
    // 0xbd72a8: b.ne            #0xbd74e0
    // 0xbd72ac: LoadField: r2 = r0->field_33
    //     0xbd72ac: ldur            w2, [x0, #0x33]
    // 0xbd72b0: DecompressPointer r2
    //     0xbd72b0: add             x2, x2, HEAP, lsl #32
    // 0xbd72b4: stur            x2, [fp, #-0x10]
    // 0xbd72b8: LoadField: r3 = r1->field_33
    //     0xbd72b8: ldur            w3, [x1, #0x33]
    // 0xbd72bc: DecompressPointer r3
    //     0xbd72bc: add             x3, x3, HEAP, lsl #32
    // 0xbd72c0: stur            x3, [fp, #-8]
    // 0xbd72c4: r16 = VisualDensity
    //     0xbd72c4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf2f0] Type: VisualDensity
    //     0xbd72c8: ldr             x16, [x16, #0x2f0]
    // 0xbd72cc: r30 = VisualDensity
    //     0xbd72cc: add             lr, PP, #0xf, lsl #12  ; [pp+0xf2f0] Type: VisualDensity
    //     0xbd72d0: ldr             lr, [lr, #0x2f0]
    // 0xbd72d4: stp             lr, x16, [SP]
    // 0xbd72d8: r0 = ==()
    //     0xbd72d8: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0xbd72dc: tbnz            w0, #4, #0xbd74e0
    // 0xbd72e0: ldur            x0, [fp, #-0x10]
    // 0xbd72e4: ldur            x1, [fp, #-8]
    // 0xbd72e8: LoadField: d0 = r1->field_7
    //     0xbd72e8: ldur            d0, [x1, #7]
    // 0xbd72ec: LoadField: d1 = r0->field_7
    //     0xbd72ec: ldur            d1, [x0, #7]
    // 0xbd72f0: fcmp            d0, d1
    // 0xbd72f4: b.vs            #0xbd74e0
    // 0xbd72f8: b.ne            #0xbd74e0
    // 0xbd72fc: LoadField: d0 = r1->field_f
    //     0xbd72fc: ldur            d0, [x1, #0xf]
    // 0xbd7300: LoadField: d1 = r0->field_f
    //     0xbd7300: ldur            d1, [x0, #0xf]
    // 0xbd7304: fcmp            d0, d1
    // 0xbd7308: b.vs            #0xbd74e0
    // 0xbd730c: b.ne            #0xbd74e0
    // 0xbd7310: ldr             x2, [fp, #0x18]
    // 0xbd7314: ldr             x1, [fp, #0x10]
    // 0xbd7318: LoadField: r0 = r1->field_3b
    //     0xbd7318: ldur            w0, [x1, #0x3b]
    // 0xbd731c: DecompressPointer r0
    //     0xbd731c: add             x0, x0, HEAP, lsl #32
    // 0xbd7320: LoadField: r3 = r2->field_3b
    //     0xbd7320: ldur            w3, [x2, #0x3b]
    // 0xbd7324: DecompressPointer r3
    //     0xbd7324: add             x3, x3, HEAP, lsl #32
    // 0xbd7328: r4 = LoadClassIdInstr(r0)
    //     0xbd7328: ldur            x4, [x0, #-1]
    //     0xbd732c: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7330: stp             x3, x0, [SP]
    // 0xbd7334: mov             x0, x4
    // 0xbd7338: mov             lr, x0
    // 0xbd733c: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7340: blr             lr
    // 0xbd7344: tbnz            w0, #4, #0xbd74e0
    // 0xbd7348: ldr             x2, [fp, #0x18]
    // 0xbd734c: ldr             x1, [fp, #0x10]
    // 0xbd7350: LoadField: r0 = r1->field_43
    //     0xbd7350: ldur            w0, [x1, #0x43]
    // 0xbd7354: DecompressPointer r0
    //     0xbd7354: add             x0, x0, HEAP, lsl #32
    // 0xbd7358: LoadField: r3 = r2->field_43
    //     0xbd7358: ldur            w3, [x2, #0x43]
    // 0xbd735c: DecompressPointer r3
    //     0xbd735c: add             x3, x3, HEAP, lsl #32
    // 0xbd7360: r4 = LoadClassIdInstr(r0)
    //     0xbd7360: ldur            x4, [x0, #-1]
    //     0xbd7364: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7368: stp             x3, x0, [SP]
    // 0xbd736c: mov             x0, x4
    // 0xbd7370: mov             lr, x0
    // 0xbd7374: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7378: blr             lr
    // 0xbd737c: tbnz            w0, #4, #0xbd74e0
    // 0xbd7380: ldr             x2, [fp, #0x18]
    // 0xbd7384: ldr             x1, [fp, #0x10]
    // 0xbd7388: LoadField: r0 = r1->field_47
    //     0xbd7388: ldur            w0, [x1, #0x47]
    // 0xbd738c: DecompressPointer r0
    //     0xbd738c: add             x0, x0, HEAP, lsl #32
    // 0xbd7390: LoadField: r3 = r2->field_47
    //     0xbd7390: ldur            w3, [x2, #0x47]
    // 0xbd7394: DecompressPointer r3
    //     0xbd7394: add             x3, x3, HEAP, lsl #32
    // 0xbd7398: r4 = LoadClassIdInstr(r0)
    //     0xbd7398: ldur            x4, [x0, #-1]
    //     0xbd739c: ubfx            x4, x4, #0xc, #0x14
    // 0xbd73a0: stp             x3, x0, [SP]
    // 0xbd73a4: mov             x0, x4
    // 0xbd73a8: mov             lr, x0
    // 0xbd73ac: ldr             lr, [x21, lr, lsl #3]
    // 0xbd73b0: blr             lr
    // 0xbd73b4: tbnz            w0, #4, #0xbd74e0
    // 0xbd73b8: ldr             x2, [fp, #0x18]
    // 0xbd73bc: ldr             x1, [fp, #0x10]
    // 0xbd73c0: LoadField: r0 = r1->field_4b
    //     0xbd73c0: ldur            w0, [x1, #0x4b]
    // 0xbd73c4: DecompressPointer r0
    //     0xbd73c4: add             x0, x0, HEAP, lsl #32
    // 0xbd73c8: LoadField: r3 = r2->field_4b
    //     0xbd73c8: ldur            w3, [x2, #0x4b]
    // 0xbd73cc: DecompressPointer r3
    //     0xbd73cc: add             x3, x3, HEAP, lsl #32
    // 0xbd73d0: r4 = LoadClassIdInstr(r0)
    //     0xbd73d0: ldur            x4, [x0, #-1]
    //     0xbd73d4: ubfx            x4, x4, #0xc, #0x14
    // 0xbd73d8: stp             x3, x0, [SP]
    // 0xbd73dc: mov             x0, x4
    // 0xbd73e0: mov             lr, x0
    // 0xbd73e4: ldr             lr, [x21, lr, lsl #3]
    // 0xbd73e8: blr             lr
    // 0xbd73ec: tbnz            w0, #4, #0xbd74e0
    // 0xbd73f0: ldr             x2, [fp, #0x18]
    // 0xbd73f4: ldr             x1, [fp, #0x10]
    // 0xbd73f8: LoadField: r0 = r1->field_4f
    //     0xbd73f8: ldur            w0, [x1, #0x4f]
    // 0xbd73fc: DecompressPointer r0
    //     0xbd73fc: add             x0, x0, HEAP, lsl #32
    // 0xbd7400: LoadField: r3 = r2->field_4f
    //     0xbd7400: ldur            w3, [x2, #0x4f]
    // 0xbd7404: DecompressPointer r3
    //     0xbd7404: add             x3, x3, HEAP, lsl #32
    // 0xbd7408: r4 = LoadClassIdInstr(r0)
    //     0xbd7408: ldur            x4, [x0, #-1]
    //     0xbd740c: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7410: stp             x3, x0, [SP]
    // 0xbd7414: mov             x0, x4
    // 0xbd7418: mov             lr, x0
    // 0xbd741c: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7420: blr             lr
    // 0xbd7424: tbnz            w0, #4, #0xbd74e0
    // 0xbd7428: ldr             x2, [fp, #0x18]
    // 0xbd742c: ldr             x1, [fp, #0x10]
    // 0xbd7430: LoadField: r0 = r1->field_53
    //     0xbd7430: ldur            w0, [x1, #0x53]
    // 0xbd7434: DecompressPointer r0
    //     0xbd7434: add             x0, x0, HEAP, lsl #32
    // 0xbd7438: LoadField: r3 = r2->field_53
    //     0xbd7438: ldur            w3, [x2, #0x53]
    // 0xbd743c: DecompressPointer r3
    //     0xbd743c: add             x3, x3, HEAP, lsl #32
    // 0xbd7440: r4 = LoadClassIdInstr(r0)
    //     0xbd7440: ldur            x4, [x0, #-1]
    //     0xbd7444: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7448: stp             x3, x0, [SP]
    // 0xbd744c: mov             x0, x4
    // 0xbd7450: mov             lr, x0
    // 0xbd7454: ldr             lr, [x21, lr, lsl #3]
    // 0xbd7458: blr             lr
    // 0xbd745c: tbnz            w0, #4, #0xbd74e0
    // 0xbd7460: ldr             x2, [fp, #0x18]
    // 0xbd7464: ldr             x1, [fp, #0x10]
    // 0xbd7468: LoadField: r0 = r1->field_57
    //     0xbd7468: ldur            w0, [x1, #0x57]
    // 0xbd746c: DecompressPointer r0
    //     0xbd746c: add             x0, x0, HEAP, lsl #32
    // 0xbd7470: LoadField: r3 = r2->field_57
    //     0xbd7470: ldur            w3, [x2, #0x57]
    // 0xbd7474: DecompressPointer r3
    //     0xbd7474: add             x3, x3, HEAP, lsl #32
    // 0xbd7478: cmp             w0, w3
    // 0xbd747c: b.ne            #0xbd74e0
    // 0xbd7480: LoadField: r0 = r1->field_5b
    //     0xbd7480: ldur            w0, [x1, #0x5b]
    // 0xbd7484: DecompressPointer r0
    //     0xbd7484: add             x0, x0, HEAP, lsl #32
    // 0xbd7488: LoadField: r3 = r2->field_5b
    //     0xbd7488: ldur            w3, [x2, #0x5b]
    // 0xbd748c: DecompressPointer r3
    //     0xbd748c: add             x3, x3, HEAP, lsl #32
    // 0xbd7490: r4 = LoadClassIdInstr(r0)
    //     0xbd7490: ldur            x4, [x0, #-1]
    //     0xbd7494: ubfx            x4, x4, #0xc, #0x14
    // 0xbd7498: stp             x3, x0, [SP]
    // 0xbd749c: mov             x0, x4
    // 0xbd74a0: mov             lr, x0
    // 0xbd74a4: ldr             lr, [x21, lr, lsl #3]
    // 0xbd74a8: blr             lr
    // 0xbd74ac: tbnz            w0, #4, #0xbd74e0
    // 0xbd74b0: ldr             x2, [fp, #0x18]
    // 0xbd74b4: ldr             x1, [fp, #0x10]
    // 0xbd74b8: LoadField: r3 = r1->field_5f
    //     0xbd74b8: ldur            w3, [x1, #0x5f]
    // 0xbd74bc: DecompressPointer r3
    //     0xbd74bc: add             x3, x3, HEAP, lsl #32
    // 0xbd74c0: LoadField: r1 = r2->field_5f
    //     0xbd74c0: ldur            w1, [x2, #0x5f]
    // 0xbd74c4: DecompressPointer r1
    //     0xbd74c4: add             x1, x1, HEAP, lsl #32
    // 0xbd74c8: cmp             w3, w1
    // 0xbd74cc: r16 = true
    //     0xbd74cc: add             x16, NULL, #0x20  ; true
    // 0xbd74d0: r17 = false
    //     0xbd74d0: add             x17, NULL, #0x30  ; false
    // 0xbd74d4: csel            x2, x16, x17, eq
    // 0xbd74d8: mov             x0, x2
    // 0xbd74dc: b               #0xbd74e4
    // 0xbd74e0: r0 = false
    //     0xbd74e0: add             x0, NULL, #0x30  ; false
    // 0xbd74e4: LeaveFrame
    //     0xbd74e4: mov             SP, fp
    //     0xbd74e8: ldp             fp, lr, [SP], #0x10
    // 0xbd74ec: ret
    //     0xbd74ec: ret             
    // 0xbd74f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbd74f0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbd74f4: b               #0xbd70ec
  }
}

// class id: 2330, size: 0x10, field offset: 0x8
//   const constructor, 
class FloatingLabelAlignment extends Object {

  _Double field_8;

  get _ hashCode(/* No info */) {
    // ** addr: 0xadcdd4, size: 0x58
    // 0xadcdd4: d0 = -1.000000
    //     0xadcdd4: fmov            d0, #-1.00000000
    // 0xadcdd8: mov             x16, v0.d[0]
    // 0xadcddc: and             x16, x16, #0x7ff0000000000000
    // 0xadcde0: r17 = 9218868437227405312
    //     0xadcde0: orr             x17, xzr, #0x7ff0000000000000
    // 0xadcde4: cmp             x16, x17
    // 0xadcde8: b.eq            #0xadce18
    // 0xadcdec: fcvtzs          x16, d0
    // 0xadcdf0: scvtf           d1, x16
    // 0xadcdf4: fcmp            d1, d0
    // 0xadcdf8: b.ne            #0xadce18
    // 0xadcdfc: r17 = 11601
    //     0xadcdfc: movz            x17, #0x2d51
    // 0xadce00: mul             x1, x16, x17
    // 0xadce04: umulh           x16, x16, x17
    // 0xadce08: eor             x1, x1, x16
    // 0xadce0c: r1 = 0
    //     0xadce0c: eor             x1, x1, x1, lsr #32
    // 0xadce10: and             x1, x1, #0x3fffffff
    // 0xadce14: b               #0xadce24
    // 0xadce18: r1 = 0.000000
    //     0xadce18: fmov            x1, d0
    // 0xadce1c: r1 = 0
    //     0xadce1c: eor             x1, x1, x1, lsr #32
    // 0xadce20: and             x1, x1, #0x3fffffff
    // 0xadce24: lsl             x0, x1, #1
    // 0xadce28: ret
    //     0xadce28: ret             
  }
  _ toString(/* No info */) {
    // ** addr: 0xaf8c28, size: 0x2c
    // 0xaf8c28: EnterFrame
    //     0xaf8c28: stp             fp, lr, [SP, #-0x10]!
    //     0xaf8c2c: mov             fp, SP
    // 0xaf8c30: CheckStackOverflow
    //     0xaf8c30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xaf8c34: cmp             SP, x16
    //     0xaf8c38: b.ls            #0xaf8c4c
    // 0xaf8c3c: r0 = _stringify()
    //     0xaf8c3c: bl              #0xaf8c54  ; [package:flutter/src/material/input_decorator.dart] FloatingLabelAlignment::_stringify
    // 0xaf8c40: LeaveFrame
    //     0xaf8c40: mov             SP, fp
    //     0xaf8c44: ldp             fp, lr, [SP], #0x10
    // 0xaf8c48: ret
    //     0xaf8c48: ret             
    // 0xaf8c4c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xaf8c4c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xaf8c50: b               #0xaf8c3c
  }
  static String _stringify() {
    // ** addr: 0xaf8c54, size: 0xec
    // 0xaf8c54: EnterFrame
    //     0xaf8c54: stp             fp, lr, [SP, #-0x10]!
    //     0xaf8c58: mov             fp, SP
    // 0xaf8c5c: AllocStack(0x18)
    //     0xaf8c5c: sub             SP, SP, #0x18
    // 0xaf8c60: d1 = 1.000000
    //     0xaf8c60: fmov            d1, #1.00000000
    // 0xaf8c64: d0 = -1.000000
    //     0xaf8c64: fmov            d0, #-1.00000000
    // 0xaf8c68: CheckStackOverflow
    //     0xaf8c68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xaf8c6c: cmp             SP, x16
    //     0xaf8c70: b.ls            #0xaf8d38
    // 0xaf8c74: fneg            d2, d1
    // 0xaf8c78: fcmp            d0, d2
    // 0xaf8c7c: b.vs            #0xaf8c98
    // 0xaf8c80: b.ne            #0xaf8c98
    // 0xaf8c84: r0 = "FloatingLabelAlignment.start"
    //     0xaf8c84: add             x0, PP, #0xf, lsl #12  ; [pp+0xf6a8] "FloatingLabelAlignment.start"
    //     0xaf8c88: ldr             x0, [x0, #0x6a8]
    // 0xaf8c8c: LeaveFrame
    //     0xaf8c8c: mov             SP, fp
    //     0xaf8c90: ldp             fp, lr, [SP], #0x10
    // 0xaf8c94: ret
    //     0xaf8c94: ret             
    // 0xaf8c98: d1 = 0.000000
    //     0xaf8c98: eor             v1.16b, v1.16b, v1.16b
    // 0xaf8c9c: fcmp            d0, d1
    // 0xaf8ca0: b.vs            #0xaf8cbc
    // 0xaf8ca4: b.ne            #0xaf8cbc
    // 0xaf8ca8: r0 = "FloatingLabelAlignment.center"
    //     0xaf8ca8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf6b0] "FloatingLabelAlignment.center"
    //     0xaf8cac: ldr             x0, [x0, #0x6b0]
    // 0xaf8cb0: LeaveFrame
    //     0xaf8cb0: mov             SP, fp
    //     0xaf8cb4: ldp             fp, lr, [SP], #0x10
    // 0xaf8cb8: ret
    //     0xaf8cb8: ret             
    // 0xaf8cbc: r1 = Null
    //     0xaf8cbc: mov             x1, NULL
    // 0xaf8cc0: r2 = 6
    //     0xaf8cc0: movz            x2, #0x6
    // 0xaf8cc4: r0 = AllocateArray()
    //     0xaf8cc4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xaf8cc8: stur            x0, [fp, #-8]
    // 0xaf8ccc: r17 = "FloatingLabelAlignment(x: "
    //     0xaf8ccc: add             x17, PP, #0xf, lsl #12  ; [pp+0xf6b8] "FloatingLabelAlignment(x: "
    //     0xaf8cd0: ldr             x17, [x17, #0x6b8]
    // 0xaf8cd4: StoreField: r0->field_f = r17
    //     0xaf8cd4: stur            w17, [x0, #0xf]
    // 0xaf8cd8: r16 = -1.000000
    //     0xaf8cd8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf6c0] -1
    //     0xaf8cdc: ldr             x16, [x16, #0x6c0]
    // 0xaf8ce0: str             x16, [SP, #8]
    // 0xaf8ce4: r1 = 1
    //     0xaf8ce4: movz            x1, #0x1
    // 0xaf8ce8: str             x1, [SP]
    // 0xaf8cec: r0 = toStringAsFixed()
    //     0xaf8cec: bl              #0x62504c  ; [dart:core] _Double::toStringAsFixed
    // 0xaf8cf0: ldur            x1, [fp, #-8]
    // 0xaf8cf4: ArrayStore: r1[1] = r0  ; List_4
    //     0xaf8cf4: add             x25, x1, #0x13
    //     0xaf8cf8: str             w0, [x25]
    //     0xaf8cfc: tbz             w0, #0, #0xaf8d18
    //     0xaf8d00: ldurb           w16, [x1, #-1]
    //     0xaf8d04: ldurb           w17, [x0, #-1]
    //     0xaf8d08: and             x16, x17, x16, lsr #2
    //     0xaf8d0c: tst             x16, HEAP, lsr #32
    //     0xaf8d10: b.eq            #0xaf8d18
    //     0xaf8d14: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0xaf8d18: ldur            x0, [fp, #-8]
    // 0xaf8d1c: r17 = ")"
    //     0xaf8d1c: ldr             x17, [PP, #0x2d20]  ; [pp+0x2d20] ")"
    // 0xaf8d20: ArrayStore: r0[0] = r17  ; List_4
    //     0xaf8d20: stur            w17, [x0, #0x17]
    // 0xaf8d24: str             x0, [SP]
    // 0xaf8d28: r0 = _interpolate()
    //     0xaf8d28: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xaf8d2c: LeaveFrame
    //     0xaf8d2c: mov             SP, fp
    //     0xaf8d30: ldp             fp, lr, [SP], #0x10
    // 0xaf8d34: ret
    //     0xaf8d34: ret             
    // 0xaf8d38: r0 = StackOverflowSharedWithFPURegs()
    //     0xaf8d38: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xaf8d3c: b               #0xaf8c74
  }
  _ ==(/* No info */) {
    // ** addr: 0xbd6fc8, size: 0x10c
    // 0xbd6fc8: EnterFrame
    //     0xbd6fc8: stp             fp, lr, [SP, #-0x10]!
    //     0xbd6fcc: mov             fp, SP
    // 0xbd6fd0: AllocStack(0x10)
    //     0xbd6fd0: sub             SP, SP, #0x10
    // 0xbd6fd4: CheckStackOverflow
    //     0xbd6fd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbd6fd8: cmp             SP, x16
    //     0xbd6fdc: b.ls            #0xbd70cc
    // 0xbd6fe0: ldr             x1, [fp, #0x10]
    // 0xbd6fe4: cmp             w1, NULL
    // 0xbd6fe8: b.ne            #0xbd6ffc
    // 0xbd6fec: r0 = false
    //     0xbd6fec: add             x0, NULL, #0x30  ; false
    // 0xbd6ff0: LeaveFrame
    //     0xbd6ff0: mov             SP, fp
    //     0xbd6ff4: ldp             fp, lr, [SP], #0x10
    // 0xbd6ff8: ret
    //     0xbd6ff8: ret             
    // 0xbd6ffc: ldr             x0, [fp, #0x18]
    // 0xbd7000: cmp             w0, w1
    // 0xbd7004: b.ne            #0xbd7018
    // 0xbd7008: r0 = true
    //     0xbd7008: add             x0, NULL, #0x20  ; true
    // 0xbd700c: LeaveFrame
    //     0xbd700c: mov             SP, fp
    //     0xbd7010: ldp             fp, lr, [SP], #0x10
    // 0xbd7014: ret
    //     0xbd7014: ret             
    // 0xbd7018: r0 = 59
    //     0xbd7018: movz            x0, #0x3b
    // 0xbd701c: branchIfSmi(r1, 0xbd7028)
    //     0xbd701c: tbz             w1, #0, #0xbd7028
    // 0xbd7020: r0 = LoadClassIdInstr(r1)
    //     0xbd7020: ldur            x0, [x1, #-1]
    //     0xbd7024: ubfx            x0, x0, #0xc, #0x14
    // 0xbd7028: str             x1, [SP]
    // 0xbd702c: r0 = GDT[cid_x0 + 0x55ae]()
    //     0xbd702c: movz            x17, #0x55ae
    //     0xbd7030: add             lr, x0, x17
    //     0xbd7034: ldr             lr, [x21, lr, lsl #3]
    //     0xbd7038: blr             lr
    // 0xbd703c: r1 = LoadClassIdInstr(r0)
    //     0xbd703c: ldur            x1, [x0, #-1]
    //     0xbd7040: ubfx            x1, x1, #0xc, #0x14
    // 0xbd7044: r16 = FloatingLabelAlignment
    //     0xbd7044: add             x16, PP, #0xf, lsl #12  ; [pp+0xf6c8] Type: FloatingLabelAlignment
    //     0xbd7048: ldr             x16, [x16, #0x6c8]
    // 0xbd704c: stp             x16, x0, [SP]
    // 0xbd7050: mov             x0, x1
    // 0xbd7054: mov             lr, x0
    // 0xbd7058: ldr             lr, [x21, lr, lsl #3]
    // 0xbd705c: blr             lr
    // 0xbd7060: tbz             w0, #4, #0xbd7074
    // 0xbd7064: r0 = false
    //     0xbd7064: add             x0, NULL, #0x30  ; false
    // 0xbd7068: LeaveFrame
    //     0xbd7068: mov             SP, fp
    //     0xbd706c: ldp             fp, lr, [SP], #0x10
    // 0xbd7070: ret
    //     0xbd7070: ret             
    // 0xbd7074: ldr             x1, [fp, #0x10]
    // 0xbd7078: r2 = LoadTaggedClassIdMayBeSmiInstr(r1)
    //     0xbd7078: movz            x2, #0x76
    //     0xbd707c: tbz             w1, #0, #0xbd708c
    //     0xbd7080: ldur            x2, [x1, #-1]
    //     0xbd7084: ubfx            x2, x2, #0xc, #0x14
    //     0xbd7088: lsl             x2, x2, #1
    // 0xbd708c: r17 = 4660
    //     0xbd708c: movz            x17, #0x1234
    // 0xbd7090: cmp             w2, w17
    // 0xbd7094: b.ne            #0xbd70bc
    // 0xbd7098: d0 = -1.000000
    //     0xbd7098: fmov            d0, #-1.00000000
    // 0xbd709c: fcmp            d0, d0
    // 0xbd70a0: b.vs            #0xbd70a8
    // 0xbd70a4: b.eq            #0xbd70b0
    // 0xbd70a8: r1 = false
    //     0xbd70a8: add             x1, NULL, #0x30  ; false
    // 0xbd70ac: b               #0xbd70b4
    // 0xbd70b0: r1 = true
    //     0xbd70b0: add             x1, NULL, #0x20  ; true
    // 0xbd70b4: mov             x0, x1
    // 0xbd70b8: b               #0xbd70c0
    // 0xbd70bc: r0 = false
    //     0xbd70bc: add             x0, NULL, #0x30  ; false
    // 0xbd70c0: LeaveFrame
    //     0xbd70c0: mov             SP, fp
    //     0xbd70c4: ldp             fp, lr, [SP], #0x10
    // 0xbd70c8: ret
    //     0xbd70c8: ret             
    // 0xbd70cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbd70cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbd70d0: b               #0xbd6fe0
  }
}

// class id: 2762, size: 0x88, field offset: 0x8
//   const constructor, 
class InputDecorationTheme extends _DiagnosticableTree&Object&Diagnosticable {

  FloatingLabelBehavior field_24;
  FloatingLabelAlignment field_28;
  bool field_2c;
  bool field_34;
  bool field_50;
  bool field_80;

  get _ hashCode(/* No info */) {
    // ** addr: 0xad5bf4, size: 0x7a0
    // 0xad5bf4: EnterFrame
    //     0xad5bf4: stp             fp, lr, [SP, #-0x10]!
    //     0xad5bf8: mov             fp, SP
    // 0xad5bfc: AllocStack(0xf8)
    //     0xad5bfc: sub             SP, SP, #0xf8
    // 0xad5c00: CheckStackOverflow
    //     0xad5c00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xad5c04: cmp             SP, x16
    //     0xad5c08: b.ls            #0xad638c
    // 0xad5c0c: ldr             x1, [fp, #0x10]
    // 0xad5c10: r0 = LoadClassIdInstr(r1)
    //     0xad5c10: ldur            x0, [x1, #-1]
    //     0xad5c14: ubfx            x0, x0, #0xc, #0x14
    // 0xad5c18: lsl             x0, x0, #1
    // 0xad5c1c: stur            x0, [fp, #-8]
    // 0xad5c20: r17 = 5524
    //     0xad5c20: movz            x17, #0x1594
    // 0xad5c24: cmp             w0, w17
    // 0xad5c28: b.ne            #0xad5c3c
    // 0xad5c2c: LoadField: r2 = r1->field_7
    //     0xad5c2c: ldur            w2, [x1, #7]
    // 0xad5c30: DecompressPointer r2
    //     0xad5c30: add             x2, x2, HEAP, lsl #32
    // 0xad5c34: mov             x1, x2
    // 0xad5c38: b               #0xad5cb4
    // 0xad5c3c: r17 = 5526
    //     0xad5c3c: movz            x17, #0x1596
    // 0xad5c40: cmp             w0, w17
    // 0xad5c44: b.ne            #0xad5c80
    // 0xad5c48: r1 = 1
    //     0xad5c48: movz            x1, #0x1
    // 0xad5c4c: r0 = AllocateContext()
    //     0xad5c4c: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5c50: mov             x1, x0
    // 0xad5c54: ldr             x0, [fp, #0x10]
    // 0xad5c58: StoreField: r1->field_f = r0
    //     0xad5c58: stur            w0, [x1, #0xf]
    // 0xad5c5c: mov             x2, x1
    // 0xad5c60: r1 = Function '<anonymous closure>':.
    //     0xad5c60: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5b8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad5c64: ldr             x1, [x1, #0x5b8]
    // 0xad5c68: r0 = AllocateClosure()
    //     0xad5c68: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5c6c: str             x0, [SP]
    // 0xad5c70: r0 = resolveWith()
    //     0xad5c70: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5c74: mov             x1, x0
    // 0xad5c78: ldur            x0, [fp, #-8]
    // 0xad5c7c: b               #0xad5cb4
    // 0xad5c80: r1 = 1
    //     0xad5c80: movz            x1, #0x1
    // 0xad5c84: r0 = AllocateContext()
    //     0xad5c84: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5c88: mov             x1, x0
    // 0xad5c8c: ldr             x0, [fp, #0x10]
    // 0xad5c90: StoreField: r1->field_f = r0
    //     0xad5c90: stur            w0, [x1, #0xf]
    // 0xad5c94: mov             x2, x1
    // 0xad5c98: r1 = Function '<anonymous closure>':.
    //     0xad5c98: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5c9c: ldr             x1, [x1, #0x5c0]
    // 0xad5ca0: r0 = AllocateClosure()
    //     0xad5ca0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5ca4: str             x0, [SP]
    // 0xad5ca8: r0 = resolveWith()
    //     0xad5ca8: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5cac: mov             x1, x0
    // 0xad5cb0: ldur            x0, [fp, #-8]
    // 0xad5cb4: stur            x1, [fp, #-0x10]
    // 0xad5cb8: r17 = 5524
    //     0xad5cb8: movz            x17, #0x1594
    // 0xad5cbc: cmp             w0, w17
    // 0xad5cc0: b.ne            #0xad5cd8
    // 0xad5cc4: ldr             x2, [fp, #0x10]
    // 0xad5cc8: LoadField: r3 = r2->field_b
    //     0xad5cc8: ldur            w3, [x2, #0xb]
    // 0xad5ccc: DecompressPointer r3
    //     0xad5ccc: add             x3, x3, HEAP, lsl #32
    // 0xad5cd0: mov             x1, x3
    // 0xad5cd4: b               #0xad5d58
    // 0xad5cd8: ldr             x2, [fp, #0x10]
    // 0xad5cdc: r17 = 5526
    //     0xad5cdc: movz            x17, #0x1596
    // 0xad5ce0: cmp             w0, w17
    // 0xad5ce4: b.ne            #0xad5d20
    // 0xad5ce8: r1 = 1
    //     0xad5ce8: movz            x1, #0x1
    // 0xad5cec: r0 = AllocateContext()
    //     0xad5cec: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5cf0: mov             x1, x0
    // 0xad5cf4: ldr             x0, [fp, #0x10]
    // 0xad5cf8: StoreField: r1->field_f = r0
    //     0xad5cf8: stur            w0, [x1, #0xf]
    // 0xad5cfc: mov             x2, x1
    // 0xad5d00: r1 = Function '<anonymous closure>':.
    //     0xad5d00: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad5d04: ldr             x1, [x1, #0x5c8]
    // 0xad5d08: r0 = AllocateClosure()
    //     0xad5d08: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5d0c: str             x0, [SP]
    // 0xad5d10: r0 = resolveWith()
    //     0xad5d10: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5d14: mov             x1, x0
    // 0xad5d18: ldur            x0, [fp, #-8]
    // 0xad5d1c: b               #0xad5d58
    // 0xad5d20: mov             x1, x2
    // 0xad5d24: r1 = 1
    //     0xad5d24: movz            x1, #0x1
    // 0xad5d28: r0 = AllocateContext()
    //     0xad5d28: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5d2c: mov             x1, x0
    // 0xad5d30: ldr             x0, [fp, #0x10]
    // 0xad5d34: StoreField: r1->field_f = r0
    //     0xad5d34: stur            w0, [x1, #0xf]
    // 0xad5d38: mov             x2, x1
    // 0xad5d3c: r1 = Function '<anonymous closure>':.
    //     0xad5d3c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d0] AnonymousClosure: (0xad6394), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5d40: ldr             x1, [x1, #0x5d0]
    // 0xad5d44: r0 = AllocateClosure()
    //     0xad5d44: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5d48: str             x0, [SP]
    // 0xad5d4c: r0 = resolveWith()
    //     0xad5d4c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5d50: mov             x1, x0
    // 0xad5d54: ldur            x0, [fp, #-8]
    // 0xad5d58: stur            x1, [fp, #-0x18]
    // 0xad5d5c: r17 = 5524
    //     0xad5d5c: movz            x17, #0x1594
    // 0xad5d60: cmp             w0, w17
    // 0xad5d64: b.ne            #0xad5d7c
    // 0xad5d68: ldr             x2, [fp, #0x10]
    // 0xad5d6c: LoadField: r3 = r2->field_f
    //     0xad5d6c: ldur            w3, [x2, #0xf]
    // 0xad5d70: DecompressPointer r3
    //     0xad5d70: add             x3, x3, HEAP, lsl #32
    // 0xad5d74: mov             x1, x3
    // 0xad5d78: b               #0xad5dfc
    // 0xad5d7c: ldr             x2, [fp, #0x10]
    // 0xad5d80: r17 = 5526
    //     0xad5d80: movz            x17, #0x1596
    // 0xad5d84: cmp             w0, w17
    // 0xad5d88: b.ne            #0xad5dc4
    // 0xad5d8c: r1 = 1
    //     0xad5d8c: movz            x1, #0x1
    // 0xad5d90: r0 = AllocateContext()
    //     0xad5d90: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5d94: mov             x1, x0
    // 0xad5d98: ldr             x0, [fp, #0x10]
    // 0xad5d9c: StoreField: r1->field_f = r0
    //     0xad5d9c: stur            w0, [x1, #0xf]
    // 0xad5da0: mov             x2, x1
    // 0xad5da4: r1 = Function '<anonymous closure>':.
    //     0xad5da4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d8] AnonymousClosure: (0x93ed74), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad5da8: ldr             x1, [x1, #0x5d8]
    // 0xad5dac: r0 = AllocateClosure()
    //     0xad5dac: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5db0: str             x0, [SP]
    // 0xad5db4: r0 = resolveWith()
    //     0xad5db4: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5db8: mov             x1, x0
    // 0xad5dbc: ldur            x0, [fp, #-8]
    // 0xad5dc0: b               #0xad5dfc
    // 0xad5dc4: mov             x1, x2
    // 0xad5dc8: r1 = 1
    //     0xad5dc8: movz            x1, #0x1
    // 0xad5dcc: r0 = AllocateContext()
    //     0xad5dcc: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5dd0: mov             x1, x0
    // 0xad5dd4: ldr             x0, [fp, #0x10]
    // 0xad5dd8: StoreField: r1->field_f = r0
    //     0xad5dd8: stur            w0, [x1, #0xf]
    // 0xad5ddc: mov             x2, x1
    // 0xad5de0: r1 = Function '<anonymous closure>':.
    //     0xad5de0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e0] AnonymousClosure: (0x93ec6c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5de4: ldr             x1, [x1, #0x5e0]
    // 0xad5de8: r0 = AllocateClosure()
    //     0xad5de8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5dec: str             x0, [SP]
    // 0xad5df0: r0 = resolveWith()
    //     0xad5df0: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5df4: mov             x1, x0
    // 0xad5df8: ldur            x0, [fp, #-8]
    // 0xad5dfc: stur            x1, [fp, #-0x20]
    // 0xad5e00: r17 = 5524
    //     0xad5e00: movz            x17, #0x1594
    // 0xad5e04: cmp             w0, w17
    // 0xad5e08: b.ne            #0xad5e20
    // 0xad5e0c: ldr             x2, [fp, #0x10]
    // 0xad5e10: ArrayLoad: r3 = r2[0]  ; List_4
    //     0xad5e10: ldur            w3, [x2, #0x17]
    // 0xad5e14: DecompressPointer r3
    //     0xad5e14: add             x3, x3, HEAP, lsl #32
    // 0xad5e18: mov             x1, x3
    // 0xad5e1c: b               #0xad5ea0
    // 0xad5e20: ldr             x2, [fp, #0x10]
    // 0xad5e24: r17 = 5526
    //     0xad5e24: movz            x17, #0x1596
    // 0xad5e28: cmp             w0, w17
    // 0xad5e2c: b.ne            #0xad5e68
    // 0xad5e30: r1 = 1
    //     0xad5e30: movz            x1, #0x1
    // 0xad5e34: r0 = AllocateContext()
    //     0xad5e34: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5e38: mov             x1, x0
    // 0xad5e3c: ldr             x0, [fp, #0x10]
    // 0xad5e40: StoreField: r1->field_f = r0
    //     0xad5e40: stur            w0, [x1, #0xf]
    // 0xad5e44: mov             x2, x1
    // 0xad5e48: r1 = Function '<anonymous closure>':.
    //     0xad5e48: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e8] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5e4c: ldr             x1, [x1, #0x5e8]
    // 0xad5e50: r0 = AllocateClosure()
    //     0xad5e50: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5e54: str             x0, [SP]
    // 0xad5e58: r0 = resolveWith()
    //     0xad5e58: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5e5c: mov             x1, x0
    // 0xad5e60: ldur            x0, [fp, #-8]
    // 0xad5e64: b               #0xad5ea0
    // 0xad5e68: mov             x1, x2
    // 0xad5e6c: r1 = 1
    //     0xad5e6c: movz            x1, #0x1
    // 0xad5e70: r0 = AllocateContext()
    //     0xad5e70: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5e74: mov             x1, x0
    // 0xad5e78: ldr             x0, [fp, #0x10]
    // 0xad5e7c: StoreField: r1->field_f = r0
    //     0xad5e7c: stur            w0, [x1, #0xf]
    // 0xad5e80: mov             x2, x1
    // 0xad5e84: r1 = Function '<anonymous closure>':.
    //     0xad5e84: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5e88: ldr             x1, [x1, #0x5f0]
    // 0xad5e8c: r0 = AllocateClosure()
    //     0xad5e8c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5e90: str             x0, [SP]
    // 0xad5e94: r0 = resolveWith()
    //     0xad5e94: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5e98: mov             x1, x0
    // 0xad5e9c: ldur            x0, [fp, #-8]
    // 0xad5ea0: stur            x1, [fp, #-0x28]
    // 0xad5ea4: r17 = 5524
    //     0xad5ea4: movz            x17, #0x1594
    // 0xad5ea8: cmp             w0, w17
    // 0xad5eac: b.ne            #0xad5ec4
    // 0xad5eb0: ldr             x2, [fp, #0x10]
    // 0xad5eb4: LoadField: r3 = r2->field_1b
    //     0xad5eb4: ldur            w3, [x2, #0x1b]
    // 0xad5eb8: DecompressPointer r3
    //     0xad5eb8: add             x3, x3, HEAP, lsl #32
    // 0xad5ebc: mov             x2, x3
    // 0xad5ec0: b               #0xad5f44
    // 0xad5ec4: ldr             x2, [fp, #0x10]
    // 0xad5ec8: r17 = 5526
    //     0xad5ec8: movz            x17, #0x1596
    // 0xad5ecc: cmp             w0, w17
    // 0xad5ed0: b.ne            #0xad5f0c
    // 0xad5ed4: r1 = 1
    //     0xad5ed4: movz            x1, #0x1
    // 0xad5ed8: r0 = AllocateContext()
    //     0xad5ed8: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5edc: mov             x1, x0
    // 0xad5ee0: ldr             x0, [fp, #0x10]
    // 0xad5ee4: StoreField: r1->field_f = r0
    //     0xad5ee4: stur            w0, [x1, #0xf]
    // 0xad5ee8: mov             x2, x1
    // 0xad5eec: r1 = Function '<anonymous closure>':.
    //     0xad5eec: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f8] AnonymousClosure: (0x93e9d8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad5ef0: ldr             x1, [x1, #0x5f8]
    // 0xad5ef4: r0 = AllocateClosure()
    //     0xad5ef4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5ef8: str             x0, [SP]
    // 0xad5efc: r0 = resolveWith()
    //     0xad5efc: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5f00: mov             x2, x0
    // 0xad5f04: ldur            x0, [fp, #-8]
    // 0xad5f08: b               #0xad5f44
    // 0xad5f0c: mov             x1, x2
    // 0xad5f10: r1 = 1
    //     0xad5f10: movz            x1, #0x1
    // 0xad5f14: r0 = AllocateContext()
    //     0xad5f14: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5f18: mov             x1, x0
    // 0xad5f1c: ldr             x0, [fp, #0x10]
    // 0xad5f20: StoreField: r1->field_f = r0
    //     0xad5f20: stur            w0, [x1, #0xf]
    // 0xad5f24: mov             x2, x1
    // 0xad5f28: r1 = Function '<anonymous closure>':.
    //     0xad5f28: add             x1, PP, #0xf, lsl #12  ; [pp+0xf600] AnonymousClosure: (0x93e8c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5f2c: ldr             x1, [x1, #0x600]
    // 0xad5f30: r0 = AllocateClosure()
    //     0xad5f30: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5f34: str             x0, [SP]
    // 0xad5f38: r0 = resolveWith()
    //     0xad5f38: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xad5f3c: mov             x2, x0
    // 0xad5f40: ldur            x0, [fp, #-8]
    // 0xad5f44: stur            x2, [fp, #-0x30]
    // 0xad5f48: r17 = 5524
    //     0xad5f48: movz            x17, #0x1594
    // 0xad5f4c: cmp             w0, w17
    // 0xad5f50: b.ne            #0xad5f64
    // 0xad5f54: ldr             x3, [fp, #0x10]
    // 0xad5f58: LoadField: r1 = r3->field_37
    //     0xad5f58: ldur            w1, [x3, #0x37]
    // 0xad5f5c: DecompressPointer r1
    //     0xad5f5c: add             x1, x1, HEAP, lsl #32
    // 0xad5f60: b               #0xad6000
    // 0xad5f64: ldr             x3, [fp, #0x10]
    // 0xad5f68: r17 = 5526
    //     0xad5f68: movz            x17, #0x1596
    // 0xad5f6c: cmp             w0, w17
    // 0xad5f70: b.ne            #0xad5fc8
    // 0xad5f74: mov             x1, x3
    // 0xad5f78: LoadField: r0 = r1->field_8b
    //     0xad5f78: ldur            w0, [x1, #0x8b]
    // 0xad5f7c: DecompressPointer r0
    //     0xad5f7c: add             x0, x0, HEAP, lsl #32
    // 0xad5f80: r16 = Sentinel
    //     0xad5f80: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xad5f84: cmp             w0, w16
    // 0xad5f88: b.ne            #0xad5f98
    // 0xad5f8c: r2 = _colors
    //     0xad5f8c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0xad5f90: ldr             x2, [x2, #0x608]
    // 0xad5f94: r0 = InitLateFinalInstanceField()
    //     0xad5f94: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xad5f98: LoadField: r1 = r0->field_5f
    //     0xad5f98: ldur            w1, [x0, #0x5f]
    // 0xad5f9c: DecompressPointer r1
    //     0xad5f9c: add             x1, x1, HEAP, lsl #32
    // 0xad5fa0: cmp             w1, NULL
    // 0xad5fa4: b.ne            #0xad5fb8
    // 0xad5fa8: LoadField: r1 = r0->field_57
    //     0xad5fa8: ldur            w1, [x0, #0x57]
    // 0xad5fac: DecompressPointer r1
    //     0xad5fac: add             x1, x1, HEAP, lsl #32
    // 0xad5fb0: mov             x0, x1
    // 0xad5fb4: b               #0xad5fbc
    // 0xad5fb8: mov             x0, x1
    // 0xad5fbc: mov             x1, x0
    // 0xad5fc0: ldur            x0, [fp, #-8]
    // 0xad5fc4: b               #0xad6000
    // 0xad5fc8: mov             x0, x3
    // 0xad5fcc: r1 = 1
    //     0xad5fcc: movz            x1, #0x1
    // 0xad5fd0: r0 = AllocateContext()
    //     0xad5fd0: bl              #0xc5def4  ; AllocateContextStub
    // 0xad5fd4: mov             x1, x0
    // 0xad5fd8: ldr             x0, [fp, #0x10]
    // 0xad5fdc: StoreField: r1->field_f = r0
    //     0xad5fdc: stur            w0, [x1, #0xf]
    // 0xad5fe0: mov             x2, x1
    // 0xad5fe4: r1 = Function '<anonymous closure>':.
    //     0xad5fe4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf610] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad5fe8: ldr             x1, [x1, #0x610]
    // 0xad5fec: r0 = AllocateClosure()
    //     0xad5fec: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad5ff0: str             x0, [SP]
    // 0xad5ff4: r0 = resolveWith()
    //     0xad5ff4: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad5ff8: mov             x1, x0
    // 0xad5ffc: ldur            x0, [fp, #-8]
    // 0xad6000: stur            x1, [fp, #-0x38]
    // 0xad6004: r17 = 5524
    //     0xad6004: movz            x17, #0x1594
    // 0xad6008: cmp             w0, w17
    // 0xad600c: b.ne            #0xad6024
    // 0xad6010: ldr             x2, [fp, #0x10]
    // 0xad6014: LoadField: r3 = r2->field_3f
    //     0xad6014: ldur            w3, [x2, #0x3f]
    // 0xad6018: DecompressPointer r3
    //     0xad6018: add             x3, x3, HEAP, lsl #32
    // 0xad601c: mov             x1, x3
    // 0xad6020: b               #0xad60a4
    // 0xad6024: ldr             x2, [fp, #0x10]
    // 0xad6028: r17 = 5526
    //     0xad6028: movz            x17, #0x1596
    // 0xad602c: cmp             w0, w17
    // 0xad6030: b.ne            #0xad606c
    // 0xad6034: r1 = 1
    //     0xad6034: movz            x1, #0x1
    // 0xad6038: r0 = AllocateContext()
    //     0xad6038: bl              #0xc5def4  ; AllocateContextStub
    // 0xad603c: mov             x1, x0
    // 0xad6040: ldr             x0, [fp, #0x10]
    // 0xad6044: StoreField: r1->field_f = r0
    //     0xad6044: stur            w0, [x1, #0xf]
    // 0xad6048: mov             x2, x1
    // 0xad604c: r1 = Function '<anonymous closure>':.
    //     0xad604c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf618] AnonymousClosure: (0x93f5c4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad6050: ldr             x1, [x1, #0x618]
    // 0xad6054: r0 = AllocateClosure()
    //     0xad6054: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad6058: str             x0, [SP]
    // 0xad605c: r0 = resolveWith()
    //     0xad605c: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad6060: mov             x1, x0
    // 0xad6064: ldur            x0, [fp, #-8]
    // 0xad6068: b               #0xad60a4
    // 0xad606c: mov             x0, x2
    // 0xad6070: r1 = 1
    //     0xad6070: movz            x1, #0x1
    // 0xad6074: r0 = AllocateContext()
    //     0xad6074: bl              #0xc5def4  ; AllocateContextStub
    // 0xad6078: mov             x1, x0
    // 0xad607c: ldr             x0, [fp, #0x10]
    // 0xad6080: StoreField: r1->field_f = r0
    //     0xad6080: stur            w0, [x1, #0xf]
    // 0xad6084: mov             x2, x1
    // 0xad6088: r1 = Function '<anonymous closure>':.
    //     0xad6088: add             x1, PP, #0xf, lsl #12  ; [pp+0xf620] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad608c: ldr             x1, [x1, #0x620]
    // 0xad6090: r0 = AllocateClosure()
    //     0xad6090: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad6094: str             x0, [SP]
    // 0xad6098: r0 = resolveWith()
    //     0xad6098: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad609c: mov             x1, x0
    // 0xad60a0: ldur            x0, [fp, #-8]
    // 0xad60a4: stur            x1, [fp, #-0x40]
    // 0xad60a8: r17 = 5524
    //     0xad60a8: movz            x17, #0x1594
    // 0xad60ac: cmp             w0, w17
    // 0xad60b0: b.ne            #0xad60c8
    // 0xad60b4: ldr             x2, [fp, #0x10]
    // 0xad60b8: LoadField: r3 = r2->field_47
    //     0xad60b8: ldur            w3, [x2, #0x47]
    // 0xad60bc: DecompressPointer r3
    //     0xad60bc: add             x3, x3, HEAP, lsl #32
    // 0xad60c0: mov             x1, x3
    // 0xad60c4: b               #0xad6148
    // 0xad60c8: ldr             x2, [fp, #0x10]
    // 0xad60cc: r17 = 5526
    //     0xad60cc: movz            x17, #0x1596
    // 0xad60d0: cmp             w0, w17
    // 0xad60d4: b.ne            #0xad6110
    // 0xad60d8: r1 = 1
    //     0xad60d8: movz            x1, #0x1
    // 0xad60dc: r0 = AllocateContext()
    //     0xad60dc: bl              #0xc5def4  ; AllocateContextStub
    // 0xad60e0: mov             x1, x0
    // 0xad60e4: ldr             x0, [fp, #0x10]
    // 0xad60e8: StoreField: r1->field_f = r0
    //     0xad60e8: stur            w0, [x1, #0xf]
    // 0xad60ec: mov             x2, x1
    // 0xad60f0: r1 = Function '<anonymous closure>':.
    //     0xad60f0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf628] AnonymousClosure: (0x93f2f4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad60f4: ldr             x1, [x1, #0x628]
    // 0xad60f8: r0 = AllocateClosure()
    //     0xad60f8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad60fc: str             x0, [SP]
    // 0xad6100: r0 = resolveWith()
    //     0xad6100: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad6104: mov             x1, x0
    // 0xad6108: ldur            x0, [fp, #-8]
    // 0xad610c: b               #0xad6148
    // 0xad6110: mov             x0, x2
    // 0xad6114: r1 = 1
    //     0xad6114: movz            x1, #0x1
    // 0xad6118: r0 = AllocateContext()
    //     0xad6118: bl              #0xc5def4  ; AllocateContextStub
    // 0xad611c: mov             x1, x0
    // 0xad6120: ldr             x0, [fp, #0x10]
    // 0xad6124: StoreField: r1->field_f = r0
    //     0xad6124: stur            w0, [x1, #0xf]
    // 0xad6128: mov             x2, x1
    // 0xad612c: r1 = Function '<anonymous closure>':.
    //     0xad612c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf630] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad6130: ldr             x1, [x1, #0x630]
    // 0xad6134: r0 = AllocateClosure()
    //     0xad6134: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad6138: str             x0, [SP]
    // 0xad613c: r0 = resolveWith()
    //     0xad613c: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad6140: mov             x1, x0
    // 0xad6144: ldur            x0, [fp, #-8]
    // 0xad6148: stur            x1, [fp, #-0x48]
    // 0xad614c: r17 = 5524
    //     0xad614c: movz            x17, #0x1594
    // 0xad6150: cmp             w0, w17
    // 0xad6154: b.ne            #0xad616c
    // 0xad6158: ldr             x2, [fp, #0x10]
    // 0xad615c: LoadField: r3 = r2->field_53
    //     0xad615c: ldur            w3, [x2, #0x53]
    // 0xad6160: DecompressPointer r3
    //     0xad6160: add             x3, x3, HEAP, lsl #32
    // 0xad6164: mov             x1, x3
    // 0xad6168: b               #0xad61ec
    // 0xad616c: ldr             x2, [fp, #0x10]
    // 0xad6170: r17 = 5526
    //     0xad6170: movz            x17, #0x1596
    // 0xad6174: cmp             w0, w17
    // 0xad6178: b.ne            #0xad61b4
    // 0xad617c: r1 = 1
    //     0xad617c: movz            x1, #0x1
    // 0xad6180: r0 = AllocateContext()
    //     0xad6180: bl              #0xc5def4  ; AllocateContextStub
    // 0xad6184: mov             x1, x0
    // 0xad6188: ldr             x0, [fp, #0x10]
    // 0xad618c: StoreField: r1->field_f = r0
    //     0xad618c: stur            w0, [x1, #0xf]
    // 0xad6190: mov             x2, x1
    // 0xad6194: r1 = Function '<anonymous closure>':.
    //     0xad6194: add             x1, PP, #0xf, lsl #12  ; [pp+0xf638] AnonymousClosure: (0x93fa4c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad6198: ldr             x1, [x1, #0x638]
    // 0xad619c: r0 = AllocateClosure()
    //     0xad619c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad61a0: str             x0, [SP]
    // 0xad61a4: r0 = resolveWith()
    //     0xad61a4: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad61a8: mov             x1, x0
    // 0xad61ac: ldur            x0, [fp, #-8]
    // 0xad61b0: b               #0xad61ec
    // 0xad61b4: mov             x0, x2
    // 0xad61b8: r1 = 1
    //     0xad61b8: movz            x1, #0x1
    // 0xad61bc: r0 = AllocateContext()
    //     0xad61bc: bl              #0xc5def4  ; AllocateContextStub
    // 0xad61c0: mov             x1, x0
    // 0xad61c4: ldr             x0, [fp, #0x10]
    // 0xad61c8: StoreField: r1->field_f = r0
    //     0xad61c8: stur            w0, [x1, #0xf]
    // 0xad61cc: mov             x2, x1
    // 0xad61d0: r1 = Function '<anonymous closure>':.
    //     0xad61d0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf640] AnonymousClosure: (0x93f928), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xad61d4: ldr             x1, [x1, #0x640]
    // 0xad61d8: r0 = AllocateClosure()
    //     0xad61d8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad61dc: str             x0, [SP]
    // 0xad61e0: r0 = resolveWith()
    //     0xad61e0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xad61e4: mov             x1, x0
    // 0xad61e8: ldur            x0, [fp, #-8]
    // 0xad61ec: stur            x1, [fp, #-0x50]
    // 0xad61f0: r17 = 5524
    //     0xad61f0: movz            x17, #0x1594
    // 0xad61f4: cmp             w0, w17
    // 0xad61f8: b.eq            #0xad6244
    // 0xad61fc: r17 = 5526
    //     0xad61fc: movz            x17, #0x1596
    // 0xad6200: cmp             w0, w17
    // 0xad6204: b.ne            #0xad6244
    // 0xad6208: ldr             x2, [fp, #0x10]
    // 0xad620c: r1 = 1
    //     0xad620c: movz            x1, #0x1
    // 0xad6210: r0 = AllocateContext()
    //     0xad6210: bl              #0xc5def4  ; AllocateContextStub
    // 0xad6214: mov             x1, x0
    // 0xad6218: ldr             x0, [fp, #0x10]
    // 0xad621c: StoreField: r1->field_f = r0
    //     0xad621c: stur            w0, [x1, #0xf]
    // 0xad6220: mov             x2, x1
    // 0xad6224: r1 = Function '<anonymous closure>':.
    //     0xad6224: add             x1, PP, #0xf, lsl #12  ; [pp+0xf648] AnonymousClosure: (0x940ba8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad6228: ldr             x1, [x1, #0x648]
    // 0xad622c: r0 = AllocateClosure()
    //     0xad622c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad6230: str             x0, [SP]
    // 0xad6234: r0 = resolveWith()
    //     0xad6234: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xad6238: mov             x2, x0
    // 0xad623c: ldr             x0, [fp, #0x10]
    // 0xad6240: b               #0xad6254
    // 0xad6244: ldr             x0, [fp, #0x10]
    // 0xad6248: LoadField: r1 = r0->field_5b
    //     0xad6248: ldur            w1, [x0, #0x5b]
    // 0xad624c: DecompressPointer r1
    //     0xad624c: add             x1, x1, HEAP, lsl #32
    // 0xad6250: mov             x2, x1
    // 0xad6254: ldur            x1, [fp, #-8]
    // 0xad6258: stur            x2, [fp, #-0x58]
    // 0xad625c: r17 = 5524
    //     0xad625c: movz            x17, #0x1594
    // 0xad6260: cmp             w1, w17
    // 0xad6264: b.eq            #0xad62a4
    // 0xad6268: r17 = 5526
    //     0xad6268: movz            x17, #0x1596
    // 0xad626c: cmp             w1, w17
    // 0xad6270: b.ne            #0xad62a4
    // 0xad6274: r1 = 1
    //     0xad6274: movz            x1, #0x1
    // 0xad6278: r0 = AllocateContext()
    //     0xad6278: bl              #0xc5def4  ; AllocateContextStub
    // 0xad627c: mov             x1, x0
    // 0xad6280: ldr             x0, [fp, #0x10]
    // 0xad6284: StoreField: r1->field_f = r0
    //     0xad6284: stur            w0, [x1, #0xf]
    // 0xad6288: mov             x2, x1
    // 0xad628c: r1 = Function '<anonymous closure>':.
    //     0xad628c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf650] AnonymousClosure: (0x940664), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xad6290: ldr             x1, [x1, #0x650]
    // 0xad6294: r0 = AllocateClosure()
    //     0xad6294: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xad6298: str             x0, [SP]
    // 0xad629c: r0 = resolveWith()
    //     0xad629c: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xad62a0: b               #0xad62b0
    // 0xad62a4: LoadField: r1 = r0->field_57
    //     0xad62a4: ldur            w1, [x0, #0x57]
    // 0xad62a8: DecompressPointer r1
    //     0xad62a8: add             x1, x1, HEAP, lsl #32
    // 0xad62ac: mov             x0, x1
    // 0xad62b0: ldur            x16, [fp, #-0x50]
    // 0xad62b4: ldur            lr, [fp, #-0x58]
    // 0xad62b8: stp             lr, x16, [SP, #0x58]
    // 0xad62bc: stp             NULL, x0, [SP, #0x48]
    // 0xad62c0: stp             NULL, NULL, [SP, #0x38]
    // 0xad62c4: stp             NULL, NULL, [SP, #0x28]
    // 0xad62c8: stp             NULL, NULL, [SP, #0x18]
    // 0xad62cc: r16 = false
    //     0xad62cc: add             x16, NULL, #0x30  ; false
    // 0xad62d0: stp             x16, NULL, [SP, #8]
    // 0xad62d4: str             NULL, [SP]
    // 0xad62d8: r4 = const [0, 0xd, 0xd, 0xd, null]
    //     0xad62d8: add             x4, PP, #0xf, lsl #12  ; [pp+0xf2d0] List(5) [0, 0xd, 0xd, 0xd, Null]
    //     0xad62dc: ldr             x4, [x4, #0x2d0]
    // 0xad62e0: r0 = hash()
    //     0xad62e0: bl              #0x5f0bd8  ; [dart:core] Object::hash
    // 0xad62e4: mov             x2, x0
    // 0xad62e8: r0 = BoxInt64Instr(r2)
    //     0xad62e8: sbfiz           x0, x2, #1, #0x1f
    //     0xad62ec: cmp             x2, x0, asr #1
    //     0xad62f0: b.eq            #0xad62fc
    //     0xad62f4: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xad62f8: stur            x2, [x0, #7]
    // 0xad62fc: ldur            x16, [fp, #-0x10]
    // 0xad6300: ldur            lr, [fp, #-0x18]
    // 0xad6304: stp             lr, x16, [SP, #0x90]
    // 0xad6308: ldur            x16, [fp, #-0x20]
    // 0xad630c: stp             NULL, x16, [SP, #0x80]
    // 0xad6310: ldur            x16, [fp, #-0x28]
    // 0xad6314: ldur            lr, [fp, #-0x30]
    // 0xad6318: stp             lr, x16, [SP, #0x70]
    // 0xad631c: r16 = Instance_FloatingLabelBehavior
    //     0xad631c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf698] Obj!FloatingLabelBehavior@c449d1
    //     0xad6320: ldr             x16, [x16, #0x698]
    // 0xad6324: stp             x16, NULL, [SP, #0x60]
    // 0xad6328: r16 = Instance_FloatingLabelAlignment
    //     0xad6328: add             x16, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0xad632c: ldr             x16, [x16, #0x6a0]
    // 0xad6330: r30 = false
    //     0xad6330: add             lr, NULL, #0x30  ; false
    // 0xad6334: stp             lr, x16, [SP, #0x50]
    // 0xad6338: r16 = false
    //     0xad6338: add             x16, NULL, #0x30  ; false
    // 0xad633c: stp             x16, NULL, [SP, #0x40]
    // 0xad6340: ldur            x16, [fp, #-0x38]
    // 0xad6344: stp             NULL, x16, [SP, #0x30]
    // 0xad6348: ldur            x16, [fp, #-0x40]
    // 0xad634c: stp             NULL, x16, [SP, #0x20]
    // 0xad6350: ldur            x16, [fp, #-0x48]
    // 0xad6354: stp             NULL, x16, [SP, #0x10]
    // 0xad6358: r16 = false
    //     0xad6358: add             x16, NULL, #0x30  ; false
    // 0xad635c: stp             x0, x16, [SP]
    // 0xad6360: r4 = const [0, 0x14, 0x14, 0x14, null]
    //     0xad6360: ldr             x4, [PP, #0x7618]  ; [pp+0x7618] List(5) [0, 0x14, 0x14, 0x14, Null]
    // 0xad6364: r0 = hash()
    //     0xad6364: bl              #0x5f0bd8  ; [dart:core] Object::hash
    // 0xad6368: mov             x2, x0
    // 0xad636c: r0 = BoxInt64Instr(r2)
    //     0xad636c: sbfiz           x0, x2, #1, #0x1f
    //     0xad6370: cmp             x2, x0, asr #1
    //     0xad6374: b.eq            #0xad6380
    //     0xad6378: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xad637c: stur            x2, [x0, #7]
    // 0xad6380: LeaveFrame
    //     0xad6380: mov             SP, fp
    //     0xad6384: ldp             fp, lr, [SP], #0x10
    // 0xad6388: ret
    //     0xad6388: ret             
    // 0xad638c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xad638c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xad6390: b               #0xad5c0c
  }
  _ ==(/* No info */) {
    // ** addr: 0xbc9ec4, size: 0xfb0
    // 0xbc9ec4: EnterFrame
    //     0xbc9ec4: stp             fp, lr, [SP, #-0x10]!
    //     0xbc9ec8: mov             fp, SP
    // 0xbc9ecc: AllocStack(0x28)
    //     0xbc9ecc: sub             SP, SP, #0x28
    // 0xbc9ed0: CheckStackOverflow
    //     0xbc9ed0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbc9ed4: cmp             SP, x16
    //     0xbc9ed8: b.ls            #0xbcae6c
    // 0xbc9edc: ldr             x1, [fp, #0x10]
    // 0xbc9ee0: cmp             w1, NULL
    // 0xbc9ee4: b.ne            #0xbc9ef8
    // 0xbc9ee8: r0 = false
    //     0xbc9ee8: add             x0, NULL, #0x30  ; false
    // 0xbc9eec: LeaveFrame
    //     0xbc9eec: mov             SP, fp
    //     0xbc9ef0: ldp             fp, lr, [SP], #0x10
    // 0xbc9ef4: ret
    //     0xbc9ef4: ret             
    // 0xbc9ef8: ldr             x2, [fp, #0x18]
    // 0xbc9efc: cmp             w2, w1
    // 0xbc9f00: b.ne            #0xbc9f14
    // 0xbc9f04: r0 = true
    //     0xbc9f04: add             x0, NULL, #0x20  ; true
    // 0xbc9f08: LeaveFrame
    //     0xbc9f08: mov             SP, fp
    //     0xbc9f0c: ldp             fp, lr, [SP], #0x10
    // 0xbc9f10: ret
    //     0xbc9f10: ret             
    // 0xbc9f14: r0 = 59
    //     0xbc9f14: movz            x0, #0x3b
    // 0xbc9f18: branchIfSmi(r1, 0xbc9f24)
    //     0xbc9f18: tbz             w1, #0, #0xbc9f24
    // 0xbc9f1c: r0 = LoadClassIdInstr(r1)
    //     0xbc9f1c: ldur            x0, [x1, #-1]
    //     0xbc9f20: ubfx            x0, x0, #0xc, #0x14
    // 0xbc9f24: str             x1, [SP]
    // 0xbc9f28: r0 = GDT[cid_x0 + 0x55ae]()
    //     0xbc9f28: movz            x17, #0x55ae
    //     0xbc9f2c: add             lr, x0, x17
    //     0xbc9f30: ldr             lr, [x21, lr, lsl #3]
    //     0xbc9f34: blr             lr
    // 0xbc9f38: stur            x0, [fp, #-8]
    // 0xbc9f3c: ldr             x16, [fp, #0x18]
    // 0xbc9f40: str             x16, [SP]
    // 0xbc9f44: r0 = runtimeType()
    //     0xbc9f44: bl              #0xb187f8  ; [dart:core] Object::runtimeType
    // 0xbc9f48: mov             x1, x0
    // 0xbc9f4c: ldur            x0, [fp, #-8]
    // 0xbc9f50: r2 = LoadClassIdInstr(r0)
    //     0xbc9f50: ldur            x2, [x0, #-1]
    //     0xbc9f54: ubfx            x2, x2, #0xc, #0x14
    // 0xbc9f58: stp             x1, x0, [SP]
    // 0xbc9f5c: mov             x0, x2
    // 0xbc9f60: mov             lr, x0
    // 0xbc9f64: ldr             lr, [x21, lr, lsl #3]
    // 0xbc9f68: blr             lr
    // 0xbc9f6c: tbz             w0, #4, #0xbc9f80
    // 0xbc9f70: r0 = false
    //     0xbc9f70: add             x0, NULL, #0x30  ; false
    // 0xbc9f74: LeaveFrame
    //     0xbc9f74: mov             SP, fp
    //     0xbc9f78: ldp             fp, lr, [SP], #0x10
    // 0xbc9f7c: ret
    //     0xbc9f7c: ret             
    // 0xbc9f80: ldr             x1, [fp, #0x10]
    // 0xbc9f84: r0 = LoadTaggedClassIdMayBeSmiInstr(r1)
    //     0xbc9f84: movz            x0, #0x76
    //     0xbc9f88: tbz             w1, #0, #0xbc9f98
    //     0xbc9f8c: ldur            x0, [x1, #-1]
    //     0xbc9f90: ubfx            x0, x0, #0xc, #0x14
    //     0xbc9f94: lsl             x0, x0, #1
    // 0xbc9f98: stur            x0, [fp, #-8]
    // 0xbc9f9c: r2 = LoadInt32Instr(r0)
    //     0xbc9f9c: sbfx            x2, x0, #1, #0x1f
    // 0xbc9fa0: cmp             x2, #0xaca
    // 0xbc9fa4: b.lt            #0xbcae5c
    // 0xbc9fa8: cmp             x2, #0xacc
    // 0xbc9fac: b.gt            #0xbcae5c
    // 0xbc9fb0: r17 = 5524
    //     0xbc9fb0: movz            x17, #0x1594
    // 0xbc9fb4: cmp             w0, w17
    // 0xbc9fb8: b.ne            #0xbc9fcc
    // 0xbc9fbc: LoadField: r2 = r1->field_7
    //     0xbc9fbc: ldur            w2, [x1, #7]
    // 0xbc9fc0: DecompressPointer r2
    //     0xbc9fc0: add             x2, x2, HEAP, lsl #32
    // 0xbc9fc4: mov             x0, x2
    // 0xbc9fc8: b               #0xbca034
    // 0xbc9fcc: r17 = 5526
    //     0xbc9fcc: movz            x17, #0x1596
    // 0xbc9fd0: cmp             w0, w17
    // 0xbc9fd4: b.ne            #0xbca008
    // 0xbc9fd8: r1 = 1
    //     0xbc9fd8: movz            x1, #0x1
    // 0xbc9fdc: r0 = AllocateContext()
    //     0xbc9fdc: bl              #0xc5def4  ; AllocateContextStub
    // 0xbc9fe0: mov             x1, x0
    // 0xbc9fe4: ldr             x0, [fp, #0x10]
    // 0xbc9fe8: StoreField: r1->field_f = r0
    //     0xbc9fe8: stur            w0, [x1, #0xf]
    // 0xbc9fec: mov             x2, x1
    // 0xbc9ff0: r1 = Function '<anonymous closure>':.
    //     0xbc9ff0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5b8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbc9ff4: ldr             x1, [x1, #0x5b8]
    // 0xbc9ff8: r0 = AllocateClosure()
    //     0xbc9ff8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbc9ffc: str             x0, [SP]
    // 0xbca000: r0 = resolveWith()
    //     0xbca000: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca004: b               #0xbca034
    // 0xbca008: r1 = 1
    //     0xbca008: movz            x1, #0x1
    // 0xbca00c: r0 = AllocateContext()
    //     0xbca00c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca010: mov             x1, x0
    // 0xbca014: ldr             x0, [fp, #0x10]
    // 0xbca018: StoreField: r1->field_f = r0
    //     0xbca018: stur            w0, [x1, #0xf]
    // 0xbca01c: mov             x2, x1
    // 0xbca020: r1 = Function '<anonymous closure>':.
    //     0xbca020: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca024: ldr             x1, [x1, #0x5c0]
    // 0xbca028: r0 = AllocateClosure()
    //     0xbca028: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca02c: str             x0, [SP]
    // 0xbca030: r0 = resolveWith()
    //     0xbca030: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca034: ldr             x1, [fp, #0x18]
    // 0xbca038: stur            x0, [fp, #-0x18]
    // 0xbca03c: r2 = LoadClassIdInstr(r1)
    //     0xbca03c: ldur            x2, [x1, #-1]
    //     0xbca040: ubfx            x2, x2, #0xc, #0x14
    // 0xbca044: lsl             x2, x2, #1
    // 0xbca048: stur            x2, [fp, #-0x10]
    // 0xbca04c: r17 = 5524
    //     0xbca04c: movz            x17, #0x1594
    // 0xbca050: cmp             w2, w17
    // 0xbca054: b.ne            #0xbca068
    // 0xbca058: LoadField: r3 = r1->field_7
    //     0xbca058: ldur            w3, [x1, #7]
    // 0xbca05c: DecompressPointer r3
    //     0xbca05c: add             x3, x3, HEAP, lsl #32
    // 0xbca060: mov             x1, x3
    // 0xbca064: b               #0xbca0e0
    // 0xbca068: r17 = 5526
    //     0xbca068: movz            x17, #0x1596
    // 0xbca06c: cmp             w2, w17
    // 0xbca070: b.ne            #0xbca0ac
    // 0xbca074: r1 = 1
    //     0xbca074: movz            x1, #0x1
    // 0xbca078: r0 = AllocateContext()
    //     0xbca078: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca07c: mov             x1, x0
    // 0xbca080: ldr             x0, [fp, #0x18]
    // 0xbca084: StoreField: r1->field_f = r0
    //     0xbca084: stur            w0, [x1, #0xf]
    // 0xbca088: mov             x2, x1
    // 0xbca08c: r1 = Function '<anonymous closure>':.
    //     0xbca08c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5b8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca090: ldr             x1, [x1, #0x5b8]
    // 0xbca094: r0 = AllocateClosure()
    //     0xbca094: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca098: str             x0, [SP]
    // 0xbca09c: r0 = resolveWith()
    //     0xbca09c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca0a0: mov             x1, x0
    // 0xbca0a4: ldur            x0, [fp, #-0x18]
    // 0xbca0a8: b               #0xbca0e0
    // 0xbca0ac: r1 = 1
    //     0xbca0ac: movz            x1, #0x1
    // 0xbca0b0: r0 = AllocateContext()
    //     0xbca0b0: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca0b4: mov             x1, x0
    // 0xbca0b8: ldr             x0, [fp, #0x18]
    // 0xbca0bc: StoreField: r1->field_f = r0
    //     0xbca0bc: stur            w0, [x1, #0xf]
    // 0xbca0c0: mov             x2, x1
    // 0xbca0c4: r1 = Function '<anonymous closure>':.
    //     0xbca0c4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca0c8: ldr             x1, [x1, #0x5c0]
    // 0xbca0cc: r0 = AllocateClosure()
    //     0xbca0cc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca0d0: str             x0, [SP]
    // 0xbca0d4: r0 = resolveWith()
    //     0xbca0d4: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca0d8: mov             x1, x0
    // 0xbca0dc: ldur            x0, [fp, #-0x18]
    // 0xbca0e0: r2 = LoadClassIdInstr(r0)
    //     0xbca0e0: ldur            x2, [x0, #-1]
    //     0xbca0e4: ubfx            x2, x2, #0xc, #0x14
    // 0xbca0e8: stp             x1, x0, [SP]
    // 0xbca0ec: mov             x0, x2
    // 0xbca0f0: mov             lr, x0
    // 0xbca0f4: ldr             lr, [x21, lr, lsl #3]
    // 0xbca0f8: blr             lr
    // 0xbca0fc: tbnz            w0, #4, #0xbcae5c
    // 0xbca100: ldur            x0, [fp, #-8]
    // 0xbca104: r17 = 5524
    //     0xbca104: movz            x17, #0x1594
    // 0xbca108: cmp             w0, w17
    // 0xbca10c: b.ne            #0xbca124
    // 0xbca110: ldr             x1, [fp, #0x10]
    // 0xbca114: LoadField: r2 = r1->field_b
    //     0xbca114: ldur            w2, [x1, #0xb]
    // 0xbca118: DecompressPointer r2
    //     0xbca118: add             x2, x2, HEAP, lsl #32
    // 0xbca11c: mov             x1, x2
    // 0xbca120: b               #0xbca198
    // 0xbca124: ldr             x1, [fp, #0x10]
    // 0xbca128: r17 = 5526
    //     0xbca128: movz            x17, #0x1596
    // 0xbca12c: cmp             w0, w17
    // 0xbca130: b.ne            #0xbca168
    // 0xbca134: r1 = 1
    //     0xbca134: movz            x1, #0x1
    // 0xbca138: r0 = AllocateContext()
    //     0xbca138: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca13c: mov             x1, x0
    // 0xbca140: ldr             x0, [fp, #0x10]
    // 0xbca144: StoreField: r1->field_f = r0
    //     0xbca144: stur            w0, [x1, #0xf]
    // 0xbca148: mov             x2, x1
    // 0xbca14c: r1 = Function '<anonymous closure>':.
    //     0xbca14c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca150: ldr             x1, [x1, #0x5c8]
    // 0xbca154: r0 = AllocateClosure()
    //     0xbca154: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca158: str             x0, [SP]
    // 0xbca15c: r0 = resolveWith()
    //     0xbca15c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca160: mov             x1, x0
    // 0xbca164: b               #0xbca198
    // 0xbca168: r1 = 1
    //     0xbca168: movz            x1, #0x1
    // 0xbca16c: r0 = AllocateContext()
    //     0xbca16c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca170: mov             x1, x0
    // 0xbca174: ldr             x0, [fp, #0x10]
    // 0xbca178: StoreField: r1->field_f = r0
    //     0xbca178: stur            w0, [x1, #0xf]
    // 0xbca17c: mov             x2, x1
    // 0xbca180: r1 = Function '<anonymous closure>':.
    //     0xbca180: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d0] AnonymousClosure: (0xad6394), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca184: ldr             x1, [x1, #0x5d0]
    // 0xbca188: r0 = AllocateClosure()
    //     0xbca188: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca18c: str             x0, [SP]
    // 0xbca190: r0 = resolveWith()
    //     0xbca190: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca194: mov             x1, x0
    // 0xbca198: ldur            x0, [fp, #-0x10]
    // 0xbca19c: stur            x1, [fp, #-0x18]
    // 0xbca1a0: r17 = 5524
    //     0xbca1a0: movz            x17, #0x1594
    // 0xbca1a4: cmp             w0, w17
    // 0xbca1a8: b.ne            #0xbca1c4
    // 0xbca1ac: ldr             x2, [fp, #0x18]
    // 0xbca1b0: LoadField: r3 = r2->field_b
    //     0xbca1b0: ldur            w3, [x2, #0xb]
    // 0xbca1b4: DecompressPointer r3
    //     0xbca1b4: add             x3, x3, HEAP, lsl #32
    // 0xbca1b8: mov             x0, x1
    // 0xbca1bc: mov             x1, x3
    // 0xbca1c0: b               #0xbca244
    // 0xbca1c4: ldr             x2, [fp, #0x18]
    // 0xbca1c8: r17 = 5526
    //     0xbca1c8: movz            x17, #0x1596
    // 0xbca1cc: cmp             w0, w17
    // 0xbca1d0: b.ne            #0xbca20c
    // 0xbca1d4: r1 = 1
    //     0xbca1d4: movz            x1, #0x1
    // 0xbca1d8: r0 = AllocateContext()
    //     0xbca1d8: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca1dc: mov             x1, x0
    // 0xbca1e0: ldr             x0, [fp, #0x18]
    // 0xbca1e4: StoreField: r1->field_f = r0
    //     0xbca1e4: stur            w0, [x1, #0xf]
    // 0xbca1e8: mov             x2, x1
    // 0xbca1ec: r1 = Function '<anonymous closure>':.
    //     0xbca1ec: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca1f0: ldr             x1, [x1, #0x5c8]
    // 0xbca1f4: r0 = AllocateClosure()
    //     0xbca1f4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca1f8: str             x0, [SP]
    // 0xbca1fc: r0 = resolveWith()
    //     0xbca1fc: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca200: mov             x1, x0
    // 0xbca204: ldur            x0, [fp, #-0x18]
    // 0xbca208: b               #0xbca244
    // 0xbca20c: mov             x1, x2
    // 0xbca210: r1 = 1
    //     0xbca210: movz            x1, #0x1
    // 0xbca214: r0 = AllocateContext()
    //     0xbca214: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca218: mov             x1, x0
    // 0xbca21c: ldr             x0, [fp, #0x18]
    // 0xbca220: StoreField: r1->field_f = r0
    //     0xbca220: stur            w0, [x1, #0xf]
    // 0xbca224: mov             x2, x1
    // 0xbca228: r1 = Function '<anonymous closure>':.
    //     0xbca228: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d0] AnonymousClosure: (0xad6394), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca22c: ldr             x1, [x1, #0x5d0]
    // 0xbca230: r0 = AllocateClosure()
    //     0xbca230: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca234: str             x0, [SP]
    // 0xbca238: r0 = resolveWith()
    //     0xbca238: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca23c: mov             x1, x0
    // 0xbca240: ldur            x0, [fp, #-0x18]
    // 0xbca244: r2 = LoadClassIdInstr(r0)
    //     0xbca244: ldur            x2, [x0, #-1]
    //     0xbca248: ubfx            x2, x2, #0xc, #0x14
    // 0xbca24c: stp             x1, x0, [SP]
    // 0xbca250: mov             x0, x2
    // 0xbca254: mov             lr, x0
    // 0xbca258: ldr             lr, [x21, lr, lsl #3]
    // 0xbca25c: blr             lr
    // 0xbca260: tbnz            w0, #4, #0xbcae5c
    // 0xbca264: ldur            x0, [fp, #-8]
    // 0xbca268: r17 = 5524
    //     0xbca268: movz            x17, #0x1594
    // 0xbca26c: cmp             w0, w17
    // 0xbca270: b.ne            #0xbca288
    // 0xbca274: ldr             x1, [fp, #0x10]
    // 0xbca278: LoadField: r2 = r1->field_f
    //     0xbca278: ldur            w2, [x1, #0xf]
    // 0xbca27c: DecompressPointer r2
    //     0xbca27c: add             x2, x2, HEAP, lsl #32
    // 0xbca280: mov             x1, x2
    // 0xbca284: b               #0xbca2fc
    // 0xbca288: ldr             x1, [fp, #0x10]
    // 0xbca28c: r17 = 5526
    //     0xbca28c: movz            x17, #0x1596
    // 0xbca290: cmp             w0, w17
    // 0xbca294: b.ne            #0xbca2cc
    // 0xbca298: r1 = 1
    //     0xbca298: movz            x1, #0x1
    // 0xbca29c: r0 = AllocateContext()
    //     0xbca29c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca2a0: mov             x1, x0
    // 0xbca2a4: ldr             x0, [fp, #0x10]
    // 0xbca2a8: StoreField: r1->field_f = r0
    //     0xbca2a8: stur            w0, [x1, #0xf]
    // 0xbca2ac: mov             x2, x1
    // 0xbca2b0: r1 = Function '<anonymous closure>':.
    //     0xbca2b0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d8] AnonymousClosure: (0x93ed74), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca2b4: ldr             x1, [x1, #0x5d8]
    // 0xbca2b8: r0 = AllocateClosure()
    //     0xbca2b8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca2bc: str             x0, [SP]
    // 0xbca2c0: r0 = resolveWith()
    //     0xbca2c0: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca2c4: mov             x1, x0
    // 0xbca2c8: b               #0xbca2fc
    // 0xbca2cc: r1 = 1
    //     0xbca2cc: movz            x1, #0x1
    // 0xbca2d0: r0 = AllocateContext()
    //     0xbca2d0: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca2d4: mov             x1, x0
    // 0xbca2d8: ldr             x0, [fp, #0x10]
    // 0xbca2dc: StoreField: r1->field_f = r0
    //     0xbca2dc: stur            w0, [x1, #0xf]
    // 0xbca2e0: mov             x2, x1
    // 0xbca2e4: r1 = Function '<anonymous closure>':.
    //     0xbca2e4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e0] AnonymousClosure: (0x93ec6c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca2e8: ldr             x1, [x1, #0x5e0]
    // 0xbca2ec: r0 = AllocateClosure()
    //     0xbca2ec: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca2f0: str             x0, [SP]
    // 0xbca2f4: r0 = resolveWith()
    //     0xbca2f4: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca2f8: mov             x1, x0
    // 0xbca2fc: ldur            x0, [fp, #-0x10]
    // 0xbca300: stur            x1, [fp, #-0x18]
    // 0xbca304: r17 = 5524
    //     0xbca304: movz            x17, #0x1594
    // 0xbca308: cmp             w0, w17
    // 0xbca30c: b.ne            #0xbca328
    // 0xbca310: ldr             x2, [fp, #0x18]
    // 0xbca314: LoadField: r3 = r2->field_f
    //     0xbca314: ldur            w3, [x2, #0xf]
    // 0xbca318: DecompressPointer r3
    //     0xbca318: add             x3, x3, HEAP, lsl #32
    // 0xbca31c: mov             x0, x1
    // 0xbca320: mov             x1, x3
    // 0xbca324: b               #0xbca3a8
    // 0xbca328: ldr             x2, [fp, #0x18]
    // 0xbca32c: r17 = 5526
    //     0xbca32c: movz            x17, #0x1596
    // 0xbca330: cmp             w0, w17
    // 0xbca334: b.ne            #0xbca370
    // 0xbca338: r1 = 1
    //     0xbca338: movz            x1, #0x1
    // 0xbca33c: r0 = AllocateContext()
    //     0xbca33c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca340: mov             x1, x0
    // 0xbca344: ldr             x0, [fp, #0x18]
    // 0xbca348: StoreField: r1->field_f = r0
    //     0xbca348: stur            w0, [x1, #0xf]
    // 0xbca34c: mov             x2, x1
    // 0xbca350: r1 = Function '<anonymous closure>':.
    //     0xbca350: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d8] AnonymousClosure: (0x93ed74), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca354: ldr             x1, [x1, #0x5d8]
    // 0xbca358: r0 = AllocateClosure()
    //     0xbca358: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca35c: str             x0, [SP]
    // 0xbca360: r0 = resolveWith()
    //     0xbca360: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca364: mov             x1, x0
    // 0xbca368: ldur            x0, [fp, #-0x18]
    // 0xbca36c: b               #0xbca3a8
    // 0xbca370: mov             x1, x2
    // 0xbca374: r1 = 1
    //     0xbca374: movz            x1, #0x1
    // 0xbca378: r0 = AllocateContext()
    //     0xbca378: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca37c: mov             x1, x0
    // 0xbca380: ldr             x0, [fp, #0x18]
    // 0xbca384: StoreField: r1->field_f = r0
    //     0xbca384: stur            w0, [x1, #0xf]
    // 0xbca388: mov             x2, x1
    // 0xbca38c: r1 = Function '<anonymous closure>':.
    //     0xbca38c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e0] AnonymousClosure: (0x93ec6c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca390: ldr             x1, [x1, #0x5e0]
    // 0xbca394: r0 = AllocateClosure()
    //     0xbca394: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca398: str             x0, [SP]
    // 0xbca39c: r0 = resolveWith()
    //     0xbca39c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca3a0: mov             x1, x0
    // 0xbca3a4: ldur            x0, [fp, #-0x18]
    // 0xbca3a8: r2 = LoadClassIdInstr(r0)
    //     0xbca3a8: ldur            x2, [x0, #-1]
    //     0xbca3ac: ubfx            x2, x2, #0xc, #0x14
    // 0xbca3b0: stp             x1, x0, [SP]
    // 0xbca3b4: mov             x0, x2
    // 0xbca3b8: mov             lr, x0
    // 0xbca3bc: ldr             lr, [x21, lr, lsl #3]
    // 0xbca3c0: blr             lr
    // 0xbca3c4: tbnz            w0, #4, #0xbcae5c
    // 0xbca3c8: ldur            x0, [fp, #-8]
    // 0xbca3cc: r17 = 5524
    //     0xbca3cc: movz            x17, #0x1594
    // 0xbca3d0: cmp             w0, w17
    // 0xbca3d4: b.ne            #0xbca3ec
    // 0xbca3d8: ldr             x1, [fp, #0x10]
    // 0xbca3dc: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xbca3dc: ldur            w2, [x1, #0x17]
    // 0xbca3e0: DecompressPointer r2
    //     0xbca3e0: add             x2, x2, HEAP, lsl #32
    // 0xbca3e4: mov             x1, x2
    // 0xbca3e8: b               #0xbca460
    // 0xbca3ec: ldr             x1, [fp, #0x10]
    // 0xbca3f0: r17 = 5526
    //     0xbca3f0: movz            x17, #0x1596
    // 0xbca3f4: cmp             w0, w17
    // 0xbca3f8: b.ne            #0xbca430
    // 0xbca3fc: r1 = 1
    //     0xbca3fc: movz            x1, #0x1
    // 0xbca400: r0 = AllocateContext()
    //     0xbca400: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca404: mov             x1, x0
    // 0xbca408: ldr             x0, [fp, #0x10]
    // 0xbca40c: StoreField: r1->field_f = r0
    //     0xbca40c: stur            w0, [x1, #0xf]
    // 0xbca410: mov             x2, x1
    // 0xbca414: r1 = Function '<anonymous closure>':.
    //     0xbca414: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e8] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca418: ldr             x1, [x1, #0x5e8]
    // 0xbca41c: r0 = AllocateClosure()
    //     0xbca41c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca420: str             x0, [SP]
    // 0xbca424: r0 = resolveWith()
    //     0xbca424: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca428: mov             x1, x0
    // 0xbca42c: b               #0xbca460
    // 0xbca430: r1 = 1
    //     0xbca430: movz            x1, #0x1
    // 0xbca434: r0 = AllocateContext()
    //     0xbca434: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca438: mov             x1, x0
    // 0xbca43c: ldr             x0, [fp, #0x10]
    // 0xbca440: StoreField: r1->field_f = r0
    //     0xbca440: stur            w0, [x1, #0xf]
    // 0xbca444: mov             x2, x1
    // 0xbca448: r1 = Function '<anonymous closure>':.
    //     0xbca448: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca44c: ldr             x1, [x1, #0x5f0]
    // 0xbca450: r0 = AllocateClosure()
    //     0xbca450: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca454: str             x0, [SP]
    // 0xbca458: r0 = resolveWith()
    //     0xbca458: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca45c: mov             x1, x0
    // 0xbca460: ldur            x0, [fp, #-0x10]
    // 0xbca464: stur            x1, [fp, #-0x18]
    // 0xbca468: r17 = 5524
    //     0xbca468: movz            x17, #0x1594
    // 0xbca46c: cmp             w0, w17
    // 0xbca470: b.ne            #0xbca48c
    // 0xbca474: ldr             x2, [fp, #0x18]
    // 0xbca478: ArrayLoad: r3 = r2[0]  ; List_4
    //     0xbca478: ldur            w3, [x2, #0x17]
    // 0xbca47c: DecompressPointer r3
    //     0xbca47c: add             x3, x3, HEAP, lsl #32
    // 0xbca480: mov             x0, x1
    // 0xbca484: mov             x1, x3
    // 0xbca488: b               #0xbca50c
    // 0xbca48c: ldr             x2, [fp, #0x18]
    // 0xbca490: r17 = 5526
    //     0xbca490: movz            x17, #0x1596
    // 0xbca494: cmp             w0, w17
    // 0xbca498: b.ne            #0xbca4d4
    // 0xbca49c: r1 = 1
    //     0xbca49c: movz            x1, #0x1
    // 0xbca4a0: r0 = AllocateContext()
    //     0xbca4a0: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca4a4: mov             x1, x0
    // 0xbca4a8: ldr             x0, [fp, #0x18]
    // 0xbca4ac: StoreField: r1->field_f = r0
    //     0xbca4ac: stur            w0, [x1, #0xf]
    // 0xbca4b0: mov             x2, x1
    // 0xbca4b4: r1 = Function '<anonymous closure>':.
    //     0xbca4b4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e8] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca4b8: ldr             x1, [x1, #0x5e8]
    // 0xbca4bc: r0 = AllocateClosure()
    //     0xbca4bc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca4c0: str             x0, [SP]
    // 0xbca4c4: r0 = resolveWith()
    //     0xbca4c4: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca4c8: mov             x1, x0
    // 0xbca4cc: ldur            x0, [fp, #-0x18]
    // 0xbca4d0: b               #0xbca50c
    // 0xbca4d4: mov             x1, x2
    // 0xbca4d8: r1 = 1
    //     0xbca4d8: movz            x1, #0x1
    // 0xbca4dc: r0 = AllocateContext()
    //     0xbca4dc: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca4e0: mov             x1, x0
    // 0xbca4e4: ldr             x0, [fp, #0x18]
    // 0xbca4e8: StoreField: r1->field_f = r0
    //     0xbca4e8: stur            w0, [x1, #0xf]
    // 0xbca4ec: mov             x2, x1
    // 0xbca4f0: r1 = Function '<anonymous closure>':.
    //     0xbca4f0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca4f4: ldr             x1, [x1, #0x5f0]
    // 0xbca4f8: r0 = AllocateClosure()
    //     0xbca4f8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca4fc: str             x0, [SP]
    // 0xbca500: r0 = resolveWith()
    //     0xbca500: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca504: mov             x1, x0
    // 0xbca508: ldur            x0, [fp, #-0x18]
    // 0xbca50c: r2 = LoadClassIdInstr(r0)
    //     0xbca50c: ldur            x2, [x0, #-1]
    //     0xbca510: ubfx            x2, x2, #0xc, #0x14
    // 0xbca514: stp             x1, x0, [SP]
    // 0xbca518: mov             x0, x2
    // 0xbca51c: mov             lr, x0
    // 0xbca520: ldr             lr, [x21, lr, lsl #3]
    // 0xbca524: blr             lr
    // 0xbca528: tbnz            w0, #4, #0xbcae5c
    // 0xbca52c: ldur            x0, [fp, #-8]
    // 0xbca530: r17 = 5524
    //     0xbca530: movz            x17, #0x1594
    // 0xbca534: cmp             w0, w17
    // 0xbca538: b.ne            #0xbca550
    // 0xbca53c: ldr             x1, [fp, #0x10]
    // 0xbca540: LoadField: r2 = r1->field_1b
    //     0xbca540: ldur            w2, [x1, #0x1b]
    // 0xbca544: DecompressPointer r2
    //     0xbca544: add             x2, x2, HEAP, lsl #32
    // 0xbca548: mov             x1, x2
    // 0xbca54c: b               #0xbca5c4
    // 0xbca550: ldr             x1, [fp, #0x10]
    // 0xbca554: r17 = 5526
    //     0xbca554: movz            x17, #0x1596
    // 0xbca558: cmp             w0, w17
    // 0xbca55c: b.ne            #0xbca594
    // 0xbca560: r1 = 1
    //     0xbca560: movz            x1, #0x1
    // 0xbca564: r0 = AllocateContext()
    //     0xbca564: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca568: mov             x1, x0
    // 0xbca56c: ldr             x0, [fp, #0x10]
    // 0xbca570: StoreField: r1->field_f = r0
    //     0xbca570: stur            w0, [x1, #0xf]
    // 0xbca574: mov             x2, x1
    // 0xbca578: r1 = Function '<anonymous closure>':.
    //     0xbca578: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f8] AnonymousClosure: (0x93e9d8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca57c: ldr             x1, [x1, #0x5f8]
    // 0xbca580: r0 = AllocateClosure()
    //     0xbca580: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca584: str             x0, [SP]
    // 0xbca588: r0 = resolveWith()
    //     0xbca588: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca58c: mov             x1, x0
    // 0xbca590: b               #0xbca5c4
    // 0xbca594: r1 = 1
    //     0xbca594: movz            x1, #0x1
    // 0xbca598: r0 = AllocateContext()
    //     0xbca598: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca59c: mov             x1, x0
    // 0xbca5a0: ldr             x0, [fp, #0x10]
    // 0xbca5a4: StoreField: r1->field_f = r0
    //     0xbca5a4: stur            w0, [x1, #0xf]
    // 0xbca5a8: mov             x2, x1
    // 0xbca5ac: r1 = Function '<anonymous closure>':.
    //     0xbca5ac: add             x1, PP, #0xf, lsl #12  ; [pp+0xf600] AnonymousClosure: (0x93e8c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca5b0: ldr             x1, [x1, #0x600]
    // 0xbca5b4: r0 = AllocateClosure()
    //     0xbca5b4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca5b8: str             x0, [SP]
    // 0xbca5bc: r0 = resolveWith()
    //     0xbca5bc: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca5c0: mov             x1, x0
    // 0xbca5c4: ldur            x0, [fp, #-0x10]
    // 0xbca5c8: stur            x1, [fp, #-0x18]
    // 0xbca5cc: r17 = 5524
    //     0xbca5cc: movz            x17, #0x1594
    // 0xbca5d0: cmp             w0, w17
    // 0xbca5d4: b.ne            #0xbca5f0
    // 0xbca5d8: ldr             x2, [fp, #0x18]
    // 0xbca5dc: LoadField: r3 = r2->field_1b
    //     0xbca5dc: ldur            w3, [x2, #0x1b]
    // 0xbca5e0: DecompressPointer r3
    //     0xbca5e0: add             x3, x3, HEAP, lsl #32
    // 0xbca5e4: mov             x0, x1
    // 0xbca5e8: mov             x1, x3
    // 0xbca5ec: b               #0xbca670
    // 0xbca5f0: ldr             x2, [fp, #0x18]
    // 0xbca5f4: r17 = 5526
    //     0xbca5f4: movz            x17, #0x1596
    // 0xbca5f8: cmp             w0, w17
    // 0xbca5fc: b.ne            #0xbca638
    // 0xbca600: r1 = 1
    //     0xbca600: movz            x1, #0x1
    // 0xbca604: r0 = AllocateContext()
    //     0xbca604: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca608: mov             x1, x0
    // 0xbca60c: ldr             x0, [fp, #0x18]
    // 0xbca610: StoreField: r1->field_f = r0
    //     0xbca610: stur            w0, [x1, #0xf]
    // 0xbca614: mov             x2, x1
    // 0xbca618: r1 = Function '<anonymous closure>':.
    //     0xbca618: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f8] AnonymousClosure: (0x93e9d8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca61c: ldr             x1, [x1, #0x5f8]
    // 0xbca620: r0 = AllocateClosure()
    //     0xbca620: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca624: str             x0, [SP]
    // 0xbca628: r0 = resolveWith()
    //     0xbca628: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca62c: mov             x1, x0
    // 0xbca630: ldur            x0, [fp, #-0x18]
    // 0xbca634: b               #0xbca670
    // 0xbca638: mov             x1, x2
    // 0xbca63c: r1 = 1
    //     0xbca63c: movz            x1, #0x1
    // 0xbca640: r0 = AllocateContext()
    //     0xbca640: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca644: mov             x1, x0
    // 0xbca648: ldr             x0, [fp, #0x18]
    // 0xbca64c: StoreField: r1->field_f = r0
    //     0xbca64c: stur            w0, [x1, #0xf]
    // 0xbca650: mov             x2, x1
    // 0xbca654: r1 = Function '<anonymous closure>':.
    //     0xbca654: add             x1, PP, #0xf, lsl #12  ; [pp+0xf600] AnonymousClosure: (0x93e8c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca658: ldr             x1, [x1, #0x600]
    // 0xbca65c: r0 = AllocateClosure()
    //     0xbca65c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca660: str             x0, [SP]
    // 0xbca664: r0 = resolveWith()
    //     0xbca664: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0xbca668: mov             x1, x0
    // 0xbca66c: ldur            x0, [fp, #-0x18]
    // 0xbca670: r2 = LoadClassIdInstr(r0)
    //     0xbca670: ldur            x2, [x0, #-1]
    //     0xbca674: ubfx            x2, x2, #0xc, #0x14
    // 0xbca678: stp             x1, x0, [SP]
    // 0xbca67c: mov             x0, x2
    // 0xbca680: mov             lr, x0
    // 0xbca684: ldr             lr, [x21, lr, lsl #3]
    // 0xbca688: blr             lr
    // 0xbca68c: tbnz            w0, #4, #0xbcae5c
    // 0xbca690: ldur            x0, [fp, #-8]
    // 0xbca694: r17 = 5524
    //     0xbca694: movz            x17, #0x1594
    // 0xbca698: cmp             w0, w17
    // 0xbca69c: b.ne            #0xbca6b4
    // 0xbca6a0: ldr             x2, [fp, #0x10]
    // 0xbca6a4: LoadField: r1 = r2->field_37
    //     0xbca6a4: ldur            w1, [x2, #0x37]
    // 0xbca6a8: DecompressPointer r1
    //     0xbca6a8: add             x1, x1, HEAP, lsl #32
    // 0xbca6ac: mov             x2, x1
    // 0xbca6b0: b               #0xbca748
    // 0xbca6b4: ldr             x2, [fp, #0x10]
    // 0xbca6b8: r17 = 5526
    //     0xbca6b8: movz            x17, #0x1596
    // 0xbca6bc: cmp             w0, w17
    // 0xbca6c0: b.ne            #0xbca714
    // 0xbca6c4: mov             x1, x2
    // 0xbca6c8: LoadField: r0 = r1->field_8b
    //     0xbca6c8: ldur            w0, [x1, #0x8b]
    // 0xbca6cc: DecompressPointer r0
    //     0xbca6cc: add             x0, x0, HEAP, lsl #32
    // 0xbca6d0: r16 = Sentinel
    //     0xbca6d0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xbca6d4: cmp             w0, w16
    // 0xbca6d8: b.ne            #0xbca6e8
    // 0xbca6dc: r2 = _colors
    //     0xbca6dc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0xbca6e0: ldr             x2, [x2, #0x608]
    // 0xbca6e4: r0 = InitLateFinalInstanceField()
    //     0xbca6e4: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xbca6e8: LoadField: r1 = r0->field_5f
    //     0xbca6e8: ldur            w1, [x0, #0x5f]
    // 0xbca6ec: DecompressPointer r1
    //     0xbca6ec: add             x1, x1, HEAP, lsl #32
    // 0xbca6f0: cmp             w1, NULL
    // 0xbca6f4: b.ne            #0xbca708
    // 0xbca6f8: LoadField: r1 = r0->field_57
    //     0xbca6f8: ldur            w1, [x0, #0x57]
    // 0xbca6fc: DecompressPointer r1
    //     0xbca6fc: add             x1, x1, HEAP, lsl #32
    // 0xbca700: mov             x0, x1
    // 0xbca704: b               #0xbca70c
    // 0xbca708: mov             x0, x1
    // 0xbca70c: mov             x2, x0
    // 0xbca710: b               #0xbca748
    // 0xbca714: mov             x0, x2
    // 0xbca718: r1 = 1
    //     0xbca718: movz            x1, #0x1
    // 0xbca71c: r0 = AllocateContext()
    //     0xbca71c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca720: mov             x1, x0
    // 0xbca724: ldr             x0, [fp, #0x10]
    // 0xbca728: StoreField: r1->field_f = r0
    //     0xbca728: stur            w0, [x1, #0xf]
    // 0xbca72c: mov             x2, x1
    // 0xbca730: r1 = Function '<anonymous closure>':.
    //     0xbca730: add             x1, PP, #0xf, lsl #12  ; [pp+0xf610] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca734: ldr             x1, [x1, #0x610]
    // 0xbca738: r0 = AllocateClosure()
    //     0xbca738: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca73c: str             x0, [SP]
    // 0xbca740: r0 = resolveWith()
    //     0xbca740: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca744: mov             x2, x0
    // 0xbca748: ldur            x0, [fp, #-0x10]
    // 0xbca74c: stur            x2, [fp, #-0x18]
    // 0xbca750: r17 = 5524
    //     0xbca750: movz            x17, #0x1594
    // 0xbca754: cmp             w0, w17
    // 0xbca758: b.ne            #0xbca770
    // 0xbca75c: ldr             x3, [fp, #0x18]
    // 0xbca760: LoadField: r1 = r3->field_37
    //     0xbca760: ldur            w1, [x3, #0x37]
    // 0xbca764: DecompressPointer r1
    //     0xbca764: add             x1, x1, HEAP, lsl #32
    // 0xbca768: mov             x0, x2
    // 0xbca76c: b               #0xbca80c
    // 0xbca770: ldr             x3, [fp, #0x18]
    // 0xbca774: r17 = 5526
    //     0xbca774: movz            x17, #0x1596
    // 0xbca778: cmp             w0, w17
    // 0xbca77c: b.ne            #0xbca7d4
    // 0xbca780: mov             x1, x3
    // 0xbca784: LoadField: r0 = r1->field_8b
    //     0xbca784: ldur            w0, [x1, #0x8b]
    // 0xbca788: DecompressPointer r0
    //     0xbca788: add             x0, x0, HEAP, lsl #32
    // 0xbca78c: r16 = Sentinel
    //     0xbca78c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xbca790: cmp             w0, w16
    // 0xbca794: b.ne            #0xbca7a4
    // 0xbca798: r2 = _colors
    //     0xbca798: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0xbca79c: ldr             x2, [x2, #0x608]
    // 0xbca7a0: r0 = InitLateFinalInstanceField()
    //     0xbca7a0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xbca7a4: LoadField: r1 = r0->field_5f
    //     0xbca7a4: ldur            w1, [x0, #0x5f]
    // 0xbca7a8: DecompressPointer r1
    //     0xbca7a8: add             x1, x1, HEAP, lsl #32
    // 0xbca7ac: cmp             w1, NULL
    // 0xbca7b0: b.ne            #0xbca7c4
    // 0xbca7b4: LoadField: r1 = r0->field_57
    //     0xbca7b4: ldur            w1, [x0, #0x57]
    // 0xbca7b8: DecompressPointer r1
    //     0xbca7b8: add             x1, x1, HEAP, lsl #32
    // 0xbca7bc: mov             x0, x1
    // 0xbca7c0: b               #0xbca7c8
    // 0xbca7c4: mov             x0, x1
    // 0xbca7c8: mov             x1, x0
    // 0xbca7cc: ldur            x0, [fp, #-0x18]
    // 0xbca7d0: b               #0xbca80c
    // 0xbca7d4: mov             x0, x3
    // 0xbca7d8: r1 = 1
    //     0xbca7d8: movz            x1, #0x1
    // 0xbca7dc: r0 = AllocateContext()
    //     0xbca7dc: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca7e0: mov             x1, x0
    // 0xbca7e4: ldr             x0, [fp, #0x18]
    // 0xbca7e8: StoreField: r1->field_f = r0
    //     0xbca7e8: stur            w0, [x1, #0xf]
    // 0xbca7ec: mov             x2, x1
    // 0xbca7f0: r1 = Function '<anonymous closure>':.
    //     0xbca7f0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf610] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca7f4: ldr             x1, [x1, #0x610]
    // 0xbca7f8: r0 = AllocateClosure()
    //     0xbca7f8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca7fc: str             x0, [SP]
    // 0xbca800: r0 = resolveWith()
    //     0xbca800: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca804: mov             x1, x0
    // 0xbca808: ldur            x0, [fp, #-0x18]
    // 0xbca80c: r2 = LoadClassIdInstr(r0)
    //     0xbca80c: ldur            x2, [x0, #-1]
    //     0xbca810: ubfx            x2, x2, #0xc, #0x14
    // 0xbca814: stp             x1, x0, [SP]
    // 0xbca818: mov             x0, x2
    // 0xbca81c: mov             lr, x0
    // 0xbca820: ldr             lr, [x21, lr, lsl #3]
    // 0xbca824: blr             lr
    // 0xbca828: tbnz            w0, #4, #0xbcae5c
    // 0xbca82c: ldur            x0, [fp, #-8]
    // 0xbca830: r17 = 5524
    //     0xbca830: movz            x17, #0x1594
    // 0xbca834: cmp             w0, w17
    // 0xbca838: b.ne            #0xbca850
    // 0xbca83c: ldr             x1, [fp, #0x10]
    // 0xbca840: LoadField: r2 = r1->field_3f
    //     0xbca840: ldur            w2, [x1, #0x3f]
    // 0xbca844: DecompressPointer r2
    //     0xbca844: add             x2, x2, HEAP, lsl #32
    // 0xbca848: mov             x1, x2
    // 0xbca84c: b               #0xbca8c8
    // 0xbca850: ldr             x1, [fp, #0x10]
    // 0xbca854: r17 = 5526
    //     0xbca854: movz            x17, #0x1596
    // 0xbca858: cmp             w0, w17
    // 0xbca85c: b.ne            #0xbca894
    // 0xbca860: r1 = 1
    //     0xbca860: movz            x1, #0x1
    // 0xbca864: r0 = AllocateContext()
    //     0xbca864: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca868: mov             x1, x0
    // 0xbca86c: ldr             x0, [fp, #0x10]
    // 0xbca870: StoreField: r1->field_f = r0
    //     0xbca870: stur            w0, [x1, #0xf]
    // 0xbca874: mov             x2, x1
    // 0xbca878: r1 = Function '<anonymous closure>':.
    //     0xbca878: add             x1, PP, #0xf, lsl #12  ; [pp+0xf618] AnonymousClosure: (0x93f5c4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca87c: ldr             x1, [x1, #0x618]
    // 0xbca880: r0 = AllocateClosure()
    //     0xbca880: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca884: str             x0, [SP]
    // 0xbca888: r0 = resolveWith()
    //     0xbca888: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca88c: mov             x1, x0
    // 0xbca890: b               #0xbca8c8
    // 0xbca894: mov             x0, x1
    // 0xbca898: r1 = 1
    //     0xbca898: movz            x1, #0x1
    // 0xbca89c: r0 = AllocateContext()
    //     0xbca89c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca8a0: mov             x1, x0
    // 0xbca8a4: ldr             x0, [fp, #0x10]
    // 0xbca8a8: StoreField: r1->field_f = r0
    //     0xbca8a8: stur            w0, [x1, #0xf]
    // 0xbca8ac: mov             x2, x1
    // 0xbca8b0: r1 = Function '<anonymous closure>':.
    //     0xbca8b0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf620] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca8b4: ldr             x1, [x1, #0x620]
    // 0xbca8b8: r0 = AllocateClosure()
    //     0xbca8b8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca8bc: str             x0, [SP]
    // 0xbca8c0: r0 = resolveWith()
    //     0xbca8c0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca8c4: mov             x1, x0
    // 0xbca8c8: ldur            x0, [fp, #-0x10]
    // 0xbca8cc: stur            x1, [fp, #-0x18]
    // 0xbca8d0: r17 = 5524
    //     0xbca8d0: movz            x17, #0x1594
    // 0xbca8d4: cmp             w0, w17
    // 0xbca8d8: b.ne            #0xbca8f4
    // 0xbca8dc: ldr             x2, [fp, #0x18]
    // 0xbca8e0: LoadField: r3 = r2->field_3f
    //     0xbca8e0: ldur            w3, [x2, #0x3f]
    // 0xbca8e4: DecompressPointer r3
    //     0xbca8e4: add             x3, x3, HEAP, lsl #32
    // 0xbca8e8: mov             x0, x1
    // 0xbca8ec: mov             x1, x3
    // 0xbca8f0: b               #0xbca974
    // 0xbca8f4: ldr             x2, [fp, #0x18]
    // 0xbca8f8: r17 = 5526
    //     0xbca8f8: movz            x17, #0x1596
    // 0xbca8fc: cmp             w0, w17
    // 0xbca900: b.ne            #0xbca93c
    // 0xbca904: r1 = 1
    //     0xbca904: movz            x1, #0x1
    // 0xbca908: r0 = AllocateContext()
    //     0xbca908: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca90c: mov             x1, x0
    // 0xbca910: ldr             x0, [fp, #0x18]
    // 0xbca914: StoreField: r1->field_f = r0
    //     0xbca914: stur            w0, [x1, #0xf]
    // 0xbca918: mov             x2, x1
    // 0xbca91c: r1 = Function '<anonymous closure>':.
    //     0xbca91c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf618] AnonymousClosure: (0x93f5c4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca920: ldr             x1, [x1, #0x618]
    // 0xbca924: r0 = AllocateClosure()
    //     0xbca924: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca928: str             x0, [SP]
    // 0xbca92c: r0 = resolveWith()
    //     0xbca92c: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca930: mov             x1, x0
    // 0xbca934: ldur            x0, [fp, #-0x18]
    // 0xbca938: b               #0xbca974
    // 0xbca93c: mov             x0, x2
    // 0xbca940: r1 = 1
    //     0xbca940: movz            x1, #0x1
    // 0xbca944: r0 = AllocateContext()
    //     0xbca944: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca948: mov             x1, x0
    // 0xbca94c: ldr             x0, [fp, #0x18]
    // 0xbca950: StoreField: r1->field_f = r0
    //     0xbca950: stur            w0, [x1, #0xf]
    // 0xbca954: mov             x2, x1
    // 0xbca958: r1 = Function '<anonymous closure>':.
    //     0xbca958: add             x1, PP, #0xf, lsl #12  ; [pp+0xf620] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbca95c: ldr             x1, [x1, #0x620]
    // 0xbca960: r0 = AllocateClosure()
    //     0xbca960: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca964: str             x0, [SP]
    // 0xbca968: r0 = resolveWith()
    //     0xbca968: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca96c: mov             x1, x0
    // 0xbca970: ldur            x0, [fp, #-0x18]
    // 0xbca974: r2 = LoadClassIdInstr(r0)
    //     0xbca974: ldur            x2, [x0, #-1]
    //     0xbca978: ubfx            x2, x2, #0xc, #0x14
    // 0xbca97c: stp             x1, x0, [SP]
    // 0xbca980: mov             x0, x2
    // 0xbca984: mov             lr, x0
    // 0xbca988: ldr             lr, [x21, lr, lsl #3]
    // 0xbca98c: blr             lr
    // 0xbca990: tbnz            w0, #4, #0xbcae5c
    // 0xbca994: ldur            x0, [fp, #-8]
    // 0xbca998: r17 = 5524
    //     0xbca998: movz            x17, #0x1594
    // 0xbca99c: cmp             w0, w17
    // 0xbca9a0: b.ne            #0xbca9b8
    // 0xbca9a4: ldr             x1, [fp, #0x10]
    // 0xbca9a8: LoadField: r2 = r1->field_47
    //     0xbca9a8: ldur            w2, [x1, #0x47]
    // 0xbca9ac: DecompressPointer r2
    //     0xbca9ac: add             x2, x2, HEAP, lsl #32
    // 0xbca9b0: mov             x1, x2
    // 0xbca9b4: b               #0xbcaa30
    // 0xbca9b8: ldr             x1, [fp, #0x10]
    // 0xbca9bc: r17 = 5526
    //     0xbca9bc: movz            x17, #0x1596
    // 0xbca9c0: cmp             w0, w17
    // 0xbca9c4: b.ne            #0xbca9fc
    // 0xbca9c8: r1 = 1
    //     0xbca9c8: movz            x1, #0x1
    // 0xbca9cc: r0 = AllocateContext()
    //     0xbca9cc: bl              #0xc5def4  ; AllocateContextStub
    // 0xbca9d0: mov             x1, x0
    // 0xbca9d4: ldr             x0, [fp, #0x10]
    // 0xbca9d8: StoreField: r1->field_f = r0
    //     0xbca9d8: stur            w0, [x1, #0xf]
    // 0xbca9dc: mov             x2, x1
    // 0xbca9e0: r1 = Function '<anonymous closure>':.
    //     0xbca9e0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf628] AnonymousClosure: (0x93f2f4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbca9e4: ldr             x1, [x1, #0x628]
    // 0xbca9e8: r0 = AllocateClosure()
    //     0xbca9e8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbca9ec: str             x0, [SP]
    // 0xbca9f0: r0 = resolveWith()
    //     0xbca9f0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbca9f4: mov             x1, x0
    // 0xbca9f8: b               #0xbcaa30
    // 0xbca9fc: mov             x0, x1
    // 0xbcaa00: r1 = 1
    //     0xbcaa00: movz            x1, #0x1
    // 0xbcaa04: r0 = AllocateContext()
    //     0xbcaa04: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcaa08: mov             x1, x0
    // 0xbcaa0c: ldr             x0, [fp, #0x10]
    // 0xbcaa10: StoreField: r1->field_f = r0
    //     0xbcaa10: stur            w0, [x1, #0xf]
    // 0xbcaa14: mov             x2, x1
    // 0xbcaa18: r1 = Function '<anonymous closure>':.
    //     0xbcaa18: add             x1, PP, #0xf, lsl #12  ; [pp+0xf630] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbcaa1c: ldr             x1, [x1, #0x630]
    // 0xbcaa20: r0 = AllocateClosure()
    //     0xbcaa20: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcaa24: str             x0, [SP]
    // 0xbcaa28: r0 = resolveWith()
    //     0xbcaa28: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcaa2c: mov             x1, x0
    // 0xbcaa30: ldur            x0, [fp, #-0x10]
    // 0xbcaa34: stur            x1, [fp, #-0x18]
    // 0xbcaa38: r17 = 5524
    //     0xbcaa38: movz            x17, #0x1594
    // 0xbcaa3c: cmp             w0, w17
    // 0xbcaa40: b.ne            #0xbcaa5c
    // 0xbcaa44: ldr             x2, [fp, #0x18]
    // 0xbcaa48: LoadField: r3 = r2->field_47
    //     0xbcaa48: ldur            w3, [x2, #0x47]
    // 0xbcaa4c: DecompressPointer r3
    //     0xbcaa4c: add             x3, x3, HEAP, lsl #32
    // 0xbcaa50: mov             x0, x1
    // 0xbcaa54: mov             x1, x3
    // 0xbcaa58: b               #0xbcaadc
    // 0xbcaa5c: ldr             x2, [fp, #0x18]
    // 0xbcaa60: r17 = 5526
    //     0xbcaa60: movz            x17, #0x1596
    // 0xbcaa64: cmp             w0, w17
    // 0xbcaa68: b.ne            #0xbcaaa4
    // 0xbcaa6c: r1 = 1
    //     0xbcaa6c: movz            x1, #0x1
    // 0xbcaa70: r0 = AllocateContext()
    //     0xbcaa70: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcaa74: mov             x1, x0
    // 0xbcaa78: ldr             x0, [fp, #0x18]
    // 0xbcaa7c: StoreField: r1->field_f = r0
    //     0xbcaa7c: stur            w0, [x1, #0xf]
    // 0xbcaa80: mov             x2, x1
    // 0xbcaa84: r1 = Function '<anonymous closure>':.
    //     0xbcaa84: add             x1, PP, #0xf, lsl #12  ; [pp+0xf628] AnonymousClosure: (0x93f2f4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcaa88: ldr             x1, [x1, #0x628]
    // 0xbcaa8c: r0 = AllocateClosure()
    //     0xbcaa8c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcaa90: str             x0, [SP]
    // 0xbcaa94: r0 = resolveWith()
    //     0xbcaa94: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcaa98: mov             x1, x0
    // 0xbcaa9c: ldur            x0, [fp, #-0x18]
    // 0xbcaaa0: b               #0xbcaadc
    // 0xbcaaa4: mov             x0, x2
    // 0xbcaaa8: r1 = 1
    //     0xbcaaa8: movz            x1, #0x1
    // 0xbcaaac: r0 = AllocateContext()
    //     0xbcaaac: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcaab0: mov             x1, x0
    // 0xbcaab4: ldr             x0, [fp, #0x18]
    // 0xbcaab8: StoreField: r1->field_f = r0
    //     0xbcaab8: stur            w0, [x1, #0xf]
    // 0xbcaabc: mov             x2, x1
    // 0xbcaac0: r1 = Function '<anonymous closure>':.
    //     0xbcaac0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf630] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbcaac4: ldr             x1, [x1, #0x630]
    // 0xbcaac8: r0 = AllocateClosure()
    //     0xbcaac8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcaacc: str             x0, [SP]
    // 0xbcaad0: r0 = resolveWith()
    //     0xbcaad0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcaad4: mov             x1, x0
    // 0xbcaad8: ldur            x0, [fp, #-0x18]
    // 0xbcaadc: r2 = LoadClassIdInstr(r0)
    //     0xbcaadc: ldur            x2, [x0, #-1]
    //     0xbcaae0: ubfx            x2, x2, #0xc, #0x14
    // 0xbcaae4: stp             x1, x0, [SP]
    // 0xbcaae8: mov             x0, x2
    // 0xbcaaec: mov             lr, x0
    // 0xbcaaf0: ldr             lr, [x21, lr, lsl #3]
    // 0xbcaaf4: blr             lr
    // 0xbcaaf8: tbnz            w0, #4, #0xbcae5c
    // 0xbcaafc: ldur            x0, [fp, #-8]
    // 0xbcab00: r17 = 5524
    //     0xbcab00: movz            x17, #0x1594
    // 0xbcab04: cmp             w0, w17
    // 0xbcab08: b.ne            #0xbcab20
    // 0xbcab0c: ldr             x1, [fp, #0x10]
    // 0xbcab10: LoadField: r2 = r1->field_53
    //     0xbcab10: ldur            w2, [x1, #0x53]
    // 0xbcab14: DecompressPointer r2
    //     0xbcab14: add             x2, x2, HEAP, lsl #32
    // 0xbcab18: mov             x1, x2
    // 0xbcab1c: b               #0xbcab98
    // 0xbcab20: ldr             x1, [fp, #0x10]
    // 0xbcab24: r17 = 5526
    //     0xbcab24: movz            x17, #0x1596
    // 0xbcab28: cmp             w0, w17
    // 0xbcab2c: b.ne            #0xbcab64
    // 0xbcab30: r1 = 1
    //     0xbcab30: movz            x1, #0x1
    // 0xbcab34: r0 = AllocateContext()
    //     0xbcab34: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcab38: mov             x1, x0
    // 0xbcab3c: ldr             x0, [fp, #0x10]
    // 0xbcab40: StoreField: r1->field_f = r0
    //     0xbcab40: stur            w0, [x1, #0xf]
    // 0xbcab44: mov             x2, x1
    // 0xbcab48: r1 = Function '<anonymous closure>':.
    //     0xbcab48: add             x1, PP, #0xf, lsl #12  ; [pp+0xf638] AnonymousClosure: (0x93fa4c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcab4c: ldr             x1, [x1, #0x638]
    // 0xbcab50: r0 = AllocateClosure()
    //     0xbcab50: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcab54: str             x0, [SP]
    // 0xbcab58: r0 = resolveWith()
    //     0xbcab58: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcab5c: mov             x1, x0
    // 0xbcab60: b               #0xbcab98
    // 0xbcab64: mov             x0, x1
    // 0xbcab68: r1 = 1
    //     0xbcab68: movz            x1, #0x1
    // 0xbcab6c: r0 = AllocateContext()
    //     0xbcab6c: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcab70: mov             x1, x0
    // 0xbcab74: ldr             x0, [fp, #0x10]
    // 0xbcab78: StoreField: r1->field_f = r0
    //     0xbcab78: stur            w0, [x1, #0xf]
    // 0xbcab7c: mov             x2, x1
    // 0xbcab80: r1 = Function '<anonymous closure>':.
    //     0xbcab80: add             x1, PP, #0xf, lsl #12  ; [pp+0xf640] AnonymousClosure: (0x93f928), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbcab84: ldr             x1, [x1, #0x640]
    // 0xbcab88: r0 = AllocateClosure()
    //     0xbcab88: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcab8c: str             x0, [SP]
    // 0xbcab90: r0 = resolveWith()
    //     0xbcab90: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcab94: mov             x1, x0
    // 0xbcab98: ldur            x0, [fp, #-0x10]
    // 0xbcab9c: stur            x1, [fp, #-0x18]
    // 0xbcaba0: r17 = 5524
    //     0xbcaba0: movz            x17, #0x1594
    // 0xbcaba4: cmp             w0, w17
    // 0xbcaba8: b.ne            #0xbcabc4
    // 0xbcabac: ldr             x2, [fp, #0x18]
    // 0xbcabb0: LoadField: r3 = r2->field_53
    //     0xbcabb0: ldur            w3, [x2, #0x53]
    // 0xbcabb4: DecompressPointer r3
    //     0xbcabb4: add             x3, x3, HEAP, lsl #32
    // 0xbcabb8: mov             x0, x1
    // 0xbcabbc: mov             x1, x3
    // 0xbcabc0: b               #0xbcac44
    // 0xbcabc4: ldr             x2, [fp, #0x18]
    // 0xbcabc8: r17 = 5526
    //     0xbcabc8: movz            x17, #0x1596
    // 0xbcabcc: cmp             w0, w17
    // 0xbcabd0: b.ne            #0xbcac0c
    // 0xbcabd4: r1 = 1
    //     0xbcabd4: movz            x1, #0x1
    // 0xbcabd8: r0 = AllocateContext()
    //     0xbcabd8: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcabdc: mov             x1, x0
    // 0xbcabe0: ldr             x0, [fp, #0x18]
    // 0xbcabe4: StoreField: r1->field_f = r0
    //     0xbcabe4: stur            w0, [x1, #0xf]
    // 0xbcabe8: mov             x2, x1
    // 0xbcabec: r1 = Function '<anonymous closure>':.
    //     0xbcabec: add             x1, PP, #0xf, lsl #12  ; [pp+0xf638] AnonymousClosure: (0x93fa4c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcabf0: ldr             x1, [x1, #0x638]
    // 0xbcabf4: r0 = AllocateClosure()
    //     0xbcabf4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcabf8: str             x0, [SP]
    // 0xbcabfc: r0 = resolveWith()
    //     0xbcabfc: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcac00: mov             x1, x0
    // 0xbcac04: ldur            x0, [fp, #-0x18]
    // 0xbcac08: b               #0xbcac44
    // 0xbcac0c: mov             x0, x2
    // 0xbcac10: r1 = 1
    //     0xbcac10: movz            x1, #0x1
    // 0xbcac14: r0 = AllocateContext()
    //     0xbcac14: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcac18: mov             x1, x0
    // 0xbcac1c: ldr             x0, [fp, #0x18]
    // 0xbcac20: StoreField: r1->field_f = r0
    //     0xbcac20: stur            w0, [x1, #0xf]
    // 0xbcac24: mov             x2, x1
    // 0xbcac28: r1 = Function '<anonymous closure>':.
    //     0xbcac28: add             x1, PP, #0xf, lsl #12  ; [pp+0xf640] AnonymousClosure: (0x93f928), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0xbcac2c: ldr             x1, [x1, #0x640]
    // 0xbcac30: r0 = AllocateClosure()
    //     0xbcac30: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcac34: str             x0, [SP]
    // 0xbcac38: r0 = resolveWith()
    //     0xbcac38: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0xbcac3c: mov             x1, x0
    // 0xbcac40: ldur            x0, [fp, #-0x18]
    // 0xbcac44: r2 = LoadClassIdInstr(r0)
    //     0xbcac44: ldur            x2, [x0, #-1]
    //     0xbcac48: ubfx            x2, x2, #0xc, #0x14
    // 0xbcac4c: stp             x1, x0, [SP]
    // 0xbcac50: mov             x0, x2
    // 0xbcac54: mov             lr, x0
    // 0xbcac58: ldr             lr, [x21, lr, lsl #3]
    // 0xbcac5c: blr             lr
    // 0xbcac60: tbnz            w0, #4, #0xbcae5c
    // 0xbcac64: ldur            x0, [fp, #-8]
    // 0xbcac68: r17 = 5524
    //     0xbcac68: movz            x17, #0x1594
    // 0xbcac6c: cmp             w0, w17
    // 0xbcac70: b.eq            #0xbcacbc
    // 0xbcac74: r17 = 5526
    //     0xbcac74: movz            x17, #0x1596
    // 0xbcac78: cmp             w0, w17
    // 0xbcac7c: b.ne            #0xbcacbc
    // 0xbcac80: ldr             x1, [fp, #0x10]
    // 0xbcac84: r1 = 1
    //     0xbcac84: movz            x1, #0x1
    // 0xbcac88: r0 = AllocateContext()
    //     0xbcac88: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcac8c: mov             x1, x0
    // 0xbcac90: ldr             x0, [fp, #0x10]
    // 0xbcac94: StoreField: r1->field_f = r0
    //     0xbcac94: stur            w0, [x1, #0xf]
    // 0xbcac98: mov             x2, x1
    // 0xbcac9c: r1 = Function '<anonymous closure>':.
    //     0xbcac9c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf648] AnonymousClosure: (0x940ba8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcaca0: ldr             x1, [x1, #0x648]
    // 0xbcaca4: r0 = AllocateClosure()
    //     0xbcaca4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcaca8: str             x0, [SP]
    // 0xbcacac: r0 = resolveWith()
    //     0xbcacac: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xbcacb0: mov             x2, x0
    // 0xbcacb4: ldr             x0, [fp, #0x10]
    // 0xbcacb8: b               #0xbcaccc
    // 0xbcacbc: ldr             x0, [fp, #0x10]
    // 0xbcacc0: LoadField: r1 = r0->field_5b
    //     0xbcacc0: ldur            w1, [x0, #0x5b]
    // 0xbcacc4: DecompressPointer r1
    //     0xbcacc4: add             x1, x1, HEAP, lsl #32
    // 0xbcacc8: mov             x2, x1
    // 0xbcaccc: ldur            x1, [fp, #-0x10]
    // 0xbcacd0: stur            x2, [fp, #-0x18]
    // 0xbcacd4: r17 = 5524
    //     0xbcacd4: movz            x17, #0x1594
    // 0xbcacd8: cmp             w1, w17
    // 0xbcacdc: b.eq            #0xbcad28
    // 0xbcace0: r17 = 5526
    //     0xbcace0: movz            x17, #0x1596
    // 0xbcace4: cmp             w1, w17
    // 0xbcace8: b.ne            #0xbcad28
    // 0xbcacec: ldr             x3, [fp, #0x18]
    // 0xbcacf0: r1 = 1
    //     0xbcacf0: movz            x1, #0x1
    // 0xbcacf4: r0 = AllocateContext()
    //     0xbcacf4: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcacf8: mov             x1, x0
    // 0xbcacfc: ldr             x0, [fp, #0x18]
    // 0xbcad00: StoreField: r1->field_f = r0
    //     0xbcad00: stur            w0, [x1, #0xf]
    // 0xbcad04: mov             x2, x1
    // 0xbcad08: r1 = Function '<anonymous closure>':.
    //     0xbcad08: add             x1, PP, #0xf, lsl #12  ; [pp+0xf648] AnonymousClosure: (0x940ba8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcad0c: ldr             x1, [x1, #0x648]
    // 0xbcad10: r0 = AllocateClosure()
    //     0xbcad10: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcad14: str             x0, [SP]
    // 0xbcad18: r0 = resolveWith()
    //     0xbcad18: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xbcad1c: mov             x2, x0
    // 0xbcad20: ldr             x1, [fp, #0x18]
    // 0xbcad24: b               #0xbcad38
    // 0xbcad28: ldr             x1, [fp, #0x18]
    // 0xbcad2c: LoadField: r0 = r1->field_5b
    //     0xbcad2c: ldur            w0, [x1, #0x5b]
    // 0xbcad30: DecompressPointer r0
    //     0xbcad30: add             x0, x0, HEAP, lsl #32
    // 0xbcad34: mov             x2, x0
    // 0xbcad38: ldur            x0, [fp, #-0x18]
    // 0xbcad3c: r3 = LoadClassIdInstr(r0)
    //     0xbcad3c: ldur            x3, [x0, #-1]
    //     0xbcad40: ubfx            x3, x3, #0xc, #0x14
    // 0xbcad44: stp             x2, x0, [SP]
    // 0xbcad48: mov             x0, x3
    // 0xbcad4c: mov             lr, x0
    // 0xbcad50: ldr             lr, [x21, lr, lsl #3]
    // 0xbcad54: blr             lr
    // 0xbcad58: tbnz            w0, #4, #0xbcae5c
    // 0xbcad5c: ldur            x0, [fp, #-8]
    // 0xbcad60: r17 = 5524
    //     0xbcad60: movz            x17, #0x1594
    // 0xbcad64: cmp             w0, w17
    // 0xbcad68: b.ne            #0xbcad74
    // 0xbcad6c: ldr             x0, [fp, #0x10]
    // 0xbcad70: b               #0xbcadbc
    // 0xbcad74: r17 = 5526
    //     0xbcad74: movz            x17, #0x1596
    // 0xbcad78: cmp             w0, w17
    // 0xbcad7c: b.ne            #0xbcadb8
    // 0xbcad80: ldr             x0, [fp, #0x10]
    // 0xbcad84: r1 = 1
    //     0xbcad84: movz            x1, #0x1
    // 0xbcad88: r0 = AllocateContext()
    //     0xbcad88: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcad8c: mov             x1, x0
    // 0xbcad90: ldr             x0, [fp, #0x10]
    // 0xbcad94: StoreField: r1->field_f = r0
    //     0xbcad94: stur            w0, [x1, #0xf]
    // 0xbcad98: mov             x2, x1
    // 0xbcad9c: r1 = Function '<anonymous closure>':.
    //     0xbcad9c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf650] AnonymousClosure: (0x940664), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcada0: ldr             x1, [x1, #0x650]
    // 0xbcada4: r0 = AllocateClosure()
    //     0xbcada4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcada8: str             x0, [SP]
    // 0xbcadac: r0 = resolveWith()
    //     0xbcadac: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xbcadb0: mov             x1, x0
    // 0xbcadb4: b               #0xbcadc4
    // 0xbcadb8: ldr             x0, [fp, #0x10]
    // 0xbcadbc: LoadField: r1 = r0->field_57
    //     0xbcadbc: ldur            w1, [x0, #0x57]
    // 0xbcadc0: DecompressPointer r1
    //     0xbcadc0: add             x1, x1, HEAP, lsl #32
    // 0xbcadc4: ldur            x0, [fp, #-0x10]
    // 0xbcadc8: stur            x1, [fp, #-8]
    // 0xbcadcc: r17 = 5524
    //     0xbcadcc: movz            x17, #0x1594
    // 0xbcadd0: cmp             w0, w17
    // 0xbcadd4: b.ne            #0xbcade0
    // 0xbcadd8: ldr             x0, [fp, #0x18]
    // 0xbcaddc: b               #0xbcae28
    // 0xbcade0: r17 = 5526
    //     0xbcade0: movz            x17, #0x1596
    // 0xbcade4: cmp             w0, w17
    // 0xbcade8: b.ne            #0xbcae24
    // 0xbcadec: ldr             x0, [fp, #0x18]
    // 0xbcadf0: r1 = 1
    //     0xbcadf0: movz            x1, #0x1
    // 0xbcadf4: r0 = AllocateContext()
    //     0xbcadf4: bl              #0xc5def4  ; AllocateContextStub
    // 0xbcadf8: mov             x1, x0
    // 0xbcadfc: ldr             x0, [fp, #0x18]
    // 0xbcae00: StoreField: r1->field_f = r0
    //     0xbcae00: stur            w0, [x1, #0xf]
    // 0xbcae04: mov             x2, x1
    // 0xbcae08: r1 = Function '<anonymous closure>':.
    //     0xbcae08: add             x1, PP, #0xf, lsl #12  ; [pp+0xf650] AnonymousClosure: (0x940664), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0xbcae0c: ldr             x1, [x1, #0x650]
    // 0xbcae10: r0 = AllocateClosure()
    //     0xbcae10: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xbcae14: str             x0, [SP]
    // 0xbcae18: r0 = resolveWith()
    //     0xbcae18: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0xbcae1c: mov             x1, x0
    // 0xbcae20: b               #0xbcae30
    // 0xbcae24: ldr             x0, [fp, #0x18]
    // 0xbcae28: LoadField: r1 = r0->field_57
    //     0xbcae28: ldur            w1, [x0, #0x57]
    // 0xbcae2c: DecompressPointer r1
    //     0xbcae2c: add             x1, x1, HEAP, lsl #32
    // 0xbcae30: ldur            x0, [fp, #-8]
    // 0xbcae34: r2 = LoadClassIdInstr(r0)
    //     0xbcae34: ldur            x2, [x0, #-1]
    //     0xbcae38: ubfx            x2, x2, #0xc, #0x14
    // 0xbcae3c: stp             x1, x0, [SP]
    // 0xbcae40: mov             x0, x2
    // 0xbcae44: mov             lr, x0
    // 0xbcae48: ldr             lr, [x21, lr, lsl #3]
    // 0xbcae4c: blr             lr
    // 0xbcae50: tbnz            w0, #4, #0xbcae5c
    // 0xbcae54: r0 = true
    //     0xbcae54: add             x0, NULL, #0x20  ; true
    // 0xbcae58: b               #0xbcae60
    // 0xbcae5c: r0 = false
    //     0xbcae5c: add             x0, NULL, #0x30  ; false
    // 0xbcae60: LeaveFrame
    //     0xbcae60: mov             SP, fp
    //     0xbcae64: ldp             fp, lr, [SP], #0x10
    // 0xbcae68: ret
    //     0xbcae68: ret             
    // 0xbcae6c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbcae6c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbcae70: b               #0xbc9edc
  }
}

// class id: 2763, size: 0x94, field offset: 0x88
class _InputDecoratorDefaultsM3 extends InputDecorationTheme {

  late final ColorScheme _colors; // offset: 0x8c
  late final TextTheme _textTheme; // offset: 0x90

  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93e9d8, size: 0xd0
    // 0x93e9d8: EnterFrame
    //     0x93e9d8: stp             fp, lr, [SP, #-0x10]!
    //     0x93e9dc: mov             fp, SP
    // 0x93e9e0: AllocStack(0x20)
    //     0x93e9e0: sub             SP, SP, #0x20
    // 0x93e9e4: SetupParameters()
    //     0x93e9e4: ldr             x0, [fp, #0x18]
    //     0x93e9e8: ldur            w2, [x0, #0x17]
    //     0x93e9ec: add             x2, x2, HEAP, lsl #32
    //     0x93e9f0: stur            x2, [fp, #-8]
    // 0x93e9f4: CheckStackOverflow
    //     0x93e9f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93e9f8: cmp             SP, x16
    //     0x93e9fc: b.ls            #0x93eaa0
    // 0x93ea00: LoadField: r1 = r2->field_f
    //     0x93ea00: ldur            w1, [x2, #0xf]
    // 0x93ea04: DecompressPointer r1
    //     0x93ea04: add             x1, x1, HEAP, lsl #32
    // 0x93ea08: LoadField: r0 = r1->field_8f
    //     0x93ea08: ldur            w0, [x1, #0x8f]
    // 0x93ea0c: DecompressPointer r0
    //     0x93ea0c: add             x0, x0, HEAP, lsl #32
    // 0x93ea10: r16 = Sentinel
    //     0x93ea10: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93ea14: cmp             w0, w16
    // 0x93ea18: b.ne            #0x93ea28
    // 0x93ea1c: r2 = _textTheme
    //     0x93ea1c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf688] Field <_InputDecoratorDefaultsM3@159019562._textTheme@159019562>: late final (offset: 0x90)
    //     0x93ea20: ldr             x2, [x2, #0x688]
    // 0x93ea24: r0 = InitLateFinalInstanceField()
    //     0x93ea24: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93ea28: LoadField: r1 = r0->field_33
    //     0x93ea28: ldur            w1, [x0, #0x33]
    // 0x93ea2c: DecompressPointer r1
    //     0x93ea2c: add             x1, x1, HEAP, lsl #32
    // 0x93ea30: cmp             w1, NULL
    // 0x93ea34: b.ne            #0x93ea44
    // 0x93ea38: r2 = Instance_TextStyle
    //     0x93ea38: add             x2, PP, #0xf, lsl #12  ; [pp+0xf690] Obj!TextStyle@c360f1
    //     0x93ea3c: ldr             x2, [x2, #0x690]
    // 0x93ea40: b               #0x93ea48
    // 0x93ea44: mov             x2, x1
    // 0x93ea48: ldur            x0, [fp, #-8]
    // 0x93ea4c: stur            x2, [fp, #-0x10]
    // 0x93ea50: LoadField: r1 = r0->field_f
    //     0x93ea50: ldur            w1, [x0, #0xf]
    // 0x93ea54: DecompressPointer r1
    //     0x93ea54: add             x1, x1, HEAP, lsl #32
    // 0x93ea58: LoadField: r0 = r1->field_8b
    //     0x93ea58: ldur            w0, [x1, #0x8b]
    // 0x93ea5c: DecompressPointer r0
    //     0x93ea5c: add             x0, x0, HEAP, lsl #32
    // 0x93ea60: r16 = Sentinel
    //     0x93ea60: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93ea64: cmp             w0, w16
    // 0x93ea68: b.ne            #0x93ea78
    // 0x93ea6c: r2 = _colors
    //     0x93ea6c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93ea70: ldr             x2, [x2, #0x608]
    // 0x93ea74: r0 = InitLateFinalInstanceField()
    //     0x93ea74: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93ea78: LoadField: r1 = r0->field_3b
    //     0x93ea78: ldur            w1, [x0, #0x3b]
    // 0x93ea7c: DecompressPointer r1
    //     0x93ea7c: add             x1, x1, HEAP, lsl #32
    // 0x93ea80: ldur            x16, [fp, #-0x10]
    // 0x93ea84: stp             x1, x16, [SP]
    // 0x93ea88: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93ea88: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93ea8c: ldr             x4, [x4, #0x490]
    // 0x93ea90: r0 = copyWith()
    //     0x93ea90: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93ea94: LeaveFrame
    //     0x93ea94: mov             SP, fp
    //     0x93ea98: ldp             fp, lr, [SP], #0x10
    // 0x93ea9c: ret
    //     0x93ea9c: ret             
    // 0x93eaa0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93eaa0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93eaa4: b               #0x93ea00
  }
  TextTheme _textTheme(_InputDecoratorDefaultsM3) {
    // ** addr: 0x93eaa8, size: 0x4c
    // 0x93eaa8: EnterFrame
    //     0x93eaa8: stp             fp, lr, [SP, #-0x10]!
    //     0x93eaac: mov             fp, SP
    // 0x93eab0: AllocStack(0x8)
    //     0x93eab0: sub             SP, SP, #8
    // 0x93eab4: CheckStackOverflow
    //     0x93eab4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93eab8: cmp             SP, x16
    //     0x93eabc: b.ls            #0x93eaec
    // 0x93eac0: ldr             x0, [fp, #0x10]
    // 0x93eac4: LoadField: r1 = r0->field_87
    //     0x93eac4: ldur            w1, [x0, #0x87]
    // 0x93eac8: DecompressPointer r1
    //     0x93eac8: add             x1, x1, HEAP, lsl #32
    // 0x93eacc: str             x1, [SP]
    // 0x93ead0: r0 = of()
    //     0x93ead0: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93ead4: LoadField: r1 = r0->field_93
    //     0x93ead4: ldur            w1, [x0, #0x93]
    // 0x93ead8: DecompressPointer r1
    //     0x93ead8: add             x1, x1, HEAP, lsl #32
    // 0x93eadc: mov             x0, x1
    // 0x93eae0: LeaveFrame
    //     0x93eae0: mov             SP, fp
    //     0x93eae4: ldp             fp, lr, [SP], #0x10
    // 0x93eae8: ret
    //     0x93eae8: ret             
    // 0x93eaec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93eaec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93eaf0: b               #0x93eac0
  }
  ColorScheme _colors(_InputDecoratorDefaultsM3) {
    // ** addr: 0x93eaf4, size: 0x4c
    // 0x93eaf4: EnterFrame
    //     0x93eaf4: stp             fp, lr, [SP, #-0x10]!
    //     0x93eaf8: mov             fp, SP
    // 0x93eafc: AllocStack(0x8)
    //     0x93eafc: sub             SP, SP, #8
    // 0x93eb00: CheckStackOverflow
    //     0x93eb00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93eb04: cmp             SP, x16
    //     0x93eb08: b.ls            #0x93eb38
    // 0x93eb0c: ldr             x0, [fp, #0x10]
    // 0x93eb10: LoadField: r1 = r0->field_87
    //     0x93eb10: ldur            w1, [x0, #0x87]
    // 0x93eb14: DecompressPointer r1
    //     0x93eb14: add             x1, x1, HEAP, lsl #32
    // 0x93eb18: str             x1, [SP]
    // 0x93eb1c: r0 = of()
    //     0x93eb1c: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93eb20: LoadField: r1 = r0->field_3f
    //     0x93eb20: ldur            w1, [x0, #0x3f]
    // 0x93eb24: DecompressPointer r1
    //     0x93eb24: add             x1, x1, HEAP, lsl #32
    // 0x93eb28: mov             x0, x1
    // 0x93eb2c: LeaveFrame
    //     0x93eb2c: mov             SP, fp
    //     0x93eb30: ldp             fp, lr, [SP], #0x10
    // 0x93eb34: ret
    //     0x93eb34: ret             
    // 0x93eb38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93eb38: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93eb3c: b               #0x93eb0c
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93ed74, size: 0x180
    // 0x93ed74: EnterFrame
    //     0x93ed74: stp             fp, lr, [SP, #-0x10]!
    //     0x93ed78: mov             fp, SP
    // 0x93ed7c: AllocStack(0x20)
    //     0x93ed7c: sub             SP, SP, #0x20
    // 0x93ed80: SetupParameters()
    //     0x93ed80: ldr             x0, [fp, #0x18]
    //     0x93ed84: ldur            w2, [x0, #0x17]
    //     0x93ed88: add             x2, x2, HEAP, lsl #32
    //     0x93ed8c: stur            x2, [fp, #-8]
    // 0x93ed90: CheckStackOverflow
    //     0x93ed90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93ed94: cmp             SP, x16
    //     0x93ed98: b.ls            #0x93eeec
    // 0x93ed9c: LoadField: r1 = r2->field_f
    //     0x93ed9c: ldur            w1, [x2, #0xf]
    // 0x93eda0: DecompressPointer r1
    //     0x93eda0: add             x1, x1, HEAP, lsl #32
    // 0x93eda4: LoadField: r0 = r1->field_8f
    //     0x93eda4: ldur            w0, [x1, #0x8f]
    // 0x93eda8: DecompressPointer r0
    //     0x93eda8: add             x0, x0, HEAP, lsl #32
    // 0x93edac: r16 = Sentinel
    //     0x93edac: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93edb0: cmp             w0, w16
    // 0x93edb4: b.ne            #0x93edc4
    // 0x93edb8: r2 = _textTheme
    //     0x93edb8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf688] Field <_InputDecoratorDefaultsM3@159019562._textTheme@159019562>: late final (offset: 0x90)
    //     0x93edbc: ldr             x2, [x2, #0x688]
    // 0x93edc0: r0 = InitLateFinalInstanceField()
    //     0x93edc0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93edc4: LoadField: r1 = r0->field_33
    //     0x93edc4: ldur            w1, [x0, #0x33]
    // 0x93edc8: DecompressPointer r1
    //     0x93edc8: add             x1, x1, HEAP, lsl #32
    // 0x93edcc: cmp             w1, NULL
    // 0x93edd0: b.ne            #0x93eddc
    // 0x93edd4: r1 = Instance_TextStyle
    //     0x93edd4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf690] Obj!TextStyle@c360f1
    //     0x93edd8: ldr             x1, [x1, #0x690]
    // 0x93eddc: ldr             x0, [fp, #0x10]
    // 0x93ede0: stur            x1, [fp, #-0x10]
    // 0x93ede4: r2 = LoadClassIdInstr(r0)
    //     0x93ede4: ldur            x2, [x0, #-1]
    //     0x93ede8: ubfx            x2, x2, #0xc, #0x14
    // 0x93edec: r16 = Instance_MaterialState
    //     0x93edec: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93edf0: ldr             x16, [x16, #0x518]
    // 0x93edf4: stp             x16, x0, [SP]
    // 0x93edf8: mov             x0, x2
    // 0x93edfc: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93edfc: movz            x17, #0x1871
    //     0x93ee00: movk            x17, #0x1, lsl #16
    //     0x93ee04: add             lr, x0, x17
    //     0x93ee08: ldr             lr, [x21, lr, lsl #3]
    //     0x93ee0c: blr             lr
    // 0x93ee10: tbnz            w0, #4, #0x93ee7c
    // 0x93ee14: ldur            x0, [fp, #-8]
    // 0x93ee18: LoadField: r1 = r0->field_f
    //     0x93ee18: ldur            w1, [x0, #0xf]
    // 0x93ee1c: DecompressPointer r1
    //     0x93ee1c: add             x1, x1, HEAP, lsl #32
    // 0x93ee20: LoadField: r0 = r1->field_8b
    //     0x93ee20: ldur            w0, [x1, #0x8b]
    // 0x93ee24: DecompressPointer r0
    //     0x93ee24: add             x0, x0, HEAP, lsl #32
    // 0x93ee28: r16 = Sentinel
    //     0x93ee28: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93ee2c: cmp             w0, w16
    // 0x93ee30: b.ne            #0x93ee40
    // 0x93ee34: r2 = _colors
    //     0x93ee34: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93ee38: ldr             x2, [x2, #0x608]
    // 0x93ee3c: r0 = InitLateFinalInstanceField()
    //     0x93ee3c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93ee40: LoadField: r1 = r0->field_57
    //     0x93ee40: ldur            w1, [x0, #0x57]
    // 0x93ee44: DecompressPointer r1
    //     0x93ee44: add             x1, x1, HEAP, lsl #32
    // 0x93ee48: str             x1, [SP, #8]
    // 0x93ee4c: d0 = 0.380000
    //     0x93ee4c: add             x17, PP, #0xf, lsl #12  ; [pp+0xf468] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x93ee50: ldr             d0, [x17, #0x468]
    // 0x93ee54: str             d0, [SP]
    // 0x93ee58: r0 = withOpacity()
    //     0x93ee58: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x93ee5c: ldur            x16, [fp, #-0x10]
    // 0x93ee60: stp             x0, x16, [SP]
    // 0x93ee64: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93ee64: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93ee68: ldr             x4, [x4, #0x490]
    // 0x93ee6c: r0 = copyWith()
    //     0x93ee6c: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93ee70: LeaveFrame
    //     0x93ee70: mov             SP, fp
    //     0x93ee74: ldp             fp, lr, [SP], #0x10
    // 0x93ee78: ret
    //     0x93ee78: ret             
    // 0x93ee7c: ldur            x0, [fp, #-8]
    // 0x93ee80: LoadField: r1 = r0->field_f
    //     0x93ee80: ldur            w1, [x0, #0xf]
    // 0x93ee84: DecompressPointer r1
    //     0x93ee84: add             x1, x1, HEAP, lsl #32
    // 0x93ee88: LoadField: r0 = r1->field_8b
    //     0x93ee88: ldur            w0, [x1, #0x8b]
    // 0x93ee8c: DecompressPointer r0
    //     0x93ee8c: add             x0, x0, HEAP, lsl #32
    // 0x93ee90: r16 = Sentinel
    //     0x93ee90: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93ee94: cmp             w0, w16
    // 0x93ee98: b.ne            #0x93eea8
    // 0x93ee9c: r2 = _colors
    //     0x93ee9c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93eea0: ldr             x2, [x2, #0x608]
    // 0x93eea4: r0 = InitLateFinalInstanceField()
    //     0x93eea4: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93eea8: LoadField: r1 = r0->field_5f
    //     0x93eea8: ldur            w1, [x0, #0x5f]
    // 0x93eeac: DecompressPointer r1
    //     0x93eeac: add             x1, x1, HEAP, lsl #32
    // 0x93eeb0: cmp             w1, NULL
    // 0x93eeb4: b.ne            #0x93eec8
    // 0x93eeb8: LoadField: r1 = r0->field_57
    //     0x93eeb8: ldur            w1, [x0, #0x57]
    // 0x93eebc: DecompressPointer r1
    //     0x93eebc: add             x1, x1, HEAP, lsl #32
    // 0x93eec0: mov             x0, x1
    // 0x93eec4: b               #0x93eecc
    // 0x93eec8: mov             x0, x1
    // 0x93eecc: ldur            x16, [fp, #-0x10]
    // 0x93eed0: stp             x0, x16, [SP]
    // 0x93eed4: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93eed4: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93eed8: ldr             x4, [x4, #0x490]
    // 0x93eedc: r0 = copyWith()
    //     0x93eedc: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93eee0: LeaveFrame
    //     0x93eee0: mov             SP, fp
    //     0x93eee4: ldp             fp, lr, [SP], #0x10
    // 0x93eee8: ret
    //     0x93eee8: ret             
    // 0x93eeec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93eeec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93eef0: b               #0x93ed9c
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93f2f4, size: 0x190
    // 0x93f2f4: EnterFrame
    //     0x93f2f4: stp             fp, lr, [SP, #-0x10]!
    //     0x93f2f8: mov             fp, SP
    // 0x93f2fc: AllocStack(0x18)
    //     0x93f2fc: sub             SP, SP, #0x18
    // 0x93f300: SetupParameters()
    //     0x93f300: ldr             x0, [fp, #0x18]
    //     0x93f304: ldur            w1, [x0, #0x17]
    //     0x93f308: add             x1, x1, HEAP, lsl #32
    //     0x93f30c: stur            x1, [fp, #-8]
    // 0x93f310: CheckStackOverflow
    //     0x93f310: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f314: cmp             SP, x16
    //     0x93f318: b.ls            #0x93f47c
    // 0x93f31c: ldr             x2, [fp, #0x10]
    // 0x93f320: r0 = LoadClassIdInstr(r2)
    //     0x93f320: ldur            x0, [x2, #-1]
    //     0x93f324: ubfx            x0, x0, #0xc, #0x14
    // 0x93f328: r16 = Instance_MaterialState
    //     0x93f328: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93f32c: ldr             x16, [x16, #0x518]
    // 0x93f330: stp             x16, x2, [SP]
    // 0x93f334: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f334: movz            x17, #0x1871
    //     0x93f338: movk            x17, #0x1, lsl #16
    //     0x93f33c: add             lr, x0, x17
    //     0x93f340: ldr             lr, [x21, lr, lsl #3]
    //     0x93f344: blr             lr
    // 0x93f348: tbnz            w0, #4, #0x93f3a4
    // 0x93f34c: ldur            x1, [fp, #-8]
    // 0x93f350: LoadField: r0 = r1->field_f
    //     0x93f350: ldur            w0, [x1, #0xf]
    // 0x93f354: DecompressPointer r0
    //     0x93f354: add             x0, x0, HEAP, lsl #32
    // 0x93f358: mov             x1, x0
    // 0x93f35c: LoadField: r0 = r1->field_8b
    //     0x93f35c: ldur            w0, [x1, #0x8b]
    // 0x93f360: DecompressPointer r0
    //     0x93f360: add             x0, x0, HEAP, lsl #32
    // 0x93f364: r16 = Sentinel
    //     0x93f364: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93f368: cmp             w0, w16
    // 0x93f36c: b.ne            #0x93f37c
    // 0x93f370: r2 = _colors
    //     0x93f370: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93f374: ldr             x2, [x2, #0x608]
    // 0x93f378: r0 = InitLateFinalInstanceField()
    //     0x93f378: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93f37c: LoadField: r1 = r0->field_57
    //     0x93f37c: ldur            w1, [x0, #0x57]
    // 0x93f380: DecompressPointer r1
    //     0x93f380: add             x1, x1, HEAP, lsl #32
    // 0x93f384: str             x1, [SP, #8]
    // 0x93f388: d0 = 0.380000
    //     0x93f388: add             x17, PP, #0xf, lsl #12  ; [pp+0xf468] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x93f38c: ldr             d0, [x17, #0x468]
    // 0x93f390: str             d0, [SP]
    // 0x93f394: r0 = withOpacity()
    //     0x93f394: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x93f398: LeaveFrame
    //     0x93f398: mov             SP, fp
    //     0x93f39c: ldp             fp, lr, [SP], #0x10
    // 0x93f3a0: ret
    //     0x93f3a0: ret             
    // 0x93f3a4: ldr             x0, [fp, #0x10]
    // 0x93f3a8: ldur            x1, [fp, #-8]
    // 0x93f3ac: r2 = LoadClassIdInstr(r0)
    //     0x93f3ac: ldur            x2, [x0, #-1]
    //     0x93f3b0: ubfx            x2, x2, #0xc, #0x14
    // 0x93f3b4: r16 = Instance_MaterialState
    //     0x93f3b4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0x93f3b8: ldr             x16, [x16, #0x660]
    // 0x93f3bc: stp             x16, x0, [SP]
    // 0x93f3c0: mov             x0, x2
    // 0x93f3c4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f3c4: movz            x17, #0x1871
    //     0x93f3c8: movk            x17, #0x1, lsl #16
    //     0x93f3cc: add             lr, x0, x17
    //     0x93f3d0: ldr             lr, [x21, lr, lsl #3]
    //     0x93f3d4: blr             lr
    // 0x93f3d8: tbnz            w0, #4, #0x93f420
    // 0x93f3dc: ldur            x0, [fp, #-8]
    // 0x93f3e0: LoadField: r1 = r0->field_f
    //     0x93f3e0: ldur            w1, [x0, #0xf]
    // 0x93f3e4: DecompressPointer r1
    //     0x93f3e4: add             x1, x1, HEAP, lsl #32
    // 0x93f3e8: LoadField: r0 = r1->field_8b
    //     0x93f3e8: ldur            w0, [x1, #0x8b]
    // 0x93f3ec: DecompressPointer r0
    //     0x93f3ec: add             x0, x0, HEAP, lsl #32
    // 0x93f3f0: r16 = Sentinel
    //     0x93f3f0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93f3f4: cmp             w0, w16
    // 0x93f3f8: b.ne            #0x93f408
    // 0x93f3fc: r2 = _colors
    //     0x93f3fc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93f400: ldr             x2, [x2, #0x608]
    // 0x93f404: r0 = InitLateFinalInstanceField()
    //     0x93f404: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93f408: LoadField: r1 = r0->field_3b
    //     0x93f408: ldur            w1, [x0, #0x3b]
    // 0x93f40c: DecompressPointer r1
    //     0x93f40c: add             x1, x1, HEAP, lsl #32
    // 0x93f410: mov             x0, x1
    // 0x93f414: LeaveFrame
    //     0x93f414: mov             SP, fp
    //     0x93f418: ldp             fp, lr, [SP], #0x10
    // 0x93f41c: ret
    //     0x93f41c: ret             
    // 0x93f420: ldur            x0, [fp, #-8]
    // 0x93f424: LoadField: r1 = r0->field_f
    //     0x93f424: ldur            w1, [x0, #0xf]
    // 0x93f428: DecompressPointer r1
    //     0x93f428: add             x1, x1, HEAP, lsl #32
    // 0x93f42c: LoadField: r0 = r1->field_8b
    //     0x93f42c: ldur            w0, [x1, #0x8b]
    // 0x93f430: DecompressPointer r0
    //     0x93f430: add             x0, x0, HEAP, lsl #32
    // 0x93f434: r16 = Sentinel
    //     0x93f434: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93f438: cmp             w0, w16
    // 0x93f43c: b.ne            #0x93f44c
    // 0x93f440: r2 = _colors
    //     0x93f440: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93f444: ldr             x2, [x2, #0x608]
    // 0x93f448: r0 = InitLateFinalInstanceField()
    //     0x93f448: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93f44c: LoadField: r1 = r0->field_5f
    //     0x93f44c: ldur            w1, [x0, #0x5f]
    // 0x93f450: DecompressPointer r1
    //     0x93f450: add             x1, x1, HEAP, lsl #32
    // 0x93f454: cmp             w1, NULL
    // 0x93f458: b.ne            #0x93f46c
    // 0x93f45c: LoadField: r2 = r0->field_57
    //     0x93f45c: ldur            w2, [x0, #0x57]
    // 0x93f460: DecompressPointer r2
    //     0x93f460: add             x2, x2, HEAP, lsl #32
    // 0x93f464: mov             x0, x2
    // 0x93f468: b               #0x93f470
    // 0x93f46c: mov             x0, x1
    // 0x93f470: LeaveFrame
    //     0x93f470: mov             SP, fp
    //     0x93f474: ldp             fp, lr, [SP], #0x10
    // 0x93f478: ret
    //     0x93f478: ret             
    // 0x93f47c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f47c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f480: b               #0x93f31c
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93f5c4, size: 0x84
    // 0x93f5c4: EnterFrame
    //     0x93f5c4: stp             fp, lr, [SP, #-0x10]!
    //     0x93f5c8: mov             fp, SP
    // 0x93f5cc: ldr             x0, [fp, #0x18]
    // 0x93f5d0: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x93f5d0: ldur            w1, [x0, #0x17]
    // 0x93f5d4: DecompressPointer r1
    //     0x93f5d4: add             x1, x1, HEAP, lsl #32
    // 0x93f5d8: CheckStackOverflow
    //     0x93f5d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f5dc: cmp             SP, x16
    //     0x93f5e0: b.ls            #0x93f640
    // 0x93f5e4: LoadField: r0 = r1->field_f
    //     0x93f5e4: ldur            w0, [x1, #0xf]
    // 0x93f5e8: DecompressPointer r0
    //     0x93f5e8: add             x0, x0, HEAP, lsl #32
    // 0x93f5ec: mov             x1, x0
    // 0x93f5f0: LoadField: r0 = r1->field_8b
    //     0x93f5f0: ldur            w0, [x1, #0x8b]
    // 0x93f5f4: DecompressPointer r0
    //     0x93f5f4: add             x0, x0, HEAP, lsl #32
    // 0x93f5f8: r16 = Sentinel
    //     0x93f5f8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93f5fc: cmp             w0, w16
    // 0x93f600: b.ne            #0x93f610
    // 0x93f604: r2 = _colors
    //     0x93f604: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93f608: ldr             x2, [x2, #0x608]
    // 0x93f60c: r0 = InitLateFinalInstanceField()
    //     0x93f60c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93f610: LoadField: r1 = r0->field_5f
    //     0x93f610: ldur            w1, [x0, #0x5f]
    // 0x93f614: DecompressPointer r1
    //     0x93f614: add             x1, x1, HEAP, lsl #32
    // 0x93f618: cmp             w1, NULL
    // 0x93f61c: b.ne            #0x93f630
    // 0x93f620: LoadField: r2 = r0->field_57
    //     0x93f620: ldur            w2, [x0, #0x57]
    // 0x93f624: DecompressPointer r2
    //     0x93f624: add             x2, x2, HEAP, lsl #32
    // 0x93f628: mov             x0, x2
    // 0x93f62c: b               #0x93f634
    // 0x93f630: mov             x0, x1
    // 0x93f634: LeaveFrame
    //     0x93f634: mov             SP, fp
    //     0x93f638: ldp             fp, lr, [SP], #0x10
    // 0x93f63c: ret
    //     0x93f63c: ret             
    // 0x93f640: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f640: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f644: b               #0x93f5e4
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93fa4c, size: 0x114
    // 0x93fa4c: EnterFrame
    //     0x93fa4c: stp             fp, lr, [SP, #-0x10]!
    //     0x93fa50: mov             fp, SP
    // 0x93fa54: AllocStack(0x18)
    //     0x93fa54: sub             SP, SP, #0x18
    // 0x93fa58: SetupParameters()
    //     0x93fa58: ldr             x0, [fp, #0x18]
    //     0x93fa5c: ldur            w1, [x0, #0x17]
    //     0x93fa60: add             x1, x1, HEAP, lsl #32
    //     0x93fa64: stur            x1, [fp, #-8]
    // 0x93fa68: CheckStackOverflow
    //     0x93fa68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93fa6c: cmp             SP, x16
    //     0x93fa70: b.ls            #0x93fb58
    // 0x93fa74: ldr             x0, [fp, #0x10]
    // 0x93fa78: r2 = LoadClassIdInstr(r0)
    //     0x93fa78: ldur            x2, [x0, #-1]
    //     0x93fa7c: ubfx            x2, x2, #0xc, #0x14
    // 0x93fa80: r16 = Instance_MaterialState
    //     0x93fa80: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93fa84: ldr             x16, [x16, #0x518]
    // 0x93fa88: stp             x16, x0, [SP]
    // 0x93fa8c: mov             x0, x2
    // 0x93fa90: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93fa90: movz            x17, #0x1871
    //     0x93fa94: movk            x17, #0x1, lsl #16
    //     0x93fa98: add             lr, x0, x17
    //     0x93fa9c: ldr             lr, [x21, lr, lsl #3]
    //     0x93faa0: blr             lr
    // 0x93faa4: tbnz            w0, #4, #0x93fafc
    // 0x93faa8: ldur            x0, [fp, #-8]
    // 0x93faac: LoadField: r1 = r0->field_f
    //     0x93faac: ldur            w1, [x0, #0xf]
    // 0x93fab0: DecompressPointer r1
    //     0x93fab0: add             x1, x1, HEAP, lsl #32
    // 0x93fab4: LoadField: r0 = r1->field_8b
    //     0x93fab4: ldur            w0, [x1, #0x8b]
    // 0x93fab8: DecompressPointer r0
    //     0x93fab8: add             x0, x0, HEAP, lsl #32
    // 0x93fabc: r16 = Sentinel
    //     0x93fabc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93fac0: cmp             w0, w16
    // 0x93fac4: b.ne            #0x93fad4
    // 0x93fac8: r2 = _colors
    //     0x93fac8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93facc: ldr             x2, [x2, #0x608]
    // 0x93fad0: r0 = InitLateFinalInstanceField()
    //     0x93fad0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93fad4: LoadField: r1 = r0->field_57
    //     0x93fad4: ldur            w1, [x0, #0x57]
    // 0x93fad8: DecompressPointer r1
    //     0x93fad8: add             x1, x1, HEAP, lsl #32
    // 0x93fadc: str             x1, [SP, #8]
    // 0x93fae0: d0 = 0.040000
    //     0x93fae0: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb70] IMM: double(0.04) from 0x3fa47ae147ae147b
    //     0x93fae4: ldr             d0, [x17, #0xb70]
    // 0x93fae8: str             d0, [SP]
    // 0x93faec: r0 = withOpacity()
    //     0x93faec: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x93faf0: LeaveFrame
    //     0x93faf0: mov             SP, fp
    //     0x93faf4: ldp             fp, lr, [SP], #0x10
    // 0x93faf8: ret
    //     0x93faf8: ret             
    // 0x93fafc: ldur            x0, [fp, #-8]
    // 0x93fb00: LoadField: r1 = r0->field_f
    //     0x93fb00: ldur            w1, [x0, #0xf]
    // 0x93fb04: DecompressPointer r1
    //     0x93fb04: add             x1, x1, HEAP, lsl #32
    // 0x93fb08: LoadField: r0 = r1->field_8b
    //     0x93fb08: ldur            w0, [x1, #0x8b]
    // 0x93fb0c: DecompressPointer r0
    //     0x93fb0c: add             x0, x0, HEAP, lsl #32
    // 0x93fb10: r16 = Sentinel
    //     0x93fb10: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93fb14: cmp             w0, w16
    // 0x93fb18: b.ne            #0x93fb28
    // 0x93fb1c: r2 = _colors
    //     0x93fb1c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x93fb20: ldr             x2, [x2, #0x608]
    // 0x93fb24: r0 = InitLateFinalInstanceField()
    //     0x93fb24: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x93fb28: LoadField: r1 = r0->field_5b
    //     0x93fb28: ldur            w1, [x0, #0x5b]
    // 0x93fb2c: DecompressPointer r1
    //     0x93fb2c: add             x1, x1, HEAP, lsl #32
    // 0x93fb30: cmp             w1, NULL
    // 0x93fb34: b.ne            #0x93fb48
    // 0x93fb38: LoadField: r2 = r0->field_53
    //     0x93fb38: ldur            w2, [x0, #0x53]
    // 0x93fb3c: DecompressPointer r2
    //     0x93fb3c: add             x2, x2, HEAP, lsl #32
    // 0x93fb40: mov             x0, x2
    // 0x93fb44: b               #0x93fb4c
    // 0x93fb48: mov             x0, x1
    // 0x93fb4c: LeaveFrame
    //     0x93fb4c: mov             SP, fp
    //     0x93fb50: ldp             fp, lr, [SP], #0x10
    // 0x93fb54: ret
    //     0x93fb54: ret             
    // 0x93fb58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93fb58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93fb5c: b               #0x93fa74
  }
  [closure] BorderSide <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x940664, size: 0x544
    // 0x940664: EnterFrame
    //     0x940664: stp             fp, lr, [SP, #-0x10]!
    //     0x940668: mov             fp, SP
    // 0x94066c: AllocStack(0x20)
    //     0x94066c: sub             SP, SP, #0x20
    // 0x940670: SetupParameters()
    //     0x940670: ldr             x0, [fp, #0x18]
    //     0x940674: ldur            w1, [x0, #0x17]
    //     0x940678: add             x1, x1, HEAP, lsl #32
    //     0x94067c: stur            x1, [fp, #-8]
    // 0x940680: CheckStackOverflow
    //     0x940680: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x940684: cmp             SP, x16
    //     0x940688: b.ls            #0x940ba0
    // 0x94068c: ldr             x2, [fp, #0x10]
    // 0x940690: r0 = LoadClassIdInstr(r2)
    //     0x940690: ldur            x0, [x2, #-1]
    //     0x940694: ubfx            x0, x0, #0xc, #0x14
    // 0x940698: r16 = Instance_MaterialState
    //     0x940698: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x94069c: ldr             x16, [x16, #0x518]
    // 0x9406a0: stp             x16, x2, [SP]
    // 0x9406a4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9406a4: movz            x17, #0x1871
    //     0x9406a8: movk            x17, #0x1, lsl #16
    //     0x9406ac: add             lr, x0, x17
    //     0x9406b0: ldr             lr, [x21, lr, lsl #3]
    //     0x9406b4: blr             lr
    // 0x9406b8: tbnz            w0, #4, #0x940748
    // 0x9406bc: ldur            x1, [fp, #-8]
    // 0x9406c0: LoadField: r0 = r1->field_f
    //     0x9406c0: ldur            w0, [x1, #0xf]
    // 0x9406c4: DecompressPointer r0
    //     0x9406c4: add             x0, x0, HEAP, lsl #32
    // 0x9406c8: mov             x1, x0
    // 0x9406cc: LoadField: r0 = r1->field_8b
    //     0x9406cc: ldur            w0, [x1, #0x8b]
    // 0x9406d0: DecompressPointer r0
    //     0x9406d0: add             x0, x0, HEAP, lsl #32
    // 0x9406d4: r16 = Sentinel
    //     0x9406d4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9406d8: cmp             w0, w16
    // 0x9406dc: b.ne            #0x9406ec
    // 0x9406e0: r2 = _colors
    //     0x9406e0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9406e4: ldr             x2, [x2, #0x608]
    // 0x9406e8: r0 = InitLateFinalInstanceField()
    //     0x9406e8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9406ec: LoadField: r1 = r0->field_57
    //     0x9406ec: ldur            w1, [x0, #0x57]
    // 0x9406f0: DecompressPointer r1
    //     0x9406f0: add             x1, x1, HEAP, lsl #32
    // 0x9406f4: str             x1, [SP, #8]
    // 0x9406f8: d0 = 0.120000
    //     0x9406f8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb60] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x9406fc: ldr             d0, [x17, #0xb60]
    // 0x940700: str             d0, [SP]
    // 0x940704: r0 = withOpacity()
    //     0x940704: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x940708: stur            x0, [fp, #-0x10]
    // 0x94070c: r0 = BorderSide()
    //     0x94070c: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940710: mov             x1, x0
    // 0x940714: ldur            x0, [fp, #-0x10]
    // 0x940718: StoreField: r1->field_7 = r0
    //     0x940718: stur            w0, [x1, #7]
    // 0x94071c: d0 = 1.000000
    //     0x94071c: fmov            d0, #1.00000000
    // 0x940720: StoreField: r1->field_b = d0
    //     0x940720: stur            d0, [x1, #0xb]
    // 0x940724: r2 = Instance_BorderStyle
    //     0x940724: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940728: ldr             x2, [x2, #0x658]
    // 0x94072c: StoreField: r1->field_13 = r2
    //     0x94072c: stur            w2, [x1, #0x13]
    // 0x940730: d1 = -1.000000
    //     0x940730: fmov            d1, #-1.00000000
    // 0x940734: ArrayStore: r1[0] = d1  ; List_8
    //     0x940734: stur            d1, [x1, #0x17]
    // 0x940738: mov             x0, x1
    // 0x94073c: LeaveFrame
    //     0x94073c: mov             SP, fp
    //     0x940740: ldp             fp, lr, [SP], #0x10
    // 0x940744: ret
    //     0x940744: ret             
    // 0x940748: ldr             x3, [fp, #0x10]
    // 0x94074c: ldur            x1, [fp, #-8]
    // 0x940750: r2 = Instance_BorderStyle
    //     0x940750: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940754: ldr             x2, [x2, #0x658]
    // 0x940758: d0 = 1.000000
    //     0x940758: fmov            d0, #1.00000000
    // 0x94075c: d1 = -1.000000
    //     0x94075c: fmov            d1, #-1.00000000
    // 0x940760: r0 = LoadClassIdInstr(r3)
    //     0x940760: ldur            x0, [x3, #-1]
    //     0x940764: ubfx            x0, x0, #0xc, #0x14
    // 0x940768: r16 = Instance_MaterialState
    //     0x940768: add             x16, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0x94076c: ldr             x16, [x16, #0x660]
    // 0x940770: stp             x16, x3, [SP]
    // 0x940774: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940774: movz            x17, #0x1871
    //     0x940778: movk            x17, #0x1, lsl #16
    //     0x94077c: add             lr, x0, x17
    //     0x940780: ldr             lr, [x21, lr, lsl #3]
    //     0x940784: blr             lr
    // 0x940788: tbnz            w0, #4, #0x940990
    // 0x94078c: ldr             x1, [fp, #0x10]
    // 0x940790: r0 = LoadClassIdInstr(r1)
    //     0x940790: ldur            x0, [x1, #-1]
    //     0x940794: ubfx            x0, x0, #0xc, #0x14
    // 0x940798: r16 = Instance_MaterialState
    //     0x940798: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x94079c: ldr             x16, [x16, #0x388]
    // 0x9407a0: stp             x16, x1, [SP]
    // 0x9407a4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9407a4: movz            x17, #0x1871
    //     0x9407a8: movk            x17, #0x1, lsl #16
    //     0x9407ac: add             lr, x0, x17
    //     0x9407b0: ldr             lr, [x21, lr, lsl #3]
    //     0x9407b4: blr             lr
    // 0x9407b8: tbnz            w0, #4, #0x940850
    // 0x9407bc: ldur            x1, [fp, #-8]
    // 0x9407c0: LoadField: r0 = r1->field_f
    //     0x9407c0: ldur            w0, [x1, #0xf]
    // 0x9407c4: DecompressPointer r0
    //     0x9407c4: add             x0, x0, HEAP, lsl #32
    // 0x9407c8: mov             x1, x0
    // 0x9407cc: LoadField: r0 = r1->field_8b
    //     0x9407cc: ldur            w0, [x1, #0x8b]
    // 0x9407d0: DecompressPointer r0
    //     0x9407d0: add             x0, x0, HEAP, lsl #32
    // 0x9407d4: r16 = Sentinel
    //     0x9407d4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9407d8: cmp             w0, w16
    // 0x9407dc: b.ne            #0x9407ec
    // 0x9407e0: r2 = _colors
    //     0x9407e0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9407e4: ldr             x2, [x2, #0x608]
    // 0x9407e8: r0 = InitLateFinalInstanceField()
    //     0x9407e8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9407ec: LoadField: r1 = r0->field_47
    //     0x9407ec: ldur            w1, [x0, #0x47]
    // 0x9407f0: DecompressPointer r1
    //     0x9407f0: add             x1, x1, HEAP, lsl #32
    // 0x9407f4: cmp             w1, NULL
    // 0x9407f8: b.ne            #0x94080c
    // 0x9407fc: LoadField: r1 = r0->field_3f
    //     0x9407fc: ldur            w1, [x0, #0x3f]
    // 0x940800: DecompressPointer r1
    //     0x940800: add             x1, x1, HEAP, lsl #32
    // 0x940804: mov             x0, x1
    // 0x940808: b               #0x940810
    // 0x94080c: mov             x0, x1
    // 0x940810: stur            x0, [fp, #-0x10]
    // 0x940814: r0 = BorderSide()
    //     0x940814: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940818: mov             x1, x0
    // 0x94081c: ldur            x0, [fp, #-0x10]
    // 0x940820: StoreField: r1->field_7 = r0
    //     0x940820: stur            w0, [x1, #7]
    // 0x940824: d0 = 1.000000
    //     0x940824: fmov            d0, #1.00000000
    // 0x940828: StoreField: r1->field_b = d0
    //     0x940828: stur            d0, [x1, #0xb]
    // 0x94082c: r2 = Instance_BorderStyle
    //     0x94082c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940830: ldr             x2, [x2, #0x658]
    // 0x940834: StoreField: r1->field_13 = r2
    //     0x940834: stur            w2, [x1, #0x13]
    // 0x940838: d1 = -1.000000
    //     0x940838: fmov            d1, #-1.00000000
    // 0x94083c: ArrayStore: r1[0] = d1  ; List_8
    //     0x94083c: stur            d1, [x1, #0x17]
    // 0x940840: mov             x0, x1
    // 0x940844: LeaveFrame
    //     0x940844: mov             SP, fp
    //     0x940848: ldp             fp, lr, [SP], #0x10
    // 0x94084c: ret
    //     0x94084c: ret             
    // 0x940850: ldr             x3, [fp, #0x10]
    // 0x940854: ldur            x1, [fp, #-8]
    // 0x940858: r2 = Instance_BorderStyle
    //     0x940858: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x94085c: ldr             x2, [x2, #0x658]
    // 0x940860: d0 = 1.000000
    //     0x940860: fmov            d0, #1.00000000
    // 0x940864: d1 = -1.000000
    //     0x940864: fmov            d1, #-1.00000000
    // 0x940868: r0 = LoadClassIdInstr(r3)
    //     0x940868: ldur            x0, [x3, #-1]
    //     0x94086c: ubfx            x0, x0, #0xc, #0x14
    // 0x940870: r16 = Instance_MaterialState
    //     0x940870: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x940874: ldr             x16, [x16, #0x398]
    // 0x940878: stp             x16, x3, [SP]
    // 0x94087c: r0 = GDT[cid_x0 + 0x11871]()
    //     0x94087c: movz            x17, #0x1871
    //     0x940880: movk            x17, #0x1, lsl #16
    //     0x940884: add             lr, x0, x17
    //     0x940888: ldr             lr, [x21, lr, lsl #3]
    //     0x94088c: blr             lr
    // 0x940890: tbnz            w0, #4, #0x94090c
    // 0x940894: ldur            x1, [fp, #-8]
    // 0x940898: LoadField: r0 = r1->field_f
    //     0x940898: ldur            w0, [x1, #0xf]
    // 0x94089c: DecompressPointer r0
    //     0x94089c: add             x0, x0, HEAP, lsl #32
    // 0x9408a0: mov             x1, x0
    // 0x9408a4: LoadField: r0 = r1->field_8b
    //     0x9408a4: ldur            w0, [x1, #0x8b]
    // 0x9408a8: DecompressPointer r0
    //     0x9408a8: add             x0, x0, HEAP, lsl #32
    // 0x9408ac: r16 = Sentinel
    //     0x9408ac: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9408b0: cmp             w0, w16
    // 0x9408b4: b.ne            #0x9408c4
    // 0x9408b8: r2 = _colors
    //     0x9408b8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9408bc: ldr             x2, [x2, #0x608]
    // 0x9408c0: r0 = InitLateFinalInstanceField()
    //     0x9408c0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9408c4: LoadField: r1 = r0->field_3b
    //     0x9408c4: ldur            w1, [x0, #0x3b]
    // 0x9408c8: DecompressPointer r1
    //     0x9408c8: add             x1, x1, HEAP, lsl #32
    // 0x9408cc: stur            x1, [fp, #-0x10]
    // 0x9408d0: r0 = BorderSide()
    //     0x9408d0: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x9408d4: mov             x1, x0
    // 0x9408d8: ldur            x0, [fp, #-0x10]
    // 0x9408dc: StoreField: r1->field_7 = r0
    //     0x9408dc: stur            w0, [x1, #7]
    // 0x9408e0: d0 = 2.000000
    //     0x9408e0: fmov            d0, #2.00000000
    // 0x9408e4: StoreField: r1->field_b = d0
    //     0x9408e4: stur            d0, [x1, #0xb]
    // 0x9408e8: r0 = Instance_BorderStyle
    //     0x9408e8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x9408ec: ldr             x0, [x0, #0x658]
    // 0x9408f0: StoreField: r1->field_13 = r0
    //     0x9408f0: stur            w0, [x1, #0x13]
    // 0x9408f4: d0 = -1.000000
    //     0x9408f4: fmov            d0, #-1.00000000
    // 0x9408f8: ArrayStore: r1[0] = d0  ; List_8
    //     0x9408f8: stur            d0, [x1, #0x17]
    // 0x9408fc: mov             x0, x1
    // 0x940900: LeaveFrame
    //     0x940900: mov             SP, fp
    //     0x940904: ldp             fp, lr, [SP], #0x10
    // 0x940908: ret
    //     0x940908: ret             
    // 0x94090c: ldur            x1, [fp, #-8]
    // 0x940910: r0 = Instance_BorderStyle
    //     0x940910: add             x0, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940914: ldr             x0, [x0, #0x658]
    // 0x940918: d0 = -1.000000
    //     0x940918: fmov            d0, #-1.00000000
    // 0x94091c: LoadField: r2 = r1->field_f
    //     0x94091c: ldur            w2, [x1, #0xf]
    // 0x940920: DecompressPointer r2
    //     0x940920: add             x2, x2, HEAP, lsl #32
    // 0x940924: mov             x1, x2
    // 0x940928: LoadField: r0 = r1->field_8b
    //     0x940928: ldur            w0, [x1, #0x8b]
    // 0x94092c: DecompressPointer r0
    //     0x94092c: add             x0, x0, HEAP, lsl #32
    // 0x940930: r16 = Sentinel
    //     0x940930: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940934: cmp             w0, w16
    // 0x940938: b.ne            #0x940948
    // 0x94093c: r2 = _colors
    //     0x94093c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940940: ldr             x2, [x2, #0x608]
    // 0x940944: r0 = InitLateFinalInstanceField()
    //     0x940944: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940948: LoadField: r1 = r0->field_3b
    //     0x940948: ldur            w1, [x0, #0x3b]
    // 0x94094c: DecompressPointer r1
    //     0x94094c: add             x1, x1, HEAP, lsl #32
    // 0x940950: stur            x1, [fp, #-0x10]
    // 0x940954: r0 = BorderSide()
    //     0x940954: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940958: mov             x1, x0
    // 0x94095c: ldur            x0, [fp, #-0x10]
    // 0x940960: StoreField: r1->field_7 = r0
    //     0x940960: stur            w0, [x1, #7]
    // 0x940964: d1 = 1.000000
    //     0x940964: fmov            d1, #1.00000000
    // 0x940968: StoreField: r1->field_b = d1
    //     0x940968: stur            d1, [x1, #0xb]
    // 0x94096c: r2 = Instance_BorderStyle
    //     0x94096c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940970: ldr             x2, [x2, #0x658]
    // 0x940974: StoreField: r1->field_13 = r2
    //     0x940974: stur            w2, [x1, #0x13]
    // 0x940978: d2 = -1.000000
    //     0x940978: fmov            d2, #-1.00000000
    // 0x94097c: ArrayStore: r1[0] = d2  ; List_8
    //     0x94097c: stur            d2, [x1, #0x17]
    // 0x940980: mov             x0, x1
    // 0x940984: LeaveFrame
    //     0x940984: mov             SP, fp
    //     0x940988: ldp             fp, lr, [SP], #0x10
    // 0x94098c: ret
    //     0x94098c: ret             
    // 0x940990: ldr             x3, [fp, #0x10]
    // 0x940994: ldur            x1, [fp, #-8]
    // 0x940998: r2 = Instance_BorderStyle
    //     0x940998: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x94099c: ldr             x2, [x2, #0x658]
    // 0x9409a0: d1 = 1.000000
    //     0x9409a0: fmov            d1, #1.00000000
    // 0x9409a4: d2 = -1.000000
    //     0x9409a4: fmov            d2, #-1.00000000
    // 0x9409a8: d0 = 2.000000
    //     0x9409a8: fmov            d0, #2.00000000
    // 0x9409ac: r0 = LoadClassIdInstr(r3)
    //     0x9409ac: ldur            x0, [x3, #-1]
    //     0x9409b0: ubfx            x0, x0, #0xc, #0x14
    // 0x9409b4: r16 = Instance_MaterialState
    //     0x9409b4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x9409b8: ldr             x16, [x16, #0x388]
    // 0x9409bc: stp             x16, x3, [SP]
    // 0x9409c0: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9409c0: movz            x17, #0x1871
    //     0x9409c4: movk            x17, #0x1, lsl #16
    //     0x9409c8: add             lr, x0, x17
    //     0x9409cc: ldr             lr, [x21, lr, lsl #3]
    //     0x9409d0: blr             lr
    // 0x9409d4: tbnz            w0, #4, #0x940a50
    // 0x9409d8: ldur            x1, [fp, #-8]
    // 0x9409dc: LoadField: r0 = r1->field_f
    //     0x9409dc: ldur            w0, [x1, #0xf]
    // 0x9409e0: DecompressPointer r0
    //     0x9409e0: add             x0, x0, HEAP, lsl #32
    // 0x9409e4: mov             x1, x0
    // 0x9409e8: LoadField: r0 = r1->field_8b
    //     0x9409e8: ldur            w0, [x1, #0x8b]
    // 0x9409ec: DecompressPointer r0
    //     0x9409ec: add             x0, x0, HEAP, lsl #32
    // 0x9409f0: r16 = Sentinel
    //     0x9409f0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9409f4: cmp             w0, w16
    // 0x9409f8: b.ne            #0x940a08
    // 0x9409fc: r2 = _colors
    //     0x9409fc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940a00: ldr             x2, [x2, #0x608]
    // 0x940a04: r0 = InitLateFinalInstanceField()
    //     0x940a04: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940a08: LoadField: r1 = r0->field_57
    //     0x940a08: ldur            w1, [x0, #0x57]
    // 0x940a0c: DecompressPointer r1
    //     0x940a0c: add             x1, x1, HEAP, lsl #32
    // 0x940a10: stur            x1, [fp, #-0x10]
    // 0x940a14: r0 = BorderSide()
    //     0x940a14: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940a18: mov             x1, x0
    // 0x940a1c: ldur            x0, [fp, #-0x10]
    // 0x940a20: StoreField: r1->field_7 = r0
    //     0x940a20: stur            w0, [x1, #7]
    // 0x940a24: d0 = 1.000000
    //     0x940a24: fmov            d0, #1.00000000
    // 0x940a28: StoreField: r1->field_b = d0
    //     0x940a28: stur            d0, [x1, #0xb]
    // 0x940a2c: r2 = Instance_BorderStyle
    //     0x940a2c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940a30: ldr             x2, [x2, #0x658]
    // 0x940a34: StoreField: r1->field_13 = r2
    //     0x940a34: stur            w2, [x1, #0x13]
    // 0x940a38: d1 = -1.000000
    //     0x940a38: fmov            d1, #-1.00000000
    // 0x940a3c: ArrayStore: r1[0] = d1  ; List_8
    //     0x940a3c: stur            d1, [x1, #0x17]
    // 0x940a40: mov             x0, x1
    // 0x940a44: LeaveFrame
    //     0x940a44: mov             SP, fp
    //     0x940a48: ldp             fp, lr, [SP], #0x10
    // 0x940a4c: ret
    //     0x940a4c: ret             
    // 0x940a50: ldr             x0, [fp, #0x10]
    // 0x940a54: ldur            x1, [fp, #-8]
    // 0x940a58: r2 = Instance_BorderStyle
    //     0x940a58: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940a5c: ldr             x2, [x2, #0x658]
    // 0x940a60: d0 = 1.000000
    //     0x940a60: fmov            d0, #1.00000000
    // 0x940a64: d1 = -1.000000
    //     0x940a64: fmov            d1, #-1.00000000
    // 0x940a68: r3 = LoadClassIdInstr(r0)
    //     0x940a68: ldur            x3, [x0, #-1]
    //     0x940a6c: ubfx            x3, x3, #0xc, #0x14
    // 0x940a70: r16 = Instance_MaterialState
    //     0x940a70: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x940a74: ldr             x16, [x16, #0x398]
    // 0x940a78: stp             x16, x0, [SP]
    // 0x940a7c: mov             x0, x3
    // 0x940a80: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940a80: movz            x17, #0x1871
    //     0x940a84: movk            x17, #0x1, lsl #16
    //     0x940a88: add             lr, x0, x17
    //     0x940a8c: ldr             lr, [x21, lr, lsl #3]
    //     0x940a90: blr             lr
    // 0x940a94: tbnz            w0, #4, #0x940b0c
    // 0x940a98: ldur            x0, [fp, #-8]
    // 0x940a9c: LoadField: r1 = r0->field_f
    //     0x940a9c: ldur            w1, [x0, #0xf]
    // 0x940aa0: DecompressPointer r1
    //     0x940aa0: add             x1, x1, HEAP, lsl #32
    // 0x940aa4: LoadField: r0 = r1->field_8b
    //     0x940aa4: ldur            w0, [x1, #0x8b]
    // 0x940aa8: DecompressPointer r0
    //     0x940aa8: add             x0, x0, HEAP, lsl #32
    // 0x940aac: r16 = Sentinel
    //     0x940aac: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940ab0: cmp             w0, w16
    // 0x940ab4: b.ne            #0x940ac4
    // 0x940ab8: r2 = _colors
    //     0x940ab8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940abc: ldr             x2, [x2, #0x608]
    // 0x940ac0: r0 = InitLateFinalInstanceField()
    //     0x940ac0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940ac4: LoadField: r1 = r0->field_b
    //     0x940ac4: ldur            w1, [x0, #0xb]
    // 0x940ac8: DecompressPointer r1
    //     0x940ac8: add             x1, x1, HEAP, lsl #32
    // 0x940acc: stur            x1, [fp, #-0x10]
    // 0x940ad0: r0 = BorderSide()
    //     0x940ad0: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940ad4: mov             x1, x0
    // 0x940ad8: ldur            x0, [fp, #-0x10]
    // 0x940adc: StoreField: r1->field_7 = r0
    //     0x940adc: stur            w0, [x1, #7]
    // 0x940ae0: d0 = 2.000000
    //     0x940ae0: fmov            d0, #2.00000000
    // 0x940ae4: StoreField: r1->field_b = d0
    //     0x940ae4: stur            d0, [x1, #0xb]
    // 0x940ae8: r2 = Instance_BorderStyle
    //     0x940ae8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940aec: ldr             x2, [x2, #0x658]
    // 0x940af0: StoreField: r1->field_13 = r2
    //     0x940af0: stur            w2, [x1, #0x13]
    // 0x940af4: d0 = -1.000000
    //     0x940af4: fmov            d0, #-1.00000000
    // 0x940af8: ArrayStore: r1[0] = d0  ; List_8
    //     0x940af8: stur            d0, [x1, #0x17]
    // 0x940afc: mov             x0, x1
    // 0x940b00: LeaveFrame
    //     0x940b00: mov             SP, fp
    //     0x940b04: ldp             fp, lr, [SP], #0x10
    // 0x940b08: ret
    //     0x940b08: ret             
    // 0x940b0c: ldur            x0, [fp, #-8]
    // 0x940b10: r2 = Instance_BorderStyle
    //     0x940b10: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940b14: ldr             x2, [x2, #0x658]
    // 0x940b18: d0 = -1.000000
    //     0x940b18: fmov            d0, #-1.00000000
    // 0x940b1c: LoadField: r1 = r0->field_f
    //     0x940b1c: ldur            w1, [x0, #0xf]
    // 0x940b20: DecompressPointer r1
    //     0x940b20: add             x1, x1, HEAP, lsl #32
    // 0x940b24: LoadField: r0 = r1->field_8b
    //     0x940b24: ldur            w0, [x1, #0x8b]
    // 0x940b28: DecompressPointer r0
    //     0x940b28: add             x0, x0, HEAP, lsl #32
    // 0x940b2c: r16 = Sentinel
    //     0x940b2c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940b30: cmp             w0, w16
    // 0x940b34: b.ne            #0x940b44
    // 0x940b38: r2 = _colors
    //     0x940b38: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940b3c: ldr             x2, [x2, #0x608]
    // 0x940b40: r0 = InitLateFinalInstanceField()
    //     0x940b40: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940b44: LoadField: r1 = r0->field_63
    //     0x940b44: ldur            w1, [x0, #0x63]
    // 0x940b48: DecompressPointer r1
    //     0x940b48: add             x1, x1, HEAP, lsl #32
    // 0x940b4c: cmp             w1, NULL
    // 0x940b50: b.ne            #0x940b64
    // 0x940b54: LoadField: r1 = r0->field_4f
    //     0x940b54: ldur            w1, [x0, #0x4f]
    // 0x940b58: DecompressPointer r1
    //     0x940b58: add             x1, x1, HEAP, lsl #32
    // 0x940b5c: mov             x0, x1
    // 0x940b60: b               #0x940b68
    // 0x940b64: mov             x0, x1
    // 0x940b68: stur            x0, [fp, #-8]
    // 0x940b6c: r0 = BorderSide()
    //     0x940b6c: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940b70: ldur            x1, [fp, #-8]
    // 0x940b74: StoreField: r0->field_7 = r1
    //     0x940b74: stur            w1, [x0, #7]
    // 0x940b78: d0 = 1.000000
    //     0x940b78: fmov            d0, #1.00000000
    // 0x940b7c: StoreField: r0->field_b = d0
    //     0x940b7c: stur            d0, [x0, #0xb]
    // 0x940b80: r1 = Instance_BorderStyle
    //     0x940b80: add             x1, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940b84: ldr             x1, [x1, #0x658]
    // 0x940b88: StoreField: r0->field_13 = r1
    //     0x940b88: stur            w1, [x0, #0x13]
    // 0x940b8c: d0 = -1.000000
    //     0x940b8c: fmov            d0, #-1.00000000
    // 0x940b90: ArrayStore: r0[0] = d0  ; List_8
    //     0x940b90: stur            d0, [x0, #0x17]
    // 0x940b94: LeaveFrame
    //     0x940b94: mov             SP, fp
    //     0x940b98: ldp             fp, lr, [SP], #0x10
    // 0x940b9c: ret
    //     0x940b9c: ret             
    // 0x940ba0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x940ba0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x940ba4: b               #0x94068c
  }
  [closure] BorderSide <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x940ba8, size: 0x544
    // 0x940ba8: EnterFrame
    //     0x940ba8: stp             fp, lr, [SP, #-0x10]!
    //     0x940bac: mov             fp, SP
    // 0x940bb0: AllocStack(0x20)
    //     0x940bb0: sub             SP, SP, #0x20
    // 0x940bb4: SetupParameters()
    //     0x940bb4: ldr             x0, [fp, #0x18]
    //     0x940bb8: ldur            w1, [x0, #0x17]
    //     0x940bbc: add             x1, x1, HEAP, lsl #32
    //     0x940bc0: stur            x1, [fp, #-8]
    // 0x940bc4: CheckStackOverflow
    //     0x940bc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x940bc8: cmp             SP, x16
    //     0x940bcc: b.ls            #0x9410e4
    // 0x940bd0: ldr             x2, [fp, #0x10]
    // 0x940bd4: r0 = LoadClassIdInstr(r2)
    //     0x940bd4: ldur            x0, [x2, #-1]
    //     0x940bd8: ubfx            x0, x0, #0xc, #0x14
    // 0x940bdc: r16 = Instance_MaterialState
    //     0x940bdc: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x940be0: ldr             x16, [x16, #0x518]
    // 0x940be4: stp             x16, x2, [SP]
    // 0x940be8: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940be8: movz            x17, #0x1871
    //     0x940bec: movk            x17, #0x1, lsl #16
    //     0x940bf0: add             lr, x0, x17
    //     0x940bf4: ldr             lr, [x21, lr, lsl #3]
    //     0x940bf8: blr             lr
    // 0x940bfc: tbnz            w0, #4, #0x940c8c
    // 0x940c00: ldur            x1, [fp, #-8]
    // 0x940c04: LoadField: r0 = r1->field_f
    //     0x940c04: ldur            w0, [x1, #0xf]
    // 0x940c08: DecompressPointer r0
    //     0x940c08: add             x0, x0, HEAP, lsl #32
    // 0x940c0c: mov             x1, x0
    // 0x940c10: LoadField: r0 = r1->field_8b
    //     0x940c10: ldur            w0, [x1, #0x8b]
    // 0x940c14: DecompressPointer r0
    //     0x940c14: add             x0, x0, HEAP, lsl #32
    // 0x940c18: r16 = Sentinel
    //     0x940c18: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940c1c: cmp             w0, w16
    // 0x940c20: b.ne            #0x940c30
    // 0x940c24: r2 = _colors
    //     0x940c24: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940c28: ldr             x2, [x2, #0x608]
    // 0x940c2c: r0 = InitLateFinalInstanceField()
    //     0x940c2c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940c30: LoadField: r1 = r0->field_57
    //     0x940c30: ldur            w1, [x0, #0x57]
    // 0x940c34: DecompressPointer r1
    //     0x940c34: add             x1, x1, HEAP, lsl #32
    // 0x940c38: str             x1, [SP, #8]
    // 0x940c3c: d0 = 0.380000
    //     0x940c3c: add             x17, PP, #0xf, lsl #12  ; [pp+0xf468] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x940c40: ldr             d0, [x17, #0x468]
    // 0x940c44: str             d0, [SP]
    // 0x940c48: r0 = withOpacity()
    //     0x940c48: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x940c4c: stur            x0, [fp, #-0x10]
    // 0x940c50: r0 = BorderSide()
    //     0x940c50: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940c54: mov             x1, x0
    // 0x940c58: ldur            x0, [fp, #-0x10]
    // 0x940c5c: StoreField: r1->field_7 = r0
    //     0x940c5c: stur            w0, [x1, #7]
    // 0x940c60: d0 = 1.000000
    //     0x940c60: fmov            d0, #1.00000000
    // 0x940c64: StoreField: r1->field_b = d0
    //     0x940c64: stur            d0, [x1, #0xb]
    // 0x940c68: r2 = Instance_BorderStyle
    //     0x940c68: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940c6c: ldr             x2, [x2, #0x658]
    // 0x940c70: StoreField: r1->field_13 = r2
    //     0x940c70: stur            w2, [x1, #0x13]
    // 0x940c74: d1 = -1.000000
    //     0x940c74: fmov            d1, #-1.00000000
    // 0x940c78: ArrayStore: r1[0] = d1  ; List_8
    //     0x940c78: stur            d1, [x1, #0x17]
    // 0x940c7c: mov             x0, x1
    // 0x940c80: LeaveFrame
    //     0x940c80: mov             SP, fp
    //     0x940c84: ldp             fp, lr, [SP], #0x10
    // 0x940c88: ret
    //     0x940c88: ret             
    // 0x940c8c: ldr             x3, [fp, #0x10]
    // 0x940c90: ldur            x1, [fp, #-8]
    // 0x940c94: r2 = Instance_BorderStyle
    //     0x940c94: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940c98: ldr             x2, [x2, #0x658]
    // 0x940c9c: d0 = 1.000000
    //     0x940c9c: fmov            d0, #1.00000000
    // 0x940ca0: d1 = -1.000000
    //     0x940ca0: fmov            d1, #-1.00000000
    // 0x940ca4: r0 = LoadClassIdInstr(r3)
    //     0x940ca4: ldur            x0, [x3, #-1]
    //     0x940ca8: ubfx            x0, x0, #0xc, #0x14
    // 0x940cac: r16 = Instance_MaterialState
    //     0x940cac: add             x16, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0x940cb0: ldr             x16, [x16, #0x660]
    // 0x940cb4: stp             x16, x3, [SP]
    // 0x940cb8: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940cb8: movz            x17, #0x1871
    //     0x940cbc: movk            x17, #0x1, lsl #16
    //     0x940cc0: add             lr, x0, x17
    //     0x940cc4: ldr             lr, [x21, lr, lsl #3]
    //     0x940cc8: blr             lr
    // 0x940ccc: tbnz            w0, #4, #0x940ed4
    // 0x940cd0: ldr             x1, [fp, #0x10]
    // 0x940cd4: r0 = LoadClassIdInstr(r1)
    //     0x940cd4: ldur            x0, [x1, #-1]
    //     0x940cd8: ubfx            x0, x0, #0xc, #0x14
    // 0x940cdc: r16 = Instance_MaterialState
    //     0x940cdc: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x940ce0: ldr             x16, [x16, #0x388]
    // 0x940ce4: stp             x16, x1, [SP]
    // 0x940ce8: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940ce8: movz            x17, #0x1871
    //     0x940cec: movk            x17, #0x1, lsl #16
    //     0x940cf0: add             lr, x0, x17
    //     0x940cf4: ldr             lr, [x21, lr, lsl #3]
    //     0x940cf8: blr             lr
    // 0x940cfc: tbnz            w0, #4, #0x940d94
    // 0x940d00: ldur            x1, [fp, #-8]
    // 0x940d04: LoadField: r0 = r1->field_f
    //     0x940d04: ldur            w0, [x1, #0xf]
    // 0x940d08: DecompressPointer r0
    //     0x940d08: add             x0, x0, HEAP, lsl #32
    // 0x940d0c: mov             x1, x0
    // 0x940d10: LoadField: r0 = r1->field_8b
    //     0x940d10: ldur            w0, [x1, #0x8b]
    // 0x940d14: DecompressPointer r0
    //     0x940d14: add             x0, x0, HEAP, lsl #32
    // 0x940d18: r16 = Sentinel
    //     0x940d18: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940d1c: cmp             w0, w16
    // 0x940d20: b.ne            #0x940d30
    // 0x940d24: r2 = _colors
    //     0x940d24: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940d28: ldr             x2, [x2, #0x608]
    // 0x940d2c: r0 = InitLateFinalInstanceField()
    //     0x940d2c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940d30: LoadField: r1 = r0->field_47
    //     0x940d30: ldur            w1, [x0, #0x47]
    // 0x940d34: DecompressPointer r1
    //     0x940d34: add             x1, x1, HEAP, lsl #32
    // 0x940d38: cmp             w1, NULL
    // 0x940d3c: b.ne            #0x940d50
    // 0x940d40: LoadField: r1 = r0->field_3f
    //     0x940d40: ldur            w1, [x0, #0x3f]
    // 0x940d44: DecompressPointer r1
    //     0x940d44: add             x1, x1, HEAP, lsl #32
    // 0x940d48: mov             x0, x1
    // 0x940d4c: b               #0x940d54
    // 0x940d50: mov             x0, x1
    // 0x940d54: stur            x0, [fp, #-0x10]
    // 0x940d58: r0 = BorderSide()
    //     0x940d58: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940d5c: mov             x1, x0
    // 0x940d60: ldur            x0, [fp, #-0x10]
    // 0x940d64: StoreField: r1->field_7 = r0
    //     0x940d64: stur            w0, [x1, #7]
    // 0x940d68: d0 = 1.000000
    //     0x940d68: fmov            d0, #1.00000000
    // 0x940d6c: StoreField: r1->field_b = d0
    //     0x940d6c: stur            d0, [x1, #0xb]
    // 0x940d70: r2 = Instance_BorderStyle
    //     0x940d70: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940d74: ldr             x2, [x2, #0x658]
    // 0x940d78: StoreField: r1->field_13 = r2
    //     0x940d78: stur            w2, [x1, #0x13]
    // 0x940d7c: d1 = -1.000000
    //     0x940d7c: fmov            d1, #-1.00000000
    // 0x940d80: ArrayStore: r1[0] = d1  ; List_8
    //     0x940d80: stur            d1, [x1, #0x17]
    // 0x940d84: mov             x0, x1
    // 0x940d88: LeaveFrame
    //     0x940d88: mov             SP, fp
    //     0x940d8c: ldp             fp, lr, [SP], #0x10
    // 0x940d90: ret
    //     0x940d90: ret             
    // 0x940d94: ldr             x3, [fp, #0x10]
    // 0x940d98: ldur            x1, [fp, #-8]
    // 0x940d9c: r2 = Instance_BorderStyle
    //     0x940d9c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940da0: ldr             x2, [x2, #0x658]
    // 0x940da4: d0 = 1.000000
    //     0x940da4: fmov            d0, #1.00000000
    // 0x940da8: d1 = -1.000000
    //     0x940da8: fmov            d1, #-1.00000000
    // 0x940dac: r0 = LoadClassIdInstr(r3)
    //     0x940dac: ldur            x0, [x3, #-1]
    //     0x940db0: ubfx            x0, x0, #0xc, #0x14
    // 0x940db4: r16 = Instance_MaterialState
    //     0x940db4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x940db8: ldr             x16, [x16, #0x398]
    // 0x940dbc: stp             x16, x3, [SP]
    // 0x940dc0: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940dc0: movz            x17, #0x1871
    //     0x940dc4: movk            x17, #0x1, lsl #16
    //     0x940dc8: add             lr, x0, x17
    //     0x940dcc: ldr             lr, [x21, lr, lsl #3]
    //     0x940dd0: blr             lr
    // 0x940dd4: tbnz            w0, #4, #0x940e50
    // 0x940dd8: ldur            x1, [fp, #-8]
    // 0x940ddc: LoadField: r0 = r1->field_f
    //     0x940ddc: ldur            w0, [x1, #0xf]
    // 0x940de0: DecompressPointer r0
    //     0x940de0: add             x0, x0, HEAP, lsl #32
    // 0x940de4: mov             x1, x0
    // 0x940de8: LoadField: r0 = r1->field_8b
    //     0x940de8: ldur            w0, [x1, #0x8b]
    // 0x940dec: DecompressPointer r0
    //     0x940dec: add             x0, x0, HEAP, lsl #32
    // 0x940df0: r16 = Sentinel
    //     0x940df0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940df4: cmp             w0, w16
    // 0x940df8: b.ne            #0x940e08
    // 0x940dfc: r2 = _colors
    //     0x940dfc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940e00: ldr             x2, [x2, #0x608]
    // 0x940e04: r0 = InitLateFinalInstanceField()
    //     0x940e04: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940e08: LoadField: r1 = r0->field_3b
    //     0x940e08: ldur            w1, [x0, #0x3b]
    // 0x940e0c: DecompressPointer r1
    //     0x940e0c: add             x1, x1, HEAP, lsl #32
    // 0x940e10: stur            x1, [fp, #-0x10]
    // 0x940e14: r0 = BorderSide()
    //     0x940e14: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940e18: mov             x1, x0
    // 0x940e1c: ldur            x0, [fp, #-0x10]
    // 0x940e20: StoreField: r1->field_7 = r0
    //     0x940e20: stur            w0, [x1, #7]
    // 0x940e24: d0 = 2.000000
    //     0x940e24: fmov            d0, #2.00000000
    // 0x940e28: StoreField: r1->field_b = d0
    //     0x940e28: stur            d0, [x1, #0xb]
    // 0x940e2c: r0 = Instance_BorderStyle
    //     0x940e2c: add             x0, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940e30: ldr             x0, [x0, #0x658]
    // 0x940e34: StoreField: r1->field_13 = r0
    //     0x940e34: stur            w0, [x1, #0x13]
    // 0x940e38: d0 = -1.000000
    //     0x940e38: fmov            d0, #-1.00000000
    // 0x940e3c: ArrayStore: r1[0] = d0  ; List_8
    //     0x940e3c: stur            d0, [x1, #0x17]
    // 0x940e40: mov             x0, x1
    // 0x940e44: LeaveFrame
    //     0x940e44: mov             SP, fp
    //     0x940e48: ldp             fp, lr, [SP], #0x10
    // 0x940e4c: ret
    //     0x940e4c: ret             
    // 0x940e50: ldur            x1, [fp, #-8]
    // 0x940e54: r0 = Instance_BorderStyle
    //     0x940e54: add             x0, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940e58: ldr             x0, [x0, #0x658]
    // 0x940e5c: d0 = -1.000000
    //     0x940e5c: fmov            d0, #-1.00000000
    // 0x940e60: LoadField: r2 = r1->field_f
    //     0x940e60: ldur            w2, [x1, #0xf]
    // 0x940e64: DecompressPointer r2
    //     0x940e64: add             x2, x2, HEAP, lsl #32
    // 0x940e68: mov             x1, x2
    // 0x940e6c: LoadField: r0 = r1->field_8b
    //     0x940e6c: ldur            w0, [x1, #0x8b]
    // 0x940e70: DecompressPointer r0
    //     0x940e70: add             x0, x0, HEAP, lsl #32
    // 0x940e74: r16 = Sentinel
    //     0x940e74: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940e78: cmp             w0, w16
    // 0x940e7c: b.ne            #0x940e8c
    // 0x940e80: r2 = _colors
    //     0x940e80: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940e84: ldr             x2, [x2, #0x608]
    // 0x940e88: r0 = InitLateFinalInstanceField()
    //     0x940e88: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940e8c: LoadField: r1 = r0->field_3b
    //     0x940e8c: ldur            w1, [x0, #0x3b]
    // 0x940e90: DecompressPointer r1
    //     0x940e90: add             x1, x1, HEAP, lsl #32
    // 0x940e94: stur            x1, [fp, #-0x10]
    // 0x940e98: r0 = BorderSide()
    //     0x940e98: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940e9c: mov             x1, x0
    // 0x940ea0: ldur            x0, [fp, #-0x10]
    // 0x940ea4: StoreField: r1->field_7 = r0
    //     0x940ea4: stur            w0, [x1, #7]
    // 0x940ea8: d1 = 1.000000
    //     0x940ea8: fmov            d1, #1.00000000
    // 0x940eac: StoreField: r1->field_b = d1
    //     0x940eac: stur            d1, [x1, #0xb]
    // 0x940eb0: r2 = Instance_BorderStyle
    //     0x940eb0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940eb4: ldr             x2, [x2, #0x658]
    // 0x940eb8: StoreField: r1->field_13 = r2
    //     0x940eb8: stur            w2, [x1, #0x13]
    // 0x940ebc: d2 = -1.000000
    //     0x940ebc: fmov            d2, #-1.00000000
    // 0x940ec0: ArrayStore: r1[0] = d2  ; List_8
    //     0x940ec0: stur            d2, [x1, #0x17]
    // 0x940ec4: mov             x0, x1
    // 0x940ec8: LeaveFrame
    //     0x940ec8: mov             SP, fp
    //     0x940ecc: ldp             fp, lr, [SP], #0x10
    // 0x940ed0: ret
    //     0x940ed0: ret             
    // 0x940ed4: ldr             x3, [fp, #0x10]
    // 0x940ed8: ldur            x1, [fp, #-8]
    // 0x940edc: r2 = Instance_BorderStyle
    //     0x940edc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940ee0: ldr             x2, [x2, #0x658]
    // 0x940ee4: d1 = 1.000000
    //     0x940ee4: fmov            d1, #1.00000000
    // 0x940ee8: d2 = -1.000000
    //     0x940ee8: fmov            d2, #-1.00000000
    // 0x940eec: d0 = 2.000000
    //     0x940eec: fmov            d0, #2.00000000
    // 0x940ef0: r0 = LoadClassIdInstr(r3)
    //     0x940ef0: ldur            x0, [x3, #-1]
    //     0x940ef4: ubfx            x0, x0, #0xc, #0x14
    // 0x940ef8: r16 = Instance_MaterialState
    //     0x940ef8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x940efc: ldr             x16, [x16, #0x388]
    // 0x940f00: stp             x16, x3, [SP]
    // 0x940f04: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940f04: movz            x17, #0x1871
    //     0x940f08: movk            x17, #0x1, lsl #16
    //     0x940f0c: add             lr, x0, x17
    //     0x940f10: ldr             lr, [x21, lr, lsl #3]
    //     0x940f14: blr             lr
    // 0x940f18: tbnz            w0, #4, #0x940f94
    // 0x940f1c: ldur            x1, [fp, #-8]
    // 0x940f20: LoadField: r0 = r1->field_f
    //     0x940f20: ldur            w0, [x1, #0xf]
    // 0x940f24: DecompressPointer r0
    //     0x940f24: add             x0, x0, HEAP, lsl #32
    // 0x940f28: mov             x1, x0
    // 0x940f2c: LoadField: r0 = r1->field_8b
    //     0x940f2c: ldur            w0, [x1, #0x8b]
    // 0x940f30: DecompressPointer r0
    //     0x940f30: add             x0, x0, HEAP, lsl #32
    // 0x940f34: r16 = Sentinel
    //     0x940f34: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940f38: cmp             w0, w16
    // 0x940f3c: b.ne            #0x940f4c
    // 0x940f40: r2 = _colors
    //     0x940f40: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x940f44: ldr             x2, [x2, #0x608]
    // 0x940f48: r0 = InitLateFinalInstanceField()
    //     0x940f48: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x940f4c: LoadField: r1 = r0->field_57
    //     0x940f4c: ldur            w1, [x0, #0x57]
    // 0x940f50: DecompressPointer r1
    //     0x940f50: add             x1, x1, HEAP, lsl #32
    // 0x940f54: stur            x1, [fp, #-0x10]
    // 0x940f58: r0 = BorderSide()
    //     0x940f58: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x940f5c: mov             x1, x0
    // 0x940f60: ldur            x0, [fp, #-0x10]
    // 0x940f64: StoreField: r1->field_7 = r0
    //     0x940f64: stur            w0, [x1, #7]
    // 0x940f68: d0 = 1.000000
    //     0x940f68: fmov            d0, #1.00000000
    // 0x940f6c: StoreField: r1->field_b = d0
    //     0x940f6c: stur            d0, [x1, #0xb]
    // 0x940f70: r2 = Instance_BorderStyle
    //     0x940f70: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940f74: ldr             x2, [x2, #0x658]
    // 0x940f78: StoreField: r1->field_13 = r2
    //     0x940f78: stur            w2, [x1, #0x13]
    // 0x940f7c: d1 = -1.000000
    //     0x940f7c: fmov            d1, #-1.00000000
    // 0x940f80: ArrayStore: r1[0] = d1  ; List_8
    //     0x940f80: stur            d1, [x1, #0x17]
    // 0x940f84: mov             x0, x1
    // 0x940f88: LeaveFrame
    //     0x940f88: mov             SP, fp
    //     0x940f8c: ldp             fp, lr, [SP], #0x10
    // 0x940f90: ret
    //     0x940f90: ret             
    // 0x940f94: ldr             x0, [fp, #0x10]
    // 0x940f98: ldur            x1, [fp, #-8]
    // 0x940f9c: r2 = Instance_BorderStyle
    //     0x940f9c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x940fa0: ldr             x2, [x2, #0x658]
    // 0x940fa4: d0 = 1.000000
    //     0x940fa4: fmov            d0, #1.00000000
    // 0x940fa8: d1 = -1.000000
    //     0x940fa8: fmov            d1, #-1.00000000
    // 0x940fac: r3 = LoadClassIdInstr(r0)
    //     0x940fac: ldur            x3, [x0, #-1]
    //     0x940fb0: ubfx            x3, x3, #0xc, #0x14
    // 0x940fb4: r16 = Instance_MaterialState
    //     0x940fb4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x940fb8: ldr             x16, [x16, #0x398]
    // 0x940fbc: stp             x16, x0, [SP]
    // 0x940fc0: mov             x0, x3
    // 0x940fc4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x940fc4: movz            x17, #0x1871
    //     0x940fc8: movk            x17, #0x1, lsl #16
    //     0x940fcc: add             lr, x0, x17
    //     0x940fd0: ldr             lr, [x21, lr, lsl #3]
    //     0x940fd4: blr             lr
    // 0x940fd8: tbnz            w0, #4, #0x941050
    // 0x940fdc: ldur            x0, [fp, #-8]
    // 0x940fe0: LoadField: r1 = r0->field_f
    //     0x940fe0: ldur            w1, [x0, #0xf]
    // 0x940fe4: DecompressPointer r1
    //     0x940fe4: add             x1, x1, HEAP, lsl #32
    // 0x940fe8: LoadField: r0 = r1->field_8b
    //     0x940fe8: ldur            w0, [x1, #0x8b]
    // 0x940fec: DecompressPointer r0
    //     0x940fec: add             x0, x0, HEAP, lsl #32
    // 0x940ff0: r16 = Sentinel
    //     0x940ff0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x940ff4: cmp             w0, w16
    // 0x940ff8: b.ne            #0x941008
    // 0x940ffc: r2 = _colors
    //     0x940ffc: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x941000: ldr             x2, [x2, #0x608]
    // 0x941004: r0 = InitLateFinalInstanceField()
    //     0x941004: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941008: LoadField: r1 = r0->field_b
    //     0x941008: ldur            w1, [x0, #0xb]
    // 0x94100c: DecompressPointer r1
    //     0x94100c: add             x1, x1, HEAP, lsl #32
    // 0x941010: stur            x1, [fp, #-0x10]
    // 0x941014: r0 = BorderSide()
    //     0x941014: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x941018: mov             x1, x0
    // 0x94101c: ldur            x0, [fp, #-0x10]
    // 0x941020: StoreField: r1->field_7 = r0
    //     0x941020: stur            w0, [x1, #7]
    // 0x941024: d0 = 2.000000
    //     0x941024: fmov            d0, #2.00000000
    // 0x941028: StoreField: r1->field_b = d0
    //     0x941028: stur            d0, [x1, #0xb]
    // 0x94102c: r2 = Instance_BorderStyle
    //     0x94102c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x941030: ldr             x2, [x2, #0x658]
    // 0x941034: StoreField: r1->field_13 = r2
    //     0x941034: stur            w2, [x1, #0x13]
    // 0x941038: d0 = -1.000000
    //     0x941038: fmov            d0, #-1.00000000
    // 0x94103c: ArrayStore: r1[0] = d0  ; List_8
    //     0x94103c: stur            d0, [x1, #0x17]
    // 0x941040: mov             x0, x1
    // 0x941044: LeaveFrame
    //     0x941044: mov             SP, fp
    //     0x941048: ldp             fp, lr, [SP], #0x10
    // 0x94104c: ret
    //     0x94104c: ret             
    // 0x941050: ldur            x0, [fp, #-8]
    // 0x941054: r2 = Instance_BorderStyle
    //     0x941054: add             x2, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x941058: ldr             x2, [x2, #0x658]
    // 0x94105c: d0 = -1.000000
    //     0x94105c: fmov            d0, #-1.00000000
    // 0x941060: LoadField: r1 = r0->field_f
    //     0x941060: ldur            w1, [x0, #0xf]
    // 0x941064: DecompressPointer r1
    //     0x941064: add             x1, x1, HEAP, lsl #32
    // 0x941068: LoadField: r0 = r1->field_8b
    //     0x941068: ldur            w0, [x1, #0x8b]
    // 0x94106c: DecompressPointer r0
    //     0x94106c: add             x0, x0, HEAP, lsl #32
    // 0x941070: r16 = Sentinel
    //     0x941070: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941074: cmp             w0, w16
    // 0x941078: b.ne            #0x941088
    // 0x94107c: r2 = _colors
    //     0x94107c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x941080: ldr             x2, [x2, #0x608]
    // 0x941084: r0 = InitLateFinalInstanceField()
    //     0x941084: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941088: LoadField: r1 = r0->field_5f
    //     0x941088: ldur            w1, [x0, #0x5f]
    // 0x94108c: DecompressPointer r1
    //     0x94108c: add             x1, x1, HEAP, lsl #32
    // 0x941090: cmp             w1, NULL
    // 0x941094: b.ne            #0x9410a8
    // 0x941098: LoadField: r1 = r0->field_57
    //     0x941098: ldur            w1, [x0, #0x57]
    // 0x94109c: DecompressPointer r1
    //     0x94109c: add             x1, x1, HEAP, lsl #32
    // 0x9410a0: mov             x0, x1
    // 0x9410a4: b               #0x9410ac
    // 0x9410a8: mov             x0, x1
    // 0x9410ac: stur            x0, [fp, #-8]
    // 0x9410b0: r0 = BorderSide()
    //     0x9410b0: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x9410b4: ldur            x1, [fp, #-8]
    // 0x9410b8: StoreField: r0->field_7 = r1
    //     0x9410b8: stur            w1, [x0, #7]
    // 0x9410bc: d0 = 1.000000
    //     0x9410bc: fmov            d0, #1.00000000
    // 0x9410c0: StoreField: r0->field_b = d0
    //     0x9410c0: stur            d0, [x0, #0xb]
    // 0x9410c4: r1 = Instance_BorderStyle
    //     0x9410c4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x9410c8: ldr             x1, [x1, #0x658]
    // 0x9410cc: StoreField: r0->field_13 = r1
    //     0x9410cc: stur            w1, [x0, #0x13]
    // 0x9410d0: d0 = -1.000000
    //     0x9410d0: fmov            d0, #-1.00000000
    // 0x9410d4: ArrayStore: r0[0] = d0  ; List_8
    //     0x9410d4: stur            d0, [x0, #0x17]
    // 0x9410d8: LeaveFrame
    //     0x9410d8: mov             SP, fp
    //     0x9410dc: ldp             fp, lr, [SP], #0x10
    // 0x9410e0: ret
    //     0x9410e0: ret             
    // 0x9410e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x9410e4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x9410e8: b               #0x940bd0
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x941628, size: 0x478
    // 0x941628: EnterFrame
    //     0x941628: stp             fp, lr, [SP, #-0x10]!
    //     0x94162c: mov             fp, SP
    // 0x941630: AllocStack(0x20)
    //     0x941630: sub             SP, SP, #0x20
    // 0x941634: SetupParameters()
    //     0x941634: ldr             x0, [fp, #0x18]
    //     0x941638: ldur            w2, [x0, #0x17]
    //     0x94163c: add             x2, x2, HEAP, lsl #32
    //     0x941640: stur            x2, [fp, #-8]
    // 0x941644: CheckStackOverflow
    //     0x941644: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x941648: cmp             SP, x16
    //     0x94164c: b.ls            #0x941a98
    // 0x941650: LoadField: r1 = r2->field_f
    //     0x941650: ldur            w1, [x2, #0xf]
    // 0x941654: DecompressPointer r1
    //     0x941654: add             x1, x1, HEAP, lsl #32
    // 0x941658: LoadField: r0 = r1->field_8f
    //     0x941658: ldur            w0, [x1, #0x8f]
    // 0x94165c: DecompressPointer r0
    //     0x94165c: add             x0, x0, HEAP, lsl #32
    // 0x941660: r16 = Sentinel
    //     0x941660: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941664: cmp             w0, w16
    // 0x941668: b.ne            #0x941678
    // 0x94166c: r2 = _textTheme
    //     0x94166c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf688] Field <_InputDecoratorDefaultsM3@159019562._textTheme@159019562>: late final (offset: 0x90)
    //     0x941670: ldr             x2, [x2, #0x688]
    // 0x941674: r0 = InitLateFinalInstanceField()
    //     0x941674: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941678: LoadField: r1 = r0->field_2b
    //     0x941678: ldur            w1, [x0, #0x2b]
    // 0x94167c: DecompressPointer r1
    //     0x94167c: add             x1, x1, HEAP, lsl #32
    // 0x941680: cmp             w1, NULL
    // 0x941684: b.ne            #0x941694
    // 0x941688: r2 = Instance_TextStyle
    //     0x941688: add             x2, PP, #0xf, lsl #12  ; [pp+0xf690] Obj!TextStyle@c360f1
    //     0x94168c: ldr             x2, [x2, #0x690]
    // 0x941690: b               #0x941698
    // 0x941694: mov             x2, x1
    // 0x941698: ldr             x1, [fp, #0x10]
    // 0x94169c: stur            x2, [fp, #-0x10]
    // 0x9416a0: r0 = LoadClassIdInstr(r1)
    //     0x9416a0: ldur            x0, [x1, #-1]
    //     0x9416a4: ubfx            x0, x0, #0xc, #0x14
    // 0x9416a8: r16 = Instance_MaterialState
    //     0x9416a8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x9416ac: ldr             x16, [x16, #0x518]
    // 0x9416b0: stp             x16, x1, [SP]
    // 0x9416b4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9416b4: movz            x17, #0x1871
    //     0x9416b8: movk            x17, #0x1, lsl #16
    //     0x9416bc: add             lr, x0, x17
    //     0x9416c0: ldr             lr, [x21, lr, lsl #3]
    //     0x9416c4: blr             lr
    // 0x9416c8: tbnz            w0, #4, #0x941738
    // 0x9416cc: ldur            x1, [fp, #-8]
    // 0x9416d0: LoadField: r0 = r1->field_f
    //     0x9416d0: ldur            w0, [x1, #0xf]
    // 0x9416d4: DecompressPointer r0
    //     0x9416d4: add             x0, x0, HEAP, lsl #32
    // 0x9416d8: mov             x1, x0
    // 0x9416dc: LoadField: r0 = r1->field_8b
    //     0x9416dc: ldur            w0, [x1, #0x8b]
    // 0x9416e0: DecompressPointer r0
    //     0x9416e0: add             x0, x0, HEAP, lsl #32
    // 0x9416e4: r16 = Sentinel
    //     0x9416e4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9416e8: cmp             w0, w16
    // 0x9416ec: b.ne            #0x9416fc
    // 0x9416f0: r2 = _colors
    //     0x9416f0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9416f4: ldr             x2, [x2, #0x608]
    // 0x9416f8: r0 = InitLateFinalInstanceField()
    //     0x9416f8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9416fc: LoadField: r1 = r0->field_57
    //     0x9416fc: ldur            w1, [x0, #0x57]
    // 0x941700: DecompressPointer r1
    //     0x941700: add             x1, x1, HEAP, lsl #32
    // 0x941704: str             x1, [SP, #8]
    // 0x941708: d0 = 0.380000
    //     0x941708: add             x17, PP, #0xf, lsl #12  ; [pp+0xf468] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x94170c: ldr             d0, [x17, #0x468]
    // 0x941710: str             d0, [SP]
    // 0x941714: r0 = withOpacity()
    //     0x941714: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x941718: ldur            x16, [fp, #-0x10]
    // 0x94171c: stp             x0, x16, [SP]
    // 0x941720: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x941720: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x941724: ldr             x4, [x4, #0x490]
    // 0x941728: r0 = copyWith()
    //     0x941728: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x94172c: LeaveFrame
    //     0x94172c: mov             SP, fp
    //     0x941730: ldp             fp, lr, [SP], #0x10
    // 0x941734: ret
    //     0x941734: ret             
    // 0x941738: ldr             x2, [fp, #0x10]
    // 0x94173c: ldur            x1, [fp, #-8]
    // 0x941740: r0 = LoadClassIdInstr(r2)
    //     0x941740: ldur            x0, [x2, #-1]
    //     0x941744: ubfx            x0, x0, #0xc, #0x14
    // 0x941748: r16 = Instance_MaterialState
    //     0x941748: add             x16, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0x94174c: ldr             x16, [x16, #0x660]
    // 0x941750: stp             x16, x2, [SP]
    // 0x941754: r0 = GDT[cid_x0 + 0x11871]()
    //     0x941754: movz            x17, #0x1871
    //     0x941758: movk            x17, #0x1, lsl #16
    //     0x94175c: add             lr, x0, x17
    //     0x941760: ldr             lr, [x21, lr, lsl #3]
    //     0x941764: blr             lr
    // 0x941768: tbnz            w0, #4, #0x9418f4
    // 0x94176c: ldr             x1, [fp, #0x10]
    // 0x941770: r0 = LoadClassIdInstr(r1)
    //     0x941770: ldur            x0, [x1, #-1]
    //     0x941774: ubfx            x0, x0, #0xc, #0x14
    // 0x941778: r16 = Instance_MaterialState
    //     0x941778: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x94177c: ldr             x16, [x16, #0x388]
    // 0x941780: stp             x16, x1, [SP]
    // 0x941784: r0 = GDT[cid_x0 + 0x11871]()
    //     0x941784: movz            x17, #0x1871
    //     0x941788: movk            x17, #0x1, lsl #16
    //     0x94178c: add             lr, x0, x17
    //     0x941790: ldr             lr, [x21, lr, lsl #3]
    //     0x941794: blr             lr
    // 0x941798: tbnz            w0, #4, #0x941810
    // 0x94179c: ldur            x1, [fp, #-8]
    // 0x9417a0: LoadField: r0 = r1->field_f
    //     0x9417a0: ldur            w0, [x1, #0xf]
    // 0x9417a4: DecompressPointer r0
    //     0x9417a4: add             x0, x0, HEAP, lsl #32
    // 0x9417a8: mov             x1, x0
    // 0x9417ac: LoadField: r0 = r1->field_8b
    //     0x9417ac: ldur            w0, [x1, #0x8b]
    // 0x9417b0: DecompressPointer r0
    //     0x9417b0: add             x0, x0, HEAP, lsl #32
    // 0x9417b4: r16 = Sentinel
    //     0x9417b4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9417b8: cmp             w0, w16
    // 0x9417bc: b.ne            #0x9417cc
    // 0x9417c0: r2 = _colors
    //     0x9417c0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9417c4: ldr             x2, [x2, #0x608]
    // 0x9417c8: r0 = InitLateFinalInstanceField()
    //     0x9417c8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9417cc: LoadField: r1 = r0->field_47
    //     0x9417cc: ldur            w1, [x0, #0x47]
    // 0x9417d0: DecompressPointer r1
    //     0x9417d0: add             x1, x1, HEAP, lsl #32
    // 0x9417d4: cmp             w1, NULL
    // 0x9417d8: b.ne            #0x9417ec
    // 0x9417dc: LoadField: r1 = r0->field_3f
    //     0x9417dc: ldur            w1, [x0, #0x3f]
    // 0x9417e0: DecompressPointer r1
    //     0x9417e0: add             x1, x1, HEAP, lsl #32
    // 0x9417e4: mov             x0, x1
    // 0x9417e8: b               #0x9417f0
    // 0x9417ec: mov             x0, x1
    // 0x9417f0: ldur            x16, [fp, #-0x10]
    // 0x9417f4: stp             x0, x16, [SP]
    // 0x9417f8: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x9417f8: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x9417fc: ldr             x4, [x4, #0x490]
    // 0x941800: r0 = copyWith()
    //     0x941800: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x941804: LeaveFrame
    //     0x941804: mov             SP, fp
    //     0x941808: ldp             fp, lr, [SP], #0x10
    // 0x94180c: ret
    //     0x94180c: ret             
    // 0x941810: ldr             x2, [fp, #0x10]
    // 0x941814: ldur            x1, [fp, #-8]
    // 0x941818: r0 = LoadClassIdInstr(r2)
    //     0x941818: ldur            x0, [x2, #-1]
    //     0x94181c: ubfx            x0, x0, #0xc, #0x14
    // 0x941820: r16 = Instance_MaterialState
    //     0x941820: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x941824: ldr             x16, [x16, #0x398]
    // 0x941828: stp             x16, x2, [SP]
    // 0x94182c: r0 = GDT[cid_x0 + 0x11871]()
    //     0x94182c: movz            x17, #0x1871
    //     0x941830: movk            x17, #0x1, lsl #16
    //     0x941834: add             lr, x0, x17
    //     0x941838: ldr             lr, [x21, lr, lsl #3]
    //     0x94183c: blr             lr
    // 0x941840: tbnz            w0, #4, #0x94189c
    // 0x941844: ldur            x1, [fp, #-8]
    // 0x941848: LoadField: r0 = r1->field_f
    //     0x941848: ldur            w0, [x1, #0xf]
    // 0x94184c: DecompressPointer r0
    //     0x94184c: add             x0, x0, HEAP, lsl #32
    // 0x941850: mov             x1, x0
    // 0x941854: LoadField: r0 = r1->field_8b
    //     0x941854: ldur            w0, [x1, #0x8b]
    // 0x941858: DecompressPointer r0
    //     0x941858: add             x0, x0, HEAP, lsl #32
    // 0x94185c: r16 = Sentinel
    //     0x94185c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941860: cmp             w0, w16
    // 0x941864: b.ne            #0x941874
    // 0x941868: r2 = _colors
    //     0x941868: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x94186c: ldr             x2, [x2, #0x608]
    // 0x941870: r0 = InitLateFinalInstanceField()
    //     0x941870: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941874: LoadField: r1 = r0->field_3b
    //     0x941874: ldur            w1, [x0, #0x3b]
    // 0x941878: DecompressPointer r1
    //     0x941878: add             x1, x1, HEAP, lsl #32
    // 0x94187c: ldur            x16, [fp, #-0x10]
    // 0x941880: stp             x1, x16, [SP]
    // 0x941884: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x941884: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x941888: ldr             x4, [x4, #0x490]
    // 0x94188c: r0 = copyWith()
    //     0x94188c: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x941890: LeaveFrame
    //     0x941890: mov             SP, fp
    //     0x941894: ldp             fp, lr, [SP], #0x10
    // 0x941898: ret
    //     0x941898: ret             
    // 0x94189c: ldur            x1, [fp, #-8]
    // 0x9418a0: LoadField: r0 = r1->field_f
    //     0x9418a0: ldur            w0, [x1, #0xf]
    // 0x9418a4: DecompressPointer r0
    //     0x9418a4: add             x0, x0, HEAP, lsl #32
    // 0x9418a8: mov             x1, x0
    // 0x9418ac: LoadField: r0 = r1->field_8b
    //     0x9418ac: ldur            w0, [x1, #0x8b]
    // 0x9418b0: DecompressPointer r0
    //     0x9418b0: add             x0, x0, HEAP, lsl #32
    // 0x9418b4: r16 = Sentinel
    //     0x9418b4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9418b8: cmp             w0, w16
    // 0x9418bc: b.ne            #0x9418cc
    // 0x9418c0: r2 = _colors
    //     0x9418c0: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9418c4: ldr             x2, [x2, #0x608]
    // 0x9418c8: r0 = InitLateFinalInstanceField()
    //     0x9418c8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x9418cc: LoadField: r1 = r0->field_3b
    //     0x9418cc: ldur            w1, [x0, #0x3b]
    // 0x9418d0: DecompressPointer r1
    //     0x9418d0: add             x1, x1, HEAP, lsl #32
    // 0x9418d4: ldur            x16, [fp, #-0x10]
    // 0x9418d8: stp             x1, x16, [SP]
    // 0x9418dc: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x9418dc: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x9418e0: ldr             x4, [x4, #0x490]
    // 0x9418e4: r0 = copyWith()
    //     0x9418e4: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x9418e8: LeaveFrame
    //     0x9418e8: mov             SP, fp
    //     0x9418ec: ldp             fp, lr, [SP], #0x10
    // 0x9418f0: ret
    //     0x9418f0: ret             
    // 0x9418f4: ldr             x2, [fp, #0x10]
    // 0x9418f8: ldur            x1, [fp, #-8]
    // 0x9418fc: r0 = LoadClassIdInstr(r2)
    //     0x9418fc: ldur            x0, [x2, #-1]
    //     0x941900: ubfx            x0, x0, #0xc, #0x14
    // 0x941904: r16 = Instance_MaterialState
    //     0x941904: add             x16, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x941908: ldr             x16, [x16, #0x388]
    // 0x94190c: stp             x16, x2, [SP]
    // 0x941910: r0 = GDT[cid_x0 + 0x11871]()
    //     0x941910: movz            x17, #0x1871
    //     0x941914: movk            x17, #0x1, lsl #16
    //     0x941918: add             lr, x0, x17
    //     0x94191c: ldr             lr, [x21, lr, lsl #3]
    //     0x941920: blr             lr
    // 0x941924: tbnz            w0, #4, #0x94199c
    // 0x941928: ldur            x1, [fp, #-8]
    // 0x94192c: LoadField: r0 = r1->field_f
    //     0x94192c: ldur            w0, [x1, #0xf]
    // 0x941930: DecompressPointer r0
    //     0x941930: add             x0, x0, HEAP, lsl #32
    // 0x941934: mov             x1, x0
    // 0x941938: LoadField: r0 = r1->field_8b
    //     0x941938: ldur            w0, [x1, #0x8b]
    // 0x94193c: DecompressPointer r0
    //     0x94193c: add             x0, x0, HEAP, lsl #32
    // 0x941940: r16 = Sentinel
    //     0x941940: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941944: cmp             w0, w16
    // 0x941948: b.ne            #0x941958
    // 0x94194c: r2 = _colors
    //     0x94194c: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x941950: ldr             x2, [x2, #0x608]
    // 0x941954: r0 = InitLateFinalInstanceField()
    //     0x941954: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941958: LoadField: r1 = r0->field_5f
    //     0x941958: ldur            w1, [x0, #0x5f]
    // 0x94195c: DecompressPointer r1
    //     0x94195c: add             x1, x1, HEAP, lsl #32
    // 0x941960: cmp             w1, NULL
    // 0x941964: b.ne            #0x941978
    // 0x941968: LoadField: r1 = r0->field_57
    //     0x941968: ldur            w1, [x0, #0x57]
    // 0x94196c: DecompressPointer r1
    //     0x94196c: add             x1, x1, HEAP, lsl #32
    // 0x941970: mov             x0, x1
    // 0x941974: b               #0x94197c
    // 0x941978: mov             x0, x1
    // 0x94197c: ldur            x16, [fp, #-0x10]
    // 0x941980: stp             x0, x16, [SP]
    // 0x941984: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x941984: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x941988: ldr             x4, [x4, #0x490]
    // 0x94198c: r0 = copyWith()
    //     0x94198c: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x941990: LeaveFrame
    //     0x941990: mov             SP, fp
    //     0x941994: ldp             fp, lr, [SP], #0x10
    // 0x941998: ret
    //     0x941998: ret             
    // 0x94199c: ldr             x0, [fp, #0x10]
    // 0x9419a0: ldur            x1, [fp, #-8]
    // 0x9419a4: r2 = LoadClassIdInstr(r0)
    //     0x9419a4: ldur            x2, [x0, #-1]
    //     0x9419a8: ubfx            x2, x2, #0xc, #0x14
    // 0x9419ac: r16 = Instance_MaterialState
    //     0x9419ac: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x9419b0: ldr             x16, [x16, #0x398]
    // 0x9419b4: stp             x16, x0, [SP]
    // 0x9419b8: mov             x0, x2
    // 0x9419bc: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9419bc: movz            x17, #0x1871
    //     0x9419c0: movk            x17, #0x1, lsl #16
    //     0x9419c4: add             lr, x0, x17
    //     0x9419c8: ldr             lr, [x21, lr, lsl #3]
    //     0x9419cc: blr             lr
    // 0x9419d0: tbnz            w0, #4, #0x941a28
    // 0x9419d4: ldur            x0, [fp, #-8]
    // 0x9419d8: LoadField: r1 = r0->field_f
    //     0x9419d8: ldur            w1, [x0, #0xf]
    // 0x9419dc: DecompressPointer r1
    //     0x9419dc: add             x1, x1, HEAP, lsl #32
    // 0x9419e0: LoadField: r0 = r1->field_8b
    //     0x9419e0: ldur            w0, [x1, #0x8b]
    // 0x9419e4: DecompressPointer r0
    //     0x9419e4: add             x0, x0, HEAP, lsl #32
    // 0x9419e8: r16 = Sentinel
    //     0x9419e8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9419ec: cmp             w0, w16
    // 0x9419f0: b.ne            #0x941a00
    // 0x9419f4: r2 = _colors
    //     0x9419f4: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x9419f8: ldr             x2, [x2, #0x608]
    // 0x9419fc: r0 = InitLateFinalInstanceField()
    //     0x9419fc: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941a00: LoadField: r1 = r0->field_b
    //     0x941a00: ldur            w1, [x0, #0xb]
    // 0x941a04: DecompressPointer r1
    //     0x941a04: add             x1, x1, HEAP, lsl #32
    // 0x941a08: ldur            x16, [fp, #-0x10]
    // 0x941a0c: stp             x1, x16, [SP]
    // 0x941a10: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x941a10: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x941a14: ldr             x4, [x4, #0x490]
    // 0x941a18: r0 = copyWith()
    //     0x941a18: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x941a1c: LeaveFrame
    //     0x941a1c: mov             SP, fp
    //     0x941a20: ldp             fp, lr, [SP], #0x10
    // 0x941a24: ret
    //     0x941a24: ret             
    // 0x941a28: ldur            x0, [fp, #-8]
    // 0x941a2c: LoadField: r1 = r0->field_f
    //     0x941a2c: ldur            w1, [x0, #0xf]
    // 0x941a30: DecompressPointer r1
    //     0x941a30: add             x1, x1, HEAP, lsl #32
    // 0x941a34: LoadField: r0 = r1->field_8b
    //     0x941a34: ldur            w0, [x1, #0x8b]
    // 0x941a38: DecompressPointer r0
    //     0x941a38: add             x0, x0, HEAP, lsl #32
    // 0x941a3c: r16 = Sentinel
    //     0x941a3c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941a40: cmp             w0, w16
    // 0x941a44: b.ne            #0x941a54
    // 0x941a48: r2 = _colors
    //     0x941a48: add             x2, PP, #0xf, lsl #12  ; [pp+0xf608] Field <_InputDecoratorDefaultsM3@159019562._colors@159019562>: late final (offset: 0x8c)
    //     0x941a4c: ldr             x2, [x2, #0x608]
    // 0x941a50: r0 = InitLateFinalInstanceField()
    //     0x941a50: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x941a54: LoadField: r1 = r0->field_5f
    //     0x941a54: ldur            w1, [x0, #0x5f]
    // 0x941a58: DecompressPointer r1
    //     0x941a58: add             x1, x1, HEAP, lsl #32
    // 0x941a5c: cmp             w1, NULL
    // 0x941a60: b.ne            #0x941a74
    // 0x941a64: LoadField: r1 = r0->field_57
    //     0x941a64: ldur            w1, [x0, #0x57]
    // 0x941a68: DecompressPointer r1
    //     0x941a68: add             x1, x1, HEAP, lsl #32
    // 0x941a6c: mov             x0, x1
    // 0x941a70: b               #0x941a78
    // 0x941a74: mov             x0, x1
    // 0x941a78: ldur            x16, [fp, #-0x10]
    // 0x941a7c: stp             x0, x16, [SP]
    // 0x941a80: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x941a80: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x941a84: ldr             x4, [x4, #0x490]
    // 0x941a88: r0 = copyWith()
    //     0x941a88: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x941a8c: LeaveFrame
    //     0x941a8c: mov             SP, fp
    //     0x941a90: ldp             fp, lr, [SP], #0x10
    // 0x941a94: ret
    //     0x941a94: ret             
    // 0x941a98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x941a98: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x941a9c: b               #0x941650
  }
  _ _InputDecoratorDefaultsM3(/* No info */) {
    // ** addr: 0x941aac, size: 0x6c
    // 0x941aac: r4 = Sentinel
    //     0x941aac: ldr             x4, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x941ab0: r3 = Instance_FloatingLabelBehavior
    //     0x941ab0: add             x3, PP, #0xf, lsl #12  ; [pp+0xf698] Obj!FloatingLabelBehavior@c449d1
    //     0x941ab4: ldr             x3, [x3, #0x698]
    // 0x941ab8: r2 = Instance_FloatingLabelAlignment
    //     0x941ab8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0x941abc: ldr             x2, [x2, #0x6a0]
    // 0x941ac0: r1 = false
    //     0x941ac0: add             x1, NULL, #0x30  ; false
    // 0x941ac4: ldr             x5, [SP, #8]
    // 0x941ac8: StoreField: r5->field_8b = r4
    //     0x941ac8: stur            w4, [x5, #0x8b]
    // 0x941acc: StoreField: r5->field_8f = r4
    //     0x941acc: stur            w4, [x5, #0x8f]
    // 0x941ad0: ldr             x0, [SP]
    // 0x941ad4: StoreField: r5->field_87 = r0
    //     0x941ad4: stur            w0, [x5, #0x87]
    //     0x941ad8: ldurb           w16, [x5, #-1]
    //     0x941adc: ldurb           w17, [x0, #-1]
    //     0x941ae0: and             x16, x17, x16, lsr #2
    //     0x941ae4: tst             x16, HEAP, lsr #32
    //     0x941ae8: b.eq            #0x941af8
    //     0x941aec: str             lr, [SP, #-8]!
    //     0x941af0: bl              #0xc5d77c  ; WriteBarrierWrappersStub
    //     0x941af4: ldr             lr, [SP], #8
    // 0x941af8: StoreField: r5->field_23 = r3
    //     0x941af8: stur            w3, [x5, #0x23]
    // 0x941afc: StoreField: r5->field_27 = r2
    //     0x941afc: stur            w2, [x5, #0x27]
    // 0x941b00: StoreField: r5->field_2b = r1
    //     0x941b00: stur            w1, [x5, #0x2b]
    // 0x941b04: StoreField: r5->field_33 = r1
    //     0x941b04: stur            w1, [x5, #0x33]
    // 0x941b08: StoreField: r5->field_4f = r1
    //     0x941b08: stur            w1, [x5, #0x4f]
    // 0x941b0c: StoreField: r5->field_7f = r1
    //     0x941b0c: stur            w1, [x5, #0x7f]
    // 0x941b10: r0 = Null
    //     0x941b10: mov             x0, NULL
    // 0x941b14: ret
    //     0x941b14: ret             
  }
}

// class id: 2764, size: 0x8c, field offset: 0x88
//   const constructor, 
class _InputDecoratorDefaultsM2 extends InputDecorationTheme {

  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93e8c8, size: 0x110
    // 0x93e8c8: EnterFrame
    //     0x93e8c8: stp             fp, lr, [SP, #-0x10]!
    //     0x93e8cc: mov             fp, SP
    // 0x93e8d0: AllocStack(0x18)
    //     0x93e8d0: sub             SP, SP, #0x18
    // 0x93e8d4: SetupParameters()
    //     0x93e8d4: ldr             x0, [fp, #0x18]
    //     0x93e8d8: ldur            w1, [x0, #0x17]
    //     0x93e8dc: add             x1, x1, HEAP, lsl #32
    // 0x93e8e0: CheckStackOverflow
    //     0x93e8e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93e8e4: cmp             SP, x16
    //     0x93e8e8: b.ls            #0x93e9c8
    // 0x93e8ec: LoadField: r0 = r1->field_f
    //     0x93e8ec: ldur            w0, [x1, #0xf]
    // 0x93e8f0: DecompressPointer r0
    //     0x93e8f0: add             x0, x0, HEAP, lsl #32
    // 0x93e8f4: LoadField: r1 = r0->field_87
    //     0x93e8f4: ldur            w1, [x0, #0x87]
    // 0x93e8f8: DecompressPointer r1
    //     0x93e8f8: add             x1, x1, HEAP, lsl #32
    // 0x93e8fc: str             x1, [SP]
    // 0x93e900: r0 = of()
    //     0x93e900: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93e904: mov             x1, x0
    // 0x93e908: ldr             x0, [fp, #0x10]
    // 0x93e90c: stur            x1, [fp, #-8]
    // 0x93e910: r2 = LoadClassIdInstr(r0)
    //     0x93e910: ldur            x2, [x0, #-1]
    //     0x93e914: ubfx            x2, x2, #0xc, #0x14
    // 0x93e918: r16 = Instance_MaterialState
    //     0x93e918: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93e91c: ldr             x16, [x16, #0x518]
    // 0x93e920: stp             x16, x0, [SP]
    // 0x93e924: mov             x0, x2
    // 0x93e928: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93e928: movz            x17, #0x1871
    //     0x93e92c: movk            x17, #0x1, lsl #16
    //     0x93e930: add             lr, x0, x17
    //     0x93e934: ldr             lr, [x21, lr, lsl #3]
    //     0x93e938: blr             lr
    // 0x93e93c: tbnz            w0, #4, #0x93e980
    // 0x93e940: ldur            x0, [fp, #-8]
    // 0x93e944: LoadField: r1 = r0->field_93
    //     0x93e944: ldur            w1, [x0, #0x93]
    // 0x93e948: DecompressPointer r1
    //     0x93e948: add             x1, x1, HEAP, lsl #32
    // 0x93e94c: LoadField: r0 = r1->field_33
    //     0x93e94c: ldur            w0, [x1, #0x33]
    // 0x93e950: DecompressPointer r0
    //     0x93e950: add             x0, x0, HEAP, lsl #32
    // 0x93e954: cmp             w0, NULL
    // 0x93e958: b.eq            #0x93e9d0
    // 0x93e95c: r16 = Instance_Color
    //     0x93e95c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x93e960: ldr             x16, [x16, #0x4a0]
    // 0x93e964: stp             x16, x0, [SP]
    // 0x93e968: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93e968: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93e96c: ldr             x4, [x4, #0x490]
    // 0x93e970: r0 = copyWith()
    //     0x93e970: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93e974: LeaveFrame
    //     0x93e974: mov             SP, fp
    //     0x93e978: ldp             fp, lr, [SP], #0x10
    // 0x93e97c: ret
    //     0x93e97c: ret             
    // 0x93e980: ldur            x0, [fp, #-8]
    // 0x93e984: LoadField: r1 = r0->field_93
    //     0x93e984: ldur            w1, [x0, #0x93]
    // 0x93e988: DecompressPointer r1
    //     0x93e988: add             x1, x1, HEAP, lsl #32
    // 0x93e98c: LoadField: r2 = r1->field_33
    //     0x93e98c: ldur            w2, [x1, #0x33]
    // 0x93e990: DecompressPointer r2
    //     0x93e990: add             x2, x2, HEAP, lsl #32
    // 0x93e994: cmp             w2, NULL
    // 0x93e998: b.eq            #0x93e9d4
    // 0x93e99c: LoadField: r1 = r0->field_3f
    //     0x93e99c: ldur            w1, [x0, #0x3f]
    // 0x93e9a0: DecompressPointer r1
    //     0x93e9a0: add             x1, x1, HEAP, lsl #32
    // 0x93e9a4: LoadField: r0 = r1->field_3b
    //     0x93e9a4: ldur            w0, [x1, #0x3b]
    // 0x93e9a8: DecompressPointer r0
    //     0x93e9a8: add             x0, x0, HEAP, lsl #32
    // 0x93e9ac: stp             x0, x2, [SP]
    // 0x93e9b0: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93e9b0: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93e9b4: ldr             x4, [x4, #0x490]
    // 0x93e9b8: r0 = copyWith()
    //     0x93e9b8: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93e9bc: LeaveFrame
    //     0x93e9bc: mov             SP, fp
    //     0x93e9c0: ldp             fp, lr, [SP], #0x10
    // 0x93e9c4: ret
    //     0x93e9c4: ret             
    // 0x93e9c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93e9c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93e9cc: b               #0x93e8ec
    // 0x93e9d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e9d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e9d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e9d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93ec6c, size: 0x108
    // 0x93ec6c: EnterFrame
    //     0x93ec6c: stp             fp, lr, [SP, #-0x10]!
    //     0x93ec70: mov             fp, SP
    // 0x93ec74: AllocStack(0x18)
    //     0x93ec74: sub             SP, SP, #0x18
    // 0x93ec78: SetupParameters()
    //     0x93ec78: ldr             x0, [fp, #0x18]
    //     0x93ec7c: ldur            w1, [x0, #0x17]
    //     0x93ec80: add             x1, x1, HEAP, lsl #32
    // 0x93ec84: CheckStackOverflow
    //     0x93ec84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93ec88: cmp             SP, x16
    //     0x93ec8c: b.ls            #0x93ed64
    // 0x93ec90: LoadField: r0 = r1->field_f
    //     0x93ec90: ldur            w0, [x1, #0xf]
    // 0x93ec94: DecompressPointer r0
    //     0x93ec94: add             x0, x0, HEAP, lsl #32
    // 0x93ec98: LoadField: r1 = r0->field_87
    //     0x93ec98: ldur            w1, [x0, #0x87]
    // 0x93ec9c: DecompressPointer r1
    //     0x93ec9c: add             x1, x1, HEAP, lsl #32
    // 0x93eca0: str             x1, [SP]
    // 0x93eca4: r0 = of()
    //     0x93eca4: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93eca8: mov             x1, x0
    // 0x93ecac: ldr             x0, [fp, #0x10]
    // 0x93ecb0: stur            x1, [fp, #-8]
    // 0x93ecb4: r2 = LoadClassIdInstr(r0)
    //     0x93ecb4: ldur            x2, [x0, #-1]
    //     0x93ecb8: ubfx            x2, x2, #0xc, #0x14
    // 0x93ecbc: r16 = Instance_MaterialState
    //     0x93ecbc: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93ecc0: ldr             x16, [x16, #0x518]
    // 0x93ecc4: stp             x16, x0, [SP]
    // 0x93ecc8: mov             x0, x2
    // 0x93eccc: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93eccc: movz            x17, #0x1871
    //     0x93ecd0: movk            x17, #0x1, lsl #16
    //     0x93ecd4: add             lr, x0, x17
    //     0x93ecd8: ldr             lr, [x21, lr, lsl #3]
    //     0x93ecdc: blr             lr
    // 0x93ece0: tbnz            w0, #4, #0x93ed24
    // 0x93ece4: ldur            x0, [fp, #-8]
    // 0x93ece8: LoadField: r1 = r0->field_93
    //     0x93ece8: ldur            w1, [x0, #0x93]
    // 0x93ecec: DecompressPointer r1
    //     0x93ecec: add             x1, x1, HEAP, lsl #32
    // 0x93ecf0: LoadField: r0 = r1->field_33
    //     0x93ecf0: ldur            w0, [x1, #0x33]
    // 0x93ecf4: DecompressPointer r0
    //     0x93ecf4: add             x0, x0, HEAP, lsl #32
    // 0x93ecf8: cmp             w0, NULL
    // 0x93ecfc: b.eq            #0x93ed6c
    // 0x93ed00: r16 = Instance_Color
    //     0x93ed00: add             x16, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x93ed04: ldr             x16, [x16, #0x4a0]
    // 0x93ed08: stp             x16, x0, [SP]
    // 0x93ed0c: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93ed0c: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93ed10: ldr             x4, [x4, #0x490]
    // 0x93ed14: r0 = copyWith()
    //     0x93ed14: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93ed18: LeaveFrame
    //     0x93ed18: mov             SP, fp
    //     0x93ed1c: ldp             fp, lr, [SP], #0x10
    // 0x93ed20: ret
    //     0x93ed20: ret             
    // 0x93ed24: ldur            x0, [fp, #-8]
    // 0x93ed28: LoadField: r1 = r0->field_93
    //     0x93ed28: ldur            w1, [x0, #0x93]
    // 0x93ed2c: DecompressPointer r1
    //     0x93ed2c: add             x1, x1, HEAP, lsl #32
    // 0x93ed30: LoadField: r2 = r1->field_33
    //     0x93ed30: ldur            w2, [x1, #0x33]
    // 0x93ed34: DecompressPointer r2
    //     0x93ed34: add             x2, x2, HEAP, lsl #32
    // 0x93ed38: cmp             w2, NULL
    // 0x93ed3c: b.eq            #0x93ed70
    // 0x93ed40: LoadField: r1 = r0->field_57
    //     0x93ed40: ldur            w1, [x0, #0x57]
    // 0x93ed44: DecompressPointer r1
    //     0x93ed44: add             x1, x1, HEAP, lsl #32
    // 0x93ed48: stp             x1, x2, [SP]
    // 0x93ed4c: r4 = const [0, 0x2, 0x2, 0x1, color, 0x1, null]
    //     0x93ed4c: add             x4, PP, #0xf, lsl #12  ; [pp+0xf490] List(7) [0, 0x2, 0x2, 0x1, "color", 0x1, Null]
    //     0x93ed50: ldr             x4, [x4, #0x490]
    // 0x93ed54: r0 = copyWith()
    //     0x93ed54: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x93ed58: LeaveFrame
    //     0x93ed58: mov             SP, fp
    //     0x93ed5c: ldp             fp, lr, [SP], #0x10
    // 0x93ed60: ret
    //     0x93ed60: ret             
    // 0x93ed64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93ed64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93ed68: b               #0x93ec90
    // 0x93ed6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93ed6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93ed70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93ed70: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93f158, size: 0x19c
    // 0x93f158: EnterFrame
    //     0x93f158: stp             fp, lr, [SP, #-0x10]!
    //     0x93f15c: mov             fp, SP
    // 0x93f160: AllocStack(0x18)
    //     0x93f160: sub             SP, SP, #0x18
    // 0x93f164: SetupParameters()
    //     0x93f164: ldr             x0, [fp, #0x18]
    //     0x93f168: ldur            w1, [x0, #0x17]
    //     0x93f16c: add             x1, x1, HEAP, lsl #32
    //     0x93f170: stur            x1, [fp, #-8]
    // 0x93f174: CheckStackOverflow
    //     0x93f174: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f178: cmp             SP, x16
    //     0x93f17c: b.ls            #0x93f2ec
    // 0x93f180: ldr             x2, [fp, #0x10]
    // 0x93f184: r0 = LoadClassIdInstr(r2)
    //     0x93f184: ldur            x0, [x2, #-1]
    //     0x93f188: ubfx            x0, x0, #0xc, #0x14
    // 0x93f18c: r16 = Instance_MaterialState
    //     0x93f18c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93f190: ldr             x16, [x16, #0x518]
    // 0x93f194: stp             x16, x2, [SP]
    // 0x93f198: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f198: movz            x17, #0x1871
    //     0x93f19c: movk            x17, #0x1, lsl #16
    //     0x93f1a0: add             lr, x0, x17
    //     0x93f1a4: ldr             lr, [x21, lr, lsl #3]
    //     0x93f1a8: blr             lr
    // 0x93f1ac: tbnz            w0, #4, #0x93f21c
    // 0x93f1b0: ldr             x1, [fp, #0x10]
    // 0x93f1b4: r0 = LoadClassIdInstr(r1)
    //     0x93f1b4: ldur            x0, [x1, #-1]
    //     0x93f1b8: ubfx            x0, x0, #0xc, #0x14
    // 0x93f1bc: r16 = Instance_MaterialState
    //     0x93f1bc: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x93f1c0: ldr             x16, [x16, #0x398]
    // 0x93f1c4: stp             x16, x1, [SP]
    // 0x93f1c8: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f1c8: movz            x17, #0x1871
    //     0x93f1cc: movk            x17, #0x1, lsl #16
    //     0x93f1d0: add             lr, x0, x17
    //     0x93f1d4: ldr             lr, [x21, lr, lsl #3]
    //     0x93f1d8: blr             lr
    // 0x93f1dc: tbz             w0, #4, #0x93f214
    // 0x93f1e0: ldur            x1, [fp, #-8]
    // 0x93f1e4: LoadField: r0 = r1->field_f
    //     0x93f1e4: ldur            w0, [x1, #0xf]
    // 0x93f1e8: DecompressPointer r0
    //     0x93f1e8: add             x0, x0, HEAP, lsl #32
    // 0x93f1ec: LoadField: r1 = r0->field_87
    //     0x93f1ec: ldur            w1, [x0, #0x87]
    // 0x93f1f0: DecompressPointer r1
    //     0x93f1f0: add             x1, x1, HEAP, lsl #32
    // 0x93f1f4: str             x1, [SP]
    // 0x93f1f8: r0 = of()
    //     0x93f1f8: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93f1fc: LoadField: r1 = r0->field_47
    //     0x93f1fc: ldur            w1, [x0, #0x47]
    // 0x93f200: DecompressPointer r1
    //     0x93f200: add             x1, x1, HEAP, lsl #32
    // 0x93f204: mov             x0, x1
    // 0x93f208: LeaveFrame
    //     0x93f208: mov             SP, fp
    //     0x93f20c: ldp             fp, lr, [SP], #0x10
    // 0x93f210: ret
    //     0x93f210: ret             
    // 0x93f214: ldur            x1, [fp, #-8]
    // 0x93f218: b               #0x93f220
    // 0x93f21c: ldur            x1, [fp, #-8]
    // 0x93f220: ldr             x0, [fp, #0x10]
    // 0x93f224: r2 = LoadClassIdInstr(r0)
    //     0x93f224: ldur            x2, [x0, #-1]
    //     0x93f228: ubfx            x2, x2, #0xc, #0x14
    // 0x93f22c: r16 = Instance_MaterialState
    //     0x93f22c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x93f230: ldr             x16, [x16, #0x398]
    // 0x93f234: stp             x16, x0, [SP]
    // 0x93f238: mov             x0, x2
    // 0x93f23c: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f23c: movz            x17, #0x1871
    //     0x93f240: movk            x17, #0x1, lsl #16
    //     0x93f244: add             lr, x0, x17
    //     0x93f248: ldr             lr, [x21, lr, lsl #3]
    //     0x93f24c: blr             lr
    // 0x93f250: tbnz            w0, #4, #0x93f28c
    // 0x93f254: ldur            x0, [fp, #-8]
    // 0x93f258: LoadField: r1 = r0->field_f
    //     0x93f258: ldur            w1, [x0, #0xf]
    // 0x93f25c: DecompressPointer r1
    //     0x93f25c: add             x1, x1, HEAP, lsl #32
    // 0x93f260: LoadField: r0 = r1->field_87
    //     0x93f260: ldur            w0, [x1, #0x87]
    // 0x93f264: DecompressPointer r0
    //     0x93f264: add             x0, x0, HEAP, lsl #32
    // 0x93f268: str             x0, [SP]
    // 0x93f26c: r0 = of()
    //     0x93f26c: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93f270: LoadField: r1 = r0->field_3f
    //     0x93f270: ldur            w1, [x0, #0x3f]
    // 0x93f274: DecompressPointer r1
    //     0x93f274: add             x1, x1, HEAP, lsl #32
    // 0x93f278: LoadField: r0 = r1->field_b
    //     0x93f278: ldur            w0, [x1, #0xb]
    // 0x93f27c: DecompressPointer r0
    //     0x93f27c: add             x0, x0, HEAP, lsl #32
    // 0x93f280: LeaveFrame
    //     0x93f280: mov             SP, fp
    //     0x93f284: ldp             fp, lr, [SP], #0x10
    // 0x93f288: ret
    //     0x93f288: ret             
    // 0x93f28c: ldur            x0, [fp, #-8]
    // 0x93f290: LoadField: r1 = r0->field_f
    //     0x93f290: ldur            w1, [x0, #0xf]
    // 0x93f294: DecompressPointer r1
    //     0x93f294: add             x1, x1, HEAP, lsl #32
    // 0x93f298: LoadField: r0 = r1->field_87
    //     0x93f298: ldur            w0, [x1, #0x87]
    // 0x93f29c: DecompressPointer r0
    //     0x93f29c: add             x0, x0, HEAP, lsl #32
    // 0x93f2a0: str             x0, [SP]
    // 0x93f2a4: r0 = of()
    //     0x93f2a4: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93f2a8: LoadField: r1 = r0->field_3f
    //     0x93f2a8: ldur            w1, [x0, #0x3f]
    // 0x93f2ac: DecompressPointer r1
    //     0x93f2ac: add             x1, x1, HEAP, lsl #32
    // 0x93f2b0: LoadField: r2 = r1->field_7
    //     0x93f2b0: ldur            w2, [x1, #7]
    // 0x93f2b4: DecompressPointer r2
    //     0x93f2b4: add             x2, x2, HEAP, lsl #32
    // 0x93f2b8: LoadField: r1 = r2->field_7
    //     0x93f2b8: ldur            x1, [x2, #7]
    // 0x93f2bc: cmp             x1, #0
    // 0x93f2c0: b.gt            #0x93f2d8
    // 0x93f2c4: r0 = Instance_Color
    //     0x93f2c4: add             x0, PP, #0xb, lsl #12  ; [pp+0xbb90] Obj!Color@c3a9a1
    //     0x93f2c8: ldr             x0, [x0, #0xb90]
    // 0x93f2cc: LeaveFrame
    //     0x93f2cc: mov             SP, fp
    //     0x93f2d0: ldp             fp, lr, [SP], #0x10
    // 0x93f2d4: ret
    //     0x93f2d4: ret             
    // 0x93f2d8: r0 = Instance_Color
    //     0x93f2d8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf590] Obj!Color@c3b9d1
    //     0x93f2dc: ldr             x0, [x0, #0x590]
    // 0x93f2e0: LeaveFrame
    //     0x93f2e0: mov             SP, fp
    //     0x93f2e4: ldp             fp, lr, [SP], #0x10
    // 0x93f2e8: ret
    //     0x93f2e8: ret             
    // 0x93f2ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f2ec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f2f0: b               #0x93f180
  }
  [closure] Color <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x93f928, size: 0x124
    // 0x93f928: EnterFrame
    //     0x93f928: stp             fp, lr, [SP, #-0x10]!
    //     0x93f92c: mov             fp, SP
    // 0x93f930: AllocStack(0x18)
    //     0x93f930: sub             SP, SP, #0x18
    // 0x93f934: SetupParameters()
    //     0x93f934: ldr             x0, [fp, #0x18]
    //     0x93f938: ldur            w1, [x0, #0x17]
    //     0x93f93c: add             x1, x1, HEAP, lsl #32
    //     0x93f940: stur            x1, [fp, #-8]
    // 0x93f944: CheckStackOverflow
    //     0x93f944: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f948: cmp             SP, x16
    //     0x93f94c: b.ls            #0x93fa44
    // 0x93f950: ldr             x0, [fp, #0x10]
    // 0x93f954: r2 = LoadClassIdInstr(r0)
    //     0x93f954: ldur            x2, [x0, #-1]
    //     0x93f958: ubfx            x2, x2, #0xc, #0x14
    // 0x93f95c: r16 = Instance_MaterialState
    //     0x93f95c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93f960: ldr             x16, [x16, #0x518]
    // 0x93f964: stp             x16, x0, [SP]
    // 0x93f968: mov             x0, x2
    // 0x93f96c: r0 = GDT[cid_x0 + 0x11871]()
    //     0x93f96c: movz            x17, #0x1871
    //     0x93f970: movk            x17, #0x1, lsl #16
    //     0x93f974: add             lr, x0, x17
    //     0x93f978: ldr             lr, [x21, lr, lsl #3]
    //     0x93f97c: blr             lr
    // 0x93f980: tbnz            w0, #4, #0x93f9e4
    // 0x93f984: ldur            x0, [fp, #-8]
    // 0x93f988: LoadField: r1 = r0->field_f
    //     0x93f988: ldur            w1, [x0, #0xf]
    // 0x93f98c: DecompressPointer r1
    //     0x93f98c: add             x1, x1, HEAP, lsl #32
    // 0x93f990: LoadField: r0 = r1->field_87
    //     0x93f990: ldur            w0, [x1, #0x87]
    // 0x93f994: DecompressPointer r0
    //     0x93f994: add             x0, x0, HEAP, lsl #32
    // 0x93f998: str             x0, [SP]
    // 0x93f99c: r0 = of()
    //     0x93f99c: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93f9a0: LoadField: r1 = r0->field_3f
    //     0x93f9a0: ldur            w1, [x0, #0x3f]
    // 0x93f9a4: DecompressPointer r1
    //     0x93f9a4: add             x1, x1, HEAP, lsl #32
    // 0x93f9a8: LoadField: r0 = r1->field_7
    //     0x93f9a8: ldur            w0, [x1, #7]
    // 0x93f9ac: DecompressPointer r0
    //     0x93f9ac: add             x0, x0, HEAP, lsl #32
    // 0x93f9b0: LoadField: r1 = r0->field_7
    //     0x93f9b0: ldur            x1, [x0, #7]
    // 0x93f9b4: cmp             x1, #0
    // 0x93f9b8: b.gt            #0x93f9d0
    // 0x93f9bc: r0 = Instance_Color
    //     0x93f9bc: add             x0, PP, #0xf, lsl #12  ; [pp+0xf668] Obj!Color@c3ba11
    //     0x93f9c0: ldr             x0, [x0, #0x668]
    // 0x93f9c4: LeaveFrame
    //     0x93f9c4: mov             SP, fp
    //     0x93f9c8: ldp             fp, lr, [SP], #0x10
    // 0x93f9cc: ret
    //     0x93f9cc: ret             
    // 0x93f9d0: r0 = Instance_Color
    //     0x93f9d0: add             x0, PP, #0xf, lsl #12  ; [pp+0xf670] Obj!Color@c3ba01
    //     0x93f9d4: ldr             x0, [x0, #0x670]
    // 0x93f9d8: LeaveFrame
    //     0x93f9d8: mov             SP, fp
    //     0x93f9dc: ldp             fp, lr, [SP], #0x10
    // 0x93f9e0: ret
    //     0x93f9e0: ret             
    // 0x93f9e4: ldur            x0, [fp, #-8]
    // 0x93f9e8: LoadField: r1 = r0->field_f
    //     0x93f9e8: ldur            w1, [x0, #0xf]
    // 0x93f9ec: DecompressPointer r1
    //     0x93f9ec: add             x1, x1, HEAP, lsl #32
    // 0x93f9f0: LoadField: r0 = r1->field_87
    //     0x93f9f0: ldur            w0, [x1, #0x87]
    // 0x93f9f4: DecompressPointer r0
    //     0x93f9f4: add             x0, x0, HEAP, lsl #32
    // 0x93f9f8: str             x0, [SP]
    // 0x93f9fc: r0 = of()
    //     0x93f9fc: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93fa00: LoadField: r1 = r0->field_3f
    //     0x93fa00: ldur            w1, [x0, #0x3f]
    // 0x93fa04: DecompressPointer r1
    //     0x93fa04: add             x1, x1, HEAP, lsl #32
    // 0x93fa08: LoadField: r2 = r1->field_7
    //     0x93fa08: ldur            w2, [x1, #7]
    // 0x93fa0c: DecompressPointer r2
    //     0x93fa0c: add             x2, x2, HEAP, lsl #32
    // 0x93fa10: LoadField: r1 = r2->field_7
    //     0x93fa10: ldur            x1, [x2, #7]
    // 0x93fa14: cmp             x1, #0
    // 0x93fa18: b.gt            #0x93fa30
    // 0x93fa1c: r0 = Instance_Color
    //     0x93fa1c: add             x0, PP, #0xf, lsl #12  ; [pp+0xf678] Obj!Color@c3b9f1
    //     0x93fa20: ldr             x0, [x0, #0x678]
    // 0x93fa24: LeaveFrame
    //     0x93fa24: mov             SP, fp
    //     0x93fa28: ldp             fp, lr, [SP], #0x10
    // 0x93fa2c: ret
    //     0x93fa2c: ret             
    // 0x93fa30: r0 = Instance_Color
    //     0x93fa30: add             x0, PP, #0xf, lsl #12  ; [pp+0xf680] Obj!Color@c3b9e1
    //     0x93fa34: ldr             x0, [x0, #0x680]
    // 0x93fa38: LeaveFrame
    //     0x93fa38: mov             SP, fp
    //     0x93fa3c: ldp             fp, lr, [SP], #0x10
    // 0x93fa40: ret
    //     0x93fa40: ret             
    // 0x93fa44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93fa44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93fa48: b               #0x93f950
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0x941370, size: 0xf8
    // 0x941370: EnterFrame
    //     0x941370: stp             fp, lr, [SP, #-0x10]!
    //     0x941374: mov             fp, SP
    // 0x941378: AllocStack(0x20)
    //     0x941378: sub             SP, SP, #0x20
    // 0x94137c: SetupParameters()
    //     0x94137c: ldr             x0, [fp, #0x18]
    //     0x941380: ldur            w1, [x0, #0x17]
    //     0x941384: add             x1, x1, HEAP, lsl #32
    //     0x941388: stur            x1, [fp, #-8]
    // 0x94138c: CheckStackOverflow
    //     0x94138c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x941390: cmp             SP, x16
    //     0x941394: b.ls            #0x941460
    // 0x941398: ldr             x0, [fp, #0x10]
    // 0x94139c: r2 = LoadClassIdInstr(r0)
    //     0x94139c: ldur            x2, [x0, #-1]
    //     0x9413a0: ubfx            x2, x2, #0xc, #0x14
    // 0x9413a4: r16 = Instance_MaterialState
    //     0x9413a4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x9413a8: ldr             x16, [x16, #0x518]
    // 0x9413ac: stp             x16, x0, [SP]
    // 0x9413b0: mov             x0, x2
    // 0x9413b4: r0 = GDT[cid_x0 + 0x11871]()
    //     0x9413b4: movz            x17, #0x1871
    //     0x9413b8: movk            x17, #0x1, lsl #16
    //     0x9413bc: add             lr, x0, x17
    //     0x9413c0: ldr             lr, [x21, lr, lsl #3]
    //     0x9413c4: blr             lr
    // 0x9413c8: tbnz            w0, #4, #0x941414
    // 0x9413cc: ldur            x0, [fp, #-8]
    // 0x9413d0: LoadField: r1 = r0->field_f
    //     0x9413d0: ldur            w1, [x0, #0xf]
    // 0x9413d4: DecompressPointer r1
    //     0x9413d4: add             x1, x1, HEAP, lsl #32
    // 0x9413d8: LoadField: r0 = r1->field_87
    //     0x9413d8: ldur            w0, [x1, #0x87]
    // 0x9413dc: DecompressPointer r0
    //     0x9413dc: add             x0, x0, HEAP, lsl #32
    // 0x9413e0: str             x0, [SP]
    // 0x9413e4: r0 = of()
    //     0x9413e4: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x9413e8: LoadField: r1 = r0->field_47
    //     0x9413e8: ldur            w1, [x0, #0x47]
    // 0x9413ec: DecompressPointer r1
    //     0x9413ec: add             x1, x1, HEAP, lsl #32
    // 0x9413f0: stur            x1, [fp, #-0x10]
    // 0x9413f4: r0 = TextStyle()
    //     0x9413f4: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x9413f8: r1 = true
    //     0x9413f8: add             x1, NULL, #0x20  ; true
    // 0x9413fc: StoreField: r0->field_7 = r1
    //     0x9413fc: stur            w1, [x0, #7]
    // 0x941400: ldur            x1, [fp, #-0x10]
    // 0x941404: StoreField: r0->field_b = r1
    //     0x941404: stur            w1, [x0, #0xb]
    // 0x941408: LeaveFrame
    //     0x941408: mov             SP, fp
    //     0x94140c: ldp             fp, lr, [SP], #0x10
    // 0x941410: ret
    //     0x941410: ret             
    // 0x941414: ldur            x0, [fp, #-8]
    // 0x941418: r1 = true
    //     0x941418: add             x1, NULL, #0x20  ; true
    // 0x94141c: LoadField: r2 = r0->field_f
    //     0x94141c: ldur            w2, [x0, #0xf]
    // 0x941420: DecompressPointer r2
    //     0x941420: add             x2, x2, HEAP, lsl #32
    // 0x941424: LoadField: r0 = r2->field_87
    //     0x941424: ldur            w0, [x2, #0x87]
    // 0x941428: DecompressPointer r0
    //     0x941428: add             x0, x0, HEAP, lsl #32
    // 0x94142c: str             x0, [SP]
    // 0x941430: r0 = of()
    //     0x941430: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x941434: LoadField: r1 = r0->field_57
    //     0x941434: ldur            w1, [x0, #0x57]
    // 0x941438: DecompressPointer r1
    //     0x941438: add             x1, x1, HEAP, lsl #32
    // 0x94143c: stur            x1, [fp, #-8]
    // 0x941440: r0 = TextStyle()
    //     0x941440: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0x941444: r1 = true
    //     0x941444: add             x1, NULL, #0x20  ; true
    // 0x941448: StoreField: r0->field_7 = r1
    //     0x941448: stur            w1, [x0, #7]
    // 0x94144c: ldur            x1, [fp, #-8]
    // 0x941450: StoreField: r0->field_b = r1
    //     0x941450: stur            w1, [x0, #0xb]
    // 0x941454: LeaveFrame
    //     0x941454: mov             SP, fp
    //     0x941458: ldp             fp, lr, [SP], #0x10
    // 0x94145c: ret
    //     0x94145c: ret             
    // 0x941460: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x941460: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x941464: b               #0x941398
  }
  [closure] TextStyle <anonymous closure>(dynamic, Set<MaterialState>) {
    // ** addr: 0xad6394, size: 0x208
    // 0xad6394: EnterFrame
    //     0xad6394: stp             fp, lr, [SP, #-0x10]!
    //     0xad6398: mov             fp, SP
    // 0xad639c: AllocStack(0x20)
    //     0xad639c: sub             SP, SP, #0x20
    // 0xad63a0: SetupParameters()
    //     0xad63a0: ldr             x0, [fp, #0x18]
    //     0xad63a4: ldur            w1, [x0, #0x17]
    //     0xad63a8: add             x1, x1, HEAP, lsl #32
    //     0xad63ac: stur            x1, [fp, #-8]
    // 0xad63b0: CheckStackOverflow
    //     0xad63b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xad63b4: cmp             SP, x16
    //     0xad63b8: b.ls            #0xad6594
    // 0xad63bc: ldr             x2, [fp, #0x10]
    // 0xad63c0: r0 = LoadClassIdInstr(r2)
    //     0xad63c0: ldur            x0, [x2, #-1]
    //     0xad63c4: ubfx            x0, x0, #0xc, #0x14
    // 0xad63c8: r16 = Instance_MaterialState
    //     0xad63c8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0xad63cc: ldr             x16, [x16, #0x518]
    // 0xad63d0: stp             x16, x2, [SP]
    // 0xad63d4: r0 = GDT[cid_x0 + 0x11871]()
    //     0xad63d4: movz            x17, #0x1871
    //     0xad63d8: movk            x17, #0x1, lsl #16
    //     0xad63dc: add             lr, x0, x17
    //     0xad63e0: ldr             lr, [x21, lr, lsl #3]
    //     0xad63e4: blr             lr
    // 0xad63e8: tbnz            w0, #4, #0xad6434
    // 0xad63ec: ldur            x1, [fp, #-8]
    // 0xad63f0: LoadField: r0 = r1->field_f
    //     0xad63f0: ldur            w0, [x1, #0xf]
    // 0xad63f4: DecompressPointer r0
    //     0xad63f4: add             x0, x0, HEAP, lsl #32
    // 0xad63f8: LoadField: r1 = r0->field_87
    //     0xad63f8: ldur            w1, [x0, #0x87]
    // 0xad63fc: DecompressPointer r1
    //     0xad63fc: add             x1, x1, HEAP, lsl #32
    // 0xad6400: str             x1, [SP]
    // 0xad6404: r0 = of()
    //     0xad6404: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0xad6408: LoadField: r1 = r0->field_47
    //     0xad6408: ldur            w1, [x0, #0x47]
    // 0xad640c: DecompressPointer r1
    //     0xad640c: add             x1, x1, HEAP, lsl #32
    // 0xad6410: stur            x1, [fp, #-0x10]
    // 0xad6414: r0 = TextStyle()
    //     0xad6414: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0xad6418: r2 = true
    //     0xad6418: add             x2, NULL, #0x20  ; true
    // 0xad641c: StoreField: r0->field_7 = r2
    //     0xad641c: stur            w2, [x0, #7]
    // 0xad6420: ldur            x1, [fp, #-0x10]
    // 0xad6424: StoreField: r0->field_b = r1
    //     0xad6424: stur            w1, [x0, #0xb]
    // 0xad6428: LeaveFrame
    //     0xad6428: mov             SP, fp
    //     0xad642c: ldp             fp, lr, [SP], #0x10
    // 0xad6430: ret
    //     0xad6430: ret             
    // 0xad6434: ldr             x3, [fp, #0x10]
    // 0xad6438: ldur            x1, [fp, #-8]
    // 0xad643c: r2 = true
    //     0xad643c: add             x2, NULL, #0x20  ; true
    // 0xad6440: r0 = LoadClassIdInstr(r3)
    //     0xad6440: ldur            x0, [x3, #-1]
    //     0xad6444: ubfx            x0, x0, #0xc, #0x14
    // 0xad6448: r16 = Instance_MaterialState
    //     0xad6448: add             x16, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0xad644c: ldr             x16, [x16, #0x660]
    // 0xad6450: stp             x16, x3, [SP]
    // 0xad6454: r0 = GDT[cid_x0 + 0x11871]()
    //     0xad6454: movz            x17, #0x1871
    //     0xad6458: movk            x17, #0x1, lsl #16
    //     0xad645c: add             lr, x0, x17
    //     0xad6460: ldr             lr, [x21, lr, lsl #3]
    //     0xad6464: blr             lr
    // 0xad6468: tbnz            w0, #4, #0xad64bc
    // 0xad646c: ldur            x1, [fp, #-8]
    // 0xad6470: LoadField: r0 = r1->field_f
    //     0xad6470: ldur            w0, [x1, #0xf]
    // 0xad6474: DecompressPointer r0
    //     0xad6474: add             x0, x0, HEAP, lsl #32
    // 0xad6478: LoadField: r1 = r0->field_87
    //     0xad6478: ldur            w1, [x0, #0x87]
    // 0xad647c: DecompressPointer r1
    //     0xad647c: add             x1, x1, HEAP, lsl #32
    // 0xad6480: str             x1, [SP]
    // 0xad6484: r0 = of()
    //     0xad6484: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0xad6488: LoadField: r1 = r0->field_3f
    //     0xad6488: ldur            w1, [x0, #0x3f]
    // 0xad648c: DecompressPointer r1
    //     0xad648c: add             x1, x1, HEAP, lsl #32
    // 0xad6490: LoadField: r0 = r1->field_3b
    //     0xad6490: ldur            w0, [x1, #0x3b]
    // 0xad6494: DecompressPointer r0
    //     0xad6494: add             x0, x0, HEAP, lsl #32
    // 0xad6498: stur            x0, [fp, #-0x10]
    // 0xad649c: r0 = TextStyle()
    //     0xad649c: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0xad64a0: r2 = true
    //     0xad64a0: add             x2, NULL, #0x20  ; true
    // 0xad64a4: StoreField: r0->field_7 = r2
    //     0xad64a4: stur            w2, [x0, #7]
    // 0xad64a8: ldur            x1, [fp, #-0x10]
    // 0xad64ac: StoreField: r0->field_b = r1
    //     0xad64ac: stur            w1, [x0, #0xb]
    // 0xad64b0: LeaveFrame
    //     0xad64b0: mov             SP, fp
    //     0xad64b4: ldp             fp, lr, [SP], #0x10
    // 0xad64b8: ret
    //     0xad64b8: ret             
    // 0xad64bc: ldr             x0, [fp, #0x10]
    // 0xad64c0: ldur            x1, [fp, #-8]
    // 0xad64c4: r2 = true
    //     0xad64c4: add             x2, NULL, #0x20  ; true
    // 0xad64c8: r3 = LoadClassIdInstr(r0)
    //     0xad64c8: ldur            x3, [x0, #-1]
    //     0xad64cc: ubfx            x3, x3, #0xc, #0x14
    // 0xad64d0: r16 = Instance_MaterialState
    //     0xad64d0: add             x16, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0xad64d4: ldr             x16, [x16, #0x398]
    // 0xad64d8: stp             x16, x0, [SP]
    // 0xad64dc: mov             x0, x3
    // 0xad64e0: r0 = GDT[cid_x0 + 0x11871]()
    //     0xad64e0: movz            x17, #0x1871
    //     0xad64e4: movk            x17, #0x1, lsl #16
    //     0xad64e8: add             lr, x0, x17
    //     0xad64ec: ldr             lr, [x21, lr, lsl #3]
    //     0xad64f0: blr             lr
    // 0xad64f4: tbnz            w0, #4, #0xad6548
    // 0xad64f8: ldur            x0, [fp, #-8]
    // 0xad64fc: LoadField: r1 = r0->field_f
    //     0xad64fc: ldur            w1, [x0, #0xf]
    // 0xad6500: DecompressPointer r1
    //     0xad6500: add             x1, x1, HEAP, lsl #32
    // 0xad6504: LoadField: r0 = r1->field_87
    //     0xad6504: ldur            w0, [x1, #0x87]
    // 0xad6508: DecompressPointer r0
    //     0xad6508: add             x0, x0, HEAP, lsl #32
    // 0xad650c: str             x0, [SP]
    // 0xad6510: r0 = of()
    //     0xad6510: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0xad6514: LoadField: r1 = r0->field_3f
    //     0xad6514: ldur            w1, [x0, #0x3f]
    // 0xad6518: DecompressPointer r1
    //     0xad6518: add             x1, x1, HEAP, lsl #32
    // 0xad651c: LoadField: r0 = r1->field_b
    //     0xad651c: ldur            w0, [x1, #0xb]
    // 0xad6520: DecompressPointer r0
    //     0xad6520: add             x0, x0, HEAP, lsl #32
    // 0xad6524: stur            x0, [fp, #-0x10]
    // 0xad6528: r0 = TextStyle()
    //     0xad6528: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0xad652c: r1 = true
    //     0xad652c: add             x1, NULL, #0x20  ; true
    // 0xad6530: StoreField: r0->field_7 = r1
    //     0xad6530: stur            w1, [x0, #7]
    // 0xad6534: ldur            x1, [fp, #-0x10]
    // 0xad6538: StoreField: r0->field_b = r1
    //     0xad6538: stur            w1, [x0, #0xb]
    // 0xad653c: LeaveFrame
    //     0xad653c: mov             SP, fp
    //     0xad6540: ldp             fp, lr, [SP], #0x10
    // 0xad6544: ret
    //     0xad6544: ret             
    // 0xad6548: ldur            x0, [fp, #-8]
    // 0xad654c: r1 = true
    //     0xad654c: add             x1, NULL, #0x20  ; true
    // 0xad6550: LoadField: r2 = r0->field_f
    //     0xad6550: ldur            w2, [x0, #0xf]
    // 0xad6554: DecompressPointer r2
    //     0xad6554: add             x2, x2, HEAP, lsl #32
    // 0xad6558: LoadField: r0 = r2->field_87
    //     0xad6558: ldur            w0, [x2, #0x87]
    // 0xad655c: DecompressPointer r0
    //     0xad655c: add             x0, x0, HEAP, lsl #32
    // 0xad6560: str             x0, [SP]
    // 0xad6564: r0 = of()
    //     0xad6564: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0xad6568: LoadField: r1 = r0->field_57
    //     0xad6568: ldur            w1, [x0, #0x57]
    // 0xad656c: DecompressPointer r1
    //     0xad656c: add             x1, x1, HEAP, lsl #32
    // 0xad6570: stur            x1, [fp, #-8]
    // 0xad6574: r0 = TextStyle()
    //     0xad6574: bl              #0x60d4dc  ; AllocateTextStyleStub -> TextStyle (size=0x70)
    // 0xad6578: r1 = true
    //     0xad6578: add             x1, NULL, #0x20  ; true
    // 0xad657c: StoreField: r0->field_7 = r1
    //     0xad657c: stur            w1, [x0, #7]
    // 0xad6580: ldur            x1, [fp, #-8]
    // 0xad6584: StoreField: r0->field_b = r1
    //     0xad6584: stur            w1, [x0, #0xb]
    // 0xad6588: LeaveFrame
    //     0xad6588: mov             SP, fp
    //     0xad658c: ldp             fp, lr, [SP], #0x10
    // 0xad6590: ret
    //     0xad6590: ret             
    // 0xad6594: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xad6594: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xad6598: b               #0xad63bc
  }
}

// class id: 3210, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __InputDecoratorState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x5565ac, size: 0x184
    // 0x5565ac: EnterFrame
    //     0x5565ac: stp             fp, lr, [SP, #-0x10]!
    //     0x5565b0: mov             fp, SP
    // 0x5565b4: AllocStack(0x20)
    //     0x5565b4: sub             SP, SP, #0x20
    // 0x5565b8: CheckStackOverflow
    //     0x5565b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5565bc: cmp             SP, x16
    //     0x5565c0: b.ls            #0x556720
    // 0x5565c4: ldr             x0, [fp, #0x18]
    // 0x5565c8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x5565c8: ldur            w1, [x0, #0x17]
    // 0x5565cc: DecompressPointer r1
    //     0x5565cc: add             x1, x1, HEAP, lsl #32
    // 0x5565d0: cmp             w1, NULL
    // 0x5565d4: b.ne            #0x5565e0
    // 0x5565d8: str             x0, [SP]
    // 0x5565dc: r0 = _updateTickerModeNotifier()
    //     0x5565dc: bl              #0x556754  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x5565e0: ldr             x0, [fp, #0x18]
    // 0x5565e4: LoadField: r1 = r0->field_13
    //     0x5565e4: ldur            w1, [x0, #0x13]
    // 0x5565e8: DecompressPointer r1
    //     0x5565e8: add             x1, x1, HEAP, lsl #32
    // 0x5565ec: cmp             w1, NULL
    // 0x5565f0: b.ne            #0x556688
    // 0x5565f4: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0x5565f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5565f8: ldr             x0, [x0, #0x528]
    //     0x5565fc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x556600: cmp             w0, w16
    //     0x556604: b.ne            #0x556610
    //     0x556608: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0x55660c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x556610: r1 = <_WidgetTicker>
    //     0x556610: add             x1, PP, #0x22, lsl #12  ; [pp+0x222e8] TypeArguments: <_WidgetTicker>
    //     0x556614: ldr             x1, [x1, #0x2e8]
    // 0x556618: stur            x0, [fp, #-8]
    // 0x55661c: r0 = _Set()
    //     0x55661c: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x556620: mov             x1, x0
    // 0x556624: ldur            x0, [fp, #-8]
    // 0x556628: stur            x1, [fp, #-0x10]
    // 0x55662c: StoreField: r1->field_1b = r0
    //     0x55662c: stur            w0, [x1, #0x1b]
    // 0x556630: StoreField: r1->field_b = rZR
    //     0x556630: stur            wzr, [x1, #0xb]
    // 0x556634: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0x556634: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x556638: ldr             x0, [x0, #0x530]
    //     0x55663c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x556640: cmp             w0, w16
    //     0x556644: b.ne            #0x556650
    //     0x556648: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0x55664c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x556650: mov             x1, x0
    // 0x556654: ldur            x0, [fp, #-0x10]
    // 0x556658: StoreField: r0->field_f = r1
    //     0x556658: stur            w1, [x0, #0xf]
    // 0x55665c: StoreField: r0->field_13 = rZR
    //     0x55665c: stur            wzr, [x0, #0x13]
    // 0x556660: ArrayStore: r0[0] = rZR  ; List_4
    //     0x556660: stur            wzr, [x0, #0x17]
    // 0x556664: ldr             x1, [fp, #0x18]
    // 0x556668: StoreField: r1->field_13 = r0
    //     0x556668: stur            w0, [x1, #0x13]
    //     0x55666c: ldurb           w16, [x1, #-1]
    //     0x556670: ldurb           w17, [x0, #-1]
    //     0x556674: and             x16, x17, x16, lsr #2
    //     0x556678: tst             x16, HEAP, lsr #32
    //     0x55667c: b.eq            #0x556684
    //     0x556680: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556684: b               #0x55668c
    // 0x556688: mov             x1, x0
    // 0x55668c: ldr             x0, [fp, #0x10]
    // 0x556690: r0 = _WidgetTicker()
    //     0x556690: bl              #0x54b590  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x556694: mov             x2, x0
    // 0x556698: ldr             x1, [fp, #0x18]
    // 0x55669c: stur            x2, [fp, #-8]
    // 0x5566a0: StoreField: r2->field_1b = r1
    //     0x5566a0: stur            w1, [x2, #0x1b]
    // 0x5566a4: r0 = false
    //     0x5566a4: add             x0, NULL, #0x30  ; false
    // 0x5566a8: StoreField: r2->field_b = r0
    //     0x5566a8: stur            w0, [x2, #0xb]
    // 0x5566ac: ldr             x0, [fp, #0x10]
    // 0x5566b0: StoreField: r2->field_13 = r0
    //     0x5566b0: stur            w0, [x2, #0x13]
    // 0x5566b4: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x5566b4: ldur            w0, [x1, #0x17]
    // 0x5566b8: DecompressPointer r0
    //     0x5566b8: add             x0, x0, HEAP, lsl #32
    // 0x5566bc: cmp             w0, NULL
    // 0x5566c0: b.eq            #0x556728
    // 0x5566c4: r3 = LoadClassIdInstr(r0)
    //     0x5566c4: ldur            x3, [x0, #-1]
    //     0x5566c8: ubfx            x3, x3, #0xc, #0x14
    // 0x5566cc: str             x0, [SP]
    // 0x5566d0: mov             x0, x3
    // 0x5566d4: r0 = GDT[cid_x0 + 0x801]()
    //     0x5566d4: add             lr, x0, #0x801
    //     0x5566d8: ldr             lr, [x21, lr, lsl #3]
    //     0x5566dc: blr             lr
    // 0x5566e0: eor             x1, x0, #0x10
    // 0x5566e4: ldur            x16, [fp, #-8]
    // 0x5566e8: stp             x1, x16, [SP]
    // 0x5566ec: r0 = muted=()
    //     0x5566ec: bl              #0x54a1d8  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x5566f0: ldr             x0, [fp, #0x18]
    // 0x5566f4: LoadField: r1 = r0->field_13
    //     0x5566f4: ldur            w1, [x0, #0x13]
    // 0x5566f8: DecompressPointer r1
    //     0x5566f8: add             x1, x1, HEAP, lsl #32
    // 0x5566fc: cmp             w1, NULL
    // 0x556700: b.eq            #0x55672c
    // 0x556704: ldur            x16, [fp, #-8]
    // 0x556708: stp             x16, x1, [SP]
    // 0x55670c: r0 = add()
    //     0x55670c: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x556710: ldur            x0, [fp, #-8]
    // 0x556714: LeaveFrame
    //     0x556714: mov             SP, fp
    //     0x556718: ldp             fp, lr, [SP], #0x10
    // 0x55671c: ret
    //     0x55671c: ret             
    // 0x556720: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556720: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556724: b               #0x5565c4
    // 0x556728: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x556728: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x55672c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55672c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x556754, size: 0x148
    // 0x556754: EnterFrame
    //     0x556754: stp             fp, lr, [SP, #-0x10]!
    //     0x556758: mov             fp, SP
    // 0x55675c: AllocStack(0x20)
    //     0x55675c: sub             SP, SP, #0x20
    // 0x556760: CheckStackOverflow
    //     0x556760: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x556764: cmp             SP, x16
    //     0x556768: b.ls            #0x556890
    // 0x55676c: ldr             x0, [fp, #0x10]
    // 0x556770: LoadField: r1 = r0->field_f
    //     0x556770: ldur            w1, [x0, #0xf]
    // 0x556774: DecompressPointer r1
    //     0x556774: add             x1, x1, HEAP, lsl #32
    // 0x556778: cmp             w1, NULL
    // 0x55677c: b.eq            #0x556898
    // 0x556780: str             x1, [SP]
    // 0x556784: r0 = getNotifier()
    //     0x556784: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x556788: mov             x1, x0
    // 0x55678c: ldr             x0, [fp, #0x10]
    // 0x556790: stur            x1, [fp, #-0x10]
    // 0x556794: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x556794: ldur            w2, [x0, #0x17]
    // 0x556798: DecompressPointer r2
    //     0x556798: add             x2, x2, HEAP, lsl #32
    // 0x55679c: stur            x2, [fp, #-8]
    // 0x5567a0: cmp             w1, w2
    // 0x5567a4: b.ne            #0x5567b8
    // 0x5567a8: r0 = Null
    //     0x5567a8: mov             x0, NULL
    // 0x5567ac: LeaveFrame
    //     0x5567ac: mov             SP, fp
    //     0x5567b0: ldp             fp, lr, [SP], #0x10
    // 0x5567b4: ret
    //     0x5567b4: ret             
    // 0x5567b8: cmp             w2, NULL
    // 0x5567bc: b.eq            #0x556814
    // 0x5567c0: r1 = 1
    //     0x5567c0: movz            x1, #0x1
    // 0x5567c4: r0 = AllocateContext()
    //     0x5567c4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5567c8: mov             x1, x0
    // 0x5567cc: ldr             x0, [fp, #0x10]
    // 0x5567d0: StoreField: r1->field_f = r0
    //     0x5567d0: stur            w0, [x1, #0xf]
    // 0x5567d4: mov             x2, x1
    // 0x5567d8: r1 = Function '_updateTickers@328311458':.
    //     0x5567d8: add             x1, PP, #0x41, lsl #12  ; [pp+0x41a48] AnonymousClosure: (0x55689c), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x5568e4)
    //     0x5567dc: ldr             x1, [x1, #0xa48]
    // 0x5567e0: r0 = AllocateClosure()
    //     0x5567e0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5567e4: mov             x1, x0
    // 0x5567e8: ldur            x0, [fp, #-8]
    // 0x5567ec: r2 = LoadClassIdInstr(r0)
    //     0x5567ec: ldur            x2, [x0, #-1]
    //     0x5567f0: ubfx            x2, x2, #0xc, #0x14
    // 0x5567f4: stp             x1, x0, [SP]
    // 0x5567f8: mov             x0, x2
    // 0x5567fc: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x5567fc: movz            x17, #0xc9d0
    //     0x556800: add             lr, x0, x17
    //     0x556804: ldr             lr, [x21, lr, lsl #3]
    //     0x556808: blr             lr
    // 0x55680c: ldr             x0, [fp, #0x10]
    // 0x556810: ldur            x1, [fp, #-0x10]
    // 0x556814: r1 = 1
    //     0x556814: movz            x1, #0x1
    // 0x556818: r0 = AllocateContext()
    //     0x556818: bl              #0xc5def4  ; AllocateContextStub
    // 0x55681c: mov             x1, x0
    // 0x556820: ldr             x0, [fp, #0x10]
    // 0x556824: StoreField: r1->field_f = r0
    //     0x556824: stur            w0, [x1, #0xf]
    // 0x556828: mov             x2, x1
    // 0x55682c: r1 = Function '_updateTickers@328311458':.
    //     0x55682c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41a48] AnonymousClosure: (0x55689c), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x5568e4)
    //     0x556830: ldr             x1, [x1, #0xa48]
    // 0x556834: r0 = AllocateClosure()
    //     0x556834: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x556838: ldur            x1, [fp, #-0x10]
    // 0x55683c: r2 = LoadClassIdInstr(r1)
    //     0x55683c: ldur            x2, [x1, #-1]
    //     0x556840: ubfx            x2, x2, #0xc, #0x14
    // 0x556844: stp             x0, x1, [SP]
    // 0x556848: mov             x0, x2
    // 0x55684c: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x55684c: movz            x17, #0xcefc
    //     0x556850: add             lr, x0, x17
    //     0x556854: ldr             lr, [x21, lr, lsl #3]
    //     0x556858: blr             lr
    // 0x55685c: ldur            x0, [fp, #-0x10]
    // 0x556860: ldr             x1, [fp, #0x10]
    // 0x556864: ArrayStore: r1[0] = r0  ; List_4
    //     0x556864: stur            w0, [x1, #0x17]
    //     0x556868: ldurb           w16, [x1, #-1]
    //     0x55686c: ldurb           w17, [x0, #-1]
    //     0x556870: and             x16, x17, x16, lsr #2
    //     0x556874: tst             x16, HEAP, lsr #32
    //     0x556878: b.eq            #0x556880
    //     0x55687c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556880: r0 = Null
    //     0x556880: mov             x0, NULL
    // 0x556884: LeaveFrame
    //     0x556884: mov             SP, fp
    //     0x556888: ldp             fp, lr, [SP], #0x10
    // 0x55688c: ret
    //     0x55688c: ret             
    // 0x556890: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556890: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556894: b               #0x55676c
    // 0x556898: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x556898: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x55689c, size: 0x48
    // 0x55689c: EnterFrame
    //     0x55689c: stp             fp, lr, [SP, #-0x10]!
    //     0x5568a0: mov             fp, SP
    // 0x5568a4: AllocStack(0x8)
    //     0x5568a4: sub             SP, SP, #8
    // 0x5568a8: SetupParameters()
    //     0x5568a8: ldr             x0, [fp, #0x10]
    //     0x5568ac: ldur            w1, [x0, #0x17]
    //     0x5568b0: add             x1, x1, HEAP, lsl #32
    // 0x5568b4: CheckStackOverflow
    //     0x5568b4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5568b8: cmp             SP, x16
    //     0x5568bc: b.ls            #0x5568dc
    // 0x5568c0: LoadField: r0 = r1->field_f
    //     0x5568c0: ldur            w0, [x1, #0xf]
    // 0x5568c4: DecompressPointer r0
    //     0x5568c4: add             x0, x0, HEAP, lsl #32
    // 0x5568c8: str             x0, [SP]
    // 0x5568cc: r0 = _updateTickers()
    //     0x5568cc: bl              #0x5568e4  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers
    // 0x5568d0: LeaveFrame
    //     0x5568d0: mov             SP, fp
    //     0x5568d4: ldp             fp, lr, [SP], #0x10
    // 0x5568d8: ret
    //     0x5568d8: ret             
    // 0x5568dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5568dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5568e0: b               #0x5568c0
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x5568e4, size: 0x168
    // 0x5568e4: EnterFrame
    //     0x5568e4: stp             fp, lr, [SP, #-0x10]!
    //     0x5568e8: mov             fp, SP
    // 0x5568ec: AllocStack(0x28)
    //     0x5568ec: sub             SP, SP, #0x28
    // 0x5568f0: CheckStackOverflow
    //     0x5568f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5568f4: cmp             SP, x16
    //     0x5568f8: b.ls            #0x556a34
    // 0x5568fc: ldr             x1, [fp, #0x10]
    // 0x556900: LoadField: r0 = r1->field_13
    //     0x556900: ldur            w0, [x1, #0x13]
    // 0x556904: DecompressPointer r0
    //     0x556904: add             x0, x0, HEAP, lsl #32
    // 0x556908: cmp             w0, NULL
    // 0x55690c: b.eq            #0x556a24
    // 0x556910: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x556910: ldur            w0, [x1, #0x17]
    // 0x556914: DecompressPointer r0
    //     0x556914: add             x0, x0, HEAP, lsl #32
    // 0x556918: cmp             w0, NULL
    // 0x55691c: b.eq            #0x556a3c
    // 0x556920: r2 = LoadClassIdInstr(r0)
    //     0x556920: ldur            x2, [x0, #-1]
    //     0x556924: ubfx            x2, x2, #0xc, #0x14
    // 0x556928: str             x0, [SP]
    // 0x55692c: mov             x0, x2
    // 0x556930: r0 = GDT[cid_x0 + 0x801]()
    //     0x556930: add             lr, x0, #0x801
    //     0x556934: ldr             lr, [x21, lr, lsl #3]
    //     0x556938: blr             lr
    // 0x55693c: eor             x1, x0, #0x10
    // 0x556940: ldr             x0, [fp, #0x10]
    // 0x556944: stur            x1, [fp, #-8]
    // 0x556948: LoadField: r2 = r0->field_13
    //     0x556948: ldur            w2, [x0, #0x13]
    // 0x55694c: DecompressPointer r2
    //     0x55694c: add             x2, x2, HEAP, lsl #32
    // 0x556950: cmp             w2, NULL
    // 0x556954: b.eq            #0x556a40
    // 0x556958: str             x2, [SP]
    // 0x55695c: r0 = iterator()
    //     0x55695c: bl              #0x5aab8c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x556960: stur            x0, [fp, #-0x18]
    // 0x556964: LoadField: r2 = r0->field_7
    //     0x556964: ldur            w2, [x0, #7]
    // 0x556968: DecompressPointer r2
    //     0x556968: add             x2, x2, HEAP, lsl #32
    // 0x55696c: stur            x2, [fp, #-0x10]
    // 0x556970: ldur            x1, [fp, #-8]
    // 0x556974: CheckStackOverflow
    //     0x556974: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x556978: cmp             SP, x16
    //     0x55697c: b.ls            #0x556a44
    // 0x556980: str             x0, [SP]
    // 0x556984: r0 = moveNext()
    //     0x556984: bl              #0xb9b4b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x556988: tbnz            w0, #4, #0x556a24
    // 0x55698c: ldur            x3, [fp, #-0x18]
    // 0x556990: LoadField: r4 = r3->field_33
    //     0x556990: ldur            w4, [x3, #0x33]
    // 0x556994: DecompressPointer r4
    //     0x556994: add             x4, x4, HEAP, lsl #32
    // 0x556998: stur            x4, [fp, #-0x20]
    // 0x55699c: cmp             w4, NULL
    // 0x5569a0: b.ne            #0x5569d4
    // 0x5569a4: mov             x0, x4
    // 0x5569a8: ldur            x2, [fp, #-0x10]
    // 0x5569ac: r1 = Null
    //     0x5569ac: mov             x1, NULL
    // 0x5569b0: cmp             w2, NULL
    // 0x5569b4: b.eq            #0x5569d4
    // 0x5569b8: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x5569b8: ldur            w4, [x2, #0x17]
    // 0x5569bc: DecompressPointer r4
    //     0x5569bc: add             x4, x4, HEAP, lsl #32
    // 0x5569c0: r8 = X0
    //     0x5569c0: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x5569c4: LoadField: r9 = r4->field_7
    //     0x5569c4: ldur            x9, [x4, #7]
    // 0x5569c8: r3 = Null
    //     0x5569c8: add             x3, PP, #0x41, lsl #12  ; [pp+0x41a38] Null
    //     0x5569cc: ldr             x3, [x3, #0xa38]
    // 0x5569d0: blr             x9
    // 0x5569d4: ldur            x1, [fp, #-8]
    // 0x5569d8: ldur            x0, [fp, #-0x20]
    // 0x5569dc: LoadField: r2 = r0->field_b
    //     0x5569dc: ldur            w2, [x0, #0xb]
    // 0x5569e0: DecompressPointer r2
    //     0x5569e0: add             x2, x2, HEAP, lsl #32
    // 0x5569e4: cmp             w1, w2
    // 0x5569e8: b.eq            #0x556a18
    // 0x5569ec: StoreField: r0->field_b = r1
    //     0x5569ec: stur            w1, [x0, #0xb]
    // 0x5569f0: tbnz            w1, #4, #0x556a00
    // 0x5569f4: str             x0, [SP]
    // 0x5569f8: r0 = unscheduleTick()
    //     0x5569f8: bl              #0x54b4a4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x5569fc: b               #0x556a18
    // 0x556a00: str             x0, [SP]
    // 0x556a04: r0 = shouldScheduleTick()
    //     0x556a04: bl              #0x54b45c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x556a08: tbnz            w0, #4, #0x556a18
    // 0x556a0c: ldur            x16, [fp, #-0x20]
    // 0x556a10: str             x16, [SP]
    // 0x556a14: r0 = scheduleTick()
    //     0x556a14: bl              #0x54a25c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x556a18: ldur            x0, [fp, #-0x18]
    // 0x556a1c: ldur            x2, [fp, #-0x10]
    // 0x556a20: b               #0x556970
    // 0x556a24: r0 = Null
    //     0x556a24: mov             x0, NULL
    // 0x556a28: LeaveFrame
    //     0x556a28: mov             SP, fp
    //     0x556a2c: ldp             fp, lr, [SP], #0x10
    // 0x556a30: ret
    //     0x556a30: ret             
    // 0x556a34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556a34: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556a38: b               #0x5568fc
    // 0x556a3c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x556a3c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x556a40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x556a40: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x556a44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556a44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556a48: b               #0x556980
  }
  _ activate(/* No info */) {
    // ** addr: 0x8ca420, size: 0x48
    // 0x8ca420: EnterFrame
    //     0x8ca420: stp             fp, lr, [SP, #-0x10]!
    //     0x8ca424: mov             fp, SP
    // 0x8ca428: AllocStack(0x8)
    //     0x8ca428: sub             SP, SP, #8
    // 0x8ca42c: CheckStackOverflow
    //     0x8ca42c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ca430: cmp             SP, x16
    //     0x8ca434: b.ls            #0x8ca460
    // 0x8ca438: ldr             x16, [fp, #0x10]
    // 0x8ca43c: str             x16, [SP]
    // 0x8ca440: r0 = _updateTickerModeNotifier()
    //     0x8ca440: bl              #0x556754  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8ca444: ldr             x16, [fp, #0x10]
    // 0x8ca448: str             x16, [SP]
    // 0x8ca44c: r0 = _updateTickers()
    //     0x8ca44c: bl              #0x5568e4  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers
    // 0x8ca450: r0 = Null
    //     0x8ca450: mov             x0, NULL
    // 0x8ca454: LeaveFrame
    //     0x8ca454: mov             SP, fp
    //     0x8ca458: ldp             fp, lr, [SP], #0x10
    // 0x8ca45c: ret
    //     0x8ca45c: ret             
    // 0x8ca460: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ca460: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ca464: b               #0x8ca438
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa56b78, size: 0xa4
    // 0xa56b78: EnterFrame
    //     0xa56b78: stp             fp, lr, [SP, #-0x10]!
    //     0xa56b7c: mov             fp, SP
    // 0xa56b80: AllocStack(0x18)
    //     0xa56b80: sub             SP, SP, #0x18
    // 0xa56b84: CheckStackOverflow
    //     0xa56b84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa56b88: cmp             SP, x16
    //     0xa56b8c: b.ls            #0xa56c14
    // 0xa56b90: ldr             x0, [fp, #0x10]
    // 0xa56b94: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa56b94: ldur            w1, [x0, #0x17]
    // 0xa56b98: DecompressPointer r1
    //     0xa56b98: add             x1, x1, HEAP, lsl #32
    // 0xa56b9c: stur            x1, [fp, #-8]
    // 0xa56ba0: cmp             w1, NULL
    // 0xa56ba4: b.ne            #0xa56bb0
    // 0xa56ba8: mov             x1, x0
    // 0xa56bac: b               #0xa56c00
    // 0xa56bb0: r1 = 1
    //     0xa56bb0: movz            x1, #0x1
    // 0xa56bb4: r0 = AllocateContext()
    //     0xa56bb4: bl              #0xc5def4  ; AllocateContextStub
    // 0xa56bb8: mov             x1, x0
    // 0xa56bbc: ldr             x0, [fp, #0x10]
    // 0xa56bc0: StoreField: r1->field_f = r0
    //     0xa56bc0: stur            w0, [x1, #0xf]
    // 0xa56bc4: mov             x2, x1
    // 0xa56bc8: r1 = Function '_updateTickers@328311458':.
    //     0xa56bc8: add             x1, PP, #0x41, lsl #12  ; [pp+0x41a48] AnonymousClosure: (0x55689c), in [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::_updateTickers (0x5568e4)
    //     0xa56bcc: ldr             x1, [x1, #0xa48]
    // 0xa56bd0: r0 = AllocateClosure()
    //     0xa56bd0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa56bd4: mov             x1, x0
    // 0xa56bd8: ldur            x0, [fp, #-8]
    // 0xa56bdc: r2 = LoadClassIdInstr(r0)
    //     0xa56bdc: ldur            x2, [x0, #-1]
    //     0xa56be0: ubfx            x2, x2, #0xc, #0x14
    // 0xa56be4: stp             x1, x0, [SP]
    // 0xa56be8: mov             x0, x2
    // 0xa56bec: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa56bec: movz            x17, #0xc9d0
    //     0xa56bf0: add             lr, x0, x17
    //     0xa56bf4: ldr             lr, [x21, lr, lsl #3]
    //     0xa56bf8: blr             lr
    // 0xa56bfc: ldr             x1, [fp, #0x10]
    // 0xa56c00: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa56c00: stur            NULL, [x1, #0x17]
    // 0xa56c04: r0 = Null
    //     0xa56c04: mov             x0, NULL
    // 0xa56c08: LeaveFrame
    //     0xa56c08: mov             SP, fp
    //     0xa56c0c: ldp             fp, lr, [SP], #0x10
    // 0xa56c10: ret
    //     0xa56c10: ret             
    // 0xa56c14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa56c14: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa56c18: b               #0xa56b90
  }
}

// class id: 3211, size: 0x30, field offset: 0x1c
class _InputDecoratorState extends __InputDecoratorState&State&TickerProviderStateMixin {

  late final Animation<double> _floatingLabelAnimation; // offset: 0x20
  late final AnimationController _floatingLabelController; // offset: 0x1c
  late final AnimationController _shakingLabelController; // offset: 0x24

  get _ isEmpty(/* No info */) {
    // ** addr: 0x829c60, size: 0x34
    // 0x829c60: EnterFrame
    //     0x829c60: stp             fp, lr, [SP, #-0x10]!
    //     0x829c64: mov             fp, SP
    // 0x829c68: ldr             x1, [fp, #0x10]
    // 0x829c6c: LoadField: r2 = r1->field_b
    //     0x829c6c: ldur            w2, [x1, #0xb]
    // 0x829c70: DecompressPointer r2
    //     0x829c70: add             x2, x2, HEAP, lsl #32
    // 0x829c74: cmp             w2, NULL
    // 0x829c78: b.eq            #0x829c90
    // 0x829c7c: LoadField: r0 = r2->field_27
    //     0x829c7c: ldur            w0, [x2, #0x27]
    // 0x829c80: DecompressPointer r0
    //     0x829c80: add             x0, x0, HEAP, lsl #32
    // 0x829c84: LeaveFrame
    //     0x829c84: mov             SP, fp
    //     0x829c88: ldp             fp, lr, [SP], #0x10
    // 0x829c8c: ret
    //     0x829c8c: ret             
    // 0x829c90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x829c90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isFocused(/* No info */) {
    // ** addr: 0x87faa4, size: 0x34
    // 0x87faa4: EnterFrame
    //     0x87faa4: stp             fp, lr, [SP, #-0x10]!
    //     0x87faa8: mov             fp, SP
    // 0x87faac: ldr             x1, [fp, #0x10]
    // 0x87fab0: LoadField: r2 = r1->field_b
    //     0x87fab0: ldur            w2, [x1, #0xb]
    // 0x87fab4: DecompressPointer r2
    //     0x87fab4: add             x2, x2, HEAP, lsl #32
    // 0x87fab8: cmp             w2, NULL
    // 0x87fabc: b.eq            #0x87fad4
    // 0x87fac0: LoadField: r0 = r2->field_1b
    //     0x87fac0: ldur            w0, [x2, #0x1b]
    // 0x87fac4: DecompressPointer r0
    //     0x87fac4: add             x0, x0, HEAP, lsl #32
    // 0x87fac8: LeaveFrame
    //     0x87fac8: mov             SP, fp
    //     0x87facc: ldp             fp, lr, [SP], #0x10
    // 0x87fad0: ret
    //     0x87fad0: ret             
    // 0x87fad4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x87fad4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8ae27c, size: 0x330
    // 0x8ae27c: EnterFrame
    //     0x8ae27c: stp             fp, lr, [SP, #-0x10]!
    //     0x8ae280: mov             fp, SP
    // 0x8ae284: AllocStack(0x18)
    //     0x8ae284: sub             SP, SP, #0x18
    // 0x8ae288: CheckStackOverflow
    //     0x8ae288: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ae28c: cmp             SP, x16
    //     0x8ae290: b.ls            #0x8ae560
    // 0x8ae294: ldr             x0, [fp, #0x10]
    // 0x8ae298: r2 = Null
    //     0x8ae298: mov             x2, NULL
    // 0x8ae29c: r1 = Null
    //     0x8ae29c: mov             x1, NULL
    // 0x8ae2a0: r4 = 59
    //     0x8ae2a0: movz            x4, #0x3b
    // 0x8ae2a4: branchIfSmi(r0, 0x8ae2b0)
    //     0x8ae2a4: tbz             w0, #0, #0x8ae2b0
    // 0x8ae2a8: r4 = LoadClassIdInstr(r0)
    //     0x8ae2a8: ldur            x4, [x0, #-1]
    //     0x8ae2ac: ubfx            x4, x4, #0xc, #0x14
    // 0x8ae2b0: r17 = 4175
    //     0x8ae2b0: movz            x17, #0x104f
    // 0x8ae2b4: cmp             x4, x17
    // 0x8ae2b8: b.eq            #0x8ae2d0
    // 0x8ae2bc: r8 = InputDecorator
    //     0x8ae2bc: add             x8, PP, #0x41, lsl #12  ; [pp+0x419c8] Type: InputDecorator
    //     0x8ae2c0: ldr             x8, [x8, #0x9c8]
    // 0x8ae2c4: r3 = Null
    //     0x8ae2c4: add             x3, PP, #0x41, lsl #12  ; [pp+0x419d0] Null
    //     0x8ae2c8: ldr             x3, [x3, #0x9d0]
    // 0x8ae2cc: r0 = InputDecorator()
    //     0x8ae2cc: bl              #0x556730  ; IsType_InputDecorator_Stub
    // 0x8ae2d0: ldr             x3, [fp, #0x18]
    // 0x8ae2d4: LoadField: r2 = r3->field_7
    //     0x8ae2d4: ldur            w2, [x3, #7]
    // 0x8ae2d8: DecompressPointer r2
    //     0x8ae2d8: add             x2, x2, HEAP, lsl #32
    // 0x8ae2dc: ldr             x0, [fp, #0x10]
    // 0x8ae2e0: r1 = Null
    //     0x8ae2e0: mov             x1, NULL
    // 0x8ae2e4: cmp             w2, NULL
    // 0x8ae2e8: b.eq            #0x8ae30c
    // 0x8ae2ec: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8ae2ec: ldur            w4, [x2, #0x17]
    // 0x8ae2f0: DecompressPointer r4
    //     0x8ae2f0: add             x4, x4, HEAP, lsl #32
    // 0x8ae2f4: r8 = X0 bound StatefulWidget
    //     0x8ae2f4: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8ae2f8: ldr             x8, [x8, #0x290]
    // 0x8ae2fc: LoadField: r9 = r4->field_7
    //     0x8ae2fc: ldur            x9, [x4, #7]
    // 0x8ae300: r3 = Null
    //     0x8ae300: add             x3, PP, #0x41, lsl #12  ; [pp+0x419e0] Null
    //     0x8ae304: ldr             x3, [x3, #0x9e0]
    // 0x8ae308: blr             x9
    // 0x8ae30c: ldr             x0, [fp, #0x18]
    // 0x8ae310: LoadField: r1 = r0->field_b
    //     0x8ae310: ldur            w1, [x0, #0xb]
    // 0x8ae314: DecompressPointer r1
    //     0x8ae314: add             x1, x1, HEAP, lsl #32
    // 0x8ae318: cmp             w1, NULL
    // 0x8ae31c: b.eq            #0x8ae568
    // 0x8ae320: LoadField: r2 = r1->field_b
    //     0x8ae320: ldur            w2, [x1, #0xb]
    // 0x8ae324: DecompressPointer r2
    //     0x8ae324: add             x2, x2, HEAP, lsl #32
    // 0x8ae328: ldr             x1, [fp, #0x10]
    // 0x8ae32c: LoadField: r3 = r1->field_b
    //     0x8ae32c: ldur            w3, [x1, #0xb]
    // 0x8ae330: DecompressPointer r3
    //     0x8ae330: add             x3, x3, HEAP, lsl #32
    // 0x8ae334: stur            x3, [fp, #-8]
    // 0x8ae338: stp             x3, x2, [SP]
    // 0x8ae33c: r0 = ==()
    //     0x8ae33c: bl              #0xbd74f8  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::==
    // 0x8ae340: tbz             w0, #4, #0x8ae350
    // 0x8ae344: ldr             x0, [fp, #0x18]
    // 0x8ae348: StoreField: r0->field_2b = rNULL
    //     0x8ae348: stur            NULL, [x0, #0x2b]
    // 0x8ae34c: b               #0x8ae354
    // 0x8ae350: ldr             x0, [fp, #0x18]
    // 0x8ae354: ldur            x1, [fp, #-8]
    // 0x8ae358: LoadField: r2 = r0->field_b
    //     0x8ae358: ldur            w2, [x0, #0xb]
    // 0x8ae35c: DecompressPointer r2
    //     0x8ae35c: add             x2, x2, HEAP, lsl #32
    // 0x8ae360: cmp             w2, NULL
    // 0x8ae364: b.eq            #0x8ae56c
    // 0x8ae368: LoadField: r3 = r2->field_b
    //     0x8ae368: ldur            w3, [x2, #0xb]
    // 0x8ae36c: DecompressPointer r3
    //     0x8ae36c: add             x3, x3, HEAP, lsl #32
    // 0x8ae370: LoadField: r4 = r3->field_4b
    //     0x8ae370: ldur            w4, [x3, #0x4b]
    // 0x8ae374: DecompressPointer r4
    //     0x8ae374: add             x4, x4, HEAP, lsl #32
    // 0x8ae378: LoadField: r5 = r1->field_4b
    //     0x8ae378: ldur            w5, [x1, #0x4b]
    // 0x8ae37c: DecompressPointer r5
    //     0x8ae37c: add             x5, x5, HEAP, lsl #32
    // 0x8ae380: LoadField: r6 = r2->field_27
    //     0x8ae380: ldur            w6, [x2, #0x27]
    // 0x8ae384: DecompressPointer r6
    //     0x8ae384: add             x6, x6, HEAP, lsl #32
    // 0x8ae388: tbz             w6, #4, #0x8ae394
    // 0x8ae38c: r3 = true
    //     0x8ae38c: add             x3, NULL, #0x20  ; true
    // 0x8ae390: b               #0x8ae3b4
    // 0x8ae394: LoadField: r6 = r2->field_1b
    //     0x8ae394: ldur            w6, [x2, #0x1b]
    // 0x8ae398: DecompressPointer r6
    //     0x8ae398: add             x6, x6, HEAP, lsl #32
    // 0x8ae39c: tbnz            w6, #4, #0x8ae3b0
    // 0x8ae3a0: LoadField: r2 = r3->field_c3
    //     0x8ae3a0: ldur            w2, [x3, #0xc3]
    // 0x8ae3a4: DecompressPointer r2
    //     0x8ae3a4: add             x2, x2, HEAP, lsl #32
    // 0x8ae3a8: mov             x3, x2
    // 0x8ae3ac: b               #0x8ae3b4
    // 0x8ae3b0: r3 = false
    //     0x8ae3b0: add             x3, NULL, #0x30  ; false
    // 0x8ae3b4: ldr             x2, [fp, #0x10]
    // 0x8ae3b8: LoadField: r6 = r2->field_27
    //     0x8ae3b8: ldur            w6, [x2, #0x27]
    // 0x8ae3bc: DecompressPointer r6
    //     0x8ae3bc: add             x6, x6, HEAP, lsl #32
    // 0x8ae3c0: tbz             w6, #4, #0x8ae3cc
    // 0x8ae3c4: r2 = true
    //     0x8ae3c4: add             x2, NULL, #0x20  ; true
    // 0x8ae3c8: b               #0x8ae3e8
    // 0x8ae3cc: LoadField: r6 = r2->field_1b
    //     0x8ae3cc: ldur            w6, [x2, #0x1b]
    // 0x8ae3d0: DecompressPointer r6
    //     0x8ae3d0: add             x6, x6, HEAP, lsl #32
    // 0x8ae3d4: tbnz            w6, #4, #0x8ae3e4
    // 0x8ae3d8: LoadField: r2 = r1->field_c3
    //     0x8ae3d8: ldur            w2, [x1, #0xc3]
    // 0x8ae3dc: DecompressPointer r2
    //     0x8ae3dc: add             x2, x2, HEAP, lsl #32
    // 0x8ae3e0: b               #0x8ae3e8
    // 0x8ae3e4: r2 = false
    //     0x8ae3e4: add             x2, NULL, #0x30  ; false
    // 0x8ae3e8: cmp             w3, w2
    // 0x8ae3ec: b.ne            #0x8ae3f8
    // 0x8ae3f0: cmp             w4, w5
    // 0x8ae3f4: b.eq            #0x8ae4ac
    // 0x8ae3f8: str             x0, [SP]
    // 0x8ae3fc: r0 = _floatingLabelEnabled()
    //     0x8ae3fc: bl              #0x8af1f0  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_floatingLabelEnabled
    // 0x8ae400: tbnz            w0, #4, #0x8ae488
    // 0x8ae404: ldr             x0, [fp, #0x18]
    // 0x8ae408: LoadField: r1 = r0->field_b
    //     0x8ae408: ldur            w1, [x0, #0xb]
    // 0x8ae40c: DecompressPointer r1
    //     0x8ae40c: add             x1, x1, HEAP, lsl #32
    // 0x8ae410: cmp             w1, NULL
    // 0x8ae414: b.eq            #0x8ae570
    // 0x8ae418: LoadField: r2 = r1->field_27
    //     0x8ae418: ldur            w2, [x1, #0x27]
    // 0x8ae41c: DecompressPointer r2
    //     0x8ae41c: add             x2, x2, HEAP, lsl #32
    // 0x8ae420: tbnz            w2, #4, #0x8ae464
    // 0x8ae424: LoadField: r2 = r1->field_1b
    //     0x8ae424: ldur            w2, [x1, #0x1b]
    // 0x8ae428: DecompressPointer r2
    //     0x8ae428: add             x2, x2, HEAP, lsl #32
    // 0x8ae42c: tbnz            w2, #4, #0x8ae444
    // 0x8ae430: LoadField: r2 = r1->field_b
    //     0x8ae430: ldur            w2, [x1, #0xb]
    // 0x8ae434: DecompressPointer r2
    //     0x8ae434: add             x2, x2, HEAP, lsl #32
    // 0x8ae438: LoadField: r3 = r2->field_c3
    //     0x8ae438: ldur            w3, [x2, #0xc3]
    // 0x8ae43c: DecompressPointer r3
    //     0x8ae43c: add             x3, x3, HEAP, lsl #32
    // 0x8ae440: tbz             w3, #4, #0x8ae464
    // 0x8ae444: LoadField: r2 = r1->field_b
    //     0x8ae444: ldur            w2, [x1, #0xb]
    // 0x8ae448: DecompressPointer r2
    //     0x8ae448: add             x2, x2, HEAP, lsl #32
    // 0x8ae44c: LoadField: r1 = r2->field_4b
    //     0x8ae44c: ldur            w1, [x2, #0x4b]
    // 0x8ae450: DecompressPointer r1
    //     0x8ae450: add             x1, x1, HEAP, lsl #32
    // 0x8ae454: r16 = Instance_FloatingLabelBehavior
    //     0x8ae454: add             x16, PP, #0x41, lsl #12  ; [pp+0x419f0] Obj!FloatingLabelBehavior@c44a11
    //     0x8ae458: ldr             x16, [x16, #0x9f0]
    // 0x8ae45c: cmp             w1, w16
    // 0x8ae460: b.ne            #0x8ae488
    // 0x8ae464: LoadField: r1 = r0->field_1b
    //     0x8ae464: ldur            w1, [x0, #0x1b]
    // 0x8ae468: DecompressPointer r1
    //     0x8ae468: add             x1, x1, HEAP, lsl #32
    // 0x8ae46c: r16 = Sentinel
    //     0x8ae46c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae470: cmp             w1, w16
    // 0x8ae474: b.eq            #0x8ae574
    // 0x8ae478: str             x1, [SP]
    // 0x8ae47c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8ae47c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8ae480: r0 = forward()
    //     0x8ae480: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x8ae484: b               #0x8ae4ac
    // 0x8ae488: ldr             x0, [fp, #0x18]
    // 0x8ae48c: LoadField: r1 = r0->field_1b
    //     0x8ae48c: ldur            w1, [x0, #0x1b]
    // 0x8ae490: DecompressPointer r1
    //     0x8ae490: add             x1, x1, HEAP, lsl #32
    // 0x8ae494: r16 = Sentinel
    //     0x8ae494: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae498: cmp             w1, w16
    // 0x8ae49c: b.eq            #0x8ae580
    // 0x8ae4a0: str             x1, [SP]
    // 0x8ae4a4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8ae4a4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8ae4a8: r0 = reverse()
    //     0x8ae4a8: bl              #0x5d8c9c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reverse
    // 0x8ae4ac: ldr             x0, [fp, #0x18]
    // 0x8ae4b0: ldur            x1, [fp, #-8]
    // 0x8ae4b4: str             x0, [SP]
    // 0x8ae4b8: r0 = decoration()
    //     0x8ae4b8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x8ae4bc: LoadField: r1 = r0->field_3f
    //     0x8ae4bc: ldur            w1, [x0, #0x3f]
    // 0x8ae4c0: DecompressPointer r1
    //     0x8ae4c0: add             x1, x1, HEAP, lsl #32
    // 0x8ae4c4: ldur            x0, [fp, #-8]
    // 0x8ae4c8: LoadField: r2 = r0->field_3f
    //     0x8ae4c8: ldur            w2, [x0, #0x3f]
    // 0x8ae4cc: DecompressPointer r2
    //     0x8ae4cc: add             x2, x2, HEAP, lsl #32
    // 0x8ae4d0: ldr             x0, [fp, #0x18]
    // 0x8ae4d4: LoadField: r3 = r0->field_1b
    //     0x8ae4d4: ldur            w3, [x0, #0x1b]
    // 0x8ae4d8: DecompressPointer r3
    //     0x8ae4d8: add             x3, x3, HEAP, lsl #32
    // 0x8ae4dc: r16 = Sentinel
    //     0x8ae4dc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae4e0: cmp             w3, w16
    // 0x8ae4e4: b.eq            #0x8ae58c
    // 0x8ae4e8: LoadField: r4 = r3->field_43
    //     0x8ae4e8: ldur            w4, [x3, #0x43]
    // 0x8ae4ec: DecompressPointer r4
    //     0x8ae4ec: add             x4, x4, HEAP, lsl #32
    // 0x8ae4f0: r16 = Sentinel
    //     0x8ae4f0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae4f4: cmp             w4, w16
    // 0x8ae4f8: b.eq            #0x8ae598
    // 0x8ae4fc: r16 = Instance_AnimationStatus
    //     0x8ae4fc: ldr             x16, [PP, #0x6020]  ; [pp+0x6020] Obj!AnimationStatus@c451f1
    // 0x8ae500: cmp             w4, w16
    // 0x8ae504: b.ne            #0x8ae550
    // 0x8ae508: cmp             w1, NULL
    // 0x8ae50c: b.eq            #0x8ae550
    // 0x8ae510: stp             x2, x1, [SP]
    // 0x8ae514: r0 = ==()
    //     0x8ae514: bl              #0xbf634c  ; [dart:core] _OneByteString::==
    // 0x8ae518: tbz             w0, #4, #0x8ae550
    // 0x8ae51c: ldr             x0, [fp, #0x18]
    // 0x8ae520: LoadField: r1 = r0->field_23
    //     0x8ae520: ldur            w1, [x0, #0x23]
    // 0x8ae524: DecompressPointer r1
    //     0x8ae524: add             x1, x1, HEAP, lsl #32
    // 0x8ae528: r16 = Sentinel
    //     0x8ae528: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae52c: cmp             w1, w16
    // 0x8ae530: b.eq            #0x8ae5a0
    // 0x8ae534: stur            x1, [fp, #-8]
    // 0x8ae538: stp             xzr, x1, [SP]
    // 0x8ae53c: r0 = value=()
    //     0x8ae53c: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x8ae540: ldur            x16, [fp, #-8]
    // 0x8ae544: str             x16, [SP]
    // 0x8ae548: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8ae548: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8ae54c: r0 = forward()
    //     0x8ae54c: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x8ae550: r0 = Null
    //     0x8ae550: mov             x0, NULL
    // 0x8ae554: LeaveFrame
    //     0x8ae554: mov             SP, fp
    //     0x8ae558: ldp             fp, lr, [SP], #0x10
    // 0x8ae55c: ret
    //     0x8ae55c: ret             
    // 0x8ae560: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ae560: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ae564: b               #0x8ae294
    // 0x8ae568: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae568: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae56c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae56c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae570: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae570: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae574: r9 = _floatingLabelController
    //     0x8ae574: add             x9, PP, #0x41, lsl #12  ; [pp+0x419f8] Field <_InputDecoratorState@159019562._floatingLabelController@159019562>: late final (offset: 0x1c)
    //     0x8ae578: ldr             x9, [x9, #0x9f8]
    // 0x8ae57c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae57c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae580: r9 = _floatingLabelController
    //     0x8ae580: add             x9, PP, #0x41, lsl #12  ; [pp+0x419f8] Field <_InputDecoratorState@159019562._floatingLabelController@159019562>: late final (offset: 0x1c)
    //     0x8ae584: ldr             x9, [x9, #0x9f8]
    // 0x8ae588: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae588: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae58c: r9 = _floatingLabelController
    //     0x8ae58c: add             x9, PP, #0x41, lsl #12  ; [pp+0x419f8] Field <_InputDecoratorState@159019562._floatingLabelController@159019562>: late final (offset: 0x1c)
    //     0x8ae590: ldr             x9, [x9, #0x9f8]
    // 0x8ae594: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae594: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae598: r9 = _status
    //     0x8ae598: ldr             x9, [PP, #0x6060]  ; [pp+0x6060] Field <AnimationController._status@1160066280>: late (offset: 0x44)
    // 0x8ae59c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae59c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae5a0: r9 = _shakingLabelController
    //     0x8ae5a0: add             x9, PP, #0x41, lsl #12  ; [pp+0x41a00] Field <_InputDecoratorState@159019562._shakingLabelController@159019562>: late final (offset: 0x24)
    //     0x8ae5a4: ldr             x9, [x9, #0xa00]
    // 0x8ae5a8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae5a8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ decoration(/* No info */) {
    // ** addr: 0x8ae5ac, size: 0xb8
    // 0x8ae5ac: EnterFrame
    //     0x8ae5ac: stp             fp, lr, [SP, #-0x10]!
    //     0x8ae5b0: mov             fp, SP
    // 0x8ae5b4: AllocStack(0x10)
    //     0x8ae5b4: sub             SP, SP, #0x10
    // 0x8ae5b8: CheckStackOverflow
    //     0x8ae5b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ae5bc: cmp             SP, x16
    //     0x8ae5c0: b.ls            #0x8ae654
    // 0x8ae5c4: ldr             x0, [fp, #0x10]
    // 0x8ae5c8: LoadField: r1 = r0->field_2b
    //     0x8ae5c8: ldur            w1, [x0, #0x2b]
    // 0x8ae5cc: DecompressPointer r1
    //     0x8ae5cc: add             x1, x1, HEAP, lsl #32
    // 0x8ae5d0: cmp             w1, NULL
    // 0x8ae5d4: b.ne            #0x8ae644
    // 0x8ae5d8: LoadField: r1 = r0->field_b
    //     0x8ae5d8: ldur            w1, [x0, #0xb]
    // 0x8ae5dc: DecompressPointer r1
    //     0x8ae5dc: add             x1, x1, HEAP, lsl #32
    // 0x8ae5e0: cmp             w1, NULL
    // 0x8ae5e4: b.eq            #0x8ae65c
    // 0x8ae5e8: LoadField: r2 = r1->field_b
    //     0x8ae5e8: ldur            w2, [x1, #0xb]
    // 0x8ae5ec: DecompressPointer r2
    //     0x8ae5ec: add             x2, x2, HEAP, lsl #32
    // 0x8ae5f0: stur            x2, [fp, #-8]
    // 0x8ae5f4: LoadField: r1 = r0->field_f
    //     0x8ae5f4: ldur            w1, [x0, #0xf]
    // 0x8ae5f8: DecompressPointer r1
    //     0x8ae5f8: add             x1, x1, HEAP, lsl #32
    // 0x8ae5fc: cmp             w1, NULL
    // 0x8ae600: b.eq            #0x8ae660
    // 0x8ae604: str             x1, [SP]
    // 0x8ae608: r0 = of()
    //     0x8ae608: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x8ae60c: ldur            x16, [fp, #-8]
    // 0x8ae610: str             x16, [SP]
    // 0x8ae614: r0 = applyDefaults()
    //     0x8ae614: bl              #0x8ae664  ; [package:flutter/src/material/input_decorator.dart] InputDecoration::applyDefaults
    // 0x8ae618: mov             x1, x0
    // 0x8ae61c: ldr             x2, [fp, #0x10]
    // 0x8ae620: StoreField: r2->field_2b = r0
    //     0x8ae620: stur            w0, [x2, #0x2b]
    //     0x8ae624: ldurb           w16, [x2, #-1]
    //     0x8ae628: ldurb           w17, [x0, #-1]
    //     0x8ae62c: and             x16, x17, x16, lsr #2
    //     0x8ae630: tst             x16, HEAP, lsr #32
    //     0x8ae634: b.eq            #0x8ae63c
    //     0x8ae638: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x8ae63c: mov             x0, x1
    // 0x8ae640: b               #0x8ae648
    // 0x8ae644: mov             x0, x1
    // 0x8ae648: LeaveFrame
    //     0x8ae648: mov             SP, fp
    //     0x8ae64c: ldp             fp, lr, [SP], #0x10
    // 0x8ae650: ret
    //     0x8ae650: ret             
    // 0x8ae654: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ae654: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ae658: b               #0x8ae5c4
    // 0x8ae65c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae65c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae660: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae660: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _floatingLabelEnabled(/* No info */) {
    // ** addr: 0x8af1f0, size: 0x58
    // 0x8af1f0: EnterFrame
    //     0x8af1f0: stp             fp, lr, [SP, #-0x10]!
    //     0x8af1f4: mov             fp, SP
    // 0x8af1f8: AllocStack(0x8)
    //     0x8af1f8: sub             SP, SP, #8
    // 0x8af1fc: CheckStackOverflow
    //     0x8af1fc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8af200: cmp             SP, x16
    //     0x8af204: b.ls            #0x8af240
    // 0x8af208: ldr             x16, [fp, #0x10]
    // 0x8af20c: str             x16, [SP]
    // 0x8af210: r0 = decoration()
    //     0x8af210: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x8af214: LoadField: r1 = r0->field_4b
    //     0x8af214: ldur            w1, [x0, #0x4b]
    // 0x8af218: DecompressPointer r1
    //     0x8af218: add             x1, x1, HEAP, lsl #32
    // 0x8af21c: r16 = Instance_FloatingLabelBehavior
    //     0x8af21c: add             x16, PP, #0x41, lsl #12  ; [pp+0x41a08] Obj!FloatingLabelBehavior@c449f1
    //     0x8af220: ldr             x16, [x16, #0xa08]
    // 0x8af224: cmp             w1, w16
    // 0x8af228: r16 = true
    //     0x8af228: add             x16, NULL, #0x20  ; true
    // 0x8af22c: r17 = false
    //     0x8af22c: add             x17, NULL, #0x30  ; false
    // 0x8af230: csel            x0, x16, x17, ne
    // 0x8af234: LeaveFrame
    //     0x8af234: mov             SP, fp
    //     0x8af238: ldp             fp, lr, [SP], #0x10
    // 0x8af23c: ret
    //     0x8af23c: ret             
    // 0x8af240: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8af240: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8af244: b               #0x8af208
  }
  _ build(/* No info */) {
    // ** addr: 0x93d698, size: 0xe90
    // 0x93d698: EnterFrame
    //     0x93d698: stp             fp, lr, [SP, #-0x10]!
    //     0x93d69c: mov             fp, SP
    // 0x93d6a0: AllocStack(0xb8)
    //     0x93d6a0: sub             SP, SP, #0xb8
    // 0x93d6a4: CheckStackOverflow
    //     0x93d6a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93d6a8: cmp             SP, x16
    //     0x93d6ac: b.ls            #0x93e4b4
    // 0x93d6b0: ldr             x16, [fp, #0x10]
    // 0x93d6b4: str             x16, [SP]
    // 0x93d6b8: r0 = of()
    //     0x93d6b8: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93d6bc: stur            x0, [fp, #-8]
    // 0x93d6c0: ldr             x16, [fp, #0x10]
    // 0x93d6c4: str             x16, [SP]
    // 0x93d6c8: r0 = of()
    //     0x93d6c8: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x93d6cc: LoadField: r1 = r0->field_2b
    //     0x93d6cc: ldur            w1, [x0, #0x2b]
    // 0x93d6d0: DecompressPointer r1
    //     0x93d6d0: add             x1, x1, HEAP, lsl #32
    // 0x93d6d4: tbnz            w1, #4, #0x93d704
    // 0x93d6d8: r0 = _InputDecoratorDefaultsM3()
    //     0x93d6d8: bl              #0x941b18  ; Allocate_InputDecoratorDefaultsM3Stub -> _InputDecoratorDefaultsM3 (size=0x94)
    // 0x93d6dc: stur            x0, [fp, #-0x10]
    // 0x93d6e0: ldr             x16, [fp, #0x10]
    // 0x93d6e4: stp             x16, x0, [SP]
    // 0x93d6e8: r0 = _InputDecoratorDefaultsM3()
    //     0x93d6e8: bl              #0x941aac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3::_InputDecoratorDefaultsM3
    // 0x93d6ec: ldur            x1, [fp, #-0x10]
    // 0x93d6f0: ldr             x0, [fp, #0x10]
    // 0x93d6f4: r3 = false
    //     0x93d6f4: add             x3, NULL, #0x30  ; false
    // 0x93d6f8: r2 = Instance_FloatingLabelAlignment
    //     0x93d6f8: add             x2, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0x93d6fc: ldr             x2, [x2, #0x6a0]
    // 0x93d700: b               #0x93d744
    // 0x93d704: ldr             x0, [fp, #0x10]
    // 0x93d708: r0 = _InputDecoratorDefaultsM2()
    //     0x93d708: bl              #0x941aa0  ; Allocate_InputDecoratorDefaultsM2Stub -> _InputDecoratorDefaultsM2 (size=0x8c)
    // 0x93d70c: mov             x1, x0
    // 0x93d710: ldr             x0, [fp, #0x10]
    // 0x93d714: StoreField: r1->field_87 = r0
    //     0x93d714: stur            w0, [x1, #0x87]
    // 0x93d718: r2 = Instance_FloatingLabelBehavior
    //     0x93d718: add             x2, PP, #0xf, lsl #12  ; [pp+0xf698] Obj!FloatingLabelBehavior@c449d1
    //     0x93d71c: ldr             x2, [x2, #0x698]
    // 0x93d720: StoreField: r1->field_23 = r2
    //     0x93d720: stur            w2, [x1, #0x23]
    // 0x93d724: r2 = Instance_FloatingLabelAlignment
    //     0x93d724: add             x2, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0x93d728: ldr             x2, [x2, #0x6a0]
    // 0x93d72c: StoreField: r1->field_27 = r2
    //     0x93d72c: stur            w2, [x1, #0x27]
    // 0x93d730: r3 = false
    //     0x93d730: add             x3, NULL, #0x30  ; false
    // 0x93d734: StoreField: r1->field_2b = r3
    //     0x93d734: stur            w3, [x1, #0x2b]
    // 0x93d738: StoreField: r1->field_33 = r3
    //     0x93d738: stur            w3, [x1, #0x33]
    // 0x93d73c: StoreField: r1->field_4f = r3
    //     0x93d73c: stur            w3, [x1, #0x4f]
    // 0x93d740: StoreField: r1->field_7f = r3
    //     0x93d740: stur            w3, [x1, #0x7f]
    // 0x93d744: stur            x1, [fp, #-0x10]
    // 0x93d748: ldr             x16, [fp, #0x18]
    // 0x93d74c: ldur            lr, [fp, #-8]
    // 0x93d750: stp             lr, x16, [SP, #8]
    // 0x93d754: str             x1, [SP]
    // 0x93d758: r0 = _getInlineLabelStyle()
    //     0x93d758: bl              #0x941468  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getInlineLabelStyle
    // 0x93d75c: stur            x0, [fp, #-0x20]
    // 0x93d760: LoadField: r1 = r0->field_33
    //     0x93d760: ldur            w1, [x0, #0x33]
    // 0x93d764: DecompressPointer r1
    //     0x93d764: add             x1, x1, HEAP, lsl #32
    // 0x93d768: stur            x1, [fp, #-0x18]
    // 0x93d76c: cmp             w1, NULL
    // 0x93d770: b.eq            #0x93e4bc
    // 0x93d774: ldr             x16, [fp, #0x18]
    // 0x93d778: ldur            lr, [fp, #-8]
    // 0x93d77c: stp             lr, x16, [SP, #8]
    // 0x93d780: ldur            x16, [fp, #-0x10]
    // 0x93d784: str             x16, [SP]
    // 0x93d788: r0 = _getInlineHintStyle()
    //     0x93d788: bl              #0x9411a4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getInlineHintStyle
    // 0x93d78c: stur            x0, [fp, #-0x28]
    // 0x93d790: ldr             x16, [fp, #0x18]
    // 0x93d794: str             x16, [SP]
    // 0x93d798: r0 = decoration()
    //     0x93d798: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d79c: LoadField: r1 = r0->field_2b
    //     0x93d79c: ldur            w1, [x0, #0x2b]
    // 0x93d7a0: DecompressPointer r1
    //     0x93d7a0: add             x1, x1, HEAP, lsl #32
    // 0x93d7a4: stur            x1, [fp, #-0x30]
    // 0x93d7a8: cmp             w1, NULL
    // 0x93d7ac: b.ne            #0x93d7bc
    // 0x93d7b0: r1 = Null
    //     0x93d7b0: mov             x1, NULL
    // 0x93d7b4: r0 = false
    //     0x93d7b4: add             x0, NULL, #0x30  ; false
    // 0x93d7b8: b               #0x93d8a0
    // 0x93d7bc: ldr             x16, [fp, #0x18]
    // 0x93d7c0: str             x16, [SP]
    // 0x93d7c4: r0 = isEmpty()
    //     0x93d7c4: bl              #0x829c60  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isEmpty
    // 0x93d7c8: tbnz            w0, #4, #0x93d7e4
    // 0x93d7cc: ldr             x16, [fp, #0x18]
    // 0x93d7d0: str             x16, [SP]
    // 0x93d7d4: r0 = _hasInlineLabel()
    //     0x93d7d4: bl              #0x94111c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_hasInlineLabel
    // 0x93d7d8: tbz             w0, #4, #0x93d7e4
    // 0x93d7dc: d0 = 1.000000
    //     0x93d7dc: fmov            d0, #1.00000000
    // 0x93d7e0: b               #0x93d7e8
    // 0x93d7e4: d0 = 0.000000
    //     0x93d7e4: eor             v0.16b, v0.16b, v0.16b
    // 0x93d7e8: ldr             x2, [fp, #0x18]
    // 0x93d7ec: ldur            x1, [fp, #-0x28]
    // 0x93d7f0: ldur            x0, [fp, #-0x30]
    // 0x93d7f4: stur            d0, [fp, #-0x90]
    // 0x93d7f8: str             x2, [SP]
    // 0x93d7fc: r0 = decoration()
    //     0x93d7fc: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d800: ldr             x0, [fp, #0x18]
    // 0x93d804: LoadField: r1 = r0->field_b
    //     0x93d804: ldur            w1, [x0, #0xb]
    // 0x93d808: DecompressPointer r1
    //     0x93d808: add             x1, x1, HEAP, lsl #32
    // 0x93d80c: cmp             w1, NULL
    // 0x93d810: b.eq            #0x93e4c0
    // 0x93d814: LoadField: r2 = r1->field_13
    //     0x93d814: ldur            w2, [x1, #0x13]
    // 0x93d818: DecompressPointer r2
    //     0x93d818: add             x2, x2, HEAP, lsl #32
    // 0x93d81c: stur            x2, [fp, #-0x38]
    // 0x93d820: str             x0, [SP]
    // 0x93d824: r0 = decoration()
    //     0x93d824: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d828: LoadField: r1 = r0->field_37
    //     0x93d828: ldur            w1, [x0, #0x37]
    // 0x93d82c: DecompressPointer r1
    //     0x93d82c: add             x1, x1, HEAP, lsl #32
    // 0x93d830: stur            x1, [fp, #-0x40]
    // 0x93d834: r0 = Text()
    //     0x93d834: bl              #0x6225d8  ; AllocateTextStub -> Text (size=0x48)
    // 0x93d838: mov             x1, x0
    // 0x93d83c: ldur            x0, [fp, #-0x30]
    // 0x93d840: stur            x1, [fp, #-0x48]
    // 0x93d844: StoreField: r1->field_b = r0
    //     0x93d844: stur            w0, [x1, #0xb]
    // 0x93d848: ldur            x0, [fp, #-0x28]
    // 0x93d84c: StoreField: r1->field_13 = r0
    //     0x93d84c: stur            w0, [x1, #0x13]
    // 0x93d850: ldur            x0, [fp, #-0x38]
    // 0x93d854: StoreField: r1->field_1b = r0
    //     0x93d854: stur            w0, [x1, #0x1b]
    // 0x93d858: r0 = Instance_TextOverflow
    //     0x93d858: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] Obj!TextOverflow@c43e51
    //     0x93d85c: ldr             x0, [x0, #0x350]
    // 0x93d860: StoreField: r1->field_2b = r0
    //     0x93d860: stur            w0, [x1, #0x2b]
    // 0x93d864: ldur            x2, [fp, #-0x40]
    // 0x93d868: StoreField: r1->field_33 = r2
    //     0x93d868: stur            w2, [x1, #0x33]
    // 0x93d86c: r0 = AnimatedOpacity()
    //     0x93d86c: bl              #0x9410ec  ; AllocateAnimatedOpacityStub -> AnimatedOpacity (size=0x28)
    // 0x93d870: mov             x1, x0
    // 0x93d874: ldur            x0, [fp, #-0x48]
    // 0x93d878: ArrayStore: r1[0] = r0  ; List_4
    //     0x93d878: stur            w0, [x1, #0x17]
    // 0x93d87c: ldur            d0, [fp, #-0x90]
    // 0x93d880: StoreField: r1->field_1b = d0
    //     0x93d880: stur            d0, [x1, #0x1b]
    // 0x93d884: r0 = false
    //     0x93d884: add             x0, NULL, #0x30  ; false
    // 0x93d888: StoreField: r1->field_23 = r0
    //     0x93d888: stur            w0, [x1, #0x23]
    // 0x93d88c: r2 = Instance_Cubic
    //     0x93d88c: ldr             x2, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0x93d890: StoreField: r1->field_b = r2
    //     0x93d890: stur            w2, [x1, #0xb]
    // 0x93d894: r2 = Instance_Duration
    //     0x93d894: add             x2, PP, #0x40, lsl #12  ; [pp+0x40e28] Obj!Duration@c47e41
    //     0x93d898: ldr             x2, [x2, #0xe28]
    // 0x93d89c: StoreField: r1->field_f = r2
    //     0x93d89c: stur            w2, [x1, #0xf]
    // 0x93d8a0: stur            x1, [fp, #-0x28]
    // 0x93d8a4: ldr             x16, [fp, #0x18]
    // 0x93d8a8: str             x16, [SP]
    // 0x93d8ac: r0 = decoration()
    //     0x93d8ac: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d8b0: LoadField: r1 = r0->field_3f
    //     0x93d8b0: ldur            w1, [x0, #0x3f]
    // 0x93d8b4: DecompressPointer r1
    //     0x93d8b4: add             x1, x1, HEAP, lsl #32
    // 0x93d8b8: cmp             w1, NULL
    // 0x93d8bc: r16 = true
    //     0x93d8bc: add             x16, NULL, #0x20  ; true
    // 0x93d8c0: r17 = false
    //     0x93d8c0: add             x17, NULL, #0x30  ; false
    // 0x93d8c4: csel            x0, x16, x17, ne
    // 0x93d8c8: stur            x0, [fp, #-0x30]
    // 0x93d8cc: ldr             x16, [fp, #0x18]
    // 0x93d8d0: str             x16, [SP]
    // 0x93d8d4: r0 = decoration()
    //     0x93d8d4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d8d8: LoadField: r1 = r0->field_c3
    //     0x93d8d8: ldur            w1, [x0, #0xc3]
    // 0x93d8dc: DecompressPointer r1
    //     0x93d8dc: add             x1, x1, HEAP, lsl #32
    // 0x93d8e0: tbz             w1, #4, #0x93d91c
    // 0x93d8e4: ldur            x0, [fp, #-0x30]
    // 0x93d8e8: tbnz            w0, #4, #0x93d900
    // 0x93d8ec: ldr             x16, [fp, #0x18]
    // 0x93d8f0: str             x16, [SP]
    // 0x93d8f4: r0 = decoration()
    //     0x93d8f4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d8f8: r0 = Null
    //     0x93d8f8: mov             x0, NULL
    // 0x93d8fc: b               #0x93d9a0
    // 0x93d900: ldr             x16, [fp, #0x18]
    // 0x93d904: str             x16, [SP]
    // 0x93d908: r0 = decoration()
    //     0x93d908: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d90c: LoadField: r1 = r0->field_b7
    //     0x93d90c: ldur            w1, [x0, #0xb7]
    // 0x93d910: DecompressPointer r1
    //     0x93d910: add             x1, x1, HEAP, lsl #32
    // 0x93d914: mov             x0, x1
    // 0x93d918: b               #0x93d9a0
    // 0x93d91c: ldr             x1, [fp, #0x18]
    // 0x93d920: ldur            x0, [fp, #-0x30]
    // 0x93d924: LoadField: r2 = r1->field_b
    //     0x93d924: ldur            w2, [x1, #0xb]
    // 0x93d928: DecompressPointer r2
    //     0x93d928: add             x2, x2, HEAP, lsl #32
    // 0x93d92c: cmp             w2, NULL
    // 0x93d930: b.eq            #0x93e4c4
    // 0x93d934: LoadField: r3 = r2->field_1b
    //     0x93d934: ldur            w3, [x2, #0x1b]
    // 0x93d938: DecompressPointer r3
    //     0x93d938: add             x3, x3, HEAP, lsl #32
    // 0x93d93c: tbnz            w3, #4, #0x93d970
    // 0x93d940: tbnz            w0, #4, #0x93d954
    // 0x93d944: str             x1, [SP]
    // 0x93d948: r0 = decoration()
    //     0x93d948: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d94c: r0 = Null
    //     0x93d94c: mov             x0, NULL
    // 0x93d950: b               #0x93d9a0
    // 0x93d954: ldr             x16, [fp, #0x18]
    // 0x93d958: str             x16, [SP]
    // 0x93d95c: r0 = decoration()
    //     0x93d95c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d960: LoadField: r1 = r0->field_af
    //     0x93d960: ldur            w1, [x0, #0xaf]
    // 0x93d964: DecompressPointer r1
    //     0x93d964: add             x1, x1, HEAP, lsl #32
    // 0x93d968: mov             x0, x1
    // 0x93d96c: b               #0x93d9a0
    // 0x93d970: tbnz            w0, #4, #0x93d988
    // 0x93d974: ldr             x16, [fp, #0x18]
    // 0x93d978: str             x16, [SP]
    // 0x93d97c: r0 = decoration()
    //     0x93d97c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d980: r0 = Null
    //     0x93d980: mov             x0, NULL
    // 0x93d984: b               #0x93d9a0
    // 0x93d988: ldr             x16, [fp, #0x18]
    // 0x93d98c: str             x16, [SP]
    // 0x93d990: r0 = decoration()
    //     0x93d990: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93d994: LoadField: r1 = r0->field_bb
    //     0x93d994: ldur            w1, [x0, #0xbb]
    // 0x93d998: DecompressPointer r1
    //     0x93d998: add             x1, x1, HEAP, lsl #32
    // 0x93d99c: mov             x0, x1
    // 0x93d9a0: cmp             w0, NULL
    // 0x93d9a4: b.ne            #0x93d9c8
    // 0x93d9a8: ldr             x16, [fp, #0x18]
    // 0x93d9ac: ldur            lr, [fp, #-8]
    // 0x93d9b0: stp             lr, x16, [SP, #8]
    // 0x93d9b4: ldur            x16, [fp, #-0x10]
    // 0x93d9b8: str             x16, [SP]
    // 0x93d9bc: r0 = _getDefaultBorder()
    //     0x93d9bc: bl              #0x93fb60  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getDefaultBorder
    // 0x93d9c0: mov             x1, x0
    // 0x93d9c4: b               #0x93d9cc
    // 0x93d9c8: mov             x1, x0
    // 0x93d9cc: ldr             x0, [fp, #0x18]
    // 0x93d9d0: stur            x1, [fp, #-0x40]
    // 0x93d9d4: LoadField: r2 = r0->field_27
    //     0x93d9d4: ldur            w2, [x0, #0x27]
    // 0x93d9d8: DecompressPointer r2
    //     0x93d9d8: add             x2, x2, HEAP, lsl #32
    // 0x93d9dc: stur            x2, [fp, #-0x38]
    // 0x93d9e0: LoadField: r3 = r0->field_1f
    //     0x93d9e0: ldur            w3, [x0, #0x1f]
    // 0x93d9e4: DecompressPointer r3
    //     0x93d9e4: add             x3, x3, HEAP, lsl #32
    // 0x93d9e8: r16 = Sentinel
    //     0x93d9e8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d9ec: cmp             w3, w16
    // 0x93d9f0: b.eq            #0x93e4c8
    // 0x93d9f4: stur            x3, [fp, #-0x30]
    // 0x93d9f8: ldur            x16, [fp, #-0x10]
    // 0x93d9fc: stp             x16, x0, [SP]
    // 0x93da00: r0 = _getFillColor()
    //     0x93da00: bl              #0x93f794  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getFillColor
    // 0x93da04: stur            x0, [fp, #-0x48]
    // 0x93da08: ldr             x16, [fp, #0x18]
    // 0x93da0c: ldur            lr, [fp, #-8]
    // 0x93da10: stp             lr, x16, [SP]
    // 0x93da14: r0 = _getHoverColor()
    //     0x93da14: bl              #0x93f6c0  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getHoverColor
    // 0x93da18: stur            x0, [fp, #-0x50]
    // 0x93da1c: ldr             x16, [fp, #0x18]
    // 0x93da20: str             x16, [SP]
    // 0x93da24: r0 = isHovering()
    //     0x93da24: bl              #0x93f654  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isHovering
    // 0x93da28: stur            x0, [fp, #-0x58]
    // 0x93da2c: r0 = _BorderContainer()
    //     0x93da2c: bl              #0x93f648  ; Allocate_BorderContainerStub -> _BorderContainer (size=0x24)
    // 0x93da30: mov             x1, x0
    // 0x93da34: ldur            x0, [fp, #-0x40]
    // 0x93da38: stur            x1, [fp, #-0x60]
    // 0x93da3c: StoreField: r1->field_b = r0
    //     0x93da3c: stur            w0, [x1, #0xb]
    // 0x93da40: ldur            x2, [fp, #-0x38]
    // 0x93da44: StoreField: r1->field_f = r2
    //     0x93da44: stur            w2, [x1, #0xf]
    // 0x93da48: ldur            x3, [fp, #-0x30]
    // 0x93da4c: StoreField: r1->field_13 = r3
    //     0x93da4c: stur            w3, [x1, #0x13]
    // 0x93da50: ldur            x3, [fp, #-0x48]
    // 0x93da54: ArrayStore: r1[0] = r3  ; List_4
    //     0x93da54: stur            w3, [x1, #0x17]
    // 0x93da58: ldur            x3, [fp, #-0x50]
    // 0x93da5c: StoreField: r1->field_1b = r3
    //     0x93da5c: stur            w3, [x1, #0x1b]
    // 0x93da60: ldur            x3, [fp, #-0x58]
    // 0x93da64: StoreField: r1->field_1f = r3
    //     0x93da64: stur            w3, [x1, #0x1f]
    // 0x93da68: ldr             x16, [fp, #0x18]
    // 0x93da6c: str             x16, [SP]
    // 0x93da70: r0 = decoration()
    //     0x93da70: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93da74: ldr             x16, [fp, #0x18]
    // 0x93da78: str             x16, [SP]
    // 0x93da7c: r0 = decoration()
    //     0x93da7c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93da80: ldr             x16, [fp, #0x18]
    // 0x93da84: str             x16, [SP]
    // 0x93da88: r0 = decoration()
    //     0x93da88: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93da8c: ldr             x16, [fp, #0x18]
    // 0x93da90: str             x16, [SP]
    // 0x93da94: r0 = decoration()
    //     0x93da94: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93da98: ldr             x16, [fp, #0x18]
    // 0x93da9c: str             x16, [SP]
    // 0x93daa0: r0 = decoration()
    //     0x93daa0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93daa4: ldr             x16, [fp, #0x18]
    // 0x93daa8: str             x16, [SP]
    // 0x93daac: r0 = decoration()
    //     0x93daac: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dab0: ldr             x0, [fp, #0x18]
    // 0x93dab4: LoadField: r1 = r0->field_b
    //     0x93dab4: ldur            w1, [x0, #0xb]
    // 0x93dab8: DecompressPointer r1
    //     0x93dab8: add             x1, x1, HEAP, lsl #32
    // 0x93dabc: cmp             w1, NULL
    // 0x93dac0: b.eq            #0x93e4d4
    // 0x93dac4: LoadField: r2 = r1->field_2b
    //     0x93dac4: ldur            w2, [x1, #0x2b]
    // 0x93dac8: DecompressPointer r2
    //     0x93dac8: add             x2, x2, HEAP, lsl #32
    // 0x93dacc: stur            x2, [fp, #-0x30]
    // 0x93dad0: LoadField: r3 = r1->field_27
    //     0x93dad0: ldur            w3, [x1, #0x27]
    // 0x93dad4: DecompressPointer r3
    //     0x93dad4: add             x3, x3, HEAP, lsl #32
    // 0x93dad8: tbnz            w3, #4, #0x93dafc
    // 0x93dadc: LoadField: r3 = r1->field_1b
    //     0x93dadc: ldur            w3, [x1, #0x1b]
    // 0x93dae0: DecompressPointer r3
    //     0x93dae0: add             x3, x3, HEAP, lsl #32
    // 0x93dae4: tbnz            w3, #4, #0x93dafc
    // 0x93dae8: LoadField: r3 = r1->field_b
    //     0x93dae8: ldur            w3, [x1, #0xb]
    // 0x93daec: DecompressPointer r3
    //     0x93daec: add             x3, x3, HEAP, lsl #32
    // 0x93daf0: LoadField: r1 = r3->field_c3
    //     0x93daf0: ldur            w1, [x3, #0xc3]
    // 0x93daf4: DecompressPointer r1
    //     0x93daf4: add             x1, x1, HEAP, lsl #32
    // 0x93daf8: tbz             w1, #4, #0x93dafc
    // 0x93dafc: str             x0, [SP]
    // 0x93db00: r0 = decoration()
    //     0x93db00: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93db04: LoadField: r1 = r0->field_53
    //     0x93db04: ldur            w1, [x0, #0x53]
    // 0x93db08: DecompressPointer r1
    //     0x93db08: add             x1, x1, HEAP, lsl #32
    // 0x93db0c: cmp             w1, NULL
    // 0x93db10: b.ne            #0x93db1c
    // 0x93db14: r0 = false
    //     0x93db14: add             x0, NULL, #0x30  ; false
    // 0x93db18: b               #0x93db20
    // 0x93db1c: mov             x0, x1
    // 0x93db20: stur            x0, [fp, #-0x48]
    // 0x93db24: tbnz            w0, #4, #0x93db30
    // 0x93db28: d0 = 18.000000
    //     0x93db28: fmov            d0, #18.00000000
    // 0x93db2c: b               #0x93db34
    // 0x93db30: d0 = 24.000000
    //     0x93db30: fmov            d0, #24.00000000
    // 0x93db34: stur            d0, [fp, #-0x90]
    // 0x93db38: ldr             x16, [fp, #0x18]
    // 0x93db3c: str             x16, [SP]
    // 0x93db40: r0 = decoration()
    //     0x93db40: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93db44: ldr             x16, [fp, #0x18]
    // 0x93db48: str             x16, [SP]
    // 0x93db4c: r0 = decoration()
    //     0x93db4c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93db50: LoadField: r1 = r0->field_5f
    //     0x93db50: ldur            w1, [x0, #0x5f]
    // 0x93db54: DecompressPointer r1
    //     0x93db54: add             x1, x1, HEAP, lsl #32
    // 0x93db58: cmp             w1, NULL
    // 0x93db5c: b.ne            #0x93db74
    // 0x93db60: r1 = Null
    //     0x93db60: mov             x1, NULL
    // 0x93db64: r2 = 1.000000
    //     0x93db64: ldr             x2, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x93db68: r0 = Instance_Alignment
    //     0x93db68: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x93db6c: ldr             x0, [x0, #0x358]
    // 0x93db70: b               #0x93dd18
    // 0x93db74: ldur            x0, [fp, #-8]
    // 0x93db78: ldur            d0, [fp, #-0x90]
    // 0x93db7c: ldr             x16, [fp, #0x18]
    // 0x93db80: str             x16, [SP]
    // 0x93db84: r0 = decoration()
    //     0x93db84: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93db88: ldur            x0, [fp, #-8]
    // 0x93db8c: LoadField: r1 = r0->field_2f
    //     0x93db8c: ldur            w1, [x0, #0x2f]
    // 0x93db90: DecompressPointer r1
    //     0x93db90: add             x1, x1, HEAP, lsl #32
    // 0x93db94: r16 = Instance_BoxConstraints
    //     0x93db94: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1f498] Obj!BoxConstraints@c2d371
    //     0x93db98: ldr             x16, [x16, #0x498]
    // 0x93db9c: stp             x16, x1, [SP]
    // 0x93dba0: r0 = effectiveConstraints()
    //     0x93dba0: bl              #0x930f34  ; [package:flutter/src/material/theme_data.dart] VisualDensity::effectiveConstraints
    // 0x93dba4: stur            x0, [fp, #-0x50]
    // 0x93dba8: ldr             x16, [fp, #0x18]
    // 0x93dbac: ldur            lr, [fp, #-8]
    // 0x93dbb0: stp             lr, x16, [SP, #8]
    // 0x93dbb4: ldur            x16, [fp, #-0x10]
    // 0x93dbb8: str             x16, [SP]
    // 0x93dbbc: r0 = _getPrefixIconColor()
    //     0x93dbbc: bl              #0x93f484  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getPrefixIconColor
    // 0x93dbc0: ldur            d0, [fp, #-0x90]
    // 0x93dbc4: stur            x0, [fp, #-0x68]
    // 0x93dbc8: r1 = inline_Allocate_Double()
    //     0x93dbc8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x93dbcc: add             x1, x1, #0x10
    //     0x93dbd0: cmp             x2, x1
    //     0x93dbd4: b.ls            #0x93e4d8
    //     0x93dbd8: str             x1, [THR, #0x50]  ; THR::top
    //     0x93dbdc: sub             x1, x1, #0xf
    //     0x93dbe0: movz            x2, #0xd148
    //     0x93dbe4: movk            x2, #0x3, lsl #16
    //     0x93dbe8: stur            x2, [x1, #-1]
    // 0x93dbec: StoreField: r1->field_7 = d0
    //     0x93dbec: stur            d0, [x1, #7]
    // 0x93dbf0: stur            x1, [fp, #-0x58]
    // 0x93dbf4: r0 = IconThemeData()
    //     0x93dbf4: bl              #0x920d64  ; AllocateIconThemeDataStub -> IconThemeData (size=0x28)
    // 0x93dbf8: mov             x1, x0
    // 0x93dbfc: ldur            x0, [fp, #-0x58]
    // 0x93dc00: stur            x1, [fp, #-0x70]
    // 0x93dc04: StoreField: r1->field_7 = r0
    //     0x93dc04: stur            w0, [x1, #7]
    // 0x93dc08: ldur            x2, [fp, #-0x68]
    // 0x93dc0c: StoreField: r1->field_1b = r2
    //     0x93dc0c: stur            w2, [x1, #0x1b]
    // 0x93dc10: ldr             x16, [fp, #0x18]
    // 0x93dc14: ldur            lr, [fp, #-8]
    // 0x93dc18: stp             lr, x16, [SP, #8]
    // 0x93dc1c: ldur            x16, [fp, #-0x10]
    // 0x93dc20: str             x16, [SP]
    // 0x93dc24: r0 = _getPrefixIconColor()
    //     0x93dc24: bl              #0x93f484  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getPrefixIconColor
    // 0x93dc28: ldur            x16, [fp, #-0x58]
    // 0x93dc2c: stp             x16, x0, [SP]
    // 0x93dc30: r4 = const [0, 0x2, 0x2, 0x1, iconSize, 0x1, null]
    //     0x93dc30: add             x4, PP, #0x25, lsl #12  ; [pp+0x25a58] List(7) [0, 0x2, 0x2, 0x1, "iconSize", 0x1, Null]
    //     0x93dc34: ldr             x4, [x4, #0xa58]
    // 0x93dc38: r0 = styleFrom()
    //     0x93dc38: bl              #0x92d8e8  ; [package:flutter/src/material/icon_button.dart] IconButton::styleFrom
    // 0x93dc3c: stur            x0, [fp, #-0x58]
    // 0x93dc40: r0 = IconButtonThemeData()
    //     0x93dc40: bl              #0x92d064  ; AllocateIconButtonThemeDataStub -> IconButtonThemeData (size=0xc)
    // 0x93dc44: mov             x1, x0
    // 0x93dc48: ldur            x0, [fp, #-0x58]
    // 0x93dc4c: stur            x1, [fp, #-0x68]
    // 0x93dc50: StoreField: r1->field_7 = r0
    //     0x93dc50: stur            w0, [x1, #7]
    // 0x93dc54: ldr             x16, [fp, #0x18]
    // 0x93dc58: str             x16, [SP]
    // 0x93dc5c: r0 = decoration()
    //     0x93dc5c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dc60: LoadField: r1 = r0->field_5f
    //     0x93dc60: ldur            w1, [x0, #0x5f]
    // 0x93dc64: DecompressPointer r1
    //     0x93dc64: add             x1, x1, HEAP, lsl #32
    // 0x93dc68: stur            x1, [fp, #-0x58]
    // 0x93dc6c: r0 = Semantics()
    //     0x93dc6c: bl              #0x60a9b0  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x93dc70: stur            x0, [fp, #-0x78]
    // 0x93dc74: ldur            x16, [fp, #-0x58]
    // 0x93dc78: stp             x16, x0, [SP]
    // 0x93dc7c: r4 = const [0, 0x2, 0x2, 0x1, child, 0x1, null]
    //     0x93dc7c: add             x4, PP, #0x21, lsl #12  ; [pp+0x21458] List(7) [0, 0x2, 0x2, 0x1, "child", 0x1, Null]
    //     0x93dc80: ldr             x4, [x4, #0x458]
    // 0x93dc84: r0 = Semantics()
    //     0x93dc84: bl              #0x609c34  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x93dc88: r0 = IconButtonTheme()
    //     0x93dc88: bl              #0x92d058  ; AllocateIconButtonThemeStub -> IconButtonTheme (size=0x14)
    // 0x93dc8c: mov             x1, x0
    // 0x93dc90: ldur            x0, [fp, #-0x68]
    // 0x93dc94: StoreField: r1->field_f = r0
    //     0x93dc94: stur            w0, [x1, #0xf]
    // 0x93dc98: ldur            x0, [fp, #-0x78]
    // 0x93dc9c: StoreField: r1->field_b = r0
    //     0x93dc9c: stur            w0, [x1, #0xb]
    // 0x93dca0: ldur            x16, [fp, #-0x70]
    // 0x93dca4: stp             x16, x1, [SP]
    // 0x93dca8: r0 = merge()
    //     0x93dca8: bl              #0x92ce28  ; [package:flutter/src/widgets/icon_theme.dart] IconTheme::merge
    // 0x93dcac: stur            x0, [fp, #-0x58]
    // 0x93dcb0: r0 = ConstrainedBox()
    //     0x93dcb0: bl              #0x66e53c  ; AllocateConstrainedBoxStub -> ConstrainedBox (size=0x14)
    // 0x93dcb4: mov             x1, x0
    // 0x93dcb8: ldur            x0, [fp, #-0x50]
    // 0x93dcbc: stur            x1, [fp, #-0x68]
    // 0x93dcc0: StoreField: r1->field_f = r0
    //     0x93dcc0: stur            w0, [x1, #0xf]
    // 0x93dcc4: ldur            x0, [fp, #-0x58]
    // 0x93dcc8: StoreField: r1->field_b = r0
    //     0x93dcc8: stur            w0, [x1, #0xb]
    // 0x93dccc: r0 = MouseRegion()
    //     0x93dccc: bl              #0x920d58  ; AllocateMouseRegionStub -> MouseRegion (size=0x28)
    // 0x93dcd0: mov             x1, x0
    // 0x93dcd4: r0 = Instance_SystemMouseCursor
    //     0x93dcd4: ldr             x0, [PP, #0x3240]  ; [pp+0x3240] Obj!SystemMouseCursor@c36eb1
    // 0x93dcd8: stur            x1, [fp, #-0x50]
    // 0x93dcdc: StoreField: r1->field_1b = r0
    //     0x93dcdc: stur            w0, [x1, #0x1b]
    // 0x93dce0: r2 = true
    //     0x93dce0: add             x2, NULL, #0x20  ; true
    // 0x93dce4: StoreField: r1->field_1f = r2
    //     0x93dce4: stur            w2, [x1, #0x1f]
    // 0x93dce8: ldur            x3, [fp, #-0x68]
    // 0x93dcec: StoreField: r1->field_b = r3
    //     0x93dcec: stur            w3, [x1, #0xb]
    // 0x93dcf0: r0 = Center()
    //     0x93dcf0: bl              #0x622a8c  ; AllocateCenterStub -> Center (size=0x1c)
    // 0x93dcf4: mov             x1, x0
    // 0x93dcf8: r0 = Instance_Alignment
    //     0x93dcf8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x93dcfc: ldr             x0, [x0, #0x358]
    // 0x93dd00: StoreField: r1->field_f = r0
    //     0x93dd00: stur            w0, [x1, #0xf]
    // 0x93dd04: r2 = 1.000000
    //     0x93dd04: ldr             x2, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x93dd08: StoreField: r1->field_13 = r2
    //     0x93dd08: stur            w2, [x1, #0x13]
    // 0x93dd0c: ArrayStore: r1[0] = r2  ; List_4
    //     0x93dd0c: stur            w2, [x1, #0x17]
    // 0x93dd10: ldur            x3, [fp, #-0x50]
    // 0x93dd14: StoreField: r1->field_b = r3
    //     0x93dd14: stur            w3, [x1, #0xb]
    // 0x93dd18: stur            x1, [fp, #-0x50]
    // 0x93dd1c: ldr             x16, [fp, #0x18]
    // 0x93dd20: str             x16, [SP]
    // 0x93dd24: r0 = decoration()
    //     0x93dd24: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dd28: LoadField: r1 = r0->field_77
    //     0x93dd28: ldur            w1, [x0, #0x77]
    // 0x93dd2c: DecompressPointer r1
    //     0x93dd2c: add             x1, x1, HEAP, lsl #32
    // 0x93dd30: cmp             w1, NULL
    // 0x93dd34: b.ne            #0x93dd40
    // 0x93dd38: r0 = Null
    //     0x93dd38: mov             x0, NULL
    // 0x93dd3c: b               #0x93dee8
    // 0x93dd40: ldur            x0, [fp, #-8]
    // 0x93dd44: ldur            d0, [fp, #-0x90]
    // 0x93dd48: ldr             x16, [fp, #0x18]
    // 0x93dd4c: str             x16, [SP]
    // 0x93dd50: r0 = decoration()
    //     0x93dd50: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dd54: ldur            x0, [fp, #-8]
    // 0x93dd58: LoadField: r1 = r0->field_2f
    //     0x93dd58: ldur            w1, [x0, #0x2f]
    // 0x93dd5c: DecompressPointer r1
    //     0x93dd5c: add             x1, x1, HEAP, lsl #32
    // 0x93dd60: r16 = Instance_BoxConstraints
    //     0x93dd60: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1f498] Obj!BoxConstraints@c2d371
    //     0x93dd64: ldr             x16, [x16, #0x498]
    // 0x93dd68: stp             x16, x1, [SP]
    // 0x93dd6c: r0 = effectiveConstraints()
    //     0x93dd6c: bl              #0x930f34  ; [package:flutter/src/material/theme_data.dart] VisualDensity::effectiveConstraints
    // 0x93dd70: stur            x0, [fp, #-0x58]
    // 0x93dd74: ldr             x16, [fp, #0x18]
    // 0x93dd78: ldur            lr, [fp, #-8]
    // 0x93dd7c: stp             lr, x16, [SP, #8]
    // 0x93dd80: ldur            x16, [fp, #-0x10]
    // 0x93dd84: str             x16, [SP]
    // 0x93dd88: r0 = _getSuffixIconColor()
    //     0x93dd88: bl              #0x93ef28  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getSuffixIconColor
    // 0x93dd8c: ldur            d0, [fp, #-0x90]
    // 0x93dd90: stur            x0, [fp, #-0x70]
    // 0x93dd94: r1 = inline_Allocate_Double()
    //     0x93dd94: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x93dd98: add             x1, x1, #0x10
    //     0x93dd9c: cmp             x2, x1
    //     0x93dda0: b.ls            #0x93e4f4
    //     0x93dda4: str             x1, [THR, #0x50]  ; THR::top
    //     0x93dda8: sub             x1, x1, #0xf
    //     0x93ddac: movz            x2, #0xd148
    //     0x93ddb0: movk            x2, #0x3, lsl #16
    //     0x93ddb4: stur            x2, [x1, #-1]
    // 0x93ddb8: StoreField: r1->field_7 = d0
    //     0x93ddb8: stur            d0, [x1, #7]
    // 0x93ddbc: stur            x1, [fp, #-0x68]
    // 0x93ddc0: r0 = IconThemeData()
    //     0x93ddc0: bl              #0x920d64  ; AllocateIconThemeDataStub -> IconThemeData (size=0x28)
    // 0x93ddc4: mov             x1, x0
    // 0x93ddc8: ldur            x0, [fp, #-0x68]
    // 0x93ddcc: stur            x1, [fp, #-0x78]
    // 0x93ddd0: StoreField: r1->field_7 = r0
    //     0x93ddd0: stur            w0, [x1, #7]
    // 0x93ddd4: ldur            x2, [fp, #-0x70]
    // 0x93ddd8: StoreField: r1->field_1b = r2
    //     0x93ddd8: stur            w2, [x1, #0x1b]
    // 0x93dddc: ldr             x16, [fp, #0x18]
    // 0x93dde0: ldur            lr, [fp, #-8]
    // 0x93dde4: stp             lr, x16, [SP, #8]
    // 0x93dde8: ldur            x16, [fp, #-0x10]
    // 0x93ddec: str             x16, [SP]
    // 0x93ddf0: r0 = _getSuffixIconColor()
    //     0x93ddf0: bl              #0x93ef28  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getSuffixIconColor
    // 0x93ddf4: ldur            x16, [fp, #-0x68]
    // 0x93ddf8: stp             x16, x0, [SP]
    // 0x93ddfc: r4 = const [0, 0x2, 0x2, 0x1, iconSize, 0x1, null]
    //     0x93ddfc: add             x4, PP, #0x25, lsl #12  ; [pp+0x25a58] List(7) [0, 0x2, 0x2, 0x1, "iconSize", 0x1, Null]
    //     0x93de00: ldr             x4, [x4, #0xa58]
    // 0x93de04: r0 = styleFrom()
    //     0x93de04: bl              #0x92d8e8  ; [package:flutter/src/material/icon_button.dart] IconButton::styleFrom
    // 0x93de08: stur            x0, [fp, #-0x68]
    // 0x93de0c: r0 = IconButtonThemeData()
    //     0x93de0c: bl              #0x92d064  ; AllocateIconButtonThemeDataStub -> IconButtonThemeData (size=0xc)
    // 0x93de10: mov             x1, x0
    // 0x93de14: ldur            x0, [fp, #-0x68]
    // 0x93de18: stur            x1, [fp, #-0x70]
    // 0x93de1c: StoreField: r1->field_7 = r0
    //     0x93de1c: stur            w0, [x1, #7]
    // 0x93de20: ldr             x16, [fp, #0x18]
    // 0x93de24: str             x16, [SP]
    // 0x93de28: r0 = decoration()
    //     0x93de28: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93de2c: LoadField: r1 = r0->field_77
    //     0x93de2c: ldur            w1, [x0, #0x77]
    // 0x93de30: DecompressPointer r1
    //     0x93de30: add             x1, x1, HEAP, lsl #32
    // 0x93de34: stur            x1, [fp, #-0x68]
    // 0x93de38: r0 = Semantics()
    //     0x93de38: bl              #0x60a9b0  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x93de3c: stur            x0, [fp, #-0x80]
    // 0x93de40: ldur            x16, [fp, #-0x68]
    // 0x93de44: stp             x16, x0, [SP]
    // 0x93de48: r4 = const [0, 0x2, 0x2, 0x1, child, 0x1, null]
    //     0x93de48: add             x4, PP, #0x21, lsl #12  ; [pp+0x21458] List(7) [0, 0x2, 0x2, 0x1, "child", 0x1, Null]
    //     0x93de4c: ldr             x4, [x4, #0x458]
    // 0x93de50: r0 = Semantics()
    //     0x93de50: bl              #0x609c34  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x93de54: r0 = IconButtonTheme()
    //     0x93de54: bl              #0x92d058  ; AllocateIconButtonThemeStub -> IconButtonTheme (size=0x14)
    // 0x93de58: mov             x1, x0
    // 0x93de5c: ldur            x0, [fp, #-0x70]
    // 0x93de60: StoreField: r1->field_f = r0
    //     0x93de60: stur            w0, [x1, #0xf]
    // 0x93de64: ldur            x0, [fp, #-0x80]
    // 0x93de68: StoreField: r1->field_b = r0
    //     0x93de68: stur            w0, [x1, #0xb]
    // 0x93de6c: ldur            x16, [fp, #-0x78]
    // 0x93de70: stp             x16, x1, [SP]
    // 0x93de74: r0 = merge()
    //     0x93de74: bl              #0x92ce28  ; [package:flutter/src/widgets/icon_theme.dart] IconTheme::merge
    // 0x93de78: stur            x0, [fp, #-0x68]
    // 0x93de7c: r0 = ConstrainedBox()
    //     0x93de7c: bl              #0x66e53c  ; AllocateConstrainedBoxStub -> ConstrainedBox (size=0x14)
    // 0x93de80: mov             x1, x0
    // 0x93de84: ldur            x0, [fp, #-0x58]
    // 0x93de88: stur            x1, [fp, #-0x70]
    // 0x93de8c: StoreField: r1->field_f = r0
    //     0x93de8c: stur            w0, [x1, #0xf]
    // 0x93de90: ldur            x0, [fp, #-0x68]
    // 0x93de94: StoreField: r1->field_b = r0
    //     0x93de94: stur            w0, [x1, #0xb]
    // 0x93de98: r0 = MouseRegion()
    //     0x93de98: bl              #0x920d58  ; AllocateMouseRegionStub -> MouseRegion (size=0x28)
    // 0x93de9c: mov             x1, x0
    // 0x93dea0: r0 = Instance_SystemMouseCursor
    //     0x93dea0: ldr             x0, [PP, #0x3240]  ; [pp+0x3240] Obj!SystemMouseCursor@c36eb1
    // 0x93dea4: stur            x1, [fp, #-0x58]
    // 0x93dea8: StoreField: r1->field_1b = r0
    //     0x93dea8: stur            w0, [x1, #0x1b]
    // 0x93deac: r0 = true
    //     0x93deac: add             x0, NULL, #0x20  ; true
    // 0x93deb0: StoreField: r1->field_1f = r0
    //     0x93deb0: stur            w0, [x1, #0x1f]
    // 0x93deb4: ldur            x0, [fp, #-0x70]
    // 0x93deb8: StoreField: r1->field_b = r0
    //     0x93deb8: stur            w0, [x1, #0xb]
    // 0x93debc: r0 = Center()
    //     0x93debc: bl              #0x622a8c  ; AllocateCenterStub -> Center (size=0x1c)
    // 0x93dec0: mov             x1, x0
    // 0x93dec4: r0 = Instance_Alignment
    //     0x93dec4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x93dec8: ldr             x0, [x0, #0x358]
    // 0x93decc: StoreField: r1->field_f = r0
    //     0x93decc: stur            w0, [x1, #0xf]
    // 0x93ded0: r0 = 1.000000
    //     0x93ded0: ldr             x0, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x93ded4: StoreField: r1->field_13 = r0
    //     0x93ded4: stur            w0, [x1, #0x13]
    // 0x93ded8: ArrayStore: r1[0] = r0  ; List_4
    //     0x93ded8: stur            w0, [x1, #0x17]
    // 0x93dedc: ldur            x0, [fp, #-0x58]
    // 0x93dee0: StoreField: r1->field_b = r0
    //     0x93dee0: stur            w0, [x1, #0xb]
    // 0x93dee4: mov             x0, x1
    // 0x93dee8: stur            x0, [fp, #-0x58]
    // 0x93deec: ldr             x16, [fp, #0x18]
    // 0x93def0: str             x16, [SP]
    // 0x93def4: r0 = textAlign()
    //     0x93def4: bl              #0x93eef4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::textAlign
    // 0x93def8: stur            x0, [fp, #-0x68]
    // 0x93defc: ldr             x16, [fp, #0x18]
    // 0x93df00: str             x16, [SP]
    // 0x93df04: r0 = decoration()
    //     0x93df04: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93df08: ldr             x16, [fp, #0x18]
    // 0x93df0c: ldur            lr, [fp, #-0x10]
    // 0x93df10: stp             lr, x16, [SP]
    // 0x93df14: r0 = _getHelperStyle()
    //     0x93df14: bl              #0x93eb40  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getHelperStyle
    // 0x93df18: stur            x0, [fp, #-0x70]
    // 0x93df1c: ldr             x16, [fp, #0x18]
    // 0x93df20: str             x16, [SP]
    // 0x93df24: r0 = decoration()
    //     0x93df24: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93df28: ldr             x16, [fp, #0x18]
    // 0x93df2c: str             x16, [SP]
    // 0x93df30: r0 = decoration()
    //     0x93df30: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93df34: ldr             x16, [fp, #0x18]
    // 0x93df38: str             x16, [SP]
    // 0x93df3c: r0 = decoration()
    //     0x93df3c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93df40: LoadField: r1 = r0->field_3f
    //     0x93df40: ldur            w1, [x0, #0x3f]
    // 0x93df44: DecompressPointer r1
    //     0x93df44: add             x1, x1, HEAP, lsl #32
    // 0x93df48: stur            x1, [fp, #-0x78]
    // 0x93df4c: ldr             x16, [fp, #0x18]
    // 0x93df50: ldur            lr, [fp, #-0x10]
    // 0x93df54: stp             lr, x16, [SP]
    // 0x93df58: r0 = _getErrorStyle()
    //     0x93df58: bl              #0x93e78c  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getErrorStyle
    // 0x93df5c: stur            x0, [fp, #-0x80]
    // 0x93df60: ldr             x16, [fp, #0x18]
    // 0x93df64: str             x16, [SP]
    // 0x93df68: r0 = decoration()
    //     0x93df68: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93df6c: r0 = _HelperError()
    //     0x93df6c: bl              #0x93e780  ; Allocate_HelperErrorStub -> _HelperError (size=0x2c)
    // 0x93df70: mov             x1, x0
    // 0x93df74: ldur            x0, [fp, #-0x68]
    // 0x93df78: stur            x1, [fp, #-0x88]
    // 0x93df7c: StoreField: r1->field_b = r0
    //     0x93df7c: stur            w0, [x1, #0xb]
    // 0x93df80: ldur            x0, [fp, #-0x70]
    // 0x93df84: StoreField: r1->field_13 = r0
    //     0x93df84: stur            w0, [x1, #0x13]
    // 0x93df88: ldur            x0, [fp, #-0x78]
    // 0x93df8c: StoreField: r1->field_1f = r0
    //     0x93df8c: stur            w0, [x1, #0x1f]
    // 0x93df90: ldur            x0, [fp, #-0x80]
    // 0x93df94: StoreField: r1->field_23 = r0
    //     0x93df94: stur            w0, [x1, #0x23]
    // 0x93df98: ldr             x16, [fp, #0x18]
    // 0x93df9c: str             x16, [SP]
    // 0x93dfa0: r0 = decoration()
    //     0x93dfa0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dfa4: LoadField: r1 = r0->field_93
    //     0x93dfa4: ldur            w1, [x0, #0x93]
    // 0x93dfa8: DecompressPointer r1
    //     0x93dfa8: add             x1, x1, HEAP, lsl #32
    // 0x93dfac: cmp             w1, NULL
    // 0x93dfb0: b.eq            #0x93dfd0
    // 0x93dfb4: ldr             x16, [fp, #0x18]
    // 0x93dfb8: str             x16, [SP]
    // 0x93dfbc: r0 = decoration()
    //     0x93dfbc: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dfc0: LoadField: r1 = r0->field_93
    //     0x93dfc0: ldur            w1, [x0, #0x93]
    // 0x93dfc4: DecompressPointer r1
    //     0x93dfc4: add             x1, x1, HEAP, lsl #32
    // 0x93dfc8: mov             x0, x1
    // 0x93dfcc: b               #0x93e13c
    // 0x93dfd0: ldr             x16, [fp, #0x18]
    // 0x93dfd4: str             x16, [SP]
    // 0x93dfd8: r0 = decoration()
    //     0x93dfd8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dfdc: LoadField: r1 = r0->field_8f
    //     0x93dfdc: ldur            w1, [x0, #0x8f]
    // 0x93dfe0: DecompressPointer r1
    //     0x93dfe0: add             x1, x1, HEAP, lsl #32
    // 0x93dfe4: cmp             w1, NULL
    // 0x93dfe8: b.eq            #0x93e138
    // 0x93dfec: ldr             x16, [fp, #0x18]
    // 0x93dff0: str             x16, [SP]
    // 0x93dff4: r0 = decoration()
    //     0x93dff4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93dff8: LoadField: r1 = r0->field_8f
    //     0x93dff8: ldur            w1, [x0, #0x8f]
    // 0x93dffc: DecompressPointer r1
    //     0x93dffc: add             x1, x1, HEAP, lsl #32
    // 0x93e000: r0 = LoadClassIdInstr(r1)
    //     0x93e000: ldur            x0, [x1, #-1]
    //     0x93e004: ubfx            x0, x0, #0xc, #0x14
    // 0x93e008: r16 = ""
    //     0x93e008: ldr             x16, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0x93e00c: stp             x16, x1, [SP]
    // 0x93e010: mov             lr, x0
    // 0x93e014: ldr             lr, [x21, lr, lsl #3]
    // 0x93e018: blr             lr
    // 0x93e01c: tbz             w0, #4, #0x93e138
    // 0x93e020: ldr             x0, [fp, #0x18]
    // 0x93e024: LoadField: r1 = r0->field_b
    //     0x93e024: ldur            w1, [x0, #0xb]
    // 0x93e028: DecompressPointer r1
    //     0x93e028: add             x1, x1, HEAP, lsl #32
    // 0x93e02c: cmp             w1, NULL
    // 0x93e030: b.eq            #0x93e510
    // 0x93e034: LoadField: r2 = r1->field_1b
    //     0x93e034: ldur            w2, [x1, #0x1b]
    // 0x93e038: DecompressPointer r2
    //     0x93e038: add             x2, x2, HEAP, lsl #32
    // 0x93e03c: stur            x2, [fp, #-0x68]
    // 0x93e040: str             x0, [SP]
    // 0x93e044: r0 = decoration()
    //     0x93e044: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e048: LoadField: r1 = r0->field_8f
    //     0x93e048: ldur            w1, [x0, #0x8f]
    // 0x93e04c: DecompressPointer r1
    //     0x93e04c: add             x1, x1, HEAP, lsl #32
    // 0x93e050: stur            x1, [fp, #-0x70]
    // 0x93e054: cmp             w1, NULL
    // 0x93e058: b.eq            #0x93e514
    // 0x93e05c: ldr             x16, [fp, #0x18]
    // 0x93e060: ldur            lr, [fp, #-0x10]
    // 0x93e064: stp             lr, x16, [SP]
    // 0x93e068: r0 = _getHelperStyle()
    //     0x93e068: bl              #0x93eb40  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getHelperStyle
    // 0x93e06c: stur            x0, [fp, #-0x10]
    // 0x93e070: ldr             x16, [fp, #0x18]
    // 0x93e074: str             x16, [SP]
    // 0x93e078: r0 = decoration()
    //     0x93e078: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e07c: LoadField: r1 = r0->field_97
    //     0x93e07c: ldur            w1, [x0, #0x97]
    // 0x93e080: DecompressPointer r1
    //     0x93e080: add             x1, x1, HEAP, lsl #32
    // 0x93e084: stur            x1, [fp, #-0x78]
    // 0x93e088: ldr             x16, [fp, #0x18]
    // 0x93e08c: str             x16, [SP]
    // 0x93e090: r0 = materialState()
    //     0x93e090: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93e094: r16 = <TextStyle?>
    //     0x93e094: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x93e098: ldr             x16, [x16, #0x508]
    // 0x93e09c: ldur            lr, [fp, #-0x78]
    // 0x93e0a0: stp             lr, x16, [SP, #8]
    // 0x93e0a4: str             x0, [SP]
    // 0x93e0a8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93e0a8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93e0ac: r0 = resolveAs()
    //     0x93e0ac: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93e0b0: ldur            x16, [fp, #-0x10]
    // 0x93e0b4: stp             x0, x16, [SP]
    // 0x93e0b8: r0 = merge()
    //     0x93e0b8: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x93e0bc: stur            x0, [fp, #-0x10]
    // 0x93e0c0: ldr             x16, [fp, #0x18]
    // 0x93e0c4: str             x16, [SP]
    // 0x93e0c8: r0 = decoration()
    //     0x93e0c8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e0cc: LoadField: r1 = r0->field_c7
    //     0x93e0cc: ldur            w1, [x0, #0xc7]
    // 0x93e0d0: DecompressPointer r1
    //     0x93e0d0: add             x1, x1, HEAP, lsl #32
    // 0x93e0d4: stur            x1, [fp, #-0x78]
    // 0x93e0d8: r0 = Text()
    //     0x93e0d8: bl              #0x6225d8  ; AllocateTextStub -> Text (size=0x48)
    // 0x93e0dc: mov             x1, x0
    // 0x93e0e0: ldur            x0, [fp, #-0x70]
    // 0x93e0e4: stur            x1, [fp, #-0x80]
    // 0x93e0e8: StoreField: r1->field_b = r0
    //     0x93e0e8: stur            w0, [x1, #0xb]
    // 0x93e0ec: ldur            x0, [fp, #-0x10]
    // 0x93e0f0: StoreField: r1->field_13 = r0
    //     0x93e0f0: stur            w0, [x1, #0x13]
    // 0x93e0f4: r0 = Instance_TextOverflow
    //     0x93e0f4: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] Obj!TextOverflow@c43e51
    //     0x93e0f8: ldr             x0, [x0, #0x350]
    // 0x93e0fc: StoreField: r1->field_2b = r0
    //     0x93e0fc: stur            w0, [x1, #0x2b]
    // 0x93e100: ldur            x0, [fp, #-0x78]
    // 0x93e104: StoreField: r1->field_37 = r0
    //     0x93e104: stur            w0, [x1, #0x37]
    // 0x93e108: r0 = Semantics()
    //     0x93e108: bl              #0x60a9b0  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x93e10c: stur            x0, [fp, #-0x10]
    // 0x93e110: r16 = true
    //     0x93e110: add             x16, NULL, #0x20  ; true
    // 0x93e114: stp             x16, x0, [SP, #0x10]
    // 0x93e118: ldur            x16, [fp, #-0x68]
    // 0x93e11c: ldur            lr, [fp, #-0x80]
    // 0x93e120: stp             lr, x16, [SP]
    // 0x93e124: r4 = const [0, 0x4, 0x4, 0x1, child, 0x3, container, 0x1, liveRegion, 0x2, null]
    //     0x93e124: add             x4, PP, #0x41, lsl #12  ; [pp+0x41980] List(11) [0, 0x4, 0x4, 0x1, "child", 0x3, "container", 0x1, "liveRegion", 0x2, Null]
    //     0x93e128: ldr             x4, [x4, #0x980]
    // 0x93e12c: r0 = Semantics()
    //     0x93e12c: bl              #0x609c34  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x93e130: ldur            x0, [fp, #-0x10]
    // 0x93e134: b               #0x93e13c
    // 0x93e138: r0 = Null
    //     0x93e138: mov             x0, NULL
    // 0x93e13c: stur            x0, [fp, #-0x10]
    // 0x93e140: ldr             x16, [fp, #0x10]
    // 0x93e144: str             x16, [SP]
    // 0x93e148: r0 = of()
    //     0x93e148: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x93e14c: stur            x0, [fp, #-0x68]
    // 0x93e150: ldr             x16, [fp, #0x18]
    // 0x93e154: str             x16, [SP]
    // 0x93e158: r0 = decoration()
    //     0x93e158: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e15c: LoadField: r1 = r0->field_57
    //     0x93e15c: ldur            w1, [x0, #0x57]
    // 0x93e160: DecompressPointer r1
    //     0x93e160: add             x1, x1, HEAP, lsl #32
    // 0x93e164: cmp             w1, NULL
    // 0x93e168: b.ne            #0x93e174
    // 0x93e16c: r0 = Null
    //     0x93e16c: mov             x0, NULL
    // 0x93e170: b               #0x93e178
    // 0x93e174: mov             x0, x1
    // 0x93e178: stur            x0, [fp, #-0x70]
    // 0x93e17c: ldr             x16, [fp, #0x18]
    // 0x93e180: str             x16, [SP]
    // 0x93e184: r0 = decoration()
    //     0x93e184: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e188: LoadField: r1 = r0->field_5b
    //     0x93e188: ldur            w1, [x0, #0x5b]
    // 0x93e18c: DecompressPointer r1
    //     0x93e18c: add             x1, x1, HEAP, lsl #32
    // 0x93e190: tbnz            w1, #4, #0x93e1b0
    // 0x93e194: ldur            x0, [fp, #-0x70]
    // 0x93e198: cmp             w0, NULL
    // 0x93e19c: b.ne            #0x93e1a4
    // 0x93e1a0: r0 = Instance_EdgeInsets
    //     0x93e1a0: ldr             x0, [PP, #0x6158]  ; [pp+0x6158] Obj!EdgeInsets@c2dad1
    // 0x93e1a4: mov             x13, x0
    // 0x93e1a8: d0 = 0.000000
    //     0x93e1a8: eor             v0.16b, v0.16b, v0.16b
    // 0x93e1ac: b               #0x93e2d0
    // 0x93e1b0: ldur            x1, [fp, #-0x40]
    // 0x93e1b4: ldur            x0, [fp, #-0x70]
    // 0x93e1b8: r2 = LoadClassIdInstr(r1)
    //     0x93e1b8: ldur            x2, [x1, #-1]
    //     0x93e1bc: ubfx            x2, x2, #0xc, #0x14
    // 0x93e1c0: lsl             x2, x2, #1
    // 0x93e1c4: r17 = 4692
    //     0x93e1c4: movz            x17, #0x1254
    // 0x93e1c8: cmp             w2, w17
    // 0x93e1cc: b.ne            #0x93e1fc
    // 0x93e1d0: cmp             w0, NULL
    // 0x93e1d4: b.ne            #0x93e1f4
    // 0x93e1d8: ldur            x2, [fp, #-0x48]
    // 0x93e1dc: tbnz            w2, #4, #0x93e1ec
    // 0x93e1e0: r0 = Instance_EdgeInsets
    //     0x93e1e0: add             x0, PP, #0x41, lsl #12  ; [pp+0x41988] Obj!EdgeInsets@c2e161
    //     0x93e1e4: ldr             x0, [x0, #0x988]
    // 0x93e1e8: b               #0x93e1f4
    // 0x93e1ec: r0 = Instance_EdgeInsets
    //     0x93e1ec: add             x0, PP, #0x41, lsl #12  ; [pp+0x41990] Obj!EdgeInsets@c2e131
    //     0x93e1f0: ldr             x0, [x0, #0x990]
    // 0x93e1f4: d0 = 0.000000
    //     0x93e1f4: eor             v0.16b, v0.16b, v0.16b
    // 0x93e1f8: b               #0x93e2cc
    // 0x93e1fc: ldur            x3, [fp, #-0x20]
    // 0x93e200: ldur            x2, [fp, #-0x48]
    // 0x93e204: d1 = 0.750000
    //     0x93e204: fmov            d1, #0.75000000
    // 0x93e208: d0 = 4.000000
    //     0x93e208: fmov            d0, #4.00000000
    // 0x93e20c: LoadField: r4 = r3->field_1f
    //     0x93e20c: ldur            w4, [x3, #0x1f]
    // 0x93e210: DecompressPointer r4
    //     0x93e210: add             x4, x4, HEAP, lsl #32
    // 0x93e214: cmp             w4, NULL
    // 0x93e218: b.eq            #0x93e518
    // 0x93e21c: LoadField: d2 = r4->field_7
    //     0x93e21c: ldur            d2, [x4, #7]
    // 0x93e220: fmul            d3, d1, d2
    // 0x93e224: fadd            d1, d0, d3
    // 0x93e228: stur            d1, [fp, #-0x90]
    // 0x93e22c: ldr             x16, [fp, #0x10]
    // 0x93e230: str             x16, [SP]
    // 0x93e234: r0 = textScaleFactorOf()
    //     0x93e234: bl              #0x93e540  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::textScaleFactorOf
    // 0x93e238: mov             v1.16b, v0.16b
    // 0x93e23c: ldur            d0, [fp, #-0x90]
    // 0x93e240: fmul            d2, d0, d1
    // 0x93e244: stur            d2, [fp, #-0x98]
    // 0x93e248: ldr             x16, [fp, #0x18]
    // 0x93e24c: str             x16, [SP]
    // 0x93e250: r0 = decoration()
    //     0x93e250: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e254: LoadField: r1 = r0->field_9b
    //     0x93e254: ldur            w1, [x0, #0x9b]
    // 0x93e258: DecompressPointer r1
    //     0x93e258: add             x1, x1, HEAP, lsl #32
    // 0x93e25c: cmp             w1, NULL
    // 0x93e260: b.ne            #0x93e270
    // 0x93e264: ldur            x1, [fp, #-0x48]
    // 0x93e268: ldur            x0, [fp, #-0x70]
    // 0x93e26c: b               #0x93e2a8
    // 0x93e270: tbnz            w1, #4, #0x93e2a0
    // 0x93e274: ldur            x0, [fp, #-0x70]
    // 0x93e278: cmp             w0, NULL
    // 0x93e27c: b.ne            #0x93e2c8
    // 0x93e280: ldur            x1, [fp, #-0x48]
    // 0x93e284: tbnz            w1, #4, #0x93e294
    // 0x93e288: r0 = Instance_EdgeInsets
    //     0x93e288: add             x0, PP, #0x39, lsl #12  ; [pp+0x39f88] Obj!EdgeInsets@c2e191
    //     0x93e28c: ldr             x0, [x0, #0xf88]
    // 0x93e290: b               #0x93e2c8
    // 0x93e294: r0 = Instance_EdgeInsets
    //     0x93e294: add             x0, PP, #0x41, lsl #12  ; [pp+0x41998] Obj!EdgeInsets@c2e101
    //     0x93e298: ldr             x0, [x0, #0x998]
    // 0x93e29c: b               #0x93e2c8
    // 0x93e2a0: ldur            x1, [fp, #-0x48]
    // 0x93e2a4: ldur            x0, [fp, #-0x70]
    // 0x93e2a8: cmp             w0, NULL
    // 0x93e2ac: b.ne            #0x93e2c8
    // 0x93e2b0: tbnz            w1, #4, #0x93e2c0
    // 0x93e2b4: r0 = Instance_EdgeInsets
    //     0x93e2b4: add             x0, PP, #0x12, lsl #12  ; [pp+0x12850] Obj!EdgeInsets@c2dd71
    //     0x93e2b8: ldr             x0, [x0, #0x850]
    // 0x93e2bc: b               #0x93e2c8
    // 0x93e2c0: r0 = Instance_EdgeInsets
    //     0x93e2c0: add             x0, PP, #0x41, lsl #12  ; [pp+0x419a0] Obj!EdgeInsets@c2e0d1
    //     0x93e2c4: ldr             x0, [x0, #0x9a0]
    // 0x93e2c8: ldur            d0, [fp, #-0x98]
    // 0x93e2cc: mov             x13, x0
    // 0x93e2d0: ldr             x3, [fp, #0x18]
    // 0x93e2d4: ldur            x6, [fp, #-8]
    // 0x93e2d8: ldur            x12, [fp, #-0x18]
    // 0x93e2dc: ldur            x11, [fp, #-0x28]
    // 0x93e2e0: ldur            x0, [fp, #-0x40]
    // 0x93e2e4: ldur            x10, [fp, #-0x38]
    // 0x93e2e8: ldur            x9, [fp, #-0x60]
    // 0x93e2ec: ldur            x8, [fp, #-0x30]
    // 0x93e2f0: ldur            x7, [fp, #-0x50]
    // 0x93e2f4: ldur            x5, [fp, #-0x58]
    // 0x93e2f8: ldur            x4, [fp, #-0x88]
    // 0x93e2fc: ldur            x2, [fp, #-0x10]
    // 0x93e300: ldur            x1, [fp, #-0x68]
    // 0x93e304: stur            x13, [fp, #-0x20]
    // 0x93e308: stur            d0, [fp, #-0x90]
    // 0x93e30c: str             x3, [SP]
    // 0x93e310: r0 = decoration()
    //     0x93e310: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e314: LoadField: r1 = r0->field_5b
    //     0x93e314: ldur            w1, [x0, #0x5b]
    // 0x93e318: DecompressPointer r1
    //     0x93e318: add             x1, x1, HEAP, lsl #32
    // 0x93e31c: stur            x1, [fp, #-0x48]
    // 0x93e320: ldr             x16, [fp, #0x18]
    // 0x93e324: str             x16, [SP]
    // 0x93e328: r0 = decoration()
    //     0x93e328: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e32c: LoadField: r1 = r0->field_4f
    //     0x93e32c: ldur            w1, [x0, #0x4f]
    // 0x93e330: DecompressPointer r1
    //     0x93e330: add             x1, x1, HEAP, lsl #32
    // 0x93e334: cmp             w1, NULL
    // 0x93e338: b.eq            #0x93e51c
    // 0x93e33c: ldr             x0, [fp, #0x18]
    // 0x93e340: LoadField: r1 = r0->field_1f
    //     0x93e340: ldur            w1, [x0, #0x1f]
    // 0x93e344: DecompressPointer r1
    //     0x93e344: add             x1, x1, HEAP, lsl #32
    // 0x93e348: str             x1, [SP]
    // 0x93e34c: r0 = value()
    //     0x93e34c: bl              #0xba0bf4  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::value
    // 0x93e350: stur            x0, [fp, #-0x70]
    // 0x93e354: ldr             x16, [fp, #0x18]
    // 0x93e358: str             x16, [SP]
    // 0x93e35c: r0 = decoration()
    //     0x93e35c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e360: ldr             x16, [fp, #0x18]
    // 0x93e364: str             x16, [SP]
    // 0x93e368: r0 = decoration()
    //     0x93e368: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e36c: LoadField: r1 = r0->field_53
    //     0x93e36c: ldur            w1, [x0, #0x53]
    // 0x93e370: DecompressPointer r1
    //     0x93e370: add             x1, x1, HEAP, lsl #32
    // 0x93e374: ldur            x0, [fp, #-8]
    // 0x93e378: stur            x1, [fp, #-0x80]
    // 0x93e37c: LoadField: r2 = r0->field_2f
    //     0x93e37c: ldur            w2, [x0, #0x2f]
    // 0x93e380: DecompressPointer r2
    //     0x93e380: add             x2, x2, HEAP, lsl #32
    // 0x93e384: stur            x2, [fp, #-0x78]
    // 0x93e388: r0 = _Decoration()
    //     0x93e388: bl              #0x93e534  ; Allocate_DecorationStub -> _Decoration (size=0x64)
    // 0x93e38c: mov             x1, x0
    // 0x93e390: ldur            x0, [fp, #-0x20]
    // 0x93e394: stur            x1, [fp, #-8]
    // 0x93e398: StoreField: r1->field_7 = r0
    //     0x93e398: stur            w0, [x1, #7]
    // 0x93e39c: ldur            x0, [fp, #-0x48]
    // 0x93e3a0: StoreField: r1->field_b = r0
    //     0x93e3a0: stur            w0, [x1, #0xb]
    // 0x93e3a4: ldur            d0, [fp, #-0x90]
    // 0x93e3a8: StoreField: r1->field_f = d0
    //     0x93e3a8: stur            d0, [x1, #0xf]
    // 0x93e3ac: ldur            x0, [fp, #-0x70]
    // 0x93e3b0: LoadField: d0 = r0->field_7
    //     0x93e3b0: ldur            d0, [x0, #7]
    // 0x93e3b4: ArrayStore: r1[0] = d0  ; List_8
    //     0x93e3b4: stur            d0, [x1, #0x17]
    // 0x93e3b8: r0 = Instance_FloatingLabelAlignment
    //     0x93e3b8: add             x0, PP, #0xf, lsl #12  ; [pp+0xf6a0] Obj!FloatingLabelAlignment@c2f8f1
    //     0x93e3bc: ldr             x0, [x0, #0x6a0]
    // 0x93e3c0: StoreField: r1->field_1f = r0
    //     0x93e3c0: stur            w0, [x1, #0x1f]
    // 0x93e3c4: ldur            x0, [fp, #-0x40]
    // 0x93e3c8: StoreField: r1->field_23 = r0
    //     0x93e3c8: stur            w0, [x1, #0x23]
    // 0x93e3cc: ldur            x0, [fp, #-0x38]
    // 0x93e3d0: StoreField: r1->field_27 = r0
    //     0x93e3d0: stur            w0, [x1, #0x27]
    // 0x93e3d4: r0 = false
    //     0x93e3d4: add             x0, NULL, #0x30  ; false
    // 0x93e3d8: StoreField: r1->field_2b = r0
    //     0x93e3d8: stur            w0, [x1, #0x2b]
    // 0x93e3dc: ldur            x2, [fp, #-0x80]
    // 0x93e3e0: StoreField: r1->field_2f = r2
    //     0x93e3e0: stur            w2, [x1, #0x2f]
    // 0x93e3e4: ldur            x2, [fp, #-0x78]
    // 0x93e3e8: StoreField: r1->field_33 = r2
    //     0x93e3e8: stur            w2, [x1, #0x33]
    // 0x93e3ec: ldur            x2, [fp, #-0x30]
    // 0x93e3f0: StoreField: r1->field_3b = r2
    //     0x93e3f0: stur            w2, [x1, #0x3b]
    // 0x93e3f4: ldur            x2, [fp, #-0x28]
    // 0x93e3f8: StoreField: r1->field_43 = r2
    //     0x93e3f8: stur            w2, [x1, #0x43]
    // 0x93e3fc: ldur            x2, [fp, #-0x50]
    // 0x93e400: StoreField: r1->field_4f = r2
    //     0x93e400: stur            w2, [x1, #0x4f]
    // 0x93e404: ldur            x2, [fp, #-0x58]
    // 0x93e408: StoreField: r1->field_53 = r2
    //     0x93e408: stur            w2, [x1, #0x53]
    // 0x93e40c: ldur            x2, [fp, #-0x88]
    // 0x93e410: StoreField: r1->field_57 = r2
    //     0x93e410: stur            w2, [x1, #0x57]
    // 0x93e414: ldur            x2, [fp, #-0x10]
    // 0x93e418: StoreField: r1->field_5b = r2
    //     0x93e418: stur            w2, [x1, #0x5b]
    // 0x93e41c: ldur            x2, [fp, #-0x60]
    // 0x93e420: StoreField: r1->field_5f = r2
    //     0x93e420: stur            w2, [x1, #0x5f]
    // 0x93e424: ldr             x2, [fp, #0x18]
    // 0x93e428: LoadField: r3 = r2->field_b
    //     0x93e428: ldur            w3, [x2, #0xb]
    // 0x93e42c: DecompressPointer r3
    //     0x93e42c: add             x3, x3, HEAP, lsl #32
    // 0x93e430: cmp             w3, NULL
    // 0x93e434: b.eq            #0x93e520
    // 0x93e438: str             x2, [SP]
    // 0x93e43c: r0 = isFocused()
    //     0x93e43c: bl              #0x87faa4  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isFocused
    // 0x93e440: mov             x2, x0
    // 0x93e444: ldr             x0, [fp, #0x18]
    // 0x93e448: stur            x2, [fp, #-0x10]
    // 0x93e44c: LoadField: r1 = r0->field_b
    //     0x93e44c: ldur            w1, [x0, #0xb]
    // 0x93e450: DecompressPointer r1
    //     0x93e450: add             x1, x1, HEAP, lsl #32
    // 0x93e454: cmp             w1, NULL
    // 0x93e458: b.eq            #0x93e524
    // 0x93e45c: r1 = <_DecorationSlot, RenderBox>
    //     0x93e45c: add             x1, PP, #0x41, lsl #12  ; [pp+0x419a8] TypeArguments: <_DecorationSlot, RenderBox>
    //     0x93e460: ldr             x1, [x1, #0x9a8]
    // 0x93e464: r0 = _Decorator()
    //     0x93e464: bl              #0x93e528  ; Allocate_DecoratorStub -> _Decorator (size=0x28)
    // 0x93e468: mov             x1, x0
    // 0x93e46c: ldur            x0, [fp, #-8]
    // 0x93e470: stur            x1, [fp, #-0x20]
    // 0x93e474: StoreField: r1->field_f = r0
    //     0x93e474: stur            w0, [x1, #0xf]
    // 0x93e478: ldur            x0, [fp, #-0x68]
    // 0x93e47c: StoreField: r1->field_13 = r0
    //     0x93e47c: stur            w0, [x1, #0x13]
    // 0x93e480: ldur            x0, [fp, #-0x18]
    // 0x93e484: ArrayStore: r1[0] = r0  ; List_4
    //     0x93e484: stur            w0, [x1, #0x17]
    // 0x93e488: ldur            x0, [fp, #-0x10]
    // 0x93e48c: StoreField: r1->field_1f = r0
    //     0x93e48c: stur            w0, [x1, #0x1f]
    // 0x93e490: r0 = false
    //     0x93e490: add             x0, NULL, #0x30  ; false
    // 0x93e494: StoreField: r1->field_23 = r0
    //     0x93e494: stur            w0, [x1, #0x23]
    // 0x93e498: ldr             x16, [fp, #0x18]
    // 0x93e49c: str             x16, [SP]
    // 0x93e4a0: r0 = decoration()
    //     0x93e4a0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e4a4: ldur            x0, [fp, #-0x20]
    // 0x93e4a8: LeaveFrame
    //     0x93e4a8: mov             SP, fp
    //     0x93e4ac: ldp             fp, lr, [SP], #0x10
    // 0x93e4b0: ret
    //     0x93e4b0: ret             
    // 0x93e4b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93e4b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93e4b8: b               #0x93d6b0
    // 0x93e4bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e4bc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e4c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e4c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e4c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e4c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e4c8: r9 = _floatingLabelAnimation
    //     0x93e4c8: add             x9, PP, #0x41, lsl #12  ; [pp+0x419b0] Field <_InputDecoratorState@159019562._floatingLabelAnimation@159019562>: late final (offset: 0x20)
    //     0x93e4cc: ldr             x9, [x9, #0x9b0]
    // 0x93e4d0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93e4d0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93e4d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e4d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e4d8: SaveReg d0
    //     0x93e4d8: str             q0, [SP, #-0x10]!
    // 0x93e4dc: SaveReg r0
    //     0x93e4dc: str             x0, [SP, #-8]!
    // 0x93e4e0: r0 = AllocateDouble()
    //     0x93e4e0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x93e4e4: mov             x1, x0
    // 0x93e4e8: RestoreReg r0
    //     0x93e4e8: ldr             x0, [SP], #8
    // 0x93e4ec: RestoreReg d0
    //     0x93e4ec: ldr             q0, [SP], #0x10
    // 0x93e4f0: b               #0x93dbec
    // 0x93e4f4: SaveReg d0
    //     0x93e4f4: str             q0, [SP, #-0x10]!
    // 0x93e4f8: SaveReg r0
    //     0x93e4f8: str             x0, [SP, #-8]!
    // 0x93e4fc: r0 = AllocateDouble()
    //     0x93e4fc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x93e500: mov             x1, x0
    // 0x93e504: RestoreReg r0
    //     0x93e504: ldr             x0, [SP], #8
    // 0x93e508: RestoreReg d0
    //     0x93e508: ldr             q0, [SP], #0x10
    // 0x93e50c: b               #0x93ddb8
    // 0x93e510: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e510: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e514: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e514: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e518: r0 = NullCastErrorSharedWithFPURegs()
    //     0x93e518: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x93e51c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e51c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e520: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e520: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93e524: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e524: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ materialState(/* No info */) {
    // ** addr: 0x93e628, size: 0x158
    // 0x93e628: EnterFrame
    //     0x93e628: stp             fp, lr, [SP, #-0x10]!
    //     0x93e62c: mov             fp, SP
    // 0x93e630: AllocStack(0x20)
    //     0x93e630: sub             SP, SP, #0x20
    // 0x93e634: CheckStackOverflow
    //     0x93e634: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93e638: cmp             SP, x16
    //     0x93e63c: b.ls            #0x93e774
    // 0x93e640: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0x93e640: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x93e644: ldr             x0, [x0, #0x528]
    //     0x93e648: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x93e64c: cmp             w0, w16
    //     0x93e650: b.ne            #0x93e65c
    //     0x93e654: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0x93e658: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x93e65c: r1 = <MaterialState>
    //     0x93e65c: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1f3f8] TypeArguments: <MaterialState>
    //     0x93e660: ldr             x1, [x1, #0x3f8]
    // 0x93e664: stur            x0, [fp, #-8]
    // 0x93e668: r0 = _Set()
    //     0x93e668: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x93e66c: mov             x1, x0
    // 0x93e670: ldur            x0, [fp, #-8]
    // 0x93e674: stur            x1, [fp, #-0x10]
    // 0x93e678: StoreField: r1->field_1b = r0
    //     0x93e678: stur            w0, [x1, #0x1b]
    // 0x93e67c: StoreField: r1->field_b = rZR
    //     0x93e67c: stur            wzr, [x1, #0xb]
    // 0x93e680: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0x93e680: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x93e684: ldr             x0, [x0, #0x530]
    //     0x93e688: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x93e68c: cmp             w0, w16
    //     0x93e690: b.ne            #0x93e69c
    //     0x93e694: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0x93e698: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x93e69c: mov             x1, x0
    // 0x93e6a0: ldur            x0, [fp, #-0x10]
    // 0x93e6a4: StoreField: r0->field_f = r1
    //     0x93e6a4: stur            w1, [x0, #0xf]
    // 0x93e6a8: StoreField: r0->field_13 = rZR
    //     0x93e6a8: stur            wzr, [x0, #0x13]
    // 0x93e6ac: ArrayStore: r0[0] = rZR  ; List_4
    //     0x93e6ac: stur            wzr, [x0, #0x17]
    // 0x93e6b0: ldr             x16, [fp, #0x10]
    // 0x93e6b4: str             x16, [SP]
    // 0x93e6b8: r0 = decoration()
    //     0x93e6b8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e6bc: LoadField: r1 = r0->field_c3
    //     0x93e6bc: ldur            w1, [x0, #0xc3]
    // 0x93e6c0: DecompressPointer r1
    //     0x93e6c0: add             x1, x1, HEAP, lsl #32
    // 0x93e6c4: tbz             w1, #4, #0x93e6dc
    // 0x93e6c8: ldur            x16, [fp, #-0x10]
    // 0x93e6cc: r30 = Instance_MaterialState
    //     0x93e6cc: add             lr, PP, #0xf, lsl #12  ; [pp+0xf518] Obj!MaterialState@c44611
    //     0x93e6d0: ldr             lr, [lr, #0x518]
    // 0x93e6d4: stp             lr, x16, [SP]
    // 0x93e6d8: r0 = add()
    //     0x93e6d8: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x93e6dc: ldr             x0, [fp, #0x10]
    // 0x93e6e0: LoadField: r1 = r0->field_b
    //     0x93e6e0: ldur            w1, [x0, #0xb]
    // 0x93e6e4: DecompressPointer r1
    //     0x93e6e4: add             x1, x1, HEAP, lsl #32
    // 0x93e6e8: cmp             w1, NULL
    // 0x93e6ec: b.eq            #0x93e77c
    // 0x93e6f0: LoadField: r2 = r1->field_1b
    //     0x93e6f0: ldur            w2, [x1, #0x1b]
    // 0x93e6f4: DecompressPointer r2
    //     0x93e6f4: add             x2, x2, HEAP, lsl #32
    // 0x93e6f8: tbnz            w2, #4, #0x93e710
    // 0x93e6fc: ldur            x16, [fp, #-0x10]
    // 0x93e700: r30 = Instance_MaterialState
    //     0x93e700: add             lr, PP, #0xf, lsl #12  ; [pp+0xf398] Obj!MaterialState@c44631
    //     0x93e704: ldr             lr, [lr, #0x398]
    // 0x93e708: stp             lr, x16, [SP]
    // 0x93e70c: r0 = add()
    //     0x93e70c: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x93e710: ldr             x16, [fp, #0x10]
    // 0x93e714: str             x16, [SP]
    // 0x93e718: r0 = isHovering()
    //     0x93e718: bl              #0x93f654  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isHovering
    // 0x93e71c: tbnz            w0, #4, #0x93e734
    // 0x93e720: ldur            x16, [fp, #-0x10]
    // 0x93e724: r30 = Instance_MaterialState
    //     0x93e724: add             lr, PP, #0xf, lsl #12  ; [pp+0xf388] Obj!MaterialState@c44651
    //     0x93e728: ldr             lr, [lr, #0x388]
    // 0x93e72c: stp             lr, x16, [SP]
    // 0x93e730: r0 = add()
    //     0x93e730: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x93e734: ldr             x16, [fp, #0x10]
    // 0x93e738: str             x16, [SP]
    // 0x93e73c: r0 = decoration()
    //     0x93e73c: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e740: LoadField: r1 = r0->field_3f
    //     0x93e740: ldur            w1, [x0, #0x3f]
    // 0x93e744: DecompressPointer r1
    //     0x93e744: add             x1, x1, HEAP, lsl #32
    // 0x93e748: cmp             w1, NULL
    // 0x93e74c: b.eq            #0x93e764
    // 0x93e750: ldur            x16, [fp, #-0x10]
    // 0x93e754: r30 = Instance_MaterialState
    //     0x93e754: add             lr, PP, #0xf, lsl #12  ; [pp+0xf660] Obj!MaterialState@c446d1
    //     0x93e758: ldr             lr, [lr, #0x660]
    // 0x93e75c: stp             lr, x16, [SP]
    // 0x93e760: r0 = add()
    //     0x93e760: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x93e764: ldur            x0, [fp, #-0x10]
    // 0x93e768: LeaveFrame
    //     0x93e768: mov             SP, fp
    //     0x93e76c: ldp             fp, lr, [SP], #0x10
    // 0x93e770: ret
    //     0x93e770: ret             
    // 0x93e774: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93e774: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93e778: b               #0x93e640
    // 0x93e77c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93e77c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getErrorStyle(/* No info */) {
    // ** addr: 0x93e78c, size: 0x108
    // 0x93e78c: EnterFrame
    //     0x93e78c: stp             fp, lr, [SP, #-0x10]!
    //     0x93e790: mov             fp, SP
    // 0x93e794: AllocStack(0x20)
    //     0x93e794: sub             SP, SP, #0x20
    // 0x93e798: CheckStackOverflow
    //     0x93e798: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93e79c: cmp             SP, x16
    //     0x93e7a0: b.ls            #0x93e88c
    // 0x93e7a4: ldr             x0, [fp, #0x10]
    // 0x93e7a8: r1 = LoadClassIdInstr(r0)
    //     0x93e7a8: ldur            x1, [x0, #-1]
    //     0x93e7ac: ubfx            x1, x1, #0xc, #0x14
    // 0x93e7b0: lsl             x1, x1, #1
    // 0x93e7b4: r17 = 5524
    //     0x93e7b4: movz            x17, #0x1594
    // 0x93e7b8: cmp             w1, w17
    // 0x93e7bc: b.ne            #0x93e7d0
    // 0x93e7c0: LoadField: r1 = r0->field_1b
    //     0x93e7c0: ldur            w1, [x0, #0x1b]
    // 0x93e7c4: DecompressPointer r1
    //     0x93e7c4: add             x1, x1, HEAP, lsl #32
    // 0x93e7c8: mov             x0, x1
    // 0x93e7cc: b               #0x93e838
    // 0x93e7d0: r17 = 5526
    //     0x93e7d0: movz            x17, #0x1596
    // 0x93e7d4: cmp             w1, w17
    // 0x93e7d8: b.ne            #0x93e80c
    // 0x93e7dc: r1 = 1
    //     0x93e7dc: movz            x1, #0x1
    // 0x93e7e0: r0 = AllocateContext()
    //     0x93e7e0: bl              #0xc5def4  ; AllocateContextStub
    // 0x93e7e4: mov             x1, x0
    // 0x93e7e8: ldr             x0, [fp, #0x10]
    // 0x93e7ec: StoreField: r1->field_f = r0
    //     0x93e7ec: stur            w0, [x1, #0xf]
    // 0x93e7f0: mov             x2, x1
    // 0x93e7f4: r1 = Function '<anonymous closure>':.
    //     0x93e7f4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f8] AnonymousClosure: (0x93e9d8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93e7f8: ldr             x1, [x1, #0x5f8]
    // 0x93e7fc: r0 = AllocateClosure()
    //     0x93e7fc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93e800: str             x0, [SP]
    // 0x93e804: r0 = resolveWith()
    //     0x93e804: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x93e808: b               #0x93e838
    // 0x93e80c: r1 = 1
    //     0x93e80c: movz            x1, #0x1
    // 0x93e810: r0 = AllocateContext()
    //     0x93e810: bl              #0xc5def4  ; AllocateContextStub
    // 0x93e814: mov             x1, x0
    // 0x93e818: ldr             x0, [fp, #0x10]
    // 0x93e81c: StoreField: r1->field_f = r0
    //     0x93e81c: stur            w0, [x1, #0xf]
    // 0x93e820: mov             x2, x1
    // 0x93e824: r1 = Function '<anonymous closure>':.
    //     0x93e824: add             x1, PP, #0xf, lsl #12  ; [pp+0xf600] AnonymousClosure: (0x93e8c8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x93e828: ldr             x1, [x1, #0x600]
    // 0x93e82c: r0 = AllocateClosure()
    //     0x93e82c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93e830: str             x0, [SP]
    // 0x93e834: r0 = resolveWith()
    //     0x93e834: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x93e838: stur            x0, [fp, #-8]
    // 0x93e83c: ldr             x16, [fp, #0x18]
    // 0x93e840: str             x16, [SP]
    // 0x93e844: r0 = materialState()
    //     0x93e844: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93e848: r16 = <TextStyle>
    //     0x93e848: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2e620] TypeArguments: <TextStyle>
    //     0x93e84c: ldr             x16, [x16, #0x620]
    // 0x93e850: ldur            lr, [fp, #-8]
    // 0x93e854: stp             lr, x16, [SP, #8]
    // 0x93e858: str             x0, [SP]
    // 0x93e85c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93e85c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93e860: r0 = resolveAs()
    //     0x93e860: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93e864: stur            x0, [fp, #-8]
    // 0x93e868: ldr             x16, [fp, #0x18]
    // 0x93e86c: str             x16, [SP]
    // 0x93e870: r0 = decoration()
    //     0x93e870: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93e874: ldur            x16, [fp, #-8]
    // 0x93e878: stp             NULL, x16, [SP]
    // 0x93e87c: r0 = merge()
    //     0x93e87c: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x93e880: LeaveFrame
    //     0x93e880: mov             SP, fp
    //     0x93e884: ldp             fp, lr, [SP], #0x10
    // 0x93e888: ret
    //     0x93e888: ret             
    // 0x93e88c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93e88c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93e890: b               #0x93e7a4
  }
  _ _getHelperStyle(/* No info */) {
    // ** addr: 0x93eb40, size: 0x12c
    // 0x93eb40: EnterFrame
    //     0x93eb40: stp             fp, lr, [SP, #-0x10]!
    //     0x93eb44: mov             fp, SP
    // 0x93eb48: AllocStack(0x20)
    //     0x93eb48: sub             SP, SP, #0x20
    // 0x93eb4c: CheckStackOverflow
    //     0x93eb4c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93eb50: cmp             SP, x16
    //     0x93eb54: b.ls            #0x93ec64
    // 0x93eb58: ldr             x0, [fp, #0x10]
    // 0x93eb5c: r1 = LoadClassIdInstr(r0)
    //     0x93eb5c: ldur            x1, [x0, #-1]
    //     0x93eb60: ubfx            x1, x1, #0xc, #0x14
    // 0x93eb64: lsl             x1, x1, #1
    // 0x93eb68: r17 = 5524
    //     0x93eb68: movz            x17, #0x1594
    // 0x93eb6c: cmp             w1, w17
    // 0x93eb70: b.ne            #0x93eb84
    // 0x93eb74: LoadField: r1 = r0->field_f
    //     0x93eb74: ldur            w1, [x0, #0xf]
    // 0x93eb78: DecompressPointer r1
    //     0x93eb78: add             x1, x1, HEAP, lsl #32
    // 0x93eb7c: mov             x0, x1
    // 0x93eb80: b               #0x93ebec
    // 0x93eb84: r17 = 5526
    //     0x93eb84: movz            x17, #0x1596
    // 0x93eb88: cmp             w1, w17
    // 0x93eb8c: b.ne            #0x93ebc0
    // 0x93eb90: r1 = 1
    //     0x93eb90: movz            x1, #0x1
    // 0x93eb94: r0 = AllocateContext()
    //     0x93eb94: bl              #0xc5def4  ; AllocateContextStub
    // 0x93eb98: mov             x1, x0
    // 0x93eb9c: ldr             x0, [fp, #0x10]
    // 0x93eba0: StoreField: r1->field_f = r0
    //     0x93eba0: stur            w0, [x1, #0xf]
    // 0x93eba4: mov             x2, x1
    // 0x93eba8: r1 = Function '<anonymous closure>':.
    //     0x93eba8: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5d8] AnonymousClosure: (0x93ed74), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93ebac: ldr             x1, [x1, #0x5d8]
    // 0x93ebb0: r0 = AllocateClosure()
    //     0x93ebb0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93ebb4: str             x0, [SP]
    // 0x93ebb8: r0 = resolveWith()
    //     0x93ebb8: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x93ebbc: b               #0x93ebec
    // 0x93ebc0: r1 = 1
    //     0x93ebc0: movz            x1, #0x1
    // 0x93ebc4: r0 = AllocateContext()
    //     0x93ebc4: bl              #0xc5def4  ; AllocateContextStub
    // 0x93ebc8: mov             x1, x0
    // 0x93ebcc: ldr             x0, [fp, #0x10]
    // 0x93ebd0: StoreField: r1->field_f = r0
    //     0x93ebd0: stur            w0, [x1, #0xf]
    // 0x93ebd4: mov             x2, x1
    // 0x93ebd8: r1 = Function '<anonymous closure>':.
    //     0x93ebd8: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e0] AnonymousClosure: (0x93ec6c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x93ebdc: ldr             x1, [x1, #0x5e0]
    // 0x93ebe0: r0 = AllocateClosure()
    //     0x93ebe0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93ebe4: str             x0, [SP]
    // 0x93ebe8: r0 = resolveWith()
    //     0x93ebe8: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x93ebec: stur            x0, [fp, #-8]
    // 0x93ebf0: ldr             x16, [fp, #0x18]
    // 0x93ebf4: str             x16, [SP]
    // 0x93ebf8: r0 = materialState()
    //     0x93ebf8: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93ebfc: r16 = <TextStyle>
    //     0x93ebfc: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2e620] TypeArguments: <TextStyle>
    //     0x93ec00: ldr             x16, [x16, #0x620]
    // 0x93ec04: ldur            lr, [fp, #-8]
    // 0x93ec08: stp             lr, x16, [SP, #8]
    // 0x93ec0c: str             x0, [SP]
    // 0x93ec10: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93ec10: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93ec14: r0 = resolveAs()
    //     0x93ec14: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93ec18: stur            x0, [fp, #-8]
    // 0x93ec1c: ldr             x16, [fp, #0x18]
    // 0x93ec20: str             x16, [SP]
    // 0x93ec24: r0 = decoration()
    //     0x93ec24: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93ec28: ldr             x16, [fp, #0x18]
    // 0x93ec2c: str             x16, [SP]
    // 0x93ec30: r0 = materialState()
    //     0x93ec30: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93ec34: r16 = <TextStyle?>
    //     0x93ec34: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x93ec38: ldr             x16, [x16, #0x508]
    // 0x93ec3c: stp             NULL, x16, [SP, #8]
    // 0x93ec40: str             x0, [SP]
    // 0x93ec44: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93ec44: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93ec48: r0 = resolveAs()
    //     0x93ec48: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93ec4c: ldur            x16, [fp, #-8]
    // 0x93ec50: stp             NULL, x16, [SP]
    // 0x93ec54: r0 = merge()
    //     0x93ec54: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x93ec58: LeaveFrame
    //     0x93ec58: mov             SP, fp
    //     0x93ec5c: ldp             fp, lr, [SP], #0x10
    // 0x93ec60: ret
    //     0x93ec60: ret             
    // 0x93ec64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93ec64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93ec68: b               #0x93eb58
  }
  get _ textAlign(/* No info */) {
    // ** addr: 0x93eef4, size: 0x34
    // 0x93eef4: EnterFrame
    //     0x93eef4: stp             fp, lr, [SP, #-0x10]!
    //     0x93eef8: mov             fp, SP
    // 0x93eefc: ldr             x1, [fp, #0x10]
    // 0x93ef00: LoadField: r2 = r1->field_b
    //     0x93ef00: ldur            w2, [x1, #0xb]
    // 0x93ef04: DecompressPointer r2
    //     0x93ef04: add             x2, x2, HEAP, lsl #32
    // 0x93ef08: cmp             w2, NULL
    // 0x93ef0c: b.eq            #0x93ef24
    // 0x93ef10: LoadField: r0 = r2->field_13
    //     0x93ef10: ldur            w0, [x2, #0x13]
    // 0x93ef14: DecompressPointer r0
    //     0x93ef14: add             x0, x0, HEAP, lsl #32
    // 0x93ef18: LeaveFrame
    //     0x93ef18: mov             SP, fp
    //     0x93ef1c: ldp             fp, lr, [SP], #0x10
    // 0x93ef20: ret
    //     0x93ef20: ret             
    // 0x93ef24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93ef24: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getSuffixIconColor(/* No info */) {
    // ** addr: 0x93ef28, size: 0x140
    // 0x93ef28: EnterFrame
    //     0x93ef28: stp             fp, lr, [SP, #-0x10]!
    //     0x93ef2c: mov             fp, SP
    // 0x93ef30: AllocStack(0x20)
    //     0x93ef30: sub             SP, SP, #0x20
    // 0x93ef34: CheckStackOverflow
    //     0x93ef34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93ef38: cmp             SP, x16
    //     0x93ef3c: b.ls            #0x93f060
    // 0x93ef40: ldr             x16, [fp, #0x20]
    // 0x93ef44: str             x16, [SP]
    // 0x93ef48: r0 = decoration()
    //     0x93ef48: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93ef4c: ldr             x16, [fp, #0x20]
    // 0x93ef50: str             x16, [SP]
    // 0x93ef54: r0 = materialState()
    //     0x93ef54: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93ef58: r16 = <Color?>
    //     0x93ef58: add             x16, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0x93ef5c: ldr             x16, [x16, #0x348]
    // 0x93ef60: stp             NULL, x16, [SP, #8]
    // 0x93ef64: str             x0, [SP]
    // 0x93ef68: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93ef68: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93ef6c: r0 = resolveAs()
    //     0x93ef6c: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93ef70: ldr             x16, [fp, #0x20]
    // 0x93ef74: str             x16, [SP]
    // 0x93ef78: r0 = materialState()
    //     0x93ef78: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93ef7c: r16 = <Color?>
    //     0x93ef7c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0x93ef80: ldr             x16, [x16, #0x348]
    // 0x93ef84: stp             NULL, x16, [SP, #8]
    // 0x93ef88: str             x0, [SP]
    // 0x93ef8c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93ef8c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93ef90: r0 = resolveAs()
    //     0x93ef90: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93ef94: ldr             x0, [fp, #0x10]
    // 0x93ef98: r1 = LoadClassIdInstr(r0)
    //     0x93ef98: ldur            x1, [x0, #-1]
    //     0x93ef9c: ubfx            x1, x1, #0xc, #0x14
    // 0x93efa0: lsl             x1, x1, #1
    // 0x93efa4: r17 = 5524
    //     0x93efa4: movz            x17, #0x1594
    // 0x93efa8: cmp             w1, w17
    // 0x93efac: b.ne            #0x93efc0
    // 0x93efb0: LoadField: r1 = r0->field_47
    //     0x93efb0: ldur            w1, [x0, #0x47]
    // 0x93efb4: DecompressPointer r1
    //     0x93efb4: add             x1, x1, HEAP, lsl #32
    // 0x93efb8: mov             x0, x1
    // 0x93efbc: b               #0x93f028
    // 0x93efc0: r17 = 5526
    //     0x93efc0: movz            x17, #0x1596
    // 0x93efc4: cmp             w1, w17
    // 0x93efc8: b.ne            #0x93effc
    // 0x93efcc: r1 = 1
    //     0x93efcc: movz            x1, #0x1
    // 0x93efd0: r0 = AllocateContext()
    //     0x93efd0: bl              #0xc5def4  ; AllocateContextStub
    // 0x93efd4: mov             x1, x0
    // 0x93efd8: ldr             x0, [fp, #0x10]
    // 0x93efdc: StoreField: r1->field_f = r0
    //     0x93efdc: stur            w0, [x1, #0xf]
    // 0x93efe0: mov             x2, x1
    // 0x93efe4: r1 = Function '<anonymous closure>':.
    //     0x93efe4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf628] AnonymousClosure: (0x93f2f4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93efe8: ldr             x1, [x1, #0x628]
    // 0x93efec: r0 = AllocateClosure()
    //     0x93efec: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93eff0: str             x0, [SP]
    // 0x93eff4: r0 = resolveWith()
    //     0x93eff4: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93eff8: b               #0x93f028
    // 0x93effc: r1 = 1
    //     0x93effc: movz            x1, #0x1
    // 0x93f000: r0 = AllocateContext()
    //     0x93f000: bl              #0xc5def4  ; AllocateContextStub
    // 0x93f004: mov             x1, x0
    // 0x93f008: ldr             x0, [fp, #0x10]
    // 0x93f00c: StoreField: r1->field_f = r0
    //     0x93f00c: stur            w0, [x1, #0xf]
    // 0x93f010: mov             x2, x1
    // 0x93f014: r1 = Function '<anonymous closure>':.
    //     0x93f014: add             x1, PP, #0xf, lsl #12  ; [pp+0xf630] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x93f018: ldr             x1, [x1, #0x630]
    // 0x93f01c: r0 = AllocateClosure()
    //     0x93f01c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93f020: str             x0, [SP]
    // 0x93f024: r0 = resolveWith()
    //     0x93f024: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93f028: stur            x0, [fp, #-8]
    // 0x93f02c: ldr             x16, [fp, #0x20]
    // 0x93f030: str             x16, [SP]
    // 0x93f034: r0 = materialState()
    //     0x93f034: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f038: r16 = <Color>
    //     0x93f038: add             x16, PP, #0xf, lsl #12  ; [pp+0xf7a8] TypeArguments: <Color>
    //     0x93f03c: ldr             x16, [x16, #0x7a8]
    // 0x93f040: ldur            lr, [fp, #-8]
    // 0x93f044: stp             lr, x16, [SP, #8]
    // 0x93f048: str             x0, [SP]
    // 0x93f04c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f04c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f050: r0 = resolveAs()
    //     0x93f050: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f054: LeaveFrame
    //     0x93f054: mov             SP, fp
    //     0x93f058: ldp             fp, lr, [SP], #0x10
    // 0x93f05c: ret
    //     0x93f05c: ret             
    // 0x93f060: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f060: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f064: b               #0x93ef40
  }
  _ _getPrefixIconColor(/* No info */) {
    // ** addr: 0x93f484, size: 0x140
    // 0x93f484: EnterFrame
    //     0x93f484: stp             fp, lr, [SP, #-0x10]!
    //     0x93f488: mov             fp, SP
    // 0x93f48c: AllocStack(0x20)
    //     0x93f48c: sub             SP, SP, #0x20
    // 0x93f490: CheckStackOverflow
    //     0x93f490: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f494: cmp             SP, x16
    //     0x93f498: b.ls            #0x93f5bc
    // 0x93f49c: ldr             x16, [fp, #0x20]
    // 0x93f4a0: str             x16, [SP]
    // 0x93f4a4: r0 = decoration()
    //     0x93f4a4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f4a8: ldr             x16, [fp, #0x20]
    // 0x93f4ac: str             x16, [SP]
    // 0x93f4b0: r0 = materialState()
    //     0x93f4b0: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f4b4: r16 = <Color?>
    //     0x93f4b4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0x93f4b8: ldr             x16, [x16, #0x348]
    // 0x93f4bc: stp             NULL, x16, [SP, #8]
    // 0x93f4c0: str             x0, [SP]
    // 0x93f4c4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f4c4: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f4c8: r0 = resolveAs()
    //     0x93f4c8: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f4cc: ldr             x16, [fp, #0x20]
    // 0x93f4d0: str             x16, [SP]
    // 0x93f4d4: r0 = materialState()
    //     0x93f4d4: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f4d8: r16 = <Color?>
    //     0x93f4d8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0x93f4dc: ldr             x16, [x16, #0x348]
    // 0x93f4e0: stp             NULL, x16, [SP, #8]
    // 0x93f4e4: str             x0, [SP]
    // 0x93f4e8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f4e8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f4ec: r0 = resolveAs()
    //     0x93f4ec: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f4f0: ldr             x0, [fp, #0x10]
    // 0x93f4f4: r1 = LoadClassIdInstr(r0)
    //     0x93f4f4: ldur            x1, [x0, #-1]
    //     0x93f4f8: ubfx            x1, x1, #0xc, #0x14
    // 0x93f4fc: lsl             x1, x1, #1
    // 0x93f500: r17 = 5524
    //     0x93f500: movz            x17, #0x1594
    // 0x93f504: cmp             w1, w17
    // 0x93f508: b.ne            #0x93f51c
    // 0x93f50c: LoadField: r1 = r0->field_3f
    //     0x93f50c: ldur            w1, [x0, #0x3f]
    // 0x93f510: DecompressPointer r1
    //     0x93f510: add             x1, x1, HEAP, lsl #32
    // 0x93f514: mov             x0, x1
    // 0x93f518: b               #0x93f584
    // 0x93f51c: r17 = 5526
    //     0x93f51c: movz            x17, #0x1596
    // 0x93f520: cmp             w1, w17
    // 0x93f524: b.ne            #0x93f558
    // 0x93f528: r1 = 1
    //     0x93f528: movz            x1, #0x1
    // 0x93f52c: r0 = AllocateContext()
    //     0x93f52c: bl              #0xc5def4  ; AllocateContextStub
    // 0x93f530: mov             x1, x0
    // 0x93f534: ldr             x0, [fp, #0x10]
    // 0x93f538: StoreField: r1->field_f = r0
    //     0x93f538: stur            w0, [x1, #0xf]
    // 0x93f53c: mov             x2, x1
    // 0x93f540: r1 = Function '<anonymous closure>':.
    //     0x93f540: add             x1, PP, #0xf, lsl #12  ; [pp+0xf618] AnonymousClosure: (0x93f5c4), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93f544: ldr             x1, [x1, #0x618]
    // 0x93f548: r0 = AllocateClosure()
    //     0x93f548: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93f54c: str             x0, [SP]
    // 0x93f550: r0 = resolveWith()
    //     0x93f550: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93f554: b               #0x93f584
    // 0x93f558: r1 = 1
    //     0x93f558: movz            x1, #0x1
    // 0x93f55c: r0 = AllocateContext()
    //     0x93f55c: bl              #0xc5def4  ; AllocateContextStub
    // 0x93f560: mov             x1, x0
    // 0x93f564: ldr             x0, [fp, #0x10]
    // 0x93f568: StoreField: r1->field_f = r0
    //     0x93f568: stur            w0, [x1, #0xf]
    // 0x93f56c: mov             x2, x1
    // 0x93f570: r1 = Function '<anonymous closure>':.
    //     0x93f570: add             x1, PP, #0xf, lsl #12  ; [pp+0xf620] AnonymousClosure: (0x93f158), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x93f574: ldr             x1, [x1, #0x620]
    // 0x93f578: r0 = AllocateClosure()
    //     0x93f578: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93f57c: str             x0, [SP]
    // 0x93f580: r0 = resolveWith()
    //     0x93f580: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93f584: stur            x0, [fp, #-8]
    // 0x93f588: ldr             x16, [fp, #0x20]
    // 0x93f58c: str             x16, [SP]
    // 0x93f590: r0 = materialState()
    //     0x93f590: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f594: r16 = <Color>
    //     0x93f594: add             x16, PP, #0xf, lsl #12  ; [pp+0xf7a8] TypeArguments: <Color>
    //     0x93f598: ldr             x16, [x16, #0x7a8]
    // 0x93f59c: ldur            lr, [fp, #-8]
    // 0x93f5a0: stp             lr, x16, [SP, #8]
    // 0x93f5a4: str             x0, [SP]
    // 0x93f5a8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f5a8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f5ac: r0 = resolveAs()
    //     0x93f5ac: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f5b0: LeaveFrame
    //     0x93f5b0: mov             SP, fp
    //     0x93f5b4: ldp             fp, lr, [SP], #0x10
    // 0x93f5b8: ret
    //     0x93f5b8: ret             
    // 0x93f5bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f5bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f5c0: b               #0x93f49c
  }
  get _ isHovering(/* No info */) {
    // ** addr: 0x93f654, size: 0x6c
    // 0x93f654: EnterFrame
    //     0x93f654: stp             fp, lr, [SP, #-0x10]!
    //     0x93f658: mov             fp, SP
    // 0x93f65c: AllocStack(0x8)
    //     0x93f65c: sub             SP, SP, #8
    // 0x93f660: CheckStackOverflow
    //     0x93f660: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f664: cmp             SP, x16
    //     0x93f668: b.ls            #0x93f6b4
    // 0x93f66c: ldr             x0, [fp, #0x10]
    // 0x93f670: LoadField: r1 = r0->field_b
    //     0x93f670: ldur            w1, [x0, #0xb]
    // 0x93f674: DecompressPointer r1
    //     0x93f674: add             x1, x1, HEAP, lsl #32
    // 0x93f678: cmp             w1, NULL
    // 0x93f67c: b.eq            #0x93f6bc
    // 0x93f680: LoadField: r2 = r1->field_1f
    //     0x93f680: ldur            w2, [x1, #0x1f]
    // 0x93f684: DecompressPointer r2
    //     0x93f684: add             x2, x2, HEAP, lsl #32
    // 0x93f688: tbnz            w2, #4, #0x93f6a4
    // 0x93f68c: str             x0, [SP]
    // 0x93f690: r0 = decoration()
    //     0x93f690: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f694: LoadField: r1 = r0->field_c3
    //     0x93f694: ldur            w1, [x0, #0xc3]
    // 0x93f698: DecompressPointer r1
    //     0x93f698: add             x1, x1, HEAP, lsl #32
    // 0x93f69c: mov             x0, x1
    // 0x93f6a0: b               #0x93f6a8
    // 0x93f6a4: r0 = false
    //     0x93f6a4: add             x0, NULL, #0x30  ; false
    // 0x93f6a8: LeaveFrame
    //     0x93f6a8: mov             SP, fp
    //     0x93f6ac: ldp             fp, lr, [SP], #0x10
    // 0x93f6b0: ret
    //     0x93f6b0: ret             
    // 0x93f6b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f6b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f6b8: b               #0x93f66c
    // 0x93f6bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93f6bc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getHoverColor(/* No info */) {
    // ** addr: 0x93f6c0, size: 0xd4
    // 0x93f6c0: EnterFrame
    //     0x93f6c0: stp             fp, lr, [SP, #-0x10]!
    //     0x93f6c4: mov             fp, SP
    // 0x93f6c8: AllocStack(0x8)
    //     0x93f6c8: sub             SP, SP, #8
    // 0x93f6cc: CheckStackOverflow
    //     0x93f6cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f6d0: cmp             SP, x16
    //     0x93f6d4: b.ls            #0x93f784
    // 0x93f6d8: ldr             x16, [fp, #0x18]
    // 0x93f6dc: str             x16, [SP]
    // 0x93f6e0: r0 = decoration()
    //     0x93f6e0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f6e4: LoadField: r1 = r0->field_9b
    //     0x93f6e4: ldur            w1, [x0, #0x9b]
    // 0x93f6e8: DecompressPointer r1
    //     0x93f6e8: add             x1, x1, HEAP, lsl #32
    // 0x93f6ec: cmp             w1, NULL
    // 0x93f6f0: b.eq            #0x93f748
    // 0x93f6f4: ldr             x16, [fp, #0x18]
    // 0x93f6f8: str             x16, [SP]
    // 0x93f6fc: r0 = decoration()
    //     0x93f6fc: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f700: LoadField: r1 = r0->field_9b
    //     0x93f700: ldur            w1, [x0, #0x9b]
    // 0x93f704: DecompressPointer r1
    //     0x93f704: add             x1, x1, HEAP, lsl #32
    // 0x93f708: cmp             w1, NULL
    // 0x93f70c: b.eq            #0x93f78c
    // 0x93f710: tbnz            w1, #4, #0x93f748
    // 0x93f714: ldr             x0, [fp, #0x18]
    // 0x93f718: LoadField: r1 = r0->field_b
    //     0x93f718: ldur            w1, [x0, #0xb]
    // 0x93f71c: DecompressPointer r1
    //     0x93f71c: add             x1, x1, HEAP, lsl #32
    // 0x93f720: cmp             w1, NULL
    // 0x93f724: b.eq            #0x93f790
    // 0x93f728: LoadField: r2 = r1->field_1b
    //     0x93f728: ldur            w2, [x1, #0x1b]
    // 0x93f72c: DecompressPointer r2
    //     0x93f72c: add             x2, x2, HEAP, lsl #32
    // 0x93f730: tbz             w2, #4, #0x93f748
    // 0x93f734: str             x0, [SP]
    // 0x93f738: r0 = decoration()
    //     0x93f738: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f73c: LoadField: r1 = r0->field_c3
    //     0x93f73c: ldur            w1, [x0, #0xc3]
    // 0x93f740: DecompressPointer r1
    //     0x93f740: add             x1, x1, HEAP, lsl #32
    // 0x93f744: tbz             w1, #4, #0x93f75c
    // 0x93f748: r0 = Instance_Color
    //     0x93f748: add             x0, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x93f74c: ldr             x0, [x0, #0x4a0]
    // 0x93f750: LeaveFrame
    //     0x93f750: mov             SP, fp
    //     0x93f754: ldp             fp, lr, [SP], #0x10
    // 0x93f758: ret
    //     0x93f758: ret             
    // 0x93f75c: ldr             x0, [fp, #0x10]
    // 0x93f760: ldr             x16, [fp, #0x18]
    // 0x93f764: str             x16, [SP]
    // 0x93f768: r0 = decoration()
    //     0x93f768: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f76c: ldr             x1, [fp, #0x10]
    // 0x93f770: LoadField: r0 = r1->field_5b
    //     0x93f770: ldur            w0, [x1, #0x5b]
    // 0x93f774: DecompressPointer r0
    //     0x93f774: add             x0, x0, HEAP, lsl #32
    // 0x93f778: LeaveFrame
    //     0x93f778: mov             SP, fp
    //     0x93f77c: ldp             fp, lr, [SP], #0x10
    // 0x93f780: ret
    //     0x93f780: ret             
    // 0x93f784: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f784: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f788: b               #0x93f6d8
    // 0x93f78c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93f78c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93f790: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93f790: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getFillColor(/* No info */) {
    // ** addr: 0x93f794, size: 0x194
    // 0x93f794: EnterFrame
    //     0x93f794: stp             fp, lr, [SP, #-0x10]!
    //     0x93f798: mov             fp, SP
    // 0x93f79c: AllocStack(0x20)
    //     0x93f79c: sub             SP, SP, #0x20
    // 0x93f7a0: CheckStackOverflow
    //     0x93f7a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93f7a4: cmp             SP, x16
    //     0x93f7a8: b.ls            #0x93f91c
    // 0x93f7ac: ldr             x16, [fp, #0x18]
    // 0x93f7b0: str             x16, [SP]
    // 0x93f7b4: r0 = decoration()
    //     0x93f7b4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f7b8: LoadField: r1 = r0->field_9b
    //     0x93f7b8: ldur            w1, [x0, #0x9b]
    // 0x93f7bc: DecompressPointer r1
    //     0x93f7bc: add             x1, x1, HEAP, lsl #32
    // 0x93f7c0: r16 = true
    //     0x93f7c0: add             x16, NULL, #0x20  ; true
    // 0x93f7c4: cmp             w1, w16
    // 0x93f7c8: b.eq            #0x93f7e0
    // 0x93f7cc: r0 = Instance_Color
    //     0x93f7cc: add             x0, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x93f7d0: ldr             x0, [x0, #0x4a0]
    // 0x93f7d4: LeaveFrame
    //     0x93f7d4: mov             SP, fp
    //     0x93f7d8: ldp             fp, lr, [SP], #0x10
    // 0x93f7dc: ret
    //     0x93f7dc: ret             
    // 0x93f7e0: ldr             x16, [fp, #0x18]
    // 0x93f7e4: str             x16, [SP]
    // 0x93f7e8: r0 = decoration()
    //     0x93f7e8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f7ec: LoadField: r1 = r0->field_9f
    //     0x93f7ec: ldur            w1, [x0, #0x9f]
    // 0x93f7f0: DecompressPointer r1
    //     0x93f7f0: add             x1, x1, HEAP, lsl #32
    // 0x93f7f4: cmp             w1, NULL
    // 0x93f7f8: b.eq            #0x93f850
    // 0x93f7fc: ldr             x16, [fp, #0x18]
    // 0x93f800: str             x16, [SP]
    // 0x93f804: r0 = decoration()
    //     0x93f804: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93f808: LoadField: r1 = r0->field_9f
    //     0x93f808: ldur            w1, [x0, #0x9f]
    // 0x93f80c: DecompressPointer r1
    //     0x93f80c: add             x1, x1, HEAP, lsl #32
    // 0x93f810: stur            x1, [fp, #-8]
    // 0x93f814: cmp             w1, NULL
    // 0x93f818: b.eq            #0x93f924
    // 0x93f81c: ldr             x16, [fp, #0x18]
    // 0x93f820: str             x16, [SP]
    // 0x93f824: r0 = materialState()
    //     0x93f824: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f828: r16 = <Color>
    //     0x93f828: add             x16, PP, #0xf, lsl #12  ; [pp+0xf7a8] TypeArguments: <Color>
    //     0x93f82c: ldr             x16, [x16, #0x7a8]
    // 0x93f830: ldur            lr, [fp, #-8]
    // 0x93f834: stp             lr, x16, [SP, #8]
    // 0x93f838: str             x0, [SP]
    // 0x93f83c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f83c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f840: r0 = resolveAs()
    //     0x93f840: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f844: LeaveFrame
    //     0x93f844: mov             SP, fp
    //     0x93f848: ldp             fp, lr, [SP], #0x10
    // 0x93f84c: ret
    //     0x93f84c: ret             
    // 0x93f850: ldr             x0, [fp, #0x10]
    // 0x93f854: r1 = LoadClassIdInstr(r0)
    //     0x93f854: ldur            x1, [x0, #-1]
    //     0x93f858: ubfx            x1, x1, #0xc, #0x14
    // 0x93f85c: lsl             x1, x1, #1
    // 0x93f860: r17 = 5524
    //     0x93f860: movz            x17, #0x1594
    // 0x93f864: cmp             w1, w17
    // 0x93f868: b.ne            #0x93f87c
    // 0x93f86c: LoadField: r1 = r0->field_53
    //     0x93f86c: ldur            w1, [x0, #0x53]
    // 0x93f870: DecompressPointer r1
    //     0x93f870: add             x1, x1, HEAP, lsl #32
    // 0x93f874: mov             x0, x1
    // 0x93f878: b               #0x93f8e4
    // 0x93f87c: r17 = 5526
    //     0x93f87c: movz            x17, #0x1596
    // 0x93f880: cmp             w1, w17
    // 0x93f884: b.ne            #0x93f8b8
    // 0x93f888: r1 = 1
    //     0x93f888: movz            x1, #0x1
    // 0x93f88c: r0 = AllocateContext()
    //     0x93f88c: bl              #0xc5def4  ; AllocateContextStub
    // 0x93f890: mov             x1, x0
    // 0x93f894: ldr             x0, [fp, #0x10]
    // 0x93f898: StoreField: r1->field_f = r0
    //     0x93f898: stur            w0, [x1, #0xf]
    // 0x93f89c: mov             x2, x1
    // 0x93f8a0: r1 = Function '<anonymous closure>':.
    //     0x93f8a0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf638] AnonymousClosure: (0x93fa4c), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93f8a4: ldr             x1, [x1, #0x638]
    // 0x93f8a8: r0 = AllocateClosure()
    //     0x93f8a8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93f8ac: str             x0, [SP]
    // 0x93f8b0: r0 = resolveWith()
    //     0x93f8b0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93f8b4: b               #0x93f8e4
    // 0x93f8b8: r1 = 1
    //     0x93f8b8: movz            x1, #0x1
    // 0x93f8bc: r0 = AllocateContext()
    //     0x93f8bc: bl              #0xc5def4  ; AllocateContextStub
    // 0x93f8c0: mov             x1, x0
    // 0x93f8c4: ldr             x0, [fp, #0x10]
    // 0x93f8c8: StoreField: r1->field_f = r0
    //     0x93f8c8: stur            w0, [x1, #0xf]
    // 0x93f8cc: mov             x2, x1
    // 0x93f8d0: r1 = Function '<anonymous closure>':.
    //     0x93f8d0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf640] AnonymousClosure: (0x93f928), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x93f8d4: ldr             x1, [x1, #0x640]
    // 0x93f8d8: r0 = AllocateClosure()
    //     0x93f8d8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93f8dc: str             x0, [SP]
    // 0x93f8e0: r0 = resolveWith()
    //     0x93f8e0: bl              #0x93f068  ; [package:flutter/src/material/material_state.dart] MaterialStateColor::resolveWith
    // 0x93f8e4: stur            x0, [fp, #-8]
    // 0x93f8e8: ldr             x16, [fp, #0x18]
    // 0x93f8ec: str             x16, [SP]
    // 0x93f8f0: r0 = materialState()
    //     0x93f8f0: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93f8f4: r16 = <Color>
    //     0x93f8f4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf7a8] TypeArguments: <Color>
    //     0x93f8f8: ldr             x16, [x16, #0x7a8]
    // 0x93f8fc: ldur            lr, [fp, #-8]
    // 0x93f900: stp             lr, x16, [SP, #8]
    // 0x93f904: str             x0, [SP]
    // 0x93f908: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93f908: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93f90c: r0 = resolveAs()
    //     0x93f90c: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93f910: LeaveFrame
    //     0x93f910: mov             SP, fp
    //     0x93f914: ldp             fp, lr, [SP], #0x10
    // 0x93f918: ret
    //     0x93f918: ret             
    // 0x93f91c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93f91c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93f920: b               #0x93f7ac
    // 0x93f924: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93f924: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getDefaultBorder(/* No info */) {
    // ** addr: 0x93fb60, size: 0x380
    // 0x93fb60: EnterFrame
    //     0x93fb60: stp             fp, lr, [SP, #-0x10]!
    //     0x93fb64: mov             fp, SP
    // 0x93fb68: AllocStack(0x30)
    //     0x93fb68: sub             SP, SP, #0x30
    // 0x93fb6c: CheckStackOverflow
    //     0x93fb6c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93fb70: cmp             SP, x16
    //     0x93fb74: b.ls            #0x93fed0
    // 0x93fb78: ldr             x16, [fp, #0x20]
    // 0x93fb7c: str             x16, [SP]
    // 0x93fb80: r0 = decoration()
    //     0x93fb80: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fb84: LoadField: r1 = r0->field_bf
    //     0x93fb84: ldur            w1, [x0, #0xbf]
    // 0x93fb88: DecompressPointer r1
    //     0x93fb88: add             x1, x1, HEAP, lsl #32
    // 0x93fb8c: stur            x1, [fp, #-8]
    // 0x93fb90: ldr             x16, [fp, #0x20]
    // 0x93fb94: str             x16, [SP]
    // 0x93fb98: r0 = materialState()
    //     0x93fb98: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93fb9c: r16 = <InputBorder?>
    //     0x93fb9c: add             x16, PP, #0x41, lsl #12  ; [pp+0x419b8] TypeArguments: <InputBorder?>
    //     0x93fba0: ldr             x16, [x16, #0x9b8]
    // 0x93fba4: ldur            lr, [fp, #-8]
    // 0x93fba8: stp             lr, x16, [SP, #8]
    // 0x93fbac: str             x0, [SP]
    // 0x93fbb0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93fbb0: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93fbb4: r0 = resolveAs()
    //     0x93fbb4: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93fbb8: cmp             w0, NULL
    // 0x93fbbc: b.ne            #0x93fbc8
    // 0x93fbc0: r0 = Instance_UnderlineInputBorder
    //     0x93fbc0: add             x0, PP, #0x41, lsl #12  ; [pp+0x419c0] Obj!UnderlineInputBorder@c2fa21
    //     0x93fbc4: ldr             x0, [x0, #0x9c0]
    // 0x93fbc8: stur            x0, [fp, #-8]
    // 0x93fbcc: ldr             x16, [fp, #0x20]
    // 0x93fbd0: str             x16, [SP]
    // 0x93fbd4: r0 = decoration()
    //     0x93fbd4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fbd8: ldur            x0, [fp, #-8]
    // 0x93fbdc: LoadField: r1 = r0->field_7
    //     0x93fbdc: ldur            w1, [x0, #7]
    // 0x93fbe0: DecompressPointer r1
    //     0x93fbe0: add             x1, x1, HEAP, lsl #32
    // 0x93fbe4: r16 = Instance_BorderSide
    //     0x93fbe4: add             x16, PP, #0x11, lsl #12  ; [pp+0x11f78] Obj!BorderSide@c36a21
    //     0x93fbe8: ldr             x16, [x16, #0xf78]
    // 0x93fbec: stp             x16, x1, [SP]
    // 0x93fbf0: r0 = ==()
    //     0x93fbf0: bl              #0xbcbba8  ; [package:flutter/src/painting/borders.dart] BorderSide::==
    // 0x93fbf4: tbnz            w0, #4, #0x93fc08
    // 0x93fbf8: ldur            x0, [fp, #-8]
    // 0x93fbfc: LeaveFrame
    //     0x93fbfc: mov             SP, fp
    //     0x93fc00: ldp             fp, lr, [SP], #0x10
    // 0x93fc04: ret
    //     0x93fc04: ret             
    // 0x93fc08: ldr             x0, [fp, #0x18]
    // 0x93fc0c: LoadField: r1 = r0->field_2b
    //     0x93fc0c: ldur            w1, [x0, #0x2b]
    // 0x93fc10: DecompressPointer r1
    //     0x93fc10: add             x1, x1, HEAP, lsl #32
    // 0x93fc14: tbnz            w1, #4, #0x93fdbc
    // 0x93fc18: ldr             x16, [fp, #0x20]
    // 0x93fc1c: str             x16, [SP]
    // 0x93fc20: r0 = decoration()
    //     0x93fc20: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fc24: LoadField: r1 = r0->field_9b
    //     0x93fc24: ldur            w1, [x0, #0x9b]
    // 0x93fc28: DecompressPointer r1
    //     0x93fc28: add             x1, x1, HEAP, lsl #32
    // 0x93fc2c: cmp             w1, NULL
    // 0x93fc30: b.eq            #0x93fed8
    // 0x93fc34: tbnz            w1, #4, #0x93fcf8
    // 0x93fc38: ldr             x0, [fp, #0x10]
    // 0x93fc3c: r1 = LoadClassIdInstr(r0)
    //     0x93fc3c: ldur            x1, [x0, #-1]
    //     0x93fc40: ubfx            x1, x1, #0xc, #0x14
    // 0x93fc44: lsl             x1, x1, #1
    // 0x93fc48: r17 = 5524
    //     0x93fc48: movz            x17, #0x1594
    // 0x93fc4c: cmp             w1, w17
    // 0x93fc50: b.eq            #0x93fc94
    // 0x93fc54: r17 = 5526
    //     0x93fc54: movz            x17, #0x1596
    // 0x93fc58: cmp             w1, w17
    // 0x93fc5c: b.ne            #0x93fc94
    // 0x93fc60: r1 = 1
    //     0x93fc60: movz            x1, #0x1
    // 0x93fc64: r0 = AllocateContext()
    //     0x93fc64: bl              #0xc5def4  ; AllocateContextStub
    // 0x93fc68: mov             x1, x0
    // 0x93fc6c: ldr             x0, [fp, #0x10]
    // 0x93fc70: StoreField: r1->field_f = r0
    //     0x93fc70: stur            w0, [x1, #0xf]
    // 0x93fc74: mov             x2, x1
    // 0x93fc78: r1 = Function '<anonymous closure>':.
    //     0x93fc78: add             x1, PP, #0xf, lsl #12  ; [pp+0xf648] AnonymousClosure: (0x940ba8), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93fc7c: ldr             x1, [x1, #0x648]
    // 0x93fc80: r0 = AllocateClosure()
    //     0x93fc80: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93fc84: str             x0, [SP]
    // 0x93fc88: r0 = resolveWith()
    //     0x93fc88: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x93fc8c: mov             x1, x0
    // 0x93fc90: b               #0x93fc9c
    // 0x93fc94: LoadField: r1 = r0->field_5b
    //     0x93fc94: ldur            w1, [x0, #0x5b]
    // 0x93fc98: DecompressPointer r1
    //     0x93fc98: add             x1, x1, HEAP, lsl #32
    // 0x93fc9c: ldur            x0, [fp, #-8]
    // 0x93fca0: stur            x1, [fp, #-0x10]
    // 0x93fca4: ldr             x16, [fp, #0x20]
    // 0x93fca8: str             x16, [SP]
    // 0x93fcac: r0 = materialState()
    //     0x93fcac: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93fcb0: r16 = <BorderSide?>
    //     0x93fcb0: add             x16, PP, #0x34, lsl #12  ; [pp+0x34ff8] TypeArguments: <BorderSide?>
    //     0x93fcb4: ldr             x16, [x16, #0xff8]
    // 0x93fcb8: ldur            lr, [fp, #-0x10]
    // 0x93fcbc: stp             lr, x16, [SP, #8]
    // 0x93fcc0: str             x0, [SP]
    // 0x93fcc4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93fcc4: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93fcc8: r0 = resolveAs()
    //     0x93fcc8: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93fccc: ldur            x1, [fp, #-8]
    // 0x93fcd0: r2 = LoadClassIdInstr(r1)
    //     0x93fcd0: ldur            x2, [x1, #-1]
    //     0x93fcd4: ubfx            x2, x2, #0xc, #0x14
    // 0x93fcd8: stp             x0, x1, [SP]
    // 0x93fcdc: mov             x0, x2
    // 0x93fce0: r0 = GDT[cid_x0 + -0xffd]()
    //     0x93fce0: sub             lr, x0, #0xffd
    //     0x93fce4: ldr             lr, [x21, lr, lsl #3]
    //     0x93fce8: blr             lr
    // 0x93fcec: LeaveFrame
    //     0x93fcec: mov             SP, fp
    //     0x93fcf0: ldp             fp, lr, [SP], #0x10
    // 0x93fcf4: ret
    //     0x93fcf4: ret             
    // 0x93fcf8: ldr             x0, [fp, #0x10]
    // 0x93fcfc: ldur            x1, [fp, #-8]
    // 0x93fd00: r2 = LoadClassIdInstr(r0)
    //     0x93fd00: ldur            x2, [x0, #-1]
    //     0x93fd04: ubfx            x2, x2, #0xc, #0x14
    // 0x93fd08: lsl             x2, x2, #1
    // 0x93fd0c: r17 = 5524
    //     0x93fd0c: movz            x17, #0x1594
    // 0x93fd10: cmp             w2, w17
    // 0x93fd14: b.eq            #0x93fd58
    // 0x93fd18: r17 = 5526
    //     0x93fd18: movz            x17, #0x1596
    // 0x93fd1c: cmp             w2, w17
    // 0x93fd20: b.ne            #0x93fd58
    // 0x93fd24: r1 = 1
    //     0x93fd24: movz            x1, #0x1
    // 0x93fd28: r0 = AllocateContext()
    //     0x93fd28: bl              #0xc5def4  ; AllocateContextStub
    // 0x93fd2c: mov             x1, x0
    // 0x93fd30: ldr             x0, [fp, #0x10]
    // 0x93fd34: StoreField: r1->field_f = r0
    //     0x93fd34: stur            w0, [x1, #0xf]
    // 0x93fd38: mov             x2, x1
    // 0x93fd3c: r1 = Function '<anonymous closure>':.
    //     0x93fd3c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf650] AnonymousClosure: (0x940664), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x93fd40: ldr             x1, [x1, #0x650]
    // 0x93fd44: r0 = AllocateClosure()
    //     0x93fd44: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x93fd48: str             x0, [SP]
    // 0x93fd4c: r0 = resolveWith()
    //     0x93fd4c: bl              #0x74dad4  ; [package:flutter/src/material/material_state.dart] MaterialStateBorderSide::resolveWith
    // 0x93fd50: mov             x1, x0
    // 0x93fd54: b               #0x93fd60
    // 0x93fd58: LoadField: r1 = r0->field_57
    //     0x93fd58: ldur            w1, [x0, #0x57]
    // 0x93fd5c: DecompressPointer r1
    //     0x93fd5c: add             x1, x1, HEAP, lsl #32
    // 0x93fd60: ldur            x0, [fp, #-8]
    // 0x93fd64: stur            x1, [fp, #-0x10]
    // 0x93fd68: ldr             x16, [fp, #0x20]
    // 0x93fd6c: str             x16, [SP]
    // 0x93fd70: r0 = materialState()
    //     0x93fd70: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x93fd74: r16 = <BorderSide?>
    //     0x93fd74: add             x16, PP, #0x34, lsl #12  ; [pp+0x34ff8] TypeArguments: <BorderSide?>
    //     0x93fd78: ldr             x16, [x16, #0xff8]
    // 0x93fd7c: ldur            lr, [fp, #-0x10]
    // 0x93fd80: stp             lr, x16, [SP, #8]
    // 0x93fd84: str             x0, [SP]
    // 0x93fd88: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x93fd88: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x93fd8c: r0 = resolveAs()
    //     0x93fd8c: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x93fd90: ldur            x1, [fp, #-8]
    // 0x93fd94: r2 = LoadClassIdInstr(r1)
    //     0x93fd94: ldur            x2, [x1, #-1]
    //     0x93fd98: ubfx            x2, x2, #0xc, #0x14
    // 0x93fd9c: stp             x0, x1, [SP]
    // 0x93fda0: mov             x0, x2
    // 0x93fda4: r0 = GDT[cid_x0 + -0xffd]()
    //     0x93fda4: sub             lr, x0, #0xffd
    //     0x93fda8: ldr             lr, [x21, lr, lsl #3]
    //     0x93fdac: blr             lr
    // 0x93fdb0: LeaveFrame
    //     0x93fdb0: mov             SP, fp
    //     0x93fdb4: ldp             fp, lr, [SP], #0x10
    // 0x93fdb8: ret
    //     0x93fdb8: ret             
    // 0x93fdbc: ldur            x1, [fp, #-8]
    // 0x93fdc0: ldr             x16, [fp, #0x20]
    // 0x93fdc4: stp             x0, x16, [SP]
    // 0x93fdc8: r0 = _getDefaultM2BorderColor()
    //     0x93fdc8: bl              #0x93fee0  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_getDefaultM2BorderColor
    // 0x93fdcc: stur            x0, [fp, #-0x10]
    // 0x93fdd0: ldr             x16, [fp, #0x20]
    // 0x93fdd4: str             x16, [SP]
    // 0x93fdd8: r0 = decoration()
    //     0x93fdd8: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fddc: LoadField: r1 = r0->field_5b
    //     0x93fddc: ldur            w1, [x0, #0x5b]
    // 0x93fde0: DecompressPointer r1
    //     0x93fde0: add             x1, x1, HEAP, lsl #32
    // 0x93fde4: tbz             w1, #4, #0x93fe38
    // 0x93fde8: ldr             x16, [fp, #0x20]
    // 0x93fdec: str             x16, [SP]
    // 0x93fdf0: r0 = decoration()
    //     0x93fdf0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fdf4: LoadField: r1 = r0->field_bf
    //     0x93fdf4: ldur            w1, [x0, #0xbf]
    // 0x93fdf8: DecompressPointer r1
    //     0x93fdf8: add             x1, x1, HEAP, lsl #32
    // 0x93fdfc: r0 = LoadClassIdInstr(r1)
    //     0x93fdfc: ldur            x0, [x1, #-1]
    //     0x93fe00: ubfx            x0, x0, #0xc, #0x14
    // 0x93fe04: r16 = Instance__NoInputBorder
    //     0x93fe04: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1fdd8] Obj!_NoInputBorder@c2fa31
    //     0x93fe08: ldr             x16, [x16, #0xdd8]
    // 0x93fe0c: stp             x16, x1, [SP]
    // 0x93fe10: mov             lr, x0
    // 0x93fe14: ldr             lr, [x21, lr, lsl #3]
    // 0x93fe18: blr             lr
    // 0x93fe1c: tbz             w0, #4, #0x93fe38
    // 0x93fe20: ldr             x16, [fp, #0x20]
    // 0x93fe24: str             x16, [SP]
    // 0x93fe28: r0 = decoration()
    //     0x93fe28: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fe2c: LoadField: r1 = r0->field_c3
    //     0x93fe2c: ldur            w1, [x0, #0xc3]
    // 0x93fe30: DecompressPointer r1
    //     0x93fe30: add             x1, x1, HEAP, lsl #32
    // 0x93fe34: tbz             w1, #4, #0x93fe40
    // 0x93fe38: d0 = 0.000000
    //     0x93fe38: eor             v0.16b, v0.16b, v0.16b
    // 0x93fe3c: b               #0x93fe6c
    // 0x93fe40: ldr             x0, [fp, #0x20]
    // 0x93fe44: LoadField: r1 = r0->field_b
    //     0x93fe44: ldur            w1, [x0, #0xb]
    // 0x93fe48: DecompressPointer r1
    //     0x93fe48: add             x1, x1, HEAP, lsl #32
    // 0x93fe4c: cmp             w1, NULL
    // 0x93fe50: b.eq            #0x93fedc
    // 0x93fe54: LoadField: r0 = r1->field_1b
    //     0x93fe54: ldur            w0, [x1, #0x1b]
    // 0x93fe58: DecompressPointer r0
    //     0x93fe58: add             x0, x0, HEAP, lsl #32
    // 0x93fe5c: tbnz            w0, #4, #0x93fe68
    // 0x93fe60: d0 = 2.000000
    //     0x93fe60: fmov            d0, #2.00000000
    // 0x93fe64: b               #0x93fe6c
    // 0x93fe68: d0 = 1.000000
    //     0x93fe68: fmov            d0, #1.00000000
    // 0x93fe6c: ldur            x1, [fp, #-8]
    // 0x93fe70: ldur            x0, [fp, #-0x10]
    // 0x93fe74: stur            d0, [fp, #-0x18]
    // 0x93fe78: r0 = BorderSide()
    //     0x93fe78: bl              #0x5acc08  ; AllocateBorderSideStub -> BorderSide (size=0x20)
    // 0x93fe7c: mov             x1, x0
    // 0x93fe80: ldur            x0, [fp, #-0x10]
    // 0x93fe84: StoreField: r1->field_7 = r0
    //     0x93fe84: stur            w0, [x1, #7]
    // 0x93fe88: ldur            d0, [fp, #-0x18]
    // 0x93fe8c: StoreField: r1->field_b = d0
    //     0x93fe8c: stur            d0, [x1, #0xb]
    // 0x93fe90: r0 = Instance_BorderStyle
    //     0x93fe90: add             x0, PP, #0xf, lsl #12  ; [pp+0xf658] Obj!BorderStyle@c43fd1
    //     0x93fe94: ldr             x0, [x0, #0x658]
    // 0x93fe98: StoreField: r1->field_13 = r0
    //     0x93fe98: stur            w0, [x1, #0x13]
    // 0x93fe9c: d0 = -1.000000
    //     0x93fe9c: fmov            d0, #-1.00000000
    // 0x93fea0: ArrayStore: r1[0] = d0  ; List_8
    //     0x93fea0: stur            d0, [x1, #0x17]
    // 0x93fea4: ldur            x0, [fp, #-8]
    // 0x93fea8: r2 = LoadClassIdInstr(r0)
    //     0x93fea8: ldur            x2, [x0, #-1]
    //     0x93feac: ubfx            x2, x2, #0xc, #0x14
    // 0x93feb0: stp             x1, x0, [SP]
    // 0x93feb4: mov             x0, x2
    // 0x93feb8: r0 = GDT[cid_x0 + -0xffd]()
    //     0x93feb8: sub             lr, x0, #0xffd
    //     0x93febc: ldr             lr, [x21, lr, lsl #3]
    //     0x93fec0: blr             lr
    // 0x93fec4: LeaveFrame
    //     0x93fec4: mov             SP, fp
    //     0x93fec8: ldp             fp, lr, [SP], #0x10
    // 0x93fecc: ret
    //     0x93fecc: ret             
    // 0x93fed0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93fed0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93fed4: b               #0x93fb78
    // 0x93fed8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93fed8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93fedc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93fedc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getDefaultM2BorderColor(/* No info */) {
    // ** addr: 0x93fee0, size: 0x264
    // 0x93fee0: EnterFrame
    //     0x93fee0: stp             fp, lr, [SP, #-0x10]!
    //     0x93fee4: mov             fp, SP
    // 0x93fee8: AllocStack(0x18)
    //     0x93fee8: sub             SP, SP, #0x18
    // 0x93feec: CheckStackOverflow
    //     0x93feec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93fef0: cmp             SP, x16
    //     0x93fef4: b.ls            #0x940130
    // 0x93fef8: ldr             x16, [fp, #0x18]
    // 0x93fefc: str             x16, [SP]
    // 0x93ff00: r0 = decoration()
    //     0x93ff00: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93ff04: LoadField: r1 = r0->field_c3
    //     0x93ff04: ldur            w1, [x0, #0xc3]
    // 0x93ff08: DecompressPointer r1
    //     0x93ff08: add             x1, x1, HEAP, lsl #32
    // 0x93ff0c: tbz             w1, #4, #0x93ffe4
    // 0x93ff10: ldr             x0, [fp, #0x18]
    // 0x93ff14: LoadField: r1 = r0->field_b
    //     0x93ff14: ldur            w1, [x0, #0xb]
    // 0x93ff18: DecompressPointer r1
    //     0x93ff18: add             x1, x1, HEAP, lsl #32
    // 0x93ff1c: cmp             w1, NULL
    // 0x93ff20: b.eq            #0x940138
    // 0x93ff24: LoadField: r2 = r1->field_1b
    //     0x93ff24: ldur            w2, [x1, #0x1b]
    // 0x93ff28: DecompressPointer r2
    //     0x93ff28: add             x2, x2, HEAP, lsl #32
    // 0x93ff2c: tbz             w2, #4, #0x93ffdc
    // 0x93ff30: str             x0, [SP]
    // 0x93ff34: r0 = decoration()
    //     0x93ff34: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93ff38: LoadField: r1 = r0->field_9b
    //     0x93ff38: ldur            w1, [x0, #0x9b]
    // 0x93ff3c: DecompressPointer r1
    //     0x93ff3c: add             x1, x1, HEAP, lsl #32
    // 0x93ff40: cmp             w1, NULL
    // 0x93ff44: b.eq            #0x93ffc0
    // 0x93ff48: tbnz            w1, #4, #0x93ffc0
    // 0x93ff4c: ldr             x16, [fp, #0x18]
    // 0x93ff50: str             x16, [SP]
    // 0x93ff54: r0 = decoration()
    //     0x93ff54: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93ff58: LoadField: r1 = r0->field_bf
    //     0x93ff58: ldur            w1, [x0, #0xbf]
    // 0x93ff5c: DecompressPointer r1
    //     0x93ff5c: add             x1, x1, HEAP, lsl #32
    // 0x93ff60: cmp             w1, NULL
    // 0x93ff64: b.ne            #0x93ff70
    // 0x93ff68: r0 = Null
    //     0x93ff68: mov             x0, NULL
    // 0x93ff6c: b               #0x93ffa8
    // 0x93ff70: r0 = LoadClassIdInstr(r1)
    //     0x93ff70: ldur            x0, [x1, #-1]
    //     0x93ff74: ubfx            x0, x0, #0xc, #0x14
    // 0x93ff78: lsl             x0, x0, #1
    // 0x93ff7c: r17 = 4692
    //     0x93ff7c: movz            x17, #0x1254
    // 0x93ff80: cmp             w0, w17
    // 0x93ff84: b.ne            #0x93ff90
    // 0x93ff88: r0 = true
    //     0x93ff88: add             x0, NULL, #0x20  ; true
    // 0x93ff8c: b               #0x93ffa8
    // 0x93ff90: r17 = 4694
    //     0x93ff90: movz            x17, #0x1256
    // 0x93ff94: cmp             w0, w17
    // 0x93ff98: b.ne            #0x93ffa4
    // 0x93ff9c: r0 = false
    //     0x93ff9c: add             x0, NULL, #0x30  ; false
    // 0x93ffa0: b               #0x93ffa8
    // 0x93ffa4: r0 = false
    //     0x93ffa4: add             x0, NULL, #0x30  ; false
    // 0x93ffa8: cmp             w0, NULL
    // 0x93ffac: b.eq            #0x93ffb4
    // 0x93ffb0: tbz             w0, #4, #0x93ffc0
    // 0x93ffb4: r0 = Instance_Color
    //     0x93ffb4: add             x0, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x93ffb8: ldr             x0, [x0, #0x4a0]
    // 0x93ffbc: b               #0x93ffd0
    // 0x93ffc0: ldr             x0, [fp, #0x10]
    // 0x93ffc4: LoadField: r1 = r0->field_47
    //     0x93ffc4: ldur            w1, [x0, #0x47]
    // 0x93ffc8: DecompressPointer r1
    //     0x93ffc8: add             x1, x1, HEAP, lsl #32
    // 0x93ffcc: mov             x0, x1
    // 0x93ffd0: LeaveFrame
    //     0x93ffd0: mov             SP, fp
    //     0x93ffd4: ldp             fp, lr, [SP], #0x10
    // 0x93ffd8: ret
    //     0x93ffd8: ret             
    // 0x93ffdc: ldr             x0, [fp, #0x10]
    // 0x93ffe0: b               #0x93ffe8
    // 0x93ffe4: ldr             x0, [fp, #0x10]
    // 0x93ffe8: ldr             x16, [fp, #0x18]
    // 0x93ffec: str             x16, [SP]
    // 0x93fff0: r0 = decoration()
    //     0x93fff0: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x93fff4: LoadField: r1 = r0->field_3f
    //     0x93fff4: ldur            w1, [x0, #0x3f]
    // 0x93fff8: DecompressPointer r1
    //     0x93fff8: add             x1, x1, HEAP, lsl #32
    // 0x93fffc: cmp             w1, NULL
    // 0x940000: b.eq            #0x940024
    // 0x940004: ldr             x0, [fp, #0x10]
    // 0x940008: LoadField: r1 = r0->field_3f
    //     0x940008: ldur            w1, [x0, #0x3f]
    // 0x94000c: DecompressPointer r1
    //     0x94000c: add             x1, x1, HEAP, lsl #32
    // 0x940010: LoadField: r0 = r1->field_3b
    //     0x940010: ldur            w0, [x1, #0x3b]
    // 0x940014: DecompressPointer r0
    //     0x940014: add             x0, x0, HEAP, lsl #32
    // 0x940018: LeaveFrame
    //     0x940018: mov             SP, fp
    //     0x94001c: ldp             fp, lr, [SP], #0x10
    // 0x940020: ret
    //     0x940020: ret             
    // 0x940024: ldr             x1, [fp, #0x18]
    // 0x940028: ldr             x0, [fp, #0x10]
    // 0x94002c: LoadField: r2 = r1->field_b
    //     0x94002c: ldur            w2, [x1, #0xb]
    // 0x940030: DecompressPointer r2
    //     0x940030: add             x2, x2, HEAP, lsl #32
    // 0x940034: cmp             w2, NULL
    // 0x940038: b.eq            #0x94013c
    // 0x94003c: LoadField: r3 = r2->field_1b
    //     0x94003c: ldur            w3, [x2, #0x1b]
    // 0x940040: DecompressPointer r3
    //     0x940040: add             x3, x3, HEAP, lsl #32
    // 0x940044: tbnz            w3, #4, #0x940064
    // 0x940048: LoadField: r1 = r0->field_3f
    //     0x940048: ldur            w1, [x0, #0x3f]
    // 0x94004c: DecompressPointer r1
    //     0x94004c: add             x1, x1, HEAP, lsl #32
    // 0x940050: LoadField: r0 = r1->field_b
    //     0x940050: ldur            w0, [x1, #0xb]
    // 0x940054: DecompressPointer r0
    //     0x940054: add             x0, x0, HEAP, lsl #32
    // 0x940058: LeaveFrame
    //     0x940058: mov             SP, fp
    //     0x94005c: ldp             fp, lr, [SP], #0x10
    // 0x940060: ret
    //     0x940060: ret             
    // 0x940064: str             x1, [SP]
    // 0x940068: r0 = decoration()
    //     0x940068: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x94006c: LoadField: r1 = r0->field_9b
    //     0x94006c: ldur            w1, [x0, #0x9b]
    // 0x940070: DecompressPointer r1
    //     0x940070: add             x1, x1, HEAP, lsl #32
    // 0x940074: cmp             w1, NULL
    // 0x940078: b.eq            #0x940140
    // 0x94007c: tbnz            w1, #4, #0x94009c
    // 0x940080: ldr             x0, [fp, #0x10]
    // 0x940084: LoadField: r1 = r0->field_57
    //     0x940084: ldur            w1, [x0, #0x57]
    // 0x940088: DecompressPointer r1
    //     0x940088: add             x1, x1, HEAP, lsl #32
    // 0x94008c: mov             x0, x1
    // 0x940090: LeaveFrame
    //     0x940090: mov             SP, fp
    //     0x940094: ldp             fp, lr, [SP], #0x10
    // 0x940098: ret
    //     0x940098: ret             
    // 0x94009c: ldr             x0, [fp, #0x10]
    // 0x9400a0: d0 = 0.380000
    //     0x9400a0: add             x17, PP, #0xf, lsl #12  ; [pp+0xf468] IMM: double(0.38) from 0x3fd851eb851eb852
    //     0x9400a4: ldr             d0, [x17, #0x468]
    // 0x9400a8: LoadField: r1 = r0->field_3f
    //     0x9400a8: ldur            w1, [x0, #0x3f]
    // 0x9400ac: DecompressPointer r1
    //     0x9400ac: add             x1, x1, HEAP, lsl #32
    // 0x9400b0: LoadField: r2 = r1->field_57
    //     0x9400b0: ldur            w2, [x1, #0x57]
    // 0x9400b4: DecompressPointer r2
    //     0x9400b4: add             x2, x2, HEAP, lsl #32
    // 0x9400b8: str             x2, [SP, #8]
    // 0x9400bc: str             d0, [SP]
    // 0x9400c0: r0 = withOpacity()
    //     0x9400c0: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x9400c4: stur            x0, [fp, #-8]
    // 0x9400c8: ldr             x16, [fp, #0x18]
    // 0x9400cc: str             x16, [SP]
    // 0x9400d0: r0 = isHovering()
    //     0x9400d0: bl              #0x93f654  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::isHovering
    // 0x9400d4: tbnz            w0, #4, #0x940120
    // 0x9400d8: ldr             x0, [fp, #0x10]
    // 0x9400dc: ldr             x16, [fp, #0x18]
    // 0x9400e0: str             x16, [SP]
    // 0x9400e4: r0 = decoration()
    //     0x9400e4: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x9400e8: ldr             x0, [fp, #0x10]
    // 0x9400ec: LoadField: r1 = r0->field_5b
    //     0x9400ec: ldur            w1, [x0, #0x5b]
    // 0x9400f0: DecompressPointer r1
    //     0x9400f0: add             x1, x1, HEAP, lsl #32
    // 0x9400f4: str             x1, [SP, #8]
    // 0x9400f8: d0 = 0.120000
    //     0x9400f8: add             x17, PP, #0xb, lsl #12  ; [pp+0xbb60] IMM: double(0.12) from 0x3fbeb851eb851eb8
    //     0x9400fc: ldr             d0, [x17, #0xb60]
    // 0x940100: str             d0, [SP]
    // 0x940104: r0 = withOpacity()
    //     0x940104: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x940108: ldur            x16, [fp, #-8]
    // 0x94010c: stp             x16, x0, [SP]
    // 0x940110: r0 = alphaBlend()
    //     0x940110: bl              #0x940144  ; [dart:ui] Color::alphaBlend
    // 0x940114: LeaveFrame
    //     0x940114: mov             SP, fp
    //     0x940118: ldp             fp, lr, [SP], #0x10
    // 0x94011c: ret
    //     0x94011c: ret             
    // 0x940120: ldur            x0, [fp, #-8]
    // 0x940124: LeaveFrame
    //     0x940124: mov             SP, fp
    //     0x940128: ldp             fp, lr, [SP], #0x10
    // 0x94012c: ret
    //     0x94012c: ret             
    // 0x940130: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x940130: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x940134: b               #0x93fef8
    // 0x940138: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x940138: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x94013c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x94013c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x940140: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x940140: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _hasInlineLabel(/* No info */) {
    // ** addr: 0x94111c, size: 0x88
    // 0x94111c: EnterFrame
    //     0x94111c: stp             fp, lr, [SP, #-0x10]!
    //     0x941120: mov             fp, SP
    // 0x941124: AllocStack(0x8)
    //     0x941124: sub             SP, SP, #8
    // 0x941128: CheckStackOverflow
    //     0x941128: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x94112c: cmp             SP, x16
    //     0x941130: b.ls            #0x941198
    // 0x941134: ldr             x0, [fp, #0x10]
    // 0x941138: LoadField: r1 = r0->field_b
    //     0x941138: ldur            w1, [x0, #0xb]
    // 0x94113c: DecompressPointer r1
    //     0x94113c: add             x1, x1, HEAP, lsl #32
    // 0x941140: cmp             w1, NULL
    // 0x941144: b.eq            #0x9411a0
    // 0x941148: LoadField: r2 = r1->field_27
    //     0x941148: ldur            w2, [x1, #0x27]
    // 0x94114c: DecompressPointer r2
    //     0x94114c: add             x2, x2, HEAP, lsl #32
    // 0x941150: tbnz            w2, #4, #0x941188
    // 0x941154: LoadField: r2 = r1->field_1b
    //     0x941154: ldur            w2, [x1, #0x1b]
    // 0x941158: DecompressPointer r2
    //     0x941158: add             x2, x2, HEAP, lsl #32
    // 0x94115c: tbnz            w2, #4, #0x941174
    // 0x941160: LoadField: r2 = r1->field_b
    //     0x941160: ldur            w2, [x1, #0xb]
    // 0x941164: DecompressPointer r2
    //     0x941164: add             x2, x2, HEAP, lsl #32
    // 0x941168: LoadField: r1 = r2->field_c3
    //     0x941168: ldur            w1, [x2, #0xc3]
    // 0x94116c: DecompressPointer r1
    //     0x94116c: add             x1, x1, HEAP, lsl #32
    // 0x941170: tbz             w1, #4, #0x941188
    // 0x941174: str             x0, [SP]
    // 0x941178: r0 = decoration()
    //     0x941178: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x94117c: ldr             x16, [fp, #0x10]
    // 0x941180: str             x16, [SP]
    // 0x941184: r0 = decoration()
    //     0x941184: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x941188: r0 = false
    //     0x941188: add             x0, NULL, #0x30  ; false
    // 0x94118c: LeaveFrame
    //     0x94118c: mov             SP, fp
    //     0x941190: ldp             fp, lr, [SP], #0x10
    // 0x941194: ret
    //     0x941194: ret             
    // 0x941198: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x941198: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x94119c: b               #0x941134
    // 0x9411a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x9411a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getInlineHintStyle(/* No info */) {
    // ** addr: 0x9411a4, size: 0x1cc
    // 0x9411a4: EnterFrame
    //     0x9411a4: stp             fp, lr, [SP, #-0x10]!
    //     0x9411a8: mov             fp, SP
    // 0x9411ac: AllocStack(0x28)
    //     0x9411ac: sub             SP, SP, #0x28
    // 0x9411b0: CheckStackOverflow
    //     0x9411b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x9411b4: cmp             SP, x16
    //     0x9411b8: b.ls            #0x941360
    // 0x9411bc: ldr             x0, [fp, #0x10]
    // 0x9411c0: r1 = LoadClassIdInstr(r0)
    //     0x9411c0: ldur            x1, [x0, #-1]
    //     0x9411c4: ubfx            x1, x1, #0xc, #0x14
    // 0x9411c8: lsl             x1, x1, #1
    // 0x9411cc: r17 = 5524
    //     0x9411cc: movz            x17, #0x1594
    // 0x9411d0: cmp             w1, w17
    // 0x9411d4: b.ne            #0x9411e8
    // 0x9411d8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x9411d8: ldur            w1, [x0, #0x17]
    // 0x9411dc: DecompressPointer r1
    //     0x9411dc: add             x1, x1, HEAP, lsl #32
    // 0x9411e0: mov             x0, x1
    // 0x9411e4: b               #0x941250
    // 0x9411e8: r17 = 5526
    //     0x9411e8: movz            x17, #0x1596
    // 0x9411ec: cmp             w1, w17
    // 0x9411f0: b.ne            #0x941224
    // 0x9411f4: r1 = 1
    //     0x9411f4: movz            x1, #0x1
    // 0x9411f8: r0 = AllocateContext()
    //     0x9411f8: bl              #0xc5def4  ; AllocateContextStub
    // 0x9411fc: mov             x1, x0
    // 0x941200: ldr             x0, [fp, #0x10]
    // 0x941204: StoreField: r1->field_f = r0
    //     0x941204: stur            w0, [x1, #0xf]
    // 0x941208: mov             x2, x1
    // 0x94120c: r1 = Function '<anonymous closure>':.
    //     0x94120c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5e8] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x941210: ldr             x1, [x1, #0x5e8]
    // 0x941214: r0 = AllocateClosure()
    //     0x941214: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x941218: str             x0, [SP]
    // 0x94121c: r0 = resolveWith()
    //     0x94121c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x941220: b               #0x941250
    // 0x941224: r1 = 1
    //     0x941224: movz            x1, #0x1
    // 0x941228: r0 = AllocateContext()
    //     0x941228: bl              #0xc5def4  ; AllocateContextStub
    // 0x94122c: mov             x1, x0
    // 0x941230: ldr             x0, [fp, #0x10]
    // 0x941234: StoreField: r1->field_f = r0
    //     0x941234: stur            w0, [x1, #0xf]
    // 0x941238: mov             x2, x1
    // 0x94123c: r1 = Function '<anonymous closure>':.
    //     0x94123c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5f0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x941240: ldr             x1, [x1, #0x5f0]
    // 0x941244: r0 = AllocateClosure()
    //     0x941244: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x941248: str             x0, [SP]
    // 0x94124c: r0 = resolveWith()
    //     0x94124c: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x941250: stur            x0, [fp, #-8]
    // 0x941254: ldr             x16, [fp, #0x20]
    // 0x941258: str             x16, [SP]
    // 0x94125c: r0 = materialState()
    //     0x94125c: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x941260: r16 = <TextStyle>
    //     0x941260: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2e620] TypeArguments: <TextStyle>
    //     0x941264: ldr             x16, [x16, #0x620]
    // 0x941268: ldur            lr, [fp, #-8]
    // 0x94126c: stp             lr, x16, [SP, #8]
    // 0x941270: str             x0, [SP]
    // 0x941274: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x941274: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x941278: r0 = resolveAs()
    //     0x941278: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x94127c: stur            x0, [fp, #-8]
    // 0x941280: ldr             x16, [fp, #0x20]
    // 0x941284: str             x16, [SP]
    // 0x941288: r0 = decoration()
    //     0x941288: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x94128c: LoadField: r1 = r0->field_2f
    //     0x94128c: ldur            w1, [x0, #0x2f]
    // 0x941290: DecompressPointer r1
    //     0x941290: add             x1, x1, HEAP, lsl #32
    // 0x941294: stur            x1, [fp, #-0x10]
    // 0x941298: ldr             x16, [fp, #0x20]
    // 0x94129c: str             x16, [SP]
    // 0x9412a0: r0 = materialState()
    //     0x9412a0: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x9412a4: r16 = <TextStyle?>
    //     0x9412a4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x9412a8: ldr             x16, [x16, #0x508]
    // 0x9412ac: ldur            lr, [fp, #-0x10]
    // 0x9412b0: stp             lr, x16, [SP, #8]
    // 0x9412b4: str             x0, [SP]
    // 0x9412b8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x9412b8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x9412bc: r0 = resolveAs()
    //     0x9412bc: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x9412c0: cmp             w0, NULL
    // 0x9412c4: b.ne            #0x9412f4
    // 0x9412c8: ldr             x16, [fp, #0x20]
    // 0x9412cc: str             x16, [SP]
    // 0x9412d0: r0 = materialState()
    //     0x9412d0: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x9412d4: r16 = <TextStyle?>
    //     0x9412d4: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x9412d8: ldr             x16, [x16, #0x508]
    // 0x9412dc: stp             NULL, x16, [SP, #8]
    // 0x9412e0: str             x0, [SP]
    // 0x9412e4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x9412e4: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x9412e8: r0 = resolveAs()
    //     0x9412e8: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x9412ec: r2 = Null
    //     0x9412ec: mov             x2, NULL
    // 0x9412f0: b               #0x9412f8
    // 0x9412f4: mov             x2, x0
    // 0x9412f8: ldr             x1, [fp, #0x20]
    // 0x9412fc: ldr             x0, [fp, #0x18]
    // 0x941300: stur            x2, [fp, #-0x10]
    // 0x941304: LoadField: r3 = r0->field_93
    //     0x941304: ldur            w3, [x0, #0x93]
    // 0x941308: DecompressPointer r3
    //     0x941308: add             x3, x3, HEAP, lsl #32
    // 0x94130c: LoadField: r0 = r3->field_23
    //     0x94130c: ldur            w0, [x3, #0x23]
    // 0x941310: DecompressPointer r0
    //     0x941310: add             x0, x0, HEAP, lsl #32
    // 0x941314: cmp             w0, NULL
    // 0x941318: b.eq            #0x941368
    // 0x94131c: LoadField: r3 = r1->field_b
    //     0x94131c: ldur            w3, [x1, #0xb]
    // 0x941320: DecompressPointer r3
    //     0x941320: add             x3, x3, HEAP, lsl #32
    // 0x941324: cmp             w3, NULL
    // 0x941328: b.eq            #0x94136c
    // 0x94132c: LoadField: r1 = r3->field_f
    //     0x94132c: ldur            w1, [x3, #0xf]
    // 0x941330: DecompressPointer r1
    //     0x941330: add             x1, x1, HEAP, lsl #32
    // 0x941334: stp             x1, x0, [SP]
    // 0x941338: r0 = merge()
    //     0x941338: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x94133c: ldur            x16, [fp, #-8]
    // 0x941340: stp             x16, x0, [SP]
    // 0x941344: r0 = merge()
    //     0x941344: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x941348: ldur            x16, [fp, #-0x10]
    // 0x94134c: stp             x16, x0, [SP]
    // 0x941350: r0 = merge()
    //     0x941350: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x941354: LeaveFrame
    //     0x941354: mov             SP, fp
    //     0x941358: ldp             fp, lr, [SP], #0x10
    // 0x94135c: ret
    //     0x94135c: ret             
    // 0x941360: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x941360: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x941364: b               #0x9411bc
    // 0x941368: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x941368: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x94136c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x94136c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getInlineLabelStyle(/* No info */) {
    // ** addr: 0x941468, size: 0x1c0
    // 0x941468: EnterFrame
    //     0x941468: stp             fp, lr, [SP, #-0x10]!
    //     0x94146c: mov             fp, SP
    // 0x941470: AllocStack(0x20)
    //     0x941470: sub             SP, SP, #0x20
    // 0x941474: CheckStackOverflow
    //     0x941474: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x941478: cmp             SP, x16
    //     0x94147c: b.ls            #0x941618
    // 0x941480: ldr             x0, [fp, #0x10]
    // 0x941484: r1 = LoadClassIdInstr(r0)
    //     0x941484: ldur            x1, [x0, #-1]
    //     0x941488: ubfx            x1, x1, #0xc, #0x14
    // 0x94148c: lsl             x1, x1, #1
    // 0x941490: r17 = 5524
    //     0x941490: movz            x17, #0x1594
    // 0x941494: cmp             w1, w17
    // 0x941498: b.ne            #0x9414ac
    // 0x94149c: LoadField: r1 = r0->field_7
    //     0x94149c: ldur            w1, [x0, #7]
    // 0x9414a0: DecompressPointer r1
    //     0x9414a0: add             x1, x1, HEAP, lsl #32
    // 0x9414a4: mov             x2, x1
    // 0x9414a8: b               #0x94151c
    // 0x9414ac: r17 = 5526
    //     0x9414ac: movz            x17, #0x1596
    // 0x9414b0: cmp             w1, w17
    // 0x9414b4: b.ne            #0x9414ec
    // 0x9414b8: r1 = 1
    //     0x9414b8: movz            x1, #0x1
    // 0x9414bc: r0 = AllocateContext()
    //     0x9414bc: bl              #0xc5def4  ; AllocateContextStub
    // 0x9414c0: mov             x1, x0
    // 0x9414c4: ldr             x0, [fp, #0x10]
    // 0x9414c8: StoreField: r1->field_f = r0
    //     0x9414c8: stur            w0, [x1, #0xf]
    // 0x9414cc: mov             x2, x1
    // 0x9414d0: r1 = Function '<anonymous closure>':.
    //     0x9414d0: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5b8] AnonymousClosure: (0x941628), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM3
    //     0x9414d4: ldr             x1, [x1, #0x5b8]
    // 0x9414d8: r0 = AllocateClosure()
    //     0x9414d8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x9414dc: str             x0, [SP]
    // 0x9414e0: r0 = resolveWith()
    //     0x9414e0: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x9414e4: mov             x2, x0
    // 0x9414e8: b               #0x94151c
    // 0x9414ec: r1 = 1
    //     0x9414ec: movz            x1, #0x1
    // 0x9414f0: r0 = AllocateContext()
    //     0x9414f0: bl              #0xc5def4  ; AllocateContextStub
    // 0x9414f4: mov             x1, x0
    // 0x9414f8: ldr             x0, [fp, #0x10]
    // 0x9414fc: StoreField: r1->field_f = r0
    //     0x9414fc: stur            w0, [x1, #0xf]
    // 0x941500: mov             x2, x1
    // 0x941504: r1 = Function '<anonymous closure>':.
    //     0x941504: add             x1, PP, #0xf, lsl #12  ; [pp+0xf5c0] AnonymousClosure: (0x941370), of [package:flutter/src/material/input_decorator.dart] _InputDecoratorDefaultsM2
    //     0x941508: ldr             x1, [x1, #0x5c0]
    // 0x94150c: r0 = AllocateClosure()
    //     0x94150c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x941510: str             x0, [SP]
    // 0x941514: r0 = resolveWith()
    //     0x941514: bl              #0x93e894  ; [package:flutter/src/material/material_state.dart] MaterialStateTextStyle::resolveWith
    // 0x941518: mov             x2, x0
    // 0x94151c: ldr             x1, [fp, #0x20]
    // 0x941520: ldr             x0, [fp, #0x18]
    // 0x941524: stur            x2, [fp, #-8]
    // 0x941528: str             x1, [SP]
    // 0x94152c: r0 = materialState()
    //     0x94152c: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x941530: r16 = <TextStyle>
    //     0x941530: add             x16, PP, #0x2e, lsl #12  ; [pp+0x2e620] TypeArguments: <TextStyle>
    //     0x941534: ldr             x16, [x16, #0x620]
    // 0x941538: ldur            lr, [fp, #-8]
    // 0x94153c: stp             lr, x16, [SP, #8]
    // 0x941540: str             x0, [SP]
    // 0x941544: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x941544: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x941548: r0 = resolveAs()
    //     0x941548: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x94154c: stur            x0, [fp, #-8]
    // 0x941550: ldr             x16, [fp, #0x20]
    // 0x941554: str             x16, [SP]
    // 0x941558: r0 = decoration()
    //     0x941558: bl              #0x8ae5ac  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::decoration
    // 0x94155c: ldr             x16, [fp, #0x20]
    // 0x941560: str             x16, [SP]
    // 0x941564: r0 = materialState()
    //     0x941564: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x941568: r16 = <TextStyle?>
    //     0x941568: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x94156c: ldr             x16, [x16, #0x508]
    // 0x941570: stp             NULL, x16, [SP, #8]
    // 0x941574: str             x0, [SP]
    // 0x941578: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x941578: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x94157c: r0 = resolveAs()
    //     0x94157c: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x941580: ldr             x16, [fp, #0x20]
    // 0x941584: str             x16, [SP]
    // 0x941588: r0 = materialState()
    //     0x941588: bl              #0x93e628  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::materialState
    // 0x94158c: r16 = <TextStyle?>
    //     0x94158c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf508] TypeArguments: <TextStyle?>
    //     0x941590: ldr             x16, [x16, #0x508]
    // 0x941594: stp             NULL, x16, [SP, #8]
    // 0x941598: str             x0, [SP]
    // 0x94159c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x94159c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x9415a0: r0 = resolveAs()
    //     0x9415a0: bl              #0x8446b4  ; [package:flutter/src/material/material_state.dart] MaterialStateProperty::resolveAs
    // 0x9415a4: ldr             x0, [fp, #0x18]
    // 0x9415a8: LoadField: r1 = r0->field_93
    //     0x9415a8: ldur            w1, [x0, #0x93]
    // 0x9415ac: DecompressPointer r1
    //     0x9415ac: add             x1, x1, HEAP, lsl #32
    // 0x9415b0: LoadField: r0 = r1->field_23
    //     0x9415b0: ldur            w0, [x1, #0x23]
    // 0x9415b4: DecompressPointer r0
    //     0x9415b4: add             x0, x0, HEAP, lsl #32
    // 0x9415b8: cmp             w0, NULL
    // 0x9415bc: b.eq            #0x941620
    // 0x9415c0: ldr             x1, [fp, #0x20]
    // 0x9415c4: LoadField: r2 = r1->field_b
    //     0x9415c4: ldur            w2, [x1, #0xb]
    // 0x9415c8: DecompressPointer r2
    //     0x9415c8: add             x2, x2, HEAP, lsl #32
    // 0x9415cc: cmp             w2, NULL
    // 0x9415d0: b.eq            #0x941624
    // 0x9415d4: LoadField: r1 = r2->field_f
    //     0x9415d4: ldur            w1, [x2, #0xf]
    // 0x9415d8: DecompressPointer r1
    //     0x9415d8: add             x1, x1, HEAP, lsl #32
    // 0x9415dc: stp             x1, x0, [SP]
    // 0x9415e0: r0 = merge()
    //     0x9415e0: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x9415e4: ldur            x16, [fp, #-8]
    // 0x9415e8: stp             x16, x0, [SP]
    // 0x9415ec: r0 = merge()
    //     0x9415ec: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x9415f0: stp             NULL, x0, [SP]
    // 0x9415f4: r0 = merge()
    //     0x9415f4: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x9415f8: r16 = 1.000000
    //     0x9415f8: ldr             x16, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x9415fc: stp             x16, x0, [SP]
    // 0x941600: r4 = const [0, 0x2, 0x2, 0x1, height, 0x1, null]
    //     0x941600: add             x4, PP, #0x1e, lsl #12  ; [pp+0x1e668] List(7) [0, 0x2, 0x2, 0x1, "height", 0x1, Null]
    //     0x941604: ldr             x4, [x4, #0x668]
    // 0x941608: r0 = copyWith()
    //     0x941608: bl              #0x60cbb0  ; [package:flutter/src/painting/text_style.dart] TextStyle::copyWith
    // 0x94160c: LeaveFrame
    //     0x94160c: mov             SP, fp
    //     0x941610: ldp             fp, lr, [SP], #0x10
    // 0x941614: ret
    //     0x941614: ret             
    // 0x941618: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x941618: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x94161c: b               #0x941480
    // 0x941620: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x941620: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x941624: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x941624: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa20db8, size: 0x2ec
    // 0xa20db8: EnterFrame
    //     0xa20db8: stp             fp, lr, [SP, #-0x10]!
    //     0xa20dbc: mov             fp, SP
    // 0xa20dc0: AllocStack(0x38)
    //     0xa20dc0: sub             SP, SP, #0x38
    // 0xa20dc4: CheckStackOverflow
    //     0xa20dc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa20dc8: cmp             SP, x16
    //     0xa20dcc: b.ls            #0xa2107c
    // 0xa20dd0: ldr             x0, [fp, #0x10]
    // 0xa20dd4: LoadField: r1 = r0->field_b
    //     0xa20dd4: ldur            w1, [x0, #0xb]
    // 0xa20dd8: DecompressPointer r1
    //     0xa20dd8: add             x1, x1, HEAP, lsl #32
    // 0xa20ddc: cmp             w1, NULL
    // 0xa20de0: b.eq            #0xa21084
    // 0xa20de4: LoadField: r2 = r1->field_b
    //     0xa20de4: ldur            w2, [x1, #0xb]
    // 0xa20de8: DecompressPointer r2
    //     0xa20de8: add             x2, x2, HEAP, lsl #32
    // 0xa20dec: LoadField: r3 = r2->field_4b
    //     0xa20dec: ldur            w3, [x2, #0x4b]
    // 0xa20df0: DecompressPointer r3
    //     0xa20df0: add             x3, x3, HEAP, lsl #32
    // 0xa20df4: r16 = Instance_FloatingLabelBehavior
    //     0xa20df4: add             x16, PP, #0x41, lsl #12  ; [pp+0x419f0] Obj!FloatingLabelBehavior@c44a11
    //     0xa20df8: ldr             x16, [x16, #0x9f0]
    // 0xa20dfc: cmp             w3, w16
    // 0xa20e00: b.ne            #0xa20e0c
    // 0xa20e04: r1 = true
    //     0xa20e04: add             x1, NULL, #0x20  ; true
    // 0xa20e08: b               #0xa20e54
    // 0xa20e0c: r16 = Instance_FloatingLabelBehavior
    //     0xa20e0c: add             x16, PP, #0x41, lsl #12  ; [pp+0x41a08] Obj!FloatingLabelBehavior@c449f1
    //     0xa20e10: ldr             x16, [x16, #0xa08]
    // 0xa20e14: cmp             w3, w16
    // 0xa20e18: b.eq            #0xa20e50
    // 0xa20e1c: LoadField: r3 = r1->field_27
    //     0xa20e1c: ldur            w3, [x1, #0x27]
    // 0xa20e20: DecompressPointer r3
    //     0xa20e20: add             x3, x3, HEAP, lsl #32
    // 0xa20e24: tbz             w3, #4, #0xa20e30
    // 0xa20e28: r1 = true
    //     0xa20e28: add             x1, NULL, #0x20  ; true
    // 0xa20e2c: b               #0xa20e54
    // 0xa20e30: LoadField: r3 = r1->field_1b
    //     0xa20e30: ldur            w3, [x1, #0x1b]
    // 0xa20e34: DecompressPointer r3
    //     0xa20e34: add             x3, x3, HEAP, lsl #32
    // 0xa20e38: tbnz            w3, #4, #0xa20e48
    // 0xa20e3c: LoadField: r1 = r2->field_c3
    //     0xa20e3c: ldur            w1, [x2, #0xc3]
    // 0xa20e40: DecompressPointer r1
    //     0xa20e40: add             x1, x1, HEAP, lsl #32
    // 0xa20e44: b               #0xa20e54
    // 0xa20e48: r1 = false
    //     0xa20e48: add             x1, NULL, #0x30  ; false
    // 0xa20e4c: b               #0xa20e54
    // 0xa20e50: r1 = false
    //     0xa20e50: add             x1, NULL, #0x30  ; false
    // 0xa20e54: tbnz            w1, #4, #0xa20e60
    // 0xa20e58: d0 = 1.000000
    //     0xa20e58: fmov            d0, #1.00000000
    // 0xa20e5c: b               #0xa20e64
    // 0xa20e60: d0 = 0.000000
    //     0xa20e60: eor             v0.16b, v0.16b, v0.16b
    // 0xa20e64: r2 = inline_Allocate_Double()
    //     0xa20e64: ldp             x2, x1, [THR, #0x50]  ; THR::top
    //     0xa20e68: add             x2, x2, #0x10
    //     0xa20e6c: cmp             x1, x2
    //     0xa20e70: b.ls            #0xa21088
    //     0xa20e74: str             x2, [THR, #0x50]  ; THR::top
    //     0xa20e78: sub             x2, x2, #0xf
    //     0xa20e7c: movz            x1, #0xd148
    //     0xa20e80: movk            x1, #0x3, lsl #16
    //     0xa20e84: stur            x1, [x2, #-1]
    // 0xa20e88: StoreField: r2->field_7 = d0
    //     0xa20e88: stur            d0, [x2, #7]
    // 0xa20e8c: stur            x2, [fp, #-8]
    // 0xa20e90: r1 = <double>
    //     0xa20e90: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20e94: r0 = AnimationController()
    //     0xa20e94: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa20e98: stur            x0, [fp, #-0x10]
    // 0xa20e9c: ldr             x16, [fp, #0x10]
    // 0xa20ea0: stp             x16, x0, [SP, #0x10]
    // 0xa20ea4: r16 = Instance_Duration
    //     0xa20ea4: add             x16, PP, #0x40, lsl #12  ; [pp+0x40e28] Obj!Duration@c47e41
    //     0xa20ea8: ldr             x16, [x16, #0xe28]
    // 0xa20eac: ldur            lr, [fp, #-8]
    // 0xa20eb0: stp             lr, x16, [SP]
    // 0xa20eb4: r4 = const [0, 0x4, 0x4, 0x2, duration, 0x2, value, 0x3, null]
    //     0xa20eb4: add             x4, PP, #0x24, lsl #12  ; [pp+0x241c8] List(9) [0, 0x4, 0x4, 0x2, "duration", 0x2, "value", 0x3, Null]
    //     0xa20eb8: ldr             x4, [x4, #0x1c8]
    // 0xa20ebc: r0 = AnimationController()
    //     0xa20ebc: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa20ec0: ldr             x0, [fp, #0x10]
    // 0xa20ec4: LoadField: r1 = r0->field_1b
    //     0xa20ec4: ldur            w1, [x0, #0x1b]
    // 0xa20ec8: DecompressPointer r1
    //     0xa20ec8: add             x1, x1, HEAP, lsl #32
    // 0xa20ecc: r16 = Sentinel
    //     0xa20ecc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa20ed0: cmp             w1, w16
    // 0xa20ed4: b.ne            #0xa20ee0
    // 0xa20ed8: mov             x1, x0
    // 0xa20edc: b               #0xa20ef4
    // 0xa20ee0: r16 = "_floatingLabelController@159019562"
    //     0xa20ee0: add             x16, PP, #0x41, lsl #12  ; [pp+0x41a10] "_floatingLabelController@159019562"
    //     0xa20ee4: ldr             x16, [x16, #0xa10]
    // 0xa20ee8: str             x16, [SP]
    // 0xa20eec: r0 = _throwFieldAlreadyInitialized()
    //     0xa20eec: bl              #0x4f06cc  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0xa20ef0: ldr             x1, [fp, #0x10]
    // 0xa20ef4: ldur            x0, [fp, #-0x10]
    // 0xa20ef8: StoreField: r1->field_1b = r0
    //     0xa20ef8: stur            w0, [x1, #0x1b]
    //     0xa20efc: ldurb           w16, [x1, #-1]
    //     0xa20f00: ldurb           w17, [x0, #-1]
    //     0xa20f04: and             x16, x17, x16, lsr #2
    //     0xa20f08: tst             x16, HEAP, lsr #32
    //     0xa20f0c: b.eq            #0xa20f14
    //     0xa20f10: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa20f14: r1 = 1
    //     0xa20f14: movz            x1, #0x1
    // 0xa20f18: r0 = AllocateContext()
    //     0xa20f18: bl              #0xc5def4  ; AllocateContextStub
    // 0xa20f1c: mov             x1, x0
    // 0xa20f20: ldr             x0, [fp, #0x10]
    // 0xa20f24: StoreField: r1->field_f = r0
    //     0xa20f24: stur            w0, [x1, #0xf]
    // 0xa20f28: mov             x2, x1
    // 0xa20f2c: r1 = Function '_handleChange@159019562':.
    //     0xa20f2c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41a18] AnonymousClosure: (0xa210a4), in [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_handleChange (0xa210ec)
    //     0xa20f30: ldr             x1, [x1, #0xa18]
    // 0xa20f34: r0 = AllocateClosure()
    //     0xa20f34: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa20f38: ldur            x16, [fp, #-0x10]
    // 0xa20f3c: stp             x0, x16, [SP]
    // 0xa20f40: r0 = addActionListener()
    //     0xa20f40: bl              #0xae8304  ; [package:flutter/src/widgets/actions.dart] Action::addActionListener
    // 0xa20f44: ldr             x0, [fp, #0x10]
    // 0xa20f48: LoadField: r2 = r0->field_1b
    //     0xa20f48: ldur            w2, [x0, #0x1b]
    // 0xa20f4c: DecompressPointer r2
    //     0xa20f4c: add             x2, x2, HEAP, lsl #32
    // 0xa20f50: stur            x2, [fp, #-8]
    // 0xa20f54: r1 = <double>
    //     0xa20f54: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20f58: r0 = FlippedCurve()
    //     0xa20f58: bl              #0x611994  ; AllocateFlippedCurveStub -> FlippedCurve (size=0x10)
    // 0xa20f5c: mov             x2, x0
    // 0xa20f60: r0 = Instance_Cubic
    //     0xa20f60: ldr             x0, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0xa20f64: stur            x2, [fp, #-0x10]
    // 0xa20f68: StoreField: r2->field_b = r0
    //     0xa20f68: stur            w0, [x2, #0xb]
    // 0xa20f6c: r1 = <double>
    //     0xa20f6c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20f70: r0 = CurvedAnimation()
    //     0xa20f70: bl              #0x611528  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0xa20f74: stur            x0, [fp, #-0x18]
    // 0xa20f78: r16 = Instance_Cubic
    //     0xa20f78: ldr             x16, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0xa20f7c: stp             x16, x0, [SP, #0x10]
    // 0xa20f80: ldur            x16, [fp, #-8]
    // 0xa20f84: ldur            lr, [fp, #-0x10]
    // 0xa20f88: stp             lr, x16, [SP]
    // 0xa20f8c: r4 = const [0, 0x4, 0x4, 0x3, reverseCurve, 0x3, null]
    //     0xa20f8c: add             x4, PP, #0x15, lsl #12  ; [pp+0x15f88] List(7) [0, 0x4, 0x4, 0x3, "reverseCurve", 0x3, Null]
    //     0xa20f90: ldr             x4, [x4, #0xf88]
    // 0xa20f94: r0 = CurvedAnimation()
    //     0xa20f94: bl              #0x611304  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0xa20f98: ldr             x0, [fp, #0x10]
    // 0xa20f9c: LoadField: r1 = r0->field_1f
    //     0xa20f9c: ldur            w1, [x0, #0x1f]
    // 0xa20fa0: DecompressPointer r1
    //     0xa20fa0: add             x1, x1, HEAP, lsl #32
    // 0xa20fa4: r16 = Sentinel
    //     0xa20fa4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa20fa8: cmp             w1, w16
    // 0xa20fac: b.ne            #0xa20fb8
    // 0xa20fb0: mov             x2, x0
    // 0xa20fb4: b               #0xa20fcc
    // 0xa20fb8: r16 = "_floatingLabelAnimation@159019562"
    //     0xa20fb8: add             x16, PP, #0x41, lsl #12  ; [pp+0x41a20] "_floatingLabelAnimation@159019562"
    //     0xa20fbc: ldr             x16, [x16, #0xa20]
    // 0xa20fc0: str             x16, [SP]
    // 0xa20fc4: r0 = _throwFieldAlreadyInitialized()
    //     0xa20fc4: bl              #0x4f06cc  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0xa20fc8: ldr             x2, [fp, #0x10]
    // 0xa20fcc: ldur            x0, [fp, #-0x18]
    // 0xa20fd0: StoreField: r2->field_1f = r0
    //     0xa20fd0: stur            w0, [x2, #0x1f]
    //     0xa20fd4: ldurb           w16, [x2, #-1]
    //     0xa20fd8: ldurb           w17, [x0, #-1]
    //     0xa20fdc: and             x16, x17, x16, lsr #2
    //     0xa20fe0: tst             x16, HEAP, lsr #32
    //     0xa20fe4: b.eq            #0xa20fec
    //     0xa20fe8: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa20fec: r1 = <double>
    //     0xa20fec: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20ff0: r0 = AnimationController()
    //     0xa20ff0: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa20ff4: stur            x0, [fp, #-8]
    // 0xa20ff8: ldr             x16, [fp, #0x10]
    // 0xa20ffc: stp             x16, x0, [SP, #8]
    // 0xa21000: r16 = Instance_Duration
    //     0xa21000: add             x16, PP, #0x40, lsl #12  ; [pp+0x40e28] Obj!Duration@c47e41
    //     0xa21004: ldr             x16, [x16, #0xe28]
    // 0xa21008: str             x16, [SP]
    // 0xa2100c: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0xa2100c: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0xa21010: ldr             x4, [x4, #0x4e0]
    // 0xa21014: r0 = AnimationController()
    //     0xa21014: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa21018: ldr             x0, [fp, #0x10]
    // 0xa2101c: LoadField: r1 = r0->field_23
    //     0xa2101c: ldur            w1, [x0, #0x23]
    // 0xa21020: DecompressPointer r1
    //     0xa21020: add             x1, x1, HEAP, lsl #32
    // 0xa21024: r16 = Sentinel
    //     0xa21024: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa21028: cmp             w1, w16
    // 0xa2102c: b.ne            #0xa21038
    // 0xa21030: mov             x1, x0
    // 0xa21034: b               #0xa2104c
    // 0xa21038: r16 = "_shakingLabelController@159019562"
    //     0xa21038: add             x16, PP, #0x41, lsl #12  ; [pp+0x41a28] "_shakingLabelController@159019562"
    //     0xa2103c: ldr             x16, [x16, #0xa28]
    // 0xa21040: str             x16, [SP]
    // 0xa21044: r0 = _throwFieldAlreadyInitialized()
    //     0xa21044: bl              #0x4f06cc  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0xa21048: ldr             x1, [fp, #0x10]
    // 0xa2104c: ldur            x0, [fp, #-8]
    // 0xa21050: StoreField: r1->field_23 = r0
    //     0xa21050: stur            w0, [x1, #0x23]
    //     0xa21054: ldurb           w16, [x1, #-1]
    //     0xa21058: ldurb           w17, [x0, #-1]
    //     0xa2105c: and             x16, x17, x16, lsr #2
    //     0xa21060: tst             x16, HEAP, lsr #32
    //     0xa21064: b.eq            #0xa2106c
    //     0xa21068: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa2106c: r0 = Null
    //     0xa2106c: mov             x0, NULL
    // 0xa21070: LeaveFrame
    //     0xa21070: mov             SP, fp
    //     0xa21074: ldp             fp, lr, [SP], #0x10
    // 0xa21078: ret
    //     0xa21078: ret             
    // 0xa2107c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa2107c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa21080: b               #0xa20dd0
    // 0xa21084: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa21084: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa21088: SaveReg d0
    //     0xa21088: str             q0, [SP, #-0x10]!
    // 0xa2108c: SaveReg r0
    //     0xa2108c: str             x0, [SP, #-8]!
    // 0xa21090: r0 = AllocateDouble()
    //     0xa21090: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xa21094: mov             x2, x0
    // 0xa21098: RestoreReg r0
    //     0xa21098: ldr             x0, [SP], #8
    // 0xa2109c: RestoreReg d0
    //     0xa2109c: ldr             q0, [SP], #0x10
    // 0xa210a0: b               #0xa20e88
  }
  [closure] void _handleChange(dynamic) {
    // ** addr: 0xa210a4, size: 0x48
    // 0xa210a4: EnterFrame
    //     0xa210a4: stp             fp, lr, [SP, #-0x10]!
    //     0xa210a8: mov             fp, SP
    // 0xa210ac: AllocStack(0x8)
    //     0xa210ac: sub             SP, SP, #8
    // 0xa210b0: SetupParameters()
    //     0xa210b0: ldr             x0, [fp, #0x10]
    //     0xa210b4: ldur            w1, [x0, #0x17]
    //     0xa210b8: add             x1, x1, HEAP, lsl #32
    // 0xa210bc: CheckStackOverflow
    //     0xa210bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa210c0: cmp             SP, x16
    //     0xa210c4: b.ls            #0xa210e4
    // 0xa210c8: LoadField: r0 = r1->field_f
    //     0xa210c8: ldur            w0, [x1, #0xf]
    // 0xa210cc: DecompressPointer r0
    //     0xa210cc: add             x0, x0, HEAP, lsl #32
    // 0xa210d0: str             x0, [SP]
    // 0xa210d4: r0 = _handleChange()
    //     0xa210d4: bl              #0xa210ec  ; [package:flutter/src/material/input_decorator.dart] _InputDecoratorState::_handleChange
    // 0xa210d8: LeaveFrame
    //     0xa210d8: mov             SP, fp
    //     0xa210dc: ldp             fp, lr, [SP], #0x10
    // 0xa210e0: ret
    //     0xa210e0: ret             
    // 0xa210e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa210e4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa210e8: b               #0xa210c8
  }
  _ _handleChange(/* No info */) {
    // ** addr: 0xa210ec, size: 0x4c
    // 0xa210ec: EnterFrame
    //     0xa210ec: stp             fp, lr, [SP, #-0x10]!
    //     0xa210f0: mov             fp, SP
    // 0xa210f4: AllocStack(0x10)
    //     0xa210f4: sub             SP, SP, #0x10
    // 0xa210f8: CheckStackOverflow
    //     0xa210f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa210fc: cmp             SP, x16
    //     0xa21100: b.ls            #0xa21130
    // 0xa21104: r1 = Function '<anonymous closure>':.
    //     0xa21104: add             x1, PP, #0x41, lsl #12  ; [pp+0x41a30] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa21108: ldr             x1, [x1, #0xa30]
    // 0xa2110c: r2 = Null
    //     0xa2110c: mov             x2, NULL
    // 0xa21110: r0 = AllocateClosure()
    //     0xa21110: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa21114: ldr             x16, [fp, #0x10]
    // 0xa21118: stp             x0, x16, [SP]
    // 0xa2111c: r0 = setState()
    //     0xa2111c: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0xa21120: r0 = Null
    //     0xa21120: mov             x0, NULL
    // 0xa21124: LeaveFrame
    //     0xa21124: mov             SP, fp
    //     0xa21128: ldp             fp, lr, [SP], #0x10
    // 0xa2112c: ret
    //     0xa2112c: ret             
    // 0xa21130: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa21130: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa21134: b               #0xa21104
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa56ae4, size: 0x94
    // 0xa56ae4: EnterFrame
    //     0xa56ae4: stp             fp, lr, [SP, #-0x10]!
    //     0xa56ae8: mov             fp, SP
    // 0xa56aec: AllocStack(0x8)
    //     0xa56aec: sub             SP, SP, #8
    // 0xa56af0: CheckStackOverflow
    //     0xa56af0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa56af4: cmp             SP, x16
    //     0xa56af8: b.ls            #0xa56b58
    // 0xa56afc: ldr             x0, [fp, #0x10]
    // 0xa56b00: LoadField: r1 = r0->field_1b
    //     0xa56b00: ldur            w1, [x0, #0x1b]
    // 0xa56b04: DecompressPointer r1
    //     0xa56b04: add             x1, x1, HEAP, lsl #32
    // 0xa56b08: r16 = Sentinel
    //     0xa56b08: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa56b0c: cmp             w1, w16
    // 0xa56b10: b.eq            #0xa56b60
    // 0xa56b14: str             x1, [SP]
    // 0xa56b18: r0 = dispose()
    //     0xa56b18: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa56b1c: ldr             x0, [fp, #0x10]
    // 0xa56b20: LoadField: r1 = r0->field_23
    //     0xa56b20: ldur            w1, [x0, #0x23]
    // 0xa56b24: DecompressPointer r1
    //     0xa56b24: add             x1, x1, HEAP, lsl #32
    // 0xa56b28: r16 = Sentinel
    //     0xa56b28: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa56b2c: cmp             w1, w16
    // 0xa56b30: b.eq            #0xa56b6c
    // 0xa56b34: str             x1, [SP]
    // 0xa56b38: r0 = dispose()
    //     0xa56b38: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa56b3c: ldr             x16, [fp, #0x10]
    // 0xa56b40: str             x16, [SP]
    // 0xa56b44: r0 = dispose()
    //     0xa56b44: bl              #0xa56b78  ; [package:flutter/src/material/input_decorator.dart] __InputDecoratorState&State&TickerProviderStateMixin::dispose
    // 0xa56b48: r0 = Null
    //     0xa56b48: mov             x0, NULL
    // 0xa56b4c: LeaveFrame
    //     0xa56b4c: mov             SP, fp
    //     0xa56b50: ldp             fp, lr, [SP], #0x10
    // 0xa56b54: ret
    //     0xa56b54: ret             
    // 0xa56b58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa56b58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa56b5c: b               #0xa56afc
    // 0xa56b60: r9 = _floatingLabelController
    //     0xa56b60: add             x9, PP, #0x41, lsl #12  ; [pp+0x419f8] Field <_InputDecoratorState@159019562._floatingLabelController@159019562>: late final (offset: 0x1c)
    //     0xa56b64: ldr             x9, [x9, #0x9f8]
    // 0xa56b68: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa56b68: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xa56b6c: r9 = _shakingLabelController
    //     0xa56b6c: add             x9, PP, #0x41, lsl #12  ; [pp+0x41a00] Field <_InputDecoratorState@159019562._shakingLabelController@159019562>: late final (offset: 0x24)
    //     0xa56b70: ldr             x9, [x9, #0xa00]
    // 0xa56b74: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa56b74: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3212, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __HelperErrorState&State&SingleTickerProviderStateMixin extends State<dynamic>
     with SingleTickerProviderStateMixin<X0 bound StatefulWidget> {

  _ _updateTicker(/* No info */) {
    // ** addr: 0x5538ec, size: 0x84
    // 0x5538ec: EnterFrame
    //     0x5538ec: stp             fp, lr, [SP, #-0x10]!
    //     0x5538f0: mov             fp, SP
    // 0x5538f4: AllocStack(0x18)
    //     0x5538f4: sub             SP, SP, #0x18
    // 0x5538f8: CheckStackOverflow
    //     0x5538f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5538fc: cmp             SP, x16
    //     0x553900: b.ls            #0x553964
    // 0x553904: ldr             x0, [fp, #0x10]
    // 0x553908: LoadField: r1 = r0->field_13
    //     0x553908: ldur            w1, [x0, #0x13]
    // 0x55390c: DecompressPointer r1
    //     0x55390c: add             x1, x1, HEAP, lsl #32
    // 0x553910: stur            x1, [fp, #-8]
    // 0x553914: cmp             w1, NULL
    // 0x553918: b.eq            #0x553954
    // 0x55391c: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x55391c: ldur            w2, [x0, #0x17]
    // 0x553920: DecompressPointer r2
    //     0x553920: add             x2, x2, HEAP, lsl #32
    // 0x553924: cmp             w2, NULL
    // 0x553928: b.eq            #0x55396c
    // 0x55392c: r0 = LoadClassIdInstr(r2)
    //     0x55392c: ldur            x0, [x2, #-1]
    //     0x553930: ubfx            x0, x0, #0xc, #0x14
    // 0x553934: str             x2, [SP]
    // 0x553938: r0 = GDT[cid_x0 + 0x801]()
    //     0x553938: add             lr, x0, #0x801
    //     0x55393c: ldr             lr, [x21, lr, lsl #3]
    //     0x553940: blr             lr
    // 0x553944: eor             x1, x0, #0x10
    // 0x553948: ldur            x16, [fp, #-8]
    // 0x55394c: stp             x1, x16, [SP]
    // 0x553950: r0 = muted=()
    //     0x553950: bl              #0x54a1d8  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x553954: r0 = Null
    //     0x553954: mov             x0, NULL
    // 0x553958: LeaveFrame
    //     0x553958: mov             SP, fp
    //     0x55395c: ldp             fp, lr, [SP], #0x10
    // 0x553960: ret
    //     0x553960: ret             
    // 0x553964: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553964: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553968: b               #0x553904
    // 0x55396c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55396c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTicker(dynamic) {
    // ** addr: 0x553970, size: 0x48
    // 0x553970: EnterFrame
    //     0x553970: stp             fp, lr, [SP, #-0x10]!
    //     0x553974: mov             fp, SP
    // 0x553978: AllocStack(0x8)
    //     0x553978: sub             SP, SP, #8
    // 0x55397c: SetupParameters()
    //     0x55397c: ldr             x0, [fp, #0x10]
    //     0x553980: ldur            w1, [x0, #0x17]
    //     0x553984: add             x1, x1, HEAP, lsl #32
    // 0x553988: CheckStackOverflow
    //     0x553988: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x55398c: cmp             SP, x16
    //     0x553990: b.ls            #0x5539b0
    // 0x553994: LoadField: r0 = r1->field_f
    //     0x553994: ldur            w0, [x1, #0xf]
    // 0x553998: DecompressPointer r0
    //     0x553998: add             x0, x0, HEAP, lsl #32
    // 0x55399c: str             x0, [SP]
    // 0x5539a0: r0 = _updateTicker()
    //     0x5539a0: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x5539a4: LeaveFrame
    //     0x5539a4: mov             SP, fp
    //     0x5539a8: ldp             fp, lr, [SP], #0x10
    // 0x5539ac: ret
    //     0x5539ac: ret             
    // 0x5539b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5539b0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5539b4: b               #0x553994
  }
  _ createTicker(/* No info */) {
    // ** addr: 0x5563d0, size: 0x94
    // 0x5563d0: EnterFrame
    //     0x5563d0: stp             fp, lr, [SP, #-0x10]!
    //     0x5563d4: mov             fp, SP
    // 0x5563d8: AllocStack(0x8)
    //     0x5563d8: sub             SP, SP, #8
    // 0x5563dc: CheckStackOverflow
    //     0x5563dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5563e0: cmp             SP, x16
    //     0x5563e4: b.ls            #0x556458
    // 0x5563e8: r0 = Ticker()
    //     0x5563e8: bl              #0x54ed48  ; AllocateTickerStub -> Ticker (size=0x1c)
    // 0x5563ec: mov             x1, x0
    // 0x5563f0: r0 = false
    //     0x5563f0: add             x0, NULL, #0x30  ; false
    // 0x5563f4: StoreField: r1->field_b = r0
    //     0x5563f4: stur            w0, [x1, #0xb]
    // 0x5563f8: ldr             x0, [fp, #0x10]
    // 0x5563fc: StoreField: r1->field_13 = r0
    //     0x5563fc: stur            w0, [x1, #0x13]
    // 0x556400: mov             x0, x1
    // 0x556404: ldr             x1, [fp, #0x18]
    // 0x556408: StoreField: r1->field_13 = r0
    //     0x556408: stur            w0, [x1, #0x13]
    //     0x55640c: ldurb           w16, [x1, #-1]
    //     0x556410: ldurb           w17, [x0, #-1]
    //     0x556414: and             x16, x17, x16, lsr #2
    //     0x556418: tst             x16, HEAP, lsr #32
    //     0x55641c: b.eq            #0x556424
    //     0x556420: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556424: str             x1, [SP]
    // 0x556428: r0 = _updateTickerModeNotifier()
    //     0x556428: bl              #0x556464  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x55642c: ldr             x16, [fp, #0x18]
    // 0x556430: str             x16, [SP]
    // 0x556434: r0 = _updateTicker()
    //     0x556434: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x556438: ldr             x1, [fp, #0x18]
    // 0x55643c: LoadField: r0 = r1->field_13
    //     0x55643c: ldur            w0, [x1, #0x13]
    // 0x556440: DecompressPointer r0
    //     0x556440: add             x0, x0, HEAP, lsl #32
    // 0x556444: cmp             w0, NULL
    // 0x556448: b.eq            #0x556460
    // 0x55644c: LeaveFrame
    //     0x55644c: mov             SP, fp
    //     0x556450: ldp             fp, lr, [SP], #0x10
    // 0x556454: ret
    //     0x556454: ret             
    // 0x556458: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556458: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x55645c: b               #0x5563e8
    // 0x556460: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x556460: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x556464, size: 0x148
    // 0x556464: EnterFrame
    //     0x556464: stp             fp, lr, [SP, #-0x10]!
    //     0x556468: mov             fp, SP
    // 0x55646c: AllocStack(0x20)
    //     0x55646c: sub             SP, SP, #0x20
    // 0x556470: CheckStackOverflow
    //     0x556470: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x556474: cmp             SP, x16
    //     0x556478: b.ls            #0x5565a0
    // 0x55647c: ldr             x0, [fp, #0x10]
    // 0x556480: LoadField: r1 = r0->field_f
    //     0x556480: ldur            w1, [x0, #0xf]
    // 0x556484: DecompressPointer r1
    //     0x556484: add             x1, x1, HEAP, lsl #32
    // 0x556488: cmp             w1, NULL
    // 0x55648c: b.eq            #0x5565a8
    // 0x556490: str             x1, [SP]
    // 0x556494: r0 = getNotifier()
    //     0x556494: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x556498: mov             x1, x0
    // 0x55649c: ldr             x0, [fp, #0x10]
    // 0x5564a0: stur            x1, [fp, #-0x10]
    // 0x5564a4: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x5564a4: ldur            w2, [x0, #0x17]
    // 0x5564a8: DecompressPointer r2
    //     0x5564a8: add             x2, x2, HEAP, lsl #32
    // 0x5564ac: stur            x2, [fp, #-8]
    // 0x5564b0: cmp             w1, w2
    // 0x5564b4: b.ne            #0x5564c8
    // 0x5564b8: r0 = Null
    //     0x5564b8: mov             x0, NULL
    // 0x5564bc: LeaveFrame
    //     0x5564bc: mov             SP, fp
    //     0x5564c0: ldp             fp, lr, [SP], #0x10
    // 0x5564c4: ret
    //     0x5564c4: ret             
    // 0x5564c8: cmp             w2, NULL
    // 0x5564cc: b.eq            #0x556524
    // 0x5564d0: r1 = 1
    //     0x5564d0: movz            x1, #0x1
    // 0x5564d4: r0 = AllocateContext()
    //     0x5564d4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5564d8: mov             x1, x0
    // 0x5564dc: ldr             x0, [fp, #0x10]
    // 0x5564e0: StoreField: r1->field_f = r0
    //     0x5564e0: stur            w0, [x1, #0xf]
    // 0x5564e4: mov             x2, x1
    // 0x5564e8: r1 = Function '_updateTicker@328311458':.
    //     0x5564e8: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d108] AnonymousClosure: (0x553970), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x5564ec: ldr             x1, [x1, #0x108]
    // 0x5564f0: r0 = AllocateClosure()
    //     0x5564f0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5564f4: mov             x1, x0
    // 0x5564f8: ldur            x0, [fp, #-8]
    // 0x5564fc: r2 = LoadClassIdInstr(r0)
    //     0x5564fc: ldur            x2, [x0, #-1]
    //     0x556500: ubfx            x2, x2, #0xc, #0x14
    // 0x556504: stp             x1, x0, [SP]
    // 0x556508: mov             x0, x2
    // 0x55650c: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x55650c: movz            x17, #0xc9d0
    //     0x556510: add             lr, x0, x17
    //     0x556514: ldr             lr, [x21, lr, lsl #3]
    //     0x556518: blr             lr
    // 0x55651c: ldr             x0, [fp, #0x10]
    // 0x556520: ldur            x1, [fp, #-0x10]
    // 0x556524: r1 = 1
    //     0x556524: movz            x1, #0x1
    // 0x556528: r0 = AllocateContext()
    //     0x556528: bl              #0xc5def4  ; AllocateContextStub
    // 0x55652c: mov             x1, x0
    // 0x556530: ldr             x0, [fp, #0x10]
    // 0x556534: StoreField: r1->field_f = r0
    //     0x556534: stur            w0, [x1, #0xf]
    // 0x556538: mov             x2, x1
    // 0x55653c: r1 = Function '_updateTicker@328311458':.
    //     0x55653c: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d108] AnonymousClosure: (0x553970), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x556540: ldr             x1, [x1, #0x108]
    // 0x556544: r0 = AllocateClosure()
    //     0x556544: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x556548: ldur            x1, [fp, #-0x10]
    // 0x55654c: r2 = LoadClassIdInstr(r1)
    //     0x55654c: ldur            x2, [x1, #-1]
    //     0x556550: ubfx            x2, x2, #0xc, #0x14
    // 0x556554: stp             x0, x1, [SP]
    // 0x556558: mov             x0, x2
    // 0x55655c: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x55655c: movz            x17, #0xcefc
    //     0x556560: add             lr, x0, x17
    //     0x556564: ldr             lr, [x21, lr, lsl #3]
    //     0x556568: blr             lr
    // 0x55656c: ldur            x0, [fp, #-0x10]
    // 0x556570: ldr             x1, [fp, #0x10]
    // 0x556574: ArrayStore: r1[0] = r0  ; List_4
    //     0x556574: stur            w0, [x1, #0x17]
    //     0x556578: ldurb           w16, [x1, #-1]
    //     0x55657c: ldurb           w17, [x0, #-1]
    //     0x556580: and             x16, x17, x16, lsr #2
    //     0x556584: tst             x16, HEAP, lsr #32
    //     0x556588: b.eq            #0x556590
    //     0x55658c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556590: r0 = Null
    //     0x556590: mov             x0, NULL
    // 0x556594: LeaveFrame
    //     0x556594: mov             SP, fp
    //     0x556598: ldp             fp, lr, [SP], #0x10
    // 0x55659c: ret
    //     0x55659c: ret             
    // 0x5565a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5565a0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5565a4: b               #0x55647c
    // 0x5565a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5565a8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ activate(/* No info */) {
    // ** addr: 0x8ca3d8, size: 0x48
    // 0x8ca3d8: EnterFrame
    //     0x8ca3d8: stp             fp, lr, [SP, #-0x10]!
    //     0x8ca3dc: mov             fp, SP
    // 0x8ca3e0: AllocStack(0x8)
    //     0x8ca3e0: sub             SP, SP, #8
    // 0x8ca3e4: CheckStackOverflow
    //     0x8ca3e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ca3e8: cmp             SP, x16
    //     0x8ca3ec: b.ls            #0x8ca418
    // 0x8ca3f0: ldr             x16, [fp, #0x10]
    // 0x8ca3f4: str             x16, [SP]
    // 0x8ca3f8: r0 = _updateTickerModeNotifier()
    //     0x8ca3f8: bl              #0x556464  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8ca3fc: ldr             x16, [fp, #0x10]
    // 0x8ca400: str             x16, [SP]
    // 0x8ca404: r0 = _updateTicker()
    //     0x8ca404: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x8ca408: r0 = Null
    //     0x8ca408: mov             x0, NULL
    // 0x8ca40c: LeaveFrame
    //     0x8ca40c: mov             SP, fp
    //     0x8ca410: ldp             fp, lr, [SP], #0x10
    // 0x8ca414: ret
    //     0x8ca414: ret             
    // 0x8ca418: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ca418: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ca41c: b               #0x8ca3f0
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa56a40, size: 0xa4
    // 0xa56a40: EnterFrame
    //     0xa56a40: stp             fp, lr, [SP, #-0x10]!
    //     0xa56a44: mov             fp, SP
    // 0xa56a48: AllocStack(0x18)
    //     0xa56a48: sub             SP, SP, #0x18
    // 0xa56a4c: CheckStackOverflow
    //     0xa56a4c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa56a50: cmp             SP, x16
    //     0xa56a54: b.ls            #0xa56adc
    // 0xa56a58: ldr             x0, [fp, #0x10]
    // 0xa56a5c: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa56a5c: ldur            w1, [x0, #0x17]
    // 0xa56a60: DecompressPointer r1
    //     0xa56a60: add             x1, x1, HEAP, lsl #32
    // 0xa56a64: stur            x1, [fp, #-8]
    // 0xa56a68: cmp             w1, NULL
    // 0xa56a6c: b.ne            #0xa56a78
    // 0xa56a70: mov             x1, x0
    // 0xa56a74: b               #0xa56ac8
    // 0xa56a78: r1 = 1
    //     0xa56a78: movz            x1, #0x1
    // 0xa56a7c: r0 = AllocateContext()
    //     0xa56a7c: bl              #0xc5def4  ; AllocateContextStub
    // 0xa56a80: mov             x1, x0
    // 0xa56a84: ldr             x0, [fp, #0x10]
    // 0xa56a88: StoreField: r1->field_f = r0
    //     0xa56a88: stur            w0, [x1, #0xf]
    // 0xa56a8c: mov             x2, x1
    // 0xa56a90: r1 = Function '_updateTicker@328311458':.
    //     0xa56a90: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d108] AnonymousClosure: (0x553970), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0xa56a94: ldr             x1, [x1, #0x108]
    // 0xa56a98: r0 = AllocateClosure()
    //     0xa56a98: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa56a9c: mov             x1, x0
    // 0xa56aa0: ldur            x0, [fp, #-8]
    // 0xa56aa4: r2 = LoadClassIdInstr(r0)
    //     0xa56aa4: ldur            x2, [x0, #-1]
    //     0xa56aa8: ubfx            x2, x2, #0xc, #0x14
    // 0xa56aac: stp             x1, x0, [SP]
    // 0xa56ab0: mov             x0, x2
    // 0xa56ab4: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa56ab4: movz            x17, #0xc9d0
    //     0xa56ab8: add             lr, x0, x17
    //     0xa56abc: ldr             lr, [x21, lr, lsl #3]
    //     0xa56ac0: blr             lr
    // 0xa56ac4: ldr             x1, [fp, #0x10]
    // 0xa56ac8: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa56ac8: stur            NULL, [x1, #0x17]
    // 0xa56acc: r0 = Null
    //     0xa56acc: mov             x0, NULL
    // 0xa56ad0: LeaveFrame
    //     0xa56ad0: mov             SP, fp
    //     0xa56ad4: ldp             fp, lr, [SP], #0x10
    // 0xa56ad8: ret
    //     0xa56ad8: ret             
    // 0xa56adc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa56adc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa56ae0: b               #0xa56a58
  }
}

// class id: 3213, size: 0x28, field offset: 0x1c
class _HelperErrorState extends __HelperErrorState&State&SingleTickerProviderStateMixin {

  late AnimationController _controller; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8adf7c, size: 0x18c
    // 0x8adf7c: EnterFrame
    //     0x8adf7c: stp             fp, lr, [SP, #-0x10]!
    //     0x8adf80: mov             fp, SP
    // 0x8adf84: AllocStack(0x8)
    //     0x8adf84: sub             SP, SP, #8
    // 0x8adf88: CheckStackOverflow
    //     0x8adf88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8adf8c: cmp             SP, x16
    //     0x8adf90: b.ls            #0x8ae0e4
    // 0x8adf94: ldr             x0, [fp, #0x10]
    // 0x8adf98: r2 = Null
    //     0x8adf98: mov             x2, NULL
    // 0x8adf9c: r1 = Null
    //     0x8adf9c: mov             x1, NULL
    // 0x8adfa0: r4 = 59
    //     0x8adfa0: movz            x4, #0x3b
    // 0x8adfa4: branchIfSmi(r0, 0x8adfb0)
    //     0x8adfa4: tbz             w0, #0, #0x8adfb0
    // 0x8adfa8: r4 = LoadClassIdInstr(r0)
    //     0x8adfa8: ldur            x4, [x0, #-1]
    //     0x8adfac: ubfx            x4, x4, #0xc, #0x14
    // 0x8adfb0: r17 = 4176
    //     0x8adfb0: movz            x17, #0x1050
    // 0x8adfb4: cmp             x4, x17
    // 0x8adfb8: b.eq            #0x8adfd0
    // 0x8adfbc: r8 = _HelperError
    //     0x8adfbc: add             x8, PP, #0x4d, lsl #12  ; [pp+0x4d120] Type: _HelperError
    //     0x8adfc0: ldr             x8, [x8, #0x120]
    // 0x8adfc4: r3 = Null
    //     0x8adfc4: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d128] Null
    //     0x8adfc8: ldr             x3, [x3, #0x128]
    // 0x8adfcc: r0 = _HelperError()
    //     0x8adfcc: bl              #0x5539b8  ; IsType__HelperError_Stub
    // 0x8adfd0: ldr             x3, [fp, #0x18]
    // 0x8adfd4: LoadField: r2 = r3->field_7
    //     0x8adfd4: ldur            w2, [x3, #7]
    // 0x8adfd8: DecompressPointer r2
    //     0x8adfd8: add             x2, x2, HEAP, lsl #32
    // 0x8adfdc: ldr             x0, [fp, #0x10]
    // 0x8adfe0: r1 = Null
    //     0x8adfe0: mov             x1, NULL
    // 0x8adfe4: cmp             w2, NULL
    // 0x8adfe8: b.eq            #0x8ae00c
    // 0x8adfec: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8adfec: ldur            w4, [x2, #0x17]
    // 0x8adff0: DecompressPointer r4
    //     0x8adff0: add             x4, x4, HEAP, lsl #32
    // 0x8adff4: r8 = X0 bound StatefulWidget
    //     0x8adff4: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8adff8: ldr             x8, [x8, #0x290]
    // 0x8adffc: LoadField: r9 = r4->field_7
    //     0x8adffc: ldur            x9, [x4, #7]
    // 0x8ae000: r3 = Null
    //     0x8ae000: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d138] Null
    //     0x8ae004: ldr             x3, [x3, #0x138]
    // 0x8ae008: blr             x9
    // 0x8ae00c: ldr             x0, [fp, #0x18]
    // 0x8ae010: LoadField: r1 = r0->field_b
    //     0x8ae010: ldur            w1, [x0, #0xb]
    // 0x8ae014: DecompressPointer r1
    //     0x8ae014: add             x1, x1, HEAP, lsl #32
    // 0x8ae018: cmp             w1, NULL
    // 0x8ae01c: b.eq            #0x8ae0ec
    // 0x8ae020: LoadField: r2 = r1->field_1f
    //     0x8ae020: ldur            w2, [x1, #0x1f]
    // 0x8ae024: DecompressPointer r2
    //     0x8ae024: add             x2, x2, HEAP, lsl #32
    // 0x8ae028: ldr             x1, [fp, #0x10]
    // 0x8ae02c: LoadField: r3 = r1->field_1f
    //     0x8ae02c: ldur            w3, [x1, #0x1f]
    // 0x8ae030: DecompressPointer r3
    //     0x8ae030: add             x3, x3, HEAP, lsl #32
    // 0x8ae034: cmp             w2, NULL
    // 0x8ae038: r16 = true
    //     0x8ae038: add             x16, NULL, #0x20  ; true
    // 0x8ae03c: r17 = false
    //     0x8ae03c: add             x17, NULL, #0x30  ; false
    // 0x8ae040: csel            x1, x16, x17, ne
    // 0x8ae044: cmp             w3, NULL
    // 0x8ae048: r16 = true
    //     0x8ae048: add             x16, NULL, #0x20  ; true
    // 0x8ae04c: r17 = false
    //     0x8ae04c: add             x17, NULL, #0x30  ; false
    // 0x8ae050: csel            x4, x16, x17, ne
    // 0x8ae054: cmp             w1, w4
    // 0x8ae058: b.eq            #0x8ae0d4
    // 0x8ae05c: cmp             w2, NULL
    // 0x8ae060: b.eq            #0x8ae0b0
    // 0x8ae064: str             x0, [SP]
    // 0x8ae068: r0 = _buildError()
    //     0x8ae068: bl              #0x8ae108  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_buildError
    // 0x8ae06c: ldr             x1, [fp, #0x18]
    // 0x8ae070: StoreField: r1->field_23 = r0
    //     0x8ae070: stur            w0, [x1, #0x23]
    //     0x8ae074: ldurb           w16, [x1, #-1]
    //     0x8ae078: ldurb           w17, [x0, #-1]
    //     0x8ae07c: and             x16, x17, x16, lsr #2
    //     0x8ae080: tst             x16, HEAP, lsr #32
    //     0x8ae084: b.eq            #0x8ae08c
    //     0x8ae088: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8ae08c: LoadField: r0 = r1->field_1b
    //     0x8ae08c: ldur            w0, [x1, #0x1b]
    // 0x8ae090: DecompressPointer r0
    //     0x8ae090: add             x0, x0, HEAP, lsl #32
    // 0x8ae094: r16 = Sentinel
    //     0x8ae094: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae098: cmp             w0, w16
    // 0x8ae09c: b.eq            #0x8ae0f0
    // 0x8ae0a0: str             x0, [SP]
    // 0x8ae0a4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8ae0a4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8ae0a8: r0 = forward()
    //     0x8ae0a8: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x8ae0ac: b               #0x8ae0d4
    // 0x8ae0b0: mov             x1, x0
    // 0x8ae0b4: LoadField: r0 = r1->field_1b
    //     0x8ae0b4: ldur            w0, [x1, #0x1b]
    // 0x8ae0b8: DecompressPointer r0
    //     0x8ae0b8: add             x0, x0, HEAP, lsl #32
    // 0x8ae0bc: r16 = Sentinel
    //     0x8ae0bc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae0c0: cmp             w0, w16
    // 0x8ae0c4: b.eq            #0x8ae0fc
    // 0x8ae0c8: str             x0, [SP]
    // 0x8ae0cc: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8ae0cc: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8ae0d0: r0 = reverse()
    //     0x8ae0d0: bl              #0x5d8c9c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reverse
    // 0x8ae0d4: r0 = Null
    //     0x8ae0d4: mov             x0, NULL
    // 0x8ae0d8: LeaveFrame
    //     0x8ae0d8: mov             SP, fp
    //     0x8ae0dc: ldp             fp, lr, [SP], #0x10
    // 0x8ae0e0: ret
    //     0x8ae0e0: ret             
    // 0x8ae0e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ae0e4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ae0e8: b               #0x8adf94
    // 0x8ae0ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae0ec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae0f0: r9 = _controller
    //     0x8ae0f0: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d110] Field <_HelperErrorState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0x8ae0f4: ldr             x9, [x9, #0x110]
    // 0x8ae0f8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae0f8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae0fc: r9 = _controller
    //     0x8ae0fc: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d110] Field <_HelperErrorState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0x8ae100: ldr             x9, [x9, #0x110]
    // 0x8ae104: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae104: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ _buildError(/* No info */) {
    // ** addr: 0x8ae108, size: 0x174
    // 0x8ae108: EnterFrame
    //     0x8ae108: stp             fp, lr, [SP, #-0x10]!
    //     0x8ae10c: mov             fp, SP
    // 0x8ae110: AllocStack(0x48)
    //     0x8ae110: sub             SP, SP, #0x48
    // 0x8ae114: CheckStackOverflow
    //     0x8ae114: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ae118: cmp             SP, x16
    //     0x8ae11c: b.ls            #0x8ae260
    // 0x8ae120: ldr             x0, [fp, #0x10]
    // 0x8ae124: LoadField: r2 = r0->field_1b
    //     0x8ae124: ldur            w2, [x0, #0x1b]
    // 0x8ae128: DecompressPointer r2
    //     0x8ae128: add             x2, x2, HEAP, lsl #32
    // 0x8ae12c: r16 = Sentinel
    //     0x8ae12c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8ae130: cmp             w2, w16
    // 0x8ae134: b.eq            #0x8ae268
    // 0x8ae138: stur            x2, [fp, #-8]
    // 0x8ae13c: r1 = <Offset>
    //     0x8ae13c: add             x1, PP, #0x25, lsl #12  ; [pp+0x25290] TypeArguments: <Offset>
    //     0x8ae140: ldr             x1, [x1, #0x290]
    // 0x8ae144: r0 = Tween()
    //     0x8ae144: bl              #0x611a3c  ; AllocateTweenStub -> Tween<X0> (size=0x14)
    // 0x8ae148: mov             x1, x0
    // 0x8ae14c: r0 = Instance_Offset
    //     0x8ae14c: add             x0, PP, #0x4d, lsl #12  ; [pp+0x4d118] Obj!Offset@c3cd51
    //     0x8ae150: ldr             x0, [x0, #0x118]
    // 0x8ae154: StoreField: r1->field_b = r0
    //     0x8ae154: stur            w0, [x1, #0xb]
    // 0x8ae158: r0 = Instance_Offset
    //     0x8ae158: ldr             x0, [PP, #0x4010]  ; [pp+0x4010] Obj!Offset@c3cb91
    // 0x8ae15c: StoreField: r1->field_f = r0
    //     0x8ae15c: stur            w0, [x1, #0xf]
    // 0x8ae160: ldur            x16, [fp, #-8]
    // 0x8ae164: stp             x16, x1, [SP]
    // 0x8ae168: r0 = evaluate()
    //     0x8ae168: bl              #0xb9b43c  ; [package:flutter/src/animation/tween.dart] Animatable::evaluate
    // 0x8ae16c: mov             x1, x0
    // 0x8ae170: ldr             x0, [fp, #0x10]
    // 0x8ae174: stur            x1, [fp, #-0x28]
    // 0x8ae178: LoadField: r2 = r0->field_b
    //     0x8ae178: ldur            w2, [x0, #0xb]
    // 0x8ae17c: DecompressPointer r2
    //     0x8ae17c: add             x2, x2, HEAP, lsl #32
    // 0x8ae180: cmp             w2, NULL
    // 0x8ae184: b.eq            #0x8ae274
    // 0x8ae188: LoadField: r0 = r2->field_1f
    //     0x8ae188: ldur            w0, [x2, #0x1f]
    // 0x8ae18c: DecompressPointer r0
    //     0x8ae18c: add             x0, x0, HEAP, lsl #32
    // 0x8ae190: stur            x0, [fp, #-0x20]
    // 0x8ae194: cmp             w0, NULL
    // 0x8ae198: b.eq            #0x8ae278
    // 0x8ae19c: LoadField: r3 = r2->field_23
    //     0x8ae19c: ldur            w3, [x2, #0x23]
    // 0x8ae1a0: DecompressPointer r3
    //     0x8ae1a0: add             x3, x3, HEAP, lsl #32
    // 0x8ae1a4: stur            x3, [fp, #-0x18]
    // 0x8ae1a8: LoadField: r4 = r2->field_b
    //     0x8ae1a8: ldur            w4, [x2, #0xb]
    // 0x8ae1ac: DecompressPointer r4
    //     0x8ae1ac: add             x4, x4, HEAP, lsl #32
    // 0x8ae1b0: stur            x4, [fp, #-0x10]
    // 0x8ae1b4: r0 = Text()
    //     0x8ae1b4: bl              #0x6225d8  ; AllocateTextStub -> Text (size=0x48)
    // 0x8ae1b8: mov             x1, x0
    // 0x8ae1bc: ldur            x0, [fp, #-0x20]
    // 0x8ae1c0: stur            x1, [fp, #-0x30]
    // 0x8ae1c4: StoreField: r1->field_b = r0
    //     0x8ae1c4: stur            w0, [x1, #0xb]
    // 0x8ae1c8: ldur            x0, [fp, #-0x18]
    // 0x8ae1cc: StoreField: r1->field_13 = r0
    //     0x8ae1cc: stur            w0, [x1, #0x13]
    // 0x8ae1d0: ldur            x0, [fp, #-0x10]
    // 0x8ae1d4: StoreField: r1->field_1b = r0
    //     0x8ae1d4: stur            w0, [x1, #0x1b]
    // 0x8ae1d8: r0 = Instance_TextOverflow
    //     0x8ae1d8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10350] Obj!TextOverflow@c43e51
    //     0x8ae1dc: ldr             x0, [x0, #0x350]
    // 0x8ae1e0: StoreField: r1->field_2b = r0
    //     0x8ae1e0: stur            w0, [x1, #0x2b]
    // 0x8ae1e4: r0 = FractionalTranslation()
    //     0x8ae1e4: bl              #0x611228  ; AllocateFractionalTranslationStub -> FractionalTranslation (size=0x18)
    // 0x8ae1e8: mov             x1, x0
    // 0x8ae1ec: ldur            x0, [fp, #-0x28]
    // 0x8ae1f0: stur            x1, [fp, #-0x10]
    // 0x8ae1f4: StoreField: r1->field_f = r0
    //     0x8ae1f4: stur            w0, [x1, #0xf]
    // 0x8ae1f8: r0 = true
    //     0x8ae1f8: add             x0, NULL, #0x20  ; true
    // 0x8ae1fc: StoreField: r1->field_13 = r0
    //     0x8ae1fc: stur            w0, [x1, #0x13]
    // 0x8ae200: ldur            x0, [fp, #-0x30]
    // 0x8ae204: StoreField: r1->field_b = r0
    //     0x8ae204: stur            w0, [x1, #0xb]
    // 0x8ae208: r0 = FadeTransition()
    //     0x8ae208: bl              #0x6112f8  ; AllocateFadeTransitionStub -> FadeTransition (size=0x18)
    // 0x8ae20c: mov             x1, x0
    // 0x8ae210: ldur            x0, [fp, #-8]
    // 0x8ae214: stur            x1, [fp, #-0x18]
    // 0x8ae218: StoreField: r1->field_f = r0
    //     0x8ae218: stur            w0, [x1, #0xf]
    // 0x8ae21c: r0 = false
    //     0x8ae21c: add             x0, NULL, #0x30  ; false
    // 0x8ae220: StoreField: r1->field_13 = r0
    //     0x8ae220: stur            w0, [x1, #0x13]
    // 0x8ae224: ldur            x0, [fp, #-0x10]
    // 0x8ae228: StoreField: r1->field_b = r0
    //     0x8ae228: stur            w0, [x1, #0xb]
    // 0x8ae22c: r0 = Semantics()
    //     0x8ae22c: bl              #0x60a9b0  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x8ae230: stur            x0, [fp, #-8]
    // 0x8ae234: r16 = true
    //     0x8ae234: add             x16, NULL, #0x20  ; true
    // 0x8ae238: stp             x16, x0, [SP, #8]
    // 0x8ae23c: ldur            x16, [fp, #-0x18]
    // 0x8ae240: str             x16, [SP]
    // 0x8ae244: r4 = const [0, 0x3, 0x3, 0x1, child, 0x2, container, 0x1, null]
    //     0x8ae244: add             x4, PP, #0x25, lsl #12  ; [pp+0x25988] List(9) [0, 0x3, 0x3, 0x1, "child", 0x2, "container", 0x1, Null]
    //     0x8ae248: ldr             x4, [x4, #0x988]
    // 0x8ae24c: r0 = Semantics()
    //     0x8ae24c: bl              #0x609c34  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x8ae250: ldur            x0, [fp, #-8]
    // 0x8ae254: LeaveFrame
    //     0x8ae254: mov             SP, fp
    //     0x8ae258: ldp             fp, lr, [SP], #0x10
    // 0x8ae25c: ret
    //     0x8ae25c: ret             
    // 0x8ae260: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ae260: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ae264: b               #0x8ae120
    // 0x8ae268: r9 = _controller
    //     0x8ae268: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d110] Field <_HelperErrorState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0x8ae26c: ldr             x9, [x9, #0x110]
    // 0x8ae270: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8ae270: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8ae274: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae274: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8ae278: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8ae278: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x93d3d8, size: 0x278
    // 0x93d3d8: EnterFrame
    //     0x93d3d8: stp             fp, lr, [SP, #-0x10]!
    //     0x93d3dc: mov             fp, SP
    // 0x93d3e0: AllocStack(0x28)
    //     0x93d3e0: sub             SP, SP, #0x28
    // 0x93d3e4: CheckStackOverflow
    //     0x93d3e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93d3e8: cmp             SP, x16
    //     0x93d3ec: b.ls            #0x93d624
    // 0x93d3f0: ldr             x0, [fp, #0x18]
    // 0x93d3f4: LoadField: r1 = r0->field_1b
    //     0x93d3f4: ldur            w1, [x0, #0x1b]
    // 0x93d3f8: DecompressPointer r1
    //     0x93d3f8: add             x1, x1, HEAP, lsl #32
    // 0x93d3fc: r16 = Sentinel
    //     0x93d3fc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d400: cmp             w1, w16
    // 0x93d404: b.eq            #0x93d62c
    // 0x93d408: LoadField: r2 = r1->field_43
    //     0x93d408: ldur            w2, [x1, #0x43]
    // 0x93d40c: DecompressPointer r2
    //     0x93d40c: add             x2, x2, HEAP, lsl #32
    // 0x93d410: r16 = Sentinel
    //     0x93d410: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d414: cmp             w2, w16
    // 0x93d418: b.eq            #0x93d638
    // 0x93d41c: r16 = Instance_AnimationStatus
    //     0x93d41c: ldr             x16, [PP, #0x6028]  ; [pp+0x6028] Obj!AnimationStatus@c45211
    // 0x93d420: cmp             w2, w16
    // 0x93d424: b.ne            #0x93d450
    // 0x93d428: StoreField: r0->field_23 = rNULL
    //     0x93d428: stur            NULL, [x0, #0x23]
    // 0x93d42c: LoadField: r1 = r0->field_b
    //     0x93d42c: ldur            w1, [x0, #0xb]
    // 0x93d430: DecompressPointer r1
    //     0x93d430: add             x1, x1, HEAP, lsl #32
    // 0x93d434: cmp             w1, NULL
    // 0x93d438: b.eq            #0x93d640
    // 0x93d43c: StoreField: r0->field_1f = rNULL
    //     0x93d43c: stur            NULL, [x0, #0x1f]
    // 0x93d440: r0 = Instance_SizedBox
    //     0x93d440: ldr             x0, [PP, #0x61f8]  ; [pp+0x61f8] Obj!SizedBox@c37c11
    // 0x93d444: LeaveFrame
    //     0x93d444: mov             SP, fp
    //     0x93d448: ldp             fp, lr, [SP], #0x10
    // 0x93d44c: ret
    //     0x93d44c: ret             
    // 0x93d450: r16 = Instance_AnimationStatus
    //     0x93d450: ldr             x16, [PP, #0x6020]  ; [pp+0x6020] Obj!AnimationStatus@c451f1
    // 0x93d454: cmp             w2, w16
    // 0x93d458: b.ne            #0x93d4d4
    // 0x93d45c: StoreField: r0->field_1f = rNULL
    //     0x93d45c: stur            NULL, [x0, #0x1f]
    // 0x93d460: LoadField: r1 = r0->field_b
    //     0x93d460: ldur            w1, [x0, #0xb]
    // 0x93d464: DecompressPointer r1
    //     0x93d464: add             x1, x1, HEAP, lsl #32
    // 0x93d468: cmp             w1, NULL
    // 0x93d46c: b.eq            #0x93d644
    // 0x93d470: LoadField: r2 = r1->field_1f
    //     0x93d470: ldur            w2, [x1, #0x1f]
    // 0x93d474: DecompressPointer r2
    //     0x93d474: add             x2, x2, HEAP, lsl #32
    // 0x93d478: cmp             w2, NULL
    // 0x93d47c: b.eq            #0x93d4bc
    // 0x93d480: str             x0, [SP]
    // 0x93d484: r0 = _buildError()
    //     0x93d484: bl              #0x8ae108  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_buildError
    // 0x93d488: mov             x2, x0
    // 0x93d48c: ldr             x1, [fp, #0x18]
    // 0x93d490: StoreField: r1->field_23 = r0
    //     0x93d490: stur            w0, [x1, #0x23]
    //     0x93d494: ldurb           w16, [x1, #-1]
    //     0x93d498: ldurb           w17, [x0, #-1]
    //     0x93d49c: and             x16, x17, x16, lsr #2
    //     0x93d4a0: tst             x16, HEAP, lsr #32
    //     0x93d4a4: b.eq            #0x93d4ac
    //     0x93d4a8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x93d4ac: mov             x0, x2
    // 0x93d4b0: LeaveFrame
    //     0x93d4b0: mov             SP, fp
    //     0x93d4b4: ldp             fp, lr, [SP], #0x10
    // 0x93d4b8: ret
    //     0x93d4b8: ret             
    // 0x93d4bc: mov             x1, x0
    // 0x93d4c0: StoreField: r1->field_23 = rNULL
    //     0x93d4c0: stur            NULL, [x1, #0x23]
    // 0x93d4c4: r0 = Instance_SizedBox
    //     0x93d4c4: ldr             x0, [PP, #0x61f8]  ; [pp+0x61f8] Obj!SizedBox@c37c11
    // 0x93d4c8: LeaveFrame
    //     0x93d4c8: mov             SP, fp
    //     0x93d4cc: ldp             fp, lr, [SP], #0x10
    // 0x93d4d0: ret
    //     0x93d4d0: ret             
    // 0x93d4d4: mov             x1, x0
    // 0x93d4d8: LoadField: r0 = r1->field_b
    //     0x93d4d8: ldur            w0, [x1, #0xb]
    // 0x93d4dc: DecompressPointer r0
    //     0x93d4dc: add             x0, x0, HEAP, lsl #32
    // 0x93d4e0: cmp             w0, NULL
    // 0x93d4e4: b.eq            #0x93d648
    // 0x93d4e8: LoadField: r2 = r0->field_1f
    //     0x93d4e8: ldur            w2, [x0, #0x1f]
    // 0x93d4ec: DecompressPointer r2
    //     0x93d4ec: add             x2, x2, HEAP, lsl #32
    // 0x93d4f0: cmp             w2, NULL
    // 0x93d4f4: b.eq            #0x93d50c
    // 0x93d4f8: str             x1, [SP]
    // 0x93d4fc: r0 = _buildError()
    //     0x93d4fc: bl              #0x8ae108  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_buildError
    // 0x93d500: LeaveFrame
    //     0x93d500: mov             SP, fp
    //     0x93d504: ldp             fp, lr, [SP], #0x10
    // 0x93d508: ret
    //     0x93d508: ret             
    // 0x93d50c: str             x1, [SP]
    // 0x93d510: r0 = _hasError()
    //     0x93d510: bl              #0x93d650  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_hasError
    // 0x93d514: tbnz            w0, #4, #0x93d600
    // 0x93d518: ldr             x0, [fp, #0x18]
    // 0x93d51c: r1 = <double>
    //     0x93d51c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0x93d520: r0 = Tween()
    //     0x93d520: bl              #0x611a3c  ; AllocateTweenStub -> Tween<X0> (size=0x14)
    // 0x93d524: mov             x1, x0
    // 0x93d528: r0 = 1.000000
    //     0x93d528: ldr             x0, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x93d52c: StoreField: r1->field_b = r0
    //     0x93d52c: stur            w0, [x1, #0xb]
    // 0x93d530: r0 = 0.000000
    //     0x93d530: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x93d534: StoreField: r1->field_f = r0
    //     0x93d534: stur            w0, [x1, #0xf]
    // 0x93d538: ldr             x0, [fp, #0x18]
    // 0x93d53c: LoadField: r2 = r0->field_1b
    //     0x93d53c: ldur            w2, [x0, #0x1b]
    // 0x93d540: DecompressPointer r2
    //     0x93d540: add             x2, x2, HEAP, lsl #32
    // 0x93d544: stp             x2, x1, [SP]
    // 0x93d548: r0 = animate()
    //     0x93d548: bl              #0x606d94  ; [package:flutter/src/animation/tween.dart] Animatable::animate
    // 0x93d54c: stur            x0, [fp, #-8]
    // 0x93d550: r0 = FadeTransition()
    //     0x93d550: bl              #0x6112f8  ; AllocateFadeTransitionStub -> FadeTransition (size=0x18)
    // 0x93d554: mov             x1, x0
    // 0x93d558: ldur            x0, [fp, #-8]
    // 0x93d55c: stur            x1, [fp, #-0x10]
    // 0x93d560: StoreField: r1->field_f = r0
    //     0x93d560: stur            w0, [x1, #0xf]
    // 0x93d564: r0 = false
    //     0x93d564: add             x0, NULL, #0x30  ; false
    // 0x93d568: StoreField: r1->field_13 = r0
    //     0x93d568: stur            w0, [x1, #0x13]
    // 0x93d56c: ldr             x16, [fp, #0x18]
    // 0x93d570: str             x16, [SP]
    // 0x93d574: r0 = _buildError()
    //     0x93d574: bl              #0x8ae108  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_buildError
    // 0x93d578: r1 = Null
    //     0x93d578: mov             x1, NULL
    // 0x93d57c: r2 = 4
    //     0x93d57c: movz            x2, #0x4
    // 0x93d580: stur            x0, [fp, #-8]
    // 0x93d584: r0 = AllocateArray()
    //     0x93d584: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x93d588: mov             x2, x0
    // 0x93d58c: ldur            x0, [fp, #-0x10]
    // 0x93d590: stur            x2, [fp, #-0x18]
    // 0x93d594: StoreField: r2->field_f = r0
    //     0x93d594: stur            w0, [x2, #0xf]
    // 0x93d598: ldur            x0, [fp, #-8]
    // 0x93d59c: StoreField: r2->field_13 = r0
    //     0x93d59c: stur            w0, [x2, #0x13]
    // 0x93d5a0: r1 = <Widget>
    //     0x93d5a0: add             x1, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x93d5a4: ldr             x1, [x1, #0x410]
    // 0x93d5a8: r0 = AllocateGrowableArray()
    //     0x93d5a8: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x93d5ac: mov             x1, x0
    // 0x93d5b0: ldur            x0, [fp, #-0x18]
    // 0x93d5b4: stur            x1, [fp, #-8]
    // 0x93d5b8: StoreField: r1->field_f = r0
    //     0x93d5b8: stur            w0, [x1, #0xf]
    // 0x93d5bc: r0 = 4
    //     0x93d5bc: movz            x0, #0x4
    // 0x93d5c0: StoreField: r1->field_b = r0
    //     0x93d5c0: stur            w0, [x1, #0xb]
    // 0x93d5c4: r0 = Stack()
    //     0x93d5c4: bl              #0x66ad20  ; AllocateStackStub -> Stack (size=0x20)
    // 0x93d5c8: r1 = Instance_AlignmentDirectional
    //     0x93d5c8: add             x1, PP, #0x12, lsl #12  ; [pp+0x12238] Obj!AlignmentDirectional@c2f3a1
    //     0x93d5cc: ldr             x1, [x1, #0x238]
    // 0x93d5d0: StoreField: r0->field_f = r1
    //     0x93d5d0: stur            w1, [x0, #0xf]
    // 0x93d5d4: r1 = Instance_StackFit
    //     0x93d5d4: add             x1, PP, #0x12, lsl #12  ; [pp+0x12240] Obj!StackFit@c438d1
    //     0x93d5d8: ldr             x1, [x1, #0x240]
    // 0x93d5dc: ArrayStore: r0[0] = r1  ; List_4
    //     0x93d5dc: stur            w1, [x0, #0x17]
    // 0x93d5e0: r1 = Instance_Clip
    //     0x93d5e0: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x93d5e4: ldr             x1, [x1, #0x438]
    // 0x93d5e8: StoreField: r0->field_1b = r1
    //     0x93d5e8: stur            w1, [x0, #0x1b]
    // 0x93d5ec: ldur            x1, [fp, #-8]
    // 0x93d5f0: StoreField: r0->field_b = r1
    //     0x93d5f0: stur            w1, [x0, #0xb]
    // 0x93d5f4: LeaveFrame
    //     0x93d5f4: mov             SP, fp
    //     0x93d5f8: ldp             fp, lr, [SP], #0x10
    // 0x93d5fc: ret
    //     0x93d5fc: ret             
    // 0x93d600: ldr             x1, [fp, #0x18]
    // 0x93d604: LoadField: r2 = r1->field_b
    //     0x93d604: ldur            w2, [x1, #0xb]
    // 0x93d608: DecompressPointer r2
    //     0x93d608: add             x2, x2, HEAP, lsl #32
    // 0x93d60c: cmp             w2, NULL
    // 0x93d610: b.eq            #0x93d64c
    // 0x93d614: r0 = Instance_SizedBox
    //     0x93d614: ldr             x0, [PP, #0x61f8]  ; [pp+0x61f8] Obj!SizedBox@c37c11
    // 0x93d618: LeaveFrame
    //     0x93d618: mov             SP, fp
    //     0x93d61c: ldp             fp, lr, [SP], #0x10
    // 0x93d620: ret
    //     0x93d620: ret             
    // 0x93d624: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93d624: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93d628: b               #0x93d3f0
    // 0x93d62c: r9 = _controller
    //     0x93d62c: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d110] Field <_HelperErrorState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0x93d630: ldr             x9, [x9, #0x110]
    // 0x93d634: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d634: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d638: r9 = _status
    //     0x93d638: ldr             x9, [PP, #0x6060]  ; [pp+0x6060] Field <AnimationController._status@1160066280>: late (offset: 0x44)
    // 0x93d63c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d63c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d640: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d640: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93d644: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d644: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93d648: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d648: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93d64c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d64c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _hasError(/* No info */) {
    // ** addr: 0x93d650, size: 0x48
    // 0x93d650: EnterFrame
    //     0x93d650: stp             fp, lr, [SP, #-0x10]!
    //     0x93d654: mov             fp, SP
    // 0x93d658: ldr             x1, [fp, #0x10]
    // 0x93d65c: LoadField: r2 = r1->field_b
    //     0x93d65c: ldur            w2, [x1, #0xb]
    // 0x93d660: DecompressPointer r2
    //     0x93d660: add             x2, x2, HEAP, lsl #32
    // 0x93d664: cmp             w2, NULL
    // 0x93d668: b.eq            #0x93d694
    // 0x93d66c: LoadField: r1 = r2->field_1f
    //     0x93d66c: ldur            w1, [x2, #0x1f]
    // 0x93d670: DecompressPointer r1
    //     0x93d670: add             x1, x1, HEAP, lsl #32
    // 0x93d674: cmp             w1, NULL
    // 0x93d678: b.eq            #0x93d684
    // 0x93d67c: r0 = true
    //     0x93d67c: add             x0, NULL, #0x20  ; true
    // 0x93d680: b               #0x93d688
    // 0x93d684: r0 = false
    //     0x93d684: add             x0, NULL, #0x30  ; false
    // 0x93d688: LeaveFrame
    //     0x93d688: mov             SP, fp
    //     0x93d68c: ldp             fp, lr, [SP], #0x10
    // 0x93d690: ret
    //     0x93d690: ret             
    // 0x93d694: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d694: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa20c00, size: 0x124
    // 0xa20c00: EnterFrame
    //     0xa20c00: stp             fp, lr, [SP, #-0x10]!
    //     0xa20c04: mov             fp, SP
    // 0xa20c08: AllocStack(0x20)
    //     0xa20c08: sub             SP, SP, #0x20
    // 0xa20c0c: CheckStackOverflow
    //     0xa20c0c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa20c10: cmp             SP, x16
    //     0xa20c14: b.ls            #0xa20d18
    // 0xa20c18: r1 = <double>
    //     0xa20c18: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20c1c: r0 = AnimationController()
    //     0xa20c1c: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa20c20: stur            x0, [fp, #-8]
    // 0xa20c24: ldr             x16, [fp, #0x10]
    // 0xa20c28: stp             x16, x0, [SP, #8]
    // 0xa20c2c: r16 = Instance_Duration
    //     0xa20c2c: add             x16, PP, #0x40, lsl #12  ; [pp+0x40e28] Obj!Duration@c47e41
    //     0xa20c30: ldr             x16, [x16, #0xe28]
    // 0xa20c34: str             x16, [SP]
    // 0xa20c38: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0xa20c38: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0xa20c3c: ldr             x4, [x4, #0x4e0]
    // 0xa20c40: r0 = AnimationController()
    //     0xa20c40: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa20c44: ldur            x0, [fp, #-8]
    // 0xa20c48: ldr             x1, [fp, #0x10]
    // 0xa20c4c: StoreField: r1->field_1b = r0
    //     0xa20c4c: stur            w0, [x1, #0x1b]
    //     0xa20c50: ldurb           w16, [x1, #-1]
    //     0xa20c54: ldurb           w17, [x0, #-1]
    //     0xa20c58: and             x16, x17, x16, lsr #2
    //     0xa20c5c: tst             x16, HEAP, lsr #32
    //     0xa20c60: b.eq            #0xa20c68
    //     0xa20c64: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa20c68: LoadField: r0 = r1->field_b
    //     0xa20c68: ldur            w0, [x1, #0xb]
    // 0xa20c6c: DecompressPointer r0
    //     0xa20c6c: add             x0, x0, HEAP, lsl #32
    // 0xa20c70: cmp             w0, NULL
    // 0xa20c74: b.eq            #0xa20d20
    // 0xa20c78: LoadField: r2 = r0->field_1f
    //     0xa20c78: ldur            w2, [x0, #0x1f]
    // 0xa20c7c: DecompressPointer r2
    //     0xa20c7c: add             x2, x2, HEAP, lsl #32
    // 0xa20c80: cmp             w2, NULL
    // 0xa20c84: b.eq            #0xa20cc8
    // 0xa20c88: str             x1, [SP]
    // 0xa20c8c: r0 = _buildError()
    //     0xa20c8c: bl              #0x8ae108  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_buildError
    // 0xa20c90: ldr             x1, [fp, #0x10]
    // 0xa20c94: StoreField: r1->field_23 = r0
    //     0xa20c94: stur            w0, [x1, #0x23]
    //     0xa20c98: ldurb           w16, [x1, #-1]
    //     0xa20c9c: ldurb           w17, [x0, #-1]
    //     0xa20ca0: and             x16, x17, x16, lsr #2
    //     0xa20ca4: tst             x16, HEAP, lsr #32
    //     0xa20ca8: b.eq            #0xa20cb0
    //     0xa20cac: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa20cb0: LoadField: r0 = r1->field_1b
    //     0xa20cb0: ldur            w0, [x1, #0x1b]
    // 0xa20cb4: DecompressPointer r0
    //     0xa20cb4: add             x0, x0, HEAP, lsl #32
    // 0xa20cb8: str             x0, [SP, #8]
    // 0xa20cbc: d0 = 1.000000
    //     0xa20cbc: fmov            d0, #1.00000000
    // 0xa20cc0: str             d0, [SP]
    // 0xa20cc4: r0 = value=()
    //     0xa20cc4: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0xa20cc8: ldr             x0, [fp, #0x10]
    // 0xa20ccc: LoadField: r1 = r0->field_1b
    //     0xa20ccc: ldur            w1, [x0, #0x1b]
    // 0xa20cd0: DecompressPointer r1
    //     0xa20cd0: add             x1, x1, HEAP, lsl #32
    // 0xa20cd4: stur            x1, [fp, #-8]
    // 0xa20cd8: r1 = 1
    //     0xa20cd8: movz            x1, #0x1
    // 0xa20cdc: r0 = AllocateContext()
    //     0xa20cdc: bl              #0xc5def4  ; AllocateContextStub
    // 0xa20ce0: mov             x1, x0
    // 0xa20ce4: ldr             x0, [fp, #0x10]
    // 0xa20ce8: StoreField: r1->field_f = r0
    //     0xa20ce8: stur            w0, [x1, #0xf]
    // 0xa20cec: mov             x2, x1
    // 0xa20cf0: r1 = Function '_handleChange@159019562':.
    //     0xa20cf0: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d148] AnonymousClosure: (0xa20d24), in [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_handleChange (0xa20d6c)
    //     0xa20cf4: ldr             x1, [x1, #0x148]
    // 0xa20cf8: r0 = AllocateClosure()
    //     0xa20cf8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa20cfc: ldur            x16, [fp, #-8]
    // 0xa20d00: stp             x0, x16, [SP]
    // 0xa20d04: r0 = addActionListener()
    //     0xa20d04: bl              #0xae8304  ; [package:flutter/src/widgets/actions.dart] Action::addActionListener
    // 0xa20d08: r0 = Null
    //     0xa20d08: mov             x0, NULL
    // 0xa20d0c: LeaveFrame
    //     0xa20d0c: mov             SP, fp
    //     0xa20d10: ldp             fp, lr, [SP], #0x10
    // 0xa20d14: ret
    //     0xa20d14: ret             
    // 0xa20d18: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa20d18: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa20d1c: b               #0xa20c18
    // 0xa20d20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa20d20: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _handleChange(dynamic) {
    // ** addr: 0xa20d24, size: 0x48
    // 0xa20d24: EnterFrame
    //     0xa20d24: stp             fp, lr, [SP, #-0x10]!
    //     0xa20d28: mov             fp, SP
    // 0xa20d2c: AllocStack(0x8)
    //     0xa20d2c: sub             SP, SP, #8
    // 0xa20d30: SetupParameters()
    //     0xa20d30: ldr             x0, [fp, #0x10]
    //     0xa20d34: ldur            w1, [x0, #0x17]
    //     0xa20d38: add             x1, x1, HEAP, lsl #32
    // 0xa20d3c: CheckStackOverflow
    //     0xa20d3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa20d40: cmp             SP, x16
    //     0xa20d44: b.ls            #0xa20d64
    // 0xa20d48: LoadField: r0 = r1->field_f
    //     0xa20d48: ldur            w0, [x1, #0xf]
    // 0xa20d4c: DecompressPointer r0
    //     0xa20d4c: add             x0, x0, HEAP, lsl #32
    // 0xa20d50: str             x0, [SP]
    // 0xa20d54: r0 = _handleChange()
    //     0xa20d54: bl              #0xa20d6c  ; [package:flutter/src/material/input_decorator.dart] _HelperErrorState::_handleChange
    // 0xa20d58: LeaveFrame
    //     0xa20d58: mov             SP, fp
    //     0xa20d5c: ldp             fp, lr, [SP], #0x10
    // 0xa20d60: ret
    //     0xa20d60: ret             
    // 0xa20d64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa20d64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa20d68: b               #0xa20d48
  }
  _ _handleChange(/* No info */) {
    // ** addr: 0xa20d6c, size: 0x4c
    // 0xa20d6c: EnterFrame
    //     0xa20d6c: stp             fp, lr, [SP, #-0x10]!
    //     0xa20d70: mov             fp, SP
    // 0xa20d74: AllocStack(0x10)
    //     0xa20d74: sub             SP, SP, #0x10
    // 0xa20d78: CheckStackOverflow
    //     0xa20d78: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa20d7c: cmp             SP, x16
    //     0xa20d80: b.ls            #0xa20db0
    // 0xa20d84: r1 = Function '<anonymous closure>':.
    //     0xa20d84: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d150] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa20d88: ldr             x1, [x1, #0x150]
    // 0xa20d8c: r2 = Null
    //     0xa20d8c: mov             x2, NULL
    // 0xa20d90: r0 = AllocateClosure()
    //     0xa20d90: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa20d94: ldr             x16, [fp, #0x10]
    // 0xa20d98: stp             x0, x16, [SP]
    // 0xa20d9c: r0 = setState()
    //     0xa20d9c: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0xa20da0: r0 = Null
    //     0xa20da0: mov             x0, NULL
    // 0xa20da4: LeaveFrame
    //     0xa20da4: mov             SP, fp
    //     0xa20da8: ldp             fp, lr, [SP], #0x10
    // 0xa20dac: ret
    //     0xa20dac: ret             
    // 0xa20db0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa20db0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa20db4: b               #0xa20d84
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa569d8, size: 0x68
    // 0xa569d8: EnterFrame
    //     0xa569d8: stp             fp, lr, [SP, #-0x10]!
    //     0xa569dc: mov             fp, SP
    // 0xa569e0: AllocStack(0x8)
    //     0xa569e0: sub             SP, SP, #8
    // 0xa569e4: CheckStackOverflow
    //     0xa569e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa569e8: cmp             SP, x16
    //     0xa569ec: b.ls            #0xa56a2c
    // 0xa569f0: ldr             x0, [fp, #0x10]
    // 0xa569f4: LoadField: r1 = r0->field_1b
    //     0xa569f4: ldur            w1, [x0, #0x1b]
    // 0xa569f8: DecompressPointer r1
    //     0xa569f8: add             x1, x1, HEAP, lsl #32
    // 0xa569fc: r16 = Sentinel
    //     0xa569fc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa56a00: cmp             w1, w16
    // 0xa56a04: b.eq            #0xa56a34
    // 0xa56a08: str             x1, [SP]
    // 0xa56a0c: r0 = dispose()
    //     0xa56a0c: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa56a10: ldr             x16, [fp, #0x10]
    // 0xa56a14: str             x16, [SP]
    // 0xa56a18: r0 = dispose()
    //     0xa56a18: bl              #0xa56a40  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::dispose
    // 0xa56a1c: r0 = Null
    //     0xa56a1c: mov             x0, NULL
    // 0xa56a20: LeaveFrame
    //     0xa56a20: mov             SP, fp
    //     0xa56a24: ldp             fp, lr, [SP], #0x10
    // 0xa56a28: ret
    //     0xa56a28: ret             
    // 0xa56a2c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa56a2c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa56a30: b               #0xa569f0
    // 0xa56a34: r9 = _controller
    //     0xa56a34: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d110] Field <_HelperErrorState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0xa56a38: ldr             x9, [x9, #0x110]
    // 0xa56a3c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa56a3c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3214, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __BorderContainerState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x555f30, size: 0x184
    // 0x555f30: EnterFrame
    //     0x555f30: stp             fp, lr, [SP, #-0x10]!
    //     0x555f34: mov             fp, SP
    // 0x555f38: AllocStack(0x20)
    //     0x555f38: sub             SP, SP, #0x20
    // 0x555f3c: CheckStackOverflow
    //     0x555f3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x555f40: cmp             SP, x16
    //     0x555f44: b.ls            #0x5560a4
    // 0x555f48: ldr             x0, [fp, #0x18]
    // 0x555f4c: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x555f4c: ldur            w1, [x0, #0x17]
    // 0x555f50: DecompressPointer r1
    //     0x555f50: add             x1, x1, HEAP, lsl #32
    // 0x555f54: cmp             w1, NULL
    // 0x555f58: b.ne            #0x555f64
    // 0x555f5c: str             x0, [SP]
    // 0x555f60: r0 = _updateTickerModeNotifier()
    //     0x555f60: bl              #0x5560d8  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x555f64: ldr             x0, [fp, #0x18]
    // 0x555f68: LoadField: r1 = r0->field_13
    //     0x555f68: ldur            w1, [x0, #0x13]
    // 0x555f6c: DecompressPointer r1
    //     0x555f6c: add             x1, x1, HEAP, lsl #32
    // 0x555f70: cmp             w1, NULL
    // 0x555f74: b.ne            #0x55600c
    // 0x555f78: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0x555f78: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x555f7c: ldr             x0, [x0, #0x528]
    //     0x555f80: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x555f84: cmp             w0, w16
    //     0x555f88: b.ne            #0x555f94
    //     0x555f8c: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0x555f90: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x555f94: r1 = <_WidgetTicker>
    //     0x555f94: add             x1, PP, #0x22, lsl #12  ; [pp+0x222e8] TypeArguments: <_WidgetTicker>
    //     0x555f98: ldr             x1, [x1, #0x2e8]
    // 0x555f9c: stur            x0, [fp, #-8]
    // 0x555fa0: r0 = _Set()
    //     0x555fa0: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x555fa4: mov             x1, x0
    // 0x555fa8: ldur            x0, [fp, #-8]
    // 0x555fac: stur            x1, [fp, #-0x10]
    // 0x555fb0: StoreField: r1->field_1b = r0
    //     0x555fb0: stur            w0, [x1, #0x1b]
    // 0x555fb4: StoreField: r1->field_b = rZR
    //     0x555fb4: stur            wzr, [x1, #0xb]
    // 0x555fb8: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0x555fb8: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x555fbc: ldr             x0, [x0, #0x530]
    //     0x555fc0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x555fc4: cmp             w0, w16
    //     0x555fc8: b.ne            #0x555fd4
    //     0x555fcc: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0x555fd0: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x555fd4: mov             x1, x0
    // 0x555fd8: ldur            x0, [fp, #-0x10]
    // 0x555fdc: StoreField: r0->field_f = r1
    //     0x555fdc: stur            w1, [x0, #0xf]
    // 0x555fe0: StoreField: r0->field_13 = rZR
    //     0x555fe0: stur            wzr, [x0, #0x13]
    // 0x555fe4: ArrayStore: r0[0] = rZR  ; List_4
    //     0x555fe4: stur            wzr, [x0, #0x17]
    // 0x555fe8: ldr             x1, [fp, #0x18]
    // 0x555fec: StoreField: r1->field_13 = r0
    //     0x555fec: stur            w0, [x1, #0x13]
    //     0x555ff0: ldurb           w16, [x1, #-1]
    //     0x555ff4: ldurb           w17, [x0, #-1]
    //     0x555ff8: and             x16, x17, x16, lsr #2
    //     0x555ffc: tst             x16, HEAP, lsr #32
    //     0x556000: b.eq            #0x556008
    //     0x556004: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556008: b               #0x556010
    // 0x55600c: mov             x1, x0
    // 0x556010: ldr             x0, [fp, #0x10]
    // 0x556014: r0 = _WidgetTicker()
    //     0x556014: bl              #0x54b590  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x556018: mov             x2, x0
    // 0x55601c: ldr             x1, [fp, #0x18]
    // 0x556020: stur            x2, [fp, #-8]
    // 0x556024: StoreField: r2->field_1b = r1
    //     0x556024: stur            w1, [x2, #0x1b]
    // 0x556028: r0 = false
    //     0x556028: add             x0, NULL, #0x30  ; false
    // 0x55602c: StoreField: r2->field_b = r0
    //     0x55602c: stur            w0, [x2, #0xb]
    // 0x556030: ldr             x0, [fp, #0x10]
    // 0x556034: StoreField: r2->field_13 = r0
    //     0x556034: stur            w0, [x2, #0x13]
    // 0x556038: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x556038: ldur            w0, [x1, #0x17]
    // 0x55603c: DecompressPointer r0
    //     0x55603c: add             x0, x0, HEAP, lsl #32
    // 0x556040: cmp             w0, NULL
    // 0x556044: b.eq            #0x5560ac
    // 0x556048: r3 = LoadClassIdInstr(r0)
    //     0x556048: ldur            x3, [x0, #-1]
    //     0x55604c: ubfx            x3, x3, #0xc, #0x14
    // 0x556050: str             x0, [SP]
    // 0x556054: mov             x0, x3
    // 0x556058: r0 = GDT[cid_x0 + 0x801]()
    //     0x556058: add             lr, x0, #0x801
    //     0x55605c: ldr             lr, [x21, lr, lsl #3]
    //     0x556060: blr             lr
    // 0x556064: eor             x1, x0, #0x10
    // 0x556068: ldur            x16, [fp, #-8]
    // 0x55606c: stp             x1, x16, [SP]
    // 0x556070: r0 = muted=()
    //     0x556070: bl              #0x54a1d8  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x556074: ldr             x0, [fp, #0x18]
    // 0x556078: LoadField: r1 = r0->field_13
    //     0x556078: ldur            w1, [x0, #0x13]
    // 0x55607c: DecompressPointer r1
    //     0x55607c: add             x1, x1, HEAP, lsl #32
    // 0x556080: cmp             w1, NULL
    // 0x556084: b.eq            #0x5560b0
    // 0x556088: ldur            x16, [fp, #-8]
    // 0x55608c: stp             x16, x1, [SP]
    // 0x556090: r0 = add()
    //     0x556090: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x556094: ldur            x0, [fp, #-8]
    // 0x556098: LeaveFrame
    //     0x556098: mov             SP, fp
    //     0x55609c: ldp             fp, lr, [SP], #0x10
    // 0x5560a0: ret
    //     0x5560a0: ret             
    // 0x5560a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5560a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5560a8: b               #0x555f48
    // 0x5560ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5560ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5560b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5560b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x5560d8, size: 0x148
    // 0x5560d8: EnterFrame
    //     0x5560d8: stp             fp, lr, [SP, #-0x10]!
    //     0x5560dc: mov             fp, SP
    // 0x5560e0: AllocStack(0x20)
    //     0x5560e0: sub             SP, SP, #0x20
    // 0x5560e4: CheckStackOverflow
    //     0x5560e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5560e8: cmp             SP, x16
    //     0x5560ec: b.ls            #0x556214
    // 0x5560f0: ldr             x0, [fp, #0x10]
    // 0x5560f4: LoadField: r1 = r0->field_f
    //     0x5560f4: ldur            w1, [x0, #0xf]
    // 0x5560f8: DecompressPointer r1
    //     0x5560f8: add             x1, x1, HEAP, lsl #32
    // 0x5560fc: cmp             w1, NULL
    // 0x556100: b.eq            #0x55621c
    // 0x556104: str             x1, [SP]
    // 0x556108: r0 = getNotifier()
    //     0x556108: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x55610c: mov             x1, x0
    // 0x556110: ldr             x0, [fp, #0x10]
    // 0x556114: stur            x1, [fp, #-0x10]
    // 0x556118: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x556118: ldur            w2, [x0, #0x17]
    // 0x55611c: DecompressPointer r2
    //     0x55611c: add             x2, x2, HEAP, lsl #32
    // 0x556120: stur            x2, [fp, #-8]
    // 0x556124: cmp             w1, w2
    // 0x556128: b.ne            #0x55613c
    // 0x55612c: r0 = Null
    //     0x55612c: mov             x0, NULL
    // 0x556130: LeaveFrame
    //     0x556130: mov             SP, fp
    //     0x556134: ldp             fp, lr, [SP], #0x10
    // 0x556138: ret
    //     0x556138: ret             
    // 0x55613c: cmp             w2, NULL
    // 0x556140: b.eq            #0x556198
    // 0x556144: r1 = 1
    //     0x556144: movz            x1, #0x1
    // 0x556148: r0 = AllocateContext()
    //     0x556148: bl              #0xc5def4  ; AllocateContextStub
    // 0x55614c: mov             x1, x0
    // 0x556150: ldr             x0, [fp, #0x10]
    // 0x556154: StoreField: r1->field_f = r0
    //     0x556154: stur            w0, [x1, #0xf]
    // 0x556158: mov             x2, x1
    // 0x55615c: r1 = Function '_updateTickers@328311458':.
    //     0x55615c: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d478] AnonymousClosure: (0x556220), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x556268)
    //     0x556160: ldr             x1, [x1, #0x478]
    // 0x556164: r0 = AllocateClosure()
    //     0x556164: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x556168: mov             x1, x0
    // 0x55616c: ldur            x0, [fp, #-8]
    // 0x556170: r2 = LoadClassIdInstr(r0)
    //     0x556170: ldur            x2, [x0, #-1]
    //     0x556174: ubfx            x2, x2, #0xc, #0x14
    // 0x556178: stp             x1, x0, [SP]
    // 0x55617c: mov             x0, x2
    // 0x556180: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x556180: movz            x17, #0xc9d0
    //     0x556184: add             lr, x0, x17
    //     0x556188: ldr             lr, [x21, lr, lsl #3]
    //     0x55618c: blr             lr
    // 0x556190: ldr             x0, [fp, #0x10]
    // 0x556194: ldur            x1, [fp, #-0x10]
    // 0x556198: r1 = 1
    //     0x556198: movz            x1, #0x1
    // 0x55619c: r0 = AllocateContext()
    //     0x55619c: bl              #0xc5def4  ; AllocateContextStub
    // 0x5561a0: mov             x1, x0
    // 0x5561a4: ldr             x0, [fp, #0x10]
    // 0x5561a8: StoreField: r1->field_f = r0
    //     0x5561a8: stur            w0, [x1, #0xf]
    // 0x5561ac: mov             x2, x1
    // 0x5561b0: r1 = Function '_updateTickers@328311458':.
    //     0x5561b0: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d478] AnonymousClosure: (0x556220), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x556268)
    //     0x5561b4: ldr             x1, [x1, #0x478]
    // 0x5561b8: r0 = AllocateClosure()
    //     0x5561b8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5561bc: ldur            x1, [fp, #-0x10]
    // 0x5561c0: r2 = LoadClassIdInstr(r1)
    //     0x5561c0: ldur            x2, [x1, #-1]
    //     0x5561c4: ubfx            x2, x2, #0xc, #0x14
    // 0x5561c8: stp             x0, x1, [SP]
    // 0x5561cc: mov             x0, x2
    // 0x5561d0: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x5561d0: movz            x17, #0xcefc
    //     0x5561d4: add             lr, x0, x17
    //     0x5561d8: ldr             lr, [x21, lr, lsl #3]
    //     0x5561dc: blr             lr
    // 0x5561e0: ldur            x0, [fp, #-0x10]
    // 0x5561e4: ldr             x1, [fp, #0x10]
    // 0x5561e8: ArrayStore: r1[0] = r0  ; List_4
    //     0x5561e8: stur            w0, [x1, #0x17]
    //     0x5561ec: ldurb           w16, [x1, #-1]
    //     0x5561f0: ldurb           w17, [x0, #-1]
    //     0x5561f4: and             x16, x17, x16, lsr #2
    //     0x5561f8: tst             x16, HEAP, lsr #32
    //     0x5561fc: b.eq            #0x556204
    //     0x556200: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x556204: r0 = Null
    //     0x556204: mov             x0, NULL
    // 0x556208: LeaveFrame
    //     0x556208: mov             SP, fp
    //     0x55620c: ldp             fp, lr, [SP], #0x10
    // 0x556210: ret
    //     0x556210: ret             
    // 0x556214: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556214: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556218: b               #0x5560f0
    // 0x55621c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55621c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x556220, size: 0x48
    // 0x556220: EnterFrame
    //     0x556220: stp             fp, lr, [SP, #-0x10]!
    //     0x556224: mov             fp, SP
    // 0x556228: AllocStack(0x8)
    //     0x556228: sub             SP, SP, #8
    // 0x55622c: SetupParameters()
    //     0x55622c: ldr             x0, [fp, #0x10]
    //     0x556230: ldur            w1, [x0, #0x17]
    //     0x556234: add             x1, x1, HEAP, lsl #32
    // 0x556238: CheckStackOverflow
    //     0x556238: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x55623c: cmp             SP, x16
    //     0x556240: b.ls            #0x556260
    // 0x556244: LoadField: r0 = r1->field_f
    //     0x556244: ldur            w0, [x1, #0xf]
    // 0x556248: DecompressPointer r0
    //     0x556248: add             x0, x0, HEAP, lsl #32
    // 0x55624c: str             x0, [SP]
    // 0x556250: r0 = _updateTickers()
    //     0x556250: bl              #0x556268  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers
    // 0x556254: LeaveFrame
    //     0x556254: mov             SP, fp
    //     0x556258: ldp             fp, lr, [SP], #0x10
    // 0x55625c: ret
    //     0x55625c: ret             
    // 0x556260: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x556260: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x556264: b               #0x556244
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x556268, size: 0x168
    // 0x556268: EnterFrame
    //     0x556268: stp             fp, lr, [SP, #-0x10]!
    //     0x55626c: mov             fp, SP
    // 0x556270: AllocStack(0x28)
    //     0x556270: sub             SP, SP, #0x28
    // 0x556274: CheckStackOverflow
    //     0x556274: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x556278: cmp             SP, x16
    //     0x55627c: b.ls            #0x5563b8
    // 0x556280: ldr             x1, [fp, #0x10]
    // 0x556284: LoadField: r0 = r1->field_13
    //     0x556284: ldur            w0, [x1, #0x13]
    // 0x556288: DecompressPointer r0
    //     0x556288: add             x0, x0, HEAP, lsl #32
    // 0x55628c: cmp             w0, NULL
    // 0x556290: b.eq            #0x5563a8
    // 0x556294: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x556294: ldur            w0, [x1, #0x17]
    // 0x556298: DecompressPointer r0
    //     0x556298: add             x0, x0, HEAP, lsl #32
    // 0x55629c: cmp             w0, NULL
    // 0x5562a0: b.eq            #0x5563c0
    // 0x5562a4: r2 = LoadClassIdInstr(r0)
    //     0x5562a4: ldur            x2, [x0, #-1]
    //     0x5562a8: ubfx            x2, x2, #0xc, #0x14
    // 0x5562ac: str             x0, [SP]
    // 0x5562b0: mov             x0, x2
    // 0x5562b4: r0 = GDT[cid_x0 + 0x801]()
    //     0x5562b4: add             lr, x0, #0x801
    //     0x5562b8: ldr             lr, [x21, lr, lsl #3]
    //     0x5562bc: blr             lr
    // 0x5562c0: eor             x1, x0, #0x10
    // 0x5562c4: ldr             x0, [fp, #0x10]
    // 0x5562c8: stur            x1, [fp, #-8]
    // 0x5562cc: LoadField: r2 = r0->field_13
    //     0x5562cc: ldur            w2, [x0, #0x13]
    // 0x5562d0: DecompressPointer r2
    //     0x5562d0: add             x2, x2, HEAP, lsl #32
    // 0x5562d4: cmp             w2, NULL
    // 0x5562d8: b.eq            #0x5563c4
    // 0x5562dc: str             x2, [SP]
    // 0x5562e0: r0 = iterator()
    //     0x5562e0: bl              #0x5aab8c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x5562e4: stur            x0, [fp, #-0x18]
    // 0x5562e8: LoadField: r2 = r0->field_7
    //     0x5562e8: ldur            w2, [x0, #7]
    // 0x5562ec: DecompressPointer r2
    //     0x5562ec: add             x2, x2, HEAP, lsl #32
    // 0x5562f0: stur            x2, [fp, #-0x10]
    // 0x5562f4: ldur            x1, [fp, #-8]
    // 0x5562f8: CheckStackOverflow
    //     0x5562f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5562fc: cmp             SP, x16
    //     0x556300: b.ls            #0x5563c8
    // 0x556304: str             x0, [SP]
    // 0x556308: r0 = moveNext()
    //     0x556308: bl              #0xb9b4b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x55630c: tbnz            w0, #4, #0x5563a8
    // 0x556310: ldur            x3, [fp, #-0x18]
    // 0x556314: LoadField: r4 = r3->field_33
    //     0x556314: ldur            w4, [x3, #0x33]
    // 0x556318: DecompressPointer r4
    //     0x556318: add             x4, x4, HEAP, lsl #32
    // 0x55631c: stur            x4, [fp, #-0x20]
    // 0x556320: cmp             w4, NULL
    // 0x556324: b.ne            #0x556358
    // 0x556328: mov             x0, x4
    // 0x55632c: ldur            x2, [fp, #-0x10]
    // 0x556330: r1 = Null
    //     0x556330: mov             x1, NULL
    // 0x556334: cmp             w2, NULL
    // 0x556338: b.eq            #0x556358
    // 0x55633c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x55633c: ldur            w4, [x2, #0x17]
    // 0x556340: DecompressPointer r4
    //     0x556340: add             x4, x4, HEAP, lsl #32
    // 0x556344: r8 = X0
    //     0x556344: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x556348: LoadField: r9 = r4->field_7
    //     0x556348: ldur            x9, [x4, #7]
    // 0x55634c: r3 = Null
    //     0x55634c: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d468] Null
    //     0x556350: ldr             x3, [x3, #0x468]
    // 0x556354: blr             x9
    // 0x556358: ldur            x1, [fp, #-8]
    // 0x55635c: ldur            x0, [fp, #-0x20]
    // 0x556360: LoadField: r2 = r0->field_b
    //     0x556360: ldur            w2, [x0, #0xb]
    // 0x556364: DecompressPointer r2
    //     0x556364: add             x2, x2, HEAP, lsl #32
    // 0x556368: cmp             w1, w2
    // 0x55636c: b.eq            #0x55639c
    // 0x556370: StoreField: r0->field_b = r1
    //     0x556370: stur            w1, [x0, #0xb]
    // 0x556374: tbnz            w1, #4, #0x556384
    // 0x556378: str             x0, [SP]
    // 0x55637c: r0 = unscheduleTick()
    //     0x55637c: bl              #0x54b4a4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x556380: b               #0x55639c
    // 0x556384: str             x0, [SP]
    // 0x556388: r0 = shouldScheduleTick()
    //     0x556388: bl              #0x54b45c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x55638c: tbnz            w0, #4, #0x55639c
    // 0x556390: ldur            x16, [fp, #-0x20]
    // 0x556394: str             x16, [SP]
    // 0x556398: r0 = scheduleTick()
    //     0x556398: bl              #0x54a25c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x55639c: ldur            x0, [fp, #-0x18]
    // 0x5563a0: ldur            x2, [fp, #-0x10]
    // 0x5563a4: b               #0x5562f4
    // 0x5563a8: r0 = Null
    //     0x5563a8: mov             x0, NULL
    // 0x5563ac: LeaveFrame
    //     0x5563ac: mov             SP, fp
    //     0x5563b0: ldp             fp, lr, [SP], #0x10
    // 0x5563b4: ret
    //     0x5563b4: ret             
    // 0x5563b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5563b8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5563bc: b               #0x556280
    // 0x5563c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5563c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5563c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5563c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5563c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5563c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5563cc: b               #0x556304
  }
  _ activate(/* No info */) {
    // ** addr: 0x8ca390, size: 0x48
    // 0x8ca390: EnterFrame
    //     0x8ca390: stp             fp, lr, [SP, #-0x10]!
    //     0x8ca394: mov             fp, SP
    // 0x8ca398: AllocStack(0x8)
    //     0x8ca398: sub             SP, SP, #8
    // 0x8ca39c: CheckStackOverflow
    //     0x8ca39c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8ca3a0: cmp             SP, x16
    //     0x8ca3a4: b.ls            #0x8ca3d0
    // 0x8ca3a8: ldr             x16, [fp, #0x10]
    // 0x8ca3ac: str             x16, [SP]
    // 0x8ca3b0: r0 = _updateTickerModeNotifier()
    //     0x8ca3b0: bl              #0x5560d8  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8ca3b4: ldr             x16, [fp, #0x10]
    // 0x8ca3b8: str             x16, [SP]
    // 0x8ca3bc: r0 = _updateTickers()
    //     0x8ca3bc: bl              #0x556268  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers
    // 0x8ca3c0: r0 = Null
    //     0x8ca3c0: mov             x0, NULL
    // 0x8ca3c4: LeaveFrame
    //     0x8ca3c4: mov             SP, fp
    //     0x8ca3c8: ldp             fp, lr, [SP], #0x10
    // 0x8ca3cc: ret
    //     0x8ca3cc: ret             
    // 0x8ca3d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8ca3d0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8ca3d4: b               #0x8ca3a8
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa56934, size: 0xa4
    // 0xa56934: EnterFrame
    //     0xa56934: stp             fp, lr, [SP, #-0x10]!
    //     0xa56938: mov             fp, SP
    // 0xa5693c: AllocStack(0x18)
    //     0xa5693c: sub             SP, SP, #0x18
    // 0xa56940: CheckStackOverflow
    //     0xa56940: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa56944: cmp             SP, x16
    //     0xa56948: b.ls            #0xa569d0
    // 0xa5694c: ldr             x0, [fp, #0x10]
    // 0xa56950: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa56950: ldur            w1, [x0, #0x17]
    // 0xa56954: DecompressPointer r1
    //     0xa56954: add             x1, x1, HEAP, lsl #32
    // 0xa56958: stur            x1, [fp, #-8]
    // 0xa5695c: cmp             w1, NULL
    // 0xa56960: b.ne            #0xa5696c
    // 0xa56964: mov             x1, x0
    // 0xa56968: b               #0xa569bc
    // 0xa5696c: r1 = 1
    //     0xa5696c: movz            x1, #0x1
    // 0xa56970: r0 = AllocateContext()
    //     0xa56970: bl              #0xc5def4  ; AllocateContextStub
    // 0xa56974: mov             x1, x0
    // 0xa56978: ldr             x0, [fp, #0x10]
    // 0xa5697c: StoreField: r1->field_f = r0
    //     0xa5697c: stur            w0, [x1, #0xf]
    // 0xa56980: mov             x2, x1
    // 0xa56984: r1 = Function '_updateTickers@328311458':.
    //     0xa56984: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d478] AnonymousClosure: (0x556220), in [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::_updateTickers (0x556268)
    //     0xa56988: ldr             x1, [x1, #0x478]
    // 0xa5698c: r0 = AllocateClosure()
    //     0xa5698c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa56990: mov             x1, x0
    // 0xa56994: ldur            x0, [fp, #-8]
    // 0xa56998: r2 = LoadClassIdInstr(r0)
    //     0xa56998: ldur            x2, [x0, #-1]
    //     0xa5699c: ubfx            x2, x2, #0xc, #0x14
    // 0xa569a0: stp             x1, x0, [SP]
    // 0xa569a4: mov             x0, x2
    // 0xa569a8: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa569a8: movz            x17, #0xc9d0
    //     0xa569ac: add             lr, x0, x17
    //     0xa569b0: ldr             lr, [x21, lr, lsl #3]
    //     0xa569b4: blr             lr
    // 0xa569b8: ldr             x1, [fp, #0x10]
    // 0xa569bc: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa569bc: stur            NULL, [x1, #0x17]
    // 0xa569c0: r0 = Null
    //     0xa569c0: mov             x0, NULL
    // 0xa569c4: LeaveFrame
    //     0xa569c4: mov             SP, fp
    //     0xa569c8: ldp             fp, lr, [SP], #0x10
    // 0xa569cc: ret
    //     0xa569cc: ret             
    // 0xa569d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa569d0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa569d4: b               #0xa5694c
  }
}

// class id: 3215, size: 0x34, field offset: 0x1c
class _BorderContainerState extends __BorderContainerState&State&TickerProviderStateMixin {

  late Animation<double> _borderAnimation; // offset: 0x24
  late AnimationController _hoverColorController; // offset: 0x20
  late _InputBorderTween _border; // offset: 0x28
  late ColorTween _hoverColorTween; // offset: 0x30
  late Animation<double> _hoverAnimation; // offset: 0x2c
  late AnimationController _controller; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8adc2c, size: 0x344
    // 0x8adc2c: EnterFrame
    //     0x8adc2c: stp             fp, lr, [SP, #-0x10]!
    //     0x8adc30: mov             fp, SP
    // 0x8adc34: AllocStack(0x20)
    //     0x8adc34: sub             SP, SP, #0x20
    // 0x8adc38: CheckStackOverflow
    //     0x8adc38: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8adc3c: cmp             SP, x16
    //     0x8adc40: b.ls            #0x8adf30
    // 0x8adc44: ldr             x0, [fp, #0x10]
    // 0x8adc48: r2 = Null
    //     0x8adc48: mov             x2, NULL
    // 0x8adc4c: r1 = Null
    //     0x8adc4c: mov             x1, NULL
    // 0x8adc50: r4 = 59
    //     0x8adc50: movz            x4, #0x3b
    // 0x8adc54: branchIfSmi(r0, 0x8adc60)
    //     0x8adc54: tbz             w0, #0, #0x8adc60
    // 0x8adc58: r4 = LoadClassIdInstr(r0)
    //     0x8adc58: ldur            x4, [x0, #-1]
    //     0x8adc5c: ubfx            x4, x4, #0xc, #0x14
    // 0x8adc60: r17 = 4191
    //     0x8adc60: movz            x17, #0x105f
    // 0x8adc64: cmp             x4, x17
    // 0x8adc68: b.eq            #0x8adc80
    // 0x8adc6c: r8 = _BorderContainer
    //     0x8adc6c: add             x8, PP, #0x4d, lsl #12  ; [pp+0x4d4a8] Type: _BorderContainer
    //     0x8adc70: ldr             x8, [x8, #0x4a8]
    // 0x8adc74: r3 = Null
    //     0x8adc74: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d4b0] Null
    //     0x8adc78: ldr             x3, [x3, #0x4b0]
    // 0x8adc7c: r0 = _BorderContainer()
    //     0x8adc7c: bl              #0x5560b4  ; IsType__BorderContainer_Stub
    // 0x8adc80: ldr             x3, [fp, #0x18]
    // 0x8adc84: LoadField: r2 = r3->field_7
    //     0x8adc84: ldur            w2, [x3, #7]
    // 0x8adc88: DecompressPointer r2
    //     0x8adc88: add             x2, x2, HEAP, lsl #32
    // 0x8adc8c: ldr             x0, [fp, #0x10]
    // 0x8adc90: r1 = Null
    //     0x8adc90: mov             x1, NULL
    // 0x8adc94: cmp             w2, NULL
    // 0x8adc98: b.eq            #0x8adcbc
    // 0x8adc9c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8adc9c: ldur            w4, [x2, #0x17]
    // 0x8adca0: DecompressPointer r4
    //     0x8adca0: add             x4, x4, HEAP, lsl #32
    // 0x8adca4: r8 = X0 bound StatefulWidget
    //     0x8adca4: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8adca8: ldr             x8, [x8, #0x290]
    // 0x8adcac: LoadField: r9 = r4->field_7
    //     0x8adcac: ldur            x9, [x4, #7]
    // 0x8adcb0: r3 = Null
    //     0x8adcb0: add             x3, PP, #0x4d, lsl #12  ; [pp+0x4d4c0] Null
    //     0x8adcb4: ldr             x3, [x3, #0x4c0]
    // 0x8adcb8: blr             x9
    // 0x8adcbc: ldr             x1, [fp, #0x18]
    // 0x8adcc0: LoadField: r0 = r1->field_b
    //     0x8adcc0: ldur            w0, [x1, #0xb]
    // 0x8adcc4: DecompressPointer r0
    //     0x8adcc4: add             x0, x0, HEAP, lsl #32
    // 0x8adcc8: cmp             w0, NULL
    // 0x8adccc: b.eq            #0x8adf38
    // 0x8adcd0: LoadField: r2 = r0->field_b
    //     0x8adcd0: ldur            w2, [x0, #0xb]
    // 0x8adcd4: DecompressPointer r2
    //     0x8adcd4: add             x2, x2, HEAP, lsl #32
    // 0x8adcd8: ldr             x3, [fp, #0x10]
    // 0x8adcdc: LoadField: r4 = r3->field_b
    //     0x8adcdc: ldur            w4, [x3, #0xb]
    // 0x8adce0: DecompressPointer r4
    //     0x8adce0: add             x4, x4, HEAP, lsl #32
    // 0x8adce4: stur            x4, [fp, #-8]
    // 0x8adce8: r0 = LoadClassIdInstr(r2)
    //     0x8adce8: ldur            x0, [x2, #-1]
    //     0x8adcec: ubfx            x0, x0, #0xc, #0x14
    // 0x8adcf0: lsl             x0, x0, #1
    // 0x8adcf4: r17 = 4696
    //     0x8adcf4: movz            x17, #0x1258
    // 0x8adcf8: cmp             w0, w17
    // 0x8adcfc: b.ne            #0x8add14
    // 0x8add00: cmp             w2, w4
    // 0x8add04: b.eq            #0x8addc8
    // 0x8add08: mov             x0, x1
    // 0x8add0c: mov             x2, x4
    // 0x8add10: b               #0x8add38
    // 0x8add14: r0 = LoadClassIdInstr(r2)
    //     0x8add14: ldur            x0, [x2, #-1]
    //     0x8add18: ubfx            x0, x0, #0xc, #0x14
    // 0x8add1c: stp             x4, x2, [SP]
    // 0x8add20: mov             lr, x0
    // 0x8add24: ldr             lr, [x21, lr, lsl #3]
    // 0x8add28: blr             lr
    // 0x8add2c: tbz             w0, #4, #0x8addc8
    // 0x8add30: ldr             x0, [fp, #0x18]
    // 0x8add34: ldur            x2, [fp, #-8]
    // 0x8add38: LoadField: r1 = r0->field_b
    //     0x8add38: ldur            w1, [x0, #0xb]
    // 0x8add3c: DecompressPointer r1
    //     0x8add3c: add             x1, x1, HEAP, lsl #32
    // 0x8add40: cmp             w1, NULL
    // 0x8add44: b.eq            #0x8adf3c
    // 0x8add48: LoadField: r3 = r1->field_b
    //     0x8add48: ldur            w3, [x1, #0xb]
    // 0x8add4c: DecompressPointer r3
    //     0x8add4c: add             x3, x3, HEAP, lsl #32
    // 0x8add50: stur            x3, [fp, #-0x10]
    // 0x8add54: r1 = <InputBorder>
    //     0x8add54: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d4d0] TypeArguments: <InputBorder>
    //     0x8add58: ldr             x1, [x1, #0x4d0]
    // 0x8add5c: r0 = _InputBorderTween()
    //     0x8add5c: bl              #0x8adf70  ; Allocate_InputBorderTweenStub -> _InputBorderTween (size=0x14)
    // 0x8add60: mov             x1, x0
    // 0x8add64: ldur            x0, [fp, #-8]
    // 0x8add68: StoreField: r1->field_b = r0
    //     0x8add68: stur            w0, [x1, #0xb]
    // 0x8add6c: ldur            x0, [fp, #-0x10]
    // 0x8add70: StoreField: r1->field_f = r0
    //     0x8add70: stur            w0, [x1, #0xf]
    // 0x8add74: mov             x0, x1
    // 0x8add78: ldr             x1, [fp, #0x18]
    // 0x8add7c: StoreField: r1->field_27 = r0
    //     0x8add7c: stur            w0, [x1, #0x27]
    //     0x8add80: ldurb           w16, [x1, #-1]
    //     0x8add84: ldurb           w17, [x0, #-1]
    //     0x8add88: and             x16, x17, x16, lsr #2
    //     0x8add8c: tst             x16, HEAP, lsr #32
    //     0x8add90: b.eq            #0x8add98
    //     0x8add94: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8add98: LoadField: r0 = r1->field_1b
    //     0x8add98: ldur            w0, [x1, #0x1b]
    // 0x8add9c: DecompressPointer r0
    //     0x8add9c: add             x0, x0, HEAP, lsl #32
    // 0x8adda0: r16 = Sentinel
    //     0x8adda0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8adda4: cmp             w0, w16
    // 0x8adda8: b.eq            #0x8adf40
    // 0x8addac: stur            x0, [fp, #-8]
    // 0x8addb0: stp             xzr, x0, [SP]
    // 0x8addb4: r0 = value=()
    //     0x8addb4: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x8addb8: ldur            x16, [fp, #-8]
    // 0x8addbc: str             x16, [SP]
    // 0x8addc0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8addc0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8addc4: r0 = forward()
    //     0x8addc4: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x8addc8: ldr             x0, [fp, #0x18]
    // 0x8addcc: ldr             x1, [fp, #0x10]
    // 0x8addd0: LoadField: r2 = r0->field_b
    //     0x8addd0: ldur            w2, [x0, #0xb]
    // 0x8addd4: DecompressPointer r2
    //     0x8addd4: add             x2, x2, HEAP, lsl #32
    // 0x8addd8: cmp             w2, NULL
    // 0x8adddc: b.eq            #0x8adf4c
    // 0x8adde0: LoadField: r3 = r2->field_1b
    //     0x8adde0: ldur            w3, [x2, #0x1b]
    // 0x8adde4: DecompressPointer r3
    //     0x8adde4: add             x3, x3, HEAP, lsl #32
    // 0x8adde8: stur            x3, [fp, #-0x10]
    // 0x8addec: LoadField: r2 = r1->field_1b
    //     0x8addec: ldur            w2, [x1, #0x1b]
    // 0x8addf0: DecompressPointer r2
    //     0x8addf0: add             x2, x2, HEAP, lsl #32
    // 0x8addf4: stur            x2, [fp, #-8]
    // 0x8addf8: cmp             w3, w2
    // 0x8addfc: b.ne            #0x8ade08
    // 0x8ade00: mov             x1, x0
    // 0x8ade04: b               #0x8adeac
    // 0x8ade08: r16 = Color
    //     0x8ade08: add             x16, PP, #0xf, lsl #12  ; [pp+0xf2f8] Type: Color
    //     0x8ade0c: ldr             x16, [x16, #0x2f8]
    // 0x8ade10: r30 = Color
    //     0x8ade10: add             lr, PP, #0xf, lsl #12  ; [pp+0xf2f8] Type: Color
    //     0x8ade14: ldr             lr, [lr, #0x2f8]
    // 0x8ade18: stp             lr, x16, [SP]
    // 0x8ade1c: r0 = ==()
    //     0x8ade1c: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0x8ade20: tbnz            w0, #4, #0x8ade3c
    // 0x8ade24: ldur            x0, [fp, #-0x10]
    // 0x8ade28: ldur            x1, [fp, #-8]
    // 0x8ade2c: LoadField: r2 = r1->field_7
    //     0x8ade2c: ldur            x2, [x1, #7]
    // 0x8ade30: LoadField: r1 = r0->field_7
    //     0x8ade30: ldur            x1, [x0, #7]
    // 0x8ade34: cmp             x2, x1
    // 0x8ade38: b.eq            #0x8adea8
    // 0x8ade3c: ldr             x0, [fp, #0x18]
    // 0x8ade40: LoadField: r1 = r0->field_b
    //     0x8ade40: ldur            w1, [x0, #0xb]
    // 0x8ade44: DecompressPointer r1
    //     0x8ade44: add             x1, x1, HEAP, lsl #32
    // 0x8ade48: cmp             w1, NULL
    // 0x8ade4c: b.eq            #0x8adf50
    // 0x8ade50: LoadField: r2 = r1->field_1b
    //     0x8ade50: ldur            w2, [x1, #0x1b]
    // 0x8ade54: DecompressPointer r2
    //     0x8ade54: add             x2, x2, HEAP, lsl #32
    // 0x8ade58: stur            x2, [fp, #-8]
    // 0x8ade5c: r1 = <Color?>
    //     0x8ade5c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0x8ade60: ldr             x1, [x1, #0x348]
    // 0x8ade64: r0 = ColorTween()
    //     0x8ade64: bl              #0x606e20  ; AllocateColorTweenStub -> ColorTween (size=0x14)
    // 0x8ade68: mov             x1, x0
    // 0x8ade6c: r0 = Instance_Color
    //     0x8ade6c: add             x0, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0x8ade70: ldr             x0, [x0, #0x4a0]
    // 0x8ade74: StoreField: r1->field_b = r0
    //     0x8ade74: stur            w0, [x1, #0xb]
    // 0x8ade78: ldur            x0, [fp, #-8]
    // 0x8ade7c: StoreField: r1->field_f = r0
    //     0x8ade7c: stur            w0, [x1, #0xf]
    // 0x8ade80: mov             x0, x1
    // 0x8ade84: ldr             x1, [fp, #0x18]
    // 0x8ade88: StoreField: r1->field_2f = r0
    //     0x8ade88: stur            w0, [x1, #0x2f]
    //     0x8ade8c: ldurb           w16, [x1, #-1]
    //     0x8ade90: ldurb           w17, [x0, #-1]
    //     0x8ade94: and             x16, x17, x16, lsr #2
    //     0x8ade98: tst             x16, HEAP, lsr #32
    //     0x8ade9c: b.eq            #0x8adea4
    //     0x8adea0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8adea4: b               #0x8adeac
    // 0x8adea8: ldr             x1, [fp, #0x18]
    // 0x8adeac: ldr             x0, [fp, #0x10]
    // 0x8adeb0: LoadField: r2 = r1->field_b
    //     0x8adeb0: ldur            w2, [x1, #0xb]
    // 0x8adeb4: DecompressPointer r2
    //     0x8adeb4: add             x2, x2, HEAP, lsl #32
    // 0x8adeb8: cmp             w2, NULL
    // 0x8adebc: b.eq            #0x8adf54
    // 0x8adec0: LoadField: r3 = r2->field_1f
    //     0x8adec0: ldur            w3, [x2, #0x1f]
    // 0x8adec4: DecompressPointer r3
    //     0x8adec4: add             x3, x3, HEAP, lsl #32
    // 0x8adec8: LoadField: r2 = r0->field_1f
    //     0x8adec8: ldur            w2, [x0, #0x1f]
    // 0x8adecc: DecompressPointer r2
    //     0x8adecc: add             x2, x2, HEAP, lsl #32
    // 0x8aded0: cmp             w3, w2
    // 0x8aded4: b.eq            #0x8adf20
    // 0x8aded8: tbnz            w3, #4, #0x8adf00
    // 0x8adedc: LoadField: r0 = r1->field_1f
    //     0x8adedc: ldur            w0, [x1, #0x1f]
    // 0x8adee0: DecompressPointer r0
    //     0x8adee0: add             x0, x0, HEAP, lsl #32
    // 0x8adee4: r16 = Sentinel
    //     0x8adee4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8adee8: cmp             w0, w16
    // 0x8adeec: b.eq            #0x8adf58
    // 0x8adef0: str             x0, [SP]
    // 0x8adef4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8adef4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8adef8: r0 = forward()
    //     0x8adef8: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0x8adefc: b               #0x8adf20
    // 0x8adf00: LoadField: r0 = r1->field_1f
    //     0x8adf00: ldur            w0, [x1, #0x1f]
    // 0x8adf04: DecompressPointer r0
    //     0x8adf04: add             x0, x0, HEAP, lsl #32
    // 0x8adf08: r16 = Sentinel
    //     0x8adf08: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8adf0c: cmp             w0, w16
    // 0x8adf10: b.eq            #0x8adf64
    // 0x8adf14: str             x0, [SP]
    // 0x8adf18: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8adf18: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8adf1c: r0 = reverse()
    //     0x8adf1c: bl              #0x5d8c9c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reverse
    // 0x8adf20: r0 = Null
    //     0x8adf20: mov             x0, NULL
    // 0x8adf24: LeaveFrame
    //     0x8adf24: mov             SP, fp
    //     0x8adf28: ldp             fp, lr, [SP], #0x10
    // 0x8adf2c: ret
    //     0x8adf2c: ret             
    // 0x8adf30: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8adf30: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8adf34: b               #0x8adc44
    // 0x8adf38: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8adf38: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8adf3c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8adf3c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8adf40: r9 = _controller
    //     0x8adf40: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d4d8] Field <_BorderContainerState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0x8adf44: ldr             x9, [x9, #0x4d8]
    // 0x8adf48: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8adf48: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8adf4c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8adf4c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8adf50: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8adf50: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8adf54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8adf54: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8adf58: r9 = _hoverColorController
    //     0x8adf58: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d488] Field <_BorderContainerState@159019562._hoverColorController@159019562>: late (offset: 0x20)
    //     0x8adf5c: ldr             x9, [x9, #0x488]
    // 0x8adf60: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8adf60: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8adf64: r9 = _hoverColorController
    //     0x8adf64: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d488] Field <_BorderContainerState@159019562._hoverColorController@159019562>: late (offset: 0x20)
    //     0x8adf68: ldr             x9, [x9, #0x488]
    // 0x8adf6c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8adf6c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x93d190, size: 0x230
    // 0x93d190: EnterFrame
    //     0x93d190: stp             fp, lr, [SP, #-0x10]!
    //     0x93d194: mov             fp, SP
    // 0x93d198: AllocStack(0x58)
    //     0x93d198: sub             SP, SP, #0x58
    // 0x93d19c: r0 = 6
    //     0x93d19c: movz            x0, #0x6
    // 0x93d1a0: CheckStackOverflow
    //     0x93d1a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x93d1a4: cmp             SP, x16
    //     0x93d1a8: b.ls            #0x93d374
    // 0x93d1ac: ldr             x3, [fp, #0x18]
    // 0x93d1b0: LoadField: r4 = r3->field_23
    //     0x93d1b0: ldur            w4, [x3, #0x23]
    // 0x93d1b4: DecompressPointer r4
    //     0x93d1b4: add             x4, x4, HEAP, lsl #32
    // 0x93d1b8: r16 = Sentinel
    //     0x93d1b8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d1bc: cmp             w4, w16
    // 0x93d1c0: b.eq            #0x93d37c
    // 0x93d1c4: stur            x4, [fp, #-0x20]
    // 0x93d1c8: LoadField: r5 = r3->field_b
    //     0x93d1c8: ldur            w5, [x3, #0xb]
    // 0x93d1cc: DecompressPointer r5
    //     0x93d1cc: add             x5, x5, HEAP, lsl #32
    // 0x93d1d0: stur            x5, [fp, #-0x18]
    // 0x93d1d4: cmp             w5, NULL
    // 0x93d1d8: b.eq            #0x93d388
    // 0x93d1dc: LoadField: r6 = r5->field_f
    //     0x93d1dc: ldur            w6, [x5, #0xf]
    // 0x93d1e0: DecompressPointer r6
    //     0x93d1e0: add             x6, x6, HEAP, lsl #32
    // 0x93d1e4: stur            x6, [fp, #-0x10]
    // 0x93d1e8: LoadField: r7 = r3->field_1f
    //     0x93d1e8: ldur            w7, [x3, #0x1f]
    // 0x93d1ec: DecompressPointer r7
    //     0x93d1ec: add             x7, x7, HEAP, lsl #32
    // 0x93d1f0: r16 = Sentinel
    //     0x93d1f0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d1f4: cmp             w7, w16
    // 0x93d1f8: b.eq            #0x93d38c
    // 0x93d1fc: mov             x2, x0
    // 0x93d200: stur            x7, [fp, #-8]
    // 0x93d204: r1 = Null
    //     0x93d204: mov             x1, NULL
    // 0x93d208: r0 = AllocateArray()
    //     0x93d208: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x93d20c: mov             x2, x0
    // 0x93d210: ldur            x0, [fp, #-0x20]
    // 0x93d214: stur            x2, [fp, #-0x28]
    // 0x93d218: StoreField: r2->field_f = r0
    //     0x93d218: stur            w0, [x2, #0xf]
    // 0x93d21c: ldur            x3, [fp, #-0x10]
    // 0x93d220: StoreField: r2->field_13 = r3
    //     0x93d220: stur            w3, [x2, #0x13]
    // 0x93d224: ldur            x1, [fp, #-8]
    // 0x93d228: ArrayStore: r2[0] = r1  ; List_4
    //     0x93d228: stur            w1, [x2, #0x17]
    // 0x93d22c: r1 = <Listenable>
    //     0x93d22c: add             x1, PP, #0x2b, lsl #12  ; [pp+0x2b890] TypeArguments: <Listenable>
    //     0x93d230: ldr             x1, [x1, #0x890]
    // 0x93d234: r0 = AllocateGrowableArray()
    //     0x93d234: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x93d238: mov             x1, x0
    // 0x93d23c: ldur            x0, [fp, #-0x28]
    // 0x93d240: stur            x1, [fp, #-8]
    // 0x93d244: StoreField: r1->field_f = r0
    //     0x93d244: stur            w0, [x1, #0xf]
    // 0x93d248: r0 = 6
    //     0x93d248: movz            x0, #0x6
    // 0x93d24c: StoreField: r1->field_b = r0
    //     0x93d24c: stur            w0, [x1, #0xb]
    // 0x93d250: r0 = _MergingListenable()
    //     0x93d250: bl              #0x93d3cc  ; Allocate_MergingListenableStub -> _MergingListenable (size=0xc)
    // 0x93d254: mov             x1, x0
    // 0x93d258: ldur            x0, [fp, #-8]
    // 0x93d25c: stur            x1, [fp, #-0x30]
    // 0x93d260: StoreField: r1->field_7 = r0
    //     0x93d260: stur            w0, [x1, #7]
    // 0x93d264: ldr             x0, [fp, #0x18]
    // 0x93d268: LoadField: r2 = r0->field_27
    //     0x93d268: ldur            w2, [x0, #0x27]
    // 0x93d26c: DecompressPointer r2
    //     0x93d26c: add             x2, x2, HEAP, lsl #32
    // 0x93d270: r16 = Sentinel
    //     0x93d270: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d274: cmp             w2, w16
    // 0x93d278: b.eq            #0x93d398
    // 0x93d27c: ldur            x3, [fp, #-0x18]
    // 0x93d280: stur            x2, [fp, #-0x28]
    // 0x93d284: LoadField: r4 = r3->field_13
    //     0x93d284: ldur            w4, [x3, #0x13]
    // 0x93d288: DecompressPointer r4
    //     0x93d288: add             x4, x4, HEAP, lsl #32
    // 0x93d28c: stur            x4, [fp, #-8]
    // 0x93d290: ldr             x16, [fp, #0x10]
    // 0x93d294: str             x16, [SP]
    // 0x93d298: r0 = of()
    //     0x93d298: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x93d29c: mov             x1, x0
    // 0x93d2a0: ldr             x0, [fp, #0x18]
    // 0x93d2a4: stur            x1, [fp, #-0x48]
    // 0x93d2a8: LoadField: r2 = r0->field_b
    //     0x93d2a8: ldur            w2, [x0, #0xb]
    // 0x93d2ac: DecompressPointer r2
    //     0x93d2ac: add             x2, x2, HEAP, lsl #32
    // 0x93d2b0: cmp             w2, NULL
    // 0x93d2b4: b.eq            #0x93d3a4
    // 0x93d2b8: ArrayLoad: r3 = r2[0]  ; List_4
    //     0x93d2b8: ldur            w3, [x2, #0x17]
    // 0x93d2bc: DecompressPointer r3
    //     0x93d2bc: add             x3, x3, HEAP, lsl #32
    // 0x93d2c0: stur            x3, [fp, #-0x40]
    // 0x93d2c4: LoadField: r2 = r0->field_2f
    //     0x93d2c4: ldur            w2, [x0, #0x2f]
    // 0x93d2c8: DecompressPointer r2
    //     0x93d2c8: add             x2, x2, HEAP, lsl #32
    // 0x93d2cc: r16 = Sentinel
    //     0x93d2cc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d2d0: cmp             w2, w16
    // 0x93d2d4: b.eq            #0x93d3a8
    // 0x93d2d8: stur            x2, [fp, #-0x38]
    // 0x93d2dc: LoadField: r4 = r0->field_2b
    //     0x93d2dc: ldur            w4, [x0, #0x2b]
    // 0x93d2e0: DecompressPointer r4
    //     0x93d2e0: add             x4, x4, HEAP, lsl #32
    // 0x93d2e4: r16 = Sentinel
    //     0x93d2e4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x93d2e8: cmp             w4, w16
    // 0x93d2ec: b.eq            #0x93d3b4
    // 0x93d2f0: stur            x4, [fp, #-0x18]
    // 0x93d2f4: r0 = _InputBorderPainter()
    //     0x93d2f4: bl              #0x93d3c0  ; Allocate_InputBorderPainterStub -> _InputBorderPainter (size=0x2c)
    // 0x93d2f8: mov             x1, x0
    // 0x93d2fc: ldur            x0, [fp, #-0x20]
    // 0x93d300: stur            x1, [fp, #-0x50]
    // 0x93d304: StoreField: r1->field_b = r0
    //     0x93d304: stur            w0, [x1, #0xb]
    // 0x93d308: ldur            x0, [fp, #-0x28]
    // 0x93d30c: StoreField: r1->field_f = r0
    //     0x93d30c: stur            w0, [x1, #0xf]
    // 0x93d310: ldur            x0, [fp, #-8]
    // 0x93d314: StoreField: r1->field_13 = r0
    //     0x93d314: stur            w0, [x1, #0x13]
    // 0x93d318: ldur            x0, [fp, #-0x10]
    // 0x93d31c: ArrayStore: r1[0] = r0  ; List_4
    //     0x93d31c: stur            w0, [x1, #0x17]
    // 0x93d320: ldur            x0, [fp, #-0x48]
    // 0x93d324: StoreField: r1->field_1b = r0
    //     0x93d324: stur            w0, [x1, #0x1b]
    // 0x93d328: ldur            x0, [fp, #-0x40]
    // 0x93d32c: StoreField: r1->field_1f = r0
    //     0x93d32c: stur            w0, [x1, #0x1f]
    // 0x93d330: ldur            x0, [fp, #-0x18]
    // 0x93d334: StoreField: r1->field_27 = r0
    //     0x93d334: stur            w0, [x1, #0x27]
    // 0x93d338: ldur            x0, [fp, #-0x38]
    // 0x93d33c: StoreField: r1->field_23 = r0
    //     0x93d33c: stur            w0, [x1, #0x23]
    // 0x93d340: ldur            x0, [fp, #-0x30]
    // 0x93d344: StoreField: r1->field_7 = r0
    //     0x93d344: stur            w0, [x1, #7]
    // 0x93d348: r0 = CustomPaint()
    //     0x93d348: bl              #0x920094  ; AllocateCustomPaintStub -> CustomPaint (size=0x24)
    // 0x93d34c: ldur            x1, [fp, #-0x50]
    // 0x93d350: StoreField: r0->field_13 = r1
    //     0x93d350: stur            w1, [x0, #0x13]
    // 0x93d354: r1 = Instance_Size
    //     0x93d354: ldr             x1, [PP, #0x4228]  ; [pp+0x4228] Obj!Size@c3c8d1
    // 0x93d358: ArrayStore: r0[0] = r1  ; List_4
    //     0x93d358: stur            w1, [x0, #0x17]
    // 0x93d35c: r1 = false
    //     0x93d35c: add             x1, NULL, #0x30  ; false
    // 0x93d360: StoreField: r0->field_1b = r1
    //     0x93d360: stur            w1, [x0, #0x1b]
    // 0x93d364: StoreField: r0->field_1f = r1
    //     0x93d364: stur            w1, [x0, #0x1f]
    // 0x93d368: LeaveFrame
    //     0x93d368: mov             SP, fp
    //     0x93d36c: ldp             fp, lr, [SP], #0x10
    // 0x93d370: ret
    //     0x93d370: ret             
    // 0x93d374: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x93d374: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x93d378: b               #0x93d1ac
    // 0x93d37c: r9 = _borderAnimation
    //     0x93d37c: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d480] Field <_BorderContainerState@159019562._borderAnimation@159019562>: late (offset: 0x24)
    //     0x93d380: ldr             x9, [x9, #0x480]
    // 0x93d384: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d384: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d388: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d388: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93d38c: r9 = _hoverColorController
    //     0x93d38c: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d488] Field <_BorderContainerState@159019562._hoverColorController@159019562>: late (offset: 0x20)
    //     0x93d390: ldr             x9, [x9, #0x488]
    // 0x93d394: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d394: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d398: r9 = _border
    //     0x93d398: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d490] Field <_BorderContainerState@159019562._border@159019562>: late (offset: 0x28)
    //     0x93d39c: ldr             x9, [x9, #0x490]
    // 0x93d3a0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d3a0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d3a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x93d3a4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x93d3a8: r9 = _hoverColorTween
    //     0x93d3a8: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d498] Field <_BorderContainerState@159019562._hoverColorTween@159019562>: late (offset: 0x30)
    //     0x93d3ac: ldr             x9, [x9, #0x498]
    // 0x93d3b0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d3b0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x93d3b4: r9 = _hoverAnimation
    //     0x93d3b4: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d4a0] Field <_BorderContainerState@159019562._hoverAnimation@159019562>: late (offset: 0x2c)
    //     0x93d3b8: ldr             x9, [x9, #0x4a0]
    // 0x93d3bc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x93d3bc: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa20938, size: 0x2c8
    // 0xa20938: EnterFrame
    //     0xa20938: stp             fp, lr, [SP, #-0x10]!
    //     0xa2093c: mov             fp, SP
    // 0xa20940: AllocStack(0x38)
    //     0xa20940: sub             SP, SP, #0x38
    // 0xa20944: CheckStackOverflow
    //     0xa20944: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa20948: cmp             SP, x16
    //     0xa2094c: b.ls            #0xa20bd0
    // 0xa20950: ldr             x0, [fp, #0x10]
    // 0xa20954: LoadField: r1 = r0->field_b
    //     0xa20954: ldur            w1, [x0, #0xb]
    // 0xa20958: DecompressPointer r1
    //     0xa20958: add             x1, x1, HEAP, lsl #32
    // 0xa2095c: cmp             w1, NULL
    // 0xa20960: b.eq            #0xa20bd8
    // 0xa20964: LoadField: r2 = r1->field_1f
    //     0xa20964: ldur            w2, [x1, #0x1f]
    // 0xa20968: DecompressPointer r2
    //     0xa20968: add             x2, x2, HEAP, lsl #32
    // 0xa2096c: tbnz            w2, #4, #0xa20978
    // 0xa20970: d0 = 1.000000
    //     0xa20970: fmov            d0, #1.00000000
    // 0xa20974: b               #0xa2097c
    // 0xa20978: d0 = 0.000000
    //     0xa20978: eor             v0.16b, v0.16b, v0.16b
    // 0xa2097c: r2 = inline_Allocate_Double()
    //     0xa2097c: ldp             x2, x1, [THR, #0x50]  ; THR::top
    //     0xa20980: add             x2, x2, #0x10
    //     0xa20984: cmp             x1, x2
    //     0xa20988: b.ls            #0xa20bdc
    //     0xa2098c: str             x2, [THR, #0x50]  ; THR::top
    //     0xa20990: sub             x2, x2, #0xf
    //     0xa20994: movz            x1, #0xd148
    //     0xa20998: movk            x1, #0x3, lsl #16
    //     0xa2099c: stur            x1, [x2, #-1]
    // 0xa209a0: StoreField: r2->field_7 = d0
    //     0xa209a0: stur            d0, [x2, #7]
    // 0xa209a4: stur            x2, [fp, #-8]
    // 0xa209a8: r1 = <double>
    //     0xa209a8: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa209ac: r0 = AnimationController()
    //     0xa209ac: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa209b0: stur            x0, [fp, #-0x10]
    // 0xa209b4: ldr             x16, [fp, #0x10]
    // 0xa209b8: stp             x16, x0, [SP, #0x10]
    // 0xa209bc: r16 = Instance_Duration
    //     0xa209bc: add             x16, PP, #0x4d, lsl #12  ; [pp+0x4d4e0] Obj!Duration@c47f21
    //     0xa209c0: ldr             x16, [x16, #0x4e0]
    // 0xa209c4: ldur            lr, [fp, #-8]
    // 0xa209c8: stp             lr, x16, [SP]
    // 0xa209cc: r4 = const [0, 0x4, 0x4, 0x2, duration, 0x2, value, 0x3, null]
    //     0xa209cc: add             x4, PP, #0x24, lsl #12  ; [pp+0x241c8] List(9) [0, 0x4, 0x4, 0x2, "duration", 0x2, "value", 0x3, Null]
    //     0xa209d0: ldr             x4, [x4, #0x1c8]
    // 0xa209d4: r0 = AnimationController()
    //     0xa209d4: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa209d8: ldur            x0, [fp, #-0x10]
    // 0xa209dc: ldr             x2, [fp, #0x10]
    // 0xa209e0: StoreField: r2->field_1f = r0
    //     0xa209e0: stur            w0, [x2, #0x1f]
    //     0xa209e4: ldurb           w16, [x2, #-1]
    //     0xa209e8: ldurb           w17, [x0, #-1]
    //     0xa209ec: and             x16, x17, x16, lsr #2
    //     0xa209f0: tst             x16, HEAP, lsr #32
    //     0xa209f4: b.eq            #0xa209fc
    //     0xa209f8: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa209fc: r1 = <double>
    //     0xa209fc: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20a00: r0 = AnimationController()
    //     0xa20a00: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa20a04: stur            x0, [fp, #-8]
    // 0xa20a08: ldr             x16, [fp, #0x10]
    // 0xa20a0c: stp             x16, x0, [SP, #8]
    // 0xa20a10: r16 = Instance_Duration
    //     0xa20a10: add             x16, PP, #0x40, lsl #12  ; [pp+0x40e28] Obj!Duration@c47e41
    //     0xa20a14: ldr             x16, [x16, #0xe28]
    // 0xa20a18: str             x16, [SP]
    // 0xa20a1c: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0xa20a1c: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0xa20a20: ldr             x4, [x4, #0x4e0]
    // 0xa20a24: r0 = AnimationController()
    //     0xa20a24: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa20a28: ldur            x0, [fp, #-8]
    // 0xa20a2c: ldr             x2, [fp, #0x10]
    // 0xa20a30: StoreField: r2->field_1b = r0
    //     0xa20a30: stur            w0, [x2, #0x1b]
    //     0xa20a34: ldurb           w16, [x2, #-1]
    //     0xa20a38: ldurb           w17, [x0, #-1]
    //     0xa20a3c: and             x16, x17, x16, lsr #2
    //     0xa20a40: tst             x16, HEAP, lsr #32
    //     0xa20a44: b.eq            #0xa20a4c
    //     0xa20a48: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa20a4c: r1 = <double>
    //     0xa20a4c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20a50: r0 = FlippedCurve()
    //     0xa20a50: bl              #0x611994  ; AllocateFlippedCurveStub -> FlippedCurve (size=0x10)
    // 0xa20a54: mov             x2, x0
    // 0xa20a58: r0 = Instance_Cubic
    //     0xa20a58: ldr             x0, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0xa20a5c: stur            x2, [fp, #-0x10]
    // 0xa20a60: StoreField: r2->field_b = r0
    //     0xa20a60: stur            w0, [x2, #0xb]
    // 0xa20a64: r1 = <double>
    //     0xa20a64: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20a68: r0 = CurvedAnimation()
    //     0xa20a68: bl              #0x611528  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0xa20a6c: stur            x0, [fp, #-0x18]
    // 0xa20a70: r16 = Instance_Cubic
    //     0xa20a70: ldr             x16, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0xa20a74: stp             x16, x0, [SP, #0x10]
    // 0xa20a78: ldur            x16, [fp, #-8]
    // 0xa20a7c: ldur            lr, [fp, #-0x10]
    // 0xa20a80: stp             lr, x16, [SP]
    // 0xa20a84: r4 = const [0, 0x4, 0x4, 0x3, reverseCurve, 0x3, null]
    //     0xa20a84: add             x4, PP, #0x15, lsl #12  ; [pp+0x15f88] List(7) [0, 0x4, 0x4, 0x3, "reverseCurve", 0x3, Null]
    //     0xa20a88: ldr             x4, [x4, #0xf88]
    // 0xa20a8c: r0 = CurvedAnimation()
    //     0xa20a8c: bl              #0x611304  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0xa20a90: ldur            x0, [fp, #-0x18]
    // 0xa20a94: ldr             x2, [fp, #0x10]
    // 0xa20a98: StoreField: r2->field_23 = r0
    //     0xa20a98: stur            w0, [x2, #0x23]
    //     0xa20a9c: ldurb           w16, [x2, #-1]
    //     0xa20aa0: ldurb           w17, [x0, #-1]
    //     0xa20aa4: and             x16, x17, x16, lsr #2
    //     0xa20aa8: tst             x16, HEAP, lsr #32
    //     0xa20aac: b.eq            #0xa20ab4
    //     0xa20ab0: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa20ab4: LoadField: r0 = r2->field_b
    //     0xa20ab4: ldur            w0, [x2, #0xb]
    // 0xa20ab8: DecompressPointer r0
    //     0xa20ab8: add             x0, x0, HEAP, lsl #32
    // 0xa20abc: cmp             w0, NULL
    // 0xa20ac0: b.eq            #0xa20bf8
    // 0xa20ac4: LoadField: r3 = r0->field_b
    //     0xa20ac4: ldur            w3, [x0, #0xb]
    // 0xa20ac8: DecompressPointer r3
    //     0xa20ac8: add             x3, x3, HEAP, lsl #32
    // 0xa20acc: stur            x3, [fp, #-8]
    // 0xa20ad0: r1 = <InputBorder>
    //     0xa20ad0: add             x1, PP, #0x4d, lsl #12  ; [pp+0x4d4d0] TypeArguments: <InputBorder>
    //     0xa20ad4: ldr             x1, [x1, #0x4d0]
    // 0xa20ad8: r0 = _InputBorderTween()
    //     0xa20ad8: bl              #0x8adf70  ; Allocate_InputBorderTweenStub -> _InputBorderTween (size=0x14)
    // 0xa20adc: mov             x1, x0
    // 0xa20ae0: ldur            x0, [fp, #-8]
    // 0xa20ae4: StoreField: r1->field_b = r0
    //     0xa20ae4: stur            w0, [x1, #0xb]
    // 0xa20ae8: StoreField: r1->field_f = r0
    //     0xa20ae8: stur            w0, [x1, #0xf]
    // 0xa20aec: mov             x0, x1
    // 0xa20af0: ldr             x2, [fp, #0x10]
    // 0xa20af4: StoreField: r2->field_27 = r0
    //     0xa20af4: stur            w0, [x2, #0x27]
    //     0xa20af8: ldurb           w16, [x2, #-1]
    //     0xa20afc: ldurb           w17, [x0, #-1]
    //     0xa20b00: and             x16, x17, x16, lsr #2
    //     0xa20b04: tst             x16, HEAP, lsr #32
    //     0xa20b08: b.eq            #0xa20b10
    //     0xa20b0c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa20b10: LoadField: r0 = r2->field_1f
    //     0xa20b10: ldur            w0, [x2, #0x1f]
    // 0xa20b14: DecompressPointer r0
    //     0xa20b14: add             x0, x0, HEAP, lsl #32
    // 0xa20b18: stur            x0, [fp, #-8]
    // 0xa20b1c: r1 = <double>
    //     0xa20b1c: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa20b20: r0 = CurvedAnimation()
    //     0xa20b20: bl              #0x611528  ; AllocateCurvedAnimationStub -> CurvedAnimation (size=0x1c)
    // 0xa20b24: stur            x0, [fp, #-0x10]
    // 0xa20b28: r16 = Instance__Linear
    //     0xa20b28: ldr             x16, [PP, #0x5ff8]  ; [pp+0x5ff8] Obj!_Linear@c394b1
    // 0xa20b2c: stp             x16, x0, [SP, #8]
    // 0xa20b30: ldur            x16, [fp, #-8]
    // 0xa20b34: str             x16, [SP]
    // 0xa20b38: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0xa20b38: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0xa20b3c: r0 = CurvedAnimation()
    //     0xa20b3c: bl              #0x611304  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::CurvedAnimation
    // 0xa20b40: ldur            x0, [fp, #-0x10]
    // 0xa20b44: ldr             x2, [fp, #0x10]
    // 0xa20b48: StoreField: r2->field_2b = r0
    //     0xa20b48: stur            w0, [x2, #0x2b]
    //     0xa20b4c: ldurb           w16, [x2, #-1]
    //     0xa20b50: ldurb           w17, [x0, #-1]
    //     0xa20b54: and             x16, x17, x16, lsr #2
    //     0xa20b58: tst             x16, HEAP, lsr #32
    //     0xa20b5c: b.eq            #0xa20b64
    //     0xa20b60: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa20b64: LoadField: r0 = r2->field_b
    //     0xa20b64: ldur            w0, [x2, #0xb]
    // 0xa20b68: DecompressPointer r0
    //     0xa20b68: add             x0, x0, HEAP, lsl #32
    // 0xa20b6c: cmp             w0, NULL
    // 0xa20b70: b.eq            #0xa20bfc
    // 0xa20b74: LoadField: r3 = r0->field_1b
    //     0xa20b74: ldur            w3, [x0, #0x1b]
    // 0xa20b78: DecompressPointer r3
    //     0xa20b78: add             x3, x3, HEAP, lsl #32
    // 0xa20b7c: stur            x3, [fp, #-8]
    // 0xa20b80: r1 = <Color?>
    //     0xa20b80: add             x1, PP, #0xf, lsl #12  ; [pp+0xf348] TypeArguments: <Color?>
    //     0xa20b84: ldr             x1, [x1, #0x348]
    // 0xa20b88: r0 = ColorTween()
    //     0xa20b88: bl              #0x606e20  ; AllocateColorTweenStub -> ColorTween (size=0x14)
    // 0xa20b8c: r1 = Instance_Color
    //     0xa20b8c: add             x1, PP, #0xf, lsl #12  ; [pp+0xf4a0] Obj!Color@c3ac11
    //     0xa20b90: ldr             x1, [x1, #0x4a0]
    // 0xa20b94: StoreField: r0->field_b = r1
    //     0xa20b94: stur            w1, [x0, #0xb]
    // 0xa20b98: ldur            x1, [fp, #-8]
    // 0xa20b9c: StoreField: r0->field_f = r1
    //     0xa20b9c: stur            w1, [x0, #0xf]
    // 0xa20ba0: ldr             x1, [fp, #0x10]
    // 0xa20ba4: StoreField: r1->field_2f = r0
    //     0xa20ba4: stur            w0, [x1, #0x2f]
    //     0xa20ba8: ldurb           w16, [x1, #-1]
    //     0xa20bac: ldurb           w17, [x0, #-1]
    //     0xa20bb0: and             x16, x17, x16, lsr #2
    //     0xa20bb4: tst             x16, HEAP, lsr #32
    //     0xa20bb8: b.eq            #0xa20bc0
    //     0xa20bbc: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa20bc0: r0 = Null
    //     0xa20bc0: mov             x0, NULL
    // 0xa20bc4: LeaveFrame
    //     0xa20bc4: mov             SP, fp
    //     0xa20bc8: ldp             fp, lr, [SP], #0x10
    // 0xa20bcc: ret
    //     0xa20bcc: ret             
    // 0xa20bd0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa20bd0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa20bd4: b               #0xa20950
    // 0xa20bd8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa20bd8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa20bdc: SaveReg d0
    //     0xa20bdc: str             q0, [SP, #-0x10]!
    // 0xa20be0: SaveReg r0
    //     0xa20be0: str             x0, [SP, #-8]!
    // 0xa20be4: r0 = AllocateDouble()
    //     0xa20be4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xa20be8: mov             x2, x0
    // 0xa20bec: RestoreReg r0
    //     0xa20bec: ldr             x0, [SP], #8
    // 0xa20bf0: RestoreReg d0
    //     0xa20bf0: ldr             q0, [SP], #0x10
    // 0xa20bf4: b               #0xa209a0
    // 0xa20bf8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa20bf8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa20bfc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa20bfc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa568a0, size: 0x94
    // 0xa568a0: EnterFrame
    //     0xa568a0: stp             fp, lr, [SP, #-0x10]!
    //     0xa568a4: mov             fp, SP
    // 0xa568a8: AllocStack(0x8)
    //     0xa568a8: sub             SP, SP, #8
    // 0xa568ac: CheckStackOverflow
    //     0xa568ac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa568b0: cmp             SP, x16
    //     0xa568b4: b.ls            #0xa56914
    // 0xa568b8: ldr             x0, [fp, #0x10]
    // 0xa568bc: LoadField: r1 = r0->field_1b
    //     0xa568bc: ldur            w1, [x0, #0x1b]
    // 0xa568c0: DecompressPointer r1
    //     0xa568c0: add             x1, x1, HEAP, lsl #32
    // 0xa568c4: r16 = Sentinel
    //     0xa568c4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa568c8: cmp             w1, w16
    // 0xa568cc: b.eq            #0xa5691c
    // 0xa568d0: str             x1, [SP]
    // 0xa568d4: r0 = dispose()
    //     0xa568d4: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa568d8: ldr             x0, [fp, #0x10]
    // 0xa568dc: LoadField: r1 = r0->field_1f
    //     0xa568dc: ldur            w1, [x0, #0x1f]
    // 0xa568e0: DecompressPointer r1
    //     0xa568e0: add             x1, x1, HEAP, lsl #32
    // 0xa568e4: r16 = Sentinel
    //     0xa568e4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa568e8: cmp             w1, w16
    // 0xa568ec: b.eq            #0xa56928
    // 0xa568f0: str             x1, [SP]
    // 0xa568f4: r0 = dispose()
    //     0xa568f4: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa568f8: ldr             x16, [fp, #0x10]
    // 0xa568fc: str             x16, [SP]
    // 0xa56900: r0 = dispose()
    //     0xa56900: bl              #0xa56934  ; [package:flutter/src/material/input_decorator.dart] __BorderContainerState&State&TickerProviderStateMixin::dispose
    // 0xa56904: r0 = Null
    //     0xa56904: mov             x0, NULL
    // 0xa56908: LeaveFrame
    //     0xa56908: mov             SP, fp
    //     0xa5690c: ldp             fp, lr, [SP], #0x10
    // 0xa56910: ret
    //     0xa56910: ret             
    // 0xa56914: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa56914: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa56918: b               #0xa568b8
    // 0xa5691c: r9 = _controller
    //     0xa5691c: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d4d8] Field <_BorderContainerState@159019562._controller@159019562>: late (offset: 0x1c)
    //     0xa56920: ldr             x9, [x9, #0x4d8]
    // 0xa56924: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa56924: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xa56928: r9 = _hoverColorController
    //     0xa56928: add             x9, PP, #0x4d, lsl #12  ; [pp+0x4d488] Field <_BorderContainerState@159019562._hoverColorController@159019562>: late (offset: 0x20)
    //     0xa5692c: ldr             x9, [x9, #0x488]
    // 0xa56930: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa56930: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3652, size: 0x28, field offset: 0x10
//   const constructor, 
class _Decorator extends SlottedMultiChildRenderObjectWidget<dynamic, dynamic> {

  _ updateRenderObject(/* No info */) {
    // ** addr: 0xa71370, size: 0xe4
    // 0xa71370: EnterFrame
    //     0xa71370: stp             fp, lr, [SP, #-0x10]!
    //     0xa71374: mov             fp, SP
    // 0xa71378: AllocStack(0x10)
    //     0xa71378: sub             SP, SP, #0x10
    // 0xa7137c: CheckStackOverflow
    //     0xa7137c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa71380: cmp             SP, x16
    //     0xa71384: b.ls            #0xa7144c
    // 0xa71388: ldr             x0, [fp, #0x10]
    // 0xa7138c: r2 = Null
    //     0xa7138c: mov             x2, NULL
    // 0xa71390: r1 = Null
    //     0xa71390: mov             x1, NULL
    // 0xa71394: r4 = 59
    //     0xa71394: movz            x4, #0x3b
    // 0xa71398: branchIfSmi(r0, 0xa713a4)
    //     0xa71398: tbz             w0, #0, #0xa713a4
    // 0xa7139c: r4 = LoadClassIdInstr(r0)
    //     0xa7139c: ldur            x4, [x0, #-1]
    //     0xa713a0: ubfx            x4, x4, #0xc, #0x14
    // 0xa713a4: cmp             x4, #0x817
    // 0xa713a8: b.eq            #0xa713c0
    // 0xa713ac: r8 = _RenderDecoration
    //     0xa713ac: add             x8, PP, #0x47, lsl #12  ; [pp+0x47950] Type: _RenderDecoration
    //     0xa713b0: ldr             x8, [x8, #0x950]
    // 0xa713b4: r3 = Null
    //     0xa713b4: add             x3, PP, #0x47, lsl #12  ; [pp+0x47958] Null
    //     0xa713b8: ldr             x3, [x3, #0x958]
    // 0xa713bc: r0 = DefaultTypeTest()
    //     0xa713bc: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xa713c0: ldr             x0, [fp, #0x20]
    // 0xa713c4: LoadField: r1 = r0->field_f
    //     0xa713c4: ldur            w1, [x0, #0xf]
    // 0xa713c8: DecompressPointer r1
    //     0xa713c8: add             x1, x1, HEAP, lsl #32
    // 0xa713cc: ldr             x16, [fp, #0x10]
    // 0xa713d0: stp             x1, x16, [SP]
    // 0xa713d4: r0 = decoration=()
    //     0xa713d4: bl              #0xa715b8  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::decoration=
    // 0xa713d8: ldr             x16, [fp, #0x10]
    // 0xa713dc: r30 = false
    //     0xa713dc: add             lr, NULL, #0x30  ; false
    // 0xa713e0: stp             lr, x16, [SP]
    // 0xa713e4: r0 = _NativeCodec._()
    //     0xa713e4: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa713e8: ldr             x0, [fp, #0x20]
    // 0xa713ec: LoadField: r1 = r0->field_1f
    //     0xa713ec: ldur            w1, [x0, #0x1f]
    // 0xa713f0: DecompressPointer r1
    //     0xa713f0: add             x1, x1, HEAP, lsl #32
    // 0xa713f4: ldr             x16, [fp, #0x10]
    // 0xa713f8: stp             x1, x16, [SP]
    // 0xa713fc: r0 = isFocused=()
    //     0xa713fc: bl              #0xa71554  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::isFocused=
    // 0xa71400: ldr             x16, [fp, #0x10]
    // 0xa71404: stp             NULL, x16, [SP]
    // 0xa71408: r0 = _NativeCodec._()
    //     0xa71408: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa7140c: ldr             x0, [fp, #0x20]
    // 0xa71410: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa71410: ldur            w1, [x0, #0x17]
    // 0xa71414: DecompressPointer r1
    //     0xa71414: add             x1, x1, HEAP, lsl #32
    // 0xa71418: ldr             x16, [fp, #0x10]
    // 0xa7141c: stp             x1, x16, [SP]
    // 0xa71420: r0 = textBaseline=()
    //     0xa71420: bl              #0xa714d4  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::textBaseline=
    // 0xa71424: ldr             x0, [fp, #0x20]
    // 0xa71428: LoadField: r1 = r0->field_13
    //     0xa71428: ldur            w1, [x0, #0x13]
    // 0xa7142c: DecompressPointer r1
    //     0xa7142c: add             x1, x1, HEAP, lsl #32
    // 0xa71430: ldr             x16, [fp, #0x10]
    // 0xa71434: stp             x1, x16, [SP]
    // 0xa71438: r0 = textDirection=()
    //     0xa71438: bl              #0xa71454  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::textDirection=
    // 0xa7143c: r0 = Null
    //     0xa7143c: mov             x0, NULL
    // 0xa71440: LeaveFrame
    //     0xa71440: mov             SP, fp
    //     0xa71444: ldp             fp, lr, [SP], #0x10
    // 0xa71448: ret
    //     0xa71448: ret             
    // 0xa7144c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7144c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa71450: b               #0xa71388
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0xa7b218, size: 0xa8
    // 0xa7b218: EnterFrame
    //     0xa7b218: stp             fp, lr, [SP, #-0x10]!
    //     0xa7b21c: mov             fp, SP
    // 0xa7b220: AllocStack(0x60)
    //     0xa7b220: sub             SP, SP, #0x60
    // 0xa7b224: CheckStackOverflow
    //     0xa7b224: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7b228: cmp             SP, x16
    //     0xa7b22c: b.ls            #0xa7b2b8
    // 0xa7b230: ldr             x0, [fp, #0x18]
    // 0xa7b234: LoadField: r1 = r0->field_f
    //     0xa7b234: ldur            w1, [x0, #0xf]
    // 0xa7b238: DecompressPointer r1
    //     0xa7b238: add             x1, x1, HEAP, lsl #32
    // 0xa7b23c: stur            x1, [fp, #-0x20]
    // 0xa7b240: LoadField: r2 = r0->field_13
    //     0xa7b240: ldur            w2, [x0, #0x13]
    // 0xa7b244: DecompressPointer r2
    //     0xa7b244: add             x2, x2, HEAP, lsl #32
    // 0xa7b248: stur            x2, [fp, #-0x18]
    // 0xa7b24c: ArrayLoad: r3 = r0[0]  ; List_4
    //     0xa7b24c: ldur            w3, [x0, #0x17]
    // 0xa7b250: DecompressPointer r3
    //     0xa7b250: add             x3, x3, HEAP, lsl #32
    // 0xa7b254: stur            x3, [fp, #-0x10]
    // 0xa7b258: LoadField: r4 = r0->field_1f
    //     0xa7b258: ldur            w4, [x0, #0x1f]
    // 0xa7b25c: DecompressPointer r4
    //     0xa7b25c: add             x4, x4, HEAP, lsl #32
    // 0xa7b260: stur            x4, [fp, #-8]
    // 0xa7b264: ldr             x16, [fp, #0x10]
    // 0xa7b268: str             x16, [SP]
    // 0xa7b26c: r0 = of()
    //     0xa7b26c: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0xa7b270: LoadField: r1 = r0->field_2b
    //     0xa7b270: ldur            w1, [x0, #0x2b]
    // 0xa7b274: DecompressPointer r1
    //     0xa7b274: add             x1, x1, HEAP, lsl #32
    // 0xa7b278: stur            x1, [fp, #-0x28]
    // 0xa7b27c: r0 = _RenderDecoration()
    //     0xa7b27c: bl              #0xa7b3a8  ; Allocate_RenderDecorationStub -> _RenderDecoration (size=0x84)
    // 0xa7b280: stur            x0, [fp, #-0x30]
    // 0xa7b284: ldur            x16, [fp, #-0x20]
    // 0xa7b288: stp             x16, x0, [SP, #0x20]
    // 0xa7b28c: ldur            x16, [fp, #-8]
    // 0xa7b290: ldur            lr, [fp, #-0x28]
    // 0xa7b294: stp             lr, x16, [SP, #0x10]
    // 0xa7b298: ldur            x16, [fp, #-0x10]
    // 0xa7b29c: ldur            lr, [fp, #-0x18]
    // 0xa7b2a0: stp             lr, x16, [SP]
    // 0xa7b2a4: r0 = _RenderDecoration()
    //     0xa7b2a4: bl              #0xa7b2c0  ; [package:flutter/src/material/input_decorator.dart] _RenderDecoration::_RenderDecoration
    // 0xa7b2a8: ldur            x0, [fp, #-0x30]
    // 0xa7b2ac: LeaveFrame
    //     0xa7b2ac: mov             SP, fp
    //     0xa7b2b0: ldp             fp, lr, [SP], #0x10
    // 0xa7b2b4: ret
    //     0xa7b2b4: ret             
    // 0xa7b2b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7b2b8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7b2bc: b               #0xa7b230
  }
  _ childForSlot(/* No info */) {
    // ** addr: 0xc019ec, size: 0x1c4
    // 0xc019ec: EnterFrame
    //     0xc019ec: stp             fp, lr, [SP, #-0x10]!
    //     0xc019f0: mov             fp, SP
    // 0xc019f4: ldr             x0, [fp, #0x10]
    // 0xc019f8: r2 = Null
    //     0xc019f8: mov             x2, NULL
    // 0xc019fc: r1 = Null
    //     0xc019fc: mov             x1, NULL
    // 0xc01a00: r4 = 59
    //     0xc01a00: movz            x4, #0x3b
    // 0xc01a04: branchIfSmi(r0, 0xc01a10)
    //     0xc01a04: tbz             w0, #0, #0xc01a10
    // 0xc01a08: r4 = LoadClassIdInstr(r0)
    //     0xc01a08: ldur            x4, [x0, #-1]
    //     0xc01a0c: ubfx            x4, x4, #0xc, #0x14
    // 0xc01a10: r17 = 6093
    //     0xc01a10: movz            x17, #0x17cd
    // 0xc01a14: cmp             x4, x17
    // 0xc01a18: b.eq            #0xc01a30
    // 0xc01a1c: r8 = _DecorationSlot
    //     0xc01a1c: add             x8, PP, #0x47, lsl #12  ; [pp+0x47968] Type: _DecorationSlot
    //     0xc01a20: ldr             x8, [x8, #0x968]
    // 0xc01a24: r3 = Null
    //     0xc01a24: add             x3, PP, #0x47, lsl #12  ; [pp+0x47970] Null
    //     0xc01a28: ldr             x3, [x3, #0x970]
    // 0xc01a2c: r0 = _DecorationSlot()
    //     0xc01a2c: bl              #0x578fe0  ; IsType__DecorationSlot_Stub
    // 0xc01a30: ldr             x1, [fp, #0x10]
    // 0xc01a34: LoadField: r2 = r1->field_7
    //     0xc01a34: ldur            x2, [x1, #7]
    // 0xc01a38: cmp             x2, #5
    // 0xc01a3c: b.gt            #0xc01b00
    // 0xc01a40: cmp             x2, #2
    // 0xc01a44: b.gt            #0xc01a98
    // 0xc01a48: cmp             x2, #1
    // 0xc01a4c: b.gt            #0xc01a88
    // 0xc01a50: cmp             x2, #0
    // 0xc01a54: b.gt            #0xc01a68
    // 0xc01a58: r0 = Null
    //     0xc01a58: mov             x0, NULL
    // 0xc01a5c: LeaveFrame
    //     0xc01a5c: mov             SP, fp
    //     0xc01a60: ldp             fp, lr, [SP], #0x10
    // 0xc01a64: ret
    //     0xc01a64: ret             
    // 0xc01a68: ldr             x1, [fp, #0x18]
    // 0xc01a6c: LoadField: r3 = r1->field_f
    //     0xc01a6c: ldur            w3, [x1, #0xf]
    // 0xc01a70: DecompressPointer r3
    //     0xc01a70: add             x3, x3, HEAP, lsl #32
    // 0xc01a74: LoadField: r0 = r3->field_3b
    //     0xc01a74: ldur            w0, [x3, #0x3b]
    // 0xc01a78: DecompressPointer r0
    //     0xc01a78: add             x0, x0, HEAP, lsl #32
    // 0xc01a7c: LeaveFrame
    //     0xc01a7c: mov             SP, fp
    //     0xc01a80: ldp             fp, lr, [SP], #0x10
    // 0xc01a84: ret
    //     0xc01a84: ret             
    // 0xc01a88: r0 = Null
    //     0xc01a88: mov             x0, NULL
    // 0xc01a8c: LeaveFrame
    //     0xc01a8c: mov             SP, fp
    //     0xc01a90: ldp             fp, lr, [SP], #0x10
    // 0xc01a94: ret
    //     0xc01a94: ret             
    // 0xc01a98: ldr             x1, [fp, #0x18]
    // 0xc01a9c: cmp             x2, #4
    // 0xc01aa0: b.gt            #0xc01ae4
    // 0xc01aa4: cmp             x2, #3
    // 0xc01aa8: b.gt            #0xc01ac8
    // 0xc01aac: LoadField: r3 = r1->field_f
    //     0xc01aac: ldur            w3, [x1, #0xf]
    // 0xc01ab0: DecompressPointer r3
    //     0xc01ab0: add             x3, x3, HEAP, lsl #32
    // 0xc01ab4: LoadField: r0 = r3->field_43
    //     0xc01ab4: ldur            w0, [x3, #0x43]
    // 0xc01ab8: DecompressPointer r0
    //     0xc01ab8: add             x0, x0, HEAP, lsl #32
    // 0xc01abc: LeaveFrame
    //     0xc01abc: mov             SP, fp
    //     0xc01ac0: ldp             fp, lr, [SP], #0x10
    // 0xc01ac4: ret
    //     0xc01ac4: ret             
    // 0xc01ac8: LoadField: r3 = r1->field_f
    //     0xc01ac8: ldur            w3, [x1, #0xf]
    // 0xc01acc: DecompressPointer r3
    //     0xc01acc: add             x3, x3, HEAP, lsl #32
    // 0xc01ad0: LoadField: r0 = r3->field_47
    //     0xc01ad0: ldur            w0, [x3, #0x47]
    // 0xc01ad4: DecompressPointer r0
    //     0xc01ad4: add             x0, x0, HEAP, lsl #32
    // 0xc01ad8: LeaveFrame
    //     0xc01ad8: mov             SP, fp
    //     0xc01adc: ldp             fp, lr, [SP], #0x10
    // 0xc01ae0: ret
    //     0xc01ae0: ret             
    // 0xc01ae4: LoadField: r3 = r1->field_f
    //     0xc01ae4: ldur            w3, [x1, #0xf]
    // 0xc01ae8: DecompressPointer r3
    //     0xc01ae8: add             x3, x3, HEAP, lsl #32
    // 0xc01aec: LoadField: r0 = r3->field_4b
    //     0xc01aec: ldur            w0, [x3, #0x4b]
    // 0xc01af0: DecompressPointer r0
    //     0xc01af0: add             x0, x0, HEAP, lsl #32
    // 0xc01af4: LeaveFrame
    //     0xc01af4: mov             SP, fp
    //     0xc01af8: ldp             fp, lr, [SP], #0x10
    // 0xc01afc: ret
    //     0xc01afc: ret             
    // 0xc01b00: ldr             x1, [fp, #0x18]
    // 0xc01b04: cmp             x2, #8
    // 0xc01b08: b.gt            #0xc01b70
    // 0xc01b0c: cmp             x2, #7
    // 0xc01b10: b.gt            #0xc01b54
    // 0xc01b14: cmp             x2, #6
    // 0xc01b18: b.gt            #0xc01b38
    // 0xc01b1c: LoadField: r3 = r1->field_f
    //     0xc01b1c: ldur            w3, [x1, #0xf]
    // 0xc01b20: DecompressPointer r3
    //     0xc01b20: add             x3, x3, HEAP, lsl #32
    // 0xc01b24: LoadField: r0 = r3->field_4f
    //     0xc01b24: ldur            w0, [x3, #0x4f]
    // 0xc01b28: DecompressPointer r0
    //     0xc01b28: add             x0, x0, HEAP, lsl #32
    // 0xc01b2c: LeaveFrame
    //     0xc01b2c: mov             SP, fp
    //     0xc01b30: ldp             fp, lr, [SP], #0x10
    // 0xc01b34: ret
    //     0xc01b34: ret             
    // 0xc01b38: LoadField: r3 = r1->field_f
    //     0xc01b38: ldur            w3, [x1, #0xf]
    // 0xc01b3c: DecompressPointer r3
    //     0xc01b3c: add             x3, x3, HEAP, lsl #32
    // 0xc01b40: LoadField: r0 = r3->field_53
    //     0xc01b40: ldur            w0, [x3, #0x53]
    // 0xc01b44: DecompressPointer r0
    //     0xc01b44: add             x0, x0, HEAP, lsl #32
    // 0xc01b48: LeaveFrame
    //     0xc01b48: mov             SP, fp
    //     0xc01b4c: ldp             fp, lr, [SP], #0x10
    // 0xc01b50: ret
    //     0xc01b50: ret             
    // 0xc01b54: LoadField: r3 = r1->field_f
    //     0xc01b54: ldur            w3, [x1, #0xf]
    // 0xc01b58: DecompressPointer r3
    //     0xc01b58: add             x3, x3, HEAP, lsl #32
    // 0xc01b5c: LoadField: r0 = r3->field_57
    //     0xc01b5c: ldur            w0, [x3, #0x57]
    // 0xc01b60: DecompressPointer r0
    //     0xc01b60: add             x0, x0, HEAP, lsl #32
    // 0xc01b64: LeaveFrame
    //     0xc01b64: mov             SP, fp
    //     0xc01b68: ldp             fp, lr, [SP], #0x10
    // 0xc01b6c: ret
    //     0xc01b6c: ret             
    // 0xc01b70: cmp             x2, #9
    // 0xc01b74: b.gt            #0xc01b94
    // 0xc01b78: LoadField: r2 = r1->field_f
    //     0xc01b78: ldur            w2, [x1, #0xf]
    // 0xc01b7c: DecompressPointer r2
    //     0xc01b7c: add             x2, x2, HEAP, lsl #32
    // 0xc01b80: LoadField: r0 = r2->field_5b
    //     0xc01b80: ldur            w0, [x2, #0x5b]
    // 0xc01b84: DecompressPointer r0
    //     0xc01b84: add             x0, x0, HEAP, lsl #32
    // 0xc01b88: LeaveFrame
    //     0xc01b88: mov             SP, fp
    //     0xc01b8c: ldp             fp, lr, [SP], #0x10
    // 0xc01b90: ret
    //     0xc01b90: ret             
    // 0xc01b94: LoadField: r2 = r1->field_f
    //     0xc01b94: ldur            w2, [x1, #0xf]
    // 0xc01b98: DecompressPointer r2
    //     0xc01b98: add             x2, x2, HEAP, lsl #32
    // 0xc01b9c: LoadField: r0 = r2->field_5f
    //     0xc01b9c: ldur            w0, [x2, #0x5f]
    // 0xc01ba0: DecompressPointer r0
    //     0xc01ba0: add             x0, x0, HEAP, lsl #32
    // 0xc01ba4: LeaveFrame
    //     0xc01ba4: mov             SP, fp
    //     0xc01ba8: ldp             fp, lr, [SP], #0x10
    // 0xc01bac: ret
    //     0xc01bac: ret             
  }
  get _ slots(/* No info */) {
    // ** addr: 0xc01c70, size: 0xc
    // 0xc01c70: r0 = const [Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot', Instance of '_DecorationSlot']
    //     0xc01c70: add             x0, PP, #0x47, lsl #12  ; [pp+0x47980] List<_DecorationSlot>(11)
    //     0xc01c74: ldr             x0, [x0, #0x980]
    // 0xc01c78: ret
    //     0xc01c78: ret             
  }
}

// class id: 4175, size: 0x30, field offset: 0xc
//   const constructor, 
class InputDecorator extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4bd18, size: 0x9c
    // 0xa4bd18: EnterFrame
    //     0xa4bd18: stp             fp, lr, [SP, #-0x10]!
    //     0xa4bd1c: mov             fp, SP
    // 0xa4bd20: AllocStack(0x10)
    //     0xa4bd20: sub             SP, SP, #0x10
    // 0xa4bd24: CheckStackOverflow
    //     0xa4bd24: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa4bd28: cmp             SP, x16
    //     0xa4bd2c: b.ls            #0xa4bdac
    // 0xa4bd30: r1 = <InputDecorator>
    //     0xa4bd30: add             x1, PP, #0x3a, lsl #12  ; [pp+0x3a0a8] TypeArguments: <InputDecorator>
    //     0xa4bd34: ldr             x1, [x1, #0xa8]
    // 0xa4bd38: r0 = _InputDecoratorState()
    //     0xa4bd38: bl              #0xa4bdc0  ; Allocate_InputDecoratorStateStub -> _InputDecoratorState (size=0x30)
    // 0xa4bd3c: mov             x1, x0
    // 0xa4bd40: r0 = Sentinel
    //     0xa4bd40: ldr             x0, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4bd44: stur            x1, [fp, #-8]
    // 0xa4bd48: StoreField: r1->field_1b = r0
    //     0xa4bd48: stur            w0, [x1, #0x1b]
    // 0xa4bd4c: StoreField: r1->field_1f = r0
    //     0xa4bd4c: stur            w0, [x1, #0x1f]
    // 0xa4bd50: StoreField: r1->field_23 = r0
    //     0xa4bd50: stur            w0, [x1, #0x23]
    // 0xa4bd54: r0 = _InputBorderGap()
    //     0xa4bd54: bl              #0xa4bdb4  ; Allocate_InputBorderGapStub -> _InputBorderGap (size=0x30)
    // 0xa4bd58: d0 = 0.000000
    //     0xa4bd58: eor             v0.16b, v0.16b, v0.16b
    // 0xa4bd5c: stur            x0, [fp, #-0x10]
    // 0xa4bd60: StoreField: r0->field_27 = d0
    //     0xa4bd60: stur            d0, [x0, #0x27]
    // 0xa4bd64: r1 = 0
    //     0xa4bd64: movz            x1, #0
    // 0xa4bd68: StoreField: r0->field_7 = r1
    //     0xa4bd68: stur            x1, [x0, #7]
    // 0xa4bd6c: StoreField: r0->field_13 = r1
    //     0xa4bd6c: stur            x1, [x0, #0x13]
    // 0xa4bd70: StoreField: r0->field_1b = r1
    //     0xa4bd70: stur            x1, [x0, #0x1b]
    // 0xa4bd74: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0xa4bd74: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa4bd78: ldr             x0, [x0, #0x1478]
    //     0xa4bd7c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa4bd80: cmp             w0, w16
    //     0xa4bd84: b.ne            #0xa4bd90
    //     0xa4bd88: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0xa4bd8c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa4bd90: ldur            x1, [fp, #-0x10]
    // 0xa4bd94: StoreField: r1->field_f = r0
    //     0xa4bd94: stur            w0, [x1, #0xf]
    // 0xa4bd98: ldur            x0, [fp, #-8]
    // 0xa4bd9c: StoreField: r0->field_27 = r1
    //     0xa4bd9c: stur            w1, [x0, #0x27]
    // 0xa4bda0: LeaveFrame
    //     0xa4bda0: mov             SP, fp
    //     0xa4bda4: ldp             fp, lr, [SP], #0x10
    // 0xa4bda8: ret
    //     0xa4bda8: ret             
    // 0xa4bdac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa4bdac: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa4bdb0: b               #0xa4bd30
  }
}

// class id: 4176, size: 0x2c, field offset: 0xc
//   const constructor, 
class _HelperError extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4bce4, size: 0x28
    // 0xa4bce4: EnterFrame
    //     0xa4bce4: stp             fp, lr, [SP, #-0x10]!
    //     0xa4bce8: mov             fp, SP
    // 0xa4bcec: r1 = <_HelperError>
    //     0xa4bcec: add             x1, PP, #0x47, lsl #12  ; [pp+0x47988] TypeArguments: <_HelperError>
    //     0xa4bcf0: ldr             x1, [x1, #0x988]
    // 0xa4bcf4: r0 = _HelperErrorState()
    //     0xa4bcf4: bl              #0xa4bd0c  ; Allocate_HelperErrorStateStub -> _HelperErrorState (size=0x28)
    // 0xa4bcf8: r1 = Sentinel
    //     0xa4bcf8: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4bcfc: StoreField: r0->field_1b = r1
    //     0xa4bcfc: stur            w1, [x0, #0x1b]
    // 0xa4bd00: LeaveFrame
    //     0xa4bd00: mov             SP, fp
    //     0xa4bd04: ldp             fp, lr, [SP], #0x10
    // 0xa4bd08: ret
    //     0xa4bd08: ret             
  }
}

// class id: 4191, size: 0x24, field offset: 0xc
//   const constructor, 
class _BorderContainer extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4bc70, size: 0x3c
    // 0xa4bc70: EnterFrame
    //     0xa4bc70: stp             fp, lr, [SP, #-0x10]!
    //     0xa4bc74: mov             fp, SP
    // 0xa4bc78: r1 = <_BorderContainer>
    //     0xa4bc78: add             x1, PP, #0x47, lsl #12  ; [pp+0x47990] TypeArguments: <_BorderContainer>
    //     0xa4bc7c: ldr             x1, [x1, #0x990]
    // 0xa4bc80: r0 = _BorderContainerState()
    //     0xa4bc80: bl              #0xa4bcac  ; Allocate_BorderContainerStateStub -> _BorderContainerState (size=0x34)
    // 0xa4bc84: r1 = Sentinel
    //     0xa4bc84: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4bc88: StoreField: r0->field_1b = r1
    //     0xa4bc88: stur            w1, [x0, #0x1b]
    // 0xa4bc8c: StoreField: r0->field_1f = r1
    //     0xa4bc8c: stur            w1, [x0, #0x1f]
    // 0xa4bc90: StoreField: r0->field_23 = r1
    //     0xa4bc90: stur            w1, [x0, #0x23]
    // 0xa4bc94: StoreField: r0->field_27 = r1
    //     0xa4bc94: stur            w1, [x0, #0x27]
    // 0xa4bc98: StoreField: r0->field_2b = r1
    //     0xa4bc98: stur            w1, [x0, #0x2b]
    // 0xa4bc9c: StoreField: r0->field_2f = r1
    //     0xa4bc9c: stur            w1, [x0, #0x2f]
    // 0xa4bca0: LeaveFrame
    //     0xa4bca0: mov             SP, fp
    //     0xa4bca4: ldp             fp, lr, [SP], #0x10
    // 0xa4bca8: ret
    //     0xa4bca8: ret             
  }
}

// class id: 4441, size: 0x14, field offset: 0x14
class _InputBorderTween extends Tween<dynamic> {

  _ lerp(/* No info */) {
    // ** addr: 0xb632a4, size: 0x9c
    // 0xb632a4: EnterFrame
    //     0xb632a4: stp             fp, lr, [SP, #-0x10]!
    //     0xb632a8: mov             fp, SP
    // 0xb632ac: AllocStack(0x20)
    //     0xb632ac: sub             SP, SP, #0x20
    // 0xb632b0: CheckStackOverflow
    //     0xb632b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb632b4: cmp             SP, x16
    //     0xb632b8: b.ls            #0xb63334
    // 0xb632bc: ldr             x0, [fp, #0x18]
    // 0xb632c0: LoadField: r1 = r0->field_b
    //     0xb632c0: ldur            w1, [x0, #0xb]
    // 0xb632c4: DecompressPointer r1
    //     0xb632c4: add             x1, x1, HEAP, lsl #32
    // 0xb632c8: LoadField: r2 = r0->field_f
    //     0xb632c8: ldur            w2, [x0, #0xf]
    // 0xb632cc: DecompressPointer r2
    //     0xb632cc: add             x2, x2, HEAP, lsl #32
    // 0xb632d0: stp             x2, x1, [SP, #8]
    // 0xb632d4: ldr             d0, [fp, #0x10]
    // 0xb632d8: str             d0, [SP]
    // 0xb632dc: r0 = lerp()
    //     0xb632dc: bl              #0xb63340  ; [package:flutter/src/painting/borders.dart] ShapeBorder::lerp
    // 0xb632e0: mov             x3, x0
    // 0xb632e4: stur            x3, [fp, #-8]
    // 0xb632e8: cmp             w3, NULL
    // 0xb632ec: b.eq            #0xb6333c
    // 0xb632f0: mov             x0, x3
    // 0xb632f4: r2 = Null
    //     0xb632f4: mov             x2, NULL
    // 0xb632f8: r1 = Null
    //     0xb632f8: mov             x1, NULL
    // 0xb632fc: r4 = LoadClassIdInstr(r0)
    //     0xb632fc: ldur            x4, [x0, #-1]
    //     0xb63300: ubfx            x4, x4, #0xc, #0x14
    // 0xb63304: sub             x4, x4, #0x92a
    // 0xb63308: cmp             x4, #2
    // 0xb6330c: b.ls            #0xb63324
    // 0xb63310: r8 = InputBorder
    //     0xb63310: add             x8, PP, #0x4f, lsl #12  ; [pp+0x4f7f0] Type: InputBorder
    //     0xb63314: ldr             x8, [x8, #0x7f0]
    // 0xb63318: r3 = Null
    //     0xb63318: add             x3, PP, #0x4f, lsl #12  ; [pp+0x4f7f8] Null
    //     0xb6331c: ldr             x3, [x3, #0x7f8]
    // 0xb63320: r0 = InputBorder()
    //     0xb63320: bl              #0x5abc08  ; IsType_InputBorder_Stub
    // 0xb63324: ldur            x0, [fp, #-8]
    // 0xb63328: LeaveFrame
    //     0xb63328: mov             SP, fp
    //     0xb6332c: ldp             fp, lr, [SP], #0x10
    // 0xb63330: ret
    //     0xb63330: ret             
    // 0xb63334: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb63334: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb63338: b               #0xb632bc
    // 0xb6333c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb6333c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 4535, size: 0x2c, field offset: 0xc
class _InputBorderPainter extends CustomPainter {

  _ paint(/* No info */) {
    // ** addr: 0xb33558, size: 0x218
    // 0xb33558: EnterFrame
    //     0xb33558: stp             fp, lr, [SP, #-0x10]!
    //     0xb3355c: mov             fp, SP
    // 0xb33560: AllocStack(0x70)
    //     0xb33560: sub             SP, SP, #0x70
    // 0xb33564: CheckStackOverflow
    //     0xb33564: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb33568: cmp             SP, x16
    //     0xb3356c: b.ls            #0xb33750
    // 0xb33570: ldr             x0, [fp, #0x20]
    // 0xb33574: LoadField: r1 = r0->field_f
    //     0xb33574: ldur            w1, [x0, #0xf]
    // 0xb33578: DecompressPointer r1
    //     0xb33578: add             x1, x1, HEAP, lsl #32
    // 0xb3357c: LoadField: r2 = r0->field_b
    //     0xb3357c: ldur            w2, [x0, #0xb]
    // 0xb33580: DecompressPointer r2
    //     0xb33580: add             x2, x2, HEAP, lsl #32
    // 0xb33584: stp             x2, x1, [SP]
    // 0xb33588: r0 = evaluate()
    //     0xb33588: bl              #0xb9b43c  ; [package:flutter/src/animation/tween.dart] Animatable::evaluate
    // 0xb3358c: stur            x0, [fp, #-8]
    // 0xb33590: r16 = Instance_Offset
    //     0xb33590: ldr             x16, [PP, #0x4010]  ; [pp+0x4010] Obj!Offset@c3cb91
    // 0xb33594: ldr             lr, [fp, #0x10]
    // 0xb33598: stp             lr, x16, [SP]
    // 0xb3359c: r0 = &()
    //     0xb3359c: bl              #0x599c38  ; [dart:ui] Offset::&
    // 0xb335a0: stur            x0, [fp, #-0x10]
    // 0xb335a4: ldr             x16, [fp, #0x20]
    // 0xb335a8: str             x16, [SP]
    // 0xb335ac: r0 = blendedColor()
    //     0xb335ac: bl              #0xb33770  ; [package:flutter/src/material/input_decorator.dart] _InputBorderPainter::blendedColor
    // 0xb335b0: mov             x1, x0
    // 0xb335b4: stur            x1, [fp, #-0x18]
    // 0xb335b8: r0 = LoadClassIdInstr(r1)
    //     0xb335b8: ldur            x0, [x1, #-1]
    //     0xb335bc: ubfx            x0, x0, #0xc, #0x14
    // 0xb335c0: str             x1, [SP]
    // 0xb335c4: r0 = GDT[cid_x0 + -0xe02]()
    //     0xb335c4: sub             lr, x0, #0xe02
    //     0xb335c8: ldr             lr, [x21, lr, lsl #3]
    //     0xb335cc: blr             lr
    // 0xb335d0: ubfx            x0, x0, #0, #0x20
    // 0xb335d4: r1 = 4278190080
    //     0xb335d4: orr             x1, xzr, #0xff000000
    // 0xb335d8: and             x2, x0, x1
    // 0xb335dc: ubfx            x2, x2, #0, #0x20
    // 0xb335e0: asr             x0, x2, #0x18
    // 0xb335e4: cmp             x0, #0
    // 0xb335e8: b.le            #0xb33688
    // 0xb335ec: ldr             x2, [fp, #0x20]
    // 0xb335f0: ldur            x1, [fp, #-8]
    // 0xb335f4: LoadField: r0 = r2->field_1b
    //     0xb335f4: ldur            w0, [x2, #0x1b]
    // 0xb335f8: DecompressPointer r0
    //     0xb335f8: add             x0, x0, HEAP, lsl #32
    // 0xb335fc: r3 = LoadClassIdInstr(r1)
    //     0xb335fc: ldur            x3, [x1, #-1]
    //     0xb33600: ubfx            x3, x3, #0xc, #0x14
    // 0xb33604: ldur            x16, [fp, #-0x10]
    // 0xb33608: stp             x16, x1, [SP, #8]
    // 0xb3360c: str             x0, [SP]
    // 0xb33610: mov             x0, x3
    // 0xb33614: r4 = const [0, 0x3, 0x3, 0x2, textDirection, 0x2, null]
    //     0xb33614: add             x4, PP, #0x21, lsl #12  ; [pp+0x21d28] List(7) [0, 0x3, 0x3, 0x2, "textDirection", 0x2, Null]
    //     0xb33618: ldr             x4, [x4, #0xd28]
    // 0xb3361c: r0 = GDT[cid_x0 + -0xfe0]()
    //     0xb3361c: sub             lr, x0, #0xfe0
    //     0xb33620: ldr             lr, [x21, lr, lsl #3]
    //     0xb33624: blr             lr
    // 0xb33628: stur            x0, [fp, #-0x20]
    // 0xb3362c: r16 = 112
    //     0xb3362c: movz            x16, #0x70
    // 0xb33630: stp             x16, NULL, [SP]
    // 0xb33634: r0 = ByteData()
    //     0xb33634: bl              #0x501a40  ; [dart:typed_data] ByteData::ByteData
    // 0xb33638: stur            x0, [fp, #-0x28]
    // 0xb3363c: r0 = Paint()
    //     0xb3363c: bl              #0x5d0aa0  ; AllocatePaintStub -> Paint (size=0x10)
    // 0xb33640: mov             x1, x0
    // 0xb33644: ldur            x0, [fp, #-0x28]
    // 0xb33648: stur            x1, [fp, #-0x30]
    // 0xb3364c: StoreField: r1->field_7 = r0
    //     0xb3364c: stur            w0, [x1, #7]
    // 0xb33650: ldur            x16, [fp, #-0x18]
    // 0xb33654: stp             x16, x1, [SP]
    // 0xb33658: r0 = color=()
    //     0xb33658: bl              #0x5ffad8  ; [dart:ui] Paint::color=
    // 0xb3365c: ldur            x0, [fp, #-0x28]
    // 0xb33660: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xb33660: ldur            w1, [x0, #0x17]
    // 0xb33664: DecompressPointer r1
    //     0xb33664: add             x1, x1, HEAP, lsl #32
    // 0xb33668: LoadField: r0 = r1->field_7
    //     0xb33668: ldur            x0, [x1, #7]
    // 0xb3366c: str             wzr, [x0, #0xc]
    // 0xb33670: ldr             x16, [fp, #0x18]
    // 0xb33674: ldur            lr, [fp, #-0x20]
    // 0xb33678: stp             lr, x16, [SP, #8]
    // 0xb3367c: ldur            x16, [fp, #-0x30]
    // 0xb33680: str             x16, [SP]
    // 0xb33684: r0 = drawPath()
    //     0xb33684: bl              #0x600420  ; [dart:ui] _NativeCanvas::drawPath
    // 0xb33688: ldr             x1, [fp, #0x20]
    // 0xb3368c: ldur            x0, [fp, #-8]
    // 0xb33690: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xb33690: ldur            w2, [x1, #0x17]
    // 0xb33694: DecompressPointer r2
    //     0xb33694: add             x2, x2, HEAP, lsl #32
    // 0xb33698: LoadField: r3 = r2->field_23
    //     0xb33698: ldur            w3, [x2, #0x23]
    // 0xb3369c: DecompressPointer r3
    //     0xb3369c: add             x3, x3, HEAP, lsl #32
    // 0xb336a0: stur            x3, [fp, #-0x18]
    // 0xb336a4: LoadField: d0 = r2->field_27
    //     0xb336a4: ldur            d0, [x2, #0x27]
    // 0xb336a8: stur            d0, [fp, #-0x38]
    // 0xb336ac: LoadField: r2 = r1->field_13
    //     0xb336ac: ldur            w2, [x1, #0x13]
    // 0xb336b0: DecompressPointer r2
    //     0xb336b0: add             x2, x2, HEAP, lsl #32
    // 0xb336b4: str             x2, [SP]
    // 0xb336b8: r0 = value()
    //     0xb336b8: bl              #0xba0bf4  ; [package:flutter/src/animation/animations.dart] CurvedAnimation::value
    // 0xb336bc: mov             x1, x0
    // 0xb336c0: ldr             x0, [fp, #0x20]
    // 0xb336c4: LoadField: r2 = r0->field_1b
    //     0xb336c4: ldur            w2, [x0, #0x1b]
    // 0xb336c8: DecompressPointer r2
    //     0xb336c8: add             x2, x2, HEAP, lsl #32
    // 0xb336cc: ldur            d0, [fp, #-0x38]
    // 0xb336d0: r0 = inline_Allocate_Double()
    //     0xb336d0: ldp             x0, x3, [THR, #0x50]  ; THR::top
    //     0xb336d4: add             x0, x0, #0x10
    //     0xb336d8: cmp             x3, x0
    //     0xb336dc: b.ls            #0xb33758
    //     0xb336e0: str             x0, [THR, #0x50]  ; THR::top
    //     0xb336e4: sub             x0, x0, #0xf
    //     0xb336e8: movz            x3, #0xd148
    //     0xb336ec: movk            x3, #0x3, lsl #16
    //     0xb336f0: stur            x3, [x0, #-1]
    // 0xb336f4: StoreField: r0->field_7 = d0
    //     0xb336f4: stur            d0, [x0, #7]
    // 0xb336f8: ldur            x3, [fp, #-8]
    // 0xb336fc: r4 = LoadClassIdInstr(r3)
    //     0xb336fc: ldur            x4, [x3, #-1]
    //     0xb33700: ubfx            x4, x4, #0xc, #0x14
    // 0xb33704: ldr             x16, [fp, #0x18]
    // 0xb33708: stp             x16, x3, [SP, #0x28]
    // 0xb3370c: ldur            x16, [fp, #-0x10]
    // 0xb33710: ldur            lr, [fp, #-0x18]
    // 0xb33714: stp             lr, x16, [SP, #0x18]
    // 0xb33718: stp             x1, x0, [SP, #8]
    // 0xb3371c: str             x2, [SP]
    // 0xb33720: mov             x0, x4
    // 0xb33724: r4 = const [0, 0x7, 0x7, 0x3, gapExtent, 0x4, gapPercentage, 0x5, gapStart, 0x3, textDirection, 0x6, null]
    //     0xb33724: add             x4, PP, #0x4f, lsl #12  ; [pp+0x4f7e8] List(13) [0, 0x7, 0x7, 0x3, "gapExtent", 0x4, "gapPercentage", 0x5, "gapStart", 0x3, "textDirection", 0x6, Null]
    //     0xb33728: ldr             x4, [x4, #0x7e8]
    // 0xb3372c: r0 = GDT[cid_x0 + 0x10a79]()
    //     0xb3372c: movz            x17, #0xa79
    //     0xb33730: movk            x17, #0x1, lsl #16
    //     0xb33734: add             lr, x0, x17
    //     0xb33738: ldr             lr, [x21, lr, lsl #3]
    //     0xb3373c: blr             lr
    // 0xb33740: r0 = Null
    //     0xb33740: mov             x0, NULL
    // 0xb33744: LeaveFrame
    //     0xb33744: mov             SP, fp
    //     0xb33748: ldp             fp, lr, [SP], #0x10
    // 0xb3374c: ret
    //     0xb3374c: ret             
    // 0xb33750: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb33750: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb33754: b               #0xb33570
    // 0xb33758: SaveReg d0
    //     0xb33758: str             q0, [SP, #-0x10]!
    // 0xb3375c: stp             x1, x2, [SP, #-0x10]!
    // 0xb33760: r0 = AllocateDouble()
    //     0xb33760: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xb33764: ldp             x1, x2, [SP], #0x10
    // 0xb33768: RestoreReg d0
    //     0xb33768: ldr             q0, [SP], #0x10
    // 0xb3376c: b               #0xb336f4
  }
  get _ blendedColor(/* No info */) {
    // ** addr: 0xb33770, size: 0x68
    // 0xb33770: EnterFrame
    //     0xb33770: stp             fp, lr, [SP, #-0x10]!
    //     0xb33774: mov             fp, SP
    // 0xb33778: AllocStack(0x10)
    //     0xb33778: sub             SP, SP, #0x10
    // 0xb3377c: CheckStackOverflow
    //     0xb3377c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb33780: cmp             SP, x16
    //     0xb33784: b.ls            #0xb337cc
    // 0xb33788: ldr             x0, [fp, #0x10]
    // 0xb3378c: LoadField: r1 = r0->field_23
    //     0xb3378c: ldur            w1, [x0, #0x23]
    // 0xb33790: DecompressPointer r1
    //     0xb33790: add             x1, x1, HEAP, lsl #32
    // 0xb33794: LoadField: r2 = r0->field_27
    //     0xb33794: ldur            w2, [x0, #0x27]
    // 0xb33798: DecompressPointer r2
    //     0xb33798: add             x2, x2, HEAP, lsl #32
    // 0xb3379c: stp             x2, x1, [SP]
    // 0xb337a0: r0 = evaluate()
    //     0xb337a0: bl              #0xb9b43c  ; [package:flutter/src/animation/tween.dart] Animatable::evaluate
    // 0xb337a4: cmp             w0, NULL
    // 0xb337a8: b.eq            #0xb337d4
    // 0xb337ac: ldr             x1, [fp, #0x10]
    // 0xb337b0: LoadField: r2 = r1->field_1f
    //     0xb337b0: ldur            w2, [x1, #0x1f]
    // 0xb337b4: DecompressPointer r2
    //     0xb337b4: add             x2, x2, HEAP, lsl #32
    // 0xb337b8: stp             x2, x0, [SP]
    // 0xb337bc: r0 = alphaBlend()
    //     0xb337bc: bl              #0x940144  ; [dart:ui] Color::alphaBlend
    // 0xb337c0: LeaveFrame
    //     0xb337c0: mov             SP, fp
    //     0xb337c4: ldp             fp, lr, [SP], #0x10
    // 0xb337c8: ret
    //     0xb337c8: ret             
    // 0xb337cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb337cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb337d0: b               #0xb33788
    // 0xb337d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb337d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ shouldRepaint(/* No info */) {
    // ** addr: 0xb52388, size: 0x120
    // 0xb52388: EnterFrame
    //     0xb52388: stp             fp, lr, [SP, #-0x10]!
    //     0xb5238c: mov             fp, SP
    // 0xb52390: AllocStack(0x10)
    //     0xb52390: sub             SP, SP, #0x10
    // 0xb52394: CheckStackOverflow
    //     0xb52394: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb52398: cmp             SP, x16
    //     0xb5239c: b.ls            #0xb524a0
    // 0xb523a0: ldr             x0, [fp, #0x10]
    // 0xb523a4: r2 = Null
    //     0xb523a4: mov             x2, NULL
    // 0xb523a8: r1 = Null
    //     0xb523a8: mov             x1, NULL
    // 0xb523ac: r4 = 59
    //     0xb523ac: movz            x4, #0x3b
    // 0xb523b0: branchIfSmi(r0, 0xb523bc)
    //     0xb523b0: tbz             w0, #0, #0xb523bc
    // 0xb523b4: r4 = LoadClassIdInstr(r0)
    //     0xb523b4: ldur            x4, [x0, #-1]
    //     0xb523b8: ubfx            x4, x4, #0xc, #0x14
    // 0xb523bc: r17 = 4535
    //     0xb523bc: movz            x17, #0x11b7
    // 0xb523c0: cmp             x4, x17
    // 0xb523c4: b.eq            #0xb523dc
    // 0xb523c8: r8 = _InputBorderPainter
    //     0xb523c8: add             x8, PP, #0x4f, lsl #12  ; [pp+0x4f7d0] Type: _InputBorderPainter
    //     0xb523cc: ldr             x8, [x8, #0x7d0]
    // 0xb523d0: r3 = Null
    //     0xb523d0: add             x3, PP, #0x4f, lsl #12  ; [pp+0x4f7d8] Null
    //     0xb523d4: ldr             x3, [x3, #0x7d8]
    // 0xb523d8: r0 = DefaultTypeTest()
    //     0xb523d8: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xb523dc: ldr             x0, [fp, #0x18]
    // 0xb523e0: LoadField: r1 = r0->field_b
    //     0xb523e0: ldur            w1, [x0, #0xb]
    // 0xb523e4: DecompressPointer r1
    //     0xb523e4: add             x1, x1, HEAP, lsl #32
    // 0xb523e8: ldr             x2, [fp, #0x10]
    // 0xb523ec: LoadField: r3 = r2->field_b
    //     0xb523ec: ldur            w3, [x2, #0xb]
    // 0xb523f0: DecompressPointer r3
    //     0xb523f0: add             x3, x3, HEAP, lsl #32
    // 0xb523f4: cmp             w1, w3
    // 0xb523f8: b.ne            #0xb52460
    // 0xb523fc: LoadField: r1 = r0->field_27
    //     0xb523fc: ldur            w1, [x0, #0x27]
    // 0xb52400: DecompressPointer r1
    //     0xb52400: add             x1, x1, HEAP, lsl #32
    // 0xb52404: LoadField: r3 = r2->field_27
    //     0xb52404: ldur            w3, [x2, #0x27]
    // 0xb52408: DecompressPointer r3
    //     0xb52408: add             x3, x3, HEAP, lsl #32
    // 0xb5240c: cmp             w1, w3
    // 0xb52410: b.ne            #0xb52460
    // 0xb52414: LoadField: r1 = r0->field_13
    //     0xb52414: ldur            w1, [x0, #0x13]
    // 0xb52418: DecompressPointer r1
    //     0xb52418: add             x1, x1, HEAP, lsl #32
    // 0xb5241c: LoadField: r3 = r2->field_13
    //     0xb5241c: ldur            w3, [x2, #0x13]
    // 0xb52420: DecompressPointer r3
    //     0xb52420: add             x3, x3, HEAP, lsl #32
    // 0xb52424: cmp             w1, w3
    // 0xb52428: b.ne            #0xb52460
    // 0xb5242c: LoadField: r1 = r0->field_f
    //     0xb5242c: ldur            w1, [x0, #0xf]
    // 0xb52430: DecompressPointer r1
    //     0xb52430: add             x1, x1, HEAP, lsl #32
    // 0xb52434: LoadField: r3 = r2->field_f
    //     0xb52434: ldur            w3, [x2, #0xf]
    // 0xb52438: DecompressPointer r3
    //     0xb52438: add             x3, x3, HEAP, lsl #32
    // 0xb5243c: cmp             w1, w3
    // 0xb52440: b.ne            #0xb52460
    // 0xb52444: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xb52444: ldur            w1, [x0, #0x17]
    // 0xb52448: DecompressPointer r1
    //     0xb52448: add             x1, x1, HEAP, lsl #32
    // 0xb5244c: ArrayLoad: r3 = r2[0]  ; List_4
    //     0xb5244c: ldur            w3, [x2, #0x17]
    // 0xb52450: DecompressPointer r3
    //     0xb52450: add             x3, x3, HEAP, lsl #32
    // 0xb52454: stp             x3, x1, [SP]
    // 0xb52458: r0 = ==()
    //     0xb52458: bl              #0xbb77e8  ; [package:flutter/src/material/input_decorator.dart] _InputBorderGap::==
    // 0xb5245c: tbz             w0, #4, #0xb52468
    // 0xb52460: r0 = true
    //     0xb52460: add             x0, NULL, #0x20  ; true
    // 0xb52464: b               #0xb52494
    // 0xb52468: ldr             x1, [fp, #0x18]
    // 0xb5246c: ldr             x2, [fp, #0x10]
    // 0xb52470: LoadField: r3 = r1->field_1b
    //     0xb52470: ldur            w3, [x1, #0x1b]
    // 0xb52474: DecompressPointer r3
    //     0xb52474: add             x3, x3, HEAP, lsl #32
    // 0xb52478: LoadField: r1 = r2->field_1b
    //     0xb52478: ldur            w1, [x2, #0x1b]
    // 0xb5247c: DecompressPointer r1
    //     0xb5247c: add             x1, x1, HEAP, lsl #32
    // 0xb52480: cmp             w3, w1
    // 0xb52484: r16 = true
    //     0xb52484: add             x16, NULL, #0x20  ; true
    // 0xb52488: r17 = false
    //     0xb52488: add             x17, NULL, #0x30  ; false
    // 0xb5248c: csel            x2, x16, x17, ne
    // 0xb52490: mov             x0, x2
    // 0xb52494: LeaveFrame
    //     0xb52494: mov             SP, fp
    //     0xb52498: ldp             fp, lr, [SP], #0x10
    // 0xb5249c: ret
    //     0xb5249c: ret             
    // 0xb524a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb524a0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb524a4: b               #0xb523a0
  }
}

// class id: 4798, size: 0x30, field offset: 0x24
class _InputBorderGap extends ChangeNotifier {

  set _ extent=(/* No info */) {
    // ** addr: 0x7d6a48, size: 0x50
    // 0x7d6a48: EnterFrame
    //     0x7d6a48: stp             fp, lr, [SP, #-0x10]!
    //     0x7d6a4c: mov             fp, SP
    // 0x7d6a50: AllocStack(0x8)
    //     0x7d6a50: sub             SP, SP, #8
    // 0x7d6a54: CheckStackOverflow
    //     0x7d6a54: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d6a58: cmp             SP, x16
    //     0x7d6a5c: b.ls            #0x7d6a90
    // 0x7d6a60: ldr             x0, [fp, #0x18]
    // 0x7d6a64: LoadField: d0 = r0->field_27
    //     0x7d6a64: ldur            d0, [x0, #0x27]
    // 0x7d6a68: ldr             d1, [fp, #0x10]
    // 0x7d6a6c: fcmp            d1, d0
    // 0x7d6a70: b.eq            #0x7d6a80
    // 0x7d6a74: StoreField: r0->field_27 = d1
    //     0x7d6a74: stur            d1, [x0, #0x27]
    // 0x7d6a78: str             x0, [SP]
    // 0x7d6a7c: r0 = notifyListeners()
    //     0x7d6a7c: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x7d6a80: r0 = Null
    //     0x7d6a80: mov             x0, NULL
    // 0x7d6a84: LeaveFrame
    //     0x7d6a84: mov             SP, fp
    //     0x7d6a88: ldp             fp, lr, [SP], #0x10
    // 0x7d6a8c: ret
    //     0x7d6a8c: ret             
    // 0x7d6a90: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d6a90: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d6a94: b               #0x7d6a60
  }
  set _ start=(/* No info */) {
    // ** addr: 0x7d6a98, size: 0x8c
    // 0x7d6a98: EnterFrame
    //     0x7d6a98: stp             fp, lr, [SP, #-0x10]!
    //     0x7d6a9c: mov             fp, SP
    // 0x7d6aa0: AllocStack(0x10)
    //     0x7d6aa0: sub             SP, SP, #0x10
    // 0x7d6aa4: CheckStackOverflow
    //     0x7d6aa4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7d6aa8: cmp             SP, x16
    //     0x7d6aac: b.ls            #0x7d6b1c
    // 0x7d6ab0: ldr             x1, [fp, #0x18]
    // 0x7d6ab4: LoadField: r0 = r1->field_23
    //     0x7d6ab4: ldur            w0, [x1, #0x23]
    // 0x7d6ab8: DecompressPointer r0
    //     0x7d6ab8: add             x0, x0, HEAP, lsl #32
    // 0x7d6abc: ldr             x2, [fp, #0x10]
    // 0x7d6ac0: r3 = LoadClassIdInstr(r2)
    //     0x7d6ac0: ldur            x3, [x2, #-1]
    //     0x7d6ac4: ubfx            x3, x3, #0xc, #0x14
    // 0x7d6ac8: stp             x0, x2, [SP]
    // 0x7d6acc: mov             x0, x3
    // 0x7d6ad0: mov             lr, x0
    // 0x7d6ad4: ldr             lr, [x21, lr, lsl #3]
    // 0x7d6ad8: blr             lr
    // 0x7d6adc: tbz             w0, #4, #0x7d6b0c
    // 0x7d6ae0: ldr             x1, [fp, #0x18]
    // 0x7d6ae4: ldr             x0, [fp, #0x10]
    // 0x7d6ae8: StoreField: r1->field_23 = r0
    //     0x7d6ae8: stur            w0, [x1, #0x23]
    //     0x7d6aec: ldurb           w16, [x1, #-1]
    //     0x7d6af0: ldurb           w17, [x0, #-1]
    //     0x7d6af4: and             x16, x17, x16, lsr #2
    //     0x7d6af8: tst             x16, HEAP, lsr #32
    //     0x7d6afc: b.eq            #0x7d6b04
    //     0x7d6b00: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7d6b04: str             x1, [SP]
    // 0x7d6b08: r0 = notifyListeners()
    //     0x7d6b08: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x7d6b0c: r0 = Null
    //     0x7d6b0c: mov             x0, NULL
    // 0x7d6b10: LeaveFrame
    //     0x7d6b10: mov             SP, fp
    //     0x7d6b14: ldp             fp, lr, [SP], #0x10
    // 0x7d6b18: ret
    //     0x7d6b18: ret             
    // 0x7d6b1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7d6b1c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7d6b20: b               #0x7d6ab0
  }
  get _ hashCode(/* No info */) {
    // ** addr: 0xad2388, size: 0xa0
    // 0xad2388: EnterFrame
    //     0xad2388: stp             fp, lr, [SP, #-0x10]!
    //     0xad238c: mov             fp, SP
    // 0xad2390: AllocStack(0x10)
    //     0xad2390: sub             SP, SP, #0x10
    // 0xad2394: CheckStackOverflow
    //     0xad2394: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xad2398: cmp             SP, x16
    //     0xad239c: b.ls            #0xad2408
    // 0xad23a0: ldr             x0, [fp, #0x10]
    // 0xad23a4: LoadField: r1 = r0->field_23
    //     0xad23a4: ldur            w1, [x0, #0x23]
    // 0xad23a8: DecompressPointer r1
    //     0xad23a8: add             x1, x1, HEAP, lsl #32
    // 0xad23ac: LoadField: d0 = r0->field_27
    //     0xad23ac: ldur            d0, [x0, #0x27]
    // 0xad23b0: r0 = inline_Allocate_Double()
    //     0xad23b0: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0xad23b4: add             x0, x0, #0x10
    //     0xad23b8: cmp             x2, x0
    //     0xad23bc: b.ls            #0xad2410
    //     0xad23c0: str             x0, [THR, #0x50]  ; THR::top
    //     0xad23c4: sub             x0, x0, #0xf
    //     0xad23c8: movz            x2, #0xd148
    //     0xad23cc: movk            x2, #0x3, lsl #16
    //     0xad23d0: stur            x2, [x0, #-1]
    // 0xad23d4: StoreField: r0->field_7 = d0
    //     0xad23d4: stur            d0, [x0, #7]
    // 0xad23d8: stp             x0, x1, [SP]
    // 0xad23dc: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0xad23dc: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0xad23e0: r0 = hash()
    //     0xad23e0: bl              #0x5f0bd8  ; [dart:core] Object::hash
    // 0xad23e4: mov             x2, x0
    // 0xad23e8: r0 = BoxInt64Instr(r2)
    //     0xad23e8: sbfiz           x0, x2, #1, #0x1f
    //     0xad23ec: cmp             x2, x0, asr #1
    //     0xad23f0: b.eq            #0xad23fc
    //     0xad23f4: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xad23f8: stur            x2, [x0, #7]
    // 0xad23fc: LeaveFrame
    //     0xad23fc: mov             SP, fp
    //     0xad2400: ldp             fp, lr, [SP], #0x10
    // 0xad2404: ret
    //     0xad2404: ret             
    // 0xad2408: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xad2408: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xad240c: b               #0xad23a0
    // 0xad2410: SaveReg d0
    //     0xad2410: str             q0, [SP, #-0x10]!
    // 0xad2414: SaveReg r1
    //     0xad2414: str             x1, [SP, #-8]!
    // 0xad2418: r0 = AllocateDouble()
    //     0xad2418: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xad241c: RestoreReg r1
    //     0xad241c: ldr             x1, [SP], #8
    // 0xad2420: RestoreReg d0
    //     0xad2420: ldr             q0, [SP], #0x10
    // 0xad2424: b               #0xad23d4
  }
  _ ==(/* No info */) {
    // ** addr: 0xbb77e8, size: 0x14c
    // 0xbb77e8: EnterFrame
    //     0xbb77e8: stp             fp, lr, [SP, #-0x10]!
    //     0xbb77ec: mov             fp, SP
    // 0xbb77f0: AllocStack(0x10)
    //     0xbb77f0: sub             SP, SP, #0x10
    // 0xbb77f4: CheckStackOverflow
    //     0xbb77f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbb77f8: cmp             SP, x16
    //     0xbb77fc: b.ls            #0xbb792c
    // 0xbb7800: ldr             x1, [fp, #0x10]
    // 0xbb7804: cmp             w1, NULL
    // 0xbb7808: b.ne            #0xbb781c
    // 0xbb780c: r0 = false
    //     0xbb780c: add             x0, NULL, #0x30  ; false
    // 0xbb7810: LeaveFrame
    //     0xbb7810: mov             SP, fp
    //     0xbb7814: ldp             fp, lr, [SP], #0x10
    // 0xbb7818: ret
    //     0xbb7818: ret             
    // 0xbb781c: ldr             x2, [fp, #0x18]
    // 0xbb7820: cmp             w2, w1
    // 0xbb7824: b.ne            #0xbb7838
    // 0xbb7828: r0 = true
    //     0xbb7828: add             x0, NULL, #0x20  ; true
    // 0xbb782c: LeaveFrame
    //     0xbb782c: mov             SP, fp
    //     0xbb7830: ldp             fp, lr, [SP], #0x10
    // 0xbb7834: ret
    //     0xbb7834: ret             
    // 0xbb7838: r0 = 59
    //     0xbb7838: movz            x0, #0x3b
    // 0xbb783c: branchIfSmi(r1, 0xbb7848)
    //     0xbb783c: tbz             w1, #0, #0xbb7848
    // 0xbb7840: r0 = LoadClassIdInstr(r1)
    //     0xbb7840: ldur            x0, [x1, #-1]
    //     0xbb7844: ubfx            x0, x0, #0xc, #0x14
    // 0xbb7848: str             x1, [SP]
    // 0xbb784c: r0 = GDT[cid_x0 + 0x55ae]()
    //     0xbb784c: movz            x17, #0x55ae
    //     0xbb7850: add             lr, x0, x17
    //     0xbb7854: ldr             lr, [x21, lr, lsl #3]
    //     0xbb7858: blr             lr
    // 0xbb785c: r1 = LoadClassIdInstr(r0)
    //     0xbb785c: ldur            x1, [x0, #-1]
    //     0xbb7860: ubfx            x1, x1, #0xc, #0x14
    // 0xbb7864: r16 = _InputBorderGap
    //     0xbb7864: add             x16, PP, #0x41, lsl #12  ; [pp+0x41978] Type: _InputBorderGap
    //     0xbb7868: ldr             x16, [x16, #0x978]
    // 0xbb786c: stp             x16, x0, [SP]
    // 0xbb7870: mov             x0, x1
    // 0xbb7874: mov             lr, x0
    // 0xbb7878: ldr             lr, [x21, lr, lsl #3]
    // 0xbb787c: blr             lr
    // 0xbb7880: tbz             w0, #4, #0xbb7894
    // 0xbb7884: r0 = false
    //     0xbb7884: add             x0, NULL, #0x30  ; false
    // 0xbb7888: LeaveFrame
    //     0xbb7888: mov             SP, fp
    //     0xbb788c: ldp             fp, lr, [SP], #0x10
    // 0xbb7890: ret
    //     0xbb7890: ret             
    // 0xbb7894: ldr             x1, [fp, #0x10]
    // 0xbb7898: r0 = LoadTaggedClassIdMayBeSmiInstr(r1)
    //     0xbb7898: movz            x0, #0x76
    //     0xbb789c: tbz             w1, #0, #0xbb78ac
    //     0xbb78a0: ldur            x0, [x1, #-1]
    //     0xbb78a4: ubfx            x0, x0, #0xc, #0x14
    //     0xbb78a8: lsl             x0, x0, #1
    // 0xbb78ac: r17 = 9596
    //     0xbb78ac: movz            x17, #0x257c
    // 0xbb78b0: cmp             w0, w17
    // 0xbb78b4: b.ne            #0xbb791c
    // 0xbb78b8: ldr             x2, [fp, #0x18]
    // 0xbb78bc: LoadField: r0 = r1->field_23
    //     0xbb78bc: ldur            w0, [x1, #0x23]
    // 0xbb78c0: DecompressPointer r0
    //     0xbb78c0: add             x0, x0, HEAP, lsl #32
    // 0xbb78c4: LoadField: r3 = r2->field_23
    //     0xbb78c4: ldur            w3, [x2, #0x23]
    // 0xbb78c8: DecompressPointer r3
    //     0xbb78c8: add             x3, x3, HEAP, lsl #32
    // 0xbb78cc: r4 = LoadClassIdInstr(r0)
    //     0xbb78cc: ldur            x4, [x0, #-1]
    //     0xbb78d0: ubfx            x4, x4, #0xc, #0x14
    // 0xbb78d4: stp             x3, x0, [SP]
    // 0xbb78d8: mov             x0, x4
    // 0xbb78dc: mov             lr, x0
    // 0xbb78e0: ldr             lr, [x21, lr, lsl #3]
    // 0xbb78e4: blr             lr
    // 0xbb78e8: tbnz            w0, #4, #0xbb791c
    // 0xbb78ec: ldr             x2, [fp, #0x18]
    // 0xbb78f0: ldr             x1, [fp, #0x10]
    // 0xbb78f4: LoadField: d0 = r1->field_27
    //     0xbb78f4: ldur            d0, [x1, #0x27]
    // 0xbb78f8: LoadField: d1 = r2->field_27
    //     0xbb78f8: ldur            d1, [x2, #0x27]
    // 0xbb78fc: fcmp            d0, d1
    // 0xbb7900: b.vs            #0xbb7908
    // 0xbb7904: b.eq            #0xbb7910
    // 0xbb7908: r1 = false
    //     0xbb7908: add             x1, NULL, #0x30  ; false
    // 0xbb790c: b               #0xbb7914
    // 0xbb7910: r1 = true
    //     0xbb7910: add             x1, NULL, #0x20  ; true
    // 0xbb7914: mov             x0, x1
    // 0xbb7918: b               #0xbb7920
    // 0xbb791c: r0 = false
    //     0xbb791c: add             x0, NULL, #0x30  ; false
    // 0xbb7920: LeaveFrame
    //     0xbb7920: mov             SP, fp
    //     0xbb7924: ldp             fp, lr, [SP], #0x10
    // 0xbb7928: ret
    //     0xbb7928: ret             
    // 0xbb792c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbb792c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbb7930: b               #0xbb7800
  }
}

// class id: 6093, size: 0x14, field offset: 0x14
enum _DecorationSlot extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0xb21d84, size: 0x5c
    // 0xb21d84: EnterFrame
    //     0xb21d84: stp             fp, lr, [SP, #-0x10]!
    //     0xb21d88: mov             fp, SP
    // 0xb21d8c: AllocStack(0x8)
    //     0xb21d8c: sub             SP, SP, #8
    // 0xb21d90: CheckStackOverflow
    //     0xb21d90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb21d94: cmp             SP, x16
    //     0xb21d98: b.ls            #0xb21dd8
    // 0xb21d9c: r1 = Null
    //     0xb21d9c: mov             x1, NULL
    // 0xb21da0: r2 = 4
    //     0xb21da0: movz            x2, #0x4
    // 0xb21da4: r0 = AllocateArray()
    //     0xb21da4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xb21da8: r17 = "_DecorationSlot."
    //     0xb21da8: add             x17, PP, #0x4d, lsl #12  ; [pp+0x4d3f0] "_DecorationSlot."
    //     0xb21dac: ldr             x17, [x17, #0x3f0]
    // 0xb21db0: StoreField: r0->field_f = r17
    //     0xb21db0: stur            w17, [x0, #0xf]
    // 0xb21db4: ldr             x1, [fp, #0x10]
    // 0xb21db8: LoadField: r2 = r1->field_f
    //     0xb21db8: ldur            w2, [x1, #0xf]
    // 0xb21dbc: DecompressPointer r2
    //     0xb21dbc: add             x2, x2, HEAP, lsl #32
    // 0xb21dc0: StoreField: r0->field_13 = r2
    //     0xb21dc0: stur            w2, [x0, #0x13]
    // 0xb21dc4: str             x0, [SP]
    // 0xb21dc8: r0 = _interpolate()
    //     0xb21dc8: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xb21dcc: LeaveFrame
    //     0xb21dcc: mov             SP, fp
    //     0xb21dd0: ldp             fp, lr, [SP], #0x10
    // 0xb21dd4: ret
    //     0xb21dd4: ret             
    // 0xb21dd8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb21dd8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb21ddc: b               #0xb21d9c
  }
}

// class id: 6094, size: 0x14, field offset: 0x14
enum FloatingLabelBehavior extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0xb21d28, size: 0x5c
    // 0xb21d28: EnterFrame
    //     0xb21d28: stp             fp, lr, [SP, #-0x10]!
    //     0xb21d2c: mov             fp, SP
    // 0xb21d30: AllocStack(0x8)
    //     0xb21d30: sub             SP, SP, #8
    // 0xb21d34: CheckStackOverflow
    //     0xb21d34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb21d38: cmp             SP, x16
    //     0xb21d3c: b.ls            #0xb21d7c
    // 0xb21d40: r1 = Null
    //     0xb21d40: mov             x1, NULL
    // 0xb21d44: r2 = 4
    //     0xb21d44: movz            x2, #0x4
    // 0xb21d48: r0 = AllocateArray()
    //     0xb21d48: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xb21d4c: r17 = "FloatingLabelBehavior."
    //     0xb21d4c: add             x17, PP, #0xf, lsl #12  ; [pp+0xf6d0] "FloatingLabelBehavior."
    //     0xb21d50: ldr             x17, [x17, #0x6d0]
    // 0xb21d54: StoreField: r0->field_f = r17
    //     0xb21d54: stur            w17, [x0, #0xf]
    // 0xb21d58: ldr             x1, [fp, #0x10]
    // 0xb21d5c: LoadField: r2 = r1->field_f
    //     0xb21d5c: ldur            w2, [x1, #0xf]
    // 0xb21d60: DecompressPointer r2
    //     0xb21d60: add             x2, x2, HEAP, lsl #32
    // 0xb21d64: StoreField: r0->field_13 = r2
    //     0xb21d64: stur            w2, [x0, #0x13]
    // 0xb21d68: str             x0, [SP]
    // 0xb21d6c: r0 = _interpolate()
    //     0xb21d6c: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xb21d70: LeaveFrame
    //     0xb21d70: mov             SP, fp
    //     0xb21d74: ldp             fp, lr, [SP], #0x10
    // 0xb21d78: ret
    //     0xb21d78: ret             
    // 0xb21d7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb21d7c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb21d80: b               #0xb21d40
  }
}
