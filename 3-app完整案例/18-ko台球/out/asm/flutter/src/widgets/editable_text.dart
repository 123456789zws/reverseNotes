// lib: , url: package:flutter/src/widgets/editable_text.dart

// class id: 1049463, size: 0x8
class :: {
}

// class id: 1711, size: 0x18, field offset: 0x8
//   const constructor, 
class _GlyphHeights extends Object {
}

// class id: 1713, size: 0x18, field offset: 0x8
//   const constructor, 
class _KeyFrame extends Object {

  _Mint field_8;
  _Double field_10;
}

// class id: 1715, size: 0x18, field offset: 0x8
//   const constructor, 
class ToolbarOptions extends Object {

  bool field_8;
  bool field_c;
  bool field_10;
  bool field_14;
}

// class id: 2119, size: 0x70, field offset: 0x64
class _RenderCompositionCallback extends RenderProxyBox {

  _ paint(/* No info */) {
    // ** addr: 0x7fc05c, size: 0xa8
    // 0x7fc05c: EnterFrame
    //     0x7fc05c: stp             fp, lr, [SP, #-0x10]!
    //     0x7fc060: mov             fp, SP
    // 0x7fc064: AllocStack(0x18)
    //     0x7fc064: sub             SP, SP, #0x18
    // 0x7fc068: CheckStackOverflow
    //     0x7fc068: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x7fc06c: cmp             SP, x16
    //     0x7fc070: b.ls            #0x7fc0fc
    // 0x7fc074: ldr             x0, [fp, #0x20]
    // 0x7fc078: LoadField: r1 = r0->field_6b
    //     0x7fc078: ldur            w1, [x0, #0x6b]
    // 0x7fc07c: DecompressPointer r1
    //     0x7fc07c: add             x1, x1, HEAP, lsl #32
    // 0x7fc080: tbnz            w1, #4, #0x7fc0d4
    // 0x7fc084: LoadField: r1 = r0->field_67
    //     0x7fc084: ldur            w1, [x0, #0x67]
    // 0x7fc088: DecompressPointer r1
    //     0x7fc088: add             x1, x1, HEAP, lsl #32
    // 0x7fc08c: cmp             w1, NULL
    // 0x7fc090: b.ne            #0x7fc0cc
    // 0x7fc094: LoadField: r1 = r0->field_63
    //     0x7fc094: ldur            w1, [x0, #0x63]
    // 0x7fc098: DecompressPointer r1
    //     0x7fc098: add             x1, x1, HEAP, lsl #32
    // 0x7fc09c: ldr             x16, [fp, #0x18]
    // 0x7fc0a0: stp             x1, x16, [SP]
    // 0x7fc0a4: r0 = addCompositionCallback()
    //     0x7fc0a4: bl              #0x7fc104  ; [package:flutter/src/rendering/object.dart] PaintingContext::addCompositionCallback
    // 0x7fc0a8: ldr             x1, [fp, #0x20]
    // 0x7fc0ac: StoreField: r1->field_67 = r0
    //     0x7fc0ac: stur            w0, [x1, #0x67]
    //     0x7fc0b0: ldurb           w16, [x1, #-1]
    //     0x7fc0b4: ldurb           w17, [x0, #-1]
    //     0x7fc0b8: and             x16, x17, x16, lsr #2
    //     0x7fc0bc: tst             x16, HEAP, lsr #32
    //     0x7fc0c0: b.eq            #0x7fc0c8
    //     0x7fc0c4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x7fc0c8: b               #0x7fc0d8
    // 0x7fc0cc: mov             x1, x0
    // 0x7fc0d0: b               #0x7fc0d8
    // 0x7fc0d4: mov             x1, x0
    // 0x7fc0d8: ldr             x16, [fp, #0x18]
    // 0x7fc0dc: stp             x16, x1, [SP, #8]
    // 0x7fc0e0: ldr             x16, [fp, #0x10]
    // 0x7fc0e4: str             x16, [SP]
    // 0x7fc0e8: r0 = paint()
    //     0x7fc0e8: bl              #0x7fdd20  ; [package:flutter/src/rendering/proxy_box.dart] _RenderProxyBox&RenderBox&RenderObjectWithChildMixin&RenderProxyBoxMixin::paint
    // 0x7fc0ec: r0 = Null
    //     0x7fc0ec: mov             x0, NULL
    // 0x7fc0f0: LeaveFrame
    //     0x7fc0f0: mov             SP, fp
    //     0x7fc0f4: ldp             fp, lr, [SP], #0x10
    // 0x7fc0f8: ret
    //     0x7fc0f8: ret             
    // 0x7fc0fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x7fc0fc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x7fc100: b               #0x7fc074
  }
  set _ enabled=(/* No info */) {
    // ** addr: 0xa66050, size: 0x90
    // 0xa66050: EnterFrame
    //     0xa66050: stp             fp, lr, [SP, #-0x10]!
    //     0xa66054: mov             fp, SP
    // 0xa66058: AllocStack(0x8)
    //     0xa66058: sub             SP, SP, #8
    // 0xa6605c: CheckStackOverflow
    //     0xa6605c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa66060: cmp             SP, x16
    //     0xa66064: b.ls            #0xa660d8
    // 0xa66068: ldr             x1, [fp, #0x18]
    // 0xa6606c: ldr             x0, [fp, #0x10]
    // 0xa66070: StoreField: r1->field_6b = r0
    //     0xa66070: stur            w0, [x1, #0x6b]
    // 0xa66074: tbz             w0, #4, #0xa660ac
    // 0xa66078: LoadField: r0 = r1->field_67
    //     0xa66078: ldur            w0, [x1, #0x67]
    // 0xa6607c: DecompressPointer r0
    //     0xa6607c: add             x0, x0, HEAP, lsl #32
    // 0xa66080: cmp             w0, NULL
    // 0xa66084: b.ne            #0xa66090
    // 0xa66088: mov             x0, x1
    // 0xa6608c: b               #0xa660a4
    // 0xa66090: str             x0, [SP]
    // 0xa66094: ClosureCall
    //     0xa66094: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0xa66098: ldur            x2, [x0, #0x1f]
    //     0xa6609c: blr             x2
    // 0xa660a0: ldr             x0, [fp, #0x18]
    // 0xa660a4: StoreField: r0->field_67 = rNULL
    //     0xa660a4: stur            NULL, [x0, #0x67]
    // 0xa660a8: b               #0xa660c8
    // 0xa660ac: mov             x0, x1
    // 0xa660b0: LoadField: r1 = r0->field_67
    //     0xa660b0: ldur            w1, [x0, #0x67]
    // 0xa660b4: DecompressPointer r1
    //     0xa660b4: add             x1, x1, HEAP, lsl #32
    // 0xa660b8: cmp             w1, NULL
    // 0xa660bc: b.ne            #0xa660c8
    // 0xa660c0: str             x0, [SP]
    // 0xa660c4: r0 = markNeedsPaint()
    //     0xa660c4: bl              #0x7c8d9c  ; [package:flutter/src/rendering/object.dart] RenderObject::markNeedsPaint
    // 0xa660c8: r0 = Null
    //     0xa660c8: mov             x0, NULL
    // 0xa660cc: LeaveFrame
    //     0xa660cc: mov             SP, fp
    //     0xa660d0: ldp             fp, lr, [SP], #0x10
    // 0xa660d4: ret
    //     0xa660d4: ret             
    // 0xa660d8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa660d8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa660dc: b               #0xa66068
  }
}

// class id: 2722, size: 0x18, field offset: 0x14
class _CopySelectionAction extends ContextAction<dynamic> {

  _ invoke(/* No info */) {
    // ** addr: 0xa7ed8c, size: 0xd4
    // 0xa7ed8c: EnterFrame
    //     0xa7ed8c: stp             fp, lr, [SP, #-0x10]!
    //     0xa7ed90: mov             fp, SP
    // 0xa7ed94: AllocStack(0x20)
    //     0xa7ed94: sub             SP, SP, #0x20
    // 0xa7ed98: SetupParameters(_CopySelectionAction this /* r3, fp-0x10 */, dynamic _ /* r4, fp-0x8 */)
    //     0xa7ed98: mov             x0, x4
    //     0xa7ed9c: ldur            w1, [x0, #0x13]
    //     0xa7eda0: add             x1, x1, HEAP, lsl #32
    //     0xa7eda4: sub             x0, x1, #4
    //     0xa7eda8: add             x3, fp, w0, sxtw #2
    //     0xa7edac: ldr             x3, [x3, #0x18]
    //     0xa7edb0: stur            x3, [fp, #-0x10]
    //     0xa7edb4: add             x4, fp, w0, sxtw #2
    //     0xa7edb8: ldr             x4, [x4, #0x10]
    //     0xa7edbc: stur            x4, [fp, #-8]
    // 0xa7edc0: CheckStackOverflow
    //     0xa7edc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7edc4: cmp             SP, x16
    //     0xa7edc8: b.ls            #0xa7ee58
    // 0xa7edcc: mov             x0, x4
    // 0xa7edd0: r2 = Null
    //     0xa7edd0: mov             x2, NULL
    // 0xa7edd4: r1 = Null
    //     0xa7edd4: mov             x1, NULL
    // 0xa7edd8: r4 = 59
    //     0xa7edd8: movz            x4, #0x3b
    // 0xa7eddc: branchIfSmi(r0, 0xa7ede8)
    //     0xa7eddc: tbz             w0, #0, #0xa7ede8
    // 0xa7ede0: r4 = LoadClassIdInstr(r0)
    //     0xa7ede0: ldur            x4, [x0, #-1]
    //     0xa7ede4: ubfx            x4, x4, #0xc, #0x14
    // 0xa7ede8: cmp             x4, #0xa70
    // 0xa7edec: b.eq            #0xa7ee04
    // 0xa7edf0: r8 = CopySelectionTextIntent
    //     0xa7edf0: add             x8, PP, #0x41, lsl #12  ; [pp+0x41388] Type: CopySelectionTextIntent
    //     0xa7edf4: ldr             x8, [x8, #0x388]
    // 0xa7edf8: r3 = Null
    //     0xa7edf8: add             x3, PP, #0x47, lsl #12  ; [pp+0x47330] Null
    //     0xa7edfc: ldr             x3, [x3, #0x330]
    // 0xa7ee00: r0 = CopySelectionTextIntent()
    //     0xa7ee00: bl              #0x95d090  ; IsType_CopySelectionTextIntent_Stub
    // 0xa7ee04: ldur            x0, [fp, #-8]
    // 0xa7ee08: LoadField: r1 = r0->field_b
    //     0xa7ee08: ldur            w1, [x0, #0xb]
    // 0xa7ee0c: DecompressPointer r1
    //     0xa7ee0c: add             x1, x1, HEAP, lsl #32
    // 0xa7ee10: tbnz            w1, #4, #0xa7ee30
    // 0xa7ee14: ldur            x0, [fp, #-0x10]
    // 0xa7ee18: LoadField: r1 = r0->field_13
    //     0xa7ee18: ldur            w1, [x0, #0x13]
    // 0xa7ee1c: DecompressPointer r1
    //     0xa7ee1c: add             x1, x1, HEAP, lsl #32
    // 0xa7ee20: r16 = Instance_SelectionChangedCause
    //     0xa7ee20: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ee24: stp             x16, x1, [SP]
    // 0xa7ee28: r0 = cutSelection()
    //     0xa7ee28: bl              #0x69e44c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutSelection
    // 0xa7ee2c: b               #0xa7ee48
    // 0xa7ee30: ldur            x0, [fp, #-0x10]
    // 0xa7ee34: LoadField: r1 = r0->field_13
    //     0xa7ee34: ldur            w1, [x0, #0x13]
    // 0xa7ee38: DecompressPointer r1
    //     0xa7ee38: add             x1, x1, HEAP, lsl #32
    // 0xa7ee3c: r16 = Instance_SelectionChangedCause
    //     0xa7ee3c: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ee40: stp             x16, x1, [SP]
    // 0xa7ee44: r0 = copySelection()
    //     0xa7ee44: bl              #0x69e188  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0xa7ee48: r0 = Null
    //     0xa7ee48: mov             x0, NULL
    // 0xa7ee4c: LeaveFrame
    //     0xa7ee4c: mov             SP, fp
    //     0xa7ee50: ldp             fp, lr, [SP], #0x10
    // 0xa7ee54: ret
    //     0xa7ee54: ret             
    // 0xa7ee58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7ee58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7ee5c: b               #0xa7edcc
  }
  get _ isActionEnabled(/* No info */) {
    // ** addr: 0xb19d84, size: 0x88
    // 0xb19d84: EnterFrame
    //     0xb19d84: stp             fp, lr, [SP, #-0x10]!
    //     0xb19d88: mov             fp, SP
    // 0xb19d8c: ldr             x1, [fp, #0x10]
    // 0xb19d90: LoadField: r2 = r1->field_13
    //     0xb19d90: ldur            w2, [x1, #0x13]
    // 0xb19d94: DecompressPointer r2
    //     0xb19d94: add             x2, x2, HEAP, lsl #32
    // 0xb19d98: LoadField: r1 = r2->field_b
    //     0xb19d98: ldur            w1, [x2, #0xb]
    // 0xb19d9c: DecompressPointer r1
    //     0xb19d9c: add             x1, x1, HEAP, lsl #32
    // 0xb19da0: cmp             w1, NULL
    // 0xb19da4: b.eq            #0xb19e08
    // 0xb19da8: LoadField: r2 = r1->field_b
    //     0xb19da8: ldur            w2, [x1, #0xb]
    // 0xb19dac: DecompressPointer r2
    //     0xb19dac: add             x2, x2, HEAP, lsl #32
    // 0xb19db0: LoadField: r1 = r2->field_27
    //     0xb19db0: ldur            w1, [x2, #0x27]
    // 0xb19db4: DecompressPointer r1
    //     0xb19db4: add             x1, x1, HEAP, lsl #32
    // 0xb19db8: LoadField: r2 = r1->field_b
    //     0xb19db8: ldur            w2, [x1, #0xb]
    // 0xb19dbc: DecompressPointer r2
    //     0xb19dbc: add             x2, x2, HEAP, lsl #32
    // 0xb19dc0: LoadField: r3 = r2->field_7
    //     0xb19dc0: ldur            x3, [x2, #7]
    // 0xb19dc4: tbnz            x3, #0x3f, #0xb19df8
    // 0xb19dc8: LoadField: r3 = r2->field_f
    //     0xb19dc8: ldur            x3, [x2, #0xf]
    // 0xb19dcc: tbnz            x3, #0x3f, #0xb19df8
    // 0xb19dd0: LoadField: r2 = r1->field_b
    //     0xb19dd0: ldur            w2, [x1, #0xb]
    // 0xb19dd4: DecompressPointer r2
    //     0xb19dd4: add             x2, x2, HEAP, lsl #32
    // 0xb19dd8: LoadField: r1 = r2->field_7
    //     0xb19dd8: ldur            x1, [x2, #7]
    // 0xb19ddc: LoadField: r3 = r2->field_f
    //     0xb19ddc: ldur            x3, [x2, #0xf]
    // 0xb19de0: cmp             x1, x3
    // 0xb19de4: r16 = true
    //     0xb19de4: add             x16, NULL, #0x20  ; true
    // 0xb19de8: r17 = false
    //     0xb19de8: add             x17, NULL, #0x30  ; false
    // 0xb19dec: csel            x2, x16, x17, ne
    // 0xb19df0: mov             x0, x2
    // 0xb19df4: b               #0xb19dfc
    // 0xb19df8: r0 = false
    //     0xb19df8: add             x0, NULL, #0x30  ; false
    // 0xb19dfc: LeaveFrame
    //     0xb19dfc: mov             SP, fp
    //     0xb19e00: ldp             fp, lr, [SP], #0x10
    // 0xb19e04: ret
    //     0xb19e04: ret             
    // 0xb19e08: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb19e08: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 2723, size: 0x18, field offset: 0x14
class _SelectAllAction extends ContextAction<dynamic> {

  _ invoke(/* No info */) {
    // ** addr: 0xa7ebec, size: 0x1a0
    // 0xa7ebec: EnterFrame
    //     0xa7ebec: stp             fp, lr, [SP, #-0x10]!
    //     0xa7ebf0: mov             fp, SP
    // 0xa7ebf4: AllocStack(0x38)
    //     0xa7ebf4: sub             SP, SP, #0x38
    // 0xa7ebf8: SetupParameters(_SelectAllAction this /* r3, fp-0x10 */, dynamic _ /* r1 */, [dynamic _ = Null /* r4, fp-0x8 */])
    //     0xa7ebf8: mov             x0, x4
    //     0xa7ebfc: ldur            w1, [x0, #0x13]
    //     0xa7ec00: add             x1, x1, HEAP, lsl #32
    //     0xa7ec04: sub             x0, x1, #4
    //     0xa7ec08: add             x3, fp, w0, sxtw #2
    //     0xa7ec0c: ldr             x3, [x3, #0x18]
    //     0xa7ec10: stur            x3, [fp, #-0x10]
    //     0xa7ec14: add             x1, fp, w0, sxtw #2
    //     0xa7ec18: ldr             x1, [x1, #0x10]
    //     0xa7ec1c: cmp             w0, #2
    //     0xa7ec20: b.lt            #0xa7ec34
    //     0xa7ec24: add             x2, fp, w0, sxtw #2
    //     0xa7ec28: ldr             x2, [x2, #8]
    //     0xa7ec2c: mov             x4, x2
    //     0xa7ec30: b               #0xa7ec38
    //     0xa7ec34: mov             x4, NULL
    //     0xa7ec38: stur            x4, [fp, #-8]
    // 0xa7ec3c: CheckStackOverflow
    //     0xa7ec3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7ec40: cmp             SP, x16
    //     0xa7ec44: b.ls            #0xa7ed7c
    // 0xa7ec48: mov             x0, x1
    // 0xa7ec4c: r2 = Null
    //     0xa7ec4c: mov             x2, NULL
    // 0xa7ec50: r1 = Null
    //     0xa7ec50: mov             x1, NULL
    // 0xa7ec54: r4 = 59
    //     0xa7ec54: movz            x4, #0x3b
    // 0xa7ec58: branchIfSmi(r0, 0xa7ec64)
    //     0xa7ec58: tbz             w0, #0, #0xa7ec64
    // 0xa7ec5c: r4 = LoadClassIdInstr(r0)
    //     0xa7ec5c: ldur            x4, [x0, #-1]
    //     0xa7ec60: ubfx            x4, x4, #0xc, #0x14
    // 0xa7ec64: cmp             x4, #0xa71
    // 0xa7ec68: b.eq            #0xa7ec80
    // 0xa7ec6c: r8 = SelectAllTextIntent
    //     0xa7ec6c: add             x8, PP, #0x41, lsl #12  ; [pp+0x41378] Type: SelectAllTextIntent
    //     0xa7ec70: ldr             x8, [x8, #0x378]
    // 0xa7ec74: r3 = Null
    //     0xa7ec74: add             x3, PP, #0x47, lsl #12  ; [pp+0x472e8] Null
    //     0xa7ec78: ldr             x3, [x3, #0x2e8]
    // 0xa7ec7c: r0 = SelectAllTextIntent()
    //     0xa7ec7c: bl              #0x95d0b0  ; IsType_SelectAllTextIntent_Stub
    // 0xa7ec80: ldur            x0, [fp, #-8]
    // 0xa7ec84: cmp             w0, NULL
    // 0xa7ec88: b.eq            #0xa7ed84
    // 0xa7ec8c: ldur            x1, [fp, #-0x10]
    // 0xa7ec90: LoadField: r2 = r1->field_13
    //     0xa7ec90: ldur            w2, [x1, #0x13]
    // 0xa7ec94: DecompressPointer r2
    //     0xa7ec94: add             x2, x2, HEAP, lsl #32
    // 0xa7ec98: LoadField: r1 = r2->field_b
    //     0xa7ec98: ldur            w1, [x2, #0xb]
    // 0xa7ec9c: DecompressPointer r1
    //     0xa7ec9c: add             x1, x1, HEAP, lsl #32
    // 0xa7eca0: cmp             w1, NULL
    // 0xa7eca4: b.eq            #0xa7ed88
    // 0xa7eca8: LoadField: r2 = r1->field_b
    //     0xa7eca8: ldur            w2, [x1, #0xb]
    // 0xa7ecac: DecompressPointer r2
    //     0xa7ecac: add             x2, x2, HEAP, lsl #32
    // 0xa7ecb0: LoadField: r1 = r2->field_27
    //     0xa7ecb0: ldur            w1, [x2, #0x27]
    // 0xa7ecb4: DecompressPointer r1
    //     0xa7ecb4: add             x1, x1, HEAP, lsl #32
    // 0xa7ecb8: stur            x1, [fp, #-0x18]
    // 0xa7ecbc: LoadField: r2 = r1->field_7
    //     0xa7ecbc: ldur            w2, [x1, #7]
    // 0xa7ecc0: DecompressPointer r2
    //     0xa7ecc0: add             x2, x2, HEAP, lsl #32
    // 0xa7ecc4: LoadField: r3 = r2->field_7
    //     0xa7ecc4: ldur            w3, [x2, #7]
    // 0xa7ecc8: DecompressPointer r3
    //     0xa7ecc8: add             x3, x3, HEAP, lsl #32
    // 0xa7eccc: stur            x3, [fp, #-0x10]
    // 0xa7ecd0: r0 = TextSelection()
    //     0xa7ecd0: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7ecd4: mov             x1, x0
    // 0xa7ecd8: r0 = 0
    //     0xa7ecd8: movz            x0, #0
    // 0xa7ecdc: stur            x1, [fp, #-0x20]
    // 0xa7ece0: ArrayStore: r1[0] = r0  ; List_8
    //     0xa7ece0: stur            x0, [x1, #0x17]
    // 0xa7ece4: ldur            x0, [fp, #-0x10]
    // 0xa7ece8: r2 = LoadInt32Instr(r0)
    //     0xa7ece8: sbfx            x2, x0, #1, #0x1f
    // 0xa7ecec: StoreField: r1->field_1f = r2
    //     0xa7ecec: stur            x2, [x1, #0x1f]
    // 0xa7ecf0: r0 = Instance_TextAffinity
    //     0xa7ecf0: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7ecf4: StoreField: r1->field_27 = r0
    //     0xa7ecf4: stur            w0, [x1, #0x27]
    // 0xa7ecf8: r0 = false
    //     0xa7ecf8: add             x0, NULL, #0x30  ; false
    // 0xa7ecfc: StoreField: r1->field_2b = r0
    //     0xa7ecfc: stur            w0, [x1, #0x2b]
    // 0xa7ed00: cmp             x2, #0
    // 0xa7ed04: r16 = true
    //     0xa7ed04: add             x16, NULL, #0x20  ; true
    // 0xa7ed08: r17 = false
    //     0xa7ed08: add             x17, NULL, #0x30  ; false
    // 0xa7ed0c: csel            x0, x16, x17, gt
    // 0xa7ed10: tbnz            w0, #4, #0xa7ed1c
    // 0xa7ed14: r3 = 0
    //     0xa7ed14: movz            x3, #0
    // 0xa7ed18: b               #0xa7ed20
    // 0xa7ed1c: mov             x3, x2
    // 0xa7ed20: tbz             w0, #4, #0xa7ed28
    // 0xa7ed24: r2 = 0
    //     0xa7ed24: movz            x2, #0
    // 0xa7ed28: ldur            x0, [fp, #-0x18]
    // 0xa7ed2c: StoreField: r1->field_7 = r3
    //     0xa7ed2c: stur            x3, [x1, #7]
    // 0xa7ed30: StoreField: r1->field_f = r2
    //     0xa7ed30: stur            x2, [x1, #0xf]
    // 0xa7ed34: r0 = UpdateSelectionIntent()
    //     0xa7ed34: bl              #0xa7d374  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0xa7ed38: mov             x1, x0
    // 0xa7ed3c: ldur            x0, [fp, #-0x18]
    // 0xa7ed40: StoreField: r1->field_7 = r0
    //     0xa7ed40: stur            w0, [x1, #7]
    // 0xa7ed44: ldur            x0, [fp, #-0x20]
    // 0xa7ed48: StoreField: r1->field_b = r0
    //     0xa7ed48: stur            w0, [x1, #0xb]
    // 0xa7ed4c: r0 = Instance_SelectionChangedCause
    //     0xa7ed4c: ldr             x0, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ed50: StoreField: r1->field_f = r0
    //     0xa7ed50: stur            w0, [x1, #0xf]
    // 0xa7ed54: r16 = <UpdateSelectionIntent>
    //     0xa7ed54: add             x16, PP, #0x2b, lsl #12  ; [pp+0x2bc18] TypeArguments: <UpdateSelectionIntent>
    //     0xa7ed58: ldr             x16, [x16, #0xc18]
    // 0xa7ed5c: ldur            lr, [fp, #-8]
    // 0xa7ed60: stp             lr, x16, [SP, #8]
    // 0xa7ed64: str             x1, [SP]
    // 0xa7ed68: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7ed68: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7ed6c: r0 = invoke()
    //     0xa7ed6c: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7ed70: LeaveFrame
    //     0xa7ed70: mov             SP, fp
    //     0xa7ed74: ldp             fp, lr, [SP], #0x10
    // 0xa7ed78: ret
    //     0xa7ed78: ret             
    // 0xa7ed7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7ed7c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7ed80: b               #0xa7ec48
    // 0xa7ed84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ed84: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7ed88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ed88: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isActionEnabled(/* No info */) {
    // ** addr: 0xb19d4c, size: 0x38
    // 0xb19d4c: EnterFrame
    //     0xb19d4c: stp             fp, lr, [SP, #-0x10]!
    //     0xb19d50: mov             fp, SP
    // 0xb19d54: ldr             x1, [fp, #0x10]
    // 0xb19d58: LoadField: r2 = r1->field_13
    //     0xb19d58: ldur            w2, [x1, #0x13]
    // 0xb19d5c: DecompressPointer r2
    //     0xb19d5c: add             x2, x2, HEAP, lsl #32
    // 0xb19d60: LoadField: r1 = r2->field_b
    //     0xb19d60: ldur            w1, [x2, #0xb]
    // 0xb19d64: DecompressPointer r1
    //     0xb19d64: add             x1, x1, HEAP, lsl #32
    // 0xb19d68: cmp             w1, NULL
    // 0xb19d6c: b.eq            #0xb19d80
    // 0xb19d70: r0 = true
    //     0xb19d70: add             x0, NULL, #0x20  ; true
    // 0xb19d74: LeaveFrame
    //     0xb19d74: mov             SP, fp
    //     0xb19d78: ldp             fp, lr, [SP], #0x10
    // 0xb19d7c: ret
    //     0xb19d7c: ret             
    // 0xb19d80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb19d80: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 2724, size: 0x20, field offset: 0x14
class _UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> extends ContextAction<X0 bound DirectionalCaretMovementIntent> {

  _ stopCurrentVerticalRunIfSelectionChanges(/* No info */) {
    // ** addr: 0x69e9c4, size: 0xd0
    // 0x69e9c4: EnterFrame
    //     0x69e9c4: stp             fp, lr, [SP, #-0x10]!
    //     0x69e9c8: mov             fp, SP
    // 0x69e9cc: ldr             x1, [fp, #0x10]
    // 0x69e9d0: LoadField: r2 = r1->field_1b
    //     0x69e9d0: ldur            w2, [x1, #0x1b]
    // 0x69e9d4: DecompressPointer r2
    //     0x69e9d4: add             x2, x2, HEAP, lsl #32
    // 0x69e9d8: cmp             w2, NULL
    // 0x69e9dc: b.ne            #0x69e9f0
    // 0x69e9e0: r0 = Null
    //     0x69e9e0: mov             x0, NULL
    // 0x69e9e4: LeaveFrame
    //     0x69e9e4: mov             SP, fp
    //     0x69e9e8: ldp             fp, lr, [SP], #0x10
    // 0x69e9ec: ret
    //     0x69e9ec: ret             
    // 0x69e9f0: LoadField: r3 = r1->field_13
    //     0x69e9f0: ldur            w3, [x1, #0x13]
    // 0x69e9f4: DecompressPointer r3
    //     0x69e9f4: add             x3, x3, HEAP, lsl #32
    // 0x69e9f8: LoadField: r4 = r3->field_b
    //     0x69e9f8: ldur            w4, [x3, #0xb]
    // 0x69e9fc: DecompressPointer r4
    //     0x69e9fc: add             x4, x4, HEAP, lsl #32
    // 0x69ea00: cmp             w4, NULL
    // 0x69ea04: b.eq            #0x69ea90
    // 0x69ea08: LoadField: r3 = r4->field_b
    //     0x69ea08: ldur            w3, [x4, #0xb]
    // 0x69ea0c: DecompressPointer r3
    //     0x69ea0c: add             x3, x3, HEAP, lsl #32
    // 0x69ea10: LoadField: r4 = r3->field_27
    //     0x69ea10: ldur            w4, [x3, #0x27]
    // 0x69ea14: DecompressPointer r4
    //     0x69ea14: add             x4, x4, HEAP, lsl #32
    // 0x69ea18: LoadField: r3 = r4->field_b
    //     0x69ea18: ldur            w3, [x4, #0xb]
    // 0x69ea1c: DecompressPointer r3
    //     0x69ea1c: add             x3, x3, HEAP, lsl #32
    // 0x69ea20: mov             x0, x3
    // 0x69ea24: StoreField: r1->field_1b = r0
    //     0x69ea24: stur            w0, [x1, #0x1b]
    //     0x69ea28: ldurb           w16, [x1, #-1]
    //     0x69ea2c: ldurb           w17, [x0, #-1]
    //     0x69ea30: and             x16, x17, x16, lsr #2
    //     0x69ea34: tst             x16, HEAP, lsr #32
    //     0x69ea38: b.eq            #0x69ea40
    //     0x69ea3c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x69ea40: LoadField: r4 = r3->field_7
    //     0x69ea40: ldur            x4, [x3, #7]
    // 0x69ea44: tbnz            x4, #0x3f, #0x69ea78
    // 0x69ea48: LoadField: r5 = r3->field_f
    //     0x69ea48: ldur            x5, [x3, #0xf]
    // 0x69ea4c: tbnz            x5, #0x3f, #0x69ea78
    // 0x69ea50: cmp             x4, x5
    // 0x69ea54: b.ne            #0x69ea78
    // 0x69ea58: ArrayLoad: r4 = r3[0]  ; List_8
    //     0x69ea58: ldur            x4, [x3, #0x17]
    // 0x69ea5c: ArrayLoad: r5 = r2[0]  ; List_8
    //     0x69ea5c: ldur            x5, [x2, #0x17]
    // 0x69ea60: cmp             x4, x5
    // 0x69ea64: b.ne            #0x69ea78
    // 0x69ea68: LoadField: r4 = r3->field_1f
    //     0x69ea68: ldur            x4, [x3, #0x1f]
    // 0x69ea6c: LoadField: r3 = r2->field_1f
    //     0x69ea6c: ldur            x3, [x2, #0x1f]
    // 0x69ea70: cmp             x4, x3
    // 0x69ea74: b.eq            #0x69ea80
    // 0x69ea78: ArrayStore: r1[0] = rNULL  ; List_4
    //     0x69ea78: stur            NULL, [x1, #0x17]
    // 0x69ea7c: StoreField: r1->field_1b = rNULL
    //     0x69ea7c: stur            NULL, [x1, #0x1b]
    // 0x69ea80: r0 = Null
    //     0x69ea80: mov             x0, NULL
    // 0x69ea84: LeaveFrame
    //     0x69ea84: mov             SP, fp
    //     0x69ea88: ldp             fp, lr, [SP], #0x10
    // 0x69ea8c: ret
    //     0x69ea8c: ret             
    // 0x69ea90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69ea90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ invoke(/* No info */) {
    // ** addr: 0xa7d380, size: 0x46c
    // 0xa7d380: EnterFrame
    //     0xa7d380: stp             fp, lr, [SP, #-0x10]!
    //     0xa7d384: mov             fp, SP
    // 0xa7d388: AllocStack(0x70)
    //     0xa7d388: sub             SP, SP, #0x70
    // 0xa7d38c: SetupParameters(_UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0xa7d38c: mov             x0, x4
    //     0xa7d390: ldur            w1, [x0, #0x13]
    //     0xa7d394: add             x1, x1, HEAP, lsl #32
    //     0xa7d398: sub             x0, x1, #4
    //     0xa7d39c: add             x3, fp, w0, sxtw #2
    //     0xa7d3a0: ldr             x3, [x3, #0x18]
    //     0xa7d3a4: stur            x3, [fp, #-0x18]
    //     0xa7d3a8: add             x4, fp, w0, sxtw #2
    //     0xa7d3ac: ldr             x4, [x4, #0x10]
    //     0xa7d3b0: stur            x4, [fp, #-0x10]
    //     0xa7d3b4: cmp             w0, #2
    //     0xa7d3b8: b.lt            #0xa7d3cc
    //     0xa7d3bc: add             x1, fp, w0, sxtw #2
    //     0xa7d3c0: ldr             x1, [x1, #8]
    //     0xa7d3c4: mov             x5, x1
    //     0xa7d3c8: b               #0xa7d3d0
    //     0xa7d3cc: mov             x5, NULL
    //     0xa7d3d0: stur            x5, [fp, #-8]
    // 0xa7d3d4: CheckStackOverflow
    //     0xa7d3d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7d3d8: cmp             SP, x16
    //     0xa7d3dc: b.ls            #0xa7d7d4
    // 0xa7d3e0: LoadField: r2 = r3->field_7
    //     0xa7d3e0: ldur            w2, [x3, #7]
    // 0xa7d3e4: DecompressPointer r2
    //     0xa7d3e4: add             x2, x2, HEAP, lsl #32
    // 0xa7d3e8: mov             x0, x4
    // 0xa7d3ec: r1 = Null
    //     0xa7d3ec: mov             x1, NULL
    // 0xa7d3f0: cmp             w2, NULL
    // 0xa7d3f4: b.eq            #0xa7d418
    // 0xa7d3f8: ArrayLoad: r4 = r2[0]  ; List_4
    //     0xa7d3f8: ldur            w4, [x2, #0x17]
    // 0xa7d3fc: DecompressPointer r4
    //     0xa7d3fc: add             x4, x4, HEAP, lsl #32
    // 0xa7d400: r8 = X0 bound DirectionalCaretMovementIntent
    //     0xa7d400: add             x8, PP, #0x2b, lsl #12  ; [pp+0x2bbf8] TypeParameter: X0 bound DirectionalCaretMovementIntent
    //     0xa7d404: ldr             x8, [x8, #0xbf8]
    // 0xa7d408: LoadField: r9 = r4->field_7
    //     0xa7d408: ldur            x9, [x4, #7]
    // 0xa7d40c: r3 = Null
    //     0xa7d40c: add             x3, PP, #0x2b, lsl #12  ; [pp+0x2bc00] Null
    //     0xa7d410: ldr             x3, [x3, #0xc00]
    // 0xa7d414: blr             x9
    // 0xa7d418: ldur            x0, [fp, #-0x10]
    // 0xa7d41c: LoadField: r1 = r0->field_b
    //     0xa7d41c: ldur            w1, [x0, #0xb]
    // 0xa7d420: DecompressPointer r1
    //     0xa7d420: add             x1, x1, HEAP, lsl #32
    // 0xa7d424: tbnz            w1, #4, #0xa7d434
    // 0xa7d428: ldur            x1, [fp, #-0x18]
    // 0xa7d42c: r2 = true
    //     0xa7d42c: add             x2, NULL, #0x20  ; true
    // 0xa7d430: b               #0xa7d454
    // 0xa7d434: ldur            x1, [fp, #-0x18]
    // 0xa7d438: LoadField: r2 = r1->field_13
    //     0xa7d438: ldur            w2, [x1, #0x13]
    // 0xa7d43c: DecompressPointer r2
    //     0xa7d43c: add             x2, x2, HEAP, lsl #32
    // 0xa7d440: LoadField: r3 = r2->field_b
    //     0xa7d440: ldur            w3, [x2, #0xb]
    // 0xa7d444: DecompressPointer r3
    //     0xa7d444: add             x3, x3, HEAP, lsl #32
    // 0xa7d448: cmp             w3, NULL
    // 0xa7d44c: b.eq            #0xa7d7dc
    // 0xa7d450: r2 = false
    //     0xa7d450: add             x2, NULL, #0x30  ; false
    // 0xa7d454: stur            x2, [fp, #-0x28]
    // 0xa7d458: LoadField: r3 = r1->field_13
    //     0xa7d458: ldur            w3, [x1, #0x13]
    // 0xa7d45c: DecompressPointer r3
    //     0xa7d45c: add             x3, x3, HEAP, lsl #32
    // 0xa7d460: stur            x3, [fp, #-0x20]
    // 0xa7d464: str             x3, [SP]
    // 0xa7d468: r0 = _textEditingValueforTextLayoutMetrics()
    //     0xa7d468: bl              #0xa7eb3c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_textEditingValueforTextLayoutMetrics
    // 0xa7d46c: stur            x0, [fp, #-0x38]
    // 0xa7d470: LoadField: r1 = r0->field_b
    //     0xa7d470: ldur            w1, [x0, #0xb]
    // 0xa7d474: DecompressPointer r1
    //     0xa7d474: add             x1, x1, HEAP, lsl #32
    // 0xa7d478: stur            x1, [fp, #-0x30]
    // 0xa7d47c: LoadField: r2 = r1->field_7
    //     0xa7d47c: ldur            x2, [x1, #7]
    // 0xa7d480: tbnz            x2, #0x3f, #0xa7d7c4
    // 0xa7d484: LoadField: r2 = r1->field_f
    //     0xa7d484: ldur            x2, [x1, #0xf]
    // 0xa7d488: tbnz            x2, #0x3f, #0xa7d7c4
    // 0xa7d48c: ldur            x2, [fp, #-0x18]
    // 0xa7d490: ArrayLoad: r3 = r2[0]  ; List_4
    //     0xa7d490: ldur            w3, [x2, #0x17]
    // 0xa7d494: DecompressPointer r3
    //     0xa7d494: add             x3, x3, HEAP, lsl #32
    // 0xa7d498: cmp             w3, NULL
    // 0xa7d49c: b.ne            #0xa7d4a8
    // 0xa7d4a0: mov             x0, x2
    // 0xa7d4a4: b               #0xa7d4c8
    // 0xa7d4a8: str             x3, [SP]
    // 0xa7d4ac: r0 = isValid()
    //     0xa7d4ac: bl              #0xa7eab4  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::isValid
    // 0xa7d4b0: tbz             w0, #4, #0xa7d4c4
    // 0xa7d4b4: ldur            x0, [fp, #-0x18]
    // 0xa7d4b8: ArrayStore: r0[0] = rNULL  ; List_4
    //     0xa7d4b8: stur            NULL, [x0, #0x17]
    // 0xa7d4bc: StoreField: r0->field_1b = rNULL
    //     0xa7d4bc: stur            NULL, [x0, #0x1b]
    // 0xa7d4c0: b               #0xa7d4c8
    // 0xa7d4c4: ldur            x0, [fp, #-0x18]
    // 0xa7d4c8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa7d4c8: ldur            w1, [x0, #0x17]
    // 0xa7d4cc: DecompressPointer r1
    //     0xa7d4cc: add             x1, x1, HEAP, lsl #32
    // 0xa7d4d0: cmp             w1, NULL
    // 0xa7d4d4: b.ne            #0xa7d520
    // 0xa7d4d8: ldur            x1, [fp, #-0x20]
    // 0xa7d4dc: LoadField: r0 = r1->field_a7
    //     0xa7d4dc: ldur            w0, [x1, #0xa7]
    // 0xa7d4e0: DecompressPointer r0
    //     0xa7d4e0: add             x0, x0, HEAP, lsl #32
    // 0xa7d4e4: r16 = Sentinel
    //     0xa7d4e4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa7d4e8: cmp             w0, w16
    // 0xa7d4ec: b.ne            #0xa7d4f8
    // 0xa7d4f0: r2 = renderEditable
    //     0xa7d4f0: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xa7d4f4: r0 = InitLateFinalInstanceField()
    //     0xa7d4f4: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xa7d4f8: stur            x0, [fp, #-0x40]
    // 0xa7d4fc: LoadField: r1 = r0->field_e3
    //     0xa7d4fc: ldur            w1, [x0, #0xe3]
    // 0xa7d500: DecompressPointer r1
    //     0xa7d500: add             x1, x1, HEAP, lsl #32
    // 0xa7d504: str             x1, [SP]
    // 0xa7d508: r0 = extent()
    //     0xa7d508: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0xa7d50c: ldur            x16, [fp, #-0x40]
    // 0xa7d510: stp             x0, x16, [SP]
    // 0xa7d514: r0 = startVerticalCaretMovement()
    //     0xa7d514: bl              #0xa7db74  ; [package:flutter/src/rendering/editable.dart] RenderEditable::startVerticalCaretMovement
    // 0xa7d518: mov             x2, x0
    // 0xa7d51c: b               #0xa7d524
    // 0xa7d520: mov             x2, x1
    // 0xa7d524: ldur            x0, [fp, #-0x10]
    // 0xa7d528: stur            x2, [fp, #-0x48]
    // 0xa7d52c: r1 = LoadClassIdInstr(r0)
    //     0xa7d52c: ldur            x1, [x0, #-1]
    //     0xa7d530: ubfx            x1, x1, #0xc, #0x14
    // 0xa7d534: lsl             x1, x1, #1
    // 0xa7d538: r17 = 5362
    //     0xa7d538: movz            x17, #0x14f2
    // 0xa7d53c: cmp             w1, w17
    // 0xa7d540: b.ne            #0xa7d5c0
    // 0xa7d544: LoadField: r3 = r0->field_7
    //     0xa7d544: ldur            w3, [x0, #7]
    // 0xa7d548: DecompressPointer r3
    //     0xa7d548: add             x3, x3, HEAP, lsl #32
    // 0xa7d54c: stur            x3, [fp, #-0x40]
    // 0xa7d550: tbnz            w3, #4, #0xa7d55c
    // 0xa7d554: d0 = 1.000000
    //     0xa7d554: fmov            d0, #1.00000000
    // 0xa7d558: b               #0xa7d568
    // 0xa7d55c: d0 = 1.000000
    //     0xa7d55c: fmov            d0, #1.00000000
    // 0xa7d560: fneg            d1, d0
    // 0xa7d564: mov             v0.16b, v1.16b
    // 0xa7d568: ldur            x1, [fp, #-0x20]
    // 0xa7d56c: stur            d0, [fp, #-0x58]
    // 0xa7d570: LoadField: r0 = r1->field_a7
    //     0xa7d570: ldur            w0, [x1, #0xa7]
    // 0xa7d574: DecompressPointer r0
    //     0xa7d574: add             x0, x0, HEAP, lsl #32
    // 0xa7d578: r16 = Sentinel
    //     0xa7d578: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa7d57c: cmp             w0, w16
    // 0xa7d580: b.ne            #0xa7d58c
    // 0xa7d584: r2 = renderEditable
    //     0xa7d584: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xa7d588: r0 = InitLateFinalInstanceField()
    //     0xa7d588: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xa7d58c: str             x0, [SP]
    // 0xa7d590: r0 = size()
    //     0xa7d590: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0xa7d594: LoadField: d0 = r0->field_f
    //     0xa7d594: ldur            d0, [x0, #0xf]
    // 0xa7d598: ldur            d1, [fp, #-0x58]
    // 0xa7d59c: fmul            d2, d1, d0
    // 0xa7d5a0: ldur            x16, [fp, #-0x48]
    // 0xa7d5a4: str             x16, [SP, #8]
    // 0xa7d5a8: str             d2, [SP]
    // 0xa7d5ac: r0 = moveByOffset()
    //     0xa7d5ac: bl              #0xa7d9e8  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::moveByOffset
    // 0xa7d5b0: tbz             w0, #4, #0xa7d5f8
    // 0xa7d5b4: ldur            x1, [fp, #-0x40]
    // 0xa7d5b8: ldur            x0, [fp, #-0x48]
    // 0xa7d5bc: b               #0xa7d610
    // 0xa7d5c0: LoadField: r1 = r0->field_7
    //     0xa7d5c0: ldur            w1, [x0, #7]
    // 0xa7d5c4: DecompressPointer r1
    //     0xa7d5c4: add             x1, x1, HEAP, lsl #32
    // 0xa7d5c8: stur            x1, [fp, #-0x40]
    // 0xa7d5cc: tbnz            w1, #4, #0xa7d5e8
    // 0xa7d5d0: ldur            x16, [fp, #-0x48]
    // 0xa7d5d4: str             x16, [SP]
    // 0xa7d5d8: r0 = moveNext()
    //     0xa7d5d8: bl              #0xbbc7f0  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::moveNext
    // 0xa7d5dc: tbz             w0, #4, #0xa7d5f8
    // 0xa7d5e0: ldur            x0, [fp, #-0x48]
    // 0xa7d5e4: b               #0xa7d60c
    // 0xa7d5e8: ldur            x16, [fp, #-0x48]
    // 0xa7d5ec: str             x16, [SP]
    // 0xa7d5f0: r0 = movePrevious()
    //     0xa7d5f0: bl              #0xa7d7ec  ; [package:flutter/src/rendering/editable.dart] VerticalCaretMovementRun::movePrevious
    // 0xa7d5f4: tbnz            w0, #4, #0xa7d608
    // 0xa7d5f8: ldur            x0, [fp, #-0x48]
    // 0xa7d5fc: LoadField: r1 = r0->field_13
    //     0xa7d5fc: ldur            w1, [x0, #0x13]
    // 0xa7d600: DecompressPointer r1
    //     0xa7d600: add             x1, x1, HEAP, lsl #32
    // 0xa7d604: b               #0xa7d67c
    // 0xa7d608: ldur            x0, [fp, #-0x48]
    // 0xa7d60c: ldur            x1, [fp, #-0x40]
    // 0xa7d610: tbnz            w1, #4, #0xa7d670
    // 0xa7d614: ldur            x1, [fp, #-0x20]
    // 0xa7d618: LoadField: r2 = r1->field_b
    //     0xa7d618: ldur            w2, [x1, #0xb]
    // 0xa7d61c: DecompressPointer r2
    //     0xa7d61c: add             x2, x2, HEAP, lsl #32
    // 0xa7d620: cmp             w2, NULL
    // 0xa7d624: b.eq            #0xa7d7e0
    // 0xa7d628: LoadField: r3 = r2->field_b
    //     0xa7d628: ldur            w3, [x2, #0xb]
    // 0xa7d62c: DecompressPointer r3
    //     0xa7d62c: add             x3, x3, HEAP, lsl #32
    // 0xa7d630: LoadField: r2 = r3->field_27
    //     0xa7d630: ldur            w2, [x3, #0x27]
    // 0xa7d634: DecompressPointer r2
    //     0xa7d634: add             x2, x2, HEAP, lsl #32
    // 0xa7d638: LoadField: r3 = r2->field_7
    //     0xa7d638: ldur            w3, [x2, #7]
    // 0xa7d63c: DecompressPointer r3
    //     0xa7d63c: add             x3, x3, HEAP, lsl #32
    // 0xa7d640: LoadField: r2 = r3->field_7
    //     0xa7d640: ldur            w2, [x3, #7]
    // 0xa7d644: DecompressPointer r2
    //     0xa7d644: add             x2, x2, HEAP, lsl #32
    // 0xa7d648: r3 = LoadInt32Instr(r2)
    //     0xa7d648: sbfx            x3, x2, #1, #0x1f
    // 0xa7d64c: stur            x3, [fp, #-0x50]
    // 0xa7d650: r0 = TextPosition()
    //     0xa7d650: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xa7d654: mov             x1, x0
    // 0xa7d658: ldur            x0, [fp, #-0x50]
    // 0xa7d65c: StoreField: r1->field_7 = r0
    //     0xa7d65c: stur            x0, [x1, #7]
    // 0xa7d660: r0 = Instance_TextAffinity
    //     0xa7d660: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7d664: StoreField: r1->field_f = r0
    //     0xa7d664: stur            w0, [x1, #0xf]
    // 0xa7d668: mov             x0, x1
    // 0xa7d66c: b               #0xa7d678
    // 0xa7d670: r0 = Instance_TextPosition
    //     0xa7d670: add             x0, PP, #0x2b, lsl #12  ; [pp+0x2bc10] Obj!TextPosition@c39f21
    //     0xa7d674: ldr             x0, [x0, #0xc10]
    // 0xa7d678: mov             x1, x0
    // 0xa7d67c: ldur            x0, [fp, #-0x28]
    // 0xa7d680: stur            x1, [fp, #-0x10]
    // 0xa7d684: tbnz            w0, #4, #0xa7d6cc
    // 0xa7d688: LoadField: r0 = r1->field_7
    //     0xa7d688: ldur            x0, [x1, #7]
    // 0xa7d68c: stur            x0, [fp, #-0x50]
    // 0xa7d690: r0 = TextSelection()
    //     0xa7d690: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7d694: mov             x1, x0
    // 0xa7d698: ldur            x0, [fp, #-0x50]
    // 0xa7d69c: ArrayStore: r1[0] = r0  ; List_8
    //     0xa7d69c: stur            x0, [x1, #0x17]
    // 0xa7d6a0: StoreField: r1->field_1f = r0
    //     0xa7d6a0: stur            x0, [x1, #0x1f]
    // 0xa7d6a4: ldur            x2, [fp, #-0x10]
    // 0xa7d6a8: LoadField: r3 = r2->field_f
    //     0xa7d6a8: ldur            w3, [x2, #0xf]
    // 0xa7d6ac: DecompressPointer r3
    //     0xa7d6ac: add             x3, x3, HEAP, lsl #32
    // 0xa7d6b0: StoreField: r1->field_27 = r3
    //     0xa7d6b0: stur            w3, [x1, #0x27]
    // 0xa7d6b4: r2 = false
    //     0xa7d6b4: add             x2, NULL, #0x30  ; false
    // 0xa7d6b8: StoreField: r1->field_2b = r2
    //     0xa7d6b8: stur            w2, [x1, #0x2b]
    // 0xa7d6bc: StoreField: r1->field_7 = r0
    //     0xa7d6bc: stur            x0, [x1, #7]
    // 0xa7d6c0: StoreField: r1->field_f = r0
    //     0xa7d6c0: stur            x0, [x1, #0xf]
    // 0xa7d6c4: mov             x3, x1
    // 0xa7d6c8: b               #0xa7d6e0
    // 0xa7d6cc: mov             x2, x1
    // 0xa7d6d0: ldur            x16, [fp, #-0x30]
    // 0xa7d6d4: stp             x2, x16, [SP]
    // 0xa7d6d8: r0 = extendTo()
    //     0xa7d6d8: bl              #0xa7ce40  ; [package:flutter/src/services/text_editing.dart] TextSelection::extendTo
    // 0xa7d6dc: mov             x3, x0
    // 0xa7d6e0: ldur            x2, [fp, #-8]
    // 0xa7d6e4: ldur            x0, [fp, #-0x20]
    // 0xa7d6e8: ldur            x1, [fp, #-0x38]
    // 0xa7d6ec: stur            x3, [fp, #-0x10]
    // 0xa7d6f0: cmp             w2, NULL
    // 0xa7d6f4: b.eq            #0xa7d7e4
    // 0xa7d6f8: r0 = UpdateSelectionIntent()
    //     0xa7d6f8: bl              #0xa7d374  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0xa7d6fc: mov             x1, x0
    // 0xa7d700: ldur            x0, [fp, #-0x38]
    // 0xa7d704: StoreField: r1->field_7 = r0
    //     0xa7d704: stur            w0, [x1, #7]
    // 0xa7d708: ldur            x0, [fp, #-0x10]
    // 0xa7d70c: StoreField: r1->field_b = r0
    //     0xa7d70c: stur            w0, [x1, #0xb]
    // 0xa7d710: r2 = Instance_SelectionChangedCause
    //     0xa7d710: ldr             x2, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7d714: StoreField: r1->field_f = r2
    //     0xa7d714: stur            w2, [x1, #0xf]
    // 0xa7d718: r16 = <UpdateSelectionIntent>
    //     0xa7d718: add             x16, PP, #0x2b, lsl #12  ; [pp+0x2bc18] TypeArguments: <UpdateSelectionIntent>
    //     0xa7d71c: ldr             x16, [x16, #0xc18]
    // 0xa7d720: ldur            lr, [fp, #-8]
    // 0xa7d724: stp             lr, x16, [SP, #8]
    // 0xa7d728: str             x1, [SP]
    // 0xa7d72c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7d72c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7d730: r0 = invoke()
    //     0xa7d730: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7d734: ldur            x0, [fp, #-0x20]
    // 0xa7d738: LoadField: r1 = r0->field_b
    //     0xa7d738: ldur            w1, [x0, #0xb]
    // 0xa7d73c: DecompressPointer r1
    //     0xa7d73c: add             x1, x1, HEAP, lsl #32
    // 0xa7d740: cmp             w1, NULL
    // 0xa7d744: b.eq            #0xa7d7e8
    // 0xa7d748: LoadField: r0 = r1->field_b
    //     0xa7d748: ldur            w0, [x1, #0xb]
    // 0xa7d74c: DecompressPointer r0
    //     0xa7d74c: add             x0, x0, HEAP, lsl #32
    // 0xa7d750: LoadField: r1 = r0->field_27
    //     0xa7d750: ldur            w1, [x0, #0x27]
    // 0xa7d754: DecompressPointer r1
    //     0xa7d754: add             x1, x1, HEAP, lsl #32
    // 0xa7d758: LoadField: r0 = r1->field_b
    //     0xa7d758: ldur            w0, [x1, #0xb]
    // 0xa7d75c: DecompressPointer r0
    //     0xa7d75c: add             x0, x0, HEAP, lsl #32
    // 0xa7d760: ldur            x16, [fp, #-0x10]
    // 0xa7d764: stp             x16, x0, [SP]
    // 0xa7d768: r0 = ==()
    //     0xa7d768: bl              #0xbb3e28  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0xa7d76c: tbnz            w0, #4, #0xa7d7b4
    // 0xa7d770: ldur            x1, [fp, #-0x18]
    // 0xa7d774: ldur            x0, [fp, #-0x48]
    // 0xa7d778: ArrayStore: r1[0] = r0  ; List_4
    //     0xa7d778: stur            w0, [x1, #0x17]
    //     0xa7d77c: ldurb           w16, [x1, #-1]
    //     0xa7d780: ldurb           w17, [x0, #-1]
    //     0xa7d784: and             x16, x17, x16, lsr #2
    //     0xa7d788: tst             x16, HEAP, lsr #32
    //     0xa7d78c: b.eq            #0xa7d794
    //     0xa7d790: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa7d794: ldur            x0, [fp, #-0x10]
    // 0xa7d798: StoreField: r1->field_1b = r0
    //     0xa7d798: stur            w0, [x1, #0x1b]
    //     0xa7d79c: ldurb           w16, [x1, #-1]
    //     0xa7d7a0: ldurb           w17, [x0, #-1]
    //     0xa7d7a4: and             x16, x17, x16, lsr #2
    //     0xa7d7a8: tst             x16, HEAP, lsr #32
    //     0xa7d7ac: b.eq            #0xa7d7b4
    //     0xa7d7b0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa7d7b4: r0 = Null
    //     0xa7d7b4: mov             x0, NULL
    // 0xa7d7b8: LeaveFrame
    //     0xa7d7b8: mov             SP, fp
    //     0xa7d7bc: ldp             fp, lr, [SP], #0x10
    // 0xa7d7c0: ret
    //     0xa7d7c0: ret             
    // 0xa7d7c4: r0 = Null
    //     0xa7d7c4: mov             x0, NULL
    // 0xa7d7c8: LeaveFrame
    //     0xa7d7c8: mov             SP, fp
    //     0xa7d7cc: ldp             fp, lr, [SP], #0x10
    // 0xa7d7d0: ret
    //     0xa7d7d0: ret             
    // 0xa7d7d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7d7d4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7d7d8: b               #0xa7d3e0
    // 0xa7d7dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d7dc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7d7e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d7e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7d7e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d7e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7d7e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d7e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isActionEnabled(/* No info */) {
    // ** addr: 0xb19cd8, size: 0x74
    // 0xb19cd8: EnterFrame
    //     0xb19cd8: stp             fp, lr, [SP, #-0x10]!
    //     0xb19cdc: mov             fp, SP
    // 0xb19ce0: ldr             x1, [fp, #0x10]
    // 0xb19ce4: LoadField: r2 = r1->field_13
    //     0xb19ce4: ldur            w2, [x1, #0x13]
    // 0xb19ce8: DecompressPointer r2
    //     0xb19ce8: add             x2, x2, HEAP, lsl #32
    // 0xb19cec: LoadField: r1 = r2->field_b
    //     0xb19cec: ldur            w1, [x2, #0xb]
    // 0xb19cf0: DecompressPointer r1
    //     0xb19cf0: add             x1, x1, HEAP, lsl #32
    // 0xb19cf4: cmp             w1, NULL
    // 0xb19cf8: b.eq            #0xb19d48
    // 0xb19cfc: LoadField: r2 = r1->field_b
    //     0xb19cfc: ldur            w2, [x1, #0xb]
    // 0xb19d00: DecompressPointer r2
    //     0xb19d00: add             x2, x2, HEAP, lsl #32
    // 0xb19d04: LoadField: r1 = r2->field_27
    //     0xb19d04: ldur            w1, [x2, #0x27]
    // 0xb19d08: DecompressPointer r1
    //     0xb19d08: add             x1, x1, HEAP, lsl #32
    // 0xb19d0c: LoadField: r2 = r1->field_b
    //     0xb19d0c: ldur            w2, [x1, #0xb]
    // 0xb19d10: DecompressPointer r2
    //     0xb19d10: add             x2, x2, HEAP, lsl #32
    // 0xb19d14: LoadField: r1 = r2->field_7
    //     0xb19d14: ldur            x1, [x2, #7]
    // 0xb19d18: tbnz            x1, #0x3f, #0xb19d38
    // 0xb19d1c: LoadField: r1 = r2->field_f
    //     0xb19d1c: ldur            x1, [x2, #0xf]
    // 0xb19d20: tbz             x1, #0x3f, #0xb19d2c
    // 0xb19d24: r2 = false
    //     0xb19d24: add             x2, NULL, #0x30  ; false
    // 0xb19d28: b               #0xb19d30
    // 0xb19d2c: r2 = true
    //     0xb19d2c: add             x2, NULL, #0x20  ; true
    // 0xb19d30: mov             x0, x2
    // 0xb19d34: b               #0xb19d3c
    // 0xb19d38: r0 = false
    //     0xb19d38: add             x0, NULL, #0x30  ; false
    // 0xb19d3c: LeaveFrame
    //     0xb19d3c: mov             SP, fp
    //     0xb19d40: ldp             fp, lr, [SP], #0x10
    // 0xb19d44: ret
    //     0xb19d44: ret             
    // 0xb19d48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb19d48: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 2725, size: 0x2c, field offset: 0x14
class _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> extends ContextAction<X0 bound DirectionalCaretMovementIntent> {

  _ _UpdateTextSelectionAction(/* No info */) {
    // ** addr: 0x95cd98, size: 0x168
    // 0x95cd98: EnterFrame
    //     0x95cd98: stp             fp, lr, [SP, #-0x10]!
    //     0x95cd9c: mov             fp, SP
    // 0x95cda0: AllocStack(0x8)
    //     0x95cda0: sub             SP, SP, #8
    // 0x95cda4: SetupParameters(_UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> this /* r3 */, dynamic _ /* r4 */, dynamic _ /* r5 */, dynamic _ /* r6 */, dynamic _ /* r7 */, {dynamic extentAtIndex = false /* r8 */, dynamic isExpand = false /* r1 */})
    //     0x95cda4: mov             x0, x4
    //     0x95cda8: ldur            w1, [x0, #0x13]
    //     0x95cdac: add             x1, x1, HEAP, lsl #32
    //     0x95cdb0: sub             x2, x1, #0xa
    //     0x95cdb4: add             x3, fp, w2, sxtw #2
    //     0x95cdb8: ldr             x3, [x3, #0x30]
    //     0x95cdbc: add             x4, fp, w2, sxtw #2
    //     0x95cdc0: ldr             x4, [x4, #0x28]
    //     0x95cdc4: add             x5, fp, w2, sxtw #2
    //     0x95cdc8: ldr             x5, [x5, #0x20]
    //     0x95cdcc: add             x6, fp, w2, sxtw #2
    //     0x95cdd0: ldr             x6, [x6, #0x18]
    //     0x95cdd4: add             x7, fp, w2, sxtw #2
    //     0x95cdd8: ldr             x7, [x7, #0x10]
    //     0x95cddc: ldur            w2, [x0, #0x1f]
    //     0x95cde0: add             x2, x2, HEAP, lsl #32
    //     0x95cde4: add             x16, PP, #0x41, lsl #12  ; [pp+0x413d0] "extentAtIndex"
    //     0x95cde8: ldr             x16, [x16, #0x3d0]
    //     0x95cdec: cmp             w2, w16
    //     0x95cdf0: b.ne            #0x95ce14
    //     0x95cdf4: ldur            w2, [x0, #0x23]
    //     0x95cdf8: add             x2, x2, HEAP, lsl #32
    //     0x95cdfc: sub             w8, w1, w2
    //     0x95ce00: add             x2, fp, w8, sxtw #2
    //     0x95ce04: ldr             x2, [x2, #8]
    //     0x95ce08: mov             x8, x2
    //     0x95ce0c: movz            x2, #0x1
    //     0x95ce10: b               #0x95ce1c
    //     0x95ce14: add             x8, NULL, #0x30  ; false
    //     0x95ce18: movz            x2, #0
    //     0x95ce1c: lsl             x9, x2, #1
    //     0x95ce20: lsl             w2, w9, #1
    //     0x95ce24: add             w9, w2, #8
    //     0x95ce28: add             x16, x0, w9, sxtw #1
    //     0x95ce2c: ldur            w10, [x16, #0xf]
    //     0x95ce30: add             x10, x10, HEAP, lsl #32
    //     0x95ce34: add             x16, PP, #0x41, lsl #12  ; [pp+0x413d8] "isExpand"
    //     0x95ce38: ldr             x16, [x16, #0x3d8]
    //     0x95ce3c: cmp             w10, w16
    //     0x95ce40: b.ne            #0x95ce64
    //     0x95ce44: add             w9, w2, #0xa
    //     0x95ce48: add             x16, x0, w9, sxtw #1
    //     0x95ce4c: ldur            w2, [x16, #0xf]
    //     0x95ce50: add             x2, x2, HEAP, lsl #32
    //     0x95ce54: sub             w0, w1, w2
    //     0x95ce58: add             x1, fp, w0, sxtw #2
    //     0x95ce5c: ldr             x1, [x1, #8]
    //     0x95ce60: b               #0x95ce68
    //     0x95ce64: add             x1, NULL, #0x30  ; false
    // 0x95ce68: CheckStackOverflow
    //     0x95ce68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95ce6c: cmp             SP, x16
    //     0x95ce70: b.ls            #0x95cef8
    // 0x95ce74: mov             x0, x4
    // 0x95ce78: StoreField: r3->field_13 = r0
    //     0x95ce78: stur            w0, [x3, #0x13]
    //     0x95ce7c: ldurb           w16, [x3, #-1]
    //     0x95ce80: ldurb           w17, [x0, #-1]
    //     0x95ce84: and             x16, x17, x16, lsr #2
    //     0x95ce88: tst             x16, HEAP, lsr #32
    //     0x95ce8c: b.eq            #0x95ce94
    //     0x95ce90: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x95ce94: mov             x0, x5
    // 0x95ce98: StoreField: r3->field_23 = r0
    //     0x95ce98: stur            w0, [x3, #0x23]
    //     0x95ce9c: ldurb           w16, [x3, #-1]
    //     0x95cea0: ldurb           w17, [x0, #-1]
    //     0x95cea4: and             x16, x17, x16, lsr #2
    //     0x95cea8: tst             x16, HEAP, lsr #32
    //     0x95ceac: b.eq            #0x95ceb4
    //     0x95ceb0: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x95ceb4: mov             x0, x6
    // 0x95ceb8: StoreField: r3->field_27 = r0
    //     0x95ceb8: stur            w0, [x3, #0x27]
    //     0x95cebc: ldurb           w16, [x3, #-1]
    //     0x95cec0: ldurb           w17, [x0, #-1]
    //     0x95cec4: and             x16, x17, x16, lsr #2
    //     0x95cec8: tst             x16, HEAP, lsr #32
    //     0x95cecc: b.eq            #0x95ced4
    //     0x95ced0: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x95ced4: ArrayStore: r3[0] = r7  ; List_4
    //     0x95ced4: stur            w7, [x3, #0x17]
    // 0x95ced8: StoreField: r3->field_1b = r1
    //     0x95ced8: stur            w1, [x3, #0x1b]
    // 0x95cedc: StoreField: r3->field_1f = r8
    //     0x95cedc: stur            w8, [x3, #0x1f]
    // 0x95cee0: str             x3, [SP]
    // 0x95cee4: r0 = Action()
    //     0x95cee4: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95cee8: r0 = Null
    //     0x95cee8: mov             x0, NULL
    // 0x95ceec: LeaveFrame
    //     0x95ceec: mov             SP, fp
    //     0x95cef0: ldp             fp, lr, [SP], #0x10
    // 0x95cef4: ret
    //     0x95cef4: ret             
    // 0x95cef8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95cef8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95cefc: b               #0x95ce74
  }
  _ invoke(/* No info */) {
    // ** addr: 0xa7c8c4, size: 0x57c
    // 0xa7c8c4: EnterFrame
    //     0xa7c8c4: stp             fp, lr, [SP, #-0x10]!
    //     0xa7c8c8: mov             fp, SP
    // 0xa7c8cc: AllocStack(0x80)
    //     0xa7c8cc: sub             SP, SP, #0x80
    // 0xa7c8d0: SetupParameters(_UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0xa7c8d0: mov             x0, x4
    //     0xa7c8d4: ldur            w1, [x0, #0x13]
    //     0xa7c8d8: add             x1, x1, HEAP, lsl #32
    //     0xa7c8dc: sub             x0, x1, #4
    //     0xa7c8e0: add             x3, fp, w0, sxtw #2
    //     0xa7c8e4: ldr             x3, [x3, #0x18]
    //     0xa7c8e8: stur            x3, [fp, #-0x18]
    //     0xa7c8ec: add             x4, fp, w0, sxtw #2
    //     0xa7c8f0: ldr             x4, [x4, #0x10]
    //     0xa7c8f4: stur            x4, [fp, #-0x10]
    //     0xa7c8f8: cmp             w0, #2
    //     0xa7c8fc: b.lt            #0xa7c910
    //     0xa7c900: add             x1, fp, w0, sxtw #2
    //     0xa7c904: ldr             x1, [x1, #8]
    //     0xa7c908: mov             x5, x1
    //     0xa7c90c: b               #0xa7c914
    //     0xa7c910: mov             x5, NULL
    //     0xa7c914: stur            x5, [fp, #-8]
    // 0xa7c918: CheckStackOverflow
    //     0xa7c918: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7c91c: cmp             SP, x16
    //     0xa7c920: b.ls            #0xa7ce28
    // 0xa7c924: LoadField: r2 = r3->field_7
    //     0xa7c924: ldur            w2, [x3, #7]
    // 0xa7c928: DecompressPointer r2
    //     0xa7c928: add             x2, x2, HEAP, lsl #32
    // 0xa7c92c: mov             x0, x4
    // 0xa7c930: r1 = Null
    //     0xa7c930: mov             x1, NULL
    // 0xa7c934: cmp             w2, NULL
    // 0xa7c938: b.eq            #0xa7c95c
    // 0xa7c93c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0xa7c93c: ldur            w4, [x2, #0x17]
    // 0xa7c940: DecompressPointer r4
    //     0xa7c940: add             x4, x4, HEAP, lsl #32
    // 0xa7c944: r8 = X0 bound DirectionalCaretMovementIntent
    //     0xa7c944: add             x8, PP, #0x47, lsl #12  ; [pp+0x472f8] TypeParameter: X0 bound DirectionalCaretMovementIntent
    //     0xa7c948: ldr             x8, [x8, #0x2f8]
    // 0xa7c94c: LoadField: r9 = r4->field_7
    //     0xa7c94c: ldur            x9, [x4, #7]
    // 0xa7c950: r3 = Null
    //     0xa7c950: add             x3, PP, #0x47, lsl #12  ; [pp+0x47300] Null
    //     0xa7c954: ldr             x3, [x3, #0x300]
    // 0xa7c958: blr             x9
    // 0xa7c95c: ldur            x0, [fp, #-0x18]
    // 0xa7c960: LoadField: r1 = r0->field_13
    //     0xa7c960: ldur            w1, [x0, #0x13]
    // 0xa7c964: DecompressPointer r1
    //     0xa7c964: add             x1, x1, HEAP, lsl #32
    // 0xa7c968: stur            x1, [fp, #-0x58]
    // 0xa7c96c: LoadField: r2 = r1->field_b
    //     0xa7c96c: ldur            w2, [x1, #0xb]
    // 0xa7c970: DecompressPointer r2
    //     0xa7c970: add             x2, x2, HEAP, lsl #32
    // 0xa7c974: cmp             w2, NULL
    // 0xa7c978: b.eq            #0xa7ce30
    // 0xa7c97c: LoadField: r3 = r2->field_b
    //     0xa7c97c: ldur            w3, [x2, #0xb]
    // 0xa7c980: DecompressPointer r3
    //     0xa7c980: add             x3, x3, HEAP, lsl #32
    // 0xa7c984: LoadField: r2 = r3->field_27
    //     0xa7c984: ldur            w2, [x3, #0x27]
    // 0xa7c988: DecompressPointer r2
    //     0xa7c988: add             x2, x2, HEAP, lsl #32
    // 0xa7c98c: stur            x2, [fp, #-0x28]
    // 0xa7c990: LoadField: r3 = r2->field_b
    //     0xa7c990: ldur            w3, [x2, #0xb]
    // 0xa7c994: DecompressPointer r3
    //     0xa7c994: add             x3, x3, HEAP, lsl #32
    // 0xa7c998: ldur            x4, [fp, #-0x10]
    // 0xa7c99c: stur            x3, [fp, #-0x50]
    // 0xa7c9a0: LoadField: r5 = r4->field_b
    //     0xa7c9a0: ldur            w5, [x4, #0xb]
    // 0xa7c9a4: DecompressPointer r5
    //     0xa7c9a4: add             x5, x5, HEAP, lsl #32
    // 0xa7c9a8: tbnz            w5, #4, #0xa7c9b4
    // 0xa7c9ac: r5 = true
    //     0xa7c9ac: add             x5, NULL, #0x20  ; true
    // 0xa7c9b0: b               #0xa7c9b8
    // 0xa7c9b4: r5 = false
    //     0xa7c9b4: add             x5, NULL, #0x30  ; false
    // 0xa7c9b8: stur            x5, [fp, #-0x48]
    // 0xa7c9bc: LoadField: r6 = r3->field_7
    //     0xa7c9bc: ldur            x6, [x3, #7]
    // 0xa7c9c0: stur            x6, [fp, #-0x40]
    // 0xa7c9c4: LoadField: r7 = r3->field_f
    //     0xa7c9c4: ldur            x7, [x3, #0xf]
    // 0xa7c9c8: stur            x7, [fp, #-0x38]
    // 0xa7c9cc: cmp             x6, x7
    // 0xa7c9d0: b.eq            #0xa7caa0
    // 0xa7c9d4: ArrayLoad: r8 = r0[0]  ; List_4
    //     0xa7c9d4: ldur            w8, [x0, #0x17]
    // 0xa7c9d8: DecompressPointer r8
    //     0xa7c9d8: add             x8, x8, HEAP, lsl #32
    // 0xa7c9dc: tbz             w8, #4, #0xa7ca90
    // 0xa7c9e0: tbnz            w5, #4, #0xa7ca80
    // 0xa7c9e4: ldur            x0, [fp, #-8]
    // 0xa7c9e8: cmp             w0, NULL
    // 0xa7c9ec: b.eq            #0xa7ce34
    // 0xa7c9f0: LoadField: r1 = r4->field_7
    //     0xa7c9f0: ldur            w1, [x4, #7]
    // 0xa7c9f4: DecompressPointer r1
    //     0xa7c9f4: add             x1, x1, HEAP, lsl #32
    // 0xa7c9f8: tbnz            w1, #4, #0xa7ca04
    // 0xa7c9fc: mov             x1, x7
    // 0xa7ca00: b               #0xa7ca08
    // 0xa7ca04: mov             x1, x6
    // 0xa7ca08: stur            x1, [fp, #-0x20]
    // 0xa7ca0c: r0 = TextSelection()
    //     0xa7ca0c: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7ca10: r2 = Instance_TextAffinity
    //     0xa7ca10: ldr             x2, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7ca14: stur            x0, [fp, #-0x30]
    // 0xa7ca18: StoreField: r0->field_27 = r2
    //     0xa7ca18: stur            w2, [x0, #0x27]
    // 0xa7ca1c: ldur            x1, [fp, #-0x20]
    // 0xa7ca20: ArrayStore: r0[0] = r1  ; List_8
    //     0xa7ca20: stur            x1, [x0, #0x17]
    // 0xa7ca24: StoreField: r0->field_1f = r1
    //     0xa7ca24: stur            x1, [x0, #0x1f]
    // 0xa7ca28: r8 = false
    //     0xa7ca28: add             x8, NULL, #0x30  ; false
    // 0xa7ca2c: StoreField: r0->field_2b = r8
    //     0xa7ca2c: stur            w8, [x0, #0x2b]
    // 0xa7ca30: StoreField: r0->field_7 = r1
    //     0xa7ca30: stur            x1, [x0, #7]
    // 0xa7ca34: StoreField: r0->field_f = r1
    //     0xa7ca34: stur            x1, [x0, #0xf]
    // 0xa7ca38: r0 = UpdateSelectionIntent()
    //     0xa7ca38: bl              #0xa7d374  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0xa7ca3c: mov             x1, x0
    // 0xa7ca40: ldur            x0, [fp, #-0x28]
    // 0xa7ca44: StoreField: r1->field_7 = r0
    //     0xa7ca44: stur            w0, [x1, #7]
    // 0xa7ca48: ldur            x0, [fp, #-0x30]
    // 0xa7ca4c: StoreField: r1->field_b = r0
    //     0xa7ca4c: stur            w0, [x1, #0xb]
    // 0xa7ca50: r9 = Instance_SelectionChangedCause
    //     0xa7ca50: ldr             x9, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ca54: StoreField: r1->field_f = r9
    //     0xa7ca54: stur            w9, [x1, #0xf]
    // 0xa7ca58: r16 = <UpdateSelectionIntent>
    //     0xa7ca58: add             x16, PP, #0x2b, lsl #12  ; [pp+0x2bc18] TypeArguments: <UpdateSelectionIntent>
    //     0xa7ca5c: ldr             x16, [x16, #0xc18]
    // 0xa7ca60: ldur            lr, [fp, #-8]
    // 0xa7ca64: stp             lr, x16, [SP, #8]
    // 0xa7ca68: str             x1, [SP]
    // 0xa7ca6c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7ca6c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7ca70: r0 = invoke()
    //     0xa7ca70: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7ca74: LeaveFrame
    //     0xa7ca74: mov             SP, fp
    //     0xa7ca78: ldp             fp, lr, [SP], #0x10
    // 0xa7ca7c: ret
    //     0xa7ca7c: ret             
    // 0xa7ca80: r8 = false
    //     0xa7ca80: add             x8, NULL, #0x30  ; false
    // 0xa7ca84: r9 = Instance_SelectionChangedCause
    //     0xa7ca84: ldr             x9, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ca88: r2 = Instance_TextAffinity
    //     0xa7ca88: ldr             x2, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7ca8c: b               #0xa7caac
    // 0xa7ca90: r8 = false
    //     0xa7ca90: add             x8, NULL, #0x30  ; false
    // 0xa7ca94: r9 = Instance_SelectionChangedCause
    //     0xa7ca94: ldr             x9, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7ca98: r2 = Instance_TextAffinity
    //     0xa7ca98: ldr             x2, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7ca9c: b               #0xa7caac
    // 0xa7caa0: r8 = false
    //     0xa7caa0: add             x8, NULL, #0x30  ; false
    // 0xa7caa4: r9 = Instance_SelectionChangedCause
    //     0xa7caa4: ldr             x9, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7caa8: r2 = Instance_TextAffinity
    //     0xa7caa8: ldr             x2, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7caac: str             x3, [SP]
    // 0xa7cab0: r0 = extent()
    //     0xa7cab0: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0xa7cab4: mov             x1, x0
    // 0xa7cab8: ldur            x0, [fp, #-0x10]
    // 0xa7cabc: stur            x1, [fp, #-0x30]
    // 0xa7cac0: LoadField: r2 = r0->field_13
    //     0xa7cac0: ldur            w2, [x0, #0x13]
    // 0xa7cac4: DecompressPointer r2
    //     0xa7cac4: add             x2, x2, HEAP, lsl #32
    // 0xa7cac8: tbnz            w2, #4, #0xa7cb74
    // 0xa7cacc: LoadField: r2 = r0->field_7
    //     0xa7cacc: ldur            w2, [x0, #7]
    // 0xa7cad0: DecompressPointer r2
    //     0xa7cad0: add             x2, x2, HEAP, lsl #32
    // 0xa7cad4: stur            x2, [fp, #-0x28]
    // 0xa7cad8: tbnz            w2, #4, #0xa7cb20
    // 0xa7cadc: ldur            x16, [fp, #-0x18]
    // 0xa7cae0: stp             x1, x16, [SP]
    // 0xa7cae4: r0 = _isAtWordwrapUpstream()
    //     0xa7cae4: bl              #0xa7d230  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_isAtWordwrapUpstream
    // 0xa7cae8: tbnz            w0, #4, #0xa7cb18
    // 0xa7caec: ldur            x0, [fp, #-0x30]
    // 0xa7caf0: LoadField: r1 = r0->field_7
    //     0xa7caf0: ldur            x1, [x0, #7]
    // 0xa7caf4: stur            x1, [fp, #-0x20]
    // 0xa7caf8: r0 = TextPosition()
    //     0xa7caf8: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xa7cafc: mov             x1, x0
    // 0xa7cb00: ldur            x0, [fp, #-0x20]
    // 0xa7cb04: StoreField: r1->field_7 = r0
    //     0xa7cb04: stur            x0, [x1, #7]
    // 0xa7cb08: r0 = Instance_TextAffinity
    //     0xa7cb08: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7cb0c: StoreField: r1->field_f = r0
    //     0xa7cb0c: stur            w0, [x1, #0xf]
    // 0xa7cb10: mov             x0, x1
    // 0xa7cb14: b               #0xa7cb6c
    // 0xa7cb18: ldur            x0, [fp, #-0x30]
    // 0xa7cb1c: b               #0xa7cb24
    // 0xa7cb20: mov             x0, x1
    // 0xa7cb24: ldur            x1, [fp, #-0x28]
    // 0xa7cb28: tbz             w1, #4, #0xa7cb6c
    // 0xa7cb2c: ldur            x16, [fp, #-0x18]
    // 0xa7cb30: stp             x0, x16, [SP]
    // 0xa7cb34: r0 = _isAtWordwrapDownstream()
    //     0xa7cb34: bl              #0xa7d100  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_isAtWordwrapDownstream
    // 0xa7cb38: tbnz            w0, #4, #0xa7cb68
    // 0xa7cb3c: ldur            x0, [fp, #-0x30]
    // 0xa7cb40: LoadField: r1 = r0->field_7
    //     0xa7cb40: ldur            x1, [x0, #7]
    // 0xa7cb44: stur            x1, [fp, #-0x20]
    // 0xa7cb48: r0 = TextPosition()
    //     0xa7cb48: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xa7cb4c: mov             x1, x0
    // 0xa7cb50: ldur            x0, [fp, #-0x20]
    // 0xa7cb54: StoreField: r1->field_7 = r0
    //     0xa7cb54: stur            x0, [x1, #7]
    // 0xa7cb58: r0 = Instance_TextAffinity
    //     0xa7cb58: ldr             x0, [PP, #0x5ce8]  ; [pp+0x5ce8] Obj!TextAffinity@c46d01
    // 0xa7cb5c: StoreField: r1->field_f = r0
    //     0xa7cb5c: stur            w0, [x1, #0xf]
    // 0xa7cb60: mov             x0, x1
    // 0xa7cb64: b               #0xa7cb6c
    // 0xa7cb68: ldur            x0, [fp, #-0x30]
    // 0xa7cb6c: mov             x1, x0
    // 0xa7cb70: b               #0xa7cb7c
    // 0xa7cb74: mov             x0, x1
    // 0xa7cb78: mov             x1, x0
    // 0xa7cb7c: ldur            x0, [fp, #-0x18]
    // 0xa7cb80: LoadField: r2 = r0->field_1b
    //     0xa7cb80: ldur            w2, [x0, #0x1b]
    // 0xa7cb84: DecompressPointer r2
    //     0xa7cb84: add             x2, x2, HEAP, lsl #32
    // 0xa7cb88: stur            x2, [fp, #-0x28]
    // 0xa7cb8c: tbnz            w2, #4, #0xa7cbdc
    // 0xa7cb90: ldur            x3, [fp, #-0x10]
    // 0xa7cb94: LoadField: r4 = r3->field_7
    //     0xa7cb94: ldur            w4, [x3, #7]
    // 0xa7cb98: DecompressPointer r4
    //     0xa7cb98: add             x4, x4, HEAP, lsl #32
    // 0xa7cb9c: tbnz            w4, #4, #0xa7cbb8
    // 0xa7cba0: ldur            x4, [fp, #-0x50]
    // 0xa7cba4: ArrayLoad: r5 = r4[0]  ; List_8
    //     0xa7cba4: ldur            x5, [x4, #0x17]
    // 0xa7cba8: LoadField: r6 = r4->field_1f
    //     0xa7cba8: ldur            x6, [x4, #0x1f]
    // 0xa7cbac: cmp             x5, x6
    // 0xa7cbb0: b.le            #0xa7cbdc
    // 0xa7cbb4: b               #0xa7cbcc
    // 0xa7cbb8: ldur            x4, [fp, #-0x50]
    // 0xa7cbbc: ArrayLoad: r5 = r4[0]  ; List_8
    //     0xa7cbbc: ldur            x5, [x4, #0x17]
    // 0xa7cbc0: LoadField: r6 = r4->field_1f
    //     0xa7cbc0: ldur            x6, [x4, #0x1f]
    // 0xa7cbc4: cmp             x5, x6
    // 0xa7cbc8: b.ge            #0xa7cbdc
    // 0xa7cbcc: str             x4, [SP]
    // 0xa7cbd0: r0 = base()
    //     0xa7cbd0: bl              #0x5d4d24  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0xa7cbd4: mov             x4, x0
    // 0xa7cbd8: b               #0xa7cbe0
    // 0xa7cbdc: mov             x4, x1
    // 0xa7cbe0: ldur            x1, [fp, #-0x18]
    // 0xa7cbe4: ldur            x2, [fp, #-0x10]
    // 0xa7cbe8: ldur            x3, [fp, #-0x48]
    // 0xa7cbec: stur            x4, [fp, #-0x60]
    // 0xa7cbf0: LoadField: r5 = r2->field_7
    //     0xa7cbf0: ldur            w5, [x2, #7]
    // 0xa7cbf4: DecompressPointer r5
    //     0xa7cbf4: add             x5, x5, HEAP, lsl #32
    // 0xa7cbf8: stur            x5, [fp, #-0x30]
    // 0xa7cbfc: LoadField: r0 = r1->field_23
    //     0xa7cbfc: ldur            w0, [x1, #0x23]
    // 0xa7cc00: DecompressPointer r0
    //     0xa7cc00: add             x0, x0, HEAP, lsl #32
    // 0xa7cc04: str             x0, [SP]
    // 0xa7cc08: ClosureCall
    //     0xa7cc08: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0xa7cc0c: ldur            x2, [x0, #0x1f]
    //     0xa7cc10: blr             x2
    // 0xa7cc14: ldur            x1, [fp, #-0x18]
    // 0xa7cc18: LoadField: r2 = r1->field_27
    //     0xa7cc18: ldur            w2, [x1, #0x27]
    // 0xa7cc1c: DecompressPointer r2
    //     0xa7cc1c: add             x2, x2, HEAP, lsl #32
    // 0xa7cc20: ldur            x16, [fp, #-0x60]
    // 0xa7cc24: stp             x16, x2, [SP, #0x10]
    // 0xa7cc28: ldur            x16, [fp, #-0x30]
    // 0xa7cc2c: stp             x0, x16, [SP]
    // 0xa7cc30: mov             x0, x2
    // 0xa7cc34: ClosureCall
    //     0xa7cc34: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    //     0xa7cc38: ldur            x2, [x0, #0x1f]
    //     0xa7cc3c: blr             x2
    // 0xa7cc40: mov             x1, x0
    // 0xa7cc44: ldur            x0, [fp, #-0x48]
    // 0xa7cc48: stur            x1, [fp, #-0x30]
    // 0xa7cc4c: tbnz            w0, #4, #0xa7cc58
    // 0xa7cc50: ldur            x2, [fp, #-0x50]
    // 0xa7cc54: b               #0xa7cc74
    // 0xa7cc58: ldur            x0, [fp, #-0x28]
    // 0xa7cc5c: tbz             w0, #4, #0xa7ccc0
    // 0xa7cc60: ldur            x2, [fp, #-0x50]
    // 0xa7cc64: LoadField: r3 = r1->field_7
    //     0xa7cc64: ldur            x3, [x1, #7]
    // 0xa7cc68: ArrayLoad: r4 = r2[0]  ; List_8
    //     0xa7cc68: ldur            x4, [x2, #0x17]
    // 0xa7cc6c: cmp             x3, x4
    // 0xa7cc70: b.ne            #0xa7ccb4
    // 0xa7cc74: LoadField: r0 = r1->field_7
    //     0xa7cc74: ldur            x0, [x1, #7]
    // 0xa7cc78: stur            x0, [fp, #-0x20]
    // 0xa7cc7c: r0 = TextSelection()
    //     0xa7cc7c: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7cc80: mov             x1, x0
    // 0xa7cc84: ldur            x0, [fp, #-0x20]
    // 0xa7cc88: ArrayStore: r1[0] = r0  ; List_8
    //     0xa7cc88: stur            x0, [x1, #0x17]
    // 0xa7cc8c: StoreField: r1->field_1f = r0
    //     0xa7cc8c: stur            x0, [x1, #0x1f]
    // 0xa7cc90: ldur            x2, [fp, #-0x30]
    // 0xa7cc94: LoadField: r3 = r2->field_f
    //     0xa7cc94: ldur            w3, [x2, #0xf]
    // 0xa7cc98: DecompressPointer r3
    //     0xa7cc98: add             x3, x3, HEAP, lsl #32
    // 0xa7cc9c: StoreField: r1->field_27 = r3
    //     0xa7cc9c: stur            w3, [x1, #0x27]
    // 0xa7cca0: r3 = false
    //     0xa7cca0: add             x3, NULL, #0x30  ; false
    // 0xa7cca4: StoreField: r1->field_2b = r3
    //     0xa7cca4: stur            w3, [x1, #0x2b]
    // 0xa7cca8: StoreField: r1->field_7 = r0
    //     0xa7cca8: stur            x0, [x1, #7]
    // 0xa7ccac: StoreField: r1->field_f = r0
    //     0xa7ccac: stur            x0, [x1, #0xf]
    // 0xa7ccb0: b               #0xa7cd24
    // 0xa7ccb4: mov             x2, x1
    // 0xa7ccb8: r3 = false
    //     0xa7ccb8: add             x3, NULL, #0x30  ; false
    // 0xa7ccbc: b               #0xa7ccc8
    // 0xa7ccc0: mov             x2, x1
    // 0xa7ccc4: r3 = false
    //     0xa7ccc4: add             x3, NULL, #0x30  ; false
    // 0xa7ccc8: tbnz            w0, #4, #0xa7cd14
    // 0xa7cccc: ldur            x0, [fp, #-0x18]
    // 0xa7ccd0: LoadField: r1 = r0->field_1f
    //     0xa7ccd0: ldur            w1, [x0, #0x1f]
    // 0xa7ccd4: DecompressPointer r1
    //     0xa7ccd4: add             x1, x1, HEAP, lsl #32
    // 0xa7ccd8: tbnz            w1, #4, #0xa7cce4
    // 0xa7ccdc: r0 = true
    //     0xa7ccdc: add             x0, NULL, #0x20  ; true
    // 0xa7cce0: b               #0xa7cd00
    // 0xa7cce4: ldur            x0, [fp, #-0x40]
    // 0xa7cce8: ldur            x1, [fp, #-0x38]
    // 0xa7ccec: cmp             x0, x1
    // 0xa7ccf0: r16 = true
    //     0xa7ccf0: add             x16, NULL, #0x20  ; true
    // 0xa7ccf4: r17 = false
    //     0xa7ccf4: add             x17, NULL, #0x30  ; false
    // 0xa7ccf8: csel            x4, x16, x17, eq
    // 0xa7ccfc: mov             x0, x4
    // 0xa7cd00: ldur            x16, [fp, #-0x50]
    // 0xa7cd04: stp             x2, x16, [SP, #8]
    // 0xa7cd08: str             x0, [SP]
    // 0xa7cd0c: r0 = expandTo()
    //     0xa7cd0c: bl              #0xa7cf10  ; [package:flutter/src/services/text_editing.dart] TextSelection::expandTo
    // 0xa7cd10: b               #0xa7cd20
    // 0xa7cd14: ldur            x16, [fp, #-0x50]
    // 0xa7cd18: stp             x2, x16, [SP]
    // 0xa7cd1c: r0 = extendTo()
    //     0xa7cd1c: bl              #0xa7ce40  ; [package:flutter/src/services/text_editing.dart] TextSelection::extendTo
    // 0xa7cd20: mov             x1, x0
    // 0xa7cd24: ldur            x0, [fp, #-0x10]
    // 0xa7cd28: LoadField: r2 = r0->field_f
    //     0xa7cd28: ldur            w2, [x0, #0xf]
    // 0xa7cd2c: DecompressPointer r2
    //     0xa7cd2c: add             x2, x2, HEAP, lsl #32
    // 0xa7cd30: tbnz            w2, #4, #0xa7cda4
    // 0xa7cd34: ldur            x0, [fp, #-0x50]
    // 0xa7cd38: ArrayLoad: r2 = r0[0]  ; List_8
    //     0xa7cd38: ldur            x2, [x0, #0x17]
    // 0xa7cd3c: LoadField: r3 = r0->field_1f
    //     0xa7cd3c: ldur            x3, [x0, #0x1f]
    // 0xa7cd40: sub             x4, x2, x3
    // 0xa7cd44: LoadField: r3 = r1->field_1f
    //     0xa7cd44: ldur            x3, [x1, #0x1f]
    // 0xa7cd48: sub             x5, x2, x3
    // 0xa7cd4c: mul             x2, x4, x5
    // 0xa7cd50: tbz             x2, #0x3f, #0xa7cda4
    // 0xa7cd54: str             x0, [SP]
    // 0xa7cd58: r0 = base()
    //     0xa7cd58: bl              #0x5d4d24  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0xa7cd5c: stur            x0, [fp, #-0x10]
    // 0xa7cd60: LoadField: r1 = r0->field_7
    //     0xa7cd60: ldur            x1, [x0, #7]
    // 0xa7cd64: stur            x1, [fp, #-0x20]
    // 0xa7cd68: r0 = TextSelection()
    //     0xa7cd68: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7cd6c: mov             x1, x0
    // 0xa7cd70: ldur            x0, [fp, #-0x20]
    // 0xa7cd74: ArrayStore: r1[0] = r0  ; List_8
    //     0xa7cd74: stur            x0, [x1, #0x17]
    // 0xa7cd78: StoreField: r1->field_1f = r0
    //     0xa7cd78: stur            x0, [x1, #0x1f]
    // 0xa7cd7c: ldur            x2, [fp, #-0x10]
    // 0xa7cd80: LoadField: r3 = r2->field_f
    //     0xa7cd80: ldur            w3, [x2, #0xf]
    // 0xa7cd84: DecompressPointer r3
    //     0xa7cd84: add             x3, x3, HEAP, lsl #32
    // 0xa7cd88: StoreField: r1->field_27 = r3
    //     0xa7cd88: stur            w3, [x1, #0x27]
    // 0xa7cd8c: r2 = false
    //     0xa7cd8c: add             x2, NULL, #0x30  ; false
    // 0xa7cd90: StoreField: r1->field_2b = r2
    //     0xa7cd90: stur            w2, [x1, #0x2b]
    // 0xa7cd94: StoreField: r1->field_7 = r0
    //     0xa7cd94: stur            x0, [x1, #7]
    // 0xa7cd98: StoreField: r1->field_f = r0
    //     0xa7cd98: stur            x0, [x1, #0xf]
    // 0xa7cd9c: mov             x2, x1
    // 0xa7cda0: b               #0xa7cda8
    // 0xa7cda4: mov             x2, x1
    // 0xa7cda8: ldur            x1, [fp, #-8]
    // 0xa7cdac: ldur            x0, [fp, #-0x58]
    // 0xa7cdb0: stur            x2, [fp, #-0x18]
    // 0xa7cdb4: cmp             w1, NULL
    // 0xa7cdb8: b.eq            #0xa7ce38
    // 0xa7cdbc: LoadField: r3 = r0->field_b
    //     0xa7cdbc: ldur            w3, [x0, #0xb]
    // 0xa7cdc0: DecompressPointer r3
    //     0xa7cdc0: add             x3, x3, HEAP, lsl #32
    // 0xa7cdc4: cmp             w3, NULL
    // 0xa7cdc8: b.eq            #0xa7ce3c
    // 0xa7cdcc: LoadField: r0 = r3->field_b
    //     0xa7cdcc: ldur            w0, [x3, #0xb]
    // 0xa7cdd0: DecompressPointer r0
    //     0xa7cdd0: add             x0, x0, HEAP, lsl #32
    // 0xa7cdd4: LoadField: r3 = r0->field_27
    //     0xa7cdd4: ldur            w3, [x0, #0x27]
    // 0xa7cdd8: DecompressPointer r3
    //     0xa7cdd8: add             x3, x3, HEAP, lsl #32
    // 0xa7cddc: stur            x3, [fp, #-0x10]
    // 0xa7cde0: r0 = UpdateSelectionIntent()
    //     0xa7cde0: bl              #0xa7d374  ; AllocateUpdateSelectionIntentStub -> UpdateSelectionIntent (size=0x14)
    // 0xa7cde4: mov             x1, x0
    // 0xa7cde8: ldur            x0, [fp, #-0x10]
    // 0xa7cdec: StoreField: r1->field_7 = r0
    //     0xa7cdec: stur            w0, [x1, #7]
    // 0xa7cdf0: ldur            x0, [fp, #-0x18]
    // 0xa7cdf4: StoreField: r1->field_b = r0
    //     0xa7cdf4: stur            w0, [x1, #0xb]
    // 0xa7cdf8: r0 = Instance_SelectionChangedCause
    //     0xa7cdf8: ldr             x0, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7cdfc: StoreField: r1->field_f = r0
    //     0xa7cdfc: stur            w0, [x1, #0xf]
    // 0xa7ce00: r16 = <UpdateSelectionIntent>
    //     0xa7ce00: add             x16, PP, #0x2b, lsl #12  ; [pp+0x2bc18] TypeArguments: <UpdateSelectionIntent>
    //     0xa7ce04: ldr             x16, [x16, #0xc18]
    // 0xa7ce08: ldur            lr, [fp, #-8]
    // 0xa7ce0c: stp             lr, x16, [SP, #8]
    // 0xa7ce10: str             x1, [SP]
    // 0xa7ce14: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7ce14: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7ce18: r0 = invoke()
    //     0xa7ce18: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7ce1c: LeaveFrame
    //     0xa7ce1c: mov             SP, fp
    //     0xa7ce20: ldp             fp, lr, [SP], #0x10
    // 0xa7ce24: ret
    //     0xa7ce24: ret             
    // 0xa7ce28: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7ce28: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7ce2c: b               #0xa7c924
    // 0xa7ce30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ce30: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7ce34: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ce34: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7ce38: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ce38: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7ce3c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7ce3c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _isAtWordwrapDownstream(/* No info */) {
    // ** addr: 0xa7d100, size: 0x130
    // 0xa7d100: EnterFrame
    //     0xa7d100: stp             fp, lr, [SP, #-0x10]!
    //     0xa7d104: mov             fp, SP
    // 0xa7d108: AllocStack(0x20)
    //     0xa7d108: sub             SP, SP, #0x20
    // 0xa7d10c: CheckStackOverflow
    //     0xa7d10c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7d110: cmp             SP, x16
    //     0xa7d114: b.ls            #0xa7d224
    // 0xa7d118: ldr             x0, [fp, #0x18]
    // 0xa7d11c: LoadField: r2 = r0->field_13
    //     0xa7d11c: ldur            w2, [x0, #0x13]
    // 0xa7d120: DecompressPointer r2
    //     0xa7d120: add             x2, x2, HEAP, lsl #32
    // 0xa7d124: mov             x1, x2
    // 0xa7d128: stur            x2, [fp, #-8]
    // 0xa7d12c: LoadField: r0 = r1->field_a7
    //     0xa7d12c: ldur            w0, [x1, #0xa7]
    // 0xa7d130: DecompressPointer r0
    //     0xa7d130: add             x0, x0, HEAP, lsl #32
    // 0xa7d134: r16 = Sentinel
    //     0xa7d134: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa7d138: cmp             w0, w16
    // 0xa7d13c: b.ne            #0xa7d148
    // 0xa7d140: r2 = renderEditable
    //     0xa7d140: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xa7d144: r0 = InitLateFinalInstanceField()
    //     0xa7d144: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xa7d148: ldr             x16, [fp, #0x10]
    // 0xa7d14c: stp             x16, x0, [SP]
    // 0xa7d150: r0 = getLineAtOffset()
    //     0xa7d150: bl              #0x5d7938  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLineAtOffset
    // 0xa7d154: LoadField: r1 = r0->field_7
    //     0xa7d154: ldur            x1, [x0, #7]
    // 0xa7d158: stur            x1, [fp, #-0x10]
    // 0xa7d15c: r16 = TextPosition
    //     0xa7d15c: ldr             x16, [PP, #0x5c90]  ; [pp+0x5c90] Type: TextPosition
    // 0xa7d160: r30 = TextPosition
    //     0xa7d160: ldr             lr, [PP, #0x5c90]  ; [pp+0x5c90] Type: TextPosition
    // 0xa7d164: stp             lr, x16, [SP]
    // 0xa7d168: r0 = ==()
    //     0xa7d168: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0xa7d16c: tbnz            w0, #4, #0xa7d214
    // 0xa7d170: ldr             x1, [fp, #0x10]
    // 0xa7d174: ldur            x0, [fp, #-0x10]
    // 0xa7d178: LoadField: r2 = r1->field_7
    //     0xa7d178: ldur            x2, [x1, #7]
    // 0xa7d17c: cmp             x2, x0
    // 0xa7d180: b.ne            #0xa7d214
    // 0xa7d184: LoadField: r3 = r1->field_f
    //     0xa7d184: ldur            w3, [x1, #0xf]
    // 0xa7d188: DecompressPointer r3
    //     0xa7d188: add             x3, x3, HEAP, lsl #32
    // 0xa7d18c: r16 = Instance_TextAffinity
    //     0xa7d18c: ldr             x16, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7d190: cmp             w3, w16
    // 0xa7d194: b.ne            #0xa7d214
    // 0xa7d198: cbz             x0, #0xa7d214
    // 0xa7d19c: ldur            x0, [fp, #-8]
    // 0xa7d1a0: LoadField: r1 = r0->field_b
    //     0xa7d1a0: ldur            w1, [x0, #0xb]
    // 0xa7d1a4: DecompressPointer r1
    //     0xa7d1a4: add             x1, x1, HEAP, lsl #32
    // 0xa7d1a8: cmp             w1, NULL
    // 0xa7d1ac: b.eq            #0xa7d22c
    // 0xa7d1b0: LoadField: r0 = r1->field_b
    //     0xa7d1b0: ldur            w0, [x1, #0xb]
    // 0xa7d1b4: DecompressPointer r0
    //     0xa7d1b4: add             x0, x0, HEAP, lsl #32
    // 0xa7d1b8: LoadField: r1 = r0->field_27
    //     0xa7d1b8: ldur            w1, [x0, #0x27]
    // 0xa7d1bc: DecompressPointer r1
    //     0xa7d1bc: add             x1, x1, HEAP, lsl #32
    // 0xa7d1c0: LoadField: r3 = r1->field_7
    //     0xa7d1c0: ldur            w3, [x1, #7]
    // 0xa7d1c4: DecompressPointer r3
    //     0xa7d1c4: add             x3, x3, HEAP, lsl #32
    // 0xa7d1c8: sub             x4, x2, #1
    // 0xa7d1cc: r0 = BoxInt64Instr(r4)
    //     0xa7d1cc: sbfiz           x0, x4, #1, #0x1f
    //     0xa7d1d0: cmp             x4, x0, asr #1
    //     0xa7d1d4: b.eq            #0xa7d1e0
    //     0xa7d1d8: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xa7d1dc: stur            x4, [x0, #7]
    // 0xa7d1e0: r1 = LoadClassIdInstr(r3)
    //     0xa7d1e0: ldur            x1, [x3, #-1]
    //     0xa7d1e4: ubfx            x1, x1, #0xc, #0x14
    // 0xa7d1e8: stp             x0, x3, [SP]
    // 0xa7d1ec: mov             x0, x1
    // 0xa7d1f0: r0 = GDT[cid_x0 + -0x1000]()
    //     0xa7d1f0: sub             lr, x0, #1, lsl #12
    //     0xa7d1f4: ldr             lr, [x21, lr, lsl #3]
    //     0xa7d1f8: blr             lr
    // 0xa7d1fc: cmp             w0, #0x14
    // 0xa7d200: r16 = true
    //     0xa7d200: add             x16, NULL, #0x20  ; true
    // 0xa7d204: r17 = false
    //     0xa7d204: add             x17, NULL, #0x30  ; false
    // 0xa7d208: csel            x1, x16, x17, ne
    // 0xa7d20c: mov             x0, x1
    // 0xa7d210: b               #0xa7d218
    // 0xa7d214: r0 = false
    //     0xa7d214: add             x0, NULL, #0x30  ; false
    // 0xa7d218: LeaveFrame
    //     0xa7d218: mov             SP, fp
    //     0xa7d21c: ldp             fp, lr, [SP], #0x10
    // 0xa7d220: ret
    //     0xa7d220: ret             
    // 0xa7d224: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7d224: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7d228: b               #0xa7d118
    // 0xa7d22c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d22c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _isAtWordwrapUpstream(/* No info */) {
    // ** addr: 0xa7d230, size: 0x144
    // 0xa7d230: EnterFrame
    //     0xa7d230: stp             fp, lr, [SP, #-0x10]!
    //     0xa7d234: mov             fp, SP
    // 0xa7d238: AllocStack(0x20)
    //     0xa7d238: sub             SP, SP, #0x20
    // 0xa7d23c: CheckStackOverflow
    //     0xa7d23c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7d240: cmp             SP, x16
    //     0xa7d244: b.ls            #0xa7d368
    // 0xa7d248: ldr             x0, [fp, #0x18]
    // 0xa7d24c: LoadField: r2 = r0->field_13
    //     0xa7d24c: ldur            w2, [x0, #0x13]
    // 0xa7d250: DecompressPointer r2
    //     0xa7d250: add             x2, x2, HEAP, lsl #32
    // 0xa7d254: mov             x1, x2
    // 0xa7d258: stur            x2, [fp, #-8]
    // 0xa7d25c: LoadField: r0 = r1->field_a7
    //     0xa7d25c: ldur            w0, [x1, #0xa7]
    // 0xa7d260: DecompressPointer r0
    //     0xa7d260: add             x0, x0, HEAP, lsl #32
    // 0xa7d264: r16 = Sentinel
    //     0xa7d264: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa7d268: cmp             w0, w16
    // 0xa7d26c: b.ne            #0xa7d278
    // 0xa7d270: r2 = renderEditable
    //     0xa7d270: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xa7d274: r0 = InitLateFinalInstanceField()
    //     0xa7d274: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xa7d278: ldr             x16, [fp, #0x10]
    // 0xa7d27c: stp             x16, x0, [SP]
    // 0xa7d280: r0 = getLineAtOffset()
    //     0xa7d280: bl              #0x5d7938  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLineAtOffset
    // 0xa7d284: LoadField: r1 = r0->field_f
    //     0xa7d284: ldur            x1, [x0, #0xf]
    // 0xa7d288: stur            x1, [fp, #-0x10]
    // 0xa7d28c: r16 = TextPosition
    //     0xa7d28c: ldr             x16, [PP, #0x5c90]  ; [pp+0x5c90] Type: TextPosition
    // 0xa7d290: r30 = TextPosition
    //     0xa7d290: ldr             lr, [PP, #0x5c90]  ; [pp+0x5c90] Type: TextPosition
    // 0xa7d294: stp             lr, x16, [SP]
    // 0xa7d298: r0 = ==()
    //     0xa7d298: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0xa7d29c: tbnz            w0, #4, #0xa7d358
    // 0xa7d2a0: ldr             x1, [fp, #0x10]
    // 0xa7d2a4: ldur            x0, [fp, #-0x10]
    // 0xa7d2a8: LoadField: r2 = r1->field_7
    //     0xa7d2a8: ldur            x2, [x1, #7]
    // 0xa7d2ac: cmp             x2, x0
    // 0xa7d2b0: b.ne            #0xa7d358
    // 0xa7d2b4: LoadField: r3 = r1->field_f
    //     0xa7d2b4: ldur            w3, [x1, #0xf]
    // 0xa7d2b8: DecompressPointer r3
    //     0xa7d2b8: add             x3, x3, HEAP, lsl #32
    // 0xa7d2bc: r16 = Instance_TextAffinity
    //     0xa7d2bc: ldr             x16, [PP, #0x5ce8]  ; [pp+0x5ce8] Obj!TextAffinity@c46d01
    // 0xa7d2c0: cmp             w3, w16
    // 0xa7d2c4: b.ne            #0xa7d358
    // 0xa7d2c8: ldur            x1, [fp, #-8]
    // 0xa7d2cc: LoadField: r3 = r1->field_b
    //     0xa7d2cc: ldur            w3, [x1, #0xb]
    // 0xa7d2d0: DecompressPointer r3
    //     0xa7d2d0: add             x3, x3, HEAP, lsl #32
    // 0xa7d2d4: cmp             w3, NULL
    // 0xa7d2d8: b.eq            #0xa7d370
    // 0xa7d2dc: LoadField: r1 = r3->field_b
    //     0xa7d2dc: ldur            w1, [x3, #0xb]
    // 0xa7d2e0: DecompressPointer r1
    //     0xa7d2e0: add             x1, x1, HEAP, lsl #32
    // 0xa7d2e4: LoadField: r3 = r1->field_27
    //     0xa7d2e4: ldur            w3, [x1, #0x27]
    // 0xa7d2e8: DecompressPointer r3
    //     0xa7d2e8: add             x3, x3, HEAP, lsl #32
    // 0xa7d2ec: LoadField: r1 = r3->field_7
    //     0xa7d2ec: ldur            w1, [x3, #7]
    // 0xa7d2f0: DecompressPointer r1
    //     0xa7d2f0: add             x1, x1, HEAP, lsl #32
    // 0xa7d2f4: LoadField: r4 = r1->field_7
    //     0xa7d2f4: ldur            w4, [x1, #7]
    // 0xa7d2f8: DecompressPointer r4
    //     0xa7d2f8: add             x4, x4, HEAP, lsl #32
    // 0xa7d2fc: r1 = LoadInt32Instr(r4)
    //     0xa7d2fc: sbfx            x1, x4, #1, #0x1f
    // 0xa7d300: cmp             x0, x1
    // 0xa7d304: b.eq            #0xa7d358
    // 0xa7d308: LoadField: r4 = r3->field_7
    //     0xa7d308: ldur            w4, [x3, #7]
    // 0xa7d30c: DecompressPointer r4
    //     0xa7d30c: add             x4, x4, HEAP, lsl #32
    // 0xa7d310: r0 = BoxInt64Instr(r2)
    //     0xa7d310: sbfiz           x0, x2, #1, #0x1f
    //     0xa7d314: cmp             x2, x0, asr #1
    //     0xa7d318: b.eq            #0xa7d324
    //     0xa7d31c: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xa7d320: stur            x2, [x0, #7]
    // 0xa7d324: r1 = LoadClassIdInstr(r4)
    //     0xa7d324: ldur            x1, [x4, #-1]
    //     0xa7d328: ubfx            x1, x1, #0xc, #0x14
    // 0xa7d32c: stp             x0, x4, [SP]
    // 0xa7d330: mov             x0, x1
    // 0xa7d334: r0 = GDT[cid_x0 + -0x1000]()
    //     0xa7d334: sub             lr, x0, #1, lsl #12
    //     0xa7d338: ldr             lr, [x21, lr, lsl #3]
    //     0xa7d33c: blr             lr
    // 0xa7d340: cmp             w0, #0x14
    // 0xa7d344: r16 = true
    //     0xa7d344: add             x16, NULL, #0x20  ; true
    // 0xa7d348: r17 = false
    //     0xa7d348: add             x17, NULL, #0x30  ; false
    // 0xa7d34c: csel            x1, x16, x17, ne
    // 0xa7d350: mov             x0, x1
    // 0xa7d354: b               #0xa7d35c
    // 0xa7d358: r0 = false
    //     0xa7d358: add             x0, NULL, #0x30  ; false
    // 0xa7d35c: LeaveFrame
    //     0xa7d35c: mov             SP, fp
    //     0xa7d360: ldp             fp, lr, [SP], #0x10
    // 0xa7d364: ret
    //     0xa7d364: ret             
    // 0xa7d368: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7d368: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7d36c: b               #0xa7d248
    // 0xa7d370: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7d370: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 2726, size: 0x20, field offset: 0x14
class _DeleteTextAction<X0 bound DirectionalTextEditingIntent> extends ContextAction<X0 bound DirectionalTextEditingIntent> {

  _ invoke(/* No info */) {
    // ** addr: 0xa7c358, size: 0x4c0
    // 0xa7c358: EnterFrame
    //     0xa7c358: stp             fp, lr, [SP, #-0x10]!
    //     0xa7c35c: mov             fp, SP
    // 0xa7c360: AllocStack(0x70)
    //     0xa7c360: sub             SP, SP, #0x70
    // 0xa7c364: SetupParameters(_DeleteTextAction<X0 bound DirectionalTextEditingIntent> this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, [dynamic _ = Null /* r5, fp-0x8 */])
    //     0xa7c364: mov             x0, x4
    //     0xa7c368: ldur            w1, [x0, #0x13]
    //     0xa7c36c: add             x1, x1, HEAP, lsl #32
    //     0xa7c370: sub             x0, x1, #4
    //     0xa7c374: add             x3, fp, w0, sxtw #2
    //     0xa7c378: ldr             x3, [x3, #0x18]
    //     0xa7c37c: stur            x3, [fp, #-0x18]
    //     0xa7c380: add             x4, fp, w0, sxtw #2
    //     0xa7c384: ldr             x4, [x4, #0x10]
    //     0xa7c388: stur            x4, [fp, #-0x10]
    //     0xa7c38c: cmp             w0, #2
    //     0xa7c390: b.lt            #0xa7c3a4
    //     0xa7c394: add             x1, fp, w0, sxtw #2
    //     0xa7c398: ldr             x1, [x1, #8]
    //     0xa7c39c: mov             x5, x1
    //     0xa7c3a0: b               #0xa7c3a8
    //     0xa7c3a4: mov             x5, NULL
    //     0xa7c3a8: stur            x5, [fp, #-8]
    // 0xa7c3ac: CheckStackOverflow
    //     0xa7c3ac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7c3b0: cmp             SP, x16
    //     0xa7c3b4: b.ls            #0xa7c7f4
    // 0xa7c3b8: LoadField: r2 = r3->field_7
    //     0xa7c3b8: ldur            w2, [x3, #7]
    // 0xa7c3bc: DecompressPointer r2
    //     0xa7c3bc: add             x2, x2, HEAP, lsl #32
    // 0xa7c3c0: mov             x0, x4
    // 0xa7c3c4: r1 = Null
    //     0xa7c3c4: mov             x1, NULL
    // 0xa7c3c8: cmp             w2, NULL
    // 0xa7c3cc: b.eq            #0xa7c3f0
    // 0xa7c3d0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0xa7c3d0: ldur            w4, [x2, #0x17]
    // 0xa7c3d4: DecompressPointer r4
    //     0xa7c3d4: add             x4, x4, HEAP, lsl #32
    // 0xa7c3d8: r8 = X0 bound DirectionalTextEditingIntent
    //     0xa7c3d8: add             x8, PP, #0x47, lsl #12  ; [pp+0x47458] TypeParameter: X0 bound DirectionalTextEditingIntent
    //     0xa7c3dc: ldr             x8, [x8, #0x458]
    // 0xa7c3e0: LoadField: r9 = r4->field_7
    //     0xa7c3e0: ldur            x9, [x4, #7]
    // 0xa7c3e4: r3 = Null
    //     0xa7c3e4: add             x3, PP, #0x47, lsl #12  ; [pp+0x47460] Null
    //     0xa7c3e8: ldr             x3, [x3, #0x460]
    // 0xa7c3ec: blr             x9
    // 0xa7c3f0: ldur            x0, [fp, #-0x18]
    // 0xa7c3f4: LoadField: r1 = r0->field_13
    //     0xa7c3f4: ldur            w1, [x0, #0x13]
    // 0xa7c3f8: DecompressPointer r1
    //     0xa7c3f8: add             x1, x1, HEAP, lsl #32
    // 0xa7c3fc: stur            x1, [fp, #-0x38]
    // 0xa7c400: LoadField: r2 = r1->field_b
    //     0xa7c400: ldur            w2, [x1, #0xb]
    // 0xa7c404: DecompressPointer r2
    //     0xa7c404: add             x2, x2, HEAP, lsl #32
    // 0xa7c408: cmp             w2, NULL
    // 0xa7c40c: b.eq            #0xa7c7fc
    // 0xa7c410: LoadField: r3 = r2->field_b
    //     0xa7c410: ldur            w3, [x2, #0xb]
    // 0xa7c414: DecompressPointer r3
    //     0xa7c414: add             x3, x3, HEAP, lsl #32
    // 0xa7c418: LoadField: r2 = r3->field_27
    //     0xa7c418: ldur            w2, [x3, #0x27]
    // 0xa7c41c: DecompressPointer r2
    //     0xa7c41c: add             x2, x2, HEAP, lsl #32
    // 0xa7c420: LoadField: r3 = r2->field_b
    //     0xa7c420: ldur            w3, [x2, #0xb]
    // 0xa7c424: DecompressPointer r3
    //     0xa7c424: add             x3, x3, HEAP, lsl #32
    // 0xa7c428: stur            x3, [fp, #-0x30]
    // 0xa7c42c: LoadField: r2 = r3->field_7
    //     0xa7c42c: ldur            x2, [x3, #7]
    // 0xa7c430: stur            x2, [fp, #-0x28]
    // 0xa7c434: tbnz            x2, #0x3f, #0xa7c7e4
    // 0xa7c438: LoadField: r4 = r3->field_f
    //     0xa7c438: ldur            x4, [x3, #0xf]
    // 0xa7c43c: stur            x4, [fp, #-0x20]
    // 0xa7c440: tbnz            x4, #0x3f, #0xa7c7e4
    // 0xa7c444: str             x1, [SP]
    // 0xa7c448: r0 = _characterBoundary()
    //     0xa7c448: bl              #0xa7c818  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary
    // 0xa7c44c: mov             x2, x0
    // 0xa7c450: ldur            x0, [fp, #-0x28]
    // 0xa7c454: ldur            x1, [fp, #-0x20]
    // 0xa7c458: stur            x2, [fp, #-0x40]
    // 0xa7c45c: cmp             x0, x1
    // 0xa7c460: b.eq            #0xa7c5a8
    // 0xa7c464: stp             x0, x2, [SP]
    // 0xa7c468: r0 = getLeadingTextBoundaryAt()
    //     0xa7c468: bl              #0xc1b39c  ; [package:flutter/src/services/text_boundary.dart] CharacterBoundary::getLeadingTextBoundaryAt
    // 0xa7c46c: cmp             w0, NULL
    // 0xa7c470: b.ne            #0xa7c4b0
    // 0xa7c474: ldur            x1, [fp, #-0x38]
    // 0xa7c478: LoadField: r0 = r1->field_b
    //     0xa7c478: ldur            w0, [x1, #0xb]
    // 0xa7c47c: DecompressPointer r0
    //     0xa7c47c: add             x0, x0, HEAP, lsl #32
    // 0xa7c480: cmp             w0, NULL
    // 0xa7c484: b.eq            #0xa7c800
    // 0xa7c488: LoadField: r2 = r0->field_b
    //     0xa7c488: ldur            w2, [x0, #0xb]
    // 0xa7c48c: DecompressPointer r2
    //     0xa7c48c: add             x2, x2, HEAP, lsl #32
    // 0xa7c490: LoadField: r0 = r2->field_27
    //     0xa7c490: ldur            w0, [x2, #0x27]
    // 0xa7c494: DecompressPointer r0
    //     0xa7c494: add             x0, x0, HEAP, lsl #32
    // 0xa7c498: LoadField: r2 = r0->field_7
    //     0xa7c498: ldur            w2, [x0, #7]
    // 0xa7c49c: DecompressPointer r2
    //     0xa7c49c: add             x2, x2, HEAP, lsl #32
    // 0xa7c4a0: LoadField: r0 = r2->field_7
    //     0xa7c4a0: ldur            w0, [x2, #7]
    // 0xa7c4a4: DecompressPointer r0
    //     0xa7c4a4: add             x0, x0, HEAP, lsl #32
    // 0xa7c4a8: r2 = LoadInt32Instr(r0)
    //     0xa7c4a8: sbfx            x2, x0, #1, #0x1f
    // 0xa7c4ac: b               #0xa7c4c0
    // 0xa7c4b0: ldur            x1, [fp, #-0x38]
    // 0xa7c4b4: r2 = LoadInt32Instr(r0)
    //     0xa7c4b4: sbfx            x2, x0, #1, #0x1f
    //     0xa7c4b8: tbz             w0, #0, #0xa7c4c0
    //     0xa7c4bc: ldur            x2, [x0, #7]
    // 0xa7c4c0: ldur            x0, [fp, #-0x20]
    // 0xa7c4c4: stur            x2, [fp, #-0x28]
    // 0xa7c4c8: sub             x3, x0, #1
    // 0xa7c4cc: ldur            x16, [fp, #-0x40]
    // 0xa7c4d0: stp             x3, x16, [SP]
    // 0xa7c4d4: r0 = getTrailingTextBoundaryAt()
    //     0xa7c4d4: bl              #0xc1ae20  ; [package:flutter/src/services/text_boundary.dart] CharacterBoundary::getTrailingTextBoundaryAt
    // 0xa7c4d8: cmp             w0, NULL
    // 0xa7c4dc: b.ne            #0xa7c4e8
    // 0xa7c4e0: r3 = 0
    //     0xa7c4e0: movz            x3, #0
    // 0xa7c4e4: b               #0xa7c4f8
    // 0xa7c4e8: r1 = LoadInt32Instr(r0)
    //     0xa7c4e8: sbfx            x1, x0, #1, #0x1f
    //     0xa7c4ec: tbz             w0, #0, #0xa7c4f4
    //     0xa7c4f0: ldur            x1, [x0, #7]
    // 0xa7c4f4: mov             x3, x1
    // 0xa7c4f8: ldur            x2, [fp, #-8]
    // 0xa7c4fc: ldur            x0, [fp, #-0x38]
    // 0xa7c500: ldur            x1, [fp, #-0x28]
    // 0xa7c504: stur            x3, [fp, #-0x20]
    // 0xa7c508: r0 = TextRange()
    //     0xa7c508: bl              #0x5cc350  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0xa7c50c: mov             x1, x0
    // 0xa7c510: ldur            x0, [fp, #-0x28]
    // 0xa7c514: stur            x1, [fp, #-0x50]
    // 0xa7c518: StoreField: r1->field_7 = r0
    //     0xa7c518: stur            x0, [x1, #7]
    // 0xa7c51c: ldur            x0, [fp, #-0x20]
    // 0xa7c520: StoreField: r1->field_f = r0
    //     0xa7c520: stur            x0, [x1, #0xf]
    // 0xa7c524: ldur            x0, [fp, #-8]
    // 0xa7c528: cmp             w0, NULL
    // 0xa7c52c: b.eq            #0xa7c804
    // 0xa7c530: ldur            x2, [fp, #-0x38]
    // 0xa7c534: LoadField: r3 = r2->field_b
    //     0xa7c534: ldur            w3, [x2, #0xb]
    // 0xa7c538: DecompressPointer r3
    //     0xa7c538: add             x3, x3, HEAP, lsl #32
    // 0xa7c53c: cmp             w3, NULL
    // 0xa7c540: b.eq            #0xa7c808
    // 0xa7c544: LoadField: r2 = r3->field_b
    //     0xa7c544: ldur            w2, [x3, #0xb]
    // 0xa7c548: DecompressPointer r2
    //     0xa7c548: add             x2, x2, HEAP, lsl #32
    // 0xa7c54c: LoadField: r3 = r2->field_27
    //     0xa7c54c: ldur            w3, [x2, #0x27]
    // 0xa7c550: DecompressPointer r3
    //     0xa7c550: add             x3, x3, HEAP, lsl #32
    // 0xa7c554: stur            x3, [fp, #-0x48]
    // 0xa7c558: r0 = ReplaceTextIntent()
    //     0xa7c558: bl              #0x69eef4  ; AllocateReplaceTextIntentStub -> ReplaceTextIntent (size=0x18)
    // 0xa7c55c: mov             x1, x0
    // 0xa7c560: ldur            x0, [fp, #-0x48]
    // 0xa7c564: StoreField: r1->field_7 = r0
    //     0xa7c564: stur            w0, [x1, #7]
    // 0xa7c568: r0 = ""
    //     0xa7c568: ldr             x0, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0xa7c56c: StoreField: r1->field_b = r0
    //     0xa7c56c: stur            w0, [x1, #0xb]
    // 0xa7c570: ldur            x0, [fp, #-0x50]
    // 0xa7c574: StoreField: r1->field_f = r0
    //     0xa7c574: stur            w0, [x1, #0xf]
    // 0xa7c578: r3 = Instance_SelectionChangedCause
    //     0xa7c578: ldr             x3, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7c57c: StoreField: r1->field_13 = r3
    //     0xa7c57c: stur            w3, [x1, #0x13]
    // 0xa7c580: r16 = <ReplaceTextIntent>
    //     0xa7c580: add             x16, PP, #0x41, lsl #12  ; [pp+0x413c8] TypeArguments: <ReplaceTextIntent>
    //     0xa7c584: ldr             x16, [x16, #0x3c8]
    // 0xa7c588: ldur            lr, [fp, #-8]
    // 0xa7c58c: stp             lr, x16, [SP, #8]
    // 0xa7c590: str             x1, [SP]
    // 0xa7c594: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7c594: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7c598: r0 = invoke()
    //     0xa7c598: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7c59c: LeaveFrame
    //     0xa7c59c: mov             SP, fp
    //     0xa7c5a0: ldp             fp, lr, [SP], #0x10
    // 0xa7c5a4: ret
    //     0xa7c5a4: ret             
    // 0xa7c5a8: ldur            x1, [fp, #-0x18]
    // 0xa7c5ac: ldur            x4, [fp, #-0x10]
    // 0xa7c5b0: ldur            x2, [fp, #-0x38]
    // 0xa7c5b4: r3 = Instance_SelectionChangedCause
    //     0xa7c5b4: ldr             x3, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7c5b8: r0 = ""
    //     0xa7c5b8: ldr             x0, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0xa7c5bc: ldur            x16, [fp, #-0x30]
    // 0xa7c5c0: str             x16, [SP]
    // 0xa7c5c4: r0 = base()
    //     0xa7c5c4: bl              #0x5d4d24  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0xa7c5c8: mov             x1, x0
    // 0xa7c5cc: ldur            x0, [fp, #-0x10]
    // 0xa7c5d0: stur            x1, [fp, #-0x50]
    // 0xa7c5d4: LoadField: r2 = r0->field_7
    //     0xa7c5d4: ldur            w2, [x0, #7]
    // 0xa7c5d8: DecompressPointer r2
    //     0xa7c5d8: add             x2, x2, HEAP, lsl #32
    // 0xa7c5dc: ldur            x3, [fp, #-0x18]
    // 0xa7c5e0: stur            x2, [fp, #-0x48]
    // 0xa7c5e4: ArrayLoad: r0 = r3[0]  ; List_4
    //     0xa7c5e4: ldur            w0, [x3, #0x17]
    // 0xa7c5e8: DecompressPointer r0
    //     0xa7c5e8: add             x0, x0, HEAP, lsl #32
    // 0xa7c5ec: str             x0, [SP]
    // 0xa7c5f0: ClosureCall
    //     0xa7c5f0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0xa7c5f4: ldur            x2, [x0, #0x1f]
    //     0xa7c5f8: blr             x2
    // 0xa7c5fc: mov             x1, x0
    // 0xa7c600: ldur            x0, [fp, #-0x18]
    // 0xa7c604: LoadField: r2 = r0->field_1b
    //     0xa7c604: ldur            w2, [x0, #0x1b]
    // 0xa7c608: DecompressPointer r2
    //     0xa7c608: add             x2, x2, HEAP, lsl #32
    // 0xa7c60c: ldur            x16, [fp, #-0x50]
    // 0xa7c610: stp             x16, x2, [SP, #0x10]
    // 0xa7c614: ldur            x16, [fp, #-0x48]
    // 0xa7c618: stp             x1, x16, [SP]
    // 0xa7c61c: mov             x0, x2
    // 0xa7c620: ClosureCall
    //     0xa7c620: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    //     0xa7c624: ldur            x2, [x0, #0x1f]
    //     0xa7c628: blr             x2
    // 0xa7c62c: LoadField: r1 = r0->field_7
    //     0xa7c62c: ldur            x1, [x0, #7]
    // 0xa7c630: ldur            x0, [fp, #-0x48]
    // 0xa7c634: stur            x1, [fp, #-0x20]
    // 0xa7c638: tbnz            w0, #4, #0xa7c6b4
    // 0xa7c63c: ldur            x0, [fp, #-0x30]
    // 0xa7c640: ArrayLoad: r2 = r0[0]  ; List_8
    //     0xa7c640: ldur            x2, [x0, #0x17]
    // 0xa7c644: ldur            x16, [fp, #-0x40]
    // 0xa7c648: stp             x2, x16, [SP]
    // 0xa7c64c: r0 = getLeadingTextBoundaryAt()
    //     0xa7c64c: bl              #0xc1b39c  ; [package:flutter/src/services/text_boundary.dart] CharacterBoundary::getLeadingTextBoundaryAt
    // 0xa7c650: cmp             w0, NULL
    // 0xa7c654: b.ne            #0xa7c698
    // 0xa7c658: ldur            x1, [fp, #-0x38]
    // 0xa7c65c: LoadField: r0 = r1->field_b
    //     0xa7c65c: ldur            w0, [x1, #0xb]
    // 0xa7c660: DecompressPointer r0
    //     0xa7c660: add             x0, x0, HEAP, lsl #32
    // 0xa7c664: cmp             w0, NULL
    // 0xa7c668: b.eq            #0xa7c80c
    // 0xa7c66c: LoadField: r2 = r0->field_b
    //     0xa7c66c: ldur            w2, [x0, #0xb]
    // 0xa7c670: DecompressPointer r2
    //     0xa7c670: add             x2, x2, HEAP, lsl #32
    // 0xa7c674: LoadField: r0 = r2->field_27
    //     0xa7c674: ldur            w0, [x2, #0x27]
    // 0xa7c678: DecompressPointer r0
    //     0xa7c678: add             x0, x0, HEAP, lsl #32
    // 0xa7c67c: LoadField: r2 = r0->field_7
    //     0xa7c67c: ldur            w2, [x0, #7]
    // 0xa7c680: DecompressPointer r2
    //     0xa7c680: add             x2, x2, HEAP, lsl #32
    // 0xa7c684: LoadField: r0 = r2->field_7
    //     0xa7c684: ldur            w0, [x2, #7]
    // 0xa7c688: DecompressPointer r0
    //     0xa7c688: add             x0, x0, HEAP, lsl #32
    // 0xa7c68c: r2 = LoadInt32Instr(r0)
    //     0xa7c68c: sbfx            x2, x0, #1, #0x1f
    // 0xa7c690: mov             x0, x2
    // 0xa7c694: b               #0xa7c6ac
    // 0xa7c698: ldur            x1, [fp, #-0x38]
    // 0xa7c69c: r2 = LoadInt32Instr(r0)
    //     0xa7c69c: sbfx            x2, x0, #1, #0x1f
    //     0xa7c6a0: tbz             w0, #0, #0xa7c6a8
    //     0xa7c6a4: ldur            x2, [x0, #7]
    // 0xa7c6a8: mov             x0, x2
    // 0xa7c6ac: mov             x1, x0
    // 0xa7c6b0: b               #0xa7c6f4
    // 0xa7c6b4: ldur            x1, [fp, #-0x38]
    // 0xa7c6b8: ldur            x0, [fp, #-0x30]
    // 0xa7c6bc: ArrayLoad: r2 = r0[0]  ; List_8
    //     0xa7c6bc: ldur            x2, [x0, #0x17]
    // 0xa7c6c0: sub             x0, x2, #1
    // 0xa7c6c4: ldur            x16, [fp, #-0x40]
    // 0xa7c6c8: stp             x0, x16, [SP]
    // 0xa7c6cc: r0 = getTrailingTextBoundaryAt()
    //     0xa7c6cc: bl              #0xc1ae20  ; [package:flutter/src/services/text_boundary.dart] CharacterBoundary::getTrailingTextBoundaryAt
    // 0xa7c6d0: cmp             w0, NULL
    // 0xa7c6d4: b.ne            #0xa7c6e0
    // 0xa7c6d8: r0 = 0
    //     0xa7c6d8: movz            x0, #0
    // 0xa7c6dc: b               #0xa7c6f0
    // 0xa7c6e0: r1 = LoadInt32Instr(r0)
    //     0xa7c6e0: sbfx            x1, x0, #1, #0x1f
    //     0xa7c6e4: tbz             w0, #0, #0xa7c6ec
    //     0xa7c6e8: ldur            x1, [x0, #7]
    // 0xa7c6ec: mov             x0, x1
    // 0xa7c6f0: mov             x1, x0
    // 0xa7c6f4: ldur            x0, [fp, #-0x20]
    // 0xa7c6f8: stur            x1, [fp, #-0x28]
    // 0xa7c6fc: r0 = TextSelection()
    //     0xa7c6fc: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xa7c700: mov             x1, x0
    // 0xa7c704: ldur            x0, [fp, #-0x28]
    // 0xa7c708: stur            x1, [fp, #-0x18]
    // 0xa7c70c: ArrayStore: r1[0] = r0  ; List_8
    //     0xa7c70c: stur            x0, [x1, #0x17]
    // 0xa7c710: ldur            x2, [fp, #-0x20]
    // 0xa7c714: StoreField: r1->field_1f = r2
    //     0xa7c714: stur            x2, [x1, #0x1f]
    // 0xa7c718: r3 = Instance_TextAffinity
    //     0xa7c718: ldr             x3, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xa7c71c: StoreField: r1->field_27 = r3
    //     0xa7c71c: stur            w3, [x1, #0x27]
    // 0xa7c720: r3 = false
    //     0xa7c720: add             x3, NULL, #0x30  ; false
    // 0xa7c724: StoreField: r1->field_2b = r3
    //     0xa7c724: stur            w3, [x1, #0x2b]
    // 0xa7c728: cmp             x0, x2
    // 0xa7c72c: r16 = true
    //     0xa7c72c: add             x16, NULL, #0x20  ; true
    // 0xa7c730: r17 = false
    //     0xa7c730: add             x17, NULL, #0x30  ; false
    // 0xa7c734: csel            x3, x16, x17, lt
    // 0xa7c738: tbnz            w3, #4, #0xa7c744
    // 0xa7c73c: mov             x4, x0
    // 0xa7c740: b               #0xa7c748
    // 0xa7c744: mov             x4, x2
    // 0xa7c748: tbnz            w3, #4, #0xa7c754
    // 0xa7c74c: mov             x3, x2
    // 0xa7c750: b               #0xa7c758
    // 0xa7c754: mov             x3, x0
    // 0xa7c758: ldur            x2, [fp, #-8]
    // 0xa7c75c: ldur            x0, [fp, #-0x38]
    // 0xa7c760: StoreField: r1->field_7 = r4
    //     0xa7c760: stur            x4, [x1, #7]
    // 0xa7c764: StoreField: r1->field_f = r3
    //     0xa7c764: stur            x3, [x1, #0xf]
    // 0xa7c768: cmp             w2, NULL
    // 0xa7c76c: b.eq            #0xa7c810
    // 0xa7c770: LoadField: r3 = r0->field_b
    //     0xa7c770: ldur            w3, [x0, #0xb]
    // 0xa7c774: DecompressPointer r3
    //     0xa7c774: add             x3, x3, HEAP, lsl #32
    // 0xa7c778: cmp             w3, NULL
    // 0xa7c77c: b.eq            #0xa7c814
    // 0xa7c780: LoadField: r0 = r3->field_b
    //     0xa7c780: ldur            w0, [x3, #0xb]
    // 0xa7c784: DecompressPointer r0
    //     0xa7c784: add             x0, x0, HEAP, lsl #32
    // 0xa7c788: LoadField: r3 = r0->field_27
    //     0xa7c788: ldur            w3, [x0, #0x27]
    // 0xa7c78c: DecompressPointer r3
    //     0xa7c78c: add             x3, x3, HEAP, lsl #32
    // 0xa7c790: stur            x3, [fp, #-0x10]
    // 0xa7c794: r0 = ReplaceTextIntent()
    //     0xa7c794: bl              #0x69eef4  ; AllocateReplaceTextIntentStub -> ReplaceTextIntent (size=0x18)
    // 0xa7c798: mov             x1, x0
    // 0xa7c79c: ldur            x0, [fp, #-0x10]
    // 0xa7c7a0: StoreField: r1->field_7 = r0
    //     0xa7c7a0: stur            w0, [x1, #7]
    // 0xa7c7a4: r0 = ""
    //     0xa7c7a4: ldr             x0, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0xa7c7a8: StoreField: r1->field_b = r0
    //     0xa7c7a8: stur            w0, [x1, #0xb]
    // 0xa7c7ac: ldur            x0, [fp, #-0x18]
    // 0xa7c7b0: StoreField: r1->field_f = r0
    //     0xa7c7b0: stur            w0, [x1, #0xf]
    // 0xa7c7b4: r0 = Instance_SelectionChangedCause
    //     0xa7c7b4: ldr             x0, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xa7c7b8: StoreField: r1->field_13 = r0
    //     0xa7c7b8: stur            w0, [x1, #0x13]
    // 0xa7c7bc: r16 = <ReplaceTextIntent>
    //     0xa7c7bc: add             x16, PP, #0x41, lsl #12  ; [pp+0x413c8] TypeArguments: <ReplaceTextIntent>
    //     0xa7c7c0: ldr             x16, [x16, #0x3c8]
    // 0xa7c7c4: ldur            lr, [fp, #-8]
    // 0xa7c7c8: stp             lr, x16, [SP, #8]
    // 0xa7c7cc: str             x1, [SP]
    // 0xa7c7d0: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xa7c7d0: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xa7c7d4: r0 = invoke()
    //     0xa7c7d4: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xa7c7d8: LeaveFrame
    //     0xa7c7d8: mov             SP, fp
    //     0xa7c7dc: ldp             fp, lr, [SP], #0x10
    // 0xa7c7e0: ret
    //     0xa7c7e0: ret             
    // 0xa7c7e4: r0 = Null
    //     0xa7c7e4: mov             x0, NULL
    // 0xa7c7e8: LeaveFrame
    //     0xa7c7e8: mov             SP, fp
    //     0xa7c7ec: ldp             fp, lr, [SP], #0x10
    // 0xa7c7f0: ret
    //     0xa7c7f0: ret             
    // 0xa7c7f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7c7f4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7c7f8: b               #0xa7c3b8
    // 0xa7c7fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c7fc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c800: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c800: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c804: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c804: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c808: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c808: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c80c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c80c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c810: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c810: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa7c814: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c814: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ isActionEnabled(/* No info */) {
    // ** addr: 0xb19c4c, size: 0x8c
    // 0xb19c4c: EnterFrame
    //     0xb19c4c: stp             fp, lr, [SP, #-0x10]!
    //     0xb19c50: mov             fp, SP
    // 0xb19c54: ldr             x1, [fp, #0x10]
    // 0xb19c58: LoadField: r2 = r1->field_13
    //     0xb19c58: ldur            w2, [x1, #0x13]
    // 0xb19c5c: DecompressPointer r2
    //     0xb19c5c: add             x2, x2, HEAP, lsl #32
    // 0xb19c60: LoadField: r1 = r2->field_b
    //     0xb19c60: ldur            w1, [x2, #0xb]
    // 0xb19c64: DecompressPointer r1
    //     0xb19c64: add             x1, x1, HEAP, lsl #32
    // 0xb19c68: cmp             w1, NULL
    // 0xb19c6c: b.eq            #0xb19cd4
    // 0xb19c70: LoadField: r2 = r1->field_23
    //     0xb19c70: ldur            w2, [x1, #0x23]
    // 0xb19c74: DecompressPointer r2
    //     0xb19c74: add             x2, x2, HEAP, lsl #32
    // 0xb19c78: tbz             w2, #4, #0xb19cc4
    // 0xb19c7c: LoadField: r2 = r1->field_b
    //     0xb19c7c: ldur            w2, [x1, #0xb]
    // 0xb19c80: DecompressPointer r2
    //     0xb19c80: add             x2, x2, HEAP, lsl #32
    // 0xb19c84: LoadField: r1 = r2->field_27
    //     0xb19c84: ldur            w1, [x2, #0x27]
    // 0xb19c88: DecompressPointer r1
    //     0xb19c88: add             x1, x1, HEAP, lsl #32
    // 0xb19c8c: LoadField: r2 = r1->field_b
    //     0xb19c8c: ldur            w2, [x1, #0xb]
    // 0xb19c90: DecompressPointer r2
    //     0xb19c90: add             x2, x2, HEAP, lsl #32
    // 0xb19c94: LoadField: r1 = r2->field_7
    //     0xb19c94: ldur            x1, [x2, #7]
    // 0xb19c98: tbnz            x1, #0x3f, #0xb19cb8
    // 0xb19c9c: LoadField: r1 = r2->field_f
    //     0xb19c9c: ldur            x1, [x2, #0xf]
    // 0xb19ca0: tbz             x1, #0x3f, #0xb19cac
    // 0xb19ca4: r2 = false
    //     0xb19ca4: add             x2, NULL, #0x30  ; false
    // 0xb19ca8: b               #0xb19cb0
    // 0xb19cac: r2 = true
    //     0xb19cac: add             x2, NULL, #0x20  ; true
    // 0xb19cb0: mov             x1, x2
    // 0xb19cb4: b               #0xb19cbc
    // 0xb19cb8: r1 = false
    //     0xb19cb8: add             x1, NULL, #0x30  ; false
    // 0xb19cbc: mov             x0, x1
    // 0xb19cc0: b               #0xb19cc8
    // 0xb19cc4: r0 = false
    //     0xb19cc4: add             x0, NULL, #0x30  ; false
    // 0xb19cc8: LeaveFrame
    //     0xb19cc8: mov             SP, fp
    //     0xb19ccc: ldp             fp, lr, [SP], #0x10
    // 0xb19cd0: ret
    //     0xb19cd0: ret             
    // 0xb19cd4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xb19cd4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 3138, size: 0x18, field offset: 0x14
class _ScribbleFocusableState extends State<dynamic>
    implements ScribbleClient {

  _ onScribbleFocus(/* No info */) {
    // ** addr: 0x5e436c, size: 0xb8
    // 0x5e436c: EnterFrame
    //     0x5e436c: stp             fp, lr, [SP, #-0x10]!
    //     0x5e4370: mov             fp, SP
    // 0x5e4374: AllocStack(0x18)
    //     0x5e4374: sub             SP, SP, #0x18
    // 0x5e4378: CheckStackOverflow
    //     0x5e4378: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e437c: cmp             SP, x16
    //     0x5e4380: b.ls            #0x5e4414
    // 0x5e4384: ldr             x0, [fp, #0x18]
    // 0x5e4388: LoadField: r1 = r0->field_b
    //     0x5e4388: ldur            w1, [x0, #0xb]
    // 0x5e438c: DecompressPointer r1
    //     0x5e438c: add             x1, x1, HEAP, lsl #32
    // 0x5e4390: cmp             w1, NULL
    // 0x5e4394: b.eq            #0x5e441c
    // 0x5e4398: LoadField: r2 = r1->field_f
    //     0x5e4398: ldur            w2, [x1, #0xf]
    // 0x5e439c: DecompressPointer r2
    //     0x5e439c: add             x2, x2, HEAP, lsl #32
    // 0x5e43a0: str             x2, [SP]
    // 0x5e43a4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5e43a4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5e43a8: r0 = requestFocus()
    //     0x5e43a8: bl              #0x5d4f00  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x5e43ac: ldr             x16, [fp, #0x18]
    // 0x5e43b0: str             x16, [SP]
    // 0x5e43b4: r0 = renderEditable()
    //     0x5e43b4: bl              #0x5e4910  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x5e43b8: cmp             w0, NULL
    // 0x5e43bc: b.eq            #0x5e43d8
    // 0x5e43c0: r16 = Instance_SelectionChangedCause
    //     0x5e43c0: ldr             x16, [PP, #0x61b0]  ; [pp+0x61b0] Obj!SelectionChangedCause@c43011
    // 0x5e43c4: stp             x16, x0, [SP, #8]
    // 0x5e43c8: ldr             x16, [fp, #0x10]
    // 0x5e43cc: str             x16, [SP]
    // 0x5e43d0: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x5e43d0: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x5e43d4: r0 = selectPositionAt()
    //     0x5e43d4: bl              #0x5e4468  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectPositionAt
    // 0x5e43d8: ldr             x0, [fp, #0x18]
    // 0x5e43dc: LoadField: r1 = r0->field_b
    //     0x5e43dc: ldur            w1, [x0, #0xb]
    // 0x5e43e0: DecompressPointer r1
    //     0x5e43e0: add             x1, x1, HEAP, lsl #32
    // 0x5e43e4: cmp             w1, NULL
    // 0x5e43e8: b.eq            #0x5e4420
    // 0x5e43ec: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x5e43ec: ldur            w0, [x1, #0x17]
    // 0x5e43f0: DecompressPointer r0
    //     0x5e43f0: add             x0, x0, HEAP, lsl #32
    // 0x5e43f4: str             x0, [SP]
    // 0x5e43f8: ClosureCall
    //     0x5e43f8: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x5e43fc: ldur            x2, [x0, #0x1f]
    //     0x5e4400: blr             x2
    // 0x5e4404: r0 = Null
    //     0x5e4404: mov             x0, NULL
    // 0x5e4408: LeaveFrame
    //     0x5e4408: mov             SP, fp
    //     0x5e440c: ldp             fp, lr, [SP], #0x10
    // 0x5e4410: ret
    //     0x5e4410: ret             
    // 0x5e4414: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e4414: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e4418: b               #0x5e4384
    // 0x5e441c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e441c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e4420: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e4420: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ renderEditable(/* No info */) {
    // ** addr: 0x5e4910, size: 0xa0
    // 0x5e4910: EnterFrame
    //     0x5e4910: stp             fp, lr, [SP, #-0x10]!
    //     0x5e4914: mov             fp, SP
    // 0x5e4918: AllocStack(0x10)
    //     0x5e4918: sub             SP, SP, #0x10
    // 0x5e491c: CheckStackOverflow
    //     0x5e491c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e4920: cmp             SP, x16
    //     0x5e4924: b.ls            #0x5e49a4
    // 0x5e4928: ldr             x0, [fp, #0x10]
    // 0x5e492c: LoadField: r1 = r0->field_b
    //     0x5e492c: ldur            w1, [x0, #0xb]
    // 0x5e4930: DecompressPointer r1
    //     0x5e4930: add             x1, x1, HEAP, lsl #32
    // 0x5e4934: cmp             w1, NULL
    // 0x5e4938: b.eq            #0x5e49ac
    // 0x5e493c: LoadField: r0 = r1->field_13
    //     0x5e493c: ldur            w0, [x1, #0x13]
    // 0x5e4940: DecompressPointer r0
    //     0x5e4940: add             x0, x0, HEAP, lsl #32
    // 0x5e4944: str             x0, [SP]
    // 0x5e4948: r0 = _currentElement()
    //     0x5e4948: bl              #0x5b02fc  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x5e494c: cmp             w0, NULL
    // 0x5e4950: b.ne            #0x5e495c
    // 0x5e4954: r3 = Null
    //     0x5e4954: mov             x3, NULL
    // 0x5e4958: b               #0x5e4968
    // 0x5e495c: str             x0, [SP]
    // 0x5e4960: r0 = findRenderObject()
    //     0x5e4960: bl              #0x5c8648  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x5e4964: mov             x3, x0
    // 0x5e4968: mov             x0, x3
    // 0x5e496c: stur            x3, [fp, #-8]
    // 0x5e4970: r2 = Null
    //     0x5e4970: mov             x2, NULL
    // 0x5e4974: r1 = Null
    //     0x5e4974: mov             x1, NULL
    // 0x5e4978: r4 = LoadClassIdInstr(r0)
    //     0x5e4978: ldur            x4, [x0, #-1]
    //     0x5e497c: ubfx            x4, x4, #0xc, #0x14
    // 0x5e4980: cmp             x4, #0x811
    // 0x5e4984: b.eq            #0x5e4994
    // 0x5e4988: r8 = RenderEditable?
    //     0x5e4988: ldr             x8, [PP, #0x5798]  ; [pp+0x5798] Type: RenderEditable?
    // 0x5e498c: r3 = Null
    //     0x5e498c: ldr             x3, [PP, #0x57a0]  ; [pp+0x57a0] Null
    // 0x5e4990: r0 = DefaultNullableTypeTest()
    //     0x5e4990: bl              #0xc5cf30  ; DefaultNullableTypeTestStub
    // 0x5e4994: ldur            x0, [fp, #-8]
    // 0x5e4998: LeaveFrame
    //     0x5e4998: mov             SP, fp
    //     0x5e499c: ldp             fp, lr, [SP], #0x10
    // 0x5e49a0: ret
    //     0x5e49a0: ret             
    // 0x5e49a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e49a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e49a8: b               #0x5e4928
    // 0x5e49ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e49ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ bounds(/* No info */) {
    // ** addr: 0x5e5a44, size: 0x130
    // 0x5e5a44: EnterFrame
    //     0x5e5a44: stp             fp, lr, [SP, #-0x10]!
    //     0x5e5a48: mov             fp, SP
    // 0x5e5a4c: AllocStack(0x30)
    //     0x5e5a4c: sub             SP, SP, #0x30
    // 0x5e5a50: CheckStackOverflow
    //     0x5e5a50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e5a54: cmp             SP, x16
    //     0x5e5a58: b.ls            #0x5e5b68
    // 0x5e5a5c: ldr             x0, [fp, #0x10]
    // 0x5e5a60: LoadField: r1 = r0->field_f
    //     0x5e5a60: ldur            w1, [x0, #0xf]
    // 0x5e5a64: DecompressPointer r1
    //     0x5e5a64: add             x1, x1, HEAP, lsl #32
    // 0x5e5a68: cmp             w1, NULL
    // 0x5e5a6c: b.eq            #0x5e5b70
    // 0x5e5a70: str             x1, [SP]
    // 0x5e5a74: r0 = findRenderObject()
    //     0x5e5a74: bl              #0x5c8648  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x5e5a78: mov             x3, x0
    // 0x5e5a7c: r2 = Null
    //     0x5e5a7c: mov             x2, NULL
    // 0x5e5a80: r1 = Null
    //     0x5e5a80: mov             x1, NULL
    // 0x5e5a84: stur            x3, [fp, #-8]
    // 0x5e5a88: r4 = LoadClassIdInstr(r0)
    //     0x5e5a88: ldur            x4, [x0, #-1]
    //     0x5e5a8c: ubfx            x4, x4, #0xc, #0x14
    // 0x5e5a90: sub             x4, x4, #0x7df
    // 0x5e5a94: cmp             x4, #0x9b
    // 0x5e5a98: b.ls            #0x5e5aa8
    // 0x5e5a9c: r8 = RenderBox?
    //     0x5e5a9c: ldr             x8, [PP, #0x4230]  ; [pp+0x4230] Type: RenderBox?
    // 0x5e5aa0: r3 = Null
    //     0x5e5aa0: ldr             x3, [PP, #0x5678]  ; [pp+0x5678] Null
    // 0x5e5aa4: r0 = RenderBox?()
    //     0x5e5aa4: bl              #0x5892fc  ; IsType_RenderBox?_Stub
    // 0x5e5aa8: ldur            x0, [fp, #-8]
    // 0x5e5aac: cmp             w0, NULL
    // 0x5e5ab0: b.eq            #0x5e5ad8
    // 0x5e5ab4: ldr             x1, [fp, #0x10]
    // 0x5e5ab8: LoadField: r2 = r1->field_f
    //     0x5e5ab8: ldur            w2, [x1, #0xf]
    // 0x5e5abc: DecompressPointer r2
    //     0x5e5abc: add             x2, x2, HEAP, lsl #32
    // 0x5e5ac0: cmp             w2, NULL
    // 0x5e5ac4: b.eq            #0x5e5ad8
    // 0x5e5ac8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x5e5ac8: ldur            w1, [x0, #0x17]
    // 0x5e5acc: DecompressPointer r1
    //     0x5e5acc: add             x1, x1, HEAP, lsl #32
    // 0x5e5ad0: cmp             w1, NULL
    // 0x5e5ad4: b.ne            #0x5e5ae8
    // 0x5e5ad8: r0 = Instance_Rect
    //     0x5e5ad8: ldr             x0, [PP, #0x5688]  ; [pp+0x5688] Obj!Rect@c3c841
    // 0x5e5adc: LeaveFrame
    //     0x5e5adc: mov             SP, fp
    //     0x5e5ae0: ldp             fp, lr, [SP], #0x10
    // 0x5e5ae4: ret
    //     0x5e5ae4: ret             
    // 0x5e5ae8: stp             NULL, x0, [SP]
    // 0x5e5aec: r0 = getTransformTo()
    //     0x5e5aec: bl              #0x5c933c  ; [package:flutter/src/rendering/object.dart] RenderObject::getTransformTo
    // 0x5e5af0: stur            x0, [fp, #-0x10]
    // 0x5e5af4: ldur            x16, [fp, #-8]
    // 0x5e5af8: str             x16, [SP]
    // 0x5e5afc: r0 = size()
    //     0x5e5afc: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x5e5b00: LoadField: d0 = r0->field_7
    //     0x5e5b00: ldur            d0, [x0, #7]
    // 0x5e5b04: stur            d0, [fp, #-0x18]
    // 0x5e5b08: ldur            x16, [fp, #-8]
    // 0x5e5b0c: str             x16, [SP]
    // 0x5e5b10: r0 = size()
    //     0x5e5b10: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x5e5b14: LoadField: d0 = r0->field_f
    //     0x5e5b14: ldur            d0, [x0, #0xf]
    // 0x5e5b18: ldur            d1, [fp, #-0x18]
    // 0x5e5b1c: d2 = 0.000000
    //     0x5e5b1c: eor             v2.16b, v2.16b, v2.16b
    // 0x5e5b20: fadd            d3, d2, d1
    // 0x5e5b24: stur            d3, [fp, #-0x20]
    // 0x5e5b28: fadd            d1, d2, d0
    // 0x5e5b2c: stur            d1, [fp, #-0x18]
    // 0x5e5b30: r0 = Rect()
    //     0x5e5b30: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0x5e5b34: d0 = 0.000000
    //     0x5e5b34: eor             v0.16b, v0.16b, v0.16b
    // 0x5e5b38: StoreField: r0->field_7 = d0
    //     0x5e5b38: stur            d0, [x0, #7]
    // 0x5e5b3c: StoreField: r0->field_f = d0
    //     0x5e5b3c: stur            d0, [x0, #0xf]
    // 0x5e5b40: ldur            d0, [fp, #-0x20]
    // 0x5e5b44: ArrayStore: r0[0] = d0  ; List_8
    //     0x5e5b44: stur            d0, [x0, #0x17]
    // 0x5e5b48: ldur            d0, [fp, #-0x18]
    // 0x5e5b4c: StoreField: r0->field_1f = d0
    //     0x5e5b4c: stur            d0, [x0, #0x1f]
    // 0x5e5b50: ldur            x16, [fp, #-0x10]
    // 0x5e5b54: stp             x0, x16, [SP]
    // 0x5e5b58: r0 = transformRect()
    //     0x5e5b58: bl              #0x5e5b74  ; [package:flutter/src/painting/matrix_utils.dart] MatrixUtils::transformRect
    // 0x5e5b5c: LeaveFrame
    //     0x5e5b5c: mov             SP, fp
    //     0x5e5b60: ldp             fp, lr, [SP], #0x10
    // 0x5e5b64: ret
    //     0x5e5b64: ret             
    // 0x5e5b68: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e5b68: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e5b6c: b               #0x5e5a5c
    // 0x5e5b70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e5b70: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ isInScribbleRect(/* No info */) {
    // ** addr: 0x5e67b4, size: 0x238
    // 0x5e67b4: EnterFrame
    //     0x5e67b4: stp             fp, lr, [SP, #-0x10]!
    //     0x5e67b8: mov             fp, SP
    // 0x5e67bc: AllocStack(0x38)
    //     0x5e67bc: sub             SP, SP, #0x38
    // 0x5e67c0: CheckStackOverflow
    //     0x5e67c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e67c4: cmp             SP, x16
    //     0x5e67c8: b.ls            #0x5e69dc
    // 0x5e67cc: r1 = 1
    //     0x5e67cc: movz            x1, #0x1
    // 0x5e67d0: r0 = AllocateContext()
    //     0x5e67d0: bl              #0xc5def4  ; AllocateContextStub
    // 0x5e67d4: mov             x1, x0
    // 0x5e67d8: ldr             x0, [fp, #0x18]
    // 0x5e67dc: stur            x1, [fp, #-8]
    // 0x5e67e0: StoreField: r1->field_f = r0
    //     0x5e67e0: stur            w0, [x1, #0xf]
    // 0x5e67e4: str             x0, [SP]
    // 0x5e67e8: r0 = bounds()
    //     0x5e67e8: bl              #0x5e5a44  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::bounds
    // 0x5e67ec: stur            x0, [fp, #-0x10]
    // 0x5e67f0: ldr             x16, [fp, #0x18]
    // 0x5e67f4: str             x16, [SP]
    // 0x5e67f8: r0 = renderEditable()
    //     0x5e67f8: bl              #0x5e4910  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x5e67fc: cmp             w0, NULL
    // 0x5e6800: b.ne            #0x5e680c
    // 0x5e6804: r0 = Null
    //     0x5e6804: mov             x0, NULL
    // 0x5e6808: b               #0x5e6818
    // 0x5e680c: LoadField: r1 = r0->field_cf
    //     0x5e680c: ldur            w1, [x0, #0xcf]
    // 0x5e6810: DecompressPointer r1
    //     0x5e6810: add             x1, x1, HEAP, lsl #32
    // 0x5e6814: mov             x0, x1
    // 0x5e6818: cmp             w0, NULL
    // 0x5e681c: b.eq            #0x5e6834
    // 0x5e6820: tbnz            w0, #4, #0x5e6834
    // 0x5e6824: r0 = false
    //     0x5e6824: add             x0, NULL, #0x30  ; false
    // 0x5e6828: LeaveFrame
    //     0x5e6828: mov             SP, fp
    //     0x5e682c: ldp             fp, lr, [SP], #0x10
    // 0x5e6830: ret
    //     0x5e6830: ret             
    // 0x5e6834: ldur            x0, [fp, #-0x10]
    // 0x5e6838: r16 = Instance_Rect
    //     0x5e6838: ldr             x16, [PP, #0x5688]  ; [pp+0x5688] Obj!Rect@c3c841
    // 0x5e683c: cmp             w0, w16
    // 0x5e6840: b.eq            #0x5e68b8
    // 0x5e6844: r16 = Rect
    //     0x5e6844: ldr             x16, [PP, #0x56a0]  ; [pp+0x56a0] Type: Rect
    // 0x5e6848: r30 = Rect
    //     0x5e6848: ldr             lr, [PP, #0x56a0]  ; [pp+0x56a0] Type: Rect
    // 0x5e684c: stp             lr, x16, [SP]
    // 0x5e6850: r0 = ==()
    //     0x5e6850: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0x5e6854: tbz             w0, #4, #0x5e6860
    // 0x5e6858: ldur            x0, [fp, #-0x10]
    // 0x5e685c: b               #0x5e68c8
    // 0x5e6860: ldur            x0, [fp, #-0x10]
    // 0x5e6864: r1 = Instance_Rect
    //     0x5e6864: ldr             x1, [PP, #0x5688]  ; [pp+0x5688] Obj!Rect@c3c841
    // 0x5e6868: LoadField: d0 = r1->field_7
    //     0x5e6868: ldur            d0, [x1, #7]
    // 0x5e686c: LoadField: d1 = r0->field_7
    //     0x5e686c: ldur            d1, [x0, #7]
    // 0x5e6870: fcmp            d0, d1
    // 0x5e6874: b.vs            #0x5e68c8
    // 0x5e6878: b.ne            #0x5e68c8
    // 0x5e687c: LoadField: d0 = r1->field_f
    //     0x5e687c: ldur            d0, [x1, #0xf]
    // 0x5e6880: LoadField: d1 = r0->field_f
    //     0x5e6880: ldur            d1, [x0, #0xf]
    // 0x5e6884: fcmp            d0, d1
    // 0x5e6888: b.vs            #0x5e68c8
    // 0x5e688c: b.ne            #0x5e68c8
    // 0x5e6890: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x5e6890: ldur            d0, [x1, #0x17]
    // 0x5e6894: ArrayLoad: d1 = r0[0]  ; List_8
    //     0x5e6894: ldur            d1, [x0, #0x17]
    // 0x5e6898: fcmp            d0, d1
    // 0x5e689c: b.vs            #0x5e68c8
    // 0x5e68a0: b.ne            #0x5e68c8
    // 0x5e68a4: LoadField: d0 = r1->field_1f
    //     0x5e68a4: ldur            d0, [x1, #0x1f]
    // 0x5e68a8: LoadField: d1 = r0->field_1f
    //     0x5e68a8: ldur            d1, [x0, #0x1f]
    // 0x5e68ac: fcmp            d0, d1
    // 0x5e68b0: b.vs            #0x5e68c8
    // 0x5e68b4: b.ne            #0x5e68c8
    // 0x5e68b8: r0 = false
    //     0x5e68b8: add             x0, NULL, #0x30  ; false
    // 0x5e68bc: LeaveFrame
    //     0x5e68bc: mov             SP, fp
    //     0x5e68c0: ldp             fp, lr, [SP], #0x10
    // 0x5e68c4: ret
    //     0x5e68c4: ret             
    // 0x5e68c8: ldr             x1, [fp, #0x10]
    // 0x5e68cc: ArrayLoad: d0 = r0[0]  ; List_8
    //     0x5e68cc: ldur            d0, [x0, #0x17]
    // 0x5e68d0: LoadField: d1 = r1->field_7
    //     0x5e68d0: ldur            d1, [x1, #7]
    // 0x5e68d4: fcmp            d0, d1
    // 0x5e68d8: b.vs            #0x5e68e0
    // 0x5e68dc: b.le            #0x5e691c
    // 0x5e68e0: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x5e68e0: ldur            d0, [x1, #0x17]
    // 0x5e68e4: LoadField: d1 = r0->field_7
    //     0x5e68e4: ldur            d1, [x0, #7]
    // 0x5e68e8: fcmp            d0, d1
    // 0x5e68ec: b.vs            #0x5e68f4
    // 0x5e68f0: b.le            #0x5e691c
    // 0x5e68f4: LoadField: d0 = r0->field_1f
    //     0x5e68f4: ldur            d0, [x0, #0x1f]
    // 0x5e68f8: LoadField: d1 = r1->field_f
    //     0x5e68f8: ldur            d1, [x1, #0xf]
    // 0x5e68fc: fcmp            d0, d1
    // 0x5e6900: b.vs            #0x5e6908
    // 0x5e6904: b.le            #0x5e691c
    // 0x5e6908: LoadField: d0 = r1->field_1f
    //     0x5e6908: ldur            d0, [x1, #0x1f]
    // 0x5e690c: LoadField: d1 = r0->field_f
    //     0x5e690c: ldur            d1, [x0, #0xf]
    // 0x5e6910: fcmp            d0, d1
    // 0x5e6914: b.vs            #0x5e692c
    // 0x5e6918: b.gt            #0x5e692c
    // 0x5e691c: r0 = false
    //     0x5e691c: add             x0, NULL, #0x30  ; false
    // 0x5e6920: LeaveFrame
    //     0x5e6920: mov             SP, fp
    //     0x5e6924: ldp             fp, lr, [SP], #0x10
    // 0x5e6928: ret
    //     0x5e6928: ret             
    // 0x5e692c: ldr             x2, [fp, #0x18]
    // 0x5e6930: stp             x1, x0, [SP]
    // 0x5e6934: r0 = intersect()
    //     0x5e6934: bl              #0x5e05f0  ; [dart:ui] Rect::intersect
    // 0x5e6938: stur            x0, [fp, #-0x10]
    // 0x5e693c: r0 = HitTestResult()
    //     0x5e693c: bl              #0x5b4810  ; AllocateHitTestResultStub -> HitTestResult (size=0x14)
    // 0x5e6940: stur            x0, [fp, #-0x18]
    // 0x5e6944: str             x0, [SP]
    // 0x5e6948: r0 = HitTestResult()
    //     0x5e6948: bl              #0x5b4638  ; [package:flutter/src/gestures/hit_test.dart] HitTestResult::HitTestResult
    // 0x5e694c: r0 = LoadStaticField(0xc34)
    //     0x5e694c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5e6950: ldr             x0, [x0, #0x1868]
    // 0x5e6954: stur            x0, [fp, #-0x20]
    // 0x5e6958: cmp             w0, NULL
    // 0x5e695c: b.eq            #0x5e69e4
    // 0x5e6960: ldur            x16, [fp, #-0x10]
    // 0x5e6964: str             x16, [SP]
    // 0x5e6968: r0 = center()
    //     0x5e6968: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5e696c: mov             x1, x0
    // 0x5e6970: ldr             x0, [fp, #0x18]
    // 0x5e6974: stur            x1, [fp, #-0x10]
    // 0x5e6978: LoadField: r2 = r0->field_f
    //     0x5e6978: ldur            w2, [x0, #0xf]
    // 0x5e697c: DecompressPointer r2
    //     0x5e697c: add             x2, x2, HEAP, lsl #32
    // 0x5e6980: cmp             w2, NULL
    // 0x5e6984: b.eq            #0x5e69e8
    // 0x5e6988: str             x2, [SP]
    // 0x5e698c: r0 = of()
    //     0x5e698c: bl              #0x5e69ec  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x5e6990: ldur            x16, [fp, #-0x20]
    // 0x5e6994: ldur            lr, [fp, #-0x18]
    // 0x5e6998: stp             lr, x16, [SP, #8]
    // 0x5e699c: ldur            x16, [fp, #-0x10]
    // 0x5e69a0: str             x16, [SP]
    // 0x5e69a4: r0 = hitTestInView()
    //     0x5e69a4: bl              #0x5b4454  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding::hitTestInView
    // 0x5e69a8: ldur            x0, [fp, #-0x18]
    // 0x5e69ac: LoadField: r3 = r0->field_7
    //     0x5e69ac: ldur            w3, [x0, #7]
    // 0x5e69b0: DecompressPointer r3
    //     0x5e69b0: add             x3, x3, HEAP, lsl #32
    // 0x5e69b4: ldur            x2, [fp, #-8]
    // 0x5e69b8: stur            x3, [fp, #-0x10]
    // 0x5e69bc: r1 = Function '<anonymous closure>':.
    //     0x5e69bc: ldr             x1, [PP, #0x56a8]  ; [pp+0x56a8] AnonymousClosure: (0x5e6d24), in [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::isInScribbleRect (0x5e67b4)
    // 0x5e69c0: r0 = AllocateClosure()
    //     0x5e69c0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5e69c4: ldur            x16, [fp, #-0x10]
    // 0x5e69c8: stp             x0, x16, [SP]
    // 0x5e69cc: r0 = any()
    //     0x5e69cc: bl              #0x57811c  ; [dart:collection] ListBase::any
    // 0x5e69d0: LeaveFrame
    //     0x5e69d0: mov             SP, fp
    //     0x5e69d4: ldp             fp, lr, [SP], #0x10
    // 0x5e69d8: ret
    //     0x5e69d8: ret             
    // 0x5e69dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e69dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e69e0: b               #0x5e67cc
    // 0x5e69e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e69e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e69e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e69e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] bool <anonymous closure>(dynamic, HitTestEntry<HitTestTarget>) {
    // ** addr: 0x5e6d24, size: 0x7c
    // 0x5e6d24: EnterFrame
    //     0x5e6d24: stp             fp, lr, [SP, #-0x10]!
    //     0x5e6d28: mov             fp, SP
    // 0x5e6d2c: AllocStack(0x18)
    //     0x5e6d2c: sub             SP, SP, #0x18
    // 0x5e6d30: SetupParameters()
    //     0x5e6d30: ldr             x0, [fp, #0x18]
    //     0x5e6d34: ldur            w1, [x0, #0x17]
    //     0x5e6d38: add             x1, x1, HEAP, lsl #32
    // 0x5e6d3c: CheckStackOverflow
    //     0x5e6d3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e6d40: cmp             SP, x16
    //     0x5e6d44: b.ls            #0x5e6d98
    // 0x5e6d48: ldr             x0, [fp, #0x10]
    // 0x5e6d4c: LoadField: r2 = r0->field_b
    //     0x5e6d4c: ldur            w2, [x0, #0xb]
    // 0x5e6d50: DecompressPointer r2
    //     0x5e6d50: add             x2, x2, HEAP, lsl #32
    // 0x5e6d54: stur            x2, [fp, #-8]
    // 0x5e6d58: LoadField: r0 = r1->field_f
    //     0x5e6d58: ldur            w0, [x1, #0xf]
    // 0x5e6d5c: DecompressPointer r0
    //     0x5e6d5c: add             x0, x0, HEAP, lsl #32
    // 0x5e6d60: str             x0, [SP]
    // 0x5e6d64: r0 = renderEditable()
    //     0x5e6d64: bl              #0x5e4910  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::renderEditable
    // 0x5e6d68: mov             x1, x0
    // 0x5e6d6c: ldur            x0, [fp, #-8]
    // 0x5e6d70: r2 = LoadClassIdInstr(r0)
    //     0x5e6d70: ldur            x2, [x0, #-1]
    //     0x5e6d74: ubfx            x2, x2, #0xc, #0x14
    // 0x5e6d78: stp             x1, x0, [SP]
    // 0x5e6d7c: mov             x0, x2
    // 0x5e6d80: mov             lr, x0
    // 0x5e6d84: ldr             lr, [x21, lr, lsl #3]
    // 0x5e6d88: blr             lr
    // 0x5e6d8c: LeaveFrame
    //     0x5e6d8c: mov             SP, fp
    //     0x5e6d90: ldp             fp, lr, [SP], #0x10
    // 0x5e6d94: ret
    //     0x5e6d94: ret             
    // 0x5e6d98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e6d98: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e6d9c: b               #0x5e6d48
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8b7bc4, size: 0xa8
    // 0x8b7bc4: EnterFrame
    //     0x8b7bc4: stp             fp, lr, [SP, #-0x10]!
    //     0x8b7bc8: mov             fp, SP
    // 0x8b7bcc: ldr             x0, [fp, #0x10]
    // 0x8b7bd0: r2 = Null
    //     0x8b7bd0: mov             x2, NULL
    // 0x8b7bd4: r1 = Null
    //     0x8b7bd4: mov             x1, NULL
    // 0x8b7bd8: r4 = 59
    //     0x8b7bd8: movz            x4, #0x3b
    // 0x8b7bdc: branchIfSmi(r0, 0x8b7be8)
    //     0x8b7bdc: tbz             w0, #0, #0x8b7be8
    // 0x8b7be0: r4 = LoadClassIdInstr(r0)
    //     0x8b7be0: ldur            x4, [x0, #-1]
    //     0x8b7be4: ubfx            x4, x4, #0xc, #0x14
    // 0x8b7be8: r17 = 4127
    //     0x8b7be8: movz            x17, #0x101f
    // 0x8b7bec: cmp             x4, x17
    // 0x8b7bf0: b.eq            #0x8b7c08
    // 0x8b7bf4: r8 = _ScribbleFocusable
    //     0x8b7bf4: add             x8, PP, #0x4c, lsl #12  ; [pp+0x4cbd0] Type: _ScribbleFocusable
    //     0x8b7bf8: ldr             x8, [x8, #0xbd0]
    // 0x8b7bfc: r3 = Null
    //     0x8b7bfc: add             x3, PP, #0x4c, lsl #12  ; [pp+0x4cbd8] Null
    //     0x8b7c00: ldr             x3, [x3, #0xbd8]
    // 0x8b7c04: r0 = _ScribbleFocusable()
    //     0x8b7c04: bl              #0x5e4424  ; IsType__ScribbleFocusable_Stub
    // 0x8b7c08: ldr             x3, [fp, #0x18]
    // 0x8b7c0c: LoadField: r2 = r3->field_7
    //     0x8b7c0c: ldur            w2, [x3, #7]
    // 0x8b7c10: DecompressPointer r2
    //     0x8b7c10: add             x2, x2, HEAP, lsl #32
    // 0x8b7c14: ldr             x0, [fp, #0x10]
    // 0x8b7c18: r1 = Null
    //     0x8b7c18: mov             x1, NULL
    // 0x8b7c1c: cmp             w2, NULL
    // 0x8b7c20: b.eq            #0x8b7c44
    // 0x8b7c24: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8b7c24: ldur            w4, [x2, #0x17]
    // 0x8b7c28: DecompressPointer r4
    //     0x8b7c28: add             x4, x4, HEAP, lsl #32
    // 0x8b7c2c: r8 = X0 bound StatefulWidget
    //     0x8b7c2c: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8b7c30: ldr             x8, [x8, #0x290]
    // 0x8b7c34: LoadField: r9 = r4->field_7
    //     0x8b7c34: ldur            x9, [x4, #7]
    // 0x8b7c38: r3 = Null
    //     0x8b7c38: add             x3, PP, #0x4c, lsl #12  ; [pp+0x4cbe8] Null
    //     0x8b7c3c: ldr             x3, [x3, #0xbe8]
    // 0x8b7c40: blr             x9
    // 0x8b7c44: ldr             x1, [fp, #0x18]
    // 0x8b7c48: LoadField: r2 = r1->field_b
    //     0x8b7c48: ldur            w2, [x1, #0xb]
    // 0x8b7c4c: DecompressPointer r2
    //     0x8b7c4c: add             x2, x2, HEAP, lsl #32
    // 0x8b7c50: cmp             w2, NULL
    // 0x8b7c54: b.eq            #0x8b7c68
    // 0x8b7c58: r0 = Null
    //     0x8b7c58: mov             x0, NULL
    // 0x8b7c5c: LeaveFrame
    //     0x8b7c5c: mov             SP, fp
    //     0x8b7c60: ldp             fp, lr, [SP], #0x10
    // 0x8b7c64: ret
    //     0x8b7c64: ret             
    // 0x8b7c68: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7c68: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa23658, size: 0x58
    // 0xa23658: EnterFrame
    //     0xa23658: stp             fp, lr, [SP, #-0x10]!
    //     0xa2365c: mov             fp, SP
    // 0xa23660: AllocStack(0x10)
    //     0xa23660: sub             SP, SP, #0x10
    // 0xa23664: CheckStackOverflow
    //     0xa23664: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa23668: cmp             SP, x16
    //     0xa2366c: b.ls            #0xa236a4
    // 0xa23670: ldr             x0, [fp, #0x10]
    // 0xa23674: LoadField: r1 = r0->field_b
    //     0xa23674: ldur            w1, [x0, #0xb]
    // 0xa23678: DecompressPointer r1
    //     0xa23678: add             x1, x1, HEAP, lsl #32
    // 0xa2367c: cmp             w1, NULL
    // 0xa23680: b.eq            #0xa236ac
    // 0xa23684: LoadField: r1 = r0->field_13
    //     0xa23684: ldur            w1, [x0, #0x13]
    // 0xa23688: DecompressPointer r1
    //     0xa23688: add             x1, x1, HEAP, lsl #32
    // 0xa2368c: stp             x0, x1, [SP]
    // 0xa23690: r0 = registerScribbleElement()
    //     0xa23690: bl              #0xa236b0  ; [package:flutter/src/services/text_input.dart] TextInput::registerScribbleElement
    // 0xa23694: r0 = Null
    //     0xa23694: mov             x0, NULL
    // 0xa23698: LeaveFrame
    //     0xa23698: mov             SP, fp
    //     0xa2369c: ldp             fp, lr, [SP], #0x10
    // 0xa236a0: ret
    //     0xa236a0: ret             
    // 0xa236a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa236a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa236a8: b               #0xa23670
    // 0xa236ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa236ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _ScribbleFocusableState(/* No info */) {
    // ** addr: 0xa4d624, size: 0xac
    // 0xa4d624: EnterFrame
    //     0xa4d624: stp             fp, lr, [SP, #-0x10]!
    //     0xa4d628: mov             fp, SP
    // 0xa4d62c: AllocStack(0x8)
    //     0xa4d62c: sub             SP, SP, #8
    // 0xa4d630: CheckStackOverflow
    //     0xa4d630: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa4d634: cmp             SP, x16
    //     0xa4d638: b.ls            #0xa4d6c8
    // 0xa4d63c: r2 = LoadStaticField(0xc70)
    //     0xa4d63c: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0xa4d640: ldr             x2, [x2, #0x18e0]
    // 0xa4d644: r0 = LoadInt32Instr(r2)
    //     0xa4d644: sbfx            x0, x2, #1, #0x1f
    //     0xa4d648: tbz             w2, #0, #0xa4d650
    //     0xa4d64c: ldur            x0, [x2, #7]
    // 0xa4d650: add             x3, x0, #1
    // 0xa4d654: r0 = BoxInt64Instr(r3)
    //     0xa4d654: sbfiz           x0, x3, #1, #0x1f
    //     0xa4d658: cmp             x3, x0, asr #1
    //     0xa4d65c: b.eq            #0xa4d668
    //     0xa4d660: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xa4d664: stur            x3, [x0, #7]
    // 0xa4d668: StoreStaticField(0xc70, r0)
    //     0xa4d668: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0xa4d66c: str             x0, [x1, #0x18e0]
    // 0xa4d670: r0 = 59
    //     0xa4d670: movz            x0, #0x3b
    // 0xa4d674: branchIfSmi(r2, 0xa4d680)
    //     0xa4d674: tbz             w2, #0, #0xa4d680
    // 0xa4d678: r0 = LoadClassIdInstr(r2)
    //     0xa4d678: ldur            x0, [x2, #-1]
    //     0xa4d67c: ubfx            x0, x0, #0xc, #0x14
    // 0xa4d680: str             x2, [SP]
    // 0xa4d684: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0xa4d684: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0xa4d688: r0 = GDT[cid_x0 + 0x6e8a]()
    //     0xa4d688: movz            x17, #0x6e8a
    //     0xa4d68c: add             lr, x0, x17
    //     0xa4d690: ldr             lr, [x21, lr, lsl #3]
    //     0xa4d694: blr             lr
    // 0xa4d698: ldr             x1, [fp, #0x10]
    // 0xa4d69c: StoreField: r1->field_13 = r0
    //     0xa4d69c: stur            w0, [x1, #0x13]
    //     0xa4d6a0: ldurb           w16, [x1, #-1]
    //     0xa4d6a4: ldurb           w17, [x0, #-1]
    //     0xa4d6a8: and             x16, x17, x16, lsr #2
    //     0xa4d6ac: tst             x16, HEAP, lsr #32
    //     0xa4d6b0: b.eq            #0xa4d6b8
    //     0xa4d6b4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa4d6b8: r0 = Null
    //     0xa4d6b8: mov             x0, NULL
    // 0xa4d6bc: LeaveFrame
    //     0xa4d6bc: mov             SP, fp
    //     0xa4d6c0: ldp             fp, lr, [SP], #0x10
    // 0xa4d6c4: ret
    //     0xa4d6c4: ret             
    // 0xa4d6c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa4d6c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa4d6cc: b               #0xa4d63c
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa58ba8, size: 0x44
    // 0xa58ba8: EnterFrame
    //     0xa58ba8: stp             fp, lr, [SP, #-0x10]!
    //     0xa58bac: mov             fp, SP
    // 0xa58bb0: AllocStack(0x8)
    //     0xa58bb0: sub             SP, SP, #8
    // 0xa58bb4: CheckStackOverflow
    //     0xa58bb4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa58bb8: cmp             SP, x16
    //     0xa58bbc: b.ls            #0xa58be4
    // 0xa58bc0: ldr             x0, [fp, #0x10]
    // 0xa58bc4: LoadField: r1 = r0->field_13
    //     0xa58bc4: ldur            w1, [x0, #0x13]
    // 0xa58bc8: DecompressPointer r1
    //     0xa58bc8: add             x1, x1, HEAP, lsl #32
    // 0xa58bcc: str             x1, [SP]
    // 0xa58bd0: r0 = unregisterScribbleElement()
    //     0xa58bd0: bl              #0xa58bec  ; [package:flutter/src/services/text_input.dart] TextInput::unregisterScribbleElement
    // 0xa58bd4: r0 = Null
    //     0xa58bd4: mov             x0, NULL
    // 0xa58bd8: LeaveFrame
    //     0xa58bd8: mov             SP, fp
    //     0xa58bdc: ldp             fp, lr, [SP], #0x10
    // 0xa58be0: ret
    //     0xa58be0: ret             
    // 0xa58be4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa58be4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa58be8: b               #0xa58bc0
  }
}

// class id: 3139, size: 0x18, field offset: 0x14
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin extends State<dynamic>
     with AutomaticKeepAliveClientMixin<X0 bound StatefulWidget> {

  _ updateKeepAlive(/* No info */) {
    // ** addr: 0x8b7608, size: 0x7c
    // 0x8b7608: EnterFrame
    //     0x8b7608: stp             fp, lr, [SP, #-0x10]!
    //     0x8b760c: mov             fp, SP
    // 0x8b7610: AllocStack(0x8)
    //     0x8b7610: sub             SP, SP, #8
    // 0x8b7614: CheckStackOverflow
    //     0x8b7614: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b7618: cmp             SP, x16
    //     0x8b761c: b.ls            #0x8b767c
    // 0x8b7620: ldr             x16, [fp, #0x10]
    // 0x8b7624: str             x16, [SP]
    // 0x8b7628: r0 = wantKeepAlive()
    //     0x8b7628: bl              #0x5d9470  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::wantKeepAlive
    // 0x8b762c: tbnz            w0, #4, #0x8b7650
    // 0x8b7630: ldr             x0, [fp, #0x10]
    // 0x8b7634: LoadField: r1 = r0->field_13
    //     0x8b7634: ldur            w1, [x0, #0x13]
    // 0x8b7638: DecompressPointer r1
    //     0x8b7638: add             x1, x1, HEAP, lsl #32
    // 0x8b763c: cmp             w1, NULL
    // 0x8b7640: b.ne            #0x8b766c
    // 0x8b7644: str             x0, [SP]
    // 0x8b7648: r0 = _ensureKeepAlive()
    //     0x8b7648: bl              #0x8acff4  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0x8b764c: b               #0x8b766c
    // 0x8b7650: ldr             x0, [fp, #0x10]
    // 0x8b7654: LoadField: r1 = r0->field_13
    //     0x8b7654: ldur            w1, [x0, #0x13]
    // 0x8b7658: DecompressPointer r1
    //     0x8b7658: add             x1, x1, HEAP, lsl #32
    // 0x8b765c: cmp             w1, NULL
    // 0x8b7660: b.eq            #0x8b766c
    // 0x8b7664: str             x0, [SP]
    // 0x8b7668: r0 = _releaseKeepAlive()
    //     0x8b7668: bl              #0x8acf9c  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_releaseKeepAlive
    // 0x8b766c: r0 = Null
    //     0x8b766c: mov             x0, NULL
    // 0x8b7670: LeaveFrame
    //     0x8b7670: mov             SP, fp
    //     0x8b7674: ldp             fp, lr, [SP], #0x10
    // 0x8b7678: ret
    //     0x8b7678: ret             
    // 0x8b767c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b767c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7680: b               #0x8b7620
  }
  _ deactivate(/* No info */) {
    // ** addr: 0x8c8d8c, size: 0x4c
    // 0x8c8d8c: EnterFrame
    //     0x8c8d8c: stp             fp, lr, [SP, #-0x10]!
    //     0x8c8d90: mov             fp, SP
    // 0x8c8d94: AllocStack(0x8)
    //     0x8c8d94: sub             SP, SP, #8
    // 0x8c8d98: CheckStackOverflow
    //     0x8c8d98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c8d9c: cmp             SP, x16
    //     0x8c8da0: b.ls            #0x8c8dd0
    // 0x8c8da4: ldr             x0, [fp, #0x10]
    // 0x8c8da8: LoadField: r1 = r0->field_13
    //     0x8c8da8: ldur            w1, [x0, #0x13]
    // 0x8c8dac: DecompressPointer r1
    //     0x8c8dac: add             x1, x1, HEAP, lsl #32
    // 0x8c8db0: cmp             w1, NULL
    // 0x8c8db4: b.eq            #0x8c8dc0
    // 0x8c8db8: str             x0, [SP]
    // 0x8c8dbc: r0 = _releaseKeepAlive()
    //     0x8c8dbc: bl              #0x8acf9c  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_releaseKeepAlive
    // 0x8c8dc0: r0 = Null
    //     0x8c8dc0: mov             x0, NULL
    // 0x8c8dc4: LeaveFrame
    //     0x8c8dc4: mov             SP, fp
    //     0x8c8dc8: ldp             fp, lr, [SP], #0x10
    // 0x8c8dcc: ret
    //     0x8c8dcc: ret             
    // 0x8c8dd0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c8dd0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c8dd4: b               #0x8c8da4
  }
  _ build(/* No info */) {
    // ** addr: 0x959f10, size: 0x7c
    // 0x959f10: EnterFrame
    //     0x959f10: stp             fp, lr, [SP, #-0x10]!
    //     0x959f14: mov             fp, SP
    // 0x959f18: AllocStack(0x8)
    //     0x959f18: sub             SP, SP, #8
    // 0x959f1c: CheckStackOverflow
    //     0x959f1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x959f20: cmp             SP, x16
    //     0x959f24: b.ls            #0x959f80
    // 0x959f28: ldr             x0, [fp, #0x18]
    // 0x959f2c: LoadField: r1 = r0->field_b
    //     0x959f2c: ldur            w1, [x0, #0xb]
    // 0x959f30: DecompressPointer r1
    //     0x959f30: add             x1, x1, HEAP, lsl #32
    // 0x959f34: cmp             w1, NULL
    // 0x959f38: b.eq            #0x959f88
    // 0x959f3c: LoadField: r2 = r1->field_f
    //     0x959f3c: ldur            w2, [x1, #0xf]
    // 0x959f40: DecompressPointer r2
    //     0x959f40: add             x2, x2, HEAP, lsl #32
    // 0x959f44: str             x2, [SP]
    // 0x959f48: r0 = hasFocus()
    //     0x959f48: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x959f4c: tbnz            w0, #4, #0x959f6c
    // 0x959f50: ldr             x0, [fp, #0x18]
    // 0x959f54: LoadField: r1 = r0->field_13
    //     0x959f54: ldur            w1, [x0, #0x13]
    // 0x959f58: DecompressPointer r1
    //     0x959f58: add             x1, x1, HEAP, lsl #32
    // 0x959f5c: cmp             w1, NULL
    // 0x959f60: b.ne            #0x959f6c
    // 0x959f64: str             x0, [SP]
    // 0x959f68: r0 = _ensureKeepAlive()
    //     0x959f68: bl              #0x8acff4  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0x959f6c: r0 = Instance__NullWidget
    //     0x959f6c: add             x0, PP, #0x25, lsl #12  ; [pp+0x251d0] Obj!_NullWidget@c38311
    //     0x959f70: ldr             x0, [x0, #0x1d0]
    // 0x959f74: LeaveFrame
    //     0x959f74: mov             SP, fp
    //     0x959f78: ldp             fp, lr, [SP], #0x10
    // 0x959f7c: ret
    //     0x959f7c: ret             
    // 0x959f80: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x959f80: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x959f84: b               #0x959f28
    // 0x959f88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959f88: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa234c8, size: 0x68
    // 0xa234c8: EnterFrame
    //     0xa234c8: stp             fp, lr, [SP, #-0x10]!
    //     0xa234cc: mov             fp, SP
    // 0xa234d0: AllocStack(0x8)
    //     0xa234d0: sub             SP, SP, #8
    // 0xa234d4: CheckStackOverflow
    //     0xa234d4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa234d8: cmp             SP, x16
    //     0xa234dc: b.ls            #0xa23524
    // 0xa234e0: ldr             x0, [fp, #0x10]
    // 0xa234e4: LoadField: r1 = r0->field_b
    //     0xa234e4: ldur            w1, [x0, #0xb]
    // 0xa234e8: DecompressPointer r1
    //     0xa234e8: add             x1, x1, HEAP, lsl #32
    // 0xa234ec: cmp             w1, NULL
    // 0xa234f0: b.eq            #0xa2352c
    // 0xa234f4: LoadField: r2 = r1->field_f
    //     0xa234f4: ldur            w2, [x1, #0xf]
    // 0xa234f8: DecompressPointer r2
    //     0xa234f8: add             x2, x2, HEAP, lsl #32
    // 0xa234fc: str             x2, [SP]
    // 0xa23500: r0 = hasFocus()
    //     0xa23500: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0xa23504: tbnz            w0, #4, #0xa23514
    // 0xa23508: ldr             x16, [fp, #0x10]
    // 0xa2350c: str             x16, [SP]
    // 0xa23510: r0 = _ensureKeepAlive()
    //     0xa23510: bl              #0x8acff4  ; [package:flutter/src/material/ink_well.dart] __InkResponseState&State&AutomaticKeepAliveClientMixin::_ensureKeepAlive
    // 0xa23514: r0 = Null
    //     0xa23514: mov             x0, NULL
    // 0xa23518: LeaveFrame
    //     0xa23518: mov             SP, fp
    //     0xa2351c: ldp             fp, lr, [SP], #0x10
    // 0xa23520: ret
    //     0xa23520: ret             
    // 0xa23524: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa23524: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa23528: b               #0xa234e0
    // 0xa2352c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa2352c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 3140, size: 0x18, field offset: 0x18
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver extends _EditableTextState&State&AutomaticKeepAliveClientMixin
     with WidgetsBindingObserver {
}

// class id: 3141, size: 0x20, field offset: 0x18
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ _removeTicker(/* No info */) {
    // ** addr: 0x51dc50, size: 0x54
    // 0x51dc50: EnterFrame
    //     0x51dc50: stp             fp, lr, [SP, #-0x10]!
    //     0x51dc54: mov             fp, SP
    // 0x51dc58: AllocStack(0x10)
    //     0x51dc58: sub             SP, SP, #0x10
    // 0x51dc5c: CheckStackOverflow
    //     0x51dc5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x51dc60: cmp             SP, x16
    //     0x51dc64: b.ls            #0x51dc98
    // 0x51dc68: ldr             x0, [fp, #0x18]
    // 0x51dc6c: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x51dc6c: ldur            w1, [x0, #0x17]
    // 0x51dc70: DecompressPointer r1
    //     0x51dc70: add             x1, x1, HEAP, lsl #32
    // 0x51dc74: cmp             w1, NULL
    // 0x51dc78: b.eq            #0x51dca0
    // 0x51dc7c: ldr             x16, [fp, #0x10]
    // 0x51dc80: stp             x16, x1, [SP]
    // 0x51dc84: r0 = remove()
    //     0x51dc84: bl              #0xbe8744  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::remove
    // 0x51dc88: r0 = Null
    //     0x51dc88: mov             x0, NULL
    // 0x51dc8c: LeaveFrame
    //     0x51dc8c: mov             SP, fp
    //     0x51dc90: ldp             fp, lr, [SP], #0x10
    // 0x51dc94: ret
    //     0x51dc94: ret             
    // 0x51dc98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x51dc98: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x51dc9c: b               #0x51dc68
    // 0x51dca0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x51dca0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ createTicker(/* No info */) {
    // ** addr: 0x55939c, size: 0x184
    // 0x55939c: EnterFrame
    //     0x55939c: stp             fp, lr, [SP, #-0x10]!
    //     0x5593a0: mov             fp, SP
    // 0x5593a4: AllocStack(0x20)
    //     0x5593a4: sub             SP, SP, #0x20
    // 0x5593a8: CheckStackOverflow
    //     0x5593a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5593ac: cmp             SP, x16
    //     0x5593b0: b.ls            #0x559510
    // 0x5593b4: ldr             x0, [fp, #0x18]
    // 0x5593b8: LoadField: r1 = r0->field_1b
    //     0x5593b8: ldur            w1, [x0, #0x1b]
    // 0x5593bc: DecompressPointer r1
    //     0x5593bc: add             x1, x1, HEAP, lsl #32
    // 0x5593c0: cmp             w1, NULL
    // 0x5593c4: b.ne            #0x5593d0
    // 0x5593c8: str             x0, [SP]
    // 0x5593cc: r0 = _updateTickerModeNotifier()
    //     0x5593cc: bl              #0x559520  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x5593d0: ldr             x0, [fp, #0x18]
    // 0x5593d4: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x5593d4: ldur            w1, [x0, #0x17]
    // 0x5593d8: DecompressPointer r1
    //     0x5593d8: add             x1, x1, HEAP, lsl #32
    // 0x5593dc: cmp             w1, NULL
    // 0x5593e0: b.ne            #0x559478
    // 0x5593e4: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0x5593e4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5593e8: ldr             x0, [x0, #0x528]
    //     0x5593ec: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x5593f0: cmp             w0, w16
    //     0x5593f4: b.ne            #0x559400
    //     0x5593f8: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0x5593fc: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x559400: r1 = <_WidgetTicker>
    //     0x559400: add             x1, PP, #0x22, lsl #12  ; [pp+0x222e8] TypeArguments: <_WidgetTicker>
    //     0x559404: ldr             x1, [x1, #0x2e8]
    // 0x559408: stur            x0, [fp, #-8]
    // 0x55940c: r0 = _Set()
    //     0x55940c: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x559410: mov             x1, x0
    // 0x559414: ldur            x0, [fp, #-8]
    // 0x559418: stur            x1, [fp, #-0x10]
    // 0x55941c: StoreField: r1->field_1b = r0
    //     0x55941c: stur            w0, [x1, #0x1b]
    // 0x559420: StoreField: r1->field_b = rZR
    //     0x559420: stur            wzr, [x1, #0xb]
    // 0x559424: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0x559424: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x559428: ldr             x0, [x0, #0x530]
    //     0x55942c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x559430: cmp             w0, w16
    //     0x559434: b.ne            #0x559440
    //     0x559438: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0x55943c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x559440: mov             x1, x0
    // 0x559444: ldur            x0, [fp, #-0x10]
    // 0x559448: StoreField: r0->field_f = r1
    //     0x559448: stur            w1, [x0, #0xf]
    // 0x55944c: StoreField: r0->field_13 = rZR
    //     0x55944c: stur            wzr, [x0, #0x13]
    // 0x559450: ArrayStore: r0[0] = rZR  ; List_4
    //     0x559450: stur            wzr, [x0, #0x17]
    // 0x559454: ldr             x1, [fp, #0x18]
    // 0x559458: ArrayStore: r1[0] = r0  ; List_4
    //     0x559458: stur            w0, [x1, #0x17]
    //     0x55945c: ldurb           w16, [x1, #-1]
    //     0x559460: ldurb           w17, [x0, #-1]
    //     0x559464: and             x16, x17, x16, lsr #2
    //     0x559468: tst             x16, HEAP, lsr #32
    //     0x55946c: b.eq            #0x559474
    //     0x559470: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x559474: b               #0x55947c
    // 0x559478: mov             x1, x0
    // 0x55947c: ldr             x0, [fp, #0x10]
    // 0x559480: r0 = _WidgetTicker()
    //     0x559480: bl              #0x54b590  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x559484: mov             x2, x0
    // 0x559488: ldr             x1, [fp, #0x18]
    // 0x55948c: stur            x2, [fp, #-8]
    // 0x559490: StoreField: r2->field_1b = r1
    //     0x559490: stur            w1, [x2, #0x1b]
    // 0x559494: r0 = false
    //     0x559494: add             x0, NULL, #0x30  ; false
    // 0x559498: StoreField: r2->field_b = r0
    //     0x559498: stur            w0, [x2, #0xb]
    // 0x55949c: ldr             x0, [fp, #0x10]
    // 0x5594a0: StoreField: r2->field_13 = r0
    //     0x5594a0: stur            w0, [x2, #0x13]
    // 0x5594a4: LoadField: r0 = r1->field_1b
    //     0x5594a4: ldur            w0, [x1, #0x1b]
    // 0x5594a8: DecompressPointer r0
    //     0x5594a8: add             x0, x0, HEAP, lsl #32
    // 0x5594ac: cmp             w0, NULL
    // 0x5594b0: b.eq            #0x559518
    // 0x5594b4: r3 = LoadClassIdInstr(r0)
    //     0x5594b4: ldur            x3, [x0, #-1]
    //     0x5594b8: ubfx            x3, x3, #0xc, #0x14
    // 0x5594bc: str             x0, [SP]
    // 0x5594c0: mov             x0, x3
    // 0x5594c4: r0 = GDT[cid_x0 + 0x801]()
    //     0x5594c4: add             lr, x0, #0x801
    //     0x5594c8: ldr             lr, [x21, lr, lsl #3]
    //     0x5594cc: blr             lr
    // 0x5594d0: eor             x1, x0, #0x10
    // 0x5594d4: ldur            x16, [fp, #-8]
    // 0x5594d8: stp             x1, x16, [SP]
    // 0x5594dc: r0 = muted=()
    //     0x5594dc: bl              #0x54a1d8  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x5594e0: ldr             x0, [fp, #0x18]
    // 0x5594e4: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x5594e4: ldur            w1, [x0, #0x17]
    // 0x5594e8: DecompressPointer r1
    //     0x5594e8: add             x1, x1, HEAP, lsl #32
    // 0x5594ec: cmp             w1, NULL
    // 0x5594f0: b.eq            #0x55951c
    // 0x5594f4: ldur            x16, [fp, #-8]
    // 0x5594f8: stp             x16, x1, [SP]
    // 0x5594fc: r0 = add()
    //     0x5594fc: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x559500: ldur            x0, [fp, #-8]
    // 0x559504: LeaveFrame
    //     0x559504: mov             SP, fp
    //     0x559508: ldp             fp, lr, [SP], #0x10
    // 0x55950c: ret
    //     0x55950c: ret             
    // 0x559510: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x559510: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x559514: b               #0x5593b4
    // 0x559518: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x559518: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x55951c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55951c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x559520, size: 0x148
    // 0x559520: EnterFrame
    //     0x559520: stp             fp, lr, [SP, #-0x10]!
    //     0x559524: mov             fp, SP
    // 0x559528: AllocStack(0x20)
    //     0x559528: sub             SP, SP, #0x20
    // 0x55952c: CheckStackOverflow
    //     0x55952c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x559530: cmp             SP, x16
    //     0x559534: b.ls            #0x55965c
    // 0x559538: ldr             x0, [fp, #0x10]
    // 0x55953c: LoadField: r1 = r0->field_f
    //     0x55953c: ldur            w1, [x0, #0xf]
    // 0x559540: DecompressPointer r1
    //     0x559540: add             x1, x1, HEAP, lsl #32
    // 0x559544: cmp             w1, NULL
    // 0x559548: b.eq            #0x559664
    // 0x55954c: str             x1, [SP]
    // 0x559550: r0 = getNotifier()
    //     0x559550: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x559554: mov             x1, x0
    // 0x559558: ldr             x0, [fp, #0x10]
    // 0x55955c: stur            x1, [fp, #-0x10]
    // 0x559560: LoadField: r2 = r0->field_1b
    //     0x559560: ldur            w2, [x0, #0x1b]
    // 0x559564: DecompressPointer r2
    //     0x559564: add             x2, x2, HEAP, lsl #32
    // 0x559568: stur            x2, [fp, #-8]
    // 0x55956c: cmp             w1, w2
    // 0x559570: b.ne            #0x559584
    // 0x559574: r0 = Null
    //     0x559574: mov             x0, NULL
    // 0x559578: LeaveFrame
    //     0x559578: mov             SP, fp
    //     0x55957c: ldp             fp, lr, [SP], #0x10
    // 0x559580: ret
    //     0x559580: ret             
    // 0x559584: cmp             w2, NULL
    // 0x559588: b.eq            #0x5595e0
    // 0x55958c: r1 = 1
    //     0x55958c: movz            x1, #0x1
    // 0x559590: r0 = AllocateContext()
    //     0x559590: bl              #0xc5def4  ; AllocateContextStub
    // 0x559594: mov             x1, x0
    // 0x559598: ldr             x0, [fp, #0x10]
    // 0x55959c: StoreField: r1->field_f = r0
    //     0x55959c: stur            w0, [x1, #0xf]
    // 0x5595a0: mov             x2, x1
    // 0x5595a4: r1 = Function '_updateTickers@328311458':.
    //     0x5595a4: add             x1, PP, #0x41, lsl #12  ; [pp+0x414a0] AnonymousClosure: (0x559668), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x5596b0)
    //     0x5595a8: ldr             x1, [x1, #0x4a0]
    // 0x5595ac: r0 = AllocateClosure()
    //     0x5595ac: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5595b0: mov             x1, x0
    // 0x5595b4: ldur            x0, [fp, #-8]
    // 0x5595b8: r2 = LoadClassIdInstr(r0)
    //     0x5595b8: ldur            x2, [x0, #-1]
    //     0x5595bc: ubfx            x2, x2, #0xc, #0x14
    // 0x5595c0: stp             x1, x0, [SP]
    // 0x5595c4: mov             x0, x2
    // 0x5595c8: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x5595c8: movz            x17, #0xc9d0
    //     0x5595cc: add             lr, x0, x17
    //     0x5595d0: ldr             lr, [x21, lr, lsl #3]
    //     0x5595d4: blr             lr
    // 0x5595d8: ldr             x0, [fp, #0x10]
    // 0x5595dc: ldur            x1, [fp, #-0x10]
    // 0x5595e0: r1 = 1
    //     0x5595e0: movz            x1, #0x1
    // 0x5595e4: r0 = AllocateContext()
    //     0x5595e4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5595e8: mov             x1, x0
    // 0x5595ec: ldr             x0, [fp, #0x10]
    // 0x5595f0: StoreField: r1->field_f = r0
    //     0x5595f0: stur            w0, [x1, #0xf]
    // 0x5595f4: mov             x2, x1
    // 0x5595f8: r1 = Function '_updateTickers@328311458':.
    //     0x5595f8: add             x1, PP, #0x41, lsl #12  ; [pp+0x414a0] AnonymousClosure: (0x559668), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x5596b0)
    //     0x5595fc: ldr             x1, [x1, #0x4a0]
    // 0x559600: r0 = AllocateClosure()
    //     0x559600: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x559604: ldur            x1, [fp, #-0x10]
    // 0x559608: r2 = LoadClassIdInstr(r1)
    //     0x559608: ldur            x2, [x1, #-1]
    //     0x55960c: ubfx            x2, x2, #0xc, #0x14
    // 0x559610: stp             x0, x1, [SP]
    // 0x559614: mov             x0, x2
    // 0x559618: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x559618: movz            x17, #0xcefc
    //     0x55961c: add             lr, x0, x17
    //     0x559620: ldr             lr, [x21, lr, lsl #3]
    //     0x559624: blr             lr
    // 0x559628: ldur            x0, [fp, #-0x10]
    // 0x55962c: ldr             x1, [fp, #0x10]
    // 0x559630: StoreField: r1->field_1b = r0
    //     0x559630: stur            w0, [x1, #0x1b]
    //     0x559634: ldurb           w16, [x1, #-1]
    //     0x559638: ldurb           w17, [x0, #-1]
    //     0x55963c: and             x16, x17, x16, lsr #2
    //     0x559640: tst             x16, HEAP, lsr #32
    //     0x559644: b.eq            #0x55964c
    //     0x559648: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x55964c: r0 = Null
    //     0x55964c: mov             x0, NULL
    // 0x559650: LeaveFrame
    //     0x559650: mov             SP, fp
    //     0x559654: ldp             fp, lr, [SP], #0x10
    // 0x559658: ret
    //     0x559658: ret             
    // 0x55965c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x55965c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x559660: b               #0x559538
    // 0x559664: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x559664: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x559668, size: 0x48
    // 0x559668: EnterFrame
    //     0x559668: stp             fp, lr, [SP, #-0x10]!
    //     0x55966c: mov             fp, SP
    // 0x559670: AllocStack(0x8)
    //     0x559670: sub             SP, SP, #8
    // 0x559674: SetupParameters()
    //     0x559674: ldr             x0, [fp, #0x10]
    //     0x559678: ldur            w1, [x0, #0x17]
    //     0x55967c: add             x1, x1, HEAP, lsl #32
    // 0x559680: CheckStackOverflow
    //     0x559680: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x559684: cmp             SP, x16
    //     0x559688: b.ls            #0x5596a8
    // 0x55968c: LoadField: r0 = r1->field_f
    //     0x55968c: ldur            w0, [x1, #0xf]
    // 0x559690: DecompressPointer r0
    //     0x559690: add             x0, x0, HEAP, lsl #32
    // 0x559694: str             x0, [SP]
    // 0x559698: r0 = _updateTickers()
    //     0x559698: bl              #0x5596b0  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers
    // 0x55969c: LeaveFrame
    //     0x55969c: mov             SP, fp
    //     0x5596a0: ldp             fp, lr, [SP], #0x10
    // 0x5596a4: ret
    //     0x5596a4: ret             
    // 0x5596a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5596a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5596ac: b               #0x55968c
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x5596b0, size: 0x168
    // 0x5596b0: EnterFrame
    //     0x5596b0: stp             fp, lr, [SP, #-0x10]!
    //     0x5596b4: mov             fp, SP
    // 0x5596b8: AllocStack(0x28)
    //     0x5596b8: sub             SP, SP, #0x28
    // 0x5596bc: CheckStackOverflow
    //     0x5596bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5596c0: cmp             SP, x16
    //     0x5596c4: b.ls            #0x559800
    // 0x5596c8: ldr             x1, [fp, #0x10]
    // 0x5596cc: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x5596cc: ldur            w0, [x1, #0x17]
    // 0x5596d0: DecompressPointer r0
    //     0x5596d0: add             x0, x0, HEAP, lsl #32
    // 0x5596d4: cmp             w0, NULL
    // 0x5596d8: b.eq            #0x5597f0
    // 0x5596dc: LoadField: r0 = r1->field_1b
    //     0x5596dc: ldur            w0, [x1, #0x1b]
    // 0x5596e0: DecompressPointer r0
    //     0x5596e0: add             x0, x0, HEAP, lsl #32
    // 0x5596e4: cmp             w0, NULL
    // 0x5596e8: b.eq            #0x559808
    // 0x5596ec: r2 = LoadClassIdInstr(r0)
    //     0x5596ec: ldur            x2, [x0, #-1]
    //     0x5596f0: ubfx            x2, x2, #0xc, #0x14
    // 0x5596f4: str             x0, [SP]
    // 0x5596f8: mov             x0, x2
    // 0x5596fc: r0 = GDT[cid_x0 + 0x801]()
    //     0x5596fc: add             lr, x0, #0x801
    //     0x559700: ldr             lr, [x21, lr, lsl #3]
    //     0x559704: blr             lr
    // 0x559708: eor             x1, x0, #0x10
    // 0x55970c: ldr             x0, [fp, #0x10]
    // 0x559710: stur            x1, [fp, #-8]
    // 0x559714: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x559714: ldur            w2, [x0, #0x17]
    // 0x559718: DecompressPointer r2
    //     0x559718: add             x2, x2, HEAP, lsl #32
    // 0x55971c: cmp             w2, NULL
    // 0x559720: b.eq            #0x55980c
    // 0x559724: str             x2, [SP]
    // 0x559728: r0 = iterator()
    //     0x559728: bl              #0x5aab8c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x55972c: stur            x0, [fp, #-0x18]
    // 0x559730: LoadField: r2 = r0->field_7
    //     0x559730: ldur            w2, [x0, #7]
    // 0x559734: DecompressPointer r2
    //     0x559734: add             x2, x2, HEAP, lsl #32
    // 0x559738: stur            x2, [fp, #-0x10]
    // 0x55973c: ldur            x1, [fp, #-8]
    // 0x559740: CheckStackOverflow
    //     0x559740: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x559744: cmp             SP, x16
    //     0x559748: b.ls            #0x559810
    // 0x55974c: str             x0, [SP]
    // 0x559750: r0 = moveNext()
    //     0x559750: bl              #0xb9b4b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x559754: tbnz            w0, #4, #0x5597f0
    // 0x559758: ldur            x3, [fp, #-0x18]
    // 0x55975c: LoadField: r4 = r3->field_33
    //     0x55975c: ldur            w4, [x3, #0x33]
    // 0x559760: DecompressPointer r4
    //     0x559760: add             x4, x4, HEAP, lsl #32
    // 0x559764: stur            x4, [fp, #-0x20]
    // 0x559768: cmp             w4, NULL
    // 0x55976c: b.ne            #0x5597a0
    // 0x559770: mov             x0, x4
    // 0x559774: ldur            x2, [fp, #-0x10]
    // 0x559778: r1 = Null
    //     0x559778: mov             x1, NULL
    // 0x55977c: cmp             w2, NULL
    // 0x559780: b.eq            #0x5597a0
    // 0x559784: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x559784: ldur            w4, [x2, #0x17]
    // 0x559788: DecompressPointer r4
    //     0x559788: add             x4, x4, HEAP, lsl #32
    // 0x55978c: r8 = X0
    //     0x55978c: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x559790: LoadField: r9 = r4->field_7
    //     0x559790: ldur            x9, [x4, #7]
    // 0x559794: r3 = Null
    //     0x559794: add             x3, PP, #0x41, lsl #12  ; [pp+0x41490] Null
    //     0x559798: ldr             x3, [x3, #0x490]
    // 0x55979c: blr             x9
    // 0x5597a0: ldur            x1, [fp, #-8]
    // 0x5597a4: ldur            x0, [fp, #-0x20]
    // 0x5597a8: LoadField: r2 = r0->field_b
    //     0x5597a8: ldur            w2, [x0, #0xb]
    // 0x5597ac: DecompressPointer r2
    //     0x5597ac: add             x2, x2, HEAP, lsl #32
    // 0x5597b0: cmp             w1, w2
    // 0x5597b4: b.eq            #0x5597e4
    // 0x5597b8: StoreField: r0->field_b = r1
    //     0x5597b8: stur            w1, [x0, #0xb]
    // 0x5597bc: tbnz            w1, #4, #0x5597cc
    // 0x5597c0: str             x0, [SP]
    // 0x5597c4: r0 = unscheduleTick()
    //     0x5597c4: bl              #0x54b4a4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x5597c8: b               #0x5597e4
    // 0x5597cc: str             x0, [SP]
    // 0x5597d0: r0 = shouldScheduleTick()
    //     0x5597d0: bl              #0x54b45c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x5597d4: tbnz            w0, #4, #0x5597e4
    // 0x5597d8: ldur            x16, [fp, #-0x20]
    // 0x5597dc: str             x16, [SP]
    // 0x5597e0: r0 = scheduleTick()
    //     0x5597e0: bl              #0x54a25c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x5597e4: ldur            x0, [fp, #-0x18]
    // 0x5597e8: ldur            x2, [fp, #-0x10]
    // 0x5597ec: b               #0x55973c
    // 0x5597f0: r0 = Null
    //     0x5597f0: mov             x0, NULL
    // 0x5597f4: LeaveFrame
    //     0x5597f4: mov             SP, fp
    //     0x5597f8: ldp             fp, lr, [SP], #0x10
    // 0x5597fc: ret
    //     0x5597fc: ret             
    // 0x559800: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x559800: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x559804: b               #0x5596c8
    // 0x559808: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x559808: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x55980c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55980c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x559810: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x559810: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x559814: b               #0x55974c
  }
  _ activate(/* No info */) {
    // ** addr: 0x8caad0, size: 0x48
    // 0x8caad0: EnterFrame
    //     0x8caad0: stp             fp, lr, [SP, #-0x10]!
    //     0x8caad4: mov             fp, SP
    // 0x8caad8: AllocStack(0x8)
    //     0x8caad8: sub             SP, SP, #8
    // 0x8caadc: CheckStackOverflow
    //     0x8caadc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8caae0: cmp             SP, x16
    //     0x8caae4: b.ls            #0x8cab10
    // 0x8caae8: ldr             x16, [fp, #0x10]
    // 0x8caaec: str             x16, [SP]
    // 0x8caaf0: r0 = _updateTickerModeNotifier()
    //     0x8caaf0: bl              #0x559520  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8caaf4: ldr             x16, [fp, #0x10]
    // 0x8caaf8: str             x16, [SP]
    // 0x8caafc: r0 = _updateTickers()
    //     0x8caafc: bl              #0x5596b0  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers
    // 0x8cab00: r0 = Null
    //     0x8cab00: mov             x0, NULL
    // 0x8cab04: LeaveFrame
    //     0x8cab04: mov             SP, fp
    //     0x8cab08: ldp             fp, lr, [SP], #0x10
    // 0x8cab0c: ret
    //     0x8cab0c: ret             
    // 0x8cab10: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8cab10: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8cab14: b               #0x8caae8
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa58b04, size: 0xa4
    // 0xa58b04: EnterFrame
    //     0xa58b04: stp             fp, lr, [SP, #-0x10]!
    //     0xa58b08: mov             fp, SP
    // 0xa58b0c: AllocStack(0x18)
    //     0xa58b0c: sub             SP, SP, #0x18
    // 0xa58b10: CheckStackOverflow
    //     0xa58b10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa58b14: cmp             SP, x16
    //     0xa58b18: b.ls            #0xa58ba0
    // 0xa58b1c: ldr             x0, [fp, #0x10]
    // 0xa58b20: LoadField: r1 = r0->field_1b
    //     0xa58b20: ldur            w1, [x0, #0x1b]
    // 0xa58b24: DecompressPointer r1
    //     0xa58b24: add             x1, x1, HEAP, lsl #32
    // 0xa58b28: stur            x1, [fp, #-8]
    // 0xa58b2c: cmp             w1, NULL
    // 0xa58b30: b.ne            #0xa58b3c
    // 0xa58b34: mov             x1, x0
    // 0xa58b38: b               #0xa58b8c
    // 0xa58b3c: r1 = 1
    //     0xa58b3c: movz            x1, #0x1
    // 0xa58b40: r0 = AllocateContext()
    //     0xa58b40: bl              #0xc5def4  ; AllocateContextStub
    // 0xa58b44: mov             x1, x0
    // 0xa58b48: ldr             x0, [fp, #0x10]
    // 0xa58b4c: StoreField: r1->field_f = r0
    //     0xa58b4c: stur            w0, [x1, #0xf]
    // 0xa58b50: mov             x2, x1
    // 0xa58b54: r1 = Function '_updateTickers@328311458':.
    //     0xa58b54: add             x1, PP, #0x41, lsl #12  ; [pp+0x414a0] AnonymousClosure: (0x559668), in [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::_updateTickers (0x5596b0)
    //     0xa58b58: ldr             x1, [x1, #0x4a0]
    // 0xa58b5c: r0 = AllocateClosure()
    //     0xa58b5c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa58b60: mov             x1, x0
    // 0xa58b64: ldur            x0, [fp, #-8]
    // 0xa58b68: r2 = LoadClassIdInstr(r0)
    //     0xa58b68: ldur            x2, [x0, #-1]
    //     0xa58b6c: ubfx            x2, x2, #0xc, #0x14
    // 0xa58b70: stp             x1, x0, [SP]
    // 0xa58b74: mov             x0, x2
    // 0xa58b78: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa58b78: movz            x17, #0xc9d0
    //     0xa58b7c: add             lr, x0, x17
    //     0xa58b80: ldr             lr, [x21, lr, lsl #3]
    //     0xa58b84: blr             lr
    // 0xa58b88: ldr             x1, [fp, #0x10]
    // 0xa58b8c: StoreField: r1->field_1b = rNULL
    //     0xa58b8c: stur            NULL, [x1, #0x1b]
    // 0xa58b90: r0 = Null
    //     0xa58b90: mov             x0, NULL
    // 0xa58b94: LeaveFrame
    //     0xa58b94: mov             SP, fp
    //     0xa58b98: ldp             fp, lr, [SP], #0x10
    // 0xa58b9c: ret
    //     0xa58b9c: ret             
    // 0xa58ba0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa58ba0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa58ba4: b               #0xa58b1c
  }
}

// class id: 3142, size: 0x20, field offset: 0x20
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin
     with TextSelectionDelegate {
}

// class id: 3143, size: 0x20, field offset: 0x20
//   transformed mixin,
abstract class _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate&TextInputClient extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate
     with TextInputClient {
}

// class id: 3144, size: 0xcc, field offset: 0x20
class EditableTextState extends _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin&TextSelectionDelegate&TextInputClient
    implements AutofillClient {

  late final RenderEditable renderEditable; // offset: 0xa8
  late final Simulation _iosBlinkCursorSimulation; // offset: 0x28
  late SpellCheckConfiguration _spellCheckConfiguration; // offset: 0x60
  late TextStyle _style; // offset: 0x64
  late final _UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent> _verticalSelectionUpdateAction; // offset: 0xc4
  late final Map<Type, Action<Intent>> _actions; // offset: 0xc8
  late final Action<ReplaceTextIntent> _replaceTextAction; // offset: 0xbc
  late final Action<UpdateSelectionIntent> _updateSelectionAction; // offset: 0xc0
  late final Action<TransposeCharactersIntent> _transposeCharactersAction; // offset: 0xb8
  late double _lastBottomViewInset; // offset: 0x98

  _ removeTextPlaceholder(/* No info */) {
    // ** addr: 0x5c712c, size: 0x8c
    // 0x5c712c: EnterFrame
    //     0x5c712c: stp             fp, lr, [SP, #-0x10]!
    //     0x5c7130: mov             fp, SP
    // 0x5c7134: AllocStack(0x10)
    //     0x5c7134: sub             SP, SP, #0x10
    // 0x5c7138: CheckStackOverflow
    //     0x5c7138: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5c713c: cmp             SP, x16
    //     0x5c7140: b.ls            #0x5c71ac
    // 0x5c7144: r1 = 1
    //     0x5c7144: movz            x1, #0x1
    // 0x5c7148: r0 = AllocateContext()
    //     0x5c7148: bl              #0xc5def4  ; AllocateContextStub
    // 0x5c714c: mov             x1, x0
    // 0x5c7150: ldr             x0, [fp, #0x10]
    // 0x5c7154: StoreField: r1->field_f = r0
    //     0x5c7154: stur            w0, [x1, #0xf]
    // 0x5c7158: LoadField: r2 = r0->field_b
    //     0x5c7158: ldur            w2, [x0, #0xb]
    // 0x5c715c: DecompressPointer r2
    //     0x5c715c: add             x2, x2, HEAP, lsl #32
    // 0x5c7160: cmp             w2, NULL
    // 0x5c7164: b.eq            #0x5c71b4
    // 0x5c7168: LoadField: r2 = r0->field_ab
    //     0x5c7168: ldur            x2, [x0, #0xab]
    // 0x5c716c: cmn             x2, #1
    // 0x5c7170: b.ne            #0x5c7184
    // 0x5c7174: r0 = Null
    //     0x5c7174: mov             x0, NULL
    // 0x5c7178: LeaveFrame
    //     0x5c7178: mov             SP, fp
    //     0x5c717c: ldp             fp, lr, [SP], #0x10
    // 0x5c7180: ret
    //     0x5c7180: ret             
    // 0x5c7184: mov             x2, x1
    // 0x5c7188: r1 = Function '<anonymous closure>':.
    //     0x5c7188: ldr             x1, [PP, #0x57b0]  ; [pp+0x57b0] AnonymousClosure: (0x5c743c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::removeTextPlaceholder (0x5c712c)
    // 0x5c718c: r0 = AllocateClosure()
    //     0x5c718c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5c7190: ldr             x16, [fp, #0x10]
    // 0x5c7194: stp             x0, x16, [SP]
    // 0x5c7198: r0 = setState()
    //     0x5c7198: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x5c719c: r0 = Null
    //     0x5c719c: mov             x0, NULL
    // 0x5c71a0: LeaveFrame
    //     0x5c71a0: mov             SP, fp
    //     0x5c71a4: ldp             fp, lr, [SP], #0x10
    // 0x5c71a8: ret
    //     0x5c71a8: ret             
    // 0x5c71ac: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5c71ac: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5c71b0: b               #0x5c7144
    // 0x5c71b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5c71b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x5c743c, size: 0x24
    // 0x5c743c: r1 = -1
    //     0x5c743c: movn            x1, #0
    // 0x5c7440: ldr             x2, [SP]
    // 0x5c7444: ArrayLoad: r3 = r2[0]  ; List_4
    //     0x5c7444: ldur            w3, [x2, #0x17]
    // 0x5c7448: DecompressPointer r3
    //     0x5c7448: add             x3, x3, HEAP, lsl #32
    // 0x5c744c: LoadField: r2 = r3->field_f
    //     0x5c744c: ldur            w2, [x3, #0xf]
    // 0x5c7450: DecompressPointer r2
    //     0x5c7450: add             x2, x2, HEAP, lsl #32
    // 0x5c7454: StoreField: r2->field_ab = r1
    //     0x5c7454: stur            x1, [x2, #0xab]
    // 0x5c7458: r0 = Null
    //     0x5c7458: mov             x0, NULL
    // 0x5c745c: ret
    //     0x5c745c: ret             
  }
  _ insertTextPlaceholder(/* No info */) {
    // ** addr: 0x5c7460, size: 0xa4
    // 0x5c7460: EnterFrame
    //     0x5c7460: stp             fp, lr, [SP, #-0x10]!
    //     0x5c7464: mov             fp, SP
    // 0x5c7468: AllocStack(0x18)
    //     0x5c7468: sub             SP, SP, #0x18
    // 0x5c746c: CheckStackOverflow
    //     0x5c746c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5c7470: cmp             SP, x16
    //     0x5c7474: b.ls            #0x5c74f8
    // 0x5c7478: r1 = 1
    //     0x5c7478: movz            x1, #0x1
    // 0x5c747c: r0 = AllocateContext()
    //     0x5c747c: bl              #0xc5def4  ; AllocateContextStub
    // 0x5c7480: mov             x1, x0
    // 0x5c7484: ldr             x0, [fp, #0x10]
    // 0x5c7488: stur            x1, [fp, #-8]
    // 0x5c748c: StoreField: r1->field_f = r0
    //     0x5c748c: stur            w0, [x1, #0xf]
    // 0x5c7490: LoadField: r2 = r0->field_b
    //     0x5c7490: ldur            w2, [x0, #0xb]
    // 0x5c7494: DecompressPointer r2
    //     0x5c7494: add             x2, x2, HEAP, lsl #32
    // 0x5c7498: cmp             w2, NULL
    // 0x5c749c: b.eq            #0x5c7500
    // 0x5c74a0: LoadField: r3 = r2->field_b
    //     0x5c74a0: ldur            w3, [x2, #0xb]
    // 0x5c74a4: DecompressPointer r3
    //     0x5c74a4: add             x3, x3, HEAP, lsl #32
    // 0x5c74a8: str             x3, [SP]
    // 0x5c74ac: r0 = selection()
    //     0x5c74ac: bl              #0x5c7504  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection
    // 0x5c74b0: LoadField: r1 = r0->field_7
    //     0x5c74b0: ldur            x1, [x0, #7]
    // 0x5c74b4: tbnz            x1, #0x3f, #0x5c74e8
    // 0x5c74b8: LoadField: r1 = r0->field_f
    //     0x5c74b8: ldur            x1, [x0, #0xf]
    // 0x5c74bc: tbnz            x1, #0x3f, #0x5c74e8
    // 0x5c74c0: ldur            x2, [fp, #-8]
    // 0x5c74c4: r1 = Function '<anonymous closure>':.
    //     0x5c74c4: ldr             x1, [PP, #0x57b8]  ; [pp+0x57b8] AnonymousClosure: (0x5c7560), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::insertTextPlaceholder (0x5c7460)
    // 0x5c74c8: r0 = AllocateClosure()
    //     0x5c74c8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5c74cc: ldr             x16, [fp, #0x10]
    // 0x5c74d0: stp             x0, x16, [SP]
    // 0x5c74d4: r0 = setState()
    //     0x5c74d4: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x5c74d8: r0 = Null
    //     0x5c74d8: mov             x0, NULL
    // 0x5c74dc: LeaveFrame
    //     0x5c74dc: mov             SP, fp
    //     0x5c74e0: ldp             fp, lr, [SP], #0x10
    // 0x5c74e4: ret
    //     0x5c74e4: ret             
    // 0x5c74e8: r0 = Null
    //     0x5c74e8: mov             x0, NULL
    // 0x5c74ec: LeaveFrame
    //     0x5c74ec: mov             SP, fp
    //     0x5c74f0: ldp             fp, lr, [SP], #0x10
    // 0x5c74f4: ret
    //     0x5c74f4: ret             
    // 0x5c74f8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5c74f8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5c74fc: b               #0x5c7478
    // 0x5c7500: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5c7500: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x5c7560, size: 0x78
    // 0x5c7560: EnterFrame
    //     0x5c7560: stp             fp, lr, [SP, #-0x10]!
    //     0x5c7564: mov             fp, SP
    // 0x5c7568: ldr             x1, [fp, #0x10]
    // 0x5c756c: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x5c756c: ldur            w2, [x1, #0x17]
    // 0x5c7570: DecompressPointer r2
    //     0x5c7570: add             x2, x2, HEAP, lsl #32
    // 0x5c7574: LoadField: r1 = r2->field_f
    //     0x5c7574: ldur            w1, [x2, #0xf]
    // 0x5c7578: DecompressPointer r1
    //     0x5c7578: add             x1, x1, HEAP, lsl #32
    // 0x5c757c: LoadField: r2 = r1->field_b
    //     0x5c757c: ldur            w2, [x1, #0xb]
    // 0x5c7580: DecompressPointer r2
    //     0x5c7580: add             x2, x2, HEAP, lsl #32
    // 0x5c7584: cmp             w2, NULL
    // 0x5c7588: b.eq            #0x5c75d4
    // 0x5c758c: LoadField: r3 = r2->field_b
    //     0x5c758c: ldur            w3, [x2, #0xb]
    // 0x5c7590: DecompressPointer r3
    //     0x5c7590: add             x3, x3, HEAP, lsl #32
    // 0x5c7594: LoadField: r2 = r3->field_27
    //     0x5c7594: ldur            w2, [x3, #0x27]
    // 0x5c7598: DecompressPointer r2
    //     0x5c7598: add             x2, x2, HEAP, lsl #32
    // 0x5c759c: LoadField: r3 = r2->field_7
    //     0x5c759c: ldur            w3, [x2, #7]
    // 0x5c75a0: DecompressPointer r3
    //     0x5c75a0: add             x3, x3, HEAP, lsl #32
    // 0x5c75a4: LoadField: r4 = r3->field_7
    //     0x5c75a4: ldur            w4, [x3, #7]
    // 0x5c75a8: DecompressPointer r4
    //     0x5c75a8: add             x4, x4, HEAP, lsl #32
    // 0x5c75ac: LoadField: r3 = r2->field_b
    //     0x5c75ac: ldur            w3, [x2, #0xb]
    // 0x5c75b0: DecompressPointer r3
    //     0x5c75b0: add             x3, x3, HEAP, lsl #32
    // 0x5c75b4: LoadField: r2 = r3->field_f
    //     0x5c75b4: ldur            x2, [x3, #0xf]
    // 0x5c75b8: r3 = LoadInt32Instr(r4)
    //     0x5c75b8: sbfx            x3, x4, #1, #0x1f
    // 0x5c75bc: sub             x4, x3, x2
    // 0x5c75c0: StoreField: r1->field_ab = r4
    //     0x5c75c0: stur            x4, [x1, #0xab]
    // 0x5c75c4: r0 = Null
    //     0x5c75c4: mov             x0, NULL
    // 0x5c75c8: LeaveFrame
    //     0x5c75c8: mov             SP, fp
    //     0x5c75cc: ldp             fp, lr, [SP], #0x10
    // 0x5c75d0: ret
    //     0x5c75d0: ret             
    // 0x5c75d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5c75d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showToolbar(/* No info */) {
    // ** addr: 0x5c75d8, size: 0x98
    // 0x5c75d8: EnterFrame
    //     0x5c75d8: stp             fp, lr, [SP, #-0x10]!
    //     0x5c75dc: mov             fp, SP
    // 0x5c75e0: AllocStack(0x8)
    //     0x5c75e0: sub             SP, SP, #8
    // 0x5c75e4: CheckStackOverflow
    //     0x5c75e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5c75e8: cmp             SP, x16
    //     0x5c75ec: b.ls            #0x5c7664
    // 0x5c75f0: ldr             x0, [fp, #0x10]
    // 0x5c75f4: LoadField: r1 = r0->field_3f
    //     0x5c75f4: ldur            w1, [x0, #0x3f]
    // 0x5c75f8: DecompressPointer r1
    //     0x5c75f8: add             x1, x1, HEAP, lsl #32
    // 0x5c75fc: cmp             w1, NULL
    // 0x5c7600: b.ne            #0x5c7614
    // 0x5c7604: r0 = false
    //     0x5c7604: add             x0, NULL, #0x30  ; false
    // 0x5c7608: LeaveFrame
    //     0x5c7608: mov             SP, fp
    //     0x5c760c: ldp             fp, lr, [SP], #0x10
    // 0x5c7610: ret
    //     0x5c7610: ret             
    // 0x5c7614: LoadField: r1 = r0->field_37
    //     0x5c7614: ldur            w1, [x0, #0x37]
    // 0x5c7618: DecompressPointer r1
    //     0x5c7618: add             x1, x1, HEAP, lsl #32
    // 0x5c761c: str             x1, [SP]
    // 0x5c7620: r0 = update()
    //     0x5c7620: bl              #0x5ccaa0  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::update
    // 0x5c7624: ldr             x0, [fp, #0x10]
    // 0x5c7628: LoadField: r1 = r0->field_33
    //     0x5c7628: ldur            w1, [x0, #0x33]
    // 0x5c762c: DecompressPointer r1
    //     0x5c762c: add             x1, x1, HEAP, lsl #32
    // 0x5c7630: str             x1, [SP]
    // 0x5c7634: r0 = update()
    //     0x5c7634: bl              #0x5cc818  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x5c7638: ldr             x0, [fp, #0x10]
    // 0x5c763c: LoadField: r1 = r0->field_3f
    //     0x5c763c: ldur            w1, [x0, #0x3f]
    // 0x5c7640: DecompressPointer r1
    //     0x5c7640: add             x1, x1, HEAP, lsl #32
    // 0x5c7644: cmp             w1, NULL
    // 0x5c7648: b.eq            #0x5c766c
    // 0x5c764c: str             x1, [SP]
    // 0x5c7650: r0 = showToolbar()
    //     0x5c7650: bl              #0x5c7670  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showToolbar
    // 0x5c7654: r0 = true
    //     0x5c7654: add             x0, NULL, #0x20  ; true
    // 0x5c7658: LeaveFrame
    //     0x5c7658: mov             SP, fp
    //     0x5c765c: ldp             fp, lr, [SP], #0x10
    // 0x5c7660: ret
    //     0x5c7660: ret             
    // 0x5c7664: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5c7664: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5c7668: b               #0x5c75f0
    // 0x5c766c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5c766c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showAutocorrectionPromptRect(/* No info */) {
    // ** addr: 0x5cccc8, size: 0x90
    // 0x5cccc8: EnterFrame
    //     0x5cccc8: stp             fp, lr, [SP, #-0x10]!
    //     0x5ccccc: mov             fp, SP
    // 0x5cccd0: AllocStack(0x10)
    //     0x5cccd0: sub             SP, SP, #0x10
    // 0x5cccd4: CheckStackOverflow
    //     0x5cccd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cccd8: cmp             SP, x16
    //     0x5cccdc: b.ls            #0x5ccd50
    // 0x5ccce0: r1 = 3
    //     0x5ccce0: movz            x1, #0x3
    // 0x5ccce4: r0 = AllocateContext()
    //     0x5ccce4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5ccce8: mov             x2, x0
    // 0x5cccec: ldr             x3, [fp, #0x20]
    // 0x5cccf0: StoreField: r2->field_f = r3
    //     0x5cccf0: stur            w3, [x2, #0xf]
    // 0x5cccf4: ldr             x4, [fp, #0x18]
    // 0x5cccf8: r0 = BoxInt64Instr(r4)
    //     0x5cccf8: sbfiz           x0, x4, #1, #0x1f
    //     0x5cccfc: cmp             x4, x0, asr #1
    //     0x5ccd00: b.eq            #0x5ccd0c
    //     0x5ccd04: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x5ccd08: stur            x4, [x0, #7]
    // 0x5ccd0c: StoreField: r2->field_13 = r0
    //     0x5ccd0c: stur            w0, [x2, #0x13]
    // 0x5ccd10: ldr             x4, [fp, #0x10]
    // 0x5ccd14: r0 = BoxInt64Instr(r4)
    //     0x5ccd14: sbfiz           x0, x4, #1, #0x1f
    //     0x5ccd18: cmp             x4, x0, asr #1
    //     0x5ccd1c: b.eq            #0x5ccd28
    //     0x5ccd20: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x5ccd24: stur            x4, [x0, #7]
    // 0x5ccd28: ArrayStore: r2[0] = r0  ; List_4
    //     0x5ccd28: stur            w0, [x2, #0x17]
    // 0x5ccd2c: r1 = Function '<anonymous closure>':.
    //     0x5ccd2c: ldr             x1, [PP, #0x5ea0]  ; [pp+0x5ea0] AnonymousClosure: (0x5ccd58), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::showAutocorrectionPromptRect (0x5cccc8)
    // 0x5ccd30: r0 = AllocateClosure()
    //     0x5ccd30: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5ccd34: ldr             x16, [fp, #0x20]
    // 0x5ccd38: stp             x0, x16, [SP]
    // 0x5ccd3c: r0 = setState()
    //     0x5ccd3c: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x5ccd40: r0 = Null
    //     0x5ccd40: mov             x0, NULL
    // 0x5ccd44: LeaveFrame
    //     0x5ccd44: mov             SP, fp
    //     0x5ccd48: ldp             fp, lr, [SP], #0x10
    // 0x5ccd4c: ret
    //     0x5ccd4c: ret             
    // 0x5ccd50: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5ccd50: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5ccd54: b               #0x5ccce0
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x5ccd58, size: 0x98
    // 0x5ccd58: EnterFrame
    //     0x5ccd58: stp             fp, lr, [SP, #-0x10]!
    //     0x5ccd5c: mov             fp, SP
    // 0x5ccd60: AllocStack(0x18)
    //     0x5ccd60: sub             SP, SP, #0x18
    // 0x5ccd64: SetupParameters()
    //     0x5ccd64: ldr             x0, [fp, #0x10]
    //     0x5ccd68: ldur            w1, [x0, #0x17]
    //     0x5ccd6c: add             x1, x1, HEAP, lsl #32
    // 0x5ccd70: LoadField: r0 = r1->field_f
    //     0x5ccd70: ldur            w0, [x1, #0xf]
    // 0x5ccd74: DecompressPointer r0
    //     0x5ccd74: add             x0, x0, HEAP, lsl #32
    // 0x5ccd78: stur            x0, [fp, #-0x18]
    // 0x5ccd7c: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x5ccd7c: ldur            w2, [x1, #0x17]
    // 0x5ccd80: DecompressPointer r2
    //     0x5ccd80: add             x2, x2, HEAP, lsl #32
    // 0x5ccd84: stur            x2, [fp, #-0x10]
    // 0x5ccd88: LoadField: r3 = r1->field_13
    //     0x5ccd88: ldur            w3, [x1, #0x13]
    // 0x5ccd8c: DecompressPointer r3
    //     0x5ccd8c: add             x3, x3, HEAP, lsl #32
    // 0x5ccd90: r1 = LoadInt32Instr(r3)
    //     0x5ccd90: sbfx            x1, x3, #1, #0x1f
    //     0x5ccd94: tbz             w3, #0, #0x5ccd9c
    //     0x5ccd98: ldur            x1, [x3, #7]
    // 0x5ccd9c: stur            x1, [fp, #-8]
    // 0x5ccda0: r0 = TextRange()
    //     0x5ccda0: bl              #0x5cc350  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x5ccda4: ldur            x1, [fp, #-8]
    // 0x5ccda8: StoreField: r0->field_7 = r1
    //     0x5ccda8: stur            x1, [x0, #7]
    // 0x5ccdac: ldur            x1, [fp, #-0x10]
    // 0x5ccdb0: r2 = LoadInt32Instr(r1)
    //     0x5ccdb0: sbfx            x2, x1, #1, #0x1f
    //     0x5ccdb4: tbz             w1, #0, #0x5ccdbc
    //     0x5ccdb8: ldur            x2, [x1, #7]
    // 0x5ccdbc: StoreField: r0->field_f = r2
    //     0x5ccdbc: stur            x2, [x0, #0xf]
    // 0x5ccdc0: ldur            x1, [fp, #-0x18]
    // 0x5ccdc4: StoreField: r1->field_b3 = r0
    //     0x5ccdc4: stur            w0, [x1, #0xb3]
    //     0x5ccdc8: ldurb           w16, [x1, #-1]
    //     0x5ccdcc: ldurb           w17, [x0, #-1]
    //     0x5ccdd0: and             x16, x17, x16, lsr #2
    //     0x5ccdd4: tst             x16, HEAP, lsr #32
    //     0x5ccdd8: b.eq            #0x5ccde0
    //     0x5ccddc: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5ccde0: r0 = Null
    //     0x5ccde0: mov             x0, NULL
    // 0x5ccde4: LeaveFrame
    //     0x5ccde4: mov             SP, fp
    //     0x5ccde8: ldp             fp, lr, [SP], #0x10
    // 0x5ccdec: ret
    //     0x5ccdec: ret             
  }
  _ connectionClosed(/* No info */) {
    // ** addr: 0x5ccdf0, size: 0x94
    // 0x5ccdf0: EnterFrame
    //     0x5ccdf0: stp             fp, lr, [SP, #-0x10]!
    //     0x5ccdf4: mov             fp, SP
    // 0x5ccdf8: AllocStack(0x8)
    //     0x5ccdf8: sub             SP, SP, #8
    // 0x5ccdfc: CheckStackOverflow
    //     0x5ccdfc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cce00: cmp             SP, x16
    //     0x5cce04: b.ls            #0x5cce74
    // 0x5cce08: ldr             x16, [fp, #0x10]
    // 0x5cce0c: str             x16, [SP]
    // 0x5cce10: r0 = _hasInputConnection()
    //     0x5cce10: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5cce14: tbnz            w0, #4, #0x5cce64
    // 0x5cce18: ldr             x0, [fp, #0x10]
    // 0x5cce1c: LoadField: r1 = r0->field_3b
    //     0x5cce1c: ldur            w1, [x0, #0x3b]
    // 0x5cce20: DecompressPointer r1
    //     0x5cce20: add             x1, x1, HEAP, lsl #32
    // 0x5cce24: cmp             w1, NULL
    // 0x5cce28: b.eq            #0x5cce7c
    // 0x5cce2c: str             x1, [SP]
    // 0x5cce30: r0 = connectionClosedReceived()
    //     0x5cce30: bl              #0x5cd808  ; [package:flutter/src/services/text_input.dart] TextInputConnection::connectionClosedReceived
    // 0x5cce34: ldr             x0, [fp, #0x10]
    // 0x5cce38: StoreField: r0->field_3b = rNULL
    //     0x5cce38: stur            NULL, [x0, #0x3b]
    // 0x5cce3c: StoreField: r0->field_73 = rNULL
    //     0x5cce3c: stur            NULL, [x0, #0x73]
    // 0x5cce40: LoadField: r1 = r0->field_b
    //     0x5cce40: ldur            w1, [x0, #0xb]
    // 0x5cce44: DecompressPointer r1
    //     0x5cce44: add             x1, x1, HEAP, lsl #32
    // 0x5cce48: cmp             w1, NULL
    // 0x5cce4c: b.eq            #0x5cce80
    // 0x5cce50: LoadField: r0 = r1->field_f
    //     0x5cce50: ldur            w0, [x1, #0xf]
    // 0x5cce54: DecompressPointer r0
    //     0x5cce54: add             x0, x0, HEAP, lsl #32
    // 0x5cce58: str             x0, [SP]
    // 0x5cce5c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5cce5c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5cce60: r0 = unfocus()
    //     0x5cce60: bl              #0x5cce84  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x5cce64: r0 = Null
    //     0x5cce64: mov             x0, NULL
    // 0x5cce68: LeaveFrame
    //     0x5cce68: mov             SP, fp
    //     0x5cce6c: ldp             fp, lr, [SP], #0x10
    // 0x5cce70: ret
    //     0x5cce70: ret             
    // 0x5cce74: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cce74: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cce78: b               #0x5cce08
    // 0x5cce7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cce7c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cce80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cce80: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _hasInputConnection(/* No info */) {
    // ** addr: 0x5cd854, size: 0x68
    // 0x5cd854: EnterFrame
    //     0x5cd854: stp             fp, lr, [SP, #-0x10]!
    //     0x5cd858: mov             fp, SP
    // 0x5cd85c: AllocStack(0x8)
    //     0x5cd85c: sub             SP, SP, #8
    // 0x5cd860: CheckStackOverflow
    //     0x5cd860: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cd864: cmp             SP, x16
    //     0x5cd868: b.ls            #0x5cd8b4
    // 0x5cd86c: ldr             x0, [fp, #0x10]
    // 0x5cd870: LoadField: r1 = r0->field_3b
    //     0x5cd870: ldur            w1, [x0, #0x3b]
    // 0x5cd874: DecompressPointer r1
    //     0x5cd874: add             x1, x1, HEAP, lsl #32
    // 0x5cd878: cmp             w1, NULL
    // 0x5cd87c: b.ne            #0x5cd888
    // 0x5cd880: r1 = Null
    //     0x5cd880: mov             x1, NULL
    // 0x5cd884: b               #0x5cd894
    // 0x5cd888: str             x1, [SP]
    // 0x5cd88c: r0 = attached()
    //     0x5cd88c: bl              #0x5cd8bc  ; [package:flutter/src/services/text_input.dart] TextInputConnection::attached
    // 0x5cd890: mov             x1, x0
    // 0x5cd894: cmp             w1, NULL
    // 0x5cd898: b.ne            #0x5cd8a4
    // 0x5cd89c: r0 = false
    //     0x5cd89c: add             x0, NULL, #0x30  ; false
    // 0x5cd8a0: b               #0x5cd8a8
    // 0x5cd8a4: mov             x0, x1
    // 0x5cd8a8: LeaveFrame
    //     0x5cd8a8: mov             SP, fp
    //     0x5cd8ac: ldp             fp, lr, [SP], #0x10
    // 0x5cd8b0: ret
    //     0x5cd8b0: ret             
    // 0x5cd8b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cd8b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cd8b8: b               #0x5cd86c
  }
  _ updateFloatingCursor(/* No info */) {
    // ** addr: 0x5cd91c, size: 0x480
    // 0x5cd91c: EnterFrame
    //     0x5cd91c: stp             fp, lr, [SP, #-0x10]!
    //     0x5cd920: mov             fp, SP
    // 0x5cd924: AllocStack(0x48)
    //     0x5cd924: sub             SP, SP, #0x48
    // 0x5cd928: CheckStackOverflow
    //     0x5cd928: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cd92c: cmp             SP, x16
    //     0x5cd930: b.ls            #0x5cdd7c
    // 0x5cd934: ldr             x0, [fp, #0x18]
    // 0x5cd938: LoadField: r1 = r0->field_67
    //     0x5cd938: ldur            w1, [x0, #0x67]
    // 0x5cd93c: DecompressPointer r1
    //     0x5cd93c: add             x1, x1, HEAP, lsl #32
    // 0x5cd940: cmp             w1, NULL
    // 0x5cd944: b.ne            #0x5cd9bc
    // 0x5cd948: r1 = <double>
    //     0x5cd948: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0x5cd94c: r0 = AnimationController()
    //     0x5cd94c: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x5cd950: stur            x0, [fp, #-8]
    // 0x5cd954: ldr             x16, [fp, #0x18]
    // 0x5cd958: stp             x16, x0, [SP]
    // 0x5cd95c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x5cd95c: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x5cd960: r0 = AnimationController()
    //     0x5cd960: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x5cd964: r1 = 1
    //     0x5cd964: movz            x1, #0x1
    // 0x5cd968: r0 = AllocateContext()
    //     0x5cd968: bl              #0xc5def4  ; AllocateContextStub
    // 0x5cd96c: mov             x1, x0
    // 0x5cd970: ldr             x0, [fp, #0x18]
    // 0x5cd974: StoreField: r1->field_f = r0
    //     0x5cd974: stur            w0, [x1, #0xf]
    // 0x5cd978: mov             x2, x1
    // 0x5cd97c: r1 = Function '_onFloatingCursorResetTick@244183791':.
    //     0x5cd97c: ldr             x1, [PP, #0x5fa8]  ; [pp+0x5fa8] AnonymousClosure: (0x5dc638), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick (0x5d1654)
    // 0x5cd980: r0 = AllocateClosure()
    //     0x5cd980: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cd984: ldur            x16, [fp, #-8]
    // 0x5cd988: stp             x0, x16, [SP]
    // 0x5cd98c: r0 = addActionListener()
    //     0x5cd98c: bl              #0xae8304  ; [package:flutter/src/widgets/actions.dart] Action::addActionListener
    // 0x5cd990: ldur            x0, [fp, #-8]
    // 0x5cd994: ldr             x2, [fp, #0x18]
    // 0x5cd998: StoreField: r2->field_67 = r0
    //     0x5cd998: stur            w0, [x2, #0x67]
    //     0x5cd99c: ldurb           w16, [x2, #-1]
    //     0x5cd9a0: ldurb           w17, [x0, #-1]
    //     0x5cd9a4: and             x16, x17, x16, lsr #2
    //     0x5cd9a8: tst             x16, HEAP, lsr #32
    //     0x5cd9ac: b.eq            #0x5cd9b4
    //     0x5cd9b0: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x5cd9b4: ldur            x1, [fp, #-8]
    // 0x5cd9b8: b               #0x5cd9c0
    // 0x5cd9bc: mov             x2, x0
    // 0x5cd9c0: ldr             x0, [fp, #0x10]
    // 0x5cd9c4: LoadField: r3 = r0->field_b
    //     0x5cd9c4: ldur            w3, [x0, #0xb]
    // 0x5cd9c8: DecompressPointer r3
    //     0x5cd9c8: add             x3, x3, HEAP, lsl #32
    // 0x5cd9cc: stur            x3, [fp, #-8]
    // 0x5cd9d0: LoadField: r4 = r3->field_7
    //     0x5cd9d0: ldur            x4, [x3, #7]
    // 0x5cd9d4: cmp             x4, #1
    // 0x5cd9d8: b.gt            #0x5cdcec
    // 0x5cd9dc: cmp             x4, #0
    // 0x5cd9e0: b.gt            #0x5cdb98
    // 0x5cd9e4: str             x1, [SP]
    // 0x5cd9e8: r0 = isAnimating()
    //     0x5cd9e8: bl              #0x5dc568  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::isAnimating
    // 0x5cd9ec: tbnz            w0, #4, #0x5cda1c
    // 0x5cd9f0: ldr             x1, [fp, #0x18]
    // 0x5cd9f4: LoadField: r0 = r1->field_67
    //     0x5cd9f4: ldur            w0, [x1, #0x67]
    // 0x5cd9f8: DecompressPointer r0
    //     0x5cd9f8: add             x0, x0, HEAP, lsl #32
    // 0x5cd9fc: cmp             w0, NULL
    // 0x5cda00: b.eq            #0x5cdd84
    // 0x5cda04: str             x0, [SP]
    // 0x5cda08: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5cda08: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5cda0c: r0 = stop()
    //     0x5cda0c: bl              #0x5dc364  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::stop
    // 0x5cda10: ldr             x16, [fp, #0x18]
    // 0x5cda14: str             x16, [SP]
    // 0x5cda18: r0 = _onFloatingCursorResetTick()
    //     0x5cda18: bl              #0x5d1654  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick
    // 0x5cda1c: ldr             x1, [fp, #0x18]
    // 0x5cda20: ldr             x0, [fp, #0x10]
    // 0x5cda24: r16 = false
    //     0x5cda24: add             x16, NULL, #0x30  ; false
    // 0x5cda28: stp             x16, x1, [SP]
    // 0x5cda2c: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x5cda2c: ldr             x4, [PP, #0x5fb0]  ; [pp+0x5fb0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x5cda30: r0 = _stopCursorBlink()
    //     0x5cda30: bl              #0x5d1584  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x5cda34: ldr             x16, [fp, #0x18]
    // 0x5cda38: str             x16, [SP]
    // 0x5cda3c: r0 = _cursorBlinkOpacityController()
    //     0x5cda3c: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5cda40: str             x0, [SP, #8]
    // 0x5cda44: d0 = 1.000000
    //     0x5cda44: fmov            d0, #1.00000000
    // 0x5cda48: str             d0, [SP]
    // 0x5cda4c: r0 = value=()
    //     0x5cda4c: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x5cda50: ldr             x0, [fp, #0x10]
    // 0x5cda54: LoadField: r1 = r0->field_7
    //     0x5cda54: ldur            w1, [x0, #7]
    // 0x5cda58: DecompressPointer r1
    //     0x5cda58: add             x1, x1, HEAP, lsl #32
    // 0x5cda5c: mov             x0, x1
    // 0x5cda60: ldr             x2, [fp, #0x18]
    // 0x5cda64: StoreField: r2->field_7f = r0
    //     0x5cda64: stur            w0, [x2, #0x7f]
    //     0x5cda68: ldurb           w16, [x2, #-1]
    //     0x5cda6c: ldurb           w17, [x0, #-1]
    //     0x5cda70: and             x16, x17, x16, lsr #2
    //     0x5cda74: tst             x16, HEAP, lsr #32
    //     0x5cda78: b.eq            #0x5cda80
    //     0x5cda7c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x5cda80: mov             x1, x2
    // 0x5cda84: LoadField: r0 = r1->field_a7
    //     0x5cda84: ldur            w0, [x1, #0xa7]
    // 0x5cda88: DecompressPointer r0
    //     0x5cda88: add             x0, x0, HEAP, lsl #32
    // 0x5cda8c: r16 = Sentinel
    //     0x5cda8c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5cda90: cmp             w0, w16
    // 0x5cda94: b.ne            #0x5cdaa0
    // 0x5cda98: r2 = renderEditable
    //     0x5cda98: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5cda9c: r0 = InitLateFinalInstanceField()
    //     0x5cda9c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5cdaa0: stur            x0, [fp, #-0x20]
    // 0x5cdaa4: LoadField: r1 = r0->field_e3
    //     0x5cdaa4: ldur            w1, [x0, #0xe3]
    // 0x5cdaa8: DecompressPointer r1
    //     0x5cdaa8: add             x1, x1, HEAP, lsl #32
    // 0x5cdaac: ArrayLoad: r2 = r1[0]  ; List_8
    //     0x5cdaac: ldur            x2, [x1, #0x17]
    // 0x5cdab0: stur            x2, [fp, #-0x18]
    // 0x5cdab4: LoadField: r3 = r1->field_27
    //     0x5cdab4: ldur            w3, [x1, #0x27]
    // 0x5cdab8: DecompressPointer r3
    //     0x5cdab8: add             x3, x3, HEAP, lsl #32
    // 0x5cdabc: stur            x3, [fp, #-0x10]
    // 0x5cdac0: r0 = TextPosition()
    //     0x5cdac0: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x5cdac4: mov             x1, x0
    // 0x5cdac8: ldur            x0, [fp, #-0x18]
    // 0x5cdacc: stur            x1, [fp, #-0x28]
    // 0x5cdad0: StoreField: r1->field_7 = r0
    //     0x5cdad0: stur            x0, [x1, #7]
    // 0x5cdad4: ldur            x0, [fp, #-0x10]
    // 0x5cdad8: StoreField: r1->field_f = r0
    //     0x5cdad8: stur            w0, [x1, #0xf]
    // 0x5cdadc: ldur            x16, [fp, #-0x20]
    // 0x5cdae0: stp             x1, x16, [SP]
    // 0x5cdae4: r0 = getLocalRectForCaret()
    //     0x5cdae4: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5cdae8: mov             x2, x0
    // 0x5cdaec: ldr             x1, [fp, #0x18]
    // 0x5cdaf0: StoreField: r1->field_77 = r0
    //     0x5cdaf0: stur            w0, [x1, #0x77]
    //     0x5cdaf4: ldurb           w16, [x1, #-1]
    //     0x5cdaf8: ldurb           w17, [x0, #-1]
    //     0x5cdafc: and             x16, x17, x16, lsr #2
    //     0x5cdb00: tst             x16, HEAP, lsr #32
    //     0x5cdb04: b.eq            #0x5cdb0c
    //     0x5cdb08: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cdb0c: str             x2, [SP]
    // 0x5cdb10: r0 = center()
    //     0x5cdb10: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5cdb14: stur            x0, [fp, #-0x10]
    // 0x5cdb18: ldr             x16, [fp, #0x18]
    // 0x5cdb1c: str             x16, [SP]
    // 0x5cdb20: r0 = _floatingCursorOffset()
    //     0x5cdb20: bl              #0x5d0ab8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x5cdb24: ldur            x16, [fp, #-0x10]
    // 0x5cdb28: stp             x0, x16, [SP]
    // 0x5cdb2c: r0 = -()
    //     0x5cdb2c: bl              #0x5036ec  ; [dart:ui] Offset::-
    // 0x5cdb30: mov             x2, x0
    // 0x5cdb34: ldr             x1, [fp, #0x18]
    // 0x5cdb38: StoreField: r1->field_83 = r0
    //     0x5cdb38: stur            w0, [x1, #0x83]
    //     0x5cdb3c: ldurb           w16, [x1, #-1]
    //     0x5cdb40: ldurb           w17, [x0, #-1]
    //     0x5cdb44: and             x16, x17, x16, lsr #2
    //     0x5cdb48: tst             x16, HEAP, lsr #32
    //     0x5cdb4c: b.eq            #0x5cdb54
    //     0x5cdb50: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cdb54: ldur            x0, [fp, #-0x28]
    // 0x5cdb58: StoreField: r1->field_7b = r0
    //     0x5cdb58: stur            w0, [x1, #0x7b]
    //     0x5cdb5c: ldurb           w16, [x1, #-1]
    //     0x5cdb60: ldurb           w17, [x0, #-1]
    //     0x5cdb64: and             x16, x17, x16, lsr #2
    //     0x5cdb68: tst             x16, HEAP, lsr #32
    //     0x5cdb6c: b.eq            #0x5cdb74
    //     0x5cdb70: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cdb74: LoadField: r0 = r1->field_a7
    //     0x5cdb74: ldur            w0, [x1, #0xa7]
    // 0x5cdb78: DecompressPointer r0
    //     0x5cdb78: add             x0, x0, HEAP, lsl #32
    // 0x5cdb7c: ldur            x16, [fp, #-8]
    // 0x5cdb80: stp             x16, x0, [SP, #0x10]
    // 0x5cdb84: ldur            x16, [fp, #-0x28]
    // 0x5cdb88: stp             x16, x2, [SP]
    // 0x5cdb8c: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x5cdb8c: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x5cdb90: r0 = setFloatingCursor()
    //     0x5cdb90: bl              #0x5d0170  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x5cdb94: b               #0x5cdd6c
    // 0x5cdb98: mov             x1, x2
    // 0x5cdb9c: LoadField: r2 = r0->field_7
    //     0x5cdb9c: ldur            w2, [x0, #7]
    // 0x5cdba0: DecompressPointer r2
    //     0x5cdba0: add             x2, x2, HEAP, lsl #32
    // 0x5cdba4: LoadField: r0 = r1->field_7f
    //     0x5cdba4: ldur            w0, [x1, #0x7f]
    // 0x5cdba8: DecompressPointer r0
    //     0x5cdba8: add             x0, x0, HEAP, lsl #32
    // 0x5cdbac: cmp             w0, NULL
    // 0x5cdbb0: b.eq            #0x5cdd88
    // 0x5cdbb4: stp             x0, x2, [SP]
    // 0x5cdbb8: r0 = -()
    //     0x5cdbb8: bl              #0x5036ec  ; [dart:ui] Offset::-
    // 0x5cdbbc: ldr             x1, [fp, #0x18]
    // 0x5cdbc0: stur            x0, [fp, #-0x10]
    // 0x5cdbc4: LoadField: r2 = r1->field_77
    //     0x5cdbc4: ldur            w2, [x1, #0x77]
    // 0x5cdbc8: DecompressPointer r2
    //     0x5cdbc8: add             x2, x2, HEAP, lsl #32
    // 0x5cdbcc: cmp             w2, NULL
    // 0x5cdbd0: b.eq            #0x5cdd8c
    // 0x5cdbd4: str             x2, [SP]
    // 0x5cdbd8: r0 = center()
    //     0x5cdbd8: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5cdbdc: ldur            x16, [fp, #-0x10]
    // 0x5cdbe0: stp             x16, x0, [SP]
    // 0x5cdbe4: r0 = +()
    //     0x5cdbe4: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x5cdbe8: stur            x0, [fp, #-0x10]
    // 0x5cdbec: ldr             x16, [fp, #0x18]
    // 0x5cdbf0: str             x16, [SP]
    // 0x5cdbf4: r0 = _floatingCursorOffset()
    //     0x5cdbf4: bl              #0x5d0ab8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x5cdbf8: ldur            x16, [fp, #-0x10]
    // 0x5cdbfc: stp             x0, x16, [SP]
    // 0x5cdc00: r0 = -()
    //     0x5cdc00: bl              #0x5036ec  ; [dart:ui] Offset::-
    // 0x5cdc04: ldr             x1, [fp, #0x18]
    // 0x5cdc08: stur            x0, [fp, #-0x10]
    // 0x5cdc0c: LoadField: r0 = r1->field_a7
    //     0x5cdc0c: ldur            w0, [x1, #0xa7]
    // 0x5cdc10: DecompressPointer r0
    //     0x5cdc10: add             x0, x0, HEAP, lsl #32
    // 0x5cdc14: r16 = Sentinel
    //     0x5cdc14: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5cdc18: cmp             w0, w16
    // 0x5cdc1c: b.ne            #0x5cdc28
    // 0x5cdc20: r2 = renderEditable
    //     0x5cdc20: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5cdc24: r0 = InitLateFinalInstanceField()
    //     0x5cdc24: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5cdc28: ldur            x16, [fp, #-0x10]
    // 0x5cdc2c: stp             x16, x0, [SP]
    // 0x5cdc30: r0 = calculateBoundedFloatingCursorOffset()
    //     0x5cdc30: bl              #0x5cf99c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::calculateBoundedFloatingCursorOffset
    // 0x5cdc34: mov             x2, x0
    // 0x5cdc38: ldr             x1, [fp, #0x18]
    // 0x5cdc3c: stur            x2, [fp, #-0x20]
    // 0x5cdc40: StoreField: r1->field_83 = r0
    //     0x5cdc40: stur            w0, [x1, #0x83]
    //     0x5cdc44: ldurb           w16, [x1, #-1]
    //     0x5cdc48: ldurb           w17, [x0, #-1]
    //     0x5cdc4c: and             x16, x17, x16, lsr #2
    //     0x5cdc50: tst             x16, HEAP, lsr #32
    //     0x5cdc54: b.eq            #0x5cdc5c
    //     0x5cdc58: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cdc5c: LoadField: r0 = r1->field_a7
    //     0x5cdc5c: ldur            w0, [x1, #0xa7]
    // 0x5cdc60: DecompressPointer r0
    //     0x5cdc60: add             x0, x0, HEAP, lsl #32
    // 0x5cdc64: stur            x0, [fp, #-0x10]
    // 0x5cdc68: str             x1, [SP]
    // 0x5cdc6c: r0 = _floatingCursorOffset()
    //     0x5cdc6c: bl              #0x5d0ab8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x5cdc70: ldur            x16, [fp, #-0x20]
    // 0x5cdc74: stp             x0, x16, [SP]
    // 0x5cdc78: r0 = +()
    //     0x5cdc78: bl              #0x503908  ; [dart:ui] Offset::+
    // 0x5cdc7c: ldur            x16, [fp, #-0x10]
    // 0x5cdc80: stp             x0, x16, [SP]
    // 0x5cdc84: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x5cdc84: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x5cdc88: r0 = localToGlobal()
    //     0x5cdc88: bl              #0x5c92a4  ; [package:flutter/src/rendering/box.dart] RenderBox::localToGlobal
    // 0x5cdc8c: ldur            x16, [fp, #-0x10]
    // 0x5cdc90: stp             x0, x16, [SP]
    // 0x5cdc94: r0 = getPositionForPoint()
    //     0x5cdc94: bl              #0x5cf5a4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getPositionForPoint
    // 0x5cdc98: mov             x2, x0
    // 0x5cdc9c: ldr             x1, [fp, #0x18]
    // 0x5cdca0: StoreField: r1->field_7b = r0
    //     0x5cdca0: stur            w0, [x1, #0x7b]
    //     0x5cdca4: ldurb           w16, [x1, #-1]
    //     0x5cdca8: ldurb           w17, [x0, #-1]
    //     0x5cdcac: and             x16, x17, x16, lsr #2
    //     0x5cdcb0: tst             x16, HEAP, lsr #32
    //     0x5cdcb4: b.eq            #0x5cdcbc
    //     0x5cdcb8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cdcbc: LoadField: r0 = r1->field_a7
    //     0x5cdcbc: ldur            w0, [x1, #0xa7]
    // 0x5cdcc0: DecompressPointer r0
    //     0x5cdcc0: add             x0, x0, HEAP, lsl #32
    // 0x5cdcc4: LoadField: r3 = r1->field_83
    //     0x5cdcc4: ldur            w3, [x1, #0x83]
    // 0x5cdcc8: DecompressPointer r3
    //     0x5cdcc8: add             x3, x3, HEAP, lsl #32
    // 0x5cdccc: cmp             w3, NULL
    // 0x5cdcd0: b.eq            #0x5cdd90
    // 0x5cdcd4: ldur            x16, [fp, #-8]
    // 0x5cdcd8: stp             x16, x0, [SP, #0x10]
    // 0x5cdcdc: stp             x2, x3, [SP]
    // 0x5cdce0: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x5cdce0: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x5cdce4: r0 = setFloatingCursor()
    //     0x5cdce4: bl              #0x5d0170  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x5cdce8: b               #0x5cdd6c
    // 0x5cdcec: mov             x1, x2
    // 0x5cdcf0: d0 = 1.000000
    //     0x5cdcf0: fmov            d0, #1.00000000
    // 0x5cdcf4: str             x1, [SP]
    // 0x5cdcf8: r0 = _startCursorBlink()
    //     0x5cdcf8: bl              #0x5cee38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x5cdcfc: ldr             x0, [fp, #0x18]
    // 0x5cdd00: LoadField: r1 = r0->field_7b
    //     0x5cdd00: ldur            w1, [x0, #0x7b]
    // 0x5cdd04: DecompressPointer r1
    //     0x5cdd04: add             x1, x1, HEAP, lsl #32
    // 0x5cdd08: cmp             w1, NULL
    // 0x5cdd0c: b.eq            #0x5cdd6c
    // 0x5cdd10: LoadField: r1 = r0->field_83
    //     0x5cdd10: ldur            w1, [x0, #0x83]
    // 0x5cdd14: DecompressPointer r1
    //     0x5cdd14: add             x1, x1, HEAP, lsl #32
    // 0x5cdd18: cmp             w1, NULL
    // 0x5cdd1c: b.eq            #0x5cdd6c
    // 0x5cdd20: LoadField: r1 = r0->field_67
    //     0x5cdd20: ldur            w1, [x0, #0x67]
    // 0x5cdd24: DecompressPointer r1
    //     0x5cdd24: add             x1, x1, HEAP, lsl #32
    // 0x5cdd28: cmp             w1, NULL
    // 0x5cdd2c: b.eq            #0x5cdd94
    // 0x5cdd30: stp             xzr, x1, [SP]
    // 0x5cdd34: r0 = value=()
    //     0x5cdd34: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x5cdd38: ldr             x0, [fp, #0x18]
    // 0x5cdd3c: LoadField: r1 = r0->field_67
    //     0x5cdd3c: ldur            w1, [x0, #0x67]
    // 0x5cdd40: DecompressPointer r1
    //     0x5cdd40: add             x1, x1, HEAP, lsl #32
    // 0x5cdd44: cmp             w1, NULL
    // 0x5cdd48: b.eq            #0x5cdd98
    // 0x5cdd4c: str             x1, [SP, #0x18]
    // 0x5cdd50: d0 = 1.000000
    //     0x5cdd50: fmov            d0, #1.00000000
    // 0x5cdd54: str             d0, [SP, #0x10]
    // 0x5cdd58: r16 = Instance_Duration
    //     0x5cdd58: ldr             x16, [PP, #0x5fc0]  ; [pp+0x5fc0] Obj!Duration@c47d11
    // 0x5cdd5c: r30 = Instance__DecelerateCurve
    //     0x5cdd5c: ldr             lr, [PP, #0x5fc8]  ; [pp+0x5fc8] Obj!_DecelerateCurve@c38a81
    // 0x5cdd60: stp             lr, x16, [SP]
    // 0x5cdd64: r4 = const [0, 0x4, 0x4, 0x2, curve, 0x3, duration, 0x2, null]
    //     0x5cdd64: ldr             x4, [PP, #0x5fd0]  ; [pp+0x5fd0] List(9) [0, 0x4, 0x4, 0x2, "curve", 0x3, "duration", 0x2, Null]
    // 0x5cdd68: r0 = animateTo()
    //     0x5cdd68: bl              #0x5cdd9c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateTo
    // 0x5cdd6c: r0 = Null
    //     0x5cdd6c: mov             x0, NULL
    // 0x5cdd70: LeaveFrame
    //     0x5cdd70: mov             SP, fp
    //     0x5cdd74: ldp             fp, lr, [SP], #0x10
    // 0x5cdd78: ret
    //     0x5cdd78: ret             
    // 0x5cdd7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cdd7c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cdd80: b               #0x5cd934
    // 0x5cdd84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd84: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cdd88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd88: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cdd8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd8c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cdd90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cdd94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd94: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cdd98: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cdd98: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _startCursorBlink(/* No info */) {
    // ** addr: 0x5cee38, size: 0x194
    // 0x5cee38: EnterFrame
    //     0x5cee38: stp             fp, lr, [SP, #-0x10]!
    //     0x5cee3c: mov             fp, SP
    // 0x5cee40: AllocStack(0x28)
    //     0x5cee40: sub             SP, SP, #0x28
    // 0x5cee44: CheckStackOverflow
    //     0x5cee44: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cee48: cmp             SP, x16
    //     0x5cee4c: b.ls            #0x5cefbc
    // 0x5cee50: r1 = 1
    //     0x5cee50: movz            x1, #0x1
    // 0x5cee54: r0 = AllocateContext()
    //     0x5cee54: bl              #0xc5def4  ; AllocateContextStub
    // 0x5cee58: ldr             x1, [fp, #0x10]
    // 0x5cee5c: stur            x0, [fp, #-8]
    // 0x5cee60: StoreField: r0->field_f = r1
    //     0x5cee60: stur            w1, [x0, #0xf]
    // 0x5cee64: LoadField: r2 = r1->field_b
    //     0x5cee64: ldur            w2, [x1, #0xb]
    // 0x5cee68: DecompressPointer r2
    //     0x5cee68: add             x2, x2, HEAP, lsl #32
    // 0x5cee6c: cmp             w2, NULL
    // 0x5cee70: b.eq            #0x5cefc4
    // 0x5cee74: LoadField: r3 = r2->field_33
    //     0x5cee74: ldur            w3, [x2, #0x33]
    // 0x5cee78: DecompressPointer r3
    //     0x5cee78: add             x3, x3, HEAP, lsl #32
    // 0x5cee7c: tbz             w3, #4, #0x5cee90
    // 0x5cee80: r0 = Null
    //     0x5cee80: mov             x0, NULL
    // 0x5cee84: LeaveFrame
    //     0x5cee84: mov             SP, fp
    //     0x5cee88: ldp             fp, lr, [SP], #0x10
    // 0x5cee8c: ret
    //     0x5cee8c: ret             
    // 0x5cee90: LoadField: r2 = r1->field_6f
    //     0x5cee90: ldur            w2, [x1, #0x6f]
    // 0x5cee94: DecompressPointer r2
    //     0x5cee94: add             x2, x2, HEAP, lsl #32
    // 0x5cee98: tbz             w2, #4, #0x5ceeac
    // 0x5cee9c: r0 = Null
    //     0x5cee9c: mov             x0, NULL
    // 0x5ceea0: LeaveFrame
    //     0x5ceea0: mov             SP, fp
    //     0x5ceea4: ldp             fp, lr, [SP], #0x10
    // 0x5ceea8: ret
    //     0x5ceea8: ret             
    // 0x5ceeac: LoadField: r2 = r1->field_1f
    //     0x5ceeac: ldur            w2, [x1, #0x1f]
    // 0x5ceeb0: DecompressPointer r2
    //     0x5ceeb0: add             x2, x2, HEAP, lsl #32
    // 0x5ceeb4: cmp             w2, NULL
    // 0x5ceeb8: b.eq            #0x5ceec8
    // 0x5ceebc: str             x2, [SP]
    // 0x5ceec0: r0 = cancel()
    //     0x5ceec0: bl              #0x5cf100  ; [dart:isolate] _Timer::cancel
    // 0x5ceec4: ldr             x1, [fp, #0x10]
    // 0x5ceec8: str             x1, [SP]
    // 0x5ceecc: r0 = _cursorBlinkOpacityController()
    //     0x5ceecc: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5ceed0: str             x0, [SP, #8]
    // 0x5ceed4: d0 = 1.000000
    //     0x5ceed4: fmov            d0, #1.00000000
    // 0x5ceed8: str             d0, [SP]
    // 0x5ceedc: r0 = value=()
    //     0x5ceedc: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x5ceee0: ldr             x1, [fp, #0x10]
    // 0x5ceee4: LoadField: r0 = r1->field_b
    //     0x5ceee4: ldur            w0, [x1, #0xb]
    // 0x5ceee8: DecompressPointer r0
    //     0x5ceee8: add             x0, x0, HEAP, lsl #32
    // 0x5ceeec: cmp             w0, NULL
    // 0x5ceef0: b.eq            #0x5cefc8
    // 0x5ceef4: LoadField: r2 = r0->field_cf
    //     0x5ceef4: ldur            w2, [x0, #0xcf]
    // 0x5ceef8: DecompressPointer r2
    //     0x5ceef8: add             x2, x2, HEAP, lsl #32
    // 0x5ceefc: tbnz            w2, #4, #0x5cef6c
    // 0x5cef00: str             x1, [SP]
    // 0x5cef04: r0 = _cursorBlinkOpacityController()
    //     0x5cef04: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5cef08: ldr             x1, [fp, #0x10]
    // 0x5cef0c: stur            x0, [fp, #-0x10]
    // 0x5cef10: LoadField: r0 = r1->field_27
    //     0x5cef10: ldur            w0, [x1, #0x27]
    // 0x5cef14: DecompressPointer r0
    //     0x5cef14: add             x0, x0, HEAP, lsl #32
    // 0x5cef18: r16 = Sentinel
    //     0x5cef18: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5cef1c: cmp             w0, w16
    // 0x5cef20: b.ne            #0x5cef2c
    // 0x5cef24: r2 = _iosBlinkCursorSimulation
    //     0x5cef24: ldr             x2, [PP, #0x60c0]  ; [pp+0x60c0] Field <EditableTextState._iosBlinkCursorSimulation@244183791>: late final (offset: 0x28)
    // 0x5cef28: r0 = InitLateFinalInstanceField()
    //     0x5cef28: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5cef2c: ldur            x16, [fp, #-0x10]
    // 0x5cef30: stp             x0, x16, [SP]
    // 0x5cef34: r0 = animateWith()
    //     0x5cef34: bl              #0x5cf0ac  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateWith
    // 0x5cef38: stur            x0, [fp, #-0x10]
    // 0x5cef3c: r1 = 1
    //     0x5cef3c: movz            x1, #0x1
    // 0x5cef40: r0 = AllocateContext()
    //     0x5cef40: bl              #0xc5def4  ; AllocateContextStub
    // 0x5cef44: mov             x1, x0
    // 0x5cef48: ldr             x0, [fp, #0x10]
    // 0x5cef4c: StoreField: r1->field_f = r0
    //     0x5cef4c: stur            w0, [x1, #0xf]
    // 0x5cef50: mov             x2, x1
    // 0x5cef54: r1 = Function '_onCursorTick@244183791':.
    //     0x5cef54: ldr             x1, [PP, #0x60c8]  ; [pp+0x60c8] AnonymousClosure: (0x5cf518), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x5cf210)
    // 0x5cef58: r0 = AllocateClosure()
    //     0x5cef58: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cef5c: ldur            x16, [fp, #-0x10]
    // 0x5cef60: stp             x0, x16, [SP]
    // 0x5cef64: r0 = whenComplete()
    //     0x5cef64: bl              #0xc24f64  ; [package:flutter/src/scheduler/ticker.dart] TickerFuture::whenComplete
    // 0x5cef68: b               #0x5cefac
    // 0x5cef6c: mov             x0, x1
    // 0x5cef70: ldur            x2, [fp, #-8]
    // 0x5cef74: r1 = Function '<anonymous closure>':.
    //     0x5cef74: ldr             x1, [PP, #0x60d0]  ; [pp+0x60d0] AnonymousClosure: (0x5cf1c4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink (0x5cee38)
    // 0x5cef78: r0 = AllocateClosure()
    //     0x5cef78: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cef7c: r16 = Instance_Duration
    //     0x5cef7c: ldr             x16, [PP, #0x60d8]  ; [pp+0x60d8] Obj!Duration@c47cf1
    // 0x5cef80: stp             x16, NULL, [SP, #8]
    // 0x5cef84: str             x0, [SP]
    // 0x5cef88: r0 = Timer.periodic()
    //     0x5cef88: bl              #0x5cefcc  ; [dart:async] Timer::Timer.periodic
    // 0x5cef8c: ldr             x1, [fp, #0x10]
    // 0x5cef90: StoreField: r1->field_1f = r0
    //     0x5cef90: stur            w0, [x1, #0x1f]
    //     0x5cef94: ldurb           w16, [x1, #-1]
    //     0x5cef98: ldurb           w17, [x0, #-1]
    //     0x5cef9c: and             x16, x17, x16, lsr #2
    //     0x5cefa0: tst             x16, HEAP, lsr #32
    //     0x5cefa4: b.eq            #0x5cefac
    //     0x5cefa8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cefac: r0 = Null
    //     0x5cefac: mov             x0, NULL
    // 0x5cefb0: LeaveFrame
    //     0x5cefb0: mov             SP, fp
    //     0x5cefb4: ldp             fp, lr, [SP], #0x10
    // 0x5cefb8: ret
    //     0x5cefb8: ret             
    // 0x5cefbc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cefbc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cefc0: b               #0x5cee50
    // 0x5cefc4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cefc4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cefc8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cefc8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Timer) {
    // ** addr: 0x5cf1c4, size: 0x4c
    // 0x5cf1c4: EnterFrame
    //     0x5cf1c4: stp             fp, lr, [SP, #-0x10]!
    //     0x5cf1c8: mov             fp, SP
    // 0x5cf1cc: AllocStack(0x8)
    //     0x5cf1cc: sub             SP, SP, #8
    // 0x5cf1d0: SetupParameters()
    //     0x5cf1d0: ldr             x0, [fp, #0x18]
    //     0x5cf1d4: ldur            w1, [x0, #0x17]
    //     0x5cf1d8: add             x1, x1, HEAP, lsl #32
    // 0x5cf1dc: CheckStackOverflow
    //     0x5cf1dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cf1e0: cmp             SP, x16
    //     0x5cf1e4: b.ls            #0x5cf208
    // 0x5cf1e8: LoadField: r0 = r1->field_f
    //     0x5cf1e8: ldur            w0, [x1, #0xf]
    // 0x5cf1ec: DecompressPointer r0
    //     0x5cf1ec: add             x0, x0, HEAP, lsl #32
    // 0x5cf1f0: str             x0, [SP]
    // 0x5cf1f4: r0 = _onCursorTick()
    //     0x5cf1f4: bl              #0x5cf210  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick
    // 0x5cf1f8: r0 = Null
    //     0x5cf1f8: mov             x0, NULL
    // 0x5cf1fc: LeaveFrame
    //     0x5cf1fc: mov             SP, fp
    //     0x5cf200: ldp             fp, lr, [SP], #0x10
    // 0x5cf204: ret
    //     0x5cf204: ret             
    // 0x5cf208: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cf208: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cf20c: b               #0x5cf1e8
  }
  _ _onCursorTick(/* No info */) {
    // ** addr: 0x5cf210, size: 0x248
    // 0x5cf210: EnterFrame
    //     0x5cf210: stp             fp, lr, [SP, #-0x10]!
    //     0x5cf214: mov             fp, SP
    // 0x5cf218: AllocStack(0x20)
    //     0x5cf218: sub             SP, SP, #0x20
    // 0x5cf21c: CheckStackOverflow
    //     0x5cf21c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cf220: cmp             SP, x16
    //     0x5cf224: b.ls            #0x5cf440
    // 0x5cf228: r1 = 1
    //     0x5cf228: movz            x1, #0x1
    // 0x5cf22c: r0 = AllocateContext()
    //     0x5cf22c: bl              #0xc5def4  ; AllocateContextStub
    // 0x5cf230: mov             x1, x0
    // 0x5cf234: ldr             x0, [fp, #0x10]
    // 0x5cf238: stur            x1, [fp, #-8]
    // 0x5cf23c: StoreField: r1->field_f = r0
    //     0x5cf23c: stur            w0, [x1, #0xf]
    // 0x5cf240: LoadField: r2 = r0->field_9b
    //     0x5cf240: ldur            x2, [x0, #0x9b]
    // 0x5cf244: cmp             x2, #0
    // 0x5cf248: b.le            #0x5cf2c0
    // 0x5cf24c: r2 = LoadStaticField(0xc34)
    //     0x5cf24c: ldr             x2, [THR, #0x68]  ; THR::field_table_values
    //     0x5cf250: ldr             x2, [x2, #0x1868]
    // 0x5cf254: cmp             w2, NULL
    // 0x5cf258: b.eq            #0x5cf448
    // 0x5cf25c: r0 = InitLateStaticField(0x954) // [dart:ui] PlatformDispatcher::_instance
    //     0x5cf25c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5cf260: ldr             x0, [x0, #0x12a8]
    //     0x5cf264: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x5cf268: cmp             w0, w16
    //     0x5cf26c: b.ne            #0x5cf278
    //     0x5cf270: ldr             x2, [PP, #0x490]  ; [pp+0x490] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x954)
    //     0x5cf274: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x5cf278: LoadField: r1 = r0->field_73
    //     0x5cf278: ldur            w1, [x0, #0x73]
    // 0x5cf27c: DecompressPointer r1
    //     0x5cf27c: add             x1, x1, HEAP, lsl #32
    // 0x5cf280: tbnz            w1, #4, #0x5cf298
    // 0x5cf284: ldr             x0, [fp, #0x10]
    // 0x5cf288: LoadField: r1 = r0->field_9b
    //     0x5cf288: ldur            x1, [x0, #0x9b]
    // 0x5cf28c: sub             x2, x1, #1
    // 0x5cf290: mov             x1, x2
    // 0x5cf294: b               #0x5cf2a0
    // 0x5cf298: ldr             x0, [fp, #0x10]
    // 0x5cf29c: r1 = 0
    //     0x5cf29c: movz            x1, #0
    // 0x5cf2a0: StoreField: r0->field_9b = r1
    //     0x5cf2a0: stur            x1, [x0, #0x9b]
    // 0x5cf2a4: cbnz            x1, #0x5cf2c0
    // 0x5cf2a8: r1 = Function '<anonymous closure>':.
    //     0x5cf2a8: ldr             x1, [PP, #0x60e0]  ; [pp+0x60e0] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    // 0x5cf2ac: r2 = Null
    //     0x5cf2ac: mov             x2, NULL
    // 0x5cf2b0: r0 = AllocateClosure()
    //     0x5cf2b0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cf2b4: ldr             x16, [fp, #0x10]
    // 0x5cf2b8: stp             x0, x16, [SP]
    // 0x5cf2bc: r0 = setState()
    //     0x5cf2bc: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x5cf2c0: ldr             x0, [fp, #0x10]
    // 0x5cf2c4: LoadField: r1 = r0->field_b
    //     0x5cf2c4: ldur            w1, [x0, #0xb]
    // 0x5cf2c8: DecompressPointer r1
    //     0x5cf2c8: add             x1, x1, HEAP, lsl #32
    // 0x5cf2cc: cmp             w1, NULL
    // 0x5cf2d0: b.eq            #0x5cf44c
    // 0x5cf2d4: LoadField: r2 = r1->field_cf
    //     0x5cf2d4: ldur            w2, [x1, #0xcf]
    // 0x5cf2d8: DecompressPointer r2
    //     0x5cf2d8: add             x2, x2, HEAP, lsl #32
    // 0x5cf2dc: tbnz            w2, #4, #0x5cf33c
    // 0x5cf2e0: LoadField: r1 = r0->field_1f
    //     0x5cf2e0: ldur            w1, [x0, #0x1f]
    // 0x5cf2e4: DecompressPointer r1
    //     0x5cf2e4: add             x1, x1, HEAP, lsl #32
    // 0x5cf2e8: cmp             w1, NULL
    // 0x5cf2ec: b.eq            #0x5cf2fc
    // 0x5cf2f0: str             x1, [SP]
    // 0x5cf2f4: r0 = cancel()
    //     0x5cf2f4: bl              #0x5cf100  ; [dart:isolate] _Timer::cancel
    // 0x5cf2f8: ldr             x0, [fp, #0x10]
    // 0x5cf2fc: ldur            x2, [fp, #-8]
    // 0x5cf300: r1 = Function '<anonymous closure>':.
    //     0x5cf300: ldr             x1, [PP, #0x60e8]  ; [pp+0x60e8] AnonymousClosure: (0x5cf458), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x5cf210)
    // 0x5cf304: r0 = AllocateClosure()
    //     0x5cf304: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cf308: r16 = Instance_Duration
    //     0x5cf308: ldr             x16, [PP, #0x2828]  ; [pp+0x2828] Obj!Duration@c47ca1
    // 0x5cf30c: stp             x16, NULL, [SP, #8]
    // 0x5cf310: str             x0, [SP]
    // 0x5cf314: r0 = Timer()
    //     0x5cf314: bl              #0x4de410  ; [dart:async] Timer::Timer
    // 0x5cf318: ldr             x3, [fp, #0x10]
    // 0x5cf31c: StoreField: r3->field_1f = r0
    //     0x5cf31c: stur            w0, [x3, #0x1f]
    //     0x5cf320: ldurb           w16, [x3, #-1]
    //     0x5cf324: ldurb           w17, [x0, #-1]
    //     0x5cf328: and             x16, x17, x16, lsr #2
    //     0x5cf32c: tst             x16, HEAP, lsr #32
    //     0x5cf330: b.eq            #0x5cf338
    //     0x5cf334: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x5cf338: b               #0x5cf430
    // 0x5cf33c: mov             x3, x0
    // 0x5cf340: LoadField: r0 = r3->field_1f
    //     0x5cf340: ldur            w0, [x3, #0x1f]
    // 0x5cf344: DecompressPointer r0
    //     0x5cf344: add             x0, x0, HEAP, lsl #32
    // 0x5cf348: cmp             w0, NULL
    // 0x5cf34c: b.ne            #0x5cf358
    // 0x5cf350: r0 = Null
    //     0x5cf350: mov             x0, NULL
    // 0x5cf354: b               #0x5cf370
    // 0x5cf358: LoadField: r1 = r0->field_7
    //     0x5cf358: ldur            w1, [x0, #7]
    // 0x5cf35c: DecompressPointer r1
    //     0x5cf35c: add             x1, x1, HEAP, lsl #32
    // 0x5cf360: cmp             w1, NULL
    // 0x5cf364: r16 = true
    //     0x5cf364: add             x16, NULL, #0x20  ; true
    // 0x5cf368: r17 = false
    //     0x5cf368: add             x17, NULL, #0x30  ; false
    // 0x5cf36c: csel            x0, x16, x17, ne
    // 0x5cf370: cmp             w0, NULL
    // 0x5cf374: b.eq            #0x5cf37c
    // 0x5cf378: tbz             w0, #4, #0x5cf3d0
    // 0x5cf37c: LoadField: r0 = r3->field_6f
    //     0x5cf37c: ldur            w0, [x3, #0x6f]
    // 0x5cf380: DecompressPointer r0
    //     0x5cf380: add             x0, x0, HEAP, lsl #32
    // 0x5cf384: tbnz            w0, #4, #0x5cf3c8
    // 0x5cf388: ldur            x2, [fp, #-8]
    // 0x5cf38c: r1 = Function '<anonymous closure>':.
    //     0x5cf38c: ldr             x1, [PP, #0x60f0]  ; [pp+0x60f0] AnonymousClosure: (0x5cf1c4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink (0x5cee38)
    // 0x5cf390: r0 = AllocateClosure()
    //     0x5cf390: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5cf394: r16 = Instance_Duration
    //     0x5cf394: ldr             x16, [PP, #0x60d8]  ; [pp+0x60d8] Obj!Duration@c47cf1
    // 0x5cf398: stp             x16, NULL, [SP, #8]
    // 0x5cf39c: str             x0, [SP]
    // 0x5cf3a0: r0 = Timer.periodic()
    //     0x5cf3a0: bl              #0x5cefcc  ; [dart:async] Timer::Timer.periodic
    // 0x5cf3a4: ldr             x1, [fp, #0x10]
    // 0x5cf3a8: StoreField: r1->field_1f = r0
    //     0x5cf3a8: stur            w0, [x1, #0x1f]
    //     0x5cf3ac: ldurb           w16, [x1, #-1]
    //     0x5cf3b0: ldurb           w17, [x0, #-1]
    //     0x5cf3b4: and             x16, x17, x16, lsr #2
    //     0x5cf3b8: tst             x16, HEAP, lsr #32
    //     0x5cf3bc: b.eq            #0x5cf3c4
    //     0x5cf3c0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5cf3c4: b               #0x5cf3d4
    // 0x5cf3c8: mov             x1, x3
    // 0x5cf3cc: b               #0x5cf3d4
    // 0x5cf3d0: mov             x1, x3
    // 0x5cf3d4: str             x1, [SP]
    // 0x5cf3d8: r0 = _cursorBlinkOpacityController()
    //     0x5cf3d8: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5cf3dc: stur            x0, [fp, #-8]
    // 0x5cf3e0: ldr             x16, [fp, #0x10]
    // 0x5cf3e4: str             x16, [SP]
    // 0x5cf3e8: r0 = _cursorBlinkOpacityController()
    //     0x5cf3e8: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5cf3ec: LoadField: r1 = r0->field_37
    //     0x5cf3ec: ldur            w1, [x0, #0x37]
    // 0x5cf3f0: DecompressPointer r1
    //     0x5cf3f0: add             x1, x1, HEAP, lsl #32
    // 0x5cf3f4: r16 = Sentinel
    //     0x5cf3f4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5cf3f8: cmp             w1, w16
    // 0x5cf3fc: b.eq            #0x5cf450
    // 0x5cf400: LoadField: d0 = r1->field_7
    //     0x5cf400: ldur            d0, [x1, #7]
    // 0x5cf404: d1 = 0.000000
    //     0x5cf404: eor             v1.16b, v1.16b, v1.16b
    // 0x5cf408: fcmp            d0, d1
    // 0x5cf40c: b.vs            #0x5cf41c
    // 0x5cf410: b.ne            #0x5cf41c
    // 0x5cf414: d0 = 1.000000
    //     0x5cf414: fmov            d0, #1.00000000
    // 0x5cf418: b               #0x5cf420
    // 0x5cf41c: d0 = 0.000000
    //     0x5cf41c: eor             v0.16b, v0.16b, v0.16b
    // 0x5cf420: ldur            x16, [fp, #-8]
    // 0x5cf424: str             x16, [SP, #8]
    // 0x5cf428: str             d0, [SP]
    // 0x5cf42c: r0 = value=()
    //     0x5cf42c: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x5cf430: r0 = Null
    //     0x5cf430: mov             x0, NULL
    // 0x5cf434: LeaveFrame
    //     0x5cf434: mov             SP, fp
    //     0x5cf438: ldp             fp, lr, [SP], #0x10
    // 0x5cf43c: ret
    //     0x5cf43c: ret             
    // 0x5cf440: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cf440: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cf444: b               #0x5cf228
    // 0x5cf448: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cf448: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cf44c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5cf44c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5cf450: r9 = _value
    //     0x5cf450: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x5cf454: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5cf454: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x5cf458, size: 0xc0
    // 0x5cf458: EnterFrame
    //     0x5cf458: stp             fp, lr, [SP, #-0x10]!
    //     0x5cf45c: mov             fp, SP
    // 0x5cf460: AllocStack(0x20)
    //     0x5cf460: sub             SP, SP, #0x20
    // 0x5cf464: SetupParameters()
    //     0x5cf464: ldr             x0, [fp, #0x10]
    //     0x5cf468: ldur            w1, [x0, #0x17]
    //     0x5cf46c: add             x1, x1, HEAP, lsl #32
    //     0x5cf470: stur            x1, [fp, #-8]
    // 0x5cf474: CheckStackOverflow
    //     0x5cf474: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cf478: cmp             SP, x16
    //     0x5cf47c: b.ls            #0x5cf510
    // 0x5cf480: LoadField: r0 = r1->field_f
    //     0x5cf480: ldur            w0, [x1, #0xf]
    // 0x5cf484: DecompressPointer r0
    //     0x5cf484: add             x0, x0, HEAP, lsl #32
    // 0x5cf488: str             x0, [SP]
    // 0x5cf48c: r0 = _cursorBlinkOpacityController()
    //     0x5cf48c: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5cf490: mov             x2, x0
    // 0x5cf494: ldur            x0, [fp, #-8]
    // 0x5cf498: stur            x2, [fp, #-0x10]
    // 0x5cf49c: LoadField: r1 = r0->field_f
    //     0x5cf49c: ldur            w1, [x0, #0xf]
    // 0x5cf4a0: DecompressPointer r1
    //     0x5cf4a0: add             x1, x1, HEAP, lsl #32
    // 0x5cf4a4: LoadField: r0 = r1->field_27
    //     0x5cf4a4: ldur            w0, [x1, #0x27]
    // 0x5cf4a8: DecompressPointer r0
    //     0x5cf4a8: add             x0, x0, HEAP, lsl #32
    // 0x5cf4ac: r16 = Sentinel
    //     0x5cf4ac: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5cf4b0: cmp             w0, w16
    // 0x5cf4b4: b.ne            #0x5cf4c0
    // 0x5cf4b8: r2 = _iosBlinkCursorSimulation
    //     0x5cf4b8: ldr             x2, [PP, #0x60c0]  ; [pp+0x60c0] Field <EditableTextState._iosBlinkCursorSimulation@244183791>: late final (offset: 0x28)
    // 0x5cf4bc: r0 = InitLateFinalInstanceField()
    //     0x5cf4bc: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5cf4c0: ldur            x16, [fp, #-0x10]
    // 0x5cf4c4: stp             x0, x16, [SP]
    // 0x5cf4c8: r0 = animateWith()
    //     0x5cf4c8: bl              #0x5cf0ac  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateWith
    // 0x5cf4cc: mov             x1, x0
    // 0x5cf4d0: ldur            x0, [fp, #-8]
    // 0x5cf4d4: stur            x1, [fp, #-0x10]
    // 0x5cf4d8: LoadField: r2 = r0->field_f
    //     0x5cf4d8: ldur            w2, [x0, #0xf]
    // 0x5cf4dc: DecompressPointer r2
    //     0x5cf4dc: add             x2, x2, HEAP, lsl #32
    // 0x5cf4e0: r0 = LoadClassIdInstr(r2)
    //     0x5cf4e0: ldur            x0, [x2, #-1]
    //     0x5cf4e4: ubfx            x0, x0, #0xc, #0x14
    // 0x5cf4e8: str             x2, [SP]
    // 0x5cf4ec: r0 = GDT[cid_x0 + -0xff2]()
    //     0x5cf4ec: sub             lr, x0, #0xff2
    //     0x5cf4f0: ldr             lr, [x21, lr, lsl #3]
    //     0x5cf4f4: blr             lr
    // 0x5cf4f8: ldur            x16, [fp, #-0x10]
    // 0x5cf4fc: stp             x0, x16, [SP]
    // 0x5cf500: r0 = whenComplete()
    //     0x5cf500: bl              #0xc24f64  ; [package:flutter/src/scheduler/ticker.dart] TickerFuture::whenComplete
    // 0x5cf504: LeaveFrame
    //     0x5cf504: mov             SP, fp
    //     0x5cf508: ldp             fp, lr, [SP], #0x10
    // 0x5cf50c: ret
    //     0x5cf50c: ret             
    // 0x5cf510: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cf510: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cf514: b               #0x5cf480
  }
  [closure] void _onCursorTick(dynamic) {
    // ** addr: 0x5cf518, size: 0x48
    // 0x5cf518: EnterFrame
    //     0x5cf518: stp             fp, lr, [SP, #-0x10]!
    //     0x5cf51c: mov             fp, SP
    // 0x5cf520: AllocStack(0x8)
    //     0x5cf520: sub             SP, SP, #8
    // 0x5cf524: SetupParameters()
    //     0x5cf524: ldr             x0, [fp, #0x10]
    //     0x5cf528: ldur            w1, [x0, #0x17]
    //     0x5cf52c: add             x1, x1, HEAP, lsl #32
    // 0x5cf530: CheckStackOverflow
    //     0x5cf530: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5cf534: cmp             SP, x16
    //     0x5cf538: b.ls            #0x5cf558
    // 0x5cf53c: LoadField: r0 = r1->field_f
    //     0x5cf53c: ldur            w0, [x1, #0xf]
    // 0x5cf540: DecompressPointer r0
    //     0x5cf540: add             x0, x0, HEAP, lsl #32
    // 0x5cf544: str             x0, [SP]
    // 0x5cf548: r0 = _onCursorTick()
    //     0x5cf548: bl              #0x5cf210  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick
    // 0x5cf54c: LeaveFrame
    //     0x5cf54c: mov             SP, fp
    //     0x5cf550: ldp             fp, lr, [SP], #0x10
    // 0x5cf554: ret
    //     0x5cf554: ret             
    // 0x5cf558: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5cf558: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5cf55c: b               #0x5cf53c
  }
  Simulation _iosBlinkCursorSimulation(EditableTextState) {
    // ** addr: 0x5cf560, size: 0x38
    // 0x5cf560: EnterFrame
    //     0x5cf560: stp             fp, lr, [SP, #-0x10]!
    //     0x5cf564: mov             fp, SP
    // 0x5cf568: r0 = _DiscreteKeyFrameSimulation()
    //     0x5cf568: bl              #0x5cf598  ; Allocate_DiscreteKeyFrameSimulationStub -> _DiscreteKeyFrameSimulation (size=0x20)
    // 0x5cf56c: r1 = 0
    //     0x5cf56c: movz            x1, #0
    // 0x5cf570: ArrayStore: r0[0] = r1  ; List_8
    //     0x5cf570: stur            x1, [x0, #0x17]
    // 0x5cf574: r1 = const [Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame']
    //     0x5cf574: ldr             x1, [PP, #0x60f8]  ; [pp+0x60f8] List<_KeyFrame>(11)
    // 0x5cf578: StoreField: r0->field_13 = r1
    //     0x5cf578: stur            w1, [x0, #0x13]
    // 0x5cf57c: d0 = 1.000000
    //     0x5cf57c: fmov            d0, #1.00000000
    // 0x5cf580: StoreField: r0->field_b = d0
    //     0x5cf580: stur            d0, [x0, #0xb]
    // 0x5cf584: r1 = Instance_Tolerance
    //     0x5cf584: ldr             x1, [PP, #0x6050]  ; [pp+0x6050] Obj!Tolerance@c2d611
    // 0x5cf588: StoreField: r0->field_7 = r1
    //     0x5cf588: stur            w1, [x0, #7]
    // 0x5cf58c: LeaveFrame
    //     0x5cf58c: mov             SP, fp
    //     0x5cf590: ldp             fp, lr, [SP], #0x10
    // 0x5cf594: ret
    //     0x5cf594: ret             
  }
  get _ _floatingCursorOffset(/* No info */) {
    // ** addr: 0x5d0ab8, size: 0x80
    // 0x5d0ab8: EnterFrame
    //     0x5d0ab8: stp             fp, lr, [SP, #-0x10]!
    //     0x5d0abc: mov             fp, SP
    // 0x5d0ac0: AllocStack(0x10)
    //     0x5d0ac0: sub             SP, SP, #0x10
    // 0x5d0ac4: CheckStackOverflow
    //     0x5d0ac4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d0ac8: cmp             SP, x16
    //     0x5d0acc: b.ls            #0x5d0b30
    // 0x5d0ad0: ldr             x1, [fp, #0x10]
    // 0x5d0ad4: LoadField: r0 = r1->field_a7
    //     0x5d0ad4: ldur            w0, [x1, #0xa7]
    // 0x5d0ad8: DecompressPointer r0
    //     0x5d0ad8: add             x0, x0, HEAP, lsl #32
    // 0x5d0adc: r16 = Sentinel
    //     0x5d0adc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d0ae0: cmp             w0, w16
    // 0x5d0ae4: b.ne            #0x5d0af0
    // 0x5d0ae8: r2 = renderEditable
    //     0x5d0ae8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d0aec: r0 = InitLateFinalInstanceField()
    //     0x5d0aec: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d0af0: LoadField: r1 = r0->field_b7
    //     0x5d0af0: ldur            w1, [x0, #0xb7]
    // 0x5d0af4: DecompressPointer r1
    //     0x5d0af4: add             x1, x1, HEAP, lsl #32
    // 0x5d0af8: str             x1, [SP]
    // 0x5d0afc: r0 = preferredLineHeight()
    //     0x5d0afc: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x5d0b00: mov             v1.16b, v0.16b
    // 0x5d0b04: d0 = 2.000000
    //     0x5d0b04: fmov            d0, #2.00000000
    // 0x5d0b08: fdiv            d2, d1, d0
    // 0x5d0b0c: stur            d2, [fp, #-8]
    // 0x5d0b10: r0 = Offset()
    //     0x5d0b10: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x5d0b14: d0 = 0.000000
    //     0x5d0b14: eor             v0.16b, v0.16b, v0.16b
    // 0x5d0b18: StoreField: r0->field_7 = d0
    //     0x5d0b18: stur            d0, [x0, #7]
    // 0x5d0b1c: ldur            d0, [fp, #-8]
    // 0x5d0b20: StoreField: r0->field_f = d0
    //     0x5d0b20: stur            d0, [x0, #0xf]
    // 0x5d0b24: LeaveFrame
    //     0x5d0b24: mov             SP, fp
    //     0x5d0b28: ldp             fp, lr, [SP], #0x10
    // 0x5d0b2c: ret
    //     0x5d0b2c: ret             
    // 0x5d0b30: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d0b30: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d0b34: b               #0x5d0ad0
  }
  get _ _cursorBlinkOpacityController(/* No info */) {
    // ** addr: 0x5d1124, size: 0xb8
    // 0x5d1124: EnterFrame
    //     0x5d1124: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1128: mov             fp, SP
    // 0x5d112c: AllocStack(0x18)
    //     0x5d112c: sub             SP, SP, #0x18
    // 0x5d1130: CheckStackOverflow
    //     0x5d1130: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d1134: cmp             SP, x16
    //     0x5d1138: b.ls            #0x5d11d4
    // 0x5d113c: ldr             x0, [fp, #0x10]
    // 0x5d1140: LoadField: r1 = r0->field_23
    //     0x5d1140: ldur            w1, [x0, #0x23]
    // 0x5d1144: DecompressPointer r1
    //     0x5d1144: add             x1, x1, HEAP, lsl #32
    // 0x5d1148: cmp             w1, NULL
    // 0x5d114c: b.ne            #0x5d11c4
    // 0x5d1150: r1 = <double>
    //     0x5d1150: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0x5d1154: r0 = AnimationController()
    //     0x5d1154: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0x5d1158: stur            x0, [fp, #-8]
    // 0x5d115c: ldr             x16, [fp, #0x10]
    // 0x5d1160: stp             x16, x0, [SP]
    // 0x5d1164: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x5d1164: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x5d1168: r0 = AnimationController()
    //     0x5d1168: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0x5d116c: r1 = 1
    //     0x5d116c: movz            x1, #0x1
    // 0x5d1170: r0 = AllocateContext()
    //     0x5d1170: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d1174: mov             x1, x0
    // 0x5d1178: ldr             x0, [fp, #0x10]
    // 0x5d117c: StoreField: r1->field_f = r0
    //     0x5d117c: stur            w0, [x1, #0xf]
    // 0x5d1180: mov             x2, x1
    // 0x5d1184: r1 = Function '_onCursorColorTick@244183791':.
    //     0x5d1184: ldr             x1, [PP, #0x6168]  ; [pp+0x6168] AnonymousClosure: (0x5d11dc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorColorTick (0x5d1224)
    // 0x5d1188: r0 = AllocateClosure()
    //     0x5d1188: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d118c: ldur            x16, [fp, #-8]
    // 0x5d1190: stp             x0, x16, [SP]
    // 0x5d1194: r0 = addActionListener()
    //     0x5d1194: bl              #0xae8304  ; [package:flutter/src/widgets/actions.dart] Action::addActionListener
    // 0x5d1198: ldur            x0, [fp, #-8]
    // 0x5d119c: ldr             x2, [fp, #0x10]
    // 0x5d11a0: StoreField: r2->field_23 = r0
    //     0x5d11a0: stur            w0, [x2, #0x23]
    //     0x5d11a4: ldurb           w16, [x2, #-1]
    //     0x5d11a8: ldurb           w17, [x0, #-1]
    //     0x5d11ac: and             x16, x17, x16, lsr #2
    //     0x5d11b0: tst             x16, HEAP, lsr #32
    //     0x5d11b4: b.eq            #0x5d11bc
    //     0x5d11b8: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x5d11bc: ldur            x0, [fp, #-8]
    // 0x5d11c0: b               #0x5d11c8
    // 0x5d11c4: mov             x0, x1
    // 0x5d11c8: LeaveFrame
    //     0x5d11c8: mov             SP, fp
    //     0x5d11cc: ldp             fp, lr, [SP], #0x10
    // 0x5d11d0: ret
    //     0x5d11d0: ret             
    // 0x5d11d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d11d4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d11d8: b               #0x5d113c
  }
  [closure] void _onCursorColorTick(dynamic) {
    // ** addr: 0x5d11dc, size: 0x48
    // 0x5d11dc: EnterFrame
    //     0x5d11dc: stp             fp, lr, [SP, #-0x10]!
    //     0x5d11e0: mov             fp, SP
    // 0x5d11e4: AllocStack(0x8)
    //     0x5d11e4: sub             SP, SP, #8
    // 0x5d11e8: SetupParameters()
    //     0x5d11e8: ldr             x0, [fp, #0x10]
    //     0x5d11ec: ldur            w1, [x0, #0x17]
    //     0x5d11f0: add             x1, x1, HEAP, lsl #32
    // 0x5d11f4: CheckStackOverflow
    //     0x5d11f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d11f8: cmp             SP, x16
    //     0x5d11fc: b.ls            #0x5d121c
    // 0x5d1200: LoadField: r0 = r1->field_f
    //     0x5d1200: ldur            w0, [x1, #0xf]
    // 0x5d1204: DecompressPointer r0
    //     0x5d1204: add             x0, x0, HEAP, lsl #32
    // 0x5d1208: str             x0, [SP]
    // 0x5d120c: r0 = _onCursorColorTick()
    //     0x5d120c: bl              #0x5d1224  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorColorTick
    // 0x5d1210: LeaveFrame
    //     0x5d1210: mov             SP, fp
    //     0x5d1214: ldp             fp, lr, [SP], #0x10
    // 0x5d1218: ret
    //     0x5d1218: ret             
    // 0x5d121c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d121c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d1220: b               #0x5d1200
  }
  _ _onCursorColorTick(/* No info */) {
    // ** addr: 0x5d1224, size: 0x148
    // 0x5d1224: EnterFrame
    //     0x5d1224: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1228: mov             fp, SP
    // 0x5d122c: AllocStack(0x20)
    //     0x5d122c: sub             SP, SP, #0x20
    // 0x5d1230: CheckStackOverflow
    //     0x5d1230: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d1234: cmp             SP, x16
    //     0x5d1238: b.ls            #0x5d134c
    // 0x5d123c: ldr             x1, [fp, #0x10]
    // 0x5d1240: LoadField: r0 = r1->field_a7
    //     0x5d1240: ldur            w0, [x1, #0xa7]
    // 0x5d1244: DecompressPointer r0
    //     0x5d1244: add             x0, x0, HEAP, lsl #32
    // 0x5d1248: r16 = Sentinel
    //     0x5d1248: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d124c: cmp             w0, w16
    // 0x5d1250: b.ne            #0x5d125c
    // 0x5d1254: r2 = renderEditable
    //     0x5d1254: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d1258: r0 = InitLateFinalInstanceField()
    //     0x5d1258: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d125c: mov             x1, x0
    // 0x5d1260: ldr             x0, [fp, #0x10]
    // 0x5d1264: stur            x1, [fp, #-0x10]
    // 0x5d1268: LoadField: r2 = r0->field_b
    //     0x5d1268: ldur            w2, [x0, #0xb]
    // 0x5d126c: DecompressPointer r2
    //     0x5d126c: add             x2, x2, HEAP, lsl #32
    // 0x5d1270: cmp             w2, NULL
    // 0x5d1274: b.eq            #0x5d1354
    // 0x5d1278: LoadField: r3 = r2->field_67
    //     0x5d1278: ldur            w3, [x2, #0x67]
    // 0x5d127c: DecompressPointer r3
    //     0x5d127c: add             x3, x3, HEAP, lsl #32
    // 0x5d1280: stur            x3, [fp, #-8]
    // 0x5d1284: str             x0, [SP]
    // 0x5d1288: r0 = _cursorBlinkOpacityController()
    //     0x5d1288: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5d128c: LoadField: r1 = r0->field_37
    //     0x5d128c: ldur            w1, [x0, #0x37]
    // 0x5d1290: DecompressPointer r1
    //     0x5d1290: add             x1, x1, HEAP, lsl #32
    // 0x5d1294: r16 = Sentinel
    //     0x5d1294: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d1298: cmp             w1, w16
    // 0x5d129c: b.eq            #0x5d1358
    // 0x5d12a0: LoadField: d0 = r1->field_7
    //     0x5d12a0: ldur            d0, [x1, #7]
    // 0x5d12a4: ldur            x16, [fp, #-8]
    // 0x5d12a8: str             x16, [SP, #8]
    // 0x5d12ac: str             d0, [SP]
    // 0x5d12b0: r0 = withOpacity()
    //     0x5d12b0: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x5d12b4: ldur            x16, [fp, #-0x10]
    // 0x5d12b8: stp             x0, x16, [SP]
    // 0x5d12bc: r0 = cursorColor=()
    //     0x5d12bc: bl              #0x5d136c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorColor=
    // 0x5d12c0: ldr             x0, [fp, #0x10]
    // 0x5d12c4: LoadField: r1 = r0->field_2b
    //     0x5d12c4: ldur            w1, [x0, #0x2b]
    // 0x5d12c8: DecompressPointer r1
    //     0x5d12c8: add             x1, x1, HEAP, lsl #32
    // 0x5d12cc: stur            x1, [fp, #-8]
    // 0x5d12d0: LoadField: r2 = r0->field_b
    //     0x5d12d0: ldur            w2, [x0, #0xb]
    // 0x5d12d4: DecompressPointer r2
    //     0x5d12d4: add             x2, x2, HEAP, lsl #32
    // 0x5d12d8: cmp             w2, NULL
    // 0x5d12dc: b.eq            #0x5d1360
    // 0x5d12e0: LoadField: r3 = r2->field_33
    //     0x5d12e0: ldur            w3, [x2, #0x33]
    // 0x5d12e4: DecompressPointer r3
    //     0x5d12e4: add             x3, x3, HEAP, lsl #32
    // 0x5d12e8: tbnz            w3, #4, #0x5d132c
    // 0x5d12ec: str             x0, [SP]
    // 0x5d12f0: r0 = _cursorBlinkOpacityController()
    //     0x5d12f0: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5d12f4: LoadField: r1 = r0->field_37
    //     0x5d12f4: ldur            w1, [x0, #0x37]
    // 0x5d12f8: DecompressPointer r1
    //     0x5d12f8: add             x1, x1, HEAP, lsl #32
    // 0x5d12fc: r16 = Sentinel
    //     0x5d12fc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d1300: cmp             w1, w16
    // 0x5d1304: b.eq            #0x5d1364
    // 0x5d1308: LoadField: d0 = r1->field_7
    //     0x5d1308: ldur            d0, [x1, #7]
    // 0x5d130c: d1 = 0.000000
    //     0x5d130c: eor             v1.16b, v1.16b, v1.16b
    // 0x5d1310: fcmp            d0, d1
    // 0x5d1314: b.vs            #0x5d131c
    // 0x5d1318: b.gt            #0x5d1324
    // 0x5d131c: r0 = false
    //     0x5d131c: add             x0, NULL, #0x30  ; false
    // 0x5d1320: b               #0x5d1328
    // 0x5d1324: r0 = true
    //     0x5d1324: add             x0, NULL, #0x20  ; true
    // 0x5d1328: b               #0x5d1330
    // 0x5d132c: r0 = false
    //     0x5d132c: add             x0, NULL, #0x30  ; false
    // 0x5d1330: ldur            x16, [fp, #-8]
    // 0x5d1334: stp             x0, x16, [SP]
    // 0x5d1338: r0 = value=()
    //     0x5d1338: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x5d133c: r0 = Null
    //     0x5d133c: mov             x0, NULL
    // 0x5d1340: LeaveFrame
    //     0x5d1340: mov             SP, fp
    //     0x5d1344: ldp             fp, lr, [SP], #0x10
    // 0x5d1348: ret
    //     0x5d1348: ret             
    // 0x5d134c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d134c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d1350: b               #0x5d123c
    // 0x5d1354: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1354: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1358: r9 = _value
    //     0x5d1358: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x5d135c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5d135c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x5d1360: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1360: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1364: r9 = _value
    //     0x5d1364: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x5d1368: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5d1368: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ _stopCursorBlink(/* No info */) {
    // ** addr: 0x5d1584, size: 0xd0
    // 0x5d1584: EnterFrame
    //     0x5d1584: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1588: mov             fp, SP
    // 0x5d158c: AllocStack(0x20)
    //     0x5d158c: sub             SP, SP, #0x20
    // 0x5d1590: SetupParameters(EditableTextState this /* r3, fp-0x10 */, {dynamic resetCharTicks = true /* r0, fp-0x8 */})
    //     0x5d1590: mov             x0, x4
    //     0x5d1594: ldur            w1, [x0, #0x13]
    //     0x5d1598: add             x1, x1, HEAP, lsl #32
    //     0x5d159c: sub             x2, x1, #2
    //     0x5d15a0: add             x3, fp, w2, sxtw #2
    //     0x5d15a4: ldr             x3, [x3, #0x10]
    //     0x5d15a8: stur            x3, [fp, #-0x10]
    //     0x5d15ac: ldur            w2, [x0, #0x1f]
    //     0x5d15b0: add             x2, x2, HEAP, lsl #32
    //     0x5d15b4: ldr             x16, [PP, #0x6178]  ; [pp+0x6178] "resetCharTicks"
    //     0x5d15b8: cmp             w2, w16
    //     0x5d15bc: b.ne            #0x5d15dc
    //     0x5d15c0: ldur            w2, [x0, #0x23]
    //     0x5d15c4: add             x2, x2, HEAP, lsl #32
    //     0x5d15c8: sub             w0, w1, w2
    //     0x5d15cc: add             x1, fp, w0, sxtw #2
    //     0x5d15d0: ldr             x1, [x1, #8]
    //     0x5d15d4: mov             x0, x1
    //     0x5d15d8: b               #0x5d15e0
    //     0x5d15dc: add             x0, NULL, #0x20  ; true
    //     0x5d15e0: stur            x0, [fp, #-8]
    // 0x5d15e4: CheckStackOverflow
    //     0x5d15e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d15e8: cmp             SP, x16
    //     0x5d15ec: b.ls            #0x5d164c
    // 0x5d15f0: str             x3, [SP]
    // 0x5d15f4: r0 = _cursorBlinkOpacityController()
    //     0x5d15f4: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x5d15f8: stp             xzr, x0, [SP]
    // 0x5d15fc: r0 = value=()
    //     0x5d15fc: bl              #0x5d10b8  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::value=
    // 0x5d1600: ldur            x0, [fp, #-0x10]
    // 0x5d1604: LoadField: r1 = r0->field_1f
    //     0x5d1604: ldur            w1, [x0, #0x1f]
    // 0x5d1608: DecompressPointer r1
    //     0x5d1608: add             x1, x1, HEAP, lsl #32
    // 0x5d160c: cmp             w1, NULL
    // 0x5d1610: b.ne            #0x5d161c
    // 0x5d1614: mov             x1, x0
    // 0x5d1618: b               #0x5d1628
    // 0x5d161c: str             x1, [SP]
    // 0x5d1620: r0 = cancel()
    //     0x5d1620: bl              #0x5cf100  ; [dart:isolate] _Timer::cancel
    // 0x5d1624: ldur            x1, [fp, #-0x10]
    // 0x5d1628: ldur            x2, [fp, #-8]
    // 0x5d162c: StoreField: r1->field_1f = rNULL
    //     0x5d162c: stur            NULL, [x1, #0x1f]
    // 0x5d1630: tbnz            w2, #4, #0x5d163c
    // 0x5d1634: r2 = 0
    //     0x5d1634: movz            x2, #0
    // 0x5d1638: StoreField: r1->field_9b = r2
    //     0x5d1638: stur            x2, [x1, #0x9b]
    // 0x5d163c: r0 = Null
    //     0x5d163c: mov             x0, NULL
    // 0x5d1640: LeaveFrame
    //     0x5d1640: mov             SP, fp
    //     0x5d1644: ldp             fp, lr, [SP], #0x10
    // 0x5d1648: ret
    //     0x5d1648: ret             
    // 0x5d164c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d164c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d1650: b               #0x5d15f0
  }
  _ _onFloatingCursorResetTick(/* No info */) {
    // ** addr: 0x5d1654, size: 0x3dc
    // 0x5d1654: EnterFrame
    //     0x5d1654: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1658: mov             fp, SP
    // 0x5d165c: AllocStack(0x58)
    //     0x5d165c: sub             SP, SP, #0x58
    // 0x5d1660: CheckStackOverflow
    //     0x5d1660: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d1664: cmp             SP, x16
    //     0x5d1668: b.ls            #0x5d1978
    // 0x5d166c: ldr             x1, [fp, #0x10]
    // 0x5d1670: LoadField: r0 = r1->field_a7
    //     0x5d1670: ldur            w0, [x1, #0xa7]
    // 0x5d1674: DecompressPointer r0
    //     0x5d1674: add             x0, x0, HEAP, lsl #32
    // 0x5d1678: r16 = Sentinel
    //     0x5d1678: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d167c: cmp             w0, w16
    // 0x5d1680: b.ne            #0x5d168c
    // 0x5d1684: r2 = renderEditable
    //     0x5d1684: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d1688: r0 = InitLateFinalInstanceField()
    //     0x5d1688: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d168c: mov             x1, x0
    // 0x5d1690: ldr             x0, [fp, #0x10]
    // 0x5d1694: LoadField: r2 = r0->field_7b
    //     0x5d1694: ldur            w2, [x0, #0x7b]
    // 0x5d1698: DecompressPointer r2
    //     0x5d1698: add             x2, x2, HEAP, lsl #32
    // 0x5d169c: cmp             w2, NULL
    // 0x5d16a0: b.eq            #0x5d1980
    // 0x5d16a4: stp             x2, x1, [SP]
    // 0x5d16a8: r0 = getLocalRectForCaret()
    //     0x5d16a8: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5d16ac: str             x0, [SP]
    // 0x5d16b0: r0 = centerLeft()
    //     0x5d16b0: bl              #0x5dc310  ; [dart:ui] Rect::centerLeft
    // 0x5d16b4: stur            x0, [fp, #-8]
    // 0x5d16b8: ldr             x16, [fp, #0x10]
    // 0x5d16bc: str             x16, [SP]
    // 0x5d16c0: r0 = _floatingCursorOffset()
    //     0x5d16c0: bl              #0x5d0ab8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_floatingCursorOffset
    // 0x5d16c4: ldur            x16, [fp, #-8]
    // 0x5d16c8: stp             x0, x16, [SP]
    // 0x5d16cc: r0 = -()
    //     0x5d16cc: bl              #0x5036ec  ; [dart:ui] Offset::-
    // 0x5d16d0: mov             x1, x0
    // 0x5d16d4: ldr             x0, [fp, #0x10]
    // 0x5d16d8: stur            x1, [fp, #-8]
    // 0x5d16dc: LoadField: r2 = r0->field_67
    //     0x5d16dc: ldur            w2, [x0, #0x67]
    // 0x5d16e0: DecompressPointer r2
    //     0x5d16e0: add             x2, x2, HEAP, lsl #32
    // 0x5d16e4: cmp             w2, NULL
    // 0x5d16e8: b.eq            #0x5d1984
    // 0x5d16ec: str             x2, [SP]
    // 0x5d16f0: r0 = isCompleted()
    //     0x5d16f0: bl              #0x5dc2ac  ; [package:flutter/src/animation/animation.dart] Animation::isCompleted
    // 0x5d16f4: tbnz            w0, #4, #0x5d17cc
    // 0x5d16f8: ldr             x0, [fp, #0x10]
    // 0x5d16fc: LoadField: r1 = r0->field_a7
    //     0x5d16fc: ldur            w1, [x0, #0xa7]
    // 0x5d1700: DecompressPointer r1
    //     0x5d1700: add             x1, x1, HEAP, lsl #32
    // 0x5d1704: LoadField: r2 = r0->field_7b
    //     0x5d1704: ldur            w2, [x0, #0x7b]
    // 0x5d1708: DecompressPointer r2
    //     0x5d1708: add             x2, x2, HEAP, lsl #32
    // 0x5d170c: cmp             w2, NULL
    // 0x5d1710: b.eq            #0x5d1988
    // 0x5d1714: r16 = Instance_FloatingCursorDragState
    //     0x5d1714: ldr             x16, [PP, #0x6148]  ; [pp+0x6148] Obj!FloatingCursorDragState@c430b1
    // 0x5d1718: stp             x16, x1, [SP, #0x10]
    // 0x5d171c: ldur            x16, [fp, #-8]
    // 0x5d1720: stp             x2, x16, [SP]
    // 0x5d1724: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0x5d1724: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0x5d1728: r0 = setFloatingCursor()
    //     0x5d1728: bl              #0x5d0170  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x5d172c: ldr             x0, [fp, #0x10]
    // 0x5d1730: LoadField: r1 = r0->field_a7
    //     0x5d1730: ldur            w1, [x0, #0xa7]
    // 0x5d1734: DecompressPointer r1
    //     0x5d1734: add             x1, x1, HEAP, lsl #32
    // 0x5d1738: LoadField: r2 = r1->field_e3
    //     0x5d1738: ldur            w2, [x1, #0xe3]
    // 0x5d173c: DecompressPointer r2
    //     0x5d173c: add             x2, x2, HEAP, lsl #32
    // 0x5d1740: LoadField: r1 = r2->field_7
    //     0x5d1740: ldur            x1, [x2, #7]
    // 0x5d1744: LoadField: r3 = r2->field_f
    //     0x5d1744: ldur            x3, [x2, #0xf]
    // 0x5d1748: cmp             x1, x3
    // 0x5d174c: b.ne            #0x5d17b4
    // 0x5d1750: LoadField: r1 = r0->field_7b
    //     0x5d1750: ldur            w1, [x0, #0x7b]
    // 0x5d1754: DecompressPointer r1
    //     0x5d1754: add             x1, x1, HEAP, lsl #32
    // 0x5d1758: stur            x1, [fp, #-0x18]
    // 0x5d175c: cmp             w1, NULL
    // 0x5d1760: b.eq            #0x5d198c
    // 0x5d1764: LoadField: r2 = r1->field_7
    //     0x5d1764: ldur            x2, [x1, #7]
    // 0x5d1768: stur            x2, [fp, #-0x10]
    // 0x5d176c: r0 = TextSelection()
    //     0x5d176c: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x5d1770: mov             x1, x0
    // 0x5d1774: ldur            x0, [fp, #-0x10]
    // 0x5d1778: ArrayStore: r1[0] = r0  ; List_8
    //     0x5d1778: stur            x0, [x1, #0x17]
    // 0x5d177c: StoreField: r1->field_1f = r0
    //     0x5d177c: stur            x0, [x1, #0x1f]
    // 0x5d1780: ldur            x2, [fp, #-0x18]
    // 0x5d1784: LoadField: r3 = r2->field_f
    //     0x5d1784: ldur            w3, [x2, #0xf]
    // 0x5d1788: DecompressPointer r3
    //     0x5d1788: add             x3, x3, HEAP, lsl #32
    // 0x5d178c: StoreField: r1->field_27 = r3
    //     0x5d178c: stur            w3, [x1, #0x27]
    // 0x5d1790: r2 = false
    //     0x5d1790: add             x2, NULL, #0x30  ; false
    // 0x5d1794: StoreField: r1->field_2b = r2
    //     0x5d1794: stur            w2, [x1, #0x2b]
    // 0x5d1798: StoreField: r1->field_7 = r0
    //     0x5d1798: stur            x0, [x1, #7]
    // 0x5d179c: StoreField: r1->field_f = r0
    //     0x5d179c: stur            x0, [x1, #0xf]
    // 0x5d17a0: ldr             x16, [fp, #0x10]
    // 0x5d17a4: stp             x1, x16, [SP, #8]
    // 0x5d17a8: r16 = Instance_SelectionChangedCause
    //     0x5d17a8: ldr             x16, [PP, #0x6180]  ; [pp+0x6180] Obj!SelectionChangedCause@c43091
    // 0x5d17ac: str             x16, [SP]
    // 0x5d17b0: r0 = _handleSelectionChanged()
    //     0x5d17b0: bl              #0x5d1a30  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x5d17b4: ldr             x0, [fp, #0x10]
    // 0x5d17b8: StoreField: r0->field_77 = rNULL
    //     0x5d17b8: stur            NULL, [x0, #0x77]
    // 0x5d17bc: StoreField: r0->field_7b = rNULL
    //     0x5d17bc: stur            NULL, [x0, #0x7b]
    // 0x5d17c0: StoreField: r0->field_7f = rNULL
    //     0x5d17c0: stur            NULL, [x0, #0x7f]
    // 0x5d17c4: StoreField: r0->field_83 = rNULL
    //     0x5d17c4: stur            NULL, [x0, #0x83]
    // 0x5d17c8: b               #0x5d1968
    // 0x5d17cc: ldr             x0, [fp, #0x10]
    // 0x5d17d0: ldur            x1, [fp, #-8]
    // 0x5d17d4: LoadField: r2 = r0->field_67
    //     0x5d17d4: ldur            w2, [x0, #0x67]
    // 0x5d17d8: DecompressPointer r2
    //     0x5d17d8: add             x2, x2, HEAP, lsl #32
    // 0x5d17dc: cmp             w2, NULL
    // 0x5d17e0: b.eq            #0x5d1990
    // 0x5d17e4: LoadField: r3 = r2->field_37
    //     0x5d17e4: ldur            w3, [x2, #0x37]
    // 0x5d17e8: DecompressPointer r3
    //     0x5d17e8: add             x3, x3, HEAP, lsl #32
    // 0x5d17ec: r16 = Sentinel
    //     0x5d17ec: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d17f0: cmp             w3, w16
    // 0x5d17f4: b.eq            #0x5d1994
    // 0x5d17f8: stur            x3, [fp, #-0x18]
    // 0x5d17fc: LoadField: r2 = r0->field_83
    //     0x5d17fc: ldur            w2, [x0, #0x83]
    // 0x5d1800: DecompressPointer r2
    //     0x5d1800: add             x2, x2, HEAP, lsl #32
    // 0x5d1804: cmp             w2, NULL
    // 0x5d1808: b.eq            #0x5d199c
    // 0x5d180c: LoadField: d0 = r2->field_7
    //     0x5d180c: ldur            d0, [x2, #7]
    // 0x5d1810: LoadField: d1 = r1->field_7
    //     0x5d1810: ldur            d1, [x1, #7]
    // 0x5d1814: r2 = inline_Allocate_Double()
    //     0x5d1814: ldp             x2, x4, [THR, #0x50]  ; THR::top
    //     0x5d1818: add             x2, x2, #0x10
    //     0x5d181c: cmp             x4, x2
    //     0x5d1820: b.ls            #0x5d19a0
    //     0x5d1824: str             x2, [THR, #0x50]  ; THR::top
    //     0x5d1828: sub             x2, x2, #0xf
    //     0x5d182c: movz            x4, #0xd148
    //     0x5d1830: movk            x4, #0x3, lsl #16
    //     0x5d1834: stur            x4, [x2, #-1]
    // 0x5d1838: StoreField: r2->field_7 = d0
    //     0x5d1838: stur            d0, [x2, #7]
    // 0x5d183c: r4 = inline_Allocate_Double()
    //     0x5d183c: ldp             x4, x5, [THR, #0x50]  ; THR::top
    //     0x5d1840: add             x4, x4, #0x10
    //     0x5d1844: cmp             x5, x4
    //     0x5d1848: b.ls            #0x5d19c4
    //     0x5d184c: str             x4, [THR, #0x50]  ; THR::top
    //     0x5d1850: sub             x4, x4, #0xf
    //     0x5d1854: movz            x5, #0xd148
    //     0x5d1858: movk            x5, #0x3, lsl #16
    //     0x5d185c: stur            x5, [x4, #-1]
    // 0x5d1860: StoreField: r4->field_7 = d1
    //     0x5d1860: stur            d1, [x4, #7]
    // 0x5d1864: stp             x4, x2, [SP, #8]
    // 0x5d1868: str             x3, [SP]
    // 0x5d186c: r0 = lerpDouble()
    //     0x5d186c: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x5d1870: mov             x1, x0
    // 0x5d1874: ldr             x0, [fp, #0x10]
    // 0x5d1878: stur            x1, [fp, #-0x20]
    // 0x5d187c: LoadField: r2 = r0->field_83
    //     0x5d187c: ldur            w2, [x0, #0x83]
    // 0x5d1880: DecompressPointer r2
    //     0x5d1880: add             x2, x2, HEAP, lsl #32
    // 0x5d1884: cmp             w2, NULL
    // 0x5d1888: b.eq            #0x5d19e8
    // 0x5d188c: LoadField: d0 = r2->field_f
    //     0x5d188c: ldur            d0, [x2, #0xf]
    // 0x5d1890: ldur            x2, [fp, #-8]
    // 0x5d1894: LoadField: d1 = r2->field_f
    //     0x5d1894: ldur            d1, [x2, #0xf]
    // 0x5d1898: r2 = inline_Allocate_Double()
    //     0x5d1898: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x5d189c: add             x2, x2, #0x10
    //     0x5d18a0: cmp             x3, x2
    //     0x5d18a4: b.ls            #0x5d19ec
    //     0x5d18a8: str             x2, [THR, #0x50]  ; THR::top
    //     0x5d18ac: sub             x2, x2, #0xf
    //     0x5d18b0: movz            x3, #0xd148
    //     0x5d18b4: movk            x3, #0x3, lsl #16
    //     0x5d18b8: stur            x3, [x2, #-1]
    // 0x5d18bc: StoreField: r2->field_7 = d0
    //     0x5d18bc: stur            d0, [x2, #7]
    // 0x5d18c0: r3 = inline_Allocate_Double()
    //     0x5d18c0: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x5d18c4: add             x3, x3, #0x10
    //     0x5d18c8: cmp             x4, x3
    //     0x5d18cc: b.ls            #0x5d1a08
    //     0x5d18d0: str             x3, [THR, #0x50]  ; THR::top
    //     0x5d18d4: sub             x3, x3, #0xf
    //     0x5d18d8: movz            x4, #0xd148
    //     0x5d18dc: movk            x4, #0x3, lsl #16
    //     0x5d18e0: stur            x4, [x3, #-1]
    // 0x5d18e4: StoreField: r3->field_7 = d1
    //     0x5d18e4: stur            d1, [x3, #7]
    // 0x5d18e8: stp             x3, x2, [SP, #8]
    // 0x5d18ec: ldur            x16, [fp, #-0x18]
    // 0x5d18f0: str             x16, [SP]
    // 0x5d18f4: r0 = lerpDouble()
    //     0x5d18f4: bl              #0x5ad38c  ; [dart:ui] ::lerpDouble
    // 0x5d18f8: mov             x1, x0
    // 0x5d18fc: ldr             x0, [fp, #0x10]
    // 0x5d1900: stur            x1, [fp, #-0x28]
    // 0x5d1904: LoadField: r2 = r0->field_a7
    //     0x5d1904: ldur            w2, [x0, #0xa7]
    // 0x5d1908: DecompressPointer r2
    //     0x5d1908: add             x2, x2, HEAP, lsl #32
    // 0x5d190c: ldur            x3, [fp, #-0x20]
    // 0x5d1910: stur            x2, [fp, #-8]
    // 0x5d1914: LoadField: d0 = r3->field_7
    //     0x5d1914: ldur            d0, [x3, #7]
    // 0x5d1918: stur            d0, [fp, #-0x30]
    // 0x5d191c: r0 = Offset()
    //     0x5d191c: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0x5d1920: ldur            d0, [fp, #-0x30]
    // 0x5d1924: StoreField: r0->field_7 = d0
    //     0x5d1924: stur            d0, [x0, #7]
    // 0x5d1928: ldur            x1, [fp, #-0x28]
    // 0x5d192c: LoadField: d0 = r1->field_7
    //     0x5d192c: ldur            d0, [x1, #7]
    // 0x5d1930: StoreField: r0->field_f = d0
    //     0x5d1930: stur            d0, [x0, #0xf]
    // 0x5d1934: ldr             x1, [fp, #0x10]
    // 0x5d1938: LoadField: r2 = r1->field_7b
    //     0x5d1938: ldur            w2, [x1, #0x7b]
    // 0x5d193c: DecompressPointer r2
    //     0x5d193c: add             x2, x2, HEAP, lsl #32
    // 0x5d1940: cmp             w2, NULL
    // 0x5d1944: b.eq            #0x5d1a2c
    // 0x5d1948: ldur            x16, [fp, #-8]
    // 0x5d194c: r30 = Instance_FloatingCursorDragState
    //     0x5d194c: ldr             lr, [PP, #0x6188]  ; [pp+0x6188] Obj!FloatingCursorDragState@c430f1
    // 0x5d1950: stp             lr, x16, [SP, #0x18]
    // 0x5d1954: stp             x2, x0, [SP, #8]
    // 0x5d1958: ldur            x16, [fp, #-0x18]
    // 0x5d195c: str             x16, [SP]
    // 0x5d1960: r4 = const [0, 0x5, 0x5, 0x4, resetLerpValue, 0x4, null]
    //     0x5d1960: ldr             x4, [PP, #0x6190]  ; [pp+0x6190] List(7) [0, 0x5, 0x5, 0x4, "resetLerpValue", 0x4, Null]
    // 0x5d1964: r0 = setFloatingCursor()
    //     0x5d1964: bl              #0x5d0170  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setFloatingCursor
    // 0x5d1968: r0 = Null
    //     0x5d1968: mov             x0, NULL
    // 0x5d196c: LeaveFrame
    //     0x5d196c: mov             SP, fp
    //     0x5d1970: ldp             fp, lr, [SP], #0x10
    // 0x5d1974: ret
    //     0x5d1974: ret             
    // 0x5d1978: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d1978: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d197c: b               #0x5d166c
    // 0x5d1980: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1980: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1984: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1984: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1988: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1988: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d198c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d198c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1990: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1990: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1994: r9 = _value
    //     0x5d1994: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x5d1998: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5d1998: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x5d199c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d199c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d19a0: stp             q0, q1, [SP, #-0x20]!
    // 0x5d19a4: stp             x1, x3, [SP, #-0x10]!
    // 0x5d19a8: SaveReg r0
    //     0x5d19a8: str             x0, [SP, #-8]!
    // 0x5d19ac: r0 = AllocateDouble()
    //     0x5d19ac: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d19b0: mov             x2, x0
    // 0x5d19b4: RestoreReg r0
    //     0x5d19b4: ldr             x0, [SP], #8
    // 0x5d19b8: ldp             x1, x3, [SP], #0x10
    // 0x5d19bc: ldp             q0, q1, [SP], #0x20
    // 0x5d19c0: b               #0x5d1838
    // 0x5d19c4: SaveReg d1
    //     0x5d19c4: str             q1, [SP, #-0x10]!
    // 0x5d19c8: stp             x2, x3, [SP, #-0x10]!
    // 0x5d19cc: stp             x0, x1, [SP, #-0x10]!
    // 0x5d19d0: r0 = AllocateDouble()
    //     0x5d19d0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d19d4: mov             x4, x0
    // 0x5d19d8: ldp             x0, x1, [SP], #0x10
    // 0x5d19dc: ldp             x2, x3, [SP], #0x10
    // 0x5d19e0: RestoreReg d1
    //     0x5d19e0: ldr             q1, [SP], #0x10
    // 0x5d19e4: b               #0x5d1860
    // 0x5d19e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d19e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d19ec: stp             q0, q1, [SP, #-0x20]!
    // 0x5d19f0: stp             x0, x1, [SP, #-0x10]!
    // 0x5d19f4: r0 = AllocateDouble()
    //     0x5d19f4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d19f8: mov             x2, x0
    // 0x5d19fc: ldp             x0, x1, [SP], #0x10
    // 0x5d1a00: ldp             q0, q1, [SP], #0x20
    // 0x5d1a04: b               #0x5d18bc
    // 0x5d1a08: SaveReg d1
    //     0x5d1a08: str             q1, [SP, #-0x10]!
    // 0x5d1a0c: stp             x1, x2, [SP, #-0x10]!
    // 0x5d1a10: SaveReg r0
    //     0x5d1a10: str             x0, [SP, #-8]!
    // 0x5d1a14: r0 = AllocateDouble()
    //     0x5d1a14: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d1a18: mov             x3, x0
    // 0x5d1a1c: RestoreReg r0
    //     0x5d1a1c: ldr             x0, [SP], #8
    // 0x5d1a20: ldp             x1, x2, [SP], #0x10
    // 0x5d1a24: RestoreReg d1
    //     0x5d1a24: ldr             q1, [SP], #0x10
    // 0x5d1a28: b               #0x5d18e4
    // 0x5d1a2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1a2c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _handleSelectionChanged(/* No info */) {
    // ** addr: 0x5d1a30, size: 0x364
    // 0x5d1a30: EnterFrame
    //     0x5d1a30: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1a34: mov             fp, SP
    // 0x5d1a38: AllocStack(0x88)
    //     0x5d1a38: sub             SP, SP, #0x88
    // 0x5d1a3c: CheckStackOverflow
    //     0x5d1a3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d1a40: cmp             SP, x16
    //     0x5d1a44: b.ls            #0x5d1d70
    // 0x5d1a48: ldr             x0, [fp, #0x20]
    // 0x5d1a4c: LoadField: r1 = r0->field_b
    //     0x5d1a4c: ldur            w1, [x0, #0xb]
    // 0x5d1a50: DecompressPointer r1
    //     0x5d1a50: add             x1, x1, HEAP, lsl #32
    // 0x5d1a54: cmp             w1, NULL
    // 0x5d1a58: b.eq            #0x5d1d78
    // 0x5d1a5c: LoadField: r2 = r1->field_b
    //     0x5d1a5c: ldur            w2, [x1, #0xb]
    // 0x5d1a60: DecompressPointer r2
    //     0x5d1a60: add             x2, x2, HEAP, lsl #32
    // 0x5d1a64: ldr             x16, [fp, #0x18]
    // 0x5d1a68: stp             x16, x2, [SP]
    // 0x5d1a6c: r0 = isSelectionWithinTextBounds()
    //     0x5d1a6c: bl              #0x5dc1fc  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::isSelectionWithinTextBounds
    // 0x5d1a70: tbz             w0, #4, #0x5d1a84
    // 0x5d1a74: r0 = Null
    //     0x5d1a74: mov             x0, NULL
    // 0x5d1a78: LeaveFrame
    //     0x5d1a78: mov             SP, fp
    //     0x5d1a7c: ldp             fp, lr, [SP], #0x10
    // 0x5d1a80: ret
    //     0x5d1a80: ret             
    // 0x5d1a84: ldr             x0, [fp, #0x20]
    // 0x5d1a88: ldr             x1, [fp, #0x10]
    // 0x5d1a8c: LoadField: r2 = r0->field_b
    //     0x5d1a8c: ldur            w2, [x0, #0xb]
    // 0x5d1a90: DecompressPointer r2
    //     0x5d1a90: add             x2, x2, HEAP, lsl #32
    // 0x5d1a94: cmp             w2, NULL
    // 0x5d1a98: b.eq            #0x5d1d7c
    // 0x5d1a9c: LoadField: r3 = r2->field_b
    //     0x5d1a9c: ldur            w3, [x2, #0xb]
    // 0x5d1aa0: DecompressPointer r3
    //     0x5d1aa0: add             x3, x3, HEAP, lsl #32
    // 0x5d1aa4: ldr             x16, [fp, #0x18]
    // 0x5d1aa8: stp             x16, x3, [SP]
    // 0x5d1aac: r0 = selection=()
    //     0x5d1aac: bl              #0x5dc0b8  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection=
    // 0x5d1ab0: ldr             x0, [fp, #0x10]
    // 0x5d1ab4: cmp             w0, NULL
    // 0x5d1ab8: b.eq            #0x5d1b10
    // 0x5d1abc: r16 = Instance_SelectionChangedCause
    //     0x5d1abc: ldr             x16, [PP, #0x6198]  ; [pp+0x6198] Obj!SelectionChangedCause@c43071
    // 0x5d1ac0: cmp             w0, w16
    // 0x5d1ac4: b.eq            #0x5d1b10
    // 0x5d1ac8: r16 = Instance_SelectionChangedCause
    //     0x5d1ac8: ldr             x16, [PP, #0x61a0]  ; [pp+0x61a0] Obj!SelectionChangedCause@c43051
    // 0x5d1acc: cmp             w0, w16
    // 0x5d1ad0: b.eq            #0x5d1b10
    // 0x5d1ad4: r16 = Instance_SelectionChangedCause
    //     0x5d1ad4: ldr             x16, [PP, #0x6180]  ; [pp+0x6180] Obj!SelectionChangedCause@c43091
    // 0x5d1ad8: cmp             w0, w16
    // 0x5d1adc: b.eq            #0x5d1b10
    // 0x5d1ae0: r16 = Instance_SelectionChangedCause
    //     0x5d1ae0: ldr             x16, [PP, #0x61a8]  ; [pp+0x61a8] Obj!SelectionChangedCause@c43031
    // 0x5d1ae4: cmp             w0, w16
    // 0x5d1ae8: b.eq            #0x5d1b10
    // 0x5d1aec: r16 = Instance_SelectionChangedCause
    //     0x5d1aec: ldr             x16, [PP, #0x61b0]  ; [pp+0x61b0] Obj!SelectionChangedCause@c43011
    // 0x5d1af0: cmp             w0, w16
    // 0x5d1af4: b.eq            #0x5d1b10
    // 0x5d1af8: r16 = Instance_SelectionChangedCause
    //     0x5d1af8: ldr             x16, [PP, #0x61b8]  ; [pp+0x61b8] Obj!SelectionChangedCause@c42ff1
    // 0x5d1afc: cmp             w0, w16
    // 0x5d1b00: b.eq            #0x5d1b10
    // 0x5d1b04: r16 = Instance_SelectionChangedCause
    //     0x5d1b04: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x5d1b08: cmp             w0, w16
    // 0x5d1b0c: b.ne            #0x5d1b20
    // 0x5d1b10: ldr             x16, [fp, #0x20]
    // 0x5d1b14: str             x16, [SP]
    // 0x5d1b18: r0 = requestKeyboard()
    //     0x5d1b18: bl              #0x5d94c4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::requestKeyboard
    // 0x5d1b1c: b               #0x5d1b48
    // 0x5d1b20: r16 = Instance_SelectionChangedCause
    //     0x5d1b20: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x5d1b24: cmp             w0, w16
    // 0x5d1b28: b.ne            #0x5d1b48
    // 0x5d1b2c: ldr             x16, [fp, #0x20]
    // 0x5d1b30: str             x16, [SP]
    // 0x5d1b34: r0 = wantKeepAlive()
    //     0x5d1b34: bl              #0x5d9470  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::wantKeepAlive
    // 0x5d1b38: tbnz            w0, #4, #0x5d1b48
    // 0x5d1b3c: ldr             x16, [fp, #0x20]
    // 0x5d1b40: str             x16, [SP]
    // 0x5d1b44: r0 = requestKeyboard()
    //     0x5d1b44: bl              #0x5d94c4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::requestKeyboard
    // 0x5d1b48: ldr             x0, [fp, #0x20]
    // 0x5d1b4c: LoadField: r1 = r0->field_b
    //     0x5d1b4c: ldur            w1, [x0, #0xb]
    // 0x5d1b50: DecompressPointer r1
    //     0x5d1b50: add             x1, x1, HEAP, lsl #32
    // 0x5d1b54: cmp             w1, NULL
    // 0x5d1b58: b.eq            #0x5d1d80
    // 0x5d1b5c: LoadField: r2 = r0->field_3f
    //     0x5d1b5c: ldur            w2, [x0, #0x3f]
    // 0x5d1b60: DecompressPointer r2
    //     0x5d1b60: add             x2, x2, HEAP, lsl #32
    // 0x5d1b64: cmp             w2, NULL
    // 0x5d1b68: b.ne            #0x5d1b9c
    // 0x5d1b6c: str             x0, [SP]
    // 0x5d1b70: r0 = _createSelectionOverlay()
    //     0x5d1b70: bl              #0x5d2d28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x5d1b74: ldr             x3, [fp, #0x20]
    // 0x5d1b78: StoreField: r3->field_3f = r0
    //     0x5d1b78: stur            w0, [x3, #0x3f]
    //     0x5d1b7c: ldurb           w16, [x3, #-1]
    //     0x5d1b80: ldurb           w17, [x0, #-1]
    //     0x5d1b84: and             x16, x17, x16, lsr #2
    //     0x5d1b88: tst             x16, HEAP, lsr #32
    //     0x5d1b8c: b.eq            #0x5d1b94
    //     0x5d1b90: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x5d1b94: mov             x0, x3
    // 0x5d1b98: b               #0x5d1bbc
    // 0x5d1b9c: mov             x3, x0
    // 0x5d1ba0: LoadField: r0 = r1->field_b
    //     0x5d1ba0: ldur            w0, [x1, #0xb]
    // 0x5d1ba4: DecompressPointer r0
    //     0x5d1ba4: add             x0, x0, HEAP, lsl #32
    // 0x5d1ba8: LoadField: r1 = r0->field_27
    //     0x5d1ba8: ldur            w1, [x0, #0x27]
    // 0x5d1bac: DecompressPointer r1
    //     0x5d1bac: add             x1, x1, HEAP, lsl #32
    // 0x5d1bb0: stp             x1, x2, [SP]
    // 0x5d1bb4: r0 = update()
    //     0x5d1bb4: bl              #0x5d2c78  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x5d1bb8: ldr             x0, [fp, #0x20]
    // 0x5d1bbc: LoadField: r1 = r0->field_3f
    //     0x5d1bbc: ldur            w1, [x0, #0x3f]
    // 0x5d1bc0: DecompressPointer r1
    //     0x5d1bc0: add             x1, x1, HEAP, lsl #32
    // 0x5d1bc4: cmp             w1, NULL
    // 0x5d1bc8: b.eq            #0x5d1d84
    // 0x5d1bcc: LoadField: r2 = r0->field_b
    //     0x5d1bcc: ldur            w2, [x0, #0xb]
    // 0x5d1bd0: DecompressPointer r2
    //     0x5d1bd0: add             x2, x2, HEAP, lsl #32
    // 0x5d1bd4: cmp             w2, NULL
    // 0x5d1bd8: b.eq            #0x5d1d88
    // 0x5d1bdc: LoadField: r3 = r2->field_2f
    //     0x5d1bdc: ldur            w3, [x2, #0x2f]
    // 0x5d1be0: DecompressPointer r3
    //     0x5d1be0: add             x3, x3, HEAP, lsl #32
    // 0x5d1be4: stp             x3, x1, [SP]
    // 0x5d1be8: r0 = handlesVisible=()
    //     0x5d1be8: bl              #0x5d2ad0  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::handlesVisible=
    // 0x5d1bec: ldr             x0, [fp, #0x20]
    // 0x5d1bf0: LoadField: r1 = r0->field_3f
    //     0x5d1bf0: ldur            w1, [x0, #0x3f]
    // 0x5d1bf4: DecompressPointer r1
    //     0x5d1bf4: add             x1, x1, HEAP, lsl #32
    // 0x5d1bf8: cmp             w1, NULL
    // 0x5d1bfc: b.eq            #0x5d1d8c
    // 0x5d1c00: str             x1, [SP]
    // 0x5d1c04: r0 = showHandles()
    //     0x5d1c04: bl              #0x5d1e4c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showHandles
    // 0x5d1c08: ldr             x1, [fp, #0x20]
    // 0x5d1c0c: LoadField: r0 = r1->field_b
    //     0x5d1c0c: ldur            w0, [x1, #0xb]
    // 0x5d1c10: DecompressPointer r0
    //     0x5d1c10: add             x0, x0, HEAP, lsl #32
    // 0x5d1c14: cmp             w0, NULL
    // 0x5d1c18: b.eq            #0x5d1d90
    // 0x5d1c1c: LoadField: r2 = r0->field_a7
    //     0x5d1c1c: ldur            w2, [x0, #0xa7]
    // 0x5d1c20: DecompressPointer r2
    //     0x5d1c20: add             x2, x2, HEAP, lsl #32
    // 0x5d1c24: stur            x2, [fp, #-0x58]
    // 0x5d1c28: cmp             w2, NULL
    // 0x5d1c2c: b.eq            #0x5d1c50
    // 0x5d1c30: ldr             x16, [fp, #0x18]
    // 0x5d1c34: stp             x16, x2, [SP, #8]
    // 0x5d1c38: ldr             x16, [fp, #0x10]
    // 0x5d1c3c: str             x16, [SP]
    // 0x5d1c40: mov             x0, x2
    // 0x5d1c44: ClosureCall
    //     0x5d1c44: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x5d1c48: ldur            x2, [x0, #0x1f]
    //     0x5d1c4c: blr             x2
    // 0x5d1c50: ldr             x0, [fp, #0x20]
    // 0x5d1c54: b               #0x5d1d20
    // 0x5d1c58: sub             SP, fp, #0x88
    // 0x5d1c5c: mov             x3, x0
    // 0x5d1c60: stur            x0, [fp, #-0x58]
    // 0x5d1c64: mov             x0, x1
    // 0x5d1c68: stur            x1, [fp, #-0x60]
    // 0x5d1c6c: r1 = Null
    //     0x5d1c6c: mov             x1, NULL
    // 0x5d1c70: r2 = 4
    //     0x5d1c70: movz            x2, #0x4
    // 0x5d1c74: r0 = AllocateArray()
    //     0x5d1c74: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5d1c78: r17 = "while calling onSelectionChanged for "
    //     0x5d1c78: ldr             x17, [PP, #0x61d0]  ; [pp+0x61d0] "while calling onSelectionChanged for "
    // 0x5d1c7c: StoreField: r0->field_f = r17
    //     0x5d1c7c: stur            w17, [x0, #0xf]
    // 0x5d1c80: ldr             x1, [fp, #0x10]
    // 0x5d1c84: StoreField: r0->field_13 = r1
    //     0x5d1c84: stur            w1, [x0, #0x13]
    // 0x5d1c88: str             x0, [SP]
    // 0x5d1c8c: r0 = _interpolate()
    //     0x5d1c8c: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x5d1c90: r1 = Null
    //     0x5d1c90: mov             x1, NULL
    // 0x5d1c94: r2 = 2
    //     0x5d1c94: movz            x2, #0x2
    // 0x5d1c98: stur            x0, [fp, #-0x68]
    // 0x5d1c9c: r0 = AllocateArray()
    //     0x5d1c9c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5d1ca0: mov             x2, x0
    // 0x5d1ca4: ldur            x0, [fp, #-0x68]
    // 0x5d1ca8: stur            x2, [fp, #-0x70]
    // 0x5d1cac: StoreField: r2->field_f = r0
    //     0x5d1cac: stur            w0, [x2, #0xf]
    // 0x5d1cb0: r1 = <Object>
    //     0x5d1cb0: ldr             x1, [PP, #0x150]  ; [pp+0x150] TypeArguments: <Object>
    // 0x5d1cb4: r0 = AllocateGrowableArray()
    //     0x5d1cb4: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x5d1cb8: mov             x2, x0
    // 0x5d1cbc: ldur            x0, [fp, #-0x70]
    // 0x5d1cc0: stur            x2, [fp, #-0x68]
    // 0x5d1cc4: StoreField: r2->field_f = r0
    //     0x5d1cc4: stur            w0, [x2, #0xf]
    // 0x5d1cc8: r0 = 2
    //     0x5d1cc8: movz            x0, #0x2
    // 0x5d1ccc: StoreField: r2->field_b = r0
    //     0x5d1ccc: stur            w0, [x2, #0xb]
    // 0x5d1cd0: r1 = <List<Object>>
    //     0x5d1cd0: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] TypeArguments: <List<Object>>
    // 0x5d1cd4: r0 = ErrorDescription()
    //     0x5d1cd4: bl              #0x5151c0  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x5d1cd8: mov             x1, x0
    // 0x5d1cdc: r0 = true
    //     0x5d1cdc: add             x0, NULL, #0x20  ; true
    // 0x5d1ce0: StoreField: r1->field_f = r0
    //     0x5d1ce0: stur            w0, [x1, #0xf]
    // 0x5d1ce4: ldur            x0, [fp, #-0x68]
    // 0x5d1ce8: StoreField: r1->field_b = r0
    //     0x5d1ce8: stur            w0, [x1, #0xb]
    // 0x5d1cec: r0 = FlutterErrorDetails()
    //     0x5d1cec: bl              #0x5151b4  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x5d1cf0: mov             x1, x0
    // 0x5d1cf4: ldur            x0, [fp, #-0x58]
    // 0x5d1cf8: StoreField: r1->field_7 = r0
    //     0x5d1cf8: stur            w0, [x1, #7]
    // 0x5d1cfc: ldur            x0, [fp, #-0x60]
    // 0x5d1d00: StoreField: r1->field_b = r0
    //     0x5d1d00: stur            w0, [x1, #0xb]
    // 0x5d1d04: r0 = "widgets"
    //     0x5d1d04: ldr             x0, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5d1d08: StoreField: r1->field_f = r0
    //     0x5d1d08: stur            w0, [x1, #0xf]
    // 0x5d1d0c: r0 = false
    //     0x5d1d0c: add             x0, NULL, #0x30  ; false
    // 0x5d1d10: StoreField: r1->field_13 = r0
    //     0x5d1d10: stur            w0, [x1, #0x13]
    // 0x5d1d14: str             x1, [SP]
    // 0x5d1d18: r0 = reportError()
    //     0x5d1d18: bl              #0x510a8c  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x5d1d1c: ldr             x0, [fp, #0x20]
    // 0x5d1d20: stur            x0, [fp, #-0x58]
    // 0x5d1d24: str             x0, [SP]
    // 0x5d1d28: r0 = _showBlinkingCursor()
    //     0x5d1d28: bl              #0x5d1d94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x5d1d2c: tbnz            w0, #4, #0x5d1d60
    // 0x5d1d30: ldur            x0, [fp, #-0x58]
    // 0x5d1d34: LoadField: r1 = r0->field_1f
    //     0x5d1d34: ldur            w1, [x0, #0x1f]
    // 0x5d1d38: DecompressPointer r1
    //     0x5d1d38: add             x1, x1, HEAP, lsl #32
    // 0x5d1d3c: cmp             w1, NULL
    // 0x5d1d40: b.eq            #0x5d1d60
    // 0x5d1d44: r16 = false
    //     0x5d1d44: add             x16, NULL, #0x30  ; false
    // 0x5d1d48: stp             x16, x0, [SP]
    // 0x5d1d4c: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x5d1d4c: ldr             x4, [PP, #0x5fb0]  ; [pp+0x5fb0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x5d1d50: r0 = _stopCursorBlink()
    //     0x5d1d50: bl              #0x5d1584  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x5d1d54: ldur            x16, [fp, #-0x58]
    // 0x5d1d58: str             x16, [SP]
    // 0x5d1d5c: r0 = _startCursorBlink()
    //     0x5d1d5c: bl              #0x5cee38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x5d1d60: r0 = Null
    //     0x5d1d60: mov             x0, NULL
    // 0x5d1d64: LeaveFrame
    //     0x5d1d64: mov             SP, fp
    //     0x5d1d68: ldp             fp, lr, [SP], #0x10
    // 0x5d1d6c: ret
    //     0x5d1d6c: ret             
    // 0x5d1d70: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d1d70: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d1d74: b               #0x5d1a48
    // 0x5d1d78: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d78: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d7c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d80: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d84: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d88: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d8c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1d90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1d90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _showBlinkingCursor(/* No info */) {
    // ** addr: 0x5d1d94, size: 0xb8
    // 0x5d1d94: EnterFrame
    //     0x5d1d94: stp             fp, lr, [SP, #-0x10]!
    //     0x5d1d98: mov             fp, SP
    // 0x5d1d9c: AllocStack(0x8)
    //     0x5d1d9c: sub             SP, SP, #8
    // 0x5d1da0: CheckStackOverflow
    //     0x5d1da0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d1da4: cmp             SP, x16
    //     0x5d1da8: b.ls            #0x5d1e3c
    // 0x5d1dac: ldr             x0, [fp, #0x10]
    // 0x5d1db0: LoadField: r1 = r0->field_b
    //     0x5d1db0: ldur            w1, [x0, #0xb]
    // 0x5d1db4: DecompressPointer r1
    //     0x5d1db4: add             x1, x1, HEAP, lsl #32
    // 0x5d1db8: cmp             w1, NULL
    // 0x5d1dbc: b.eq            #0x5d1e44
    // 0x5d1dc0: LoadField: r2 = r1->field_f
    //     0x5d1dc0: ldur            w2, [x1, #0xf]
    // 0x5d1dc4: DecompressPointer r2
    //     0x5d1dc4: add             x2, x2, HEAP, lsl #32
    // 0x5d1dc8: str             x2, [SP]
    // 0x5d1dcc: r0 = hasFocus()
    //     0x5d1dcc: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x5d1dd0: tbnz            w0, #4, #0x5d1e2c
    // 0x5d1dd4: ldr             x1, [fp, #0x10]
    // 0x5d1dd8: LoadField: r2 = r1->field_b
    //     0x5d1dd8: ldur            w2, [x1, #0xb]
    // 0x5d1ddc: DecompressPointer r2
    //     0x5d1ddc: add             x2, x2, HEAP, lsl #32
    // 0x5d1de0: cmp             w2, NULL
    // 0x5d1de4: b.eq            #0x5d1e48
    // 0x5d1de8: LoadField: r3 = r2->field_b
    //     0x5d1de8: ldur            w3, [x2, #0xb]
    // 0x5d1dec: DecompressPointer r3
    //     0x5d1dec: add             x3, x3, HEAP, lsl #32
    // 0x5d1df0: LoadField: r4 = r3->field_27
    //     0x5d1df0: ldur            w4, [x3, #0x27]
    // 0x5d1df4: DecompressPointer r4
    //     0x5d1df4: add             x4, x4, HEAP, lsl #32
    // 0x5d1df8: LoadField: r3 = r4->field_b
    //     0x5d1df8: ldur            w3, [x4, #0xb]
    // 0x5d1dfc: DecompressPointer r3
    //     0x5d1dfc: add             x3, x3, HEAP, lsl #32
    // 0x5d1e00: LoadField: r4 = r3->field_7
    //     0x5d1e00: ldur            x4, [x3, #7]
    // 0x5d1e04: LoadField: r5 = r3->field_f
    //     0x5d1e04: ldur            x5, [x3, #0xf]
    // 0x5d1e08: cmp             x4, x5
    // 0x5d1e0c: b.ne            #0x5d1e2c
    // 0x5d1e10: LoadField: r3 = r2->field_33
    //     0x5d1e10: ldur            w3, [x2, #0x33]
    // 0x5d1e14: DecompressPointer r3
    //     0x5d1e14: add             x3, x3, HEAP, lsl #32
    // 0x5d1e18: tbnz            w3, #4, #0x5d1e2c
    // 0x5d1e1c: LoadField: r2 = r1->field_6f
    //     0x5d1e1c: ldur            w2, [x1, #0x6f]
    // 0x5d1e20: DecompressPointer r2
    //     0x5d1e20: add             x2, x2, HEAP, lsl #32
    // 0x5d1e24: mov             x0, x2
    // 0x5d1e28: b               #0x5d1e30
    // 0x5d1e2c: r0 = false
    //     0x5d1e2c: add             x0, NULL, #0x30  ; false
    // 0x5d1e30: LeaveFrame
    //     0x5d1e30: mov             SP, fp
    //     0x5d1e34: ldp             fp, lr, [SP], #0x10
    // 0x5d1e38: ret
    //     0x5d1e38: ret             
    // 0x5d1e3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d1e3c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d1e40: b               #0x5d1dac
    // 0x5d1e44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1e44: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d1e48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d1e48: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _createSelectionOverlay(/* No info */) {
    // ** addr: 0x5d2d28, size: 0x1a0
    // 0x5d2d28: EnterFrame
    //     0x5d2d28: stp             fp, lr, [SP, #-0x10]!
    //     0x5d2d2c: mov             fp, SP
    // 0x5d2d30: AllocStack(0xd8)
    //     0x5d2d30: sub             SP, SP, #0xd8
    // 0x5d2d34: CheckStackOverflow
    //     0x5d2d34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d2d38: cmp             SP, x16
    //     0x5d2d3c: b.ls            #0x5d2eb4
    // 0x5d2d40: r1 = 2
    //     0x5d2d40: movz            x1, #0x2
    // 0x5d2d44: r0 = AllocateContext()
    //     0x5d2d44: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d2d48: mov             x2, x0
    // 0x5d2d4c: ldr             x0, [fp, #0x10]
    // 0x5d2d50: stur            x2, [fp, #-0x40]
    // 0x5d2d54: StoreField: r2->field_f = r0
    //     0x5d2d54: stur            w0, [x2, #0xf]
    // 0x5d2d58: LoadField: r3 = r0->field_b
    //     0x5d2d58: ldur            w3, [x0, #0xb]
    // 0x5d2d5c: DecompressPointer r3
    //     0x5d2d5c: add             x3, x3, HEAP, lsl #32
    // 0x5d2d60: stur            x3, [fp, #-0x38]
    // 0x5d2d64: cmp             w3, NULL
    // 0x5d2d68: b.eq            #0x5d2ebc
    // 0x5d2d6c: r17 = 283
    //     0x5d2d6c: movz            x17, #0x11b
    // 0x5d2d70: ldr             w1, [x3, x17]
    // 0x5d2d74: DecompressPointer r1
    //     0x5d2d74: add             x1, x1, HEAP, lsl #32
    // 0x5d2d78: StoreField: r2->field_13 = r1
    //     0x5d2d78: stur            w1, [x2, #0x13]
    // 0x5d2d7c: LoadField: r4 = r0->field_33
    //     0x5d2d7c: ldur            w4, [x0, #0x33]
    // 0x5d2d80: DecompressPointer r4
    //     0x5d2d80: add             x4, x4, HEAP, lsl #32
    // 0x5d2d84: stur            x4, [fp, #-0x30]
    // 0x5d2d88: LoadField: r5 = r0->field_f
    //     0x5d2d88: ldur            w5, [x0, #0xf]
    // 0x5d2d8c: DecompressPointer r5
    //     0x5d2d8c: add             x5, x5, HEAP, lsl #32
    // 0x5d2d90: stur            x5, [fp, #-0x28]
    // 0x5d2d94: cmp             w5, NULL
    // 0x5d2d98: b.eq            #0x5d2ec0
    // 0x5d2d9c: LoadField: r1 = r3->field_b
    //     0x5d2d9c: ldur            w1, [x3, #0xb]
    // 0x5d2da0: DecompressPointer r1
    //     0x5d2da0: add             x1, x1, HEAP, lsl #32
    // 0x5d2da4: LoadField: r6 = r1->field_27
    //     0x5d2da4: ldur            w6, [x1, #0x27]
    // 0x5d2da8: DecompressPointer r6
    //     0x5d2da8: add             x6, x6, HEAP, lsl #32
    // 0x5d2dac: stur            x6, [fp, #-0x20]
    // 0x5d2db0: LoadField: r7 = r0->field_4b
    //     0x5d2db0: ldur            w7, [x0, #0x4b]
    // 0x5d2db4: DecompressPointer r7
    //     0x5d2db4: add             x7, x7, HEAP, lsl #32
    // 0x5d2db8: stur            x7, [fp, #-0x18]
    // 0x5d2dbc: LoadField: r8 = r0->field_4f
    //     0x5d2dbc: ldur            w8, [x0, #0x4f]
    // 0x5d2dc0: DecompressPointer r8
    //     0x5d2dc0: add             x8, x8, HEAP, lsl #32
    // 0x5d2dc4: stur            x8, [fp, #-0x10]
    // 0x5d2dc8: LoadField: r9 = r0->field_53
    //     0x5d2dc8: ldur            w9, [x0, #0x53]
    // 0x5d2dcc: DecompressPointer r9
    //     0x5d2dcc: add             x9, x9, HEAP, lsl #32
    // 0x5d2dd0: mov             x1, x0
    // 0x5d2dd4: stur            x9, [fp, #-8]
    // 0x5d2dd8: LoadField: r0 = r1->field_a7
    //     0x5d2dd8: ldur            w0, [x1, #0xa7]
    // 0x5d2ddc: DecompressPointer r0
    //     0x5d2ddc: add             x0, x0, HEAP, lsl #32
    // 0x5d2de0: r16 = Sentinel
    //     0x5d2de0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d2de4: cmp             w0, w16
    // 0x5d2de8: b.ne            #0x5d2df4
    // 0x5d2dec: r2 = renderEditable
    //     0x5d2dec: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d2df0: r0 = InitLateFinalInstanceField()
    //     0x5d2df0: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d2df4: mov             x3, x0
    // 0x5d2df8: ldr             x0, [fp, #0x10]
    // 0x5d2dfc: stur            x3, [fp, #-0x60]
    // 0x5d2e00: LoadField: r1 = r0->field_b
    //     0x5d2e00: ldur            w1, [x0, #0xb]
    // 0x5d2e04: DecompressPointer r1
    //     0x5d2e04: add             x1, x1, HEAP, lsl #32
    // 0x5d2e08: cmp             w1, NULL
    // 0x5d2e0c: b.eq            #0x5d2ec4
    // 0x5d2e10: LoadField: r4 = r1->field_8b
    //     0x5d2e10: ldur            w4, [x1, #0x8b]
    // 0x5d2e14: DecompressPointer r4
    //     0x5d2e14: add             x4, x4, HEAP, lsl #32
    // 0x5d2e18: stur            x4, [fp, #-0x58]
    // 0x5d2e1c: LoadField: r5 = r1->field_ab
    //     0x5d2e1c: ldur            w5, [x1, #0xab]
    // 0x5d2e20: DecompressPointer r5
    //     0x5d2e20: add             x5, x5, HEAP, lsl #32
    // 0x5d2e24: stur            x5, [fp, #-0x50]
    // 0x5d2e28: r17 = 291
    //     0x5d2e28: movz            x17, #0x123
    // 0x5d2e2c: ldr             w6, [x1, x17]
    // 0x5d2e30: DecompressPointer r6
    //     0x5d2e30: add             x6, x6, HEAP, lsl #32
    // 0x5d2e34: ldur            x2, [fp, #-0x40]
    // 0x5d2e38: stur            x6, [fp, #-0x48]
    // 0x5d2e3c: r1 = Function '<anonymous closure>':.
    //     0x5d2e3c: ldr             x1, [PP, #0x62e0]  ; [pp+0x62e0] AnonymousClosure: (0x5d9404), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay (0x5d2d28)
    // 0x5d2e40: r0 = AllocateClosure()
    //     0x5d2e40: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d2e44: stur            x0, [fp, #-0x40]
    // 0x5d2e48: r0 = TextSelectionOverlay()
    //     0x5d2e48: bl              #0x5d93f8  ; AllocateTextSelectionOverlayStub -> TextSelectionOverlay (size=0x44)
    // 0x5d2e4c: stur            x0, [fp, #-0x68]
    // 0x5d2e50: ldur            x16, [fp, #-0x30]
    // 0x5d2e54: stp             x16, x0, [SP, #0x60]
    // 0x5d2e58: ldur            x16, [fp, #-0x28]
    // 0x5d2e5c: ldur            lr, [fp, #-0x40]
    // 0x5d2e60: stp             lr, x16, [SP, #0x50]
    // 0x5d2e64: ldur            x16, [fp, #-0x38]
    // 0x5d2e68: ldur            lr, [fp, #-8]
    // 0x5d2e6c: stp             lr, x16, [SP, #0x40]
    // 0x5d2e70: ldur            x16, [fp, #-0x48]
    // 0x5d2e74: ldur            lr, [fp, #-0x50]
    // 0x5d2e78: stp             lr, x16, [SP, #0x30]
    // 0x5d2e7c: ldur            x16, [fp, #-0x60]
    // 0x5d2e80: ldur            lr, [fp, #-0x58]
    // 0x5d2e84: stp             lr, x16, [SP, #0x20]
    // 0x5d2e88: ldr             x16, [fp, #0x10]
    // 0x5d2e8c: ldur            lr, [fp, #-0x10]
    // 0x5d2e90: stp             lr, x16, [SP, #0x10]
    // 0x5d2e94: ldur            x16, [fp, #-0x18]
    // 0x5d2e98: ldur            lr, [fp, #-0x20]
    // 0x5d2e9c: stp             lr, x16, [SP]
    // 0x5d2ea0: r0 = TextSelectionOverlay()
    //     0x5d2ea0: bl              #0x5d2ec8  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::TextSelectionOverlay
    // 0x5d2ea4: ldur            x0, [fp, #-0x68]
    // 0x5d2ea8: LeaveFrame
    //     0x5d2ea8: mov             SP, fp
    //     0x5d2eac: ldp             fp, lr, [SP], #0x10
    // 0x5d2eb0: ret
    //     0x5d2eb0: ret             
    // 0x5d2eb4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d2eb4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d2eb8: b               #0x5d2d40
    // 0x5d2ebc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d2ebc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d2ec0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d2ec0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d2ec4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d2ec4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ userUpdateTextEditingValue(/* No info */) {
    // ** addr: 0x5d3b20, size: 0x1b8
    // 0x5d3b20: EnterFrame
    //     0x5d3b20: stp             fp, lr, [SP, #-0x10]!
    //     0x5d3b24: mov             fp, SP
    // 0x5d3b28: AllocStack(0x20)
    //     0x5d3b28: sub             SP, SP, #0x20
    // 0x5d3b2c: CheckStackOverflow
    //     0x5d3b2c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d3b30: cmp             SP, x16
    //     0x5d3b34: b.ls            #0x5d3cc0
    // 0x5d3b38: ldr             x0, [fp, #0x20]
    // 0x5d3b3c: LoadField: r1 = r0->field_b
    //     0x5d3b3c: ldur            w1, [x0, #0xb]
    // 0x5d3b40: DecompressPointer r1
    //     0x5d3b40: add             x1, x1, HEAP, lsl #32
    // 0x5d3b44: cmp             w1, NULL
    // 0x5d3b48: b.eq            #0x5d3cc8
    // 0x5d3b4c: LoadField: r2 = r1->field_23
    //     0x5d3b4c: ldur            w2, [x1, #0x23]
    // 0x5d3b50: DecompressPointer r2
    //     0x5d3b50: add             x2, x2, HEAP, lsl #32
    // 0x5d3b54: tbnz            w2, #4, #0x5d3b90
    // 0x5d3b58: ldr             x2, [fp, #0x18]
    // 0x5d3b5c: LoadField: r3 = r1->field_b
    //     0x5d3b5c: ldur            w3, [x1, #0xb]
    // 0x5d3b60: DecompressPointer r3
    //     0x5d3b60: add             x3, x3, HEAP, lsl #32
    // 0x5d3b64: LoadField: r1 = r3->field_27
    //     0x5d3b64: ldur            w1, [x3, #0x27]
    // 0x5d3b68: DecompressPointer r1
    //     0x5d3b68: add             x1, x1, HEAP, lsl #32
    // 0x5d3b6c: LoadField: r3 = r1->field_b
    //     0x5d3b6c: ldur            w3, [x1, #0xb]
    // 0x5d3b70: DecompressPointer r3
    //     0x5d3b70: add             x3, x3, HEAP, lsl #32
    // 0x5d3b74: LoadField: r1 = r2->field_b
    //     0x5d3b74: ldur            w1, [x2, #0xb]
    // 0x5d3b78: DecompressPointer r1
    //     0x5d3b78: add             x1, x1, HEAP, lsl #32
    // 0x5d3b7c: stp             x1, x3, [SP]
    // 0x5d3b80: r0 = ==()
    //     0x5d3b80: bl              #0xbb3e28  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x5d3b84: eor             x1, x0, #0x10
    // 0x5d3b88: tbnz            w1, #4, #0x5d3bc4
    // 0x5d3b8c: b               #0x5d3bb4
    // 0x5d3b90: LoadField: r0 = r1->field_b
    //     0x5d3b90: ldur            w0, [x1, #0xb]
    // 0x5d3b94: DecompressPointer r0
    //     0x5d3b94: add             x0, x0, HEAP, lsl #32
    // 0x5d3b98: LoadField: r1 = r0->field_27
    //     0x5d3b98: ldur            w1, [x0, #0x27]
    // 0x5d3b9c: DecompressPointer r1
    //     0x5d3b9c: add             x1, x1, HEAP, lsl #32
    // 0x5d3ba0: ldr             x16, [fp, #0x18]
    // 0x5d3ba4: stp             x16, x1, [SP]
    // 0x5d3ba8: r0 = ==()
    //     0x5d3ba8: bl              #0xbe23ec  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x5d3bac: eor             x1, x0, #0x10
    // 0x5d3bb0: tbnz            w1, #4, #0x5d3bc4
    // 0x5d3bb4: ldr             x16, [fp, #0x20]
    // 0x5d3bb8: r30 = true
    //     0x5d3bb8: add             lr, NULL, #0x20  ; true
    // 0x5d3bbc: stp             lr, x16, [SP]
    // 0x5d3bc0: r0 = _scheduleShowCaretOnScreen()
    //     0x5d3bc0: bl              #0x5d660c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x5d3bc4: ldr             x0, [fp, #0x20]
    // 0x5d3bc8: LoadField: r1 = r0->field_b
    //     0x5d3bc8: ldur            w1, [x0, #0xb]
    // 0x5d3bcc: DecompressPointer r1
    //     0x5d3bcc: add             x1, x1, HEAP, lsl #32
    // 0x5d3bd0: cmp             w1, NULL
    // 0x5d3bd4: b.eq            #0x5d3ccc
    // 0x5d3bd8: LoadField: r2 = r1->field_b
    //     0x5d3bd8: ldur            w2, [x1, #0xb]
    // 0x5d3bdc: DecompressPointer r2
    //     0x5d3bdc: add             x2, x2, HEAP, lsl #32
    // 0x5d3be0: LoadField: r1 = r2->field_27
    //     0x5d3be0: ldur            w1, [x2, #0x27]
    // 0x5d3be4: DecompressPointer r1
    //     0x5d3be4: add             x1, x1, HEAP, lsl #32
    // 0x5d3be8: ldr             x16, [fp, #0x18]
    // 0x5d3bec: stp             x1, x16, [SP]
    // 0x5d3bf0: r0 = ==()
    //     0x5d3bf0: bl              #0xbe23ec  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x5d3bf4: tbnz            w0, #4, #0x5d3c90
    // 0x5d3bf8: ldr             x0, [fp, #0x20]
    // 0x5d3bfc: LoadField: r1 = r0->field_b
    //     0x5d3bfc: ldur            w1, [x0, #0xb]
    // 0x5d3c00: DecompressPointer r1
    //     0x5d3c00: add             x1, x1, HEAP, lsl #32
    // 0x5d3c04: cmp             w1, NULL
    // 0x5d3c08: b.eq            #0x5d3cd0
    // 0x5d3c0c: LoadField: r2 = r1->field_f
    //     0x5d3c0c: ldur            w2, [x1, #0xf]
    // 0x5d3c10: DecompressPointer r2
    //     0x5d3c10: add             x2, x2, HEAP, lsl #32
    // 0x5d3c14: str             x2, [SP]
    // 0x5d3c18: r0 = hasFocus()
    //     0x5d3c18: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x5d3c1c: tbz             w0, #4, #0x5d3c80
    // 0x5d3c20: ldr             x0, [fp, #0x20]
    // 0x5d3c24: str             x0, [SP]
    // 0x5d3c28: r0 = _flagInternalFocus()
    //     0x5d3c28: bl              #0x5d64a4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_flagInternalFocus
    // 0x5d3c2c: ldr             x0, [fp, #0x20]
    // 0x5d3c30: LoadField: r1 = r0->field_b
    //     0x5d3c30: ldur            w1, [x0, #0xb]
    // 0x5d3c34: DecompressPointer r1
    //     0x5d3c34: add             x1, x1, HEAP, lsl #32
    // 0x5d3c38: cmp             w1, NULL
    // 0x5d3c3c: b.eq            #0x5d3cd4
    // 0x5d3c40: LoadField: r2 = r1->field_f
    //     0x5d3c40: ldur            w2, [x1, #0xf]
    // 0x5d3c44: DecompressPointer r2
    //     0x5d3c44: add             x2, x2, HEAP, lsl #32
    // 0x5d3c48: str             x2, [SP]
    // 0x5d3c4c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5d3c4c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5d3c50: r0 = requestFocus()
    //     0x5d3c50: bl              #0x5d4f00  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x5d3c54: ldr             x16, [fp, #0x20]
    // 0x5d3c58: str             x16, [SP]
    // 0x5d3c5c: r0 = _createSelectionOverlay()
    //     0x5d3c5c: bl              #0x5d2d28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x5d3c60: ldr             x1, [fp, #0x20]
    // 0x5d3c64: StoreField: r1->field_3f = r0
    //     0x5d3c64: stur            w0, [x1, #0x3f]
    //     0x5d3c68: ldurb           w16, [x1, #-1]
    //     0x5d3c6c: ldurb           w17, [x0, #-1]
    //     0x5d3c70: and             x16, x17, x16, lsr #2
    //     0x5d3c74: tst             x16, HEAP, lsr #32
    //     0x5d3c78: b.eq            #0x5d3c80
    //     0x5d3c7c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5d3c80: r0 = Null
    //     0x5d3c80: mov             x0, NULL
    // 0x5d3c84: LeaveFrame
    //     0x5d3c84: mov             SP, fp
    //     0x5d3c88: ldp             fp, lr, [SP], #0x10
    // 0x5d3c8c: ret
    //     0x5d3c8c: ret             
    // 0x5d3c90: ldr             x1, [fp, #0x20]
    // 0x5d3c94: ldr             x16, [fp, #0x18]
    // 0x5d3c98: stp             x16, x1, [SP, #0x10]
    // 0x5d3c9c: ldr             x16, [fp, #0x10]
    // 0x5d3ca0: r30 = true
    //     0x5d3ca0: add             lr, NULL, #0x20  ; true
    // 0x5d3ca4: stp             lr, x16, [SP]
    // 0x5d3ca8: r4 = const [0, 0x4, 0x4, 0x3, userInteraction, 0x3, null]
    //     0x5d3ca8: ldr             x4, [PP, #0x6338]  ; [pp+0x6338] List(7) [0, 0x4, 0x4, 0x3, "userInteraction", 0x3, Null]
    // 0x5d3cac: r0 = _formatAndSetValue()
    //     0x5d3cac: bl              #0x5d3cd8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue
    // 0x5d3cb0: r0 = Null
    //     0x5d3cb0: mov             x0, NULL
    // 0x5d3cb4: LeaveFrame
    //     0x5d3cb4: mov             SP, fp
    //     0x5d3cb8: ldp             fp, lr, [SP], #0x10
    // 0x5d3cbc: ret
    //     0x5d3cbc: ret             
    // 0x5d3cc0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d3cc0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d3cc4: b               #0x5d3b38
    // 0x5d3cc8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d3cc8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d3ccc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d3ccc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d3cd0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d3cd0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d3cd4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d3cd4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _formatAndSetValue(/* No info */) {
    // ** addr: 0x5d3cd8, size: 0x588
    // 0x5d3cd8: EnterFrame
    //     0x5d3cd8: stp             fp, lr, [SP, #-0x10]!
    //     0x5d3cdc: mov             fp, SP
    // 0x5d3ce0: AllocStack(0x110)
    //     0x5d3ce0: sub             SP, SP, #0x110
    // 0x5d3ce4: SetupParameters(EditableTextState this /* r3, fp-0xc8 */, dynamic _ /* r4, fp-0xc0 */, dynamic _ /* r5, fp-0xb8 */, {dynamic userInteraction = false /* r0, fp-0xb0 */})
    //     0x5d3ce4: mov             x0, x4
    //     0x5d3ce8: ldur            w1, [x0, #0x13]
    //     0x5d3cec: add             x1, x1, HEAP, lsl #32
    //     0x5d3cf0: sub             x2, x1, #6
    //     0x5d3cf4: add             x3, fp, w2, sxtw #2
    //     0x5d3cf8: ldr             x3, [x3, #0x20]
    //     0x5d3cfc: stur            x3, [fp, #-0xc8]
    //     0x5d3d00: add             x4, fp, w2, sxtw #2
    //     0x5d3d04: ldr             x4, [x4, #0x18]
    //     0x5d3d08: stur            x4, [fp, #-0xc0]
    //     0x5d3d0c: add             x5, fp, w2, sxtw #2
    //     0x5d3d10: ldr             x5, [x5, #0x10]
    //     0x5d3d14: stur            x5, [fp, #-0xb8]
    //     0x5d3d18: ldur            w2, [x0, #0x1f]
    //     0x5d3d1c: add             x2, x2, HEAP, lsl #32
    //     0x5d3d20: ldr             x16, [PP, #0x6340]  ; [pp+0x6340] "userInteraction"
    //     0x5d3d24: cmp             w2, w16
    //     0x5d3d28: b.ne            #0x5d3d48
    //     0x5d3d2c: ldur            w2, [x0, #0x23]
    //     0x5d3d30: add             x2, x2, HEAP, lsl #32
    //     0x5d3d34: sub             w0, w1, w2
    //     0x5d3d38: add             x1, fp, w0, sxtw #2
    //     0x5d3d3c: ldr             x1, [x1, #8]
    //     0x5d3d40: mov             x0, x1
    //     0x5d3d44: b               #0x5d3d4c
    //     0x5d3d48: add             x0, NULL, #0x30  ; false
    //     0x5d3d4c: stur            x0, [fp, #-0xb0]
    // 0x5d3d50: CheckStackOverflow
    //     0x5d3d50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d3d54: cmp             SP, x16
    //     0x5d3d58: b.ls            #0x5d4240
    // 0x5d3d5c: r1 = 1
    //     0x5d3d5c: movz            x1, #0x1
    // 0x5d3d60: r0 = AllocateContext()
    //     0x5d3d60: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d3d64: mov             x2, x0
    // 0x5d3d68: ldur            x1, [fp, #-0xc8]
    // 0x5d3d6c: stur            x2, [fp, #-0xd8]
    // 0x5d3d70: StoreField: r2->field_f = r1
    //     0x5d3d70: stur            w1, [x2, #0xf]
    // 0x5d3d74: LoadField: r0 = r1->field_b
    //     0x5d3d74: ldur            w0, [x1, #0xb]
    // 0x5d3d78: DecompressPointer r0
    //     0x5d3d78: add             x0, x0, HEAP, lsl #32
    // 0x5d3d7c: cmp             w0, NULL
    // 0x5d3d80: b.eq            #0x5d4248
    // 0x5d3d84: LoadField: r3 = r0->field_b
    //     0x5d3d84: ldur            w3, [x0, #0xb]
    // 0x5d3d88: DecompressPointer r3
    //     0x5d3d88: add             x3, x3, HEAP, lsl #32
    // 0x5d3d8c: LoadField: r4 = r3->field_27
    //     0x5d3d8c: ldur            w4, [x3, #0x27]
    // 0x5d3d90: DecompressPointer r4
    //     0x5d3d90: add             x4, x4, HEAP, lsl #32
    // 0x5d3d94: stur            x4, [fp, #-0xd0]
    // 0x5d3d98: LoadField: r0 = r4->field_7
    //     0x5d3d98: ldur            w0, [x4, #7]
    // 0x5d3d9c: DecompressPointer r0
    //     0x5d3d9c: add             x0, x0, HEAP, lsl #32
    // 0x5d3da0: ldur            x3, [fp, #-0xc0]
    // 0x5d3da4: LoadField: r5 = r3->field_7
    //     0x5d3da4: ldur            w5, [x3, #7]
    // 0x5d3da8: DecompressPointer r5
    //     0x5d3da8: add             x5, x5, HEAP, lsl #32
    // 0x5d3dac: r6 = LoadClassIdInstr(r0)
    //     0x5d3dac: ldur            x6, [x0, #-1]
    //     0x5d3db0: ubfx            x6, x6, #0xc, #0x14
    // 0x5d3db4: stp             x5, x0, [SP]
    // 0x5d3db8: mov             x0, x6
    // 0x5d3dbc: mov             lr, x0
    // 0x5d3dc0: ldr             lr, [x21, lr, lsl #3]
    // 0x5d3dc4: blr             lr
    // 0x5d3dc8: eor             x1, x0, #0x10
    // 0x5d3dcc: ldur            x0, [fp, #-0xd0]
    // 0x5d3dd0: stur            x1, [fp, #-0xe8]
    // 0x5d3dd4: LoadField: r2 = r0->field_f
    //     0x5d3dd4: ldur            w2, [x0, #0xf]
    // 0x5d3dd8: DecompressPointer r2
    //     0x5d3dd8: add             x2, x2, HEAP, lsl #32
    // 0x5d3ddc: LoadField: r3 = r2->field_7
    //     0x5d3ddc: ldur            x3, [x2, #7]
    // 0x5d3de0: LoadField: r4 = r2->field_f
    //     0x5d3de0: ldur            x4, [x2, #0xf]
    // 0x5d3de4: cmp             x3, x4
    // 0x5d3de8: b.eq            #0x5d3e14
    // 0x5d3dec: ldur            x2, [fp, #-0xc0]
    // 0x5d3df0: LoadField: r3 = r2->field_f
    //     0x5d3df0: ldur            w3, [x2, #0xf]
    // 0x5d3df4: DecompressPointer r3
    //     0x5d3df4: add             x3, x3, HEAP, lsl #32
    // 0x5d3df8: LoadField: r4 = r3->field_7
    //     0x5d3df8: ldur            x4, [x3, #7]
    // 0x5d3dfc: LoadField: r5 = r3->field_f
    //     0x5d3dfc: ldur            x5, [x3, #0xf]
    // 0x5d3e00: cmp             x4, x5
    // 0x5d3e04: r16 = true
    //     0x5d3e04: add             x16, NULL, #0x20  ; true
    // 0x5d3e08: r17 = false
    //     0x5d3e08: add             x17, NULL, #0x30  ; false
    // 0x5d3e0c: csel            x3, x16, x17, eq
    // 0x5d3e10: b               #0x5d3e1c
    // 0x5d3e14: ldur            x2, [fp, #-0xc0]
    // 0x5d3e18: r3 = false
    //     0x5d3e18: add             x3, NULL, #0x30  ; false
    // 0x5d3e1c: stur            x3, [fp, #-0xe0]
    // 0x5d3e20: LoadField: r4 = r0->field_b
    //     0x5d3e20: ldur            w4, [x0, #0xb]
    // 0x5d3e24: DecompressPointer r4
    //     0x5d3e24: add             x4, x4, HEAP, lsl #32
    // 0x5d3e28: LoadField: r5 = r2->field_b
    //     0x5d3e28: ldur            w5, [x2, #0xb]
    // 0x5d3e2c: DecompressPointer r5
    //     0x5d3e2c: add             x5, x5, HEAP, lsl #32
    // 0x5d3e30: stp             x5, x4, [SP]
    // 0x5d3e34: r0 = ==()
    //     0x5d3e34: bl              #0xbb3e28  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x5d3e38: eor             x3, x0, #0x10
    // 0x5d3e3c: ldur            x0, [fp, #-0xe8]
    // 0x5d3e40: stur            x3, [fp, #-0xf0]
    // 0x5d3e44: tbz             w0, #4, #0x5d3e50
    // 0x5d3e48: ldur            x0, [fp, #-0xe0]
    // 0x5d3e4c: tbnz            w0, #4, #0x5d3ec4
    // 0x5d3e50: ldur            x0, [fp, #-0xc8]
    // 0x5d3e54: LoadField: r1 = r0->field_b
    //     0x5d3e54: ldur            w1, [x0, #0xb]
    // 0x5d3e58: DecompressPointer r1
    //     0x5d3e58: add             x1, x1, HEAP, lsl #32
    // 0x5d3e5c: cmp             w1, NULL
    // 0x5d3e60: b.eq            #0x5d424c
    // 0x5d3e64: LoadField: r4 = r1->field_b3
    //     0x5d3e64: ldur            w4, [x1, #0xb3]
    // 0x5d3e68: DecompressPointer r4
    //     0x5d3e68: add             x4, x4, HEAP, lsl #32
    // 0x5d3e6c: ldur            x2, [fp, #-0xd8]
    // 0x5d3e70: stur            x4, [fp, #-0xe0]
    // 0x5d3e74: r1 = Function '<anonymous closure>':.
    //     0x5d3e74: ldr             x1, [PP, #0x6348]  ; [pp+0x6348] AnonymousClosure: (0x5d4e4c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue (0x5d3cd8)
    // 0x5d3e78: r0 = AllocateClosure()
    //     0x5d3e78: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d3e7c: r16 = <TextEditingValue>
    //     0x5d3e7c: ldr             x16, [PP, #0x6350]  ; [pp+0x6350] TypeArguments: <TextEditingValue>
    // 0x5d3e80: ldur            lr, [fp, #-0xe0]
    // 0x5d3e84: stp             lr, x16, [SP, #0x10]
    // 0x5d3e88: ldur            x16, [fp, #-0xc0]
    // 0x5d3e8c: stp             x0, x16, [SP]
    // 0x5d3e90: r4 = const [0x1, 0x3, 0x3, 0x3, null]
    //     0x5d3e90: ldr             x4, [PP, #0x500]  ; [pp+0x500] List(5) [0x1, 0x3, 0x3, 0x3, Null]
    // 0x5d3e94: r0 = fold()
    //     0x5d3e94: bl              #0x53ff7c  ; [dart:collection] ListBase::fold
    // 0x5d3e98: stur            x0, [fp, #-0xd8]
    // 0x5d3e9c: ldur            x16, [fp, #-0xc8]
    // 0x5d3ea0: str             x16, [SP]
    // 0x5d3ea4: r0 = spellCheckEnabled()
    //     0x5d3ea4: bl              #0x5d4e14  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::spellCheckEnabled
    // 0x5d3ea8: ldur            x5, [fp, #-0xd8]
    // 0x5d3eac: ldur            x4, [fp, #-0xb8]
    // 0x5d3eb0: ldur            x3, [fp, #-0xb0]
    // 0x5d3eb4: ldur            x2, [fp, #-0xc8]
    // 0x5d3eb8: ldur            x1, [fp, #-0xd0]
    // 0x5d3ebc: ldur            x0, [fp, #-0xf0]
    // 0x5d3ec0: b               #0x5d3f90
    // 0x5d3ec4: ldur            x5, [fp, #-0xc0]
    // 0x5d3ec8: ldur            x4, [fp, #-0xb8]
    // 0x5d3ecc: ldur            x3, [fp, #-0xb0]
    // 0x5d3ed0: ldur            x2, [fp, #-0xc8]
    // 0x5d3ed4: ldur            x1, [fp, #-0xd0]
    // 0x5d3ed8: ldur            x0, [fp, #-0xf0]
    // 0x5d3edc: b               #0x5d3f90
    // 0x5d3ee0: r3 = 2
    //     0x5d3ee0: movz            x3, #0x2
    // 0x5d3ee4: sub             SP, fp, #0x110
    // 0x5d3ee8: mov             x2, x3
    // 0x5d3eec: mov             x4, x0
    // 0x5d3ef0: stur            x0, [fp, #-0xb0]
    // 0x5d3ef4: mov             x0, x1
    // 0x5d3ef8: stur            x1, [fp, #-0xb8]
    // 0x5d3efc: r1 = Null
    //     0x5d3efc: mov             x1, NULL
    // 0x5d3f00: r0 = AllocateArray()
    //     0x5d3f00: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5d3f04: stur            x0, [fp, #-0xc0]
    // 0x5d3f08: r17 = "while applying input formatters"
    //     0x5d3f08: ldr             x17, [PP, #0x6358]  ; [pp+0x6358] "while applying input formatters"
    // 0x5d3f0c: StoreField: r0->field_f = r17
    //     0x5d3f0c: stur            w17, [x0, #0xf]
    // 0x5d3f10: r1 = <Object>
    //     0x5d3f10: ldr             x1, [PP, #0x150]  ; [pp+0x150] TypeArguments: <Object>
    // 0x5d3f14: r0 = AllocateGrowableArray()
    //     0x5d3f14: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x5d3f18: mov             x2, x0
    // 0x5d3f1c: ldur            x0, [fp, #-0xc0]
    // 0x5d3f20: stur            x2, [fp, #-0xc8]
    // 0x5d3f24: StoreField: r2->field_f = r0
    //     0x5d3f24: stur            w0, [x2, #0xf]
    // 0x5d3f28: r3 = 2
    //     0x5d3f28: movz            x3, #0x2
    // 0x5d3f2c: StoreField: r2->field_b = r3
    //     0x5d3f2c: stur            w3, [x2, #0xb]
    // 0x5d3f30: r1 = <List<Object>>
    //     0x5d3f30: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] TypeArguments: <List<Object>>
    // 0x5d3f34: r0 = ErrorDescription()
    //     0x5d3f34: bl              #0x5151c0  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x5d3f38: r4 = true
    //     0x5d3f38: add             x4, NULL, #0x20  ; true
    // 0x5d3f3c: StoreField: r0->field_f = r4
    //     0x5d3f3c: stur            w4, [x0, #0xf]
    // 0x5d3f40: ldur            x1, [fp, #-0xc8]
    // 0x5d3f44: StoreField: r0->field_b = r1
    //     0x5d3f44: stur            w1, [x0, #0xb]
    // 0x5d3f48: r0 = FlutterErrorDetails()
    //     0x5d3f48: bl              #0x5151b4  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x5d3f4c: mov             x1, x0
    // 0x5d3f50: ldur            x0, [fp, #-0xb0]
    // 0x5d3f54: StoreField: r1->field_7 = r0
    //     0x5d3f54: stur            w0, [x1, #7]
    // 0x5d3f58: ldur            x0, [fp, #-0xb8]
    // 0x5d3f5c: StoreField: r1->field_b = r0
    //     0x5d3f5c: stur            w0, [x1, #0xb]
    // 0x5d3f60: r5 = "widgets"
    //     0x5d3f60: ldr             x5, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5d3f64: StoreField: r1->field_f = r5
    //     0x5d3f64: stur            w5, [x1, #0xf]
    // 0x5d3f68: r6 = false
    //     0x5d3f68: add             x6, NULL, #0x30  ; false
    // 0x5d3f6c: StoreField: r1->field_13 = r6
    //     0x5d3f6c: stur            w6, [x1, #0x13]
    // 0x5d3f70: str             x1, [SP]
    // 0x5d3f74: r0 = reportError()
    //     0x5d3f74: bl              #0x510a8c  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x5d3f78: ldur            x5, [fp, #-0x10]
    // 0x5d3f7c: ldur            x4, [fp, #-0x18]
    // 0x5d3f80: ldur            x3, [fp, #-0x20]
    // 0x5d3f84: ldur            x2, [fp, #-0x60]
    // 0x5d3f88: ldur            x1, [fp, #-0x68]
    // 0x5d3f8c: ldur            x0, [fp, #-0x80]
    // 0x5d3f90: stur            x5, [fp, #-0xb8]
    // 0x5d3f94: stur            x4, [fp, #-0xc0]
    // 0x5d3f98: stur            x3, [fp, #-0xc8]
    // 0x5d3f9c: stur            x2, [fp, #-0xd0]
    // 0x5d3fa0: stur            x1, [fp, #-0xd8]
    // 0x5d3fa4: stur            x0, [fp, #-0xe0]
    // 0x5d3fa8: LoadField: r6 = r2->field_b
    //     0x5d3fa8: ldur            w6, [x2, #0xb]
    // 0x5d3fac: DecompressPointer r6
    //     0x5d3fac: add             x6, x6, HEAP, lsl #32
    // 0x5d3fb0: cmp             w6, NULL
    // 0x5d3fb4: b.eq            #0x5d4250
    // 0x5d3fb8: LoadField: r7 = r6->field_b
    //     0x5d3fb8: ldur            w7, [x6, #0xb]
    // 0x5d3fbc: DecompressPointer r7
    //     0x5d3fbc: add             x7, x7, HEAP, lsl #32
    // 0x5d3fc0: LoadField: r6 = r7->field_27
    //     0x5d3fc0: ldur            w6, [x7, #0x27]
    // 0x5d3fc4: DecompressPointer r6
    //     0x5d3fc4: add             x6, x6, HEAP, lsl #32
    // 0x5d3fc8: LoadField: r7 = r6->field_b
    //     0x5d3fc8: ldur            w7, [x6, #0xb]
    // 0x5d3fcc: DecompressPointer r7
    //     0x5d3fcc: add             x7, x7, HEAP, lsl #32
    // 0x5d3fd0: stur            x7, [fp, #-0xb0]
    // 0x5d3fd4: str             x2, [SP]
    // 0x5d3fd8: r0 = beginBatchEdit()
    //     0x5d3fd8: bl              #0x5d4dfc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::beginBatchEdit
    // 0x5d3fdc: ldur            x16, [fp, #-0xd0]
    // 0x5d3fe0: ldur            lr, [fp, #-0xb8]
    // 0x5d3fe4: stp             lr, x16, [SP]
    // 0x5d3fe8: r0 = _value=()
    //     0x5d3fe8: bl              #0x5d4da0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_value=
    // 0x5d3fec: ldur            x0, [fp, #-0xe0]
    // 0x5d3ff0: tbnz            w0, #5, #0x5d3ff8
    // 0x5d3ff4: r0 = AssertBoolean()
    //     0x5d3ff4: bl              #0xc5d270  ; AssertBooleanStub
    // 0x5d3ff8: ldur            x0, [fp, #-0xe0]
    // 0x5d3ffc: tbz             w0, #4, #0x5d4070
    // 0x5d4000: ldur            x1, [fp, #-0xc8]
    // 0x5d4004: mov             x0, x1
    // 0x5d4008: tbnz            w0, #5, #0x5d4010
    // 0x5d400c: r0 = AssertBoolean()
    //     0x5d400c: bl              #0xc5d270  ; AssertBooleanStub
    // 0x5d4010: ldur            x0, [fp, #-0xc8]
    // 0x5d4014: tbnz            w0, #4, #0x5d40d4
    // 0x5d4018: ldur            x1, [fp, #-0xc0]
    // 0x5d401c: r0 = 59
    //     0x5d401c: movz            x0, #0x3b
    // 0x5d4020: branchIfSmi(r1, 0x5d402c)
    //     0x5d4020: tbz             w1, #0, #0x5d402c
    // 0x5d4024: r0 = LoadClassIdInstr(r1)
    //     0x5d4024: ldur            x0, [x1, #-1]
    //     0x5d4028: ubfx            x0, x0, #0xc, #0x14
    // 0x5d402c: r16 = Instance_SelectionChangedCause
    //     0x5d402c: ldr             x16, [PP, #0x61a8]  ; [pp+0x61a8] Obj!SelectionChangedCause@c43031
    // 0x5d4030: stp             x16, x1, [SP]
    // 0x5d4034: mov             lr, x0
    // 0x5d4038: ldr             lr, [x21, lr, lsl #3]
    // 0x5d403c: blr             lr
    // 0x5d4040: tbz             w0, #4, #0x5d4070
    // 0x5d4044: ldur            x1, [fp, #-0xc0]
    // 0x5d4048: r0 = 59
    //     0x5d4048: movz            x0, #0x3b
    // 0x5d404c: branchIfSmi(r1, 0x5d4058)
    //     0x5d404c: tbz             w1, #0, #0x5d4058
    // 0x5d4050: r0 = LoadClassIdInstr(r1)
    //     0x5d4050: ldur            x0, [x1, #-1]
    //     0x5d4054: ubfx            x0, x0, #0xc, #0x14
    // 0x5d4058: r16 = Instance_SelectionChangedCause
    //     0x5d4058: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x5d405c: stp             x16, x1, [SP]
    // 0x5d4060: mov             lr, x0
    // 0x5d4064: ldr             lr, [x21, lr, lsl #3]
    // 0x5d4068: blr             lr
    // 0x5d406c: tbnz            w0, #4, #0x5d40d4
    // 0x5d4070: ldur            x1, [fp, #-0xb8]
    // 0x5d4074: ldur            x0, [fp, #-0xd0]
    // 0x5d4078: LoadField: r2 = r0->field_b
    //     0x5d4078: ldur            w2, [x0, #0xb]
    // 0x5d407c: DecompressPointer r2
    //     0x5d407c: add             x2, x2, HEAP, lsl #32
    // 0x5d4080: cmp             w2, NULL
    // 0x5d4084: b.eq            #0x5d4254
    // 0x5d4088: LoadField: r3 = r2->field_b
    //     0x5d4088: ldur            w3, [x2, #0xb]
    // 0x5d408c: DecompressPointer r3
    //     0x5d408c: add             x3, x3, HEAP, lsl #32
    // 0x5d4090: LoadField: r2 = r3->field_27
    //     0x5d4090: ldur            w2, [x3, #0x27]
    // 0x5d4094: DecompressPointer r2
    //     0x5d4094: add             x2, x2, HEAP, lsl #32
    // 0x5d4098: LoadField: r3 = r2->field_b
    //     0x5d4098: ldur            w3, [x2, #0xb]
    // 0x5d409c: DecompressPointer r3
    //     0x5d409c: add             x3, x3, HEAP, lsl #32
    // 0x5d40a0: stp             x3, x0, [SP, #8]
    // 0x5d40a4: ldur            x16, [fp, #-0xc0]
    // 0x5d40a8: str             x16, [SP]
    // 0x5d40ac: r0 = _handleSelectionChanged()
    //     0x5d40ac: bl              #0x5d1a30  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x5d40b0: ldur            x0, [fp, #-0xb8]
    // 0x5d40b4: LoadField: r1 = r0->field_b
    //     0x5d40b4: ldur            w1, [x0, #0xb]
    // 0x5d40b8: DecompressPointer r1
    //     0x5d40b8: add             x1, x1, HEAP, lsl #32
    // 0x5d40bc: ldur            x16, [fp, #-0xd0]
    // 0x5d40c0: ldur            lr, [fp, #-0xb0]
    // 0x5d40c4: stp             lr, x16, [SP, #0x10]
    // 0x5d40c8: ldur            x16, [fp, #-0xc0]
    // 0x5d40cc: stp             x16, x1, [SP]
    // 0x5d40d0: r0 = _bringIntoViewBySelectionState()
    //     0x5d40d0: bl              #0x5d43f4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_bringIntoViewBySelectionState
    // 0x5d40d4: ldur            x1, [fp, #-0xd0]
    // 0x5d40d8: ldur            x0, [fp, #-0xd8]
    // 0x5d40dc: LoadField: r2 = r1->field_b
    //     0x5d40dc: ldur            w2, [x1, #0xb]
    // 0x5d40e0: DecompressPointer r2
    //     0x5d40e0: add             x2, x2, HEAP, lsl #32
    // 0x5d40e4: cmp             w2, NULL
    // 0x5d40e8: b.eq            #0x5d4258
    // 0x5d40ec: LoadField: r3 = r2->field_b
    //     0x5d40ec: ldur            w3, [x2, #0xb]
    // 0x5d40f0: DecompressPointer r3
    //     0x5d40f0: add             x3, x3, HEAP, lsl #32
    // 0x5d40f4: LoadField: r2 = r3->field_27
    //     0x5d40f4: ldur            w2, [x3, #0x27]
    // 0x5d40f8: DecompressPointer r2
    //     0x5d40f8: add             x2, x2, HEAP, lsl #32
    // 0x5d40fc: LoadField: r3 = r2->field_7
    //     0x5d40fc: ldur            w3, [x2, #7]
    // 0x5d4100: DecompressPointer r3
    //     0x5d4100: add             x3, x3, HEAP, lsl #32
    // 0x5d4104: stur            x3, [fp, #-0xb0]
    // 0x5d4108: LoadField: r2 = r0->field_7
    //     0x5d4108: ldur            w2, [x0, #7]
    // 0x5d410c: DecompressPointer r2
    //     0x5d410c: add             x2, x2, HEAP, lsl #32
    // 0x5d4110: r0 = LoadClassIdInstr(r2)
    //     0x5d4110: ldur            x0, [x2, #-1]
    //     0x5d4114: ubfx            x0, x0, #0xc, #0x14
    // 0x5d4118: stp             x3, x2, [SP]
    // 0x5d411c: mov             lr, x0
    // 0x5d4120: ldr             lr, [x21, lr, lsl #3]
    // 0x5d4124: blr             lr
    // 0x5d4128: tbz             w0, #4, #0x5d4174
    // 0x5d412c: ldur            x1, [fp, #-0xd0]
    // 0x5d4130: LoadField: r0 = r1->field_b
    //     0x5d4130: ldur            w0, [x1, #0xb]
    // 0x5d4134: DecompressPointer r0
    //     0x5d4134: add             x0, x0, HEAP, lsl #32
    // 0x5d4138: cmp             w0, NULL
    // 0x5d413c: b.eq            #0x5d425c
    // 0x5d4140: LoadField: r2 = r0->field_97
    //     0x5d4140: ldur            w2, [x0, #0x97]
    // 0x5d4144: DecompressPointer r2
    //     0x5d4144: add             x2, x2, HEAP, lsl #32
    // 0x5d4148: stur            x2, [fp, #-0xb8]
    // 0x5d414c: cmp             w2, NULL
    // 0x5d4150: b.eq            #0x5d416c
    // 0x5d4154: ldur            x16, [fp, #-0xb0]
    // 0x5d4158: stp             x16, x2, [SP]
    // 0x5d415c: mov             x0, x2
    // 0x5d4160: ClosureCall
    //     0x5d4160: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x5d4164: ldur            x2, [x0, #0x1f]
    //     0x5d4168: blr             x2
    // 0x5d416c: ldur            x0, [fp, #-0xd0]
    // 0x5d4170: b               #0x5d4228
    // 0x5d4174: ldur            x0, [fp, #-0xd0]
    // 0x5d4178: b               #0x5d4228
    // 0x5d417c: r5 = "widgets"
    //     0x5d417c: ldr             x5, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5d4180: r4 = true
    //     0x5d4180: add             x4, NULL, #0x20  ; true
    // 0x5d4184: r6 = false
    //     0x5d4184: add             x6, NULL, #0x30  ; false
    // 0x5d4188: r3 = 2
    //     0x5d4188: movz            x3, #0x2
    // 0x5d418c: sub             SP, fp, #0x110
    // 0x5d4190: mov             x2, x3
    // 0x5d4194: mov             x7, x0
    // 0x5d4198: stur            x0, [fp, #-0xb0]
    // 0x5d419c: mov             x0, x1
    // 0x5d41a0: stur            x1, [fp, #-0xb8]
    // 0x5d41a4: r1 = Null
    //     0x5d41a4: mov             x1, NULL
    // 0x5d41a8: r0 = AllocateArray()
    //     0x5d41a8: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5d41ac: stur            x0, [fp, #-0xc0]
    // 0x5d41b0: r17 = "while calling onChanged"
    //     0x5d41b0: ldr             x17, [PP, #0x6360]  ; [pp+0x6360] "while calling onChanged"
    // 0x5d41b4: StoreField: r0->field_f = r17
    //     0x5d41b4: stur            w17, [x0, #0xf]
    // 0x5d41b8: r1 = <Object>
    //     0x5d41b8: ldr             x1, [PP, #0x150]  ; [pp+0x150] TypeArguments: <Object>
    // 0x5d41bc: r0 = AllocateGrowableArray()
    //     0x5d41bc: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x5d41c0: mov             x2, x0
    // 0x5d41c4: ldur            x0, [fp, #-0xc0]
    // 0x5d41c8: stur            x2, [fp, #-0xc8]
    // 0x5d41cc: StoreField: r2->field_f = r0
    //     0x5d41cc: stur            w0, [x2, #0xf]
    // 0x5d41d0: r0 = 2
    //     0x5d41d0: movz            x0, #0x2
    // 0x5d41d4: StoreField: r2->field_b = r0
    //     0x5d41d4: stur            w0, [x2, #0xb]
    // 0x5d41d8: r1 = <List<Object>>
    //     0x5d41d8: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] TypeArguments: <List<Object>>
    // 0x5d41dc: r0 = ErrorDescription()
    //     0x5d41dc: bl              #0x5151c0  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x5d41e0: mov             x1, x0
    // 0x5d41e4: r0 = true
    //     0x5d41e4: add             x0, NULL, #0x20  ; true
    // 0x5d41e8: StoreField: r1->field_f = r0
    //     0x5d41e8: stur            w0, [x1, #0xf]
    // 0x5d41ec: ldur            x0, [fp, #-0xc8]
    // 0x5d41f0: StoreField: r1->field_b = r0
    //     0x5d41f0: stur            w0, [x1, #0xb]
    // 0x5d41f4: r0 = FlutterErrorDetails()
    //     0x5d41f4: bl              #0x5151b4  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x5d41f8: mov             x1, x0
    // 0x5d41fc: ldur            x0, [fp, #-0xb0]
    // 0x5d4200: StoreField: r1->field_7 = r0
    //     0x5d4200: stur            w0, [x1, #7]
    // 0x5d4204: ldur            x0, [fp, #-0xb8]
    // 0x5d4208: StoreField: r1->field_b = r0
    //     0x5d4208: stur            w0, [x1, #0xb]
    // 0x5d420c: r0 = "widgets"
    //     0x5d420c: ldr             x0, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5d4210: StoreField: r1->field_f = r0
    //     0x5d4210: stur            w0, [x1, #0xf]
    // 0x5d4214: r0 = false
    //     0x5d4214: add             x0, NULL, #0x30  ; false
    // 0x5d4218: StoreField: r1->field_13 = r0
    //     0x5d4218: stur            w0, [x1, #0x13]
    // 0x5d421c: str             x1, [SP]
    // 0x5d4220: r0 = reportError()
    //     0x5d4220: bl              #0x510a8c  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x5d4224: ldur            x0, [fp, #-0x60]
    // 0x5d4228: str             x0, [SP]
    // 0x5d422c: r0 = endBatchEdit()
    //     0x5d422c: bl              #0x5d4260  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::endBatchEdit
    // 0x5d4230: r0 = Null
    //     0x5d4230: mov             x0, NULL
    // 0x5d4234: LeaveFrame
    //     0x5d4234: mov             SP, fp
    //     0x5d4238: ldp             fp, lr, [SP], #0x10
    // 0x5d423c: ret
    //     0x5d423c: ret             
    // 0x5d4240: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4240: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4244: b               #0x5d3d5c
    // 0x5d4248: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4248: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d424c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d424c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4250: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4250: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4254: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4254: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4258: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4258: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d425c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d425c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ endBatchEdit(/* No info */) {
    // ** addr: 0x5d4260, size: 0x48
    // 0x5d4260: EnterFrame
    //     0x5d4260: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4264: mov             fp, SP
    // 0x5d4268: AllocStack(0x8)
    //     0x5d4268: sub             SP, SP, #8
    // 0x5d426c: CheckStackOverflow
    //     0x5d426c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4270: cmp             SP, x16
    //     0x5d4274: b.ls            #0x5d42a0
    // 0x5d4278: ldr             x0, [fp, #0x10]
    // 0x5d427c: LoadField: r1 = r0->field_87
    //     0x5d427c: ldur            x1, [x0, #0x87]
    // 0x5d4280: sub             x2, x1, #1
    // 0x5d4284: StoreField: r0->field_87 = r2
    //     0x5d4284: stur            x2, [x0, #0x87]
    // 0x5d4288: str             x0, [SP]
    // 0x5d428c: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x5d428c: bl              #0x5d42a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x5d4290: r0 = Null
    //     0x5d4290: mov             x0, NULL
    // 0x5d4294: LeaveFrame
    //     0x5d4294: mov             SP, fp
    //     0x5d4298: ldp             fp, lr, [SP], #0x10
    // 0x5d429c: ret
    //     0x5d429c: ret             
    // 0x5d42a0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d42a0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d42a4: b               #0x5d4278
  }
  _ _updateRemoteEditingValueIfNeeded(/* No info */) {
    // ** addr: 0x5d42a8, size: 0xf4
    // 0x5d42a8: EnterFrame
    //     0x5d42a8: stp             fp, lr, [SP, #-0x10]!
    //     0x5d42ac: mov             fp, SP
    // 0x5d42b0: AllocStack(0x18)
    //     0x5d42b0: sub             SP, SP, #0x18
    // 0x5d42b4: CheckStackOverflow
    //     0x5d42b4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d42b8: cmp             SP, x16
    //     0x5d42bc: b.ls            #0x5d438c
    // 0x5d42c0: ldr             x0, [fp, #0x10]
    // 0x5d42c4: LoadField: r1 = r0->field_87
    //     0x5d42c4: ldur            x1, [x0, #0x87]
    // 0x5d42c8: cmp             x1, #0
    // 0x5d42cc: b.gt            #0x5d42dc
    // 0x5d42d0: str             x0, [SP]
    // 0x5d42d4: r0 = _hasInputConnection()
    //     0x5d42d4: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5d42d8: tbz             w0, #4, #0x5d42ec
    // 0x5d42dc: r0 = Null
    //     0x5d42dc: mov             x0, NULL
    // 0x5d42e0: LeaveFrame
    //     0x5d42e0: mov             SP, fp
    //     0x5d42e4: ldp             fp, lr, [SP], #0x10
    // 0x5d42e8: ret
    //     0x5d42e8: ret             
    // 0x5d42ec: ldr             x0, [fp, #0x10]
    // 0x5d42f0: LoadField: r1 = r0->field_b
    //     0x5d42f0: ldur            w1, [x0, #0xb]
    // 0x5d42f4: DecompressPointer r1
    //     0x5d42f4: add             x1, x1, HEAP, lsl #32
    // 0x5d42f8: cmp             w1, NULL
    // 0x5d42fc: b.eq            #0x5d4394
    // 0x5d4300: LoadField: r2 = r1->field_b
    //     0x5d4300: ldur            w2, [x1, #0xb]
    // 0x5d4304: DecompressPointer r2
    //     0x5d4304: add             x2, x2, HEAP, lsl #32
    // 0x5d4308: LoadField: r1 = r2->field_27
    //     0x5d4308: ldur            w1, [x2, #0x27]
    // 0x5d430c: DecompressPointer r1
    //     0x5d430c: add             x1, x1, HEAP, lsl #32
    // 0x5d4310: stur            x1, [fp, #-8]
    // 0x5d4314: LoadField: r2 = r0->field_73
    //     0x5d4314: ldur            w2, [x0, #0x73]
    // 0x5d4318: DecompressPointer r2
    //     0x5d4318: add             x2, x2, HEAP, lsl #32
    // 0x5d431c: stp             x2, x1, [SP]
    // 0x5d4320: r0 = ==()
    //     0x5d4320: bl              #0xbe23ec  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x5d4324: tbnz            w0, #4, #0x5d4338
    // 0x5d4328: r0 = Null
    //     0x5d4328: mov             x0, NULL
    // 0x5d432c: LeaveFrame
    //     0x5d432c: mov             SP, fp
    //     0x5d4330: ldp             fp, lr, [SP], #0x10
    // 0x5d4334: ret
    //     0x5d4334: ret             
    // 0x5d4338: ldr             x0, [fp, #0x10]
    // 0x5d433c: LoadField: r1 = r0->field_3b
    //     0x5d433c: ldur            w1, [x0, #0x3b]
    // 0x5d4340: DecompressPointer r1
    //     0x5d4340: add             x1, x1, HEAP, lsl #32
    // 0x5d4344: cmp             w1, NULL
    // 0x5d4348: b.eq            #0x5d4398
    // 0x5d434c: ldur            x16, [fp, #-8]
    // 0x5d4350: stp             x16, x1, [SP]
    // 0x5d4354: r0 = setEditingState()
    //     0x5d4354: bl              #0x5d439c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditingState
    // 0x5d4358: ldur            x0, [fp, #-8]
    // 0x5d435c: ldr             x1, [fp, #0x10]
    // 0x5d4360: StoreField: r1->field_73 = r0
    //     0x5d4360: stur            w0, [x1, #0x73]
    //     0x5d4364: ldurb           w16, [x1, #-1]
    //     0x5d4368: ldurb           w17, [x0, #-1]
    //     0x5d436c: and             x16, x17, x16, lsr #2
    //     0x5d4370: tst             x16, HEAP, lsr #32
    //     0x5d4374: b.eq            #0x5d437c
    //     0x5d4378: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5d437c: r0 = Null
    //     0x5d437c: mov             x0, NULL
    // 0x5d4380: LeaveFrame
    //     0x5d4380: mov             SP, fp
    //     0x5d4384: ldp             fp, lr, [SP], #0x10
    // 0x5d4388: ret
    //     0x5d4388: ret             
    // 0x5d438c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d438c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4390: b               #0x5d42c0
    // 0x5d4394: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4394: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4398: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4398: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _bringIntoViewBySelectionState(/* No info */) {
    // ** addr: 0x5d43f4, size: 0x94
    // 0x5d43f4: EnterFrame
    //     0x5d43f4: stp             fp, lr, [SP, #-0x10]!
    //     0x5d43f8: mov             fp, SP
    // 0x5d43fc: AllocStack(0x10)
    //     0x5d43fc: sub             SP, SP, #0x10
    // 0x5d4400: CheckStackOverflow
    //     0x5d4400: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4404: cmp             SP, x16
    //     0x5d4408: b.ls            #0x5d4480
    // 0x5d440c: ldr             x0, [fp, #0x10]
    // 0x5d4410: r16 = Instance_SelectionChangedCause
    //     0x5d4410: ldr             x16, [PP, #0x61a0]  ; [pp+0x61a0] Obj!SelectionChangedCause@c43051
    // 0x5d4414: cmp             w0, w16
    // 0x5d4418: b.ne            #0x5d4470
    // 0x5d441c: ldr             x1, [fp, #0x20]
    // 0x5d4420: ldr             x0, [fp, #0x18]
    // 0x5d4424: ArrayLoad: r2 = r1[0]  ; List_8
    //     0x5d4424: ldur            x2, [x1, #0x17]
    // 0x5d4428: ArrayLoad: r3 = r0[0]  ; List_8
    //     0x5d4428: ldur            x3, [x0, #0x17]
    // 0x5d442c: cmp             x2, x3
    // 0x5d4430: b.eq            #0x5d444c
    // 0x5d4434: str             x0, [SP]
    // 0x5d4438: r0 = base()
    //     0x5d4438: bl              #0x5d4d24  ; [package:flutter/src/services/text_editing.dart] TextSelection::base
    // 0x5d443c: ldr             x16, [fp, #0x28]
    // 0x5d4440: stp             x0, x16, [SP]
    // 0x5d4444: r0 = bringIntoView()
    //     0x5d4444: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x5d4448: b               #0x5d4470
    // 0x5d444c: LoadField: r2 = r1->field_1f
    //     0x5d444c: ldur            x2, [x1, #0x1f]
    // 0x5d4450: LoadField: r1 = r0->field_1f
    //     0x5d4450: ldur            x1, [x0, #0x1f]
    // 0x5d4454: cmp             x2, x1
    // 0x5d4458: b.eq            #0x5d4470
    // 0x5d445c: str             x0, [SP]
    // 0x5d4460: r0 = extent()
    //     0x5d4460: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x5d4464: ldr             x16, [fp, #0x28]
    // 0x5d4468: stp             x0, x16, [SP]
    // 0x5d446c: r0 = bringIntoView()
    //     0x5d446c: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x5d4470: r0 = Null
    //     0x5d4470: mov             x0, NULL
    // 0x5d4474: LeaveFrame
    //     0x5d4474: mov             SP, fp
    //     0x5d4478: ldp             fp, lr, [SP], #0x10
    // 0x5d447c: ret
    //     0x5d447c: ret             
    // 0x5d4480: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4480: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4484: b               #0x5d440c
  }
  _ bringIntoView(/* No info */) {
    // ** addr: 0x5d4488, size: 0xb4
    // 0x5d4488: EnterFrame
    //     0x5d4488: stp             fp, lr, [SP, #-0x10]!
    //     0x5d448c: mov             fp, SP
    // 0x5d4490: AllocStack(0x18)
    //     0x5d4490: sub             SP, SP, #0x18
    // 0x5d4494: CheckStackOverflow
    //     0x5d4494: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4498: cmp             SP, x16
    //     0x5d449c: b.ls            #0x5d4534
    // 0x5d44a0: ldr             x1, [fp, #0x18]
    // 0x5d44a4: LoadField: r0 = r1->field_a7
    //     0x5d44a4: ldur            w0, [x1, #0xa7]
    // 0x5d44a8: DecompressPointer r0
    //     0x5d44a8: add             x0, x0, HEAP, lsl #32
    // 0x5d44ac: r16 = Sentinel
    //     0x5d44ac: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d44b0: cmp             w0, w16
    // 0x5d44b4: b.ne            #0x5d44c0
    // 0x5d44b8: r2 = renderEditable
    //     0x5d44b8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d44bc: r0 = InitLateFinalInstanceField()
    //     0x5d44bc: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d44c0: ldr             x16, [fp, #0x10]
    // 0x5d44c4: stp             x16, x0, [SP]
    // 0x5d44c8: r0 = getLocalRectForCaret()
    //     0x5d44c8: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5d44cc: ldr             x16, [fp, #0x18]
    // 0x5d44d0: stp             x0, x16, [SP]
    // 0x5d44d4: r0 = _getOffsetToRevealCaret()
    //     0x5d44d4: bl              #0x5d4750  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getOffsetToRevealCaret
    // 0x5d44d8: stur            x0, [fp, #-8]
    // 0x5d44dc: ldr             x16, [fp, #0x18]
    // 0x5d44e0: str             x16, [SP]
    // 0x5d44e4: r0 = _scrollController()
    //     0x5d44e4: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d44e8: mov             x1, x0
    // 0x5d44ec: ldur            x0, [fp, #-8]
    // 0x5d44f0: LoadField: d0 = r0->field_7
    //     0x5d44f0: ldur            d0, [x0, #7]
    // 0x5d44f4: str             x1, [SP, #8]
    // 0x5d44f8: str             d0, [SP]
    // 0x5d44fc: r0 = jumpTo()
    //     0x5d44fc: bl              #0x5d453c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0x5d4500: ldr             x0, [fp, #0x18]
    // 0x5d4504: LoadField: r1 = r0->field_a7
    //     0x5d4504: ldur            w1, [x0, #0xa7]
    // 0x5d4508: DecompressPointer r1
    //     0x5d4508: add             x1, x1, HEAP, lsl #32
    // 0x5d450c: ldur            x0, [fp, #-8]
    // 0x5d4510: LoadField: r2 = r0->field_f
    //     0x5d4510: ldur            w2, [x0, #0xf]
    // 0x5d4514: DecompressPointer r2
    //     0x5d4514: add             x2, x2, HEAP, lsl #32
    // 0x5d4518: stp             x2, x1, [SP]
    // 0x5d451c: r4 = const [0, 0x2, 0x2, 0x1, rect, 0x1, null]
    //     0x5d451c: ldr             x4, [PP, #0x6368]  ; [pp+0x6368] List(7) [0, 0x2, 0x2, 0x1, "rect", 0x1, Null]
    // 0x5d4520: r0 = showOnScreen()
    //     0x5d4520: bl              #0x813b40  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x5d4524: r0 = Null
    //     0x5d4524: mov             x0, NULL
    // 0x5d4528: LeaveFrame
    //     0x5d4528: mov             SP, fp
    //     0x5d452c: ldp             fp, lr, [SP], #0x10
    // 0x5d4530: ret
    //     0x5d4530: ret             
    // 0x5d4534: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4534: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4538: b               #0x5d44a0
  }
  get _ _scrollController(/* No info */) {
    // ** addr: 0x5d4698, size: 0xac
    // 0x5d4698: EnterFrame
    //     0x5d4698: stp             fp, lr, [SP, #-0x10]!
    //     0x5d469c: mov             fp, SP
    // 0x5d46a0: AllocStack(0x10)
    //     0x5d46a0: sub             SP, SP, #0x10
    // 0x5d46a4: CheckStackOverflow
    //     0x5d46a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d46a8: cmp             SP, x16
    //     0x5d46ac: b.ls            #0x5d4738
    // 0x5d46b0: ldr             x0, [fp, #0x10]
    // 0x5d46b4: LoadField: r1 = r0->field_b
    //     0x5d46b4: ldur            w1, [x0, #0xb]
    // 0x5d46b8: DecompressPointer r1
    //     0x5d46b8: add             x1, x1, HEAP, lsl #32
    // 0x5d46bc: cmp             w1, NULL
    // 0x5d46c0: b.eq            #0x5d4740
    // 0x5d46c4: LoadField: r2 = r1->field_f3
    //     0x5d46c4: ldur            w2, [x1, #0xf3]
    // 0x5d46c8: DecompressPointer r2
    //     0x5d46c8: add             x2, x2, HEAP, lsl #32
    // 0x5d46cc: cmp             w2, NULL
    // 0x5d46d0: b.ne            #0x5d4728
    // 0x5d46d4: LoadField: r1 = r0->field_47
    //     0x5d46d4: ldur            w1, [x0, #0x47]
    // 0x5d46d8: DecompressPointer r1
    //     0x5d46d8: add             x1, x1, HEAP, lsl #32
    // 0x5d46dc: cmp             w1, NULL
    // 0x5d46e0: b.ne            #0x5d4720
    // 0x5d46e4: r0 = ScrollController()
    //     0x5d46e4: bl              #0x5d4744  ; AllocateScrollControllerStub -> ScrollController (size=0x40)
    // 0x5d46e8: stur            x0, [fp, #-8]
    // 0x5d46ec: str             x0, [SP]
    // 0x5d46f0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5d46f0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5d46f4: r0 = ScrollController()
    //     0x5d46f4: bl              #0x591130  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::ScrollController
    // 0x5d46f8: ldur            x0, [fp, #-8]
    // 0x5d46fc: ldr             x3, [fp, #0x10]
    // 0x5d4700: StoreField: r3->field_47 = r0
    //     0x5d4700: stur            w0, [x3, #0x47]
    //     0x5d4704: ldurb           w16, [x3, #-1]
    //     0x5d4708: ldurb           w17, [x0, #-1]
    //     0x5d470c: and             x16, x17, x16, lsr #2
    //     0x5d4710: tst             x16, HEAP, lsr #32
    //     0x5d4714: b.eq            #0x5d471c
    //     0x5d4718: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x5d471c: ldur            x1, [fp, #-8]
    // 0x5d4720: mov             x0, x1
    // 0x5d4724: b               #0x5d472c
    // 0x5d4728: mov             x0, x2
    // 0x5d472c: LeaveFrame
    //     0x5d472c: mov             SP, fp
    //     0x5d4730: ldp             fp, lr, [SP], #0x10
    // 0x5d4734: ret
    //     0x5d4734: ret             
    // 0x5d4738: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4738: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d473c: b               #0x5d46b0
    // 0x5d4740: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4740: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getOffsetToRevealCaret(/* No info */) {
    // ** addr: 0x5d4750, size: 0x450
    // 0x5d4750: EnterFrame
    //     0x5d4750: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4754: mov             fp, SP
    // 0x5d4758: AllocStack(0x48)
    //     0x5d4758: sub             SP, SP, #0x48
    // 0x5d475c: CheckStackOverflow
    //     0x5d475c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4760: cmp             SP, x16
    //     0x5d4764: b.ls            #0x5d4b78
    // 0x5d4768: ldr             x16, [fp, #0x18]
    // 0x5d476c: str             x16, [SP]
    // 0x5d4770: r0 = _scrollController()
    //     0x5d4770: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d4774: LoadField: r1 = r0->field_3b
    //     0x5d4774: ldur            w1, [x0, #0x3b]
    // 0x5d4778: DecompressPointer r1
    //     0x5d4778: add             x1, x1, HEAP, lsl #32
    // 0x5d477c: str             x1, [SP]
    // 0x5d4780: r0 = single()
    //     0x5d4780: bl              #0x5a9fe4  ; [dart:core] _GrowableList::single
    // 0x5d4784: str             x0, [SP]
    // 0x5d4788: r0 = allowImplicitScrolling()
    //     0x5d4788: bl              #0x5d4cd0  ; [package:flutter/src/widgets/scroll_position.dart] ScrollPosition::allowImplicitScrolling
    // 0x5d478c: tbz             w0, #4, #0x5d47e8
    // 0x5d4790: ldr             x0, [fp, #0x10]
    // 0x5d4794: ldr             x16, [fp, #0x18]
    // 0x5d4798: str             x16, [SP]
    // 0x5d479c: r0 = _scrollController()
    //     0x5d479c: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d47a0: LoadField: r1 = r0->field_3b
    //     0x5d47a0: ldur            w1, [x0, #0x3b]
    // 0x5d47a4: DecompressPointer r1
    //     0x5d47a4: add             x1, x1, HEAP, lsl #32
    // 0x5d47a8: str             x1, [SP]
    // 0x5d47ac: r0 = single()
    //     0x5d47ac: bl              #0x5a9fe4  ; [dart:core] _GrowableList::single
    // 0x5d47b0: LoadField: r1 = r0->field_43
    //     0x5d47b0: ldur            w1, [x0, #0x43]
    // 0x5d47b4: DecompressPointer r1
    //     0x5d47b4: add             x1, x1, HEAP, lsl #32
    // 0x5d47b8: cmp             w1, NULL
    // 0x5d47bc: b.eq            #0x5d4b80
    // 0x5d47c0: LoadField: d0 = r1->field_7
    //     0x5d47c0: ldur            d0, [x1, #7]
    // 0x5d47c4: stur            d0, [fp, #-0x20]
    // 0x5d47c8: r0 = RevealedOffset()
    //     0x5d47c8: bl              #0x5d4cc4  ; AllocateRevealedOffsetStub -> RevealedOffset (size=0x14)
    // 0x5d47cc: ldur            d0, [fp, #-0x20]
    // 0x5d47d0: StoreField: r0->field_7 = d0
    //     0x5d47d0: stur            d0, [x0, #7]
    // 0x5d47d4: ldr             x2, [fp, #0x10]
    // 0x5d47d8: StoreField: r0->field_f = r2
    //     0x5d47d8: stur            w2, [x0, #0xf]
    // 0x5d47dc: LeaveFrame
    //     0x5d47dc: mov             SP, fp
    //     0x5d47e0: ldp             fp, lr, [SP], #0x10
    // 0x5d47e4: ret
    //     0x5d47e4: ret             
    // 0x5d47e8: ldr             x2, [fp, #0x10]
    // 0x5d47ec: ldr             x1, [fp, #0x18]
    // 0x5d47f0: LoadField: r0 = r1->field_a7
    //     0x5d47f0: ldur            w0, [x1, #0xa7]
    // 0x5d47f4: DecompressPointer r0
    //     0x5d47f4: add             x0, x0, HEAP, lsl #32
    // 0x5d47f8: r16 = Sentinel
    //     0x5d47f8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d47fc: cmp             w0, w16
    // 0x5d4800: b.ne            #0x5d480c
    // 0x5d4804: r2 = renderEditable
    //     0x5d4804: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5d4808: r0 = InitLateFinalInstanceField()
    //     0x5d4808: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5d480c: str             x0, [SP]
    // 0x5d4810: r0 = size()
    //     0x5d4810: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x5d4814: stur            x0, [fp, #-8]
    // 0x5d4818: ldr             x16, [fp, #0x18]
    // 0x5d481c: str             x16, [SP]
    // 0x5d4820: r0 = _isMultiline()
    //     0x5d4820: bl              #0x5d4c84  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_isMultiline
    // 0x5d4824: tbz             w0, #4, #0x5d48b0
    // 0x5d4828: ldr             x1, [fp, #0x10]
    // 0x5d482c: ldur            x0, [fp, #-8]
    // 0x5d4830: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x5d4830: ldur            d0, [x1, #0x17]
    // 0x5d4834: LoadField: d1 = r1->field_7
    //     0x5d4834: ldur            d1, [x1, #7]
    // 0x5d4838: fsub            d2, d0, d1
    // 0x5d483c: LoadField: d3 = r0->field_7
    //     0x5d483c: ldur            d3, [x0, #7]
    // 0x5d4840: fcmp            d2, d3
    // 0x5d4844: b.vs            #0x5d4874
    // 0x5d4848: b.lt            #0x5d4874
    // 0x5d484c: d0 = 2.000000
    //     0x5d484c: fmov            d0, #2.00000000
    // 0x5d4850: fdiv            d1, d3, d0
    // 0x5d4854: stur            d1, [fp, #-0x20]
    // 0x5d4858: str             x1, [SP]
    // 0x5d485c: r0 = center()
    //     0x5d485c: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5d4860: LoadField: d0 = r0->field_7
    //     0x5d4860: ldur            d0, [x0, #7]
    // 0x5d4864: ldur            d1, [fp, #-0x20]
    // 0x5d4868: fsub            d2, d1, d0
    // 0x5d486c: mov             v0.16b, v2.16b
    // 0x5d4870: b               #0x5d48a8
    // 0x5d4874: d2 = 0.000000
    //     0x5d4874: eor             v2.16b, v2.16b, v2.16b
    // 0x5d4878: fsub            d4, d0, d3
    // 0x5d487c: fcmp            d2, d4
    // 0x5d4880: b.vs            #0x5d4890
    // 0x5d4884: b.ge            #0x5d4890
    // 0x5d4888: mov             v0.16b, v4.16b
    // 0x5d488c: b               #0x5d48a8
    // 0x5d4890: fcmp            d2, d1
    // 0x5d4894: b.vs            #0x5d48a4
    // 0x5d4898: b.le            #0x5d48a4
    // 0x5d489c: mov             v0.16b, v1.16b
    // 0x5d48a0: b               #0x5d48a8
    // 0x5d48a4: d0 = 0.000000
    //     0x5d48a4: eor             v0.16b, v0.16b, v0.16b
    // 0x5d48a8: r0 = Instance_Offset
    //     0x5d48a8: ldr             x0, [PP, #0x63b0]  ; [pp+0x63b0] Obj!Offset@c3cbd1
    // 0x5d48ac: b               #0x5d4a24
    // 0x5d48b0: ldr             x2, [fp, #0x18]
    // 0x5d48b4: ldr             x1, [fp, #0x10]
    // 0x5d48b8: ldur            x0, [fp, #-8]
    // 0x5d48bc: d0 = 2.000000
    //     0x5d48bc: fmov            d0, #2.00000000
    // 0x5d48c0: d2 = 0.000000
    //     0x5d48c0: eor             v2.16b, v2.16b, v2.16b
    // 0x5d48c4: str             x1, [SP]
    // 0x5d48c8: r0 = center()
    //     0x5d48c8: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5d48cc: mov             x1, x0
    // 0x5d48d0: ldr             x0, [fp, #0x10]
    // 0x5d48d4: stur            x1, [fp, #-0x10]
    // 0x5d48d8: ArrayLoad: d0 = r0[0]  ; List_8
    //     0x5d48d8: ldur            d0, [x0, #0x17]
    // 0x5d48dc: LoadField: d1 = r0->field_7
    //     0x5d48dc: ldur            d1, [x0, #7]
    // 0x5d48e0: fsub            d2, d0, d1
    // 0x5d48e4: stur            d2, [fp, #-0x28]
    // 0x5d48e8: LoadField: d0 = r0->field_1f
    //     0x5d48e8: ldur            d0, [x0, #0x1f]
    // 0x5d48ec: LoadField: d1 = r0->field_f
    //     0x5d48ec: ldur            d1, [x0, #0xf]
    // 0x5d48f0: fsub            d3, d0, d1
    // 0x5d48f4: ldr             x2, [fp, #0x18]
    // 0x5d48f8: stur            d3, [fp, #-0x20]
    // 0x5d48fc: LoadField: r3 = r2->field_a7
    //     0x5d48fc: ldur            w3, [x2, #0xa7]
    // 0x5d4900: DecompressPointer r3
    //     0x5d4900: add             x3, x3, HEAP, lsl #32
    // 0x5d4904: LoadField: r4 = r3->field_b7
    //     0x5d4904: ldur            w4, [x3, #0xb7]
    // 0x5d4908: DecompressPointer r4
    //     0x5d4908: add             x4, x4, HEAP, lsl #32
    // 0x5d490c: str             x4, [SP]
    // 0x5d4910: r0 = preferredLineHeight()
    //     0x5d4910: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x5d4914: mov             v1.16b, v0.16b
    // 0x5d4918: ldur            d0, [fp, #-0x20]
    // 0x5d491c: fcmp            d0, d1
    // 0x5d4920: b.vs            #0x5d4934
    // 0x5d4924: b.le            #0x5d4934
    // 0x5d4928: mov             v1.16b, v0.16b
    // 0x5d492c: d2 = 0.000000
    //     0x5d492c: eor             v2.16b, v2.16b, v2.16b
    // 0x5d4930: b               #0x5d4970
    // 0x5d4934: fcmp            d0, d1
    // 0x5d4938: b.vs            #0x5d4948
    // 0x5d493c: b.ge            #0x5d4948
    // 0x5d4940: d2 = 0.000000
    //     0x5d4940: eor             v2.16b, v2.16b, v2.16b
    // 0x5d4944: b               #0x5d4970
    // 0x5d4948: d2 = 0.000000
    //     0x5d4948: eor             v2.16b, v2.16b, v2.16b
    // 0x5d494c: fcmp            d0, d2
    // 0x5d4950: b.vs            #0x5d4964
    // 0x5d4954: b.ne            #0x5d4964
    // 0x5d4958: fadd            d3, d0, d1
    // 0x5d495c: mov             v1.16b, v3.16b
    // 0x5d4960: b               #0x5d4970
    // 0x5d4964: fcmp            d1, d1
    // 0x5d4968: b.vs            #0x5d4970
    // 0x5d496c: mov             v1.16b, v0.16b
    // 0x5d4970: ldur            x0, [fp, #-8]
    // 0x5d4974: ldur            d0, [fp, #-0x28]
    // 0x5d4978: stur            d1, [fp, #-0x20]
    // 0x5d497c: r0 = Rect()
    //     0x5d497c: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0x5d4980: stur            x0, [fp, #-0x18]
    // 0x5d4984: ldur            x16, [fp, #-0x10]
    // 0x5d4988: stp             x16, x0, [SP, #0x10]
    // 0x5d498c: ldur            d0, [fp, #-0x20]
    // 0x5d4990: str             d0, [SP, #8]
    // 0x5d4994: ldur            d0, [fp, #-0x28]
    // 0x5d4998: str             d0, [SP]
    // 0x5d499c: r0 = Rect.fromCenter()
    //     0x5d499c: bl              #0x5d4c38  ; [dart:ui] Rect::Rect.fromCenter
    // 0x5d49a0: ldur            x0, [fp, #-0x18]
    // 0x5d49a4: LoadField: d0 = r0->field_1f
    //     0x5d49a4: ldur            d0, [x0, #0x1f]
    // 0x5d49a8: LoadField: d1 = r0->field_f
    //     0x5d49a8: ldur            d1, [x0, #0xf]
    // 0x5d49ac: fsub            d2, d0, d1
    // 0x5d49b0: ldur            x1, [fp, #-8]
    // 0x5d49b4: LoadField: d3 = r1->field_f
    //     0x5d49b4: ldur            d3, [x1, #0xf]
    // 0x5d49b8: fcmp            d2, d3
    // 0x5d49bc: b.vs            #0x5d49ec
    // 0x5d49c0: b.lt            #0x5d49ec
    // 0x5d49c4: d0 = 2.000000
    //     0x5d49c4: fmov            d0, #2.00000000
    // 0x5d49c8: fdiv            d1, d3, d0
    // 0x5d49cc: stur            d1, [fp, #-0x20]
    // 0x5d49d0: str             x0, [SP]
    // 0x5d49d4: r0 = center()
    //     0x5d49d4: bl              #0x5d0b38  ; [dart:ui] Rect::center
    // 0x5d49d8: LoadField: d0 = r0->field_f
    //     0x5d49d8: ldur            d0, [x0, #0xf]
    // 0x5d49dc: ldur            d1, [fp, #-0x20]
    // 0x5d49e0: fsub            d2, d1, d0
    // 0x5d49e4: mov             v0.16b, v2.16b
    // 0x5d49e8: b               #0x5d4a20
    // 0x5d49ec: d2 = 0.000000
    //     0x5d49ec: eor             v2.16b, v2.16b, v2.16b
    // 0x5d49f0: fsub            d4, d0, d3
    // 0x5d49f4: fcmp            d2, d4
    // 0x5d49f8: b.vs            #0x5d4a08
    // 0x5d49fc: b.ge            #0x5d4a08
    // 0x5d4a00: mov             v0.16b, v4.16b
    // 0x5d4a04: b               #0x5d4a20
    // 0x5d4a08: fcmp            d2, d1
    // 0x5d4a0c: b.vs            #0x5d4a1c
    // 0x5d4a10: b.le            #0x5d4a1c
    // 0x5d4a14: mov             v0.16b, v1.16b
    // 0x5d4a18: b               #0x5d4a20
    // 0x5d4a1c: d0 = 0.000000
    //     0x5d4a1c: eor             v0.16b, v0.16b, v0.16b
    // 0x5d4a20: r0 = Instance_Offset
    //     0x5d4a20: ldr             x0, [PP, #0x63b8]  ; [pp+0x63b8] Obj!Offset@c3cbb1
    // 0x5d4a24: stur            x0, [fp, #-8]
    // 0x5d4a28: stur            d0, [fp, #-0x20]
    // 0x5d4a2c: ldr             x16, [fp, #0x18]
    // 0x5d4a30: str             x16, [SP]
    // 0x5d4a34: r0 = _scrollController()
    //     0x5d4a34: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d4a38: str             x0, [SP]
    // 0x5d4a3c: r0 = offset()
    //     0x5d4a3c: bl              #0x5d4be0  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::offset
    // 0x5d4a40: mov             v1.16b, v0.16b
    // 0x5d4a44: ldur            d0, [fp, #-0x20]
    // 0x5d4a48: fadd            d2, d0, d1
    // 0x5d4a4c: stur            d2, [fp, #-0x28]
    // 0x5d4a50: ldr             x16, [fp, #0x18]
    // 0x5d4a54: str             x16, [SP]
    // 0x5d4a58: r0 = _scrollController()
    //     0x5d4a58: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d4a5c: str             x0, [SP]
    // 0x5d4a60: r0 = position()
    //     0x5d4a60: bl              #0x5d4ba0  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::position
    // 0x5d4a64: LoadField: r1 = r0->field_33
    //     0x5d4a64: ldur            w1, [x0, #0x33]
    // 0x5d4a68: DecompressPointer r1
    //     0x5d4a68: add             x1, x1, HEAP, lsl #32
    // 0x5d4a6c: stur            x1, [fp, #-0x10]
    // 0x5d4a70: cmp             w1, NULL
    // 0x5d4a74: b.eq            #0x5d4b84
    // 0x5d4a78: ldr             x16, [fp, #0x18]
    // 0x5d4a7c: str             x16, [SP]
    // 0x5d4a80: r0 = _scrollController()
    //     0x5d4a80: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d4a84: LoadField: r1 = r0->field_3b
    //     0x5d4a84: ldur            w1, [x0, #0x3b]
    // 0x5d4a88: DecompressPointer r1
    //     0x5d4a88: add             x1, x1, HEAP, lsl #32
    // 0x5d4a8c: str             x1, [SP]
    // 0x5d4a90: r0 = single()
    //     0x5d4a90: bl              #0x5a9fe4  ; [dart:core] _GrowableList::single
    // 0x5d4a94: LoadField: r1 = r0->field_37
    //     0x5d4a94: ldur            w1, [x0, #0x37]
    // 0x5d4a98: DecompressPointer r1
    //     0x5d4a98: add             x1, x1, HEAP, lsl #32
    // 0x5d4a9c: cmp             w1, NULL
    // 0x5d4aa0: b.eq            #0x5d4b88
    // 0x5d4aa4: ldur            x0, [fp, #-0x10]
    // 0x5d4aa8: LoadField: d0 = r0->field_7
    //     0x5d4aa8: ldur            d0, [x0, #7]
    // 0x5d4aac: ldur            d1, [fp, #-0x28]
    // 0x5d4ab0: fcmp            d1, d0
    // 0x5d4ab4: b.vs            #0x5d4abc
    // 0x5d4ab8: b.lt            #0x5d4ad8
    // 0x5d4abc: LoadField: d0 = r1->field_7
    //     0x5d4abc: ldur            d0, [x1, #7]
    // 0x5d4ac0: fcmp            d1, d0
    // 0x5d4ac4: b.vs            #0x5d4acc
    // 0x5d4ac8: b.gt            #0x5d4ad8
    // 0x5d4acc: fcmp            d1, d1
    // 0x5d4ad0: b.vs            #0x5d4ad8
    // 0x5d4ad4: mov             v0.16b, v1.16b
    // 0x5d4ad8: stur            d0, [fp, #-0x20]
    // 0x5d4adc: ldr             x16, [fp, #0x18]
    // 0x5d4ae0: str             x16, [SP]
    // 0x5d4ae4: r0 = _scrollController()
    //     0x5d4ae4: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d4ae8: LoadField: r1 = r0->field_3b
    //     0x5d4ae8: ldur            w1, [x0, #0x3b]
    // 0x5d4aec: DecompressPointer r1
    //     0x5d4aec: add             x1, x1, HEAP, lsl #32
    // 0x5d4af0: str             x1, [SP]
    // 0x5d4af4: r0 = single()
    //     0x5d4af4: bl              #0x5a9fe4  ; [dart:core] _GrowableList::single
    // 0x5d4af8: LoadField: r1 = r0->field_43
    //     0x5d4af8: ldur            w1, [x0, #0x43]
    // 0x5d4afc: DecompressPointer r1
    //     0x5d4afc: add             x1, x1, HEAP, lsl #32
    // 0x5d4b00: cmp             w1, NULL
    // 0x5d4b04: b.eq            #0x5d4b8c
    // 0x5d4b08: LoadField: d0 = r1->field_7
    //     0x5d4b08: ldur            d0, [x1, #7]
    // 0x5d4b0c: ldur            d1, [fp, #-0x20]
    // 0x5d4b10: fsub            d2, d0, d1
    // 0x5d4b14: r0 = inline_Allocate_Double()
    //     0x5d4b14: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x5d4b18: add             x0, x0, #0x10
    //     0x5d4b1c: cmp             x1, x0
    //     0x5d4b20: b.ls            #0x5d4b90
    //     0x5d4b24: str             x0, [THR, #0x50]  ; THR::top
    //     0x5d4b28: sub             x0, x0, #0xf
    //     0x5d4b2c: movz            x1, #0xd148
    //     0x5d4b30: movk            x1, #0x3, lsl #16
    //     0x5d4b34: stur            x1, [x0, #-1]
    // 0x5d4b38: StoreField: r0->field_7 = d2
    //     0x5d4b38: stur            d2, [x0, #7]
    // 0x5d4b3c: ldur            x16, [fp, #-8]
    // 0x5d4b40: stp             x0, x16, [SP]
    // 0x5d4b44: r0 = *()
    //     0x5d4b44: bl              #0x5037c8  ; [dart:ui] Offset::*
    // 0x5d4b48: ldr             x16, [fp, #0x10]
    // 0x5d4b4c: stp             x0, x16, [SP]
    // 0x5d4b50: r0 = shift()
    //     0x5d4b50: bl              #0x5cbf00  ; [dart:ui] Rect::shift
    // 0x5d4b54: stur            x0, [fp, #-8]
    // 0x5d4b58: r0 = RevealedOffset()
    //     0x5d4b58: bl              #0x5d4cc4  ; AllocateRevealedOffsetStub -> RevealedOffset (size=0x14)
    // 0x5d4b5c: ldur            d0, [fp, #-0x20]
    // 0x5d4b60: StoreField: r0->field_7 = d0
    //     0x5d4b60: stur            d0, [x0, #7]
    // 0x5d4b64: ldur            x1, [fp, #-8]
    // 0x5d4b68: StoreField: r0->field_f = r1
    //     0x5d4b68: stur            w1, [x0, #0xf]
    // 0x5d4b6c: LeaveFrame
    //     0x5d4b6c: mov             SP, fp
    //     0x5d4b70: ldp             fp, lr, [SP], #0x10
    // 0x5d4b74: ret
    //     0x5d4b74: ret             
    // 0x5d4b78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4b78: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4b7c: b               #0x5d4768
    // 0x5d4b80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4b80: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4b84: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4b84: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4b88: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4b88: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4b8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4b8c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d4b90: stp             q1, q2, [SP, #-0x20]!
    // 0x5d4b94: r0 = AllocateDouble()
    //     0x5d4b94: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d4b98: ldp             q1, q2, [SP], #0x20
    // 0x5d4b9c: b               #0x5d4b38
  }
  get _ _isMultiline(/* No info */) {
    // ** addr: 0x5d4c84, size: 0x40
    // 0x5d4c84: EnterFrame
    //     0x5d4c84: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4c88: mov             fp, SP
    // 0x5d4c8c: ldr             x1, [fp, #0x10]
    // 0x5d4c90: LoadField: r2 = r1->field_b
    //     0x5d4c90: ldur            w2, [x1, #0xb]
    // 0x5d4c94: DecompressPointer r2
    //     0x5d4c94: add             x2, x2, HEAP, lsl #32
    // 0x5d4c98: cmp             w2, NULL
    // 0x5d4c9c: b.eq            #0x5d4cc0
    // 0x5d4ca0: LoadField: r1 = r2->field_73
    //     0x5d4ca0: ldur            x1, [x2, #0x73]
    // 0x5d4ca4: cmp             x1, #1
    // 0x5d4ca8: r16 = true
    //     0x5d4ca8: add             x16, NULL, #0x20  ; true
    // 0x5d4cac: r17 = false
    //     0x5d4cac: add             x17, NULL, #0x30  ; false
    // 0x5d4cb0: csel            x0, x16, x17, ne
    // 0x5d4cb4: LeaveFrame
    //     0x5d4cb4: mov             SP, fp
    //     0x5d4cb8: ldp             fp, lr, [SP], #0x10
    // 0x5d4cbc: ret
    //     0x5d4cbc: ret             
    // 0x5d4cc0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4cc0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  set _ _value=(/* No info */) {
    // ** addr: 0x5d4da0, size: 0x5c
    // 0x5d4da0: EnterFrame
    //     0x5d4da0: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4da4: mov             fp, SP
    // 0x5d4da8: AllocStack(0x10)
    //     0x5d4da8: sub             SP, SP, #0x10
    // 0x5d4dac: CheckStackOverflow
    //     0x5d4dac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4db0: cmp             SP, x16
    //     0x5d4db4: b.ls            #0x5d4df0
    // 0x5d4db8: ldr             x0, [fp, #0x18]
    // 0x5d4dbc: LoadField: r1 = r0->field_b
    //     0x5d4dbc: ldur            w1, [x0, #0xb]
    // 0x5d4dc0: DecompressPointer r1
    //     0x5d4dc0: add             x1, x1, HEAP, lsl #32
    // 0x5d4dc4: cmp             w1, NULL
    // 0x5d4dc8: b.eq            #0x5d4df8
    // 0x5d4dcc: LoadField: r0 = r1->field_b
    //     0x5d4dcc: ldur            w0, [x1, #0xb]
    // 0x5d4dd0: DecompressPointer r0
    //     0x5d4dd0: add             x0, x0, HEAP, lsl #32
    // 0x5d4dd4: ldr             x16, [fp, #0x10]
    // 0x5d4dd8: stp             x16, x0, [SP]
    // 0x5d4ddc: r0 = value=()
    //     0x5d4ddc: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x5d4de0: r0 = Null
    //     0x5d4de0: mov             x0, NULL
    // 0x5d4de4: LeaveFrame
    //     0x5d4de4: mov             SP, fp
    //     0x5d4de8: ldp             fp, lr, [SP], #0x10
    // 0x5d4dec: ret
    //     0x5d4dec: ret             
    // 0x5d4df0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4df0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4df4: b               #0x5d4db8
    // 0x5d4df8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4df8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ beginBatchEdit(/* No info */) {
    // ** addr: 0x5d4dfc, size: 0x18
    // 0x5d4dfc: ldr             x1, [SP]
    // 0x5d4e00: LoadField: r2 = r1->field_87
    //     0x5d4e00: ldur            x2, [x1, #0x87]
    // 0x5d4e04: add             x3, x2, #1
    // 0x5d4e08: StoreField: r1->field_87 = r3
    //     0x5d4e08: stur            x3, [x1, #0x87]
    // 0x5d4e0c: r0 = Null
    //     0x5d4e0c: mov             x0, NULL
    // 0x5d4e10: ret
    //     0x5d4e10: ret             
  }
  get _ spellCheckEnabled(/* No info */) {
    // ** addr: 0x5d4e14, size: 0x38
    // 0x5d4e14: EnterFrame
    //     0x5d4e14: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4e18: mov             fp, SP
    // 0x5d4e1c: ldr             x1, [fp, #0x10]
    // 0x5d4e20: LoadField: r2 = r1->field_5f
    //     0x5d4e20: ldur            w2, [x1, #0x5f]
    // 0x5d4e24: DecompressPointer r2
    //     0x5d4e24: add             x2, x2, HEAP, lsl #32
    // 0x5d4e28: r16 = Sentinel
    //     0x5d4e28: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d4e2c: cmp             w2, w16
    // 0x5d4e30: b.eq            #0x5d4e44
    // 0x5d4e34: r0 = false
    //     0x5d4e34: add             x0, NULL, #0x30  ; false
    // 0x5d4e38: LeaveFrame
    //     0x5d4e38: mov             SP, fp
    //     0x5d4e3c: ldp             fp, lr, [SP], #0x10
    // 0x5d4e40: ret
    //     0x5d4e40: ret             
    // 0x5d4e44: r9 = _spellCheckConfiguration
    //     0x5d4e44: ldr             x9, [PP, #0x63c0]  ; [pp+0x63c0] Field <EditableTextState._spellCheckConfiguration@244183791>: late (offset: 0x60)
    // 0x5d4e48: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5d4e48: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] TextEditingValue <anonymous closure>(dynamic, TextEditingValue, TextInputFormatter) {
    // ** addr: 0x5d4e4c, size: 0x8c
    // 0x5d4e4c: EnterFrame
    //     0x5d4e4c: stp             fp, lr, [SP, #-0x10]!
    //     0x5d4e50: mov             fp, SP
    // 0x5d4e54: AllocStack(0x18)
    //     0x5d4e54: sub             SP, SP, #0x18
    // 0x5d4e58: SetupParameters()
    //     0x5d4e58: ldr             x0, [fp, #0x20]
    //     0x5d4e5c: ldur            w1, [x0, #0x17]
    //     0x5d4e60: add             x1, x1, HEAP, lsl #32
    // 0x5d4e64: CheckStackOverflow
    //     0x5d4e64: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d4e68: cmp             SP, x16
    //     0x5d4e6c: b.ls            #0x5d4ecc
    // 0x5d4e70: LoadField: r0 = r1->field_f
    //     0x5d4e70: ldur            w0, [x1, #0xf]
    // 0x5d4e74: DecompressPointer r0
    //     0x5d4e74: add             x0, x0, HEAP, lsl #32
    // 0x5d4e78: LoadField: r1 = r0->field_b
    //     0x5d4e78: ldur            w1, [x0, #0xb]
    // 0x5d4e7c: DecompressPointer r1
    //     0x5d4e7c: add             x1, x1, HEAP, lsl #32
    // 0x5d4e80: cmp             w1, NULL
    // 0x5d4e84: b.eq            #0x5d4ed4
    // 0x5d4e88: LoadField: r0 = r1->field_b
    //     0x5d4e88: ldur            w0, [x1, #0xb]
    // 0x5d4e8c: DecompressPointer r0
    //     0x5d4e8c: add             x0, x0, HEAP, lsl #32
    // 0x5d4e90: LoadField: r1 = r0->field_27
    //     0x5d4e90: ldur            w1, [x0, #0x27]
    // 0x5d4e94: DecompressPointer r1
    //     0x5d4e94: add             x1, x1, HEAP, lsl #32
    // 0x5d4e98: ldr             x0, [fp, #0x10]
    // 0x5d4e9c: r2 = LoadClassIdInstr(r0)
    //     0x5d4e9c: ldur            x2, [x0, #-1]
    //     0x5d4ea0: ubfx            x2, x2, #0xc, #0x14
    // 0x5d4ea4: stp             x1, x0, [SP, #8]
    // 0x5d4ea8: ldr             x16, [fp, #0x18]
    // 0x5d4eac: str             x16, [SP]
    // 0x5d4eb0: mov             x0, x2
    // 0x5d4eb4: r0 = GDT[cid_x0 + 0x1a5]()
    //     0x5d4eb4: add             lr, x0, #0x1a5
    //     0x5d4eb8: ldr             lr, [x21, lr, lsl #3]
    //     0x5d4ebc: blr             lr
    // 0x5d4ec0: LeaveFrame
    //     0x5d4ec0: mov             SP, fp
    //     0x5d4ec4: ldp             fp, lr, [SP], #0x10
    // 0x5d4ec8: ret
    //     0x5d4ec8: ret             
    // 0x5d4ecc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d4ecc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d4ed0: b               #0x5d4e70
    // 0x5d4ed4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d4ed4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _flagInternalFocus(/* No info */) {
    // ** addr: 0x5d64a4, size: 0x90
    // 0x5d64a4: EnterFrame
    //     0x5d64a4: stp             fp, lr, [SP, #-0x10]!
    //     0x5d64a8: mov             fp, SP
    // 0x5d64ac: AllocStack(0x18)
    //     0x5d64ac: sub             SP, SP, #0x18
    // 0x5d64b0: CheckStackOverflow
    //     0x5d64b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d64b4: cmp             SP, x16
    //     0x5d64b8: b.ls            #0x5d6524
    // 0x5d64bc: r0 = LoadStaticField(0xc34)
    //     0x5d64bc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5d64c0: ldr             x0, [x0, #0x1868]
    // 0x5d64c4: cmp             w0, NULL
    // 0x5d64c8: b.eq            #0x5d652c
    // 0x5d64cc: LoadField: r1 = r0->field_d7
    //     0x5d64cc: ldur            w1, [x0, #0xd7]
    // 0x5d64d0: DecompressPointer r1
    //     0x5d64d0: add             x1, x1, HEAP, lsl #32
    // 0x5d64d4: cmp             w1, NULL
    // 0x5d64d8: b.eq            #0x5d6530
    // 0x5d64dc: LoadField: r0 = r1->field_1b
    //     0x5d64dc: ldur            w0, [x1, #0x1b]
    // 0x5d64e0: DecompressPointer r0
    //     0x5d64e0: add             x0, x0, HEAP, lsl #32
    // 0x5d64e4: stur            x0, [fp, #-8]
    // 0x5d64e8: r1 = 1
    //     0x5d64e8: movz            x1, #0x1
    // 0x5d64ec: r0 = AllocateContext()
    //     0x5d64ec: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d64f0: mov             x1, x0
    // 0x5d64f4: ldr             x0, [fp, #0x10]
    // 0x5d64f8: StoreField: r1->field_f = r0
    //     0x5d64f8: stur            w0, [x1, #0xf]
    // 0x5d64fc: mov             x2, x1
    // 0x5d6500: r1 = Function '_unflagInternalFocus@244183791':.
    //     0x5d6500: ldr             x1, [PP, #0x6470]  ; [pp+0x6470] AnonymousClosure: (0x5d6534), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x5d657c)
    // 0x5d6504: r0 = AllocateClosure()
    //     0x5d6504: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d6508: ldur            x16, [fp, #-8]
    // 0x5d650c: stp             x0, x16, [SP]
    // 0x5d6510: r0 = addListener()
    //     0x5d6510: bl              #0x85c1b4  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0x5d6514: r0 = Null
    //     0x5d6514: mov             x0, NULL
    // 0x5d6518: LeaveFrame
    //     0x5d6518: mov             SP, fp
    //     0x5d651c: ldp             fp, lr, [SP], #0x10
    // 0x5d6520: ret
    //     0x5d6520: ret             
    // 0x5d6524: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d6524: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d6528: b               #0x5d64bc
    // 0x5d652c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d652c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d6530: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d6530: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _unflagInternalFocus(dynamic) {
    // ** addr: 0x5d6534, size: 0x48
    // 0x5d6534: EnterFrame
    //     0x5d6534: stp             fp, lr, [SP, #-0x10]!
    //     0x5d6538: mov             fp, SP
    // 0x5d653c: AllocStack(0x8)
    //     0x5d653c: sub             SP, SP, #8
    // 0x5d6540: SetupParameters()
    //     0x5d6540: ldr             x0, [fp, #0x10]
    //     0x5d6544: ldur            w1, [x0, #0x17]
    //     0x5d6548: add             x1, x1, HEAP, lsl #32
    // 0x5d654c: CheckStackOverflow
    //     0x5d654c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d6550: cmp             SP, x16
    //     0x5d6554: b.ls            #0x5d6574
    // 0x5d6558: LoadField: r0 = r1->field_f
    //     0x5d6558: ldur            w0, [x1, #0xf]
    // 0x5d655c: DecompressPointer r0
    //     0x5d655c: add             x0, x0, HEAP, lsl #32
    // 0x5d6560: str             x0, [SP]
    // 0x5d6564: r0 = _unflagInternalFocus()
    //     0x5d6564: bl              #0x5d657c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus
    // 0x5d6568: LeaveFrame
    //     0x5d6568: mov             SP, fp
    //     0x5d656c: ldp             fp, lr, [SP], #0x10
    // 0x5d6570: ret
    //     0x5d6570: ret             
    // 0x5d6574: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d6574: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d6578: b               #0x5d6558
  }
  _ _unflagInternalFocus(/* No info */) {
    // ** addr: 0x5d657c, size: 0x90
    // 0x5d657c: EnterFrame
    //     0x5d657c: stp             fp, lr, [SP, #-0x10]!
    //     0x5d6580: mov             fp, SP
    // 0x5d6584: AllocStack(0x18)
    //     0x5d6584: sub             SP, SP, #0x18
    // 0x5d6588: CheckStackOverflow
    //     0x5d6588: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d658c: cmp             SP, x16
    //     0x5d6590: b.ls            #0x5d65fc
    // 0x5d6594: r0 = LoadStaticField(0xc34)
    //     0x5d6594: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5d6598: ldr             x0, [x0, #0x1868]
    // 0x5d659c: cmp             w0, NULL
    // 0x5d65a0: b.eq            #0x5d6604
    // 0x5d65a4: LoadField: r1 = r0->field_d7
    //     0x5d65a4: ldur            w1, [x0, #0xd7]
    // 0x5d65a8: DecompressPointer r1
    //     0x5d65a8: add             x1, x1, HEAP, lsl #32
    // 0x5d65ac: cmp             w1, NULL
    // 0x5d65b0: b.eq            #0x5d6608
    // 0x5d65b4: LoadField: r0 = r1->field_1b
    //     0x5d65b4: ldur            w0, [x1, #0x1b]
    // 0x5d65b8: DecompressPointer r0
    //     0x5d65b8: add             x0, x0, HEAP, lsl #32
    // 0x5d65bc: stur            x0, [fp, #-8]
    // 0x5d65c0: r1 = 1
    //     0x5d65c0: movz            x1, #0x1
    // 0x5d65c4: r0 = AllocateContext()
    //     0x5d65c4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d65c8: mov             x1, x0
    // 0x5d65cc: ldr             x0, [fp, #0x10]
    // 0x5d65d0: StoreField: r1->field_f = r0
    //     0x5d65d0: stur            w0, [x1, #0xf]
    // 0x5d65d4: mov             x2, x1
    // 0x5d65d8: r1 = Function '_unflagInternalFocus@244183791':.
    //     0x5d65d8: ldr             x1, [PP, #0x6470]  ; [pp+0x6470] AnonymousClosure: (0x5d6534), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x5d657c)
    // 0x5d65dc: r0 = AllocateClosure()
    //     0x5d65dc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d65e0: ldur            x16, [fp, #-8]
    // 0x5d65e4: stp             x0, x16, [SP]
    // 0x5d65e8: r0 = removeListener()
    //     0x5d65e8: bl              #0x86b820  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x5d65ec: r0 = Null
    //     0x5d65ec: mov             x0, NULL
    // 0x5d65f0: LeaveFrame
    //     0x5d65f0: mov             SP, fp
    //     0x5d65f4: ldp             fp, lr, [SP], #0x10
    // 0x5d65f8: ret
    //     0x5d65f8: ret             
    // 0x5d65fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d65fc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d6600: b               #0x5d6594
    // 0x5d6604: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d6604: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d6608: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d6608: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _scheduleShowCaretOnScreen(/* No info */) {
    // ** addr: 0x5d660c, size: 0x164
    // 0x5d660c: EnterFrame
    //     0x5d660c: stp             fp, lr, [SP, #-0x10]!
    //     0x5d6610: mov             fp, SP
    // 0x5d6614: AllocStack(0x20)
    //     0x5d6614: sub             SP, SP, #0x20
    // 0x5d6618: CheckStackOverflow
    //     0x5d6618: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d661c: cmp             SP, x16
    //     0x5d6620: b.ls            #0x5d6760
    // 0x5d6624: r1 = 2
    //     0x5d6624: movz            x1, #0x2
    // 0x5d6628: r0 = AllocateContext()
    //     0x5d6628: bl              #0xc5def4  ; AllocateContextStub
    // 0x5d662c: mov             x1, x0
    // 0x5d6630: ldr             x0, [fp, #0x18]
    // 0x5d6634: StoreField: r1->field_f = r0
    //     0x5d6634: stur            w0, [x1, #0xf]
    // 0x5d6638: ldr             x2, [fp, #0x10]
    // 0x5d663c: StoreField: r1->field_13 = r2
    //     0x5d663c: stur            w2, [x1, #0x13]
    // 0x5d6640: LoadField: r2 = r0->field_93
    //     0x5d6640: ldur            w2, [x0, #0x93]
    // 0x5d6644: DecompressPointer r2
    //     0x5d6644: add             x2, x2, HEAP, lsl #32
    // 0x5d6648: tbnz            w2, #4, #0x5d665c
    // 0x5d664c: r0 = Null
    //     0x5d664c: mov             x0, NULL
    // 0x5d6650: LeaveFrame
    //     0x5d6650: mov             SP, fp
    //     0x5d6654: ldp             fp, lr, [SP], #0x10
    // 0x5d6658: ret
    //     0x5d6658: ret             
    // 0x5d665c: r2 = true
    //     0x5d665c: add             x2, NULL, #0x20  ; true
    // 0x5d6660: StoreField: r0->field_93 = r2
    //     0x5d6660: stur            w2, [x0, #0x93]
    // 0x5d6664: r0 = LoadStaticField(0x1474)
    //     0x5d6664: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x5d6668: ldr             x0, [x0, #0x28e8]
    // 0x5d666c: cmp             w0, NULL
    // 0x5d6670: b.eq            #0x5d6768
    // 0x5d6674: LoadField: r3 = r0->field_53
    //     0x5d6674: ldur            w3, [x0, #0x53]
    // 0x5d6678: DecompressPointer r3
    //     0x5d6678: add             x3, x3, HEAP, lsl #32
    // 0x5d667c: stur            x3, [fp, #-0x10]
    // 0x5d6680: LoadField: r0 = r3->field_7
    //     0x5d6680: ldur            w0, [x3, #7]
    // 0x5d6684: DecompressPointer r0
    //     0x5d6684: add             x0, x0, HEAP, lsl #32
    // 0x5d6688: mov             x2, x1
    // 0x5d668c: stur            x0, [fp, #-8]
    // 0x5d6690: r1 = Function '<anonymous closure>':.
    //     0x5d6690: ldr             x1, [PP, #0x64e8]  ; [pp+0x64e8] AnonymousClosure: (0x5d6770), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen (0x5d660c)
    // 0x5d6694: r0 = AllocateClosure()
    //     0x5d6694: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5d6698: ldur            x2, [fp, #-8]
    // 0x5d669c: mov             x3, x0
    // 0x5d66a0: r1 = Null
    //     0x5d66a0: mov             x1, NULL
    // 0x5d66a4: stur            x3, [fp, #-8]
    // 0x5d66a8: cmp             w2, NULL
    // 0x5d66ac: b.eq            #0x5d66c8
    // 0x5d66b0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x5d66b0: ldur            w4, [x2, #0x17]
    // 0x5d66b4: DecompressPointer r4
    //     0x5d66b4: add             x4, x4, HEAP, lsl #32
    // 0x5d66b8: r8 = X0
    //     0x5d66b8: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x5d66bc: LoadField: r9 = r4->field_7
    //     0x5d66bc: ldur            x9, [x4, #7]
    // 0x5d66c0: r3 = Null
    //     0x5d66c0: ldr             x3, [PP, #0x64f0]  ; [pp+0x64f0] Null
    // 0x5d66c4: blr             x9
    // 0x5d66c8: ldur            x0, [fp, #-0x10]
    // 0x5d66cc: LoadField: r1 = r0->field_b
    //     0x5d66cc: ldur            w1, [x0, #0xb]
    // 0x5d66d0: DecompressPointer r1
    //     0x5d66d0: add             x1, x1, HEAP, lsl #32
    // 0x5d66d4: stur            x1, [fp, #-0x18]
    // 0x5d66d8: LoadField: r2 = r0->field_f
    //     0x5d66d8: ldur            w2, [x0, #0xf]
    // 0x5d66dc: DecompressPointer r2
    //     0x5d66dc: add             x2, x2, HEAP, lsl #32
    // 0x5d66e0: LoadField: r3 = r2->field_b
    //     0x5d66e0: ldur            w3, [x2, #0xb]
    // 0x5d66e4: DecompressPointer r3
    //     0x5d66e4: add             x3, x3, HEAP, lsl #32
    // 0x5d66e8: cmp             w1, w3
    // 0x5d66ec: b.ne            #0x5d66f8
    // 0x5d66f0: str             x0, [SP]
    // 0x5d66f4: r0 = _growToNextCapacity()
    //     0x5d66f4: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5d66f8: ldur            x2, [fp, #-0x10]
    // 0x5d66fc: ldur            x3, [fp, #-0x18]
    // 0x5d6700: r4 = LoadInt32Instr(r3)
    //     0x5d6700: sbfx            x4, x3, #1, #0x1f
    // 0x5d6704: add             x0, x4, #1
    // 0x5d6708: lsl             x3, x0, #1
    // 0x5d670c: StoreField: r2->field_b = r3
    //     0x5d670c: stur            w3, [x2, #0xb]
    // 0x5d6710: mov             x1, x4
    // 0x5d6714: cmp             x1, x0
    // 0x5d6718: b.hs            #0x5d676c
    // 0x5d671c: LoadField: r1 = r2->field_f
    //     0x5d671c: ldur            w1, [x2, #0xf]
    // 0x5d6720: DecompressPointer r1
    //     0x5d6720: add             x1, x1, HEAP, lsl #32
    // 0x5d6724: ldur            x0, [fp, #-8]
    // 0x5d6728: ArrayStore: r1[r4] = r0  ; List_4
    //     0x5d6728: add             x25, x1, x4, lsl #2
    //     0x5d672c: add             x25, x25, #0xf
    //     0x5d6730: str             w0, [x25]
    //     0x5d6734: tbz             w0, #0, #0x5d6750
    //     0x5d6738: ldurb           w16, [x1, #-1]
    //     0x5d673c: ldurb           w17, [x0, #-1]
    //     0x5d6740: and             x16, x17, x16, lsr #2
    //     0x5d6744: tst             x16, HEAP, lsr #32
    //     0x5d6748: b.eq            #0x5d6750
    //     0x5d674c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5d6750: r0 = Null
    //     0x5d6750: mov             x0, NULL
    // 0x5d6754: LeaveFrame
    //     0x5d6754: mov             SP, fp
    //     0x5d6758: ldp             fp, lr, [SP], #0x10
    // 0x5d675c: ret
    //     0x5d675c: ret             
    // 0x5d6760: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d6760: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d6764: b               #0x5d6624
    // 0x5d6768: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d6768: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d676c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5d676c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x5d6770, size: 0x50c
    // 0x5d6770: EnterFrame
    //     0x5d6770: stp             fp, lr, [SP, #-0x10]!
    //     0x5d6774: mov             fp, SP
    // 0x5d6778: AllocStack(0x70)
    //     0x5d6778: sub             SP, SP, #0x70
    // 0x5d677c: SetupParameters()
    //     0x5d677c: add             x0, NULL, #0x30  ; false
    //     0x5d6780: ldr             x1, [fp, #0x18]
    //     0x5d6784: ldur            w2, [x1, #0x17]
    //     0x5d6788: add             x2, x2, HEAP, lsl #32
    //     0x5d678c: stur            x2, [fp, #-8]
    // 0x5d677c: r0 = false
    // 0x5d6790: CheckStackOverflow
    //     0x5d6790: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d6794: cmp             SP, x16
    //     0x5d6798: b.ls            #0x5d6c44
    // 0x5d679c: LoadField: r1 = r2->field_f
    //     0x5d679c: ldur            w1, [x2, #0xf]
    // 0x5d67a0: DecompressPointer r1
    //     0x5d67a0: add             x1, x1, HEAP, lsl #32
    // 0x5d67a4: StoreField: r1->field_93 = r0
    //     0x5d67a4: stur            w0, [x1, #0x93]
    // 0x5d67a8: LoadField: r0 = r1->field_2f
    //     0x5d67a8: ldur            w0, [x1, #0x2f]
    // 0x5d67ac: DecompressPointer r0
    //     0x5d67ac: add             x0, x0, HEAP, lsl #32
    // 0x5d67b0: str             x0, [SP]
    // 0x5d67b4: r0 = _currentElement()
    //     0x5d67b4: bl              #0x5b02fc  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x5d67b8: cmp             w0, NULL
    // 0x5d67bc: b.ne            #0x5d67c8
    // 0x5d67c0: r3 = Null
    //     0x5d67c0: mov             x3, NULL
    // 0x5d67c4: b               #0x5d67d4
    // 0x5d67c8: str             x0, [SP]
    // 0x5d67cc: r0 = findRenderObject()
    //     0x5d67cc: bl              #0x5c8648  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x5d67d0: mov             x3, x0
    // 0x5d67d4: mov             x0, x3
    // 0x5d67d8: stur            x3, [fp, #-0x10]
    // 0x5d67dc: r2 = Null
    //     0x5d67dc: mov             x2, NULL
    // 0x5d67e0: r1 = Null
    //     0x5d67e0: mov             x1, NULL
    // 0x5d67e4: r4 = LoadClassIdInstr(r0)
    //     0x5d67e4: ldur            x4, [x0, #-1]
    //     0x5d67e8: ubfx            x4, x4, #0xc, #0x14
    // 0x5d67ec: cmp             x4, #0x811
    // 0x5d67f0: b.eq            #0x5d6800
    // 0x5d67f4: r8 = RenderEditable?
    //     0x5d67f4: ldr             x8, [PP, #0x5798]  ; [pp+0x5798] Type: RenderEditable?
    // 0x5d67f8: r3 = Null
    //     0x5d67f8: ldr             x3, [PP, #0x6500]  ; [pp+0x6500] Null
    // 0x5d67fc: r0 = DefaultNullableTypeTest()
    //     0x5d67fc: bl              #0xc5cf30  ; DefaultNullableTypeTestStub
    // 0x5d6800: ldur            x0, [fp, #-0x10]
    // 0x5d6804: cmp             w0, NULL
    // 0x5d6808: b.eq            #0x5d6c34
    // 0x5d680c: LoadField: r1 = r0->field_e3
    //     0x5d680c: ldur            w1, [x0, #0xe3]
    // 0x5d6810: DecompressPointer r1
    //     0x5d6810: add             x1, x1, HEAP, lsl #32
    // 0x5d6814: LoadField: r2 = r1->field_7
    //     0x5d6814: ldur            x2, [x1, #7]
    // 0x5d6818: tbnz            x2, #0x3f, #0x5d6c34
    // 0x5d681c: LoadField: r2 = r1->field_f
    //     0x5d681c: ldur            x2, [x1, #0xf]
    // 0x5d6820: tbnz            x2, #0x3f, #0x5d6c34
    // 0x5d6824: ldur            x1, [fp, #-8]
    // 0x5d6828: LoadField: r2 = r1->field_f
    //     0x5d6828: ldur            w2, [x1, #0xf]
    // 0x5d682c: DecompressPointer r2
    //     0x5d682c: add             x2, x2, HEAP, lsl #32
    // 0x5d6830: str             x2, [SP]
    // 0x5d6834: r0 = _scrollController()
    //     0x5d6834: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d6838: str             x0, [SP]
    // 0x5d683c: r0 = hasClients()
    //     0x5d683c: bl              #0x5d7204  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::hasClients
    // 0x5d6840: tbnz            w0, #4, #0x5d6c34
    // 0x5d6844: ldur            x1, [fp, #-8]
    // 0x5d6848: ldur            x0, [fp, #-0x10]
    // 0x5d684c: LoadField: r2 = r0->field_b7
    //     0x5d684c: ldur            w2, [x0, #0xb7]
    // 0x5d6850: DecompressPointer r2
    //     0x5d6850: add             x2, x2, HEAP, lsl #32
    // 0x5d6854: str             x2, [SP]
    // 0x5d6858: r0 = preferredLineHeight()
    //     0x5d6858: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x5d685c: ldur            x1, [fp, #-8]
    // 0x5d6860: stur            d0, [fp, #-0x40]
    // 0x5d6864: LoadField: r0 = r1->field_f
    //     0x5d6864: ldur            w0, [x1, #0xf]
    // 0x5d6868: DecompressPointer r0
    //     0x5d6868: add             x0, x0, HEAP, lsl #32
    // 0x5d686c: LoadField: r2 = r0->field_b
    //     0x5d686c: ldur            w2, [x0, #0xb]
    // 0x5d6870: DecompressPointer r2
    //     0x5d6870: add             x2, x2, HEAP, lsl #32
    // 0x5d6874: cmp             w2, NULL
    // 0x5d6878: b.eq            #0x5d6c4c
    // 0x5d687c: r2 = Instance_EdgeInsets
    //     0x5d687c: ldr             x2, [PP, #0x6510]  ; [pp+0x6510] Obj!EdgeInsets@c2db31
    // 0x5d6880: LoadField: d1 = r2->field_1f
    //     0x5d6880: ldur            d1, [x2, #0x1f]
    // 0x5d6884: stur            d1, [fp, #-0x38]
    // 0x5d6888: LoadField: r2 = r0->field_3f
    //     0x5d6888: ldur            w2, [x0, #0x3f]
    // 0x5d688c: DecompressPointer r2
    //     0x5d688c: add             x2, x2, HEAP, lsl #32
    // 0x5d6890: cmp             w2, NULL
    // 0x5d6894: b.eq            #0x5d69e0
    // 0x5d6898: LoadField: r0 = r2->field_f
    //     0x5d6898: ldur            w0, [x2, #0xf]
    // 0x5d689c: DecompressPointer r0
    //     0x5d689c: add             x0, x0, HEAP, lsl #32
    // 0x5d68a0: cmp             w0, NULL
    // 0x5d68a4: b.eq            #0x5d69e0
    // 0x5d68a8: r2 = LoadClassIdInstr(r0)
    //     0x5d68a8: ldur            x2, [x0, #-1]
    //     0x5d68ac: ubfx            x2, x2, #0xc, #0x14
    // 0x5d68b0: str             x0, [SP, #8]
    // 0x5d68b4: str             d0, [SP]
    // 0x5d68b8: mov             x0, x2
    // 0x5d68bc: r0 = GDT[cid_x0 + 0x1]()
    //     0x5d68bc: add             lr, x0, #1
    //     0x5d68c0: ldr             lr, [x21, lr, lsl #3]
    //     0x5d68c4: blr             lr
    // 0x5d68c8: LoadField: d0 = r0->field_f
    //     0x5d68c8: ldur            d0, [x0, #0xf]
    // 0x5d68cc: stur            d0, [fp, #-0x50]
    // 0x5d68d0: d1 = 48.000000
    //     0x5d68d0: ldr             d1, [PP, #0x6518]  ; [pp+0x6518] IMM: double(48) from 0x4048000000000000
    // 0x5d68d4: fcmp            d0, d1
    // 0x5d68d8: b.vs            #0x5d68ec
    // 0x5d68dc: b.le            #0x5d68ec
    // 0x5d68e0: mov             v4.16b, v0.16b
    // 0x5d68e4: d2 = 0.000000
    //     0x5d68e4: eor             v2.16b, v2.16b, v2.16b
    // 0x5d68e8: b               #0x5d6924
    // 0x5d68ec: fcmp            d0, d1
    // 0x5d68f0: b.vs            #0x5d6904
    // 0x5d68f4: b.ge            #0x5d6904
    // 0x5d68f8: d4 = 48.000000
    //     0x5d68f8: ldr             d4, [PP, #0x6518]  ; [pp+0x6518] IMM: double(48) from 0x4048000000000000
    // 0x5d68fc: d2 = 0.000000
    //     0x5d68fc: eor             v2.16b, v2.16b, v2.16b
    // 0x5d6900: b               #0x5d6924
    // 0x5d6904: d2 = 0.000000
    //     0x5d6904: eor             v2.16b, v2.16b, v2.16b
    // 0x5d6908: fcmp            d0, d2
    // 0x5d690c: b.vs            #0x5d6920
    // 0x5d6910: b.ne            #0x5d6920
    // 0x5d6914: fadd            d3, d0, d1
    // 0x5d6918: mov             v4.16b, v3.16b
    // 0x5d691c: b               #0x5d6924
    // 0x5d6920: mov             v4.16b, v0.16b
    // 0x5d6924: ldur            x1, [fp, #-8]
    // 0x5d6928: ldur            d3, [fp, #-0x38]
    // 0x5d692c: ldur            d1, [fp, #-0x40]
    // 0x5d6930: stur            d4, [fp, #-0x48]
    // 0x5d6934: LoadField: r0 = r1->field_f
    //     0x5d6934: ldur            w0, [x1, #0xf]
    // 0x5d6938: DecompressPointer r0
    //     0x5d6938: add             x0, x0, HEAP, lsl #32
    // 0x5d693c: LoadField: r2 = r0->field_3f
    //     0x5d693c: ldur            w2, [x0, #0x3f]
    // 0x5d6940: DecompressPointer r2
    //     0x5d6940: add             x2, x2, HEAP, lsl #32
    // 0x5d6944: cmp             w2, NULL
    // 0x5d6948: b.eq            #0x5d6c50
    // 0x5d694c: LoadField: r0 = r2->field_f
    //     0x5d694c: ldur            w0, [x2, #0xf]
    // 0x5d6950: DecompressPointer r0
    //     0x5d6950: add             x0, x0, HEAP, lsl #32
    // 0x5d6954: cmp             w0, NULL
    // 0x5d6958: b.eq            #0x5d6c54
    // 0x5d695c: r2 = LoadClassIdInstr(r0)
    //     0x5d695c: ldur            x2, [x0, #-1]
    //     0x5d6960: ubfx            x2, x2, #0xc, #0x14
    // 0x5d6964: r16 = Instance_TextSelectionHandleType
    //     0x5d6964: ldr             x16, [PP, #0x5e20]  ; [pp+0x5e20] Obj!TextSelectionHandleType@c43971
    // 0x5d6968: stp             x16, x0, [SP, #8]
    // 0x5d696c: str             d1, [SP]
    // 0x5d6970: mov             x0, x2
    // 0x5d6974: r0 = GDT[cid_x0 + -0x1]()
    //     0x5d6974: sub             lr, x0, #1
    //     0x5d6978: ldr             lr, [x21, lr, lsl #3]
    //     0x5d697c: blr             lr
    // 0x5d6980: ldur            d0, [fp, #-0x50]
    // 0x5d6984: d1 = 2.000000
    //     0x5d6984: fmov            d1, #2.00000000
    // 0x5d6988: fdiv            d2, d0, d1
    // 0x5d698c: LoadField: d0 = r0->field_f
    //     0x5d698c: ldur            d0, [x0, #0xf]
    // 0x5d6990: fsub            d3, d2, d0
    // 0x5d6994: ldur            d0, [fp, #-0x48]
    // 0x5d6998: fdiv            d2, d0, d1
    // 0x5d699c: fadd            d0, d3, d2
    // 0x5d69a0: ldur            d1, [fp, #-0x38]
    // 0x5d69a4: fcmp            d0, d1
    // 0x5d69a8: b.vs            #0x5d69b0
    // 0x5d69ac: b.gt            #0x5d69e4
    // 0x5d69b0: fcmp            d0, d1
    // 0x5d69b4: b.vs            #0x5d69c4
    // 0x5d69b8: b.ge            #0x5d69c4
    // 0x5d69bc: mov             v0.16b, v1.16b
    // 0x5d69c0: b               #0x5d69e4
    // 0x5d69c4: d2 = 0.000000
    //     0x5d69c4: eor             v2.16b, v2.16b, v2.16b
    // 0x5d69c8: fcmp            d0, d2
    // 0x5d69cc: b.vs            #0x5d69e4
    // 0x5d69d0: b.ne            #0x5d69e4
    // 0x5d69d4: fadd            d2, d0, d1
    // 0x5d69d8: mov             v0.16b, v2.16b
    // 0x5d69dc: b               #0x5d69e4
    // 0x5d69e0: mov             v0.16b, v1.16b
    // 0x5d69e4: ldur            x0, [fp, #-8]
    // 0x5d69e8: ldur            x1, [fp, #-0x10]
    // 0x5d69ec: LoadField: r2 = r0->field_f
    //     0x5d69ec: ldur            w2, [x0, #0xf]
    // 0x5d69f0: DecompressPointer r2
    //     0x5d69f0: add             x2, x2, HEAP, lsl #32
    // 0x5d69f4: LoadField: r3 = r2->field_b
    //     0x5d69f4: ldur            w3, [x2, #0xb]
    // 0x5d69f8: DecompressPointer r3
    //     0x5d69f8: add             x3, x3, HEAP, lsl #32
    // 0x5d69fc: cmp             w3, NULL
    // 0x5d6a00: b.eq            #0x5d6c58
    // 0x5d6a04: r2 = inline_Allocate_Double()
    //     0x5d6a04: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x5d6a08: add             x2, x2, #0x10
    //     0x5d6a0c: cmp             x3, x2
    //     0x5d6a10: b.ls            #0x5d6c5c
    //     0x5d6a14: str             x2, [THR, #0x50]  ; THR::top
    //     0x5d6a18: sub             x2, x2, #0xf
    //     0x5d6a1c: movz            x3, #0xd148
    //     0x5d6a20: movk            x3, #0x3, lsl #16
    //     0x5d6a24: stur            x3, [x2, #-1]
    // 0x5d6a28: StoreField: r2->field_7 = d0
    //     0x5d6a28: stur            d0, [x2, #7]
    // 0x5d6a2c: r16 = Instance_EdgeInsets
    //     0x5d6a2c: ldr             x16, [PP, #0x6510]  ; [pp+0x6510] Obj!EdgeInsets@c2db31
    // 0x5d6a30: stp             x2, x16, [SP]
    // 0x5d6a34: r4 = const [0, 0x2, 0x2, 0x1, bottom, 0x1, null]
    //     0x5d6a34: ldr             x4, [PP, #0x6520]  ; [pp+0x6520] List(7) [0, 0x2, 0x2, 0x1, "bottom", 0x1, Null]
    // 0x5d6a38: r0 = copyWith()
    //     0x5d6a38: bl              #0x5d7018  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::copyWith
    // 0x5d6a3c: mov             x1, x0
    // 0x5d6a40: ldur            x0, [fp, #-0x10]
    // 0x5d6a44: stur            x1, [fp, #-0x18]
    // 0x5d6a48: LoadField: r2 = r0->field_e3
    //     0x5d6a48: ldur            w2, [x0, #0xe3]
    // 0x5d6a4c: DecompressPointer r2
    //     0x5d6a4c: add             x2, x2, HEAP, lsl #32
    // 0x5d6a50: str             x2, [SP]
    // 0x5d6a54: r0 = extent()
    //     0x5d6a54: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x5d6a58: ldur            x16, [fp, #-0x10]
    // 0x5d6a5c: stp             x0, x16, [SP]
    // 0x5d6a60: r0 = getLocalRectForCaret()
    //     0x5d6a60: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5d6a64: mov             x1, x0
    // 0x5d6a68: ldur            x0, [fp, #-8]
    // 0x5d6a6c: LoadField: r2 = r0->field_f
    //     0x5d6a6c: ldur            w2, [x0, #0xf]
    // 0x5d6a70: DecompressPointer r2
    //     0x5d6a70: add             x2, x2, HEAP, lsl #32
    // 0x5d6a74: stp             x1, x2, [SP]
    // 0x5d6a78: r0 = _getOffsetToRevealCaret()
    //     0x5d6a78: bl              #0x5d4750  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getOffsetToRevealCaret
    // 0x5d6a7c: mov             x1, x0
    // 0x5d6a80: ldur            x0, [fp, #-8]
    // 0x5d6a84: stur            x1, [fp, #-0x28]
    // 0x5d6a88: LoadField: r2 = r0->field_f
    //     0x5d6a88: ldur            w2, [x0, #0xf]
    // 0x5d6a8c: DecompressPointer r2
    //     0x5d6a8c: add             x2, x2, HEAP, lsl #32
    // 0x5d6a90: LoadField: r3 = r2->field_b
    //     0x5d6a90: ldur            w3, [x2, #0xb]
    // 0x5d6a94: DecompressPointer r3
    //     0x5d6a94: add             x3, x3, HEAP, lsl #32
    // 0x5d6a98: cmp             w3, NULL
    // 0x5d6a9c: b.eq            #0x5d6c78
    // 0x5d6aa0: LoadField: r2 = r3->field_b
    //     0x5d6aa0: ldur            w2, [x3, #0xb]
    // 0x5d6aa4: DecompressPointer r2
    //     0x5d6aa4: add             x2, x2, HEAP, lsl #32
    // 0x5d6aa8: LoadField: r3 = r2->field_27
    //     0x5d6aa8: ldur            w3, [x2, #0x27]
    // 0x5d6aac: DecompressPointer r3
    //     0x5d6aac: add             x3, x3, HEAP, lsl #32
    // 0x5d6ab0: LoadField: r2 = r3->field_b
    //     0x5d6ab0: ldur            w2, [x3, #0xb]
    // 0x5d6ab4: DecompressPointer r2
    //     0x5d6ab4: add             x2, x2, HEAP, lsl #32
    // 0x5d6ab8: stur            x2, [fp, #-0x20]
    // 0x5d6abc: LoadField: r3 = r2->field_7
    //     0x5d6abc: ldur            x3, [x2, #7]
    // 0x5d6ac0: LoadField: r4 = r2->field_f
    //     0x5d6ac0: ldur            x4, [x2, #0xf]
    // 0x5d6ac4: cmp             x3, x4
    // 0x5d6ac8: b.ne            #0x5d6adc
    // 0x5d6acc: LoadField: r2 = r1->field_f
    //     0x5d6acc: ldur            w2, [x1, #0xf]
    // 0x5d6ad0: DecompressPointer r2
    //     0x5d6ad0: add             x2, x2, HEAP, lsl #32
    // 0x5d6ad4: mov             x1, x0
    // 0x5d6ad8: b               #0x5d6b48
    // 0x5d6adc: ldur            x16, [fp, #-0x10]
    // 0x5d6ae0: stp             x2, x16, [SP]
    // 0x5d6ae4: r0 = getBoxesForSelection()
    //     0x5d6ae4: bl              #0x5d6e4c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getBoxesForSelection
    // 0x5d6ae8: LoadField: r1 = r0->field_b
    //     0x5d6ae8: ldur            w1, [x0, #0xb]
    // 0x5d6aec: DecompressPointer r1
    //     0x5d6aec: add             x1, x1, HEAP, lsl #32
    // 0x5d6af0: cbnz            w1, #0x5d6b04
    // 0x5d6af4: ldur            x1, [fp, #-0x28]
    // 0x5d6af8: LoadField: r0 = r1->field_f
    //     0x5d6af8: ldur            w0, [x1, #0xf]
    // 0x5d6afc: DecompressPointer r0
    //     0x5d6afc: add             x0, x0, HEAP, lsl #32
    // 0x5d6b00: b               #0x5d6b40
    // 0x5d6b04: ldur            x1, [fp, #-0x28]
    // 0x5d6b08: ldur            x2, [fp, #-0x20]
    // 0x5d6b0c: ArrayLoad: r3 = r2[0]  ; List_8
    //     0x5d6b0c: ldur            x3, [x2, #0x17]
    // 0x5d6b10: LoadField: r4 = r2->field_1f
    //     0x5d6b10: ldur            x4, [x2, #0x1f]
    // 0x5d6b14: cmp             x3, x4
    // 0x5d6b18: b.ge            #0x5d6b30
    // 0x5d6b1c: str             x0, [SP]
    // 0x5d6b20: r0 = last()
    //     0x5d6b20: bl              #0x5a67a0  ; [dart:core] _GrowableList::last
    // 0x5d6b24: str             x0, [SP]
    // 0x5d6b28: r0 = toRect()
    //     0x5d6b28: bl              #0x5cc2f0  ; [dart:ui] TextBox::toRect
    // 0x5d6b2c: b               #0x5d6b40
    // 0x5d6b30: str             x0, [SP]
    // 0x5d6b34: r0 = first()
    //     0x5d6b34: bl              #0x6147ec  ; [dart:core] _GrowableList::first
    // 0x5d6b38: str             x0, [SP]
    // 0x5d6b3c: r0 = toRect()
    //     0x5d6b3c: bl              #0x5cc2f0  ; [dart:ui] TextBox::toRect
    // 0x5d6b40: mov             x2, x0
    // 0x5d6b44: ldur            x1, [fp, #-8]
    // 0x5d6b48: stur            x2, [fp, #-0x30]
    // 0x5d6b4c: LoadField: r3 = r1->field_13
    //     0x5d6b4c: ldur            w3, [x1, #0x13]
    // 0x5d6b50: DecompressPointer r3
    //     0x5d6b50: add             x3, x3, HEAP, lsl #32
    // 0x5d6b54: mov             x0, x3
    // 0x5d6b58: stur            x3, [fp, #-0x20]
    // 0x5d6b5c: tbnz            w0, #5, #0x5d6b64
    // 0x5d6b60: r0 = AssertBoolean()
    //     0x5d6b60: bl              #0xc5d270  ; AssertBooleanStub
    // 0x5d6b64: ldur            x0, [fp, #-0x20]
    // 0x5d6b68: tbnz            w0, #4, #0x5d6bd4
    // 0x5d6b6c: ldur            x0, [fp, #-8]
    // 0x5d6b70: ldur            x1, [fp, #-0x28]
    // 0x5d6b74: LoadField: r2 = r0->field_f
    //     0x5d6b74: ldur            w2, [x0, #0xf]
    // 0x5d6b78: DecompressPointer r2
    //     0x5d6b78: add             x2, x2, HEAP, lsl #32
    // 0x5d6b7c: str             x2, [SP]
    // 0x5d6b80: r0 = _scrollController()
    //     0x5d6b80: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d6b84: ldur            x1, [fp, #-0x28]
    // 0x5d6b88: LoadField: d0 = r1->field_7
    //     0x5d6b88: ldur            d0, [x1, #7]
    // 0x5d6b8c: str             x0, [SP, #0x18]
    // 0x5d6b90: str             d0, [SP, #0x10]
    // 0x5d6b94: r16 = Instance_Cubic
    //     0x5d6b94: ldr             x16, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0x5d6b98: r30 = Instance_Duration
    //     0x5d6b98: ldr             lr, [PP, #0x6530]  ; [pp+0x6530] Obj!Duration@c47d01
    // 0x5d6b9c: stp             lr, x16, [SP]
    // 0x5d6ba0: r0 = animateTo()
    //     0x5d6ba0: bl              #0x5d6c7c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::animateTo
    // 0x5d6ba4: ldur            x16, [fp, #-0x18]
    // 0x5d6ba8: ldur            lr, [fp, #-0x30]
    // 0x5d6bac: stp             lr, x16, [SP]
    // 0x5d6bb0: r0 = inflateRect()
    //     0x5d6bb0: bl              #0x5d0468  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::inflateRect
    // 0x5d6bb4: ldur            x16, [fp, #-0x10]
    // 0x5d6bb8: stp             x0, x16, [SP, #0x10]
    // 0x5d6bbc: r16 = Instance_Duration
    //     0x5d6bbc: ldr             x16, [PP, #0x6530]  ; [pp+0x6530] Obj!Duration@c47d01
    // 0x5d6bc0: r30 = Instance_Cubic
    //     0x5d6bc0: ldr             lr, [PP, #0x6528]  ; [pp+0x6528] Obj!Cubic@c38ad1
    // 0x5d6bc4: stp             lr, x16, [SP]
    // 0x5d6bc8: r4 = const [0, 0x4, 0x4, 0x1, curve, 0x3, duration, 0x2, rect, 0x1, null]
    //     0x5d6bc8: ldr             x4, [PP, #0x6538]  ; [pp+0x6538] List(11) [0, 0x4, 0x4, 0x1, "curve", 0x3, "duration", 0x2, "rect", 0x1, Null]
    // 0x5d6bcc: r0 = showOnScreen()
    //     0x5d6bcc: bl              #0x813b40  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x5d6bd0: b               #0x5d6c24
    // 0x5d6bd4: ldur            x0, [fp, #-8]
    // 0x5d6bd8: ldur            x1, [fp, #-0x28]
    // 0x5d6bdc: LoadField: r2 = r0->field_f
    //     0x5d6bdc: ldur            w2, [x0, #0xf]
    // 0x5d6be0: DecompressPointer r2
    //     0x5d6be0: add             x2, x2, HEAP, lsl #32
    // 0x5d6be4: str             x2, [SP]
    // 0x5d6be8: r0 = _scrollController()
    //     0x5d6be8: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x5d6bec: mov             x1, x0
    // 0x5d6bf0: ldur            x0, [fp, #-0x28]
    // 0x5d6bf4: LoadField: d0 = r0->field_7
    //     0x5d6bf4: ldur            d0, [x0, #7]
    // 0x5d6bf8: str             x1, [SP, #8]
    // 0x5d6bfc: str             d0, [SP]
    // 0x5d6c00: r0 = jumpTo()
    //     0x5d6c00: bl              #0x5d453c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0x5d6c04: ldur            x16, [fp, #-0x18]
    // 0x5d6c08: ldur            lr, [fp, #-0x30]
    // 0x5d6c0c: stp             lr, x16, [SP]
    // 0x5d6c10: r0 = inflateRect()
    //     0x5d6c10: bl              #0x5d0468  ; [package:flutter/src/painting/edge_insets.dart] EdgeInsets::inflateRect
    // 0x5d6c14: ldur            x16, [fp, #-0x10]
    // 0x5d6c18: stp             x0, x16, [SP]
    // 0x5d6c1c: r4 = const [0, 0x2, 0x2, 0x1, rect, 0x1, null]
    //     0x5d6c1c: ldr             x4, [PP, #0x6368]  ; [pp+0x6368] List(7) [0, 0x2, 0x2, 0x1, "rect", 0x1, Null]
    // 0x5d6c20: r0 = showOnScreen()
    //     0x5d6c20: bl              #0x813b40  ; [package:flutter/src/rendering/object.dart] RenderObject::showOnScreen
    // 0x5d6c24: r0 = Null
    //     0x5d6c24: mov             x0, NULL
    // 0x5d6c28: LeaveFrame
    //     0x5d6c28: mov             SP, fp
    //     0x5d6c2c: ldp             fp, lr, [SP], #0x10
    // 0x5d6c30: ret
    //     0x5d6c30: ret             
    // 0x5d6c34: r0 = Null
    //     0x5d6c34: mov             x0, NULL
    // 0x5d6c38: LeaveFrame
    //     0x5d6c38: mov             SP, fp
    //     0x5d6c3c: ldp             fp, lr, [SP], #0x10
    // 0x5d6c40: ret
    //     0x5d6c40: ret             
    // 0x5d6c44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d6c44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d6c48: b               #0x5d679c
    // 0x5d6c4c: r0 = NullCastErrorSharedWithFPURegs()
    //     0x5d6c4c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x5d6c50: r0 = NullCastErrorSharedWithFPURegs()
    //     0x5d6c50: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x5d6c54: r0 = NullCastErrorSharedWithFPURegs()
    //     0x5d6c54: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x5d6c58: r0 = NullCastErrorSharedWithFPURegs()
    //     0x5d6c58: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x5d6c5c: SaveReg d0
    //     0x5d6c5c: str             q0, [SP, #-0x10]!
    // 0x5d6c60: stp             x0, x1, [SP, #-0x10]!
    // 0x5d6c64: r0 = AllocateDouble()
    //     0x5d6c64: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x5d6c68: mov             x2, x0
    // 0x5d6c6c: ldp             x0, x1, [SP], #0x10
    // 0x5d6c70: RestoreReg d0
    //     0x5d6c70: ldr             q0, [SP], #0x10
    // 0x5d6c74: b               #0x5d6a28
    // 0x5d6c78: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d6c78: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] Widget <anonymous closure>(dynamic, BuildContext) {
    // ** addr: 0x5d9404, size: 0x6c
    // 0x5d9404: EnterFrame
    //     0x5d9404: stp             fp, lr, [SP, #-0x10]!
    //     0x5d9408: mov             fp, SP
    // 0x5d940c: AllocStack(0x18)
    //     0x5d940c: sub             SP, SP, #0x18
    // 0x5d9410: SetupParameters()
    //     0x5d9410: ldr             x0, [fp, #0x18]
    //     0x5d9414: ldur            w1, [x0, #0x17]
    //     0x5d9418: add             x1, x1, HEAP, lsl #32
    // 0x5d941c: CheckStackOverflow
    //     0x5d941c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9420: cmp             SP, x16
    //     0x5d9424: b.ls            #0x5d9464
    // 0x5d9428: LoadField: r0 = r1->field_13
    //     0x5d9428: ldur            w0, [x1, #0x13]
    // 0x5d942c: DecompressPointer r0
    //     0x5d942c: add             x0, x0, HEAP, lsl #32
    // 0x5d9430: LoadField: r2 = r1->field_f
    //     0x5d9430: ldur            w2, [x1, #0xf]
    // 0x5d9434: DecompressPointer r2
    //     0x5d9434: add             x2, x2, HEAP, lsl #32
    // 0x5d9438: cmp             w0, NULL
    // 0x5d943c: b.eq            #0x5d946c
    // 0x5d9440: ldr             x16, [fp, #0x10]
    // 0x5d9444: stp             x16, x0, [SP, #8]
    // 0x5d9448: str             x2, [SP]
    // 0x5d944c: ClosureCall
    //     0x5d944c: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x5d9450: ldur            x2, [x0, #0x1f]
    //     0x5d9454: blr             x2
    // 0x5d9458: LeaveFrame
    //     0x5d9458: mov             SP, fp
    //     0x5d945c: ldp             fp, lr, [SP], #0x10
    // 0x5d9460: ret
    //     0x5d9460: ret             
    // 0x5d9464: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d9464: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d9468: b               #0x5d9428
    // 0x5d946c: r0 = NullErrorSharedWithoutFPURegs()
    //     0x5d946c: bl              #0xc5f5e0  ; NullErrorSharedWithoutFPURegsStub
  }
  get _ wantKeepAlive(/* No info */) {
    // ** addr: 0x5d9470, size: 0x54
    // 0x5d9470: EnterFrame
    //     0x5d9470: stp             fp, lr, [SP, #-0x10]!
    //     0x5d9474: mov             fp, SP
    // 0x5d9478: AllocStack(0x8)
    //     0x5d9478: sub             SP, SP, #8
    // 0x5d947c: CheckStackOverflow
    //     0x5d947c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9480: cmp             SP, x16
    //     0x5d9484: b.ls            #0x5d94b8
    // 0x5d9488: ldr             x0, [fp, #0x10]
    // 0x5d948c: LoadField: r1 = r0->field_b
    //     0x5d948c: ldur            w1, [x0, #0xb]
    // 0x5d9490: DecompressPointer r1
    //     0x5d9490: add             x1, x1, HEAP, lsl #32
    // 0x5d9494: cmp             w1, NULL
    // 0x5d9498: b.eq            #0x5d94c0
    // 0x5d949c: LoadField: r0 = r1->field_f
    //     0x5d949c: ldur            w0, [x1, #0xf]
    // 0x5d94a0: DecompressPointer r0
    //     0x5d94a0: add             x0, x0, HEAP, lsl #32
    // 0x5d94a4: str             x0, [SP]
    // 0x5d94a8: r0 = hasFocus()
    //     0x5d94a8: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x5d94ac: LeaveFrame
    //     0x5d94ac: mov             SP, fp
    //     0x5d94b0: ldp             fp, lr, [SP], #0x10
    // 0x5d94b4: ret
    //     0x5d94b4: ret             
    // 0x5d94b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d94b8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d94bc: b               #0x5d9488
    // 0x5d94c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d94c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ requestKeyboard(/* No info */) {
    // ** addr: 0x5d94c4, size: 0xa4
    // 0x5d94c4: EnterFrame
    //     0x5d94c4: stp             fp, lr, [SP, #-0x10]!
    //     0x5d94c8: mov             fp, SP
    // 0x5d94cc: AllocStack(0x8)
    //     0x5d94cc: sub             SP, SP, #8
    // 0x5d94d0: CheckStackOverflow
    //     0x5d94d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d94d4: cmp             SP, x16
    //     0x5d94d8: b.ls            #0x5d9558
    // 0x5d94dc: ldr             x0, [fp, #0x10]
    // 0x5d94e0: LoadField: r1 = r0->field_b
    //     0x5d94e0: ldur            w1, [x0, #0xb]
    // 0x5d94e4: DecompressPointer r1
    //     0x5d94e4: add             x1, x1, HEAP, lsl #32
    // 0x5d94e8: cmp             w1, NULL
    // 0x5d94ec: b.eq            #0x5d9560
    // 0x5d94f0: LoadField: r2 = r1->field_f
    //     0x5d94f0: ldur            w2, [x1, #0xf]
    // 0x5d94f4: DecompressPointer r2
    //     0x5d94f4: add             x2, x2, HEAP, lsl #32
    // 0x5d94f8: str             x2, [SP]
    // 0x5d94fc: r0 = hasFocus()
    //     0x5d94fc: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x5d9500: tbnz            w0, #4, #0x5d9514
    // 0x5d9504: ldr             x16, [fp, #0x10]
    // 0x5d9508: str             x16, [SP]
    // 0x5d950c: r0 = _openInputConnection()
    //     0x5d950c: bl              #0x5d9568  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x5d9510: b               #0x5d9548
    // 0x5d9514: ldr             x0, [fp, #0x10]
    // 0x5d9518: str             x0, [SP]
    // 0x5d951c: r0 = _flagInternalFocus()
    //     0x5d951c: bl              #0x5d64a4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_flagInternalFocus
    // 0x5d9520: ldr             x0, [fp, #0x10]
    // 0x5d9524: LoadField: r1 = r0->field_b
    //     0x5d9524: ldur            w1, [x0, #0xb]
    // 0x5d9528: DecompressPointer r1
    //     0x5d9528: add             x1, x1, HEAP, lsl #32
    // 0x5d952c: cmp             w1, NULL
    // 0x5d9530: b.eq            #0x5d9564
    // 0x5d9534: LoadField: r0 = r1->field_f
    //     0x5d9534: ldur            w0, [x1, #0xf]
    // 0x5d9538: DecompressPointer r0
    //     0x5d9538: add             x0, x0, HEAP, lsl #32
    // 0x5d953c: str             x0, [SP]
    // 0x5d9540: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5d9540: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5d9544: r0 = requestFocus()
    //     0x5d9544: bl              #0x5d4f00  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::requestFocus
    // 0x5d9548: r0 = Null
    //     0x5d9548: mov             x0, NULL
    // 0x5d954c: LeaveFrame
    //     0x5d954c: mov             SP, fp
    //     0x5d9550: ldp             fp, lr, [SP], #0x10
    // 0x5d9554: ret
    //     0x5d9554: ret             
    // 0x5d9558: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d9558: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d955c: b               #0x5d94dc
    // 0x5d9560: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9560: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9564: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9564: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _openInputConnection(/* No info */) {
    // ** addr: 0x5d9568, size: 0x234
    // 0x5d9568: EnterFrame
    //     0x5d9568: stp             fp, lr, [SP, #-0x10]!
    //     0x5d956c: mov             fp, SP
    // 0x5d9570: AllocStack(0x58)
    //     0x5d9570: sub             SP, SP, #0x58
    // 0x5d9574: CheckStackOverflow
    //     0x5d9574: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9578: cmp             SP, x16
    //     0x5d957c: b.ls            #0x5d9778
    // 0x5d9580: ldr             x16, [fp, #0x10]
    // 0x5d9584: str             x16, [SP]
    // 0x5d9588: r0 = _shouldCreateInputConnection()
    //     0x5d9588: bl              #0x5dc080  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_shouldCreateInputConnection
    // 0x5d958c: tbz             w0, #4, #0x5d95a0
    // 0x5d9590: r0 = Null
    //     0x5d9590: mov             x0, NULL
    // 0x5d9594: LeaveFrame
    //     0x5d9594: mov             SP, fp
    //     0x5d9598: ldp             fp, lr, [SP], #0x10
    // 0x5d959c: ret
    //     0x5d959c: ret             
    // 0x5d95a0: ldr             x16, [fp, #0x10]
    // 0x5d95a4: str             x16, [SP]
    // 0x5d95a8: r0 = _hasInputConnection()
    //     0x5d95a8: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5d95ac: tbz             w0, #4, #0x5d974c
    // 0x5d95b0: ldr             x0, [fp, #0x10]
    // 0x5d95b4: LoadField: r1 = r0->field_b
    //     0x5d95b4: ldur            w1, [x0, #0xb]
    // 0x5d95b8: DecompressPointer r1
    //     0x5d95b8: add             x1, x1, HEAP, lsl #32
    // 0x5d95bc: cmp             w1, NULL
    // 0x5d95c0: b.eq            #0x5d9780
    // 0x5d95c4: LoadField: r2 = r1->field_b
    //     0x5d95c4: ldur            w2, [x1, #0xb]
    // 0x5d95c8: DecompressPointer r2
    //     0x5d95c8: add             x2, x2, HEAP, lsl #32
    // 0x5d95cc: LoadField: r3 = r2->field_27
    //     0x5d95cc: ldur            w3, [x2, #0x27]
    // 0x5d95d0: DecompressPointer r3
    //     0x5d95d0: add             x3, x3, HEAP, lsl #32
    // 0x5d95d4: stur            x3, [fp, #-8]
    // 0x5d95d8: r17 = 259
    //     0x5d95d8: movz            x17, #0x103
    // 0x5d95dc: ldr             w2, [x1, x17]
    // 0x5d95e0: DecompressPointer r2
    //     0x5d95e0: add             x2, x2, HEAP, lsl #32
    // 0x5d95e4: str             x2, [SP]
    // 0x5d95e8: r0 = textInputConfiguration()
    //     0x5d95e8: bl              #0x5db134  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x5d95ec: ldr             x16, [fp, #0x10]
    // 0x5d95f0: str             x16, [SP]
    // 0x5d95f4: r0 = _effectiveAutofillClient()
    //     0x5d95f4: bl              #0x5db0fc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_effectiveAutofillClient
    // 0x5d95f8: str             x0, [SP]
    // 0x5d95fc: r0 = textInputConfiguration()
    //     0x5d95fc: bl              #0x5db134  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x5d9600: ldr             x16, [fp, #0x10]
    // 0x5d9604: stp             x0, x16, [SP]
    // 0x5d9608: r0 = attach()
    //     0x5d9608: bl              #0x5dafa8  ; [package:flutter/src/services/text_input.dart] TextInput::attach
    // 0x5d960c: ldr             x1, [fp, #0x10]
    // 0x5d9610: StoreField: r1->field_3b = r0
    //     0x5d9610: stur            w0, [x1, #0x3b]
    //     0x5d9614: ldurb           w16, [x1, #-1]
    //     0x5d9618: ldurb           w17, [x0, #-1]
    //     0x5d961c: and             x16, x17, x16, lsr #2
    //     0x5d9620: tst             x16, HEAP, lsr #32
    //     0x5d9624: b.eq            #0x5d962c
    //     0x5d9628: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5d962c: str             x1, [SP]
    // 0x5d9630: r0 = _updateSizeAndTransform()
    //     0x5d9630: bl              #0x5dabcc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSizeAndTransform
    // 0x5d9634: ldr             x16, [fp, #0x10]
    // 0x5d9638: str             x16, [SP]
    // 0x5d963c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5d963c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5d9640: r0 = _schedulePeriodicPostFrameCallbacks()
    //     0x5d9640: bl              #0x5d9e78  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks
    // 0x5d9644: ldr             x0, [fp, #0x10]
    // 0x5d9648: LoadField: r1 = r0->field_3b
    //     0x5d9648: ldur            w1, [x0, #0x3b]
    // 0x5d964c: DecompressPointer r1
    //     0x5d964c: add             x1, x1, HEAP, lsl #32
    // 0x5d9650: stur            x1, [fp, #-0x28]
    // 0x5d9654: cmp             w1, NULL
    // 0x5d9658: b.eq            #0x5d9784
    // 0x5d965c: LoadField: r2 = r0->field_63
    //     0x5d965c: ldur            w2, [x0, #0x63]
    // 0x5d9660: DecompressPointer r2
    //     0x5d9660: add             x2, x2, HEAP, lsl #32
    // 0x5d9664: r16 = Sentinel
    //     0x5d9664: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5d9668: cmp             w2, w16
    // 0x5d966c: b.eq            #0x5d9788
    // 0x5d9670: LoadField: r3 = r2->field_13
    //     0x5d9670: ldur            w3, [x2, #0x13]
    // 0x5d9674: DecompressPointer r3
    //     0x5d9674: add             x3, x3, HEAP, lsl #32
    // 0x5d9678: stur            x3, [fp, #-0x20]
    // 0x5d967c: LoadField: r4 = r2->field_1f
    //     0x5d967c: ldur            w4, [x2, #0x1f]
    // 0x5d9680: DecompressPointer r4
    //     0x5d9680: add             x4, x4, HEAP, lsl #32
    // 0x5d9684: stur            x4, [fp, #-0x18]
    // 0x5d9688: LoadField: r5 = r2->field_23
    //     0x5d9688: ldur            w5, [x2, #0x23]
    // 0x5d968c: DecompressPointer r5
    //     0x5d968c: add             x5, x5, HEAP, lsl #32
    // 0x5d9690: stur            x5, [fp, #-0x10]
    // 0x5d9694: str             x0, [SP]
    // 0x5d9698: r0 = _textDirection()
    //     0x5d9698: bl              #0x5d9da0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_textDirection
    // 0x5d969c: mov             x1, x0
    // 0x5d96a0: ldr             x0, [fp, #0x10]
    // 0x5d96a4: LoadField: r2 = r0->field_b
    //     0x5d96a4: ldur            w2, [x0, #0xb]
    // 0x5d96a8: DecompressPointer r2
    //     0x5d96a8: add             x2, x2, HEAP, lsl #32
    // 0x5d96ac: cmp             w2, NULL
    // 0x5d96b0: b.eq            #0x5d9790
    // 0x5d96b4: LoadField: r3 = r2->field_53
    //     0x5d96b4: ldur            w3, [x2, #0x53]
    // 0x5d96b8: DecompressPointer r3
    //     0x5d96b8: add             x3, x3, HEAP, lsl #32
    // 0x5d96bc: ldur            x16, [fp, #-0x28]
    // 0x5d96c0: ldur            lr, [fp, #-0x20]
    // 0x5d96c4: stp             lr, x16, [SP, #0x20]
    // 0x5d96c8: ldur            x16, [fp, #-0x18]
    // 0x5d96cc: ldur            lr, [fp, #-0x10]
    // 0x5d96d0: stp             lr, x16, [SP, #0x10]
    // 0x5d96d4: stp             x1, x3, [SP]
    // 0x5d96d8: r0 = setStyle()
    //     0x5d96d8: bl              #0x5d9b2c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setStyle
    // 0x5d96dc: ldur            x16, [fp, #-0x28]
    // 0x5d96e0: ldur            lr, [fp, #-8]
    // 0x5d96e4: stp             lr, x16, [SP]
    // 0x5d96e8: r0 = setEditingState()
    //     0x5d96e8: bl              #0x5d439c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditingState
    // 0x5d96ec: ldur            x16, [fp, #-0x28]
    // 0x5d96f0: str             x16, [SP]
    // 0x5d96f4: r0 = show()
    //     0x5d96f4: bl              #0x5d99c8  ; [package:flutter/src/services/text_input.dart] TextInputConnection::show
    // 0x5d96f8: ldr             x16, [fp, #0x10]
    // 0x5d96fc: str             x16, [SP]
    // 0x5d9700: r0 = _needsAutofill()
    //     0x5d9700: bl              #0x5d9960  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_needsAutofill
    // 0x5d9704: tbnz            w0, #4, #0x5d9724
    // 0x5d9708: ldr             x0, [fp, #0x10]
    // 0x5d970c: LoadField: r1 = r0->field_3b
    //     0x5d970c: ldur            w1, [x0, #0x3b]
    // 0x5d9710: DecompressPointer r1
    //     0x5d9710: add             x1, x1, HEAP, lsl #32
    // 0x5d9714: cmp             w1, NULL
    // 0x5d9718: b.eq            #0x5d9794
    // 0x5d971c: str             x1, [SP]
    // 0x5d9720: r0 = requestAutofill()
    //     0x5d9720: bl              #0x5d979c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::requestAutofill
    // 0x5d9724: ldr             x1, [fp, #0x10]
    // 0x5d9728: ldur            x0, [fp, #-8]
    // 0x5d972c: StoreField: r1->field_73 = r0
    //     0x5d972c: stur            w0, [x1, #0x73]
    //     0x5d9730: ldurb           w16, [x1, #-1]
    //     0x5d9734: ldurb           w17, [x0, #-1]
    //     0x5d9738: and             x16, x17, x16, lsr #2
    //     0x5d973c: tst             x16, HEAP, lsr #32
    //     0x5d9740: b.eq            #0x5d9748
    //     0x5d9744: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5d9748: b               #0x5d9768
    // 0x5d974c: ldr             x1, [fp, #0x10]
    // 0x5d9750: LoadField: r0 = r1->field_3b
    //     0x5d9750: ldur            w0, [x1, #0x3b]
    // 0x5d9754: DecompressPointer r0
    //     0x5d9754: add             x0, x0, HEAP, lsl #32
    // 0x5d9758: cmp             w0, NULL
    // 0x5d975c: b.eq            #0x5d9798
    // 0x5d9760: str             x0, [SP]
    // 0x5d9764: r0 = show()
    //     0x5d9764: bl              #0x5d99c8  ; [package:flutter/src/services/text_input.dart] TextInputConnection::show
    // 0x5d9768: r0 = Null
    //     0x5d9768: mov             x0, NULL
    // 0x5d976c: LeaveFrame
    //     0x5d976c: mov             SP, fp
    //     0x5d9770: ldp             fp, lr, [SP], #0x10
    // 0x5d9774: ret
    //     0x5d9774: ret             
    // 0x5d9778: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d9778: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d977c: b               #0x5d9580
    // 0x5d9780: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9780: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9784: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9784: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9788: r9 = _style
    //     0x5d9788: ldr             x9, [PP, #0x6640]  ; [pp+0x6640] Field <EditableTextState._style@244183791>: late (offset: 0x64)
    // 0x5d978c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5d978c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x5d9790: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9790: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9794: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9794: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9798: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9798: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _needsAutofill(/* No info */) {
    // ** addr: 0x5d9960, size: 0x68
    // 0x5d9960: EnterFrame
    //     0x5d9960: stp             fp, lr, [SP, #-0x10]!
    //     0x5d9964: mov             fp, SP
    // 0x5d9968: AllocStack(0x8)
    //     0x5d9968: sub             SP, SP, #8
    // 0x5d996c: CheckStackOverflow
    //     0x5d996c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9970: cmp             SP, x16
    //     0x5d9974: b.ls            #0x5d99bc
    // 0x5d9978: ldr             x0, [fp, #0x10]
    // 0x5d997c: LoadField: r1 = r0->field_b
    //     0x5d997c: ldur            w1, [x0, #0xb]
    // 0x5d9980: DecompressPointer r1
    //     0x5d9980: add             x1, x1, HEAP, lsl #32
    // 0x5d9984: cmp             w1, NULL
    // 0x5d9988: b.eq            #0x5d99c4
    // 0x5d998c: r17 = 259
    //     0x5d998c: movz            x17, #0x103
    // 0x5d9990: ldr             w0, [x1, x17]
    // 0x5d9994: DecompressPointer r0
    //     0x5d9994: add             x0, x0, HEAP, lsl #32
    // 0x5d9998: str             x0, [SP]
    // 0x5d999c: r0 = textInputConfiguration()
    //     0x5d999c: bl              #0x5db134  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x5d99a0: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x5d99a0: ldur            w1, [x0, #0x17]
    // 0x5d99a4: DecompressPointer r1
    //     0x5d99a4: add             x1, x1, HEAP, lsl #32
    // 0x5d99a8: LoadField: r0 = r1->field_7
    //     0x5d99a8: ldur            w0, [x1, #7]
    // 0x5d99ac: DecompressPointer r0
    //     0x5d99ac: add             x0, x0, HEAP, lsl #32
    // 0x5d99b0: LeaveFrame
    //     0x5d99b0: mov             SP, fp
    //     0x5d99b4: ldp             fp, lr, [SP], #0x10
    // 0x5d99b8: ret
    //     0x5d99b8: ret             
    // 0x5d99bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d99bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d99c0: b               #0x5d9978
    // 0x5d99c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d99c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _textDirection(/* No info */) {
    // ** addr: 0x5d9da0, size: 0x60
    // 0x5d9da0: EnterFrame
    //     0x5d9da0: stp             fp, lr, [SP, #-0x10]!
    //     0x5d9da4: mov             fp, SP
    // 0x5d9da8: AllocStack(0x8)
    //     0x5d9da8: sub             SP, SP, #8
    // 0x5d9dac: CheckStackOverflow
    //     0x5d9dac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9db0: cmp             SP, x16
    //     0x5d9db4: b.ls            #0x5d9df0
    // 0x5d9db8: ldr             x0, [fp, #0x10]
    // 0x5d9dbc: LoadField: r1 = r0->field_b
    //     0x5d9dbc: ldur            w1, [x0, #0xb]
    // 0x5d9dc0: DecompressPointer r1
    //     0x5d9dc0: add             x1, x1, HEAP, lsl #32
    // 0x5d9dc4: cmp             w1, NULL
    // 0x5d9dc8: b.eq            #0x5d9df8
    // 0x5d9dcc: LoadField: r1 = r0->field_f
    //     0x5d9dcc: ldur            w1, [x0, #0xf]
    // 0x5d9dd0: DecompressPointer r1
    //     0x5d9dd0: add             x1, x1, HEAP, lsl #32
    // 0x5d9dd4: cmp             w1, NULL
    // 0x5d9dd8: b.eq            #0x5d9dfc
    // 0x5d9ddc: str             x1, [SP]
    // 0x5d9de0: r0 = of()
    //     0x5d9de0: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x5d9de4: LeaveFrame
    //     0x5d9de4: mov             SP, fp
    //     0x5d9de8: ldp             fp, lr, [SP], #0x10
    // 0x5d9dec: ret
    //     0x5d9dec: ret             
    // 0x5d9df0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5d9df0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5d9df4: b               #0x5d9db8
    // 0x5d9df8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9df8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5d9dfc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5d9dfc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _schedulePeriodicPostFrameCallbacks(/* No info */) {
    // ** addr: 0x5d9e78, size: 0x1a4
    // 0x5d9e78: EnterFrame
    //     0x5d9e78: stp             fp, lr, [SP, #-0x10]!
    //     0x5d9e7c: mov             fp, SP
    // 0x5d9e80: AllocStack(0x20)
    //     0x5d9e80: sub             SP, SP, #0x20
    // 0x5d9e84: SetupParameters(EditableTextState this /* r1, fp-0x8 */)
    //     0x5d9e84: mov             x0, x4
    //     0x5d9e88: ldur            w1, [x0, #0x13]
    //     0x5d9e8c: add             x1, x1, HEAP, lsl #32
    //     0x5d9e90: sub             x0, x1, #2
    //     0x5d9e94: add             x1, fp, w0, sxtw #2
    //     0x5d9e98: ldr             x1, [x1, #0x10]
    //     0x5d9e9c: stur            x1, [fp, #-8]
    // 0x5d9ea0: CheckStackOverflow
    //     0x5d9ea0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5d9ea4: cmp             SP, x16
    //     0x5d9ea8: b.ls            #0x5da00c
    // 0x5d9eac: str             x1, [SP]
    // 0x5d9eb0: r0 = _hasInputConnection()
    //     0x5d9eb0: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5d9eb4: tbz             w0, #4, #0x5d9ec8
    // 0x5d9eb8: r0 = Null
    //     0x5d9eb8: mov             x0, NULL
    // 0x5d9ebc: LeaveFrame
    //     0x5d9ebc: mov             SP, fp
    //     0x5d9ec0: ldp             fp, lr, [SP], #0x10
    // 0x5d9ec4: ret
    //     0x5d9ec4: ret             
    // 0x5d9ec8: ldur            x0, [fp, #-8]
    // 0x5d9ecc: str             x0, [SP]
    // 0x5d9ed0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5d9ed0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5d9ed4: r0 = _updateSelectionRects()
    //     0x5d9ed4: bl              #0x5dab88  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelectionRects
    // 0x5d9ed8: ldur            x16, [fp, #-8]
    // 0x5d9edc: str             x16, [SP]
    // 0x5d9ee0: r0 = _updateComposingRectIfNeeded()
    //     0x5d9ee0: bl              #0x5da644  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateComposingRectIfNeeded
    // 0x5d9ee4: ldur            x16, [fp, #-8]
    // 0x5d9ee8: str             x16, [SP]
    // 0x5d9eec: r0 = _updateCaretRectIfNeeded()
    //     0x5d9eec: bl              #0x5da098  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateCaretRectIfNeeded
    // 0x5d9ef0: r1 = LoadStaticField(0x1474)
    //     0x5d9ef0: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x5d9ef4: ldr             x1, [x1, #0x28e8]
    // 0x5d9ef8: stur            x1, [fp, #-0x10]
    // 0x5d9efc: cmp             w1, NULL
    // 0x5d9f00: b.eq            #0x5da014
    // 0x5d9f04: ldur            x0, [fp, #-8]
    // 0x5d9f08: r2 = 59
    //     0x5d9f08: movz            x2, #0x3b
    // 0x5d9f0c: branchIfSmi(r0, 0x5d9f18)
    //     0x5d9f0c: tbz             w0, #0, #0x5d9f18
    // 0x5d9f10: r2 = LoadClassIdInstr(r0)
    //     0x5d9f10: ldur            x2, [x0, #-1]
    //     0x5d9f14: ubfx            x2, x2, #0xc, #0x14
    // 0x5d9f18: str             x0, [SP]
    // 0x5d9f1c: mov             x0, x2
    // 0x5d9f20: r0 = GDT[cid_x0 + -0xfd9]()
    //     0x5d9f20: sub             lr, x0, #0xfd9
    //     0x5d9f24: ldr             lr, [x21, lr, lsl #3]
    //     0x5d9f28: blr             lr
    // 0x5d9f2c: mov             x3, x0
    // 0x5d9f30: ldur            x0, [fp, #-0x10]
    // 0x5d9f34: stur            x3, [fp, #-0x18]
    // 0x5d9f38: LoadField: r4 = r0->field_53
    //     0x5d9f38: ldur            w4, [x0, #0x53]
    // 0x5d9f3c: DecompressPointer r4
    //     0x5d9f3c: add             x4, x4, HEAP, lsl #32
    // 0x5d9f40: stur            x4, [fp, #-8]
    // 0x5d9f44: LoadField: r2 = r4->field_7
    //     0x5d9f44: ldur            w2, [x4, #7]
    // 0x5d9f48: DecompressPointer r2
    //     0x5d9f48: add             x2, x2, HEAP, lsl #32
    // 0x5d9f4c: mov             x0, x3
    // 0x5d9f50: r1 = Null
    //     0x5d9f50: mov             x1, NULL
    // 0x5d9f54: cmp             w2, NULL
    // 0x5d9f58: b.eq            #0x5d9f74
    // 0x5d9f5c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x5d9f5c: ldur            w4, [x2, #0x17]
    // 0x5d9f60: DecompressPointer r4
    //     0x5d9f60: add             x4, x4, HEAP, lsl #32
    // 0x5d9f64: r8 = X0
    //     0x5d9f64: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x5d9f68: LoadField: r9 = r4->field_7
    //     0x5d9f68: ldur            x9, [x4, #7]
    // 0x5d9f6c: r3 = Null
    //     0x5d9f6c: ldr             x3, [PP, #0x66b8]  ; [pp+0x66b8] Null
    // 0x5d9f70: blr             x9
    // 0x5d9f74: ldur            x0, [fp, #-8]
    // 0x5d9f78: LoadField: r1 = r0->field_b
    //     0x5d9f78: ldur            w1, [x0, #0xb]
    // 0x5d9f7c: DecompressPointer r1
    //     0x5d9f7c: add             x1, x1, HEAP, lsl #32
    // 0x5d9f80: stur            x1, [fp, #-0x10]
    // 0x5d9f84: LoadField: r2 = r0->field_f
    //     0x5d9f84: ldur            w2, [x0, #0xf]
    // 0x5d9f88: DecompressPointer r2
    //     0x5d9f88: add             x2, x2, HEAP, lsl #32
    // 0x5d9f8c: LoadField: r3 = r2->field_b
    //     0x5d9f8c: ldur            w3, [x2, #0xb]
    // 0x5d9f90: DecompressPointer r3
    //     0x5d9f90: add             x3, x3, HEAP, lsl #32
    // 0x5d9f94: cmp             w1, w3
    // 0x5d9f98: b.ne            #0x5d9fa4
    // 0x5d9f9c: str             x0, [SP]
    // 0x5d9fa0: r0 = _growToNextCapacity()
    //     0x5d9fa0: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x5d9fa4: ldur            x2, [fp, #-8]
    // 0x5d9fa8: ldur            x3, [fp, #-0x10]
    // 0x5d9fac: r4 = LoadInt32Instr(r3)
    //     0x5d9fac: sbfx            x4, x3, #1, #0x1f
    // 0x5d9fb0: add             x0, x4, #1
    // 0x5d9fb4: lsl             x3, x0, #1
    // 0x5d9fb8: StoreField: r2->field_b = r3
    //     0x5d9fb8: stur            w3, [x2, #0xb]
    // 0x5d9fbc: mov             x1, x4
    // 0x5d9fc0: cmp             x1, x0
    // 0x5d9fc4: b.hs            #0x5da018
    // 0x5d9fc8: LoadField: r1 = r2->field_f
    //     0x5d9fc8: ldur            w1, [x2, #0xf]
    // 0x5d9fcc: DecompressPointer r1
    //     0x5d9fcc: add             x1, x1, HEAP, lsl #32
    // 0x5d9fd0: ldur            x0, [fp, #-0x18]
    // 0x5d9fd4: ArrayStore: r1[r4] = r0  ; List_4
    //     0x5d9fd4: add             x25, x1, x4, lsl #2
    //     0x5d9fd8: add             x25, x25, #0xf
    //     0x5d9fdc: str             w0, [x25]
    //     0x5d9fe0: tbz             w0, #0, #0x5d9ffc
    //     0x5d9fe4: ldurb           w16, [x1, #-1]
    //     0x5d9fe8: ldurb           w17, [x0, #-1]
    //     0x5d9fec: and             x16, x17, x16, lsr #2
    //     0x5d9ff0: tst             x16, HEAP, lsr #32
    //     0x5d9ff4: b.eq            #0x5d9ffc
    //     0x5d9ff8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x5d9ffc: r0 = Null
    //     0x5d9ffc: mov             x0, NULL
    // 0x5da000: LeaveFrame
    //     0x5da000: mov             SP, fp
    //     0x5da004: ldp             fp, lr, [SP], #0x10
    // 0x5da008: ret
    //     0x5da008: ret             
    // 0x5da00c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5da00c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5da010: b               #0x5d9eac
    // 0x5da014: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5da014: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5da018: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x5da018: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void _schedulePeriodicPostFrameCallbacks(dynamic, [Duration?]) {
    // ** addr: 0x5da01c, size: 0x7c
    // 0x5da01c: EnterFrame
    //     0x5da01c: stp             fp, lr, [SP, #-0x10]!
    //     0x5da020: mov             fp, SP
    // 0x5da024: AllocStack(0x10)
    //     0x5da024: sub             SP, SP, #0x10
    // 0x5da028: SetupParameters(EditableTextState this /* r1 */, [dynamic _ = Null /* r0 */])
    //     0x5da028: mov             x0, x4
    //     0x5da02c: ldur            w1, [x0, #0x13]
    //     0x5da030: add             x1, x1, HEAP, lsl #32
    //     0x5da034: sub             x0, x1, #2
    //     0x5da038: add             x1, fp, w0, sxtw #2
    //     0x5da03c: ldr             x1, [x1, #0x10]
    //     0x5da040: cmp             w0, #2
    //     0x5da044: b.lt            #0x5da058
    //     0x5da048: add             x2, fp, w0, sxtw #2
    //     0x5da04c: ldr             x2, [x2, #8]
    //     0x5da050: mov             x0, x2
    //     0x5da054: b               #0x5da05c
    //     0x5da058: mov             x0, NULL
    //     0x5da05c: ldur            w2, [x1, #0x17]
    //     0x5da060: add             x2, x2, HEAP, lsl #32
    // 0x5da064: CheckStackOverflow
    //     0x5da064: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5da068: cmp             SP, x16
    //     0x5da06c: b.ls            #0x5da090
    // 0x5da070: LoadField: r1 = r2->field_f
    //     0x5da070: ldur            w1, [x2, #0xf]
    // 0x5da074: DecompressPointer r1
    //     0x5da074: add             x1, x1, HEAP, lsl #32
    // 0x5da078: stp             x0, x1, [SP]
    // 0x5da07c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x5da07c: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x5da080: r0 = _schedulePeriodicPostFrameCallbacks()
    //     0x5da080: bl              #0x5d9e78  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks
    // 0x5da084: LeaveFrame
    //     0x5da084: mov             SP, fp
    //     0x5da088: ldp             fp, lr, [SP], #0x10
    // 0x5da08c: ret
    //     0x5da08c: ret             
    // 0x5da090: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5da090: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5da094: b               #0x5da070
  }
  _ _updateCaretRectIfNeeded(/* No info */) {
    // ** addr: 0x5da098, size: 0xd8
    // 0x5da098: EnterFrame
    //     0x5da098: stp             fp, lr, [SP, #-0x10]!
    //     0x5da09c: mov             fp, SP
    // 0x5da0a0: AllocStack(0x20)
    //     0x5da0a0: sub             SP, SP, #0x20
    // 0x5da0a4: CheckStackOverflow
    //     0x5da0a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5da0a8: cmp             SP, x16
    //     0x5da0ac: b.ls            #0x5da164
    // 0x5da0b0: ldr             x1, [fp, #0x10]
    // 0x5da0b4: LoadField: r0 = r1->field_a7
    //     0x5da0b4: ldur            w0, [x1, #0xa7]
    // 0x5da0b8: DecompressPointer r0
    //     0x5da0b8: add             x0, x0, HEAP, lsl #32
    // 0x5da0bc: r16 = Sentinel
    //     0x5da0bc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5da0c0: cmp             w0, w16
    // 0x5da0c4: b.ne            #0x5da0d0
    // 0x5da0c8: r2 = renderEditable
    //     0x5da0c8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5da0cc: r0 = InitLateFinalInstanceField()
    //     0x5da0cc: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5da0d0: stur            x0, [fp, #-0x10]
    // 0x5da0d4: LoadField: r1 = r0->field_e3
    //     0x5da0d4: ldur            w1, [x0, #0xe3]
    // 0x5da0d8: DecompressPointer r1
    //     0x5da0d8: add             x1, x1, HEAP, lsl #32
    // 0x5da0dc: LoadField: r2 = r1->field_7
    //     0x5da0dc: ldur            x2, [x1, #7]
    // 0x5da0e0: tbnz            x2, #0x3f, #0x5da154
    // 0x5da0e4: LoadField: r3 = r1->field_f
    //     0x5da0e4: ldur            x3, [x1, #0xf]
    // 0x5da0e8: tbnz            x3, #0x3f, #0x5da154
    // 0x5da0ec: cmp             x2, x3
    // 0x5da0f0: b.ne            #0x5da154
    // 0x5da0f4: ldr             x2, [fp, #0x10]
    // 0x5da0f8: ArrayLoad: r3 = r1[0]  ; List_8
    //     0x5da0f8: ldur            x3, [x1, #0x17]
    // 0x5da0fc: stur            x3, [fp, #-8]
    // 0x5da100: r0 = TextPosition()
    //     0x5da100: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x5da104: mov             x1, x0
    // 0x5da108: ldur            x0, [fp, #-8]
    // 0x5da10c: StoreField: r1->field_7 = r0
    //     0x5da10c: stur            x0, [x1, #7]
    // 0x5da110: r0 = Instance_TextAffinity
    //     0x5da110: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x5da114: StoreField: r1->field_f = r0
    //     0x5da114: stur            w0, [x1, #0xf]
    // 0x5da118: ldur            x16, [fp, #-0x10]
    // 0x5da11c: stp             x1, x16, [SP]
    // 0x5da120: r0 = getLocalRectForCaret()
    //     0x5da120: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5da124: mov             x1, x0
    // 0x5da128: ldr             x0, [fp, #0x10]
    // 0x5da12c: LoadField: r2 = r0->field_3b
    //     0x5da12c: ldur            w2, [x0, #0x3b]
    // 0x5da130: DecompressPointer r2
    //     0x5da130: add             x2, x2, HEAP, lsl #32
    // 0x5da134: cmp             w2, NULL
    // 0x5da138: b.eq            #0x5da16c
    // 0x5da13c: stp             x1, x2, [SP]
    // 0x5da140: r0 = setCaretRect()
    //     0x5da140: bl              #0x5da170  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setCaretRect
    // 0x5da144: r0 = Null
    //     0x5da144: mov             x0, NULL
    // 0x5da148: LeaveFrame
    //     0x5da148: mov             SP, fp
    //     0x5da14c: ldp             fp, lr, [SP], #0x10
    // 0x5da150: ret
    //     0x5da150: ret             
    // 0x5da154: r0 = Null
    //     0x5da154: mov             x0, NULL
    // 0x5da158: LeaveFrame
    //     0x5da158: mov             SP, fp
    //     0x5da15c: ldp             fp, lr, [SP], #0x10
    // 0x5da160: ret
    //     0x5da160: ret             
    // 0x5da164: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5da164: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5da168: b               #0x5da0b0
    // 0x5da16c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5da16c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateComposingRectIfNeeded(/* No info */) {
    // ** addr: 0x5da644, size: 0x114
    // 0x5da644: EnterFrame
    //     0x5da644: stp             fp, lr, [SP, #-0x10]!
    //     0x5da648: mov             fp, SP
    // 0x5da64c: AllocStack(0x20)
    //     0x5da64c: sub             SP, SP, #0x20
    // 0x5da650: CheckStackOverflow
    //     0x5da650: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5da654: cmp             SP, x16
    //     0x5da658: b.ls            #0x5da748
    // 0x5da65c: ldr             x0, [fp, #0x10]
    // 0x5da660: LoadField: r1 = r0->field_b
    //     0x5da660: ldur            w1, [x0, #0xb]
    // 0x5da664: DecompressPointer r1
    //     0x5da664: add             x1, x1, HEAP, lsl #32
    // 0x5da668: cmp             w1, NULL
    // 0x5da66c: b.eq            #0x5da750
    // 0x5da670: LoadField: r2 = r1->field_b
    //     0x5da670: ldur            w2, [x1, #0xb]
    // 0x5da674: DecompressPointer r2
    //     0x5da674: add             x2, x2, HEAP, lsl #32
    // 0x5da678: LoadField: r1 = r2->field_27
    //     0x5da678: ldur            w1, [x2, #0x27]
    // 0x5da67c: DecompressPointer r1
    //     0x5da67c: add             x1, x1, HEAP, lsl #32
    // 0x5da680: LoadField: r2 = r1->field_f
    //     0x5da680: ldur            w2, [x1, #0xf]
    // 0x5da684: DecompressPointer r2
    //     0x5da684: add             x2, x2, HEAP, lsl #32
    // 0x5da688: mov             x1, x0
    // 0x5da68c: stur            x2, [fp, #-8]
    // 0x5da690: LoadField: r0 = r1->field_a7
    //     0x5da690: ldur            w0, [x1, #0xa7]
    // 0x5da694: DecompressPointer r0
    //     0x5da694: add             x0, x0, HEAP, lsl #32
    // 0x5da698: r16 = Sentinel
    //     0x5da698: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5da69c: cmp             w0, w16
    // 0x5da6a0: b.ne            #0x5da6ac
    // 0x5da6a4: r2 = renderEditable
    //     0x5da6a4: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5da6a8: r0 = InitLateFinalInstanceField()
    //     0x5da6a8: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5da6ac: ldur            x16, [fp, #-8]
    // 0x5da6b0: stp             x16, x0, [SP]
    // 0x5da6b4: r0 = getRectForComposingRange()
    //     0x5da6b4: bl              #0x5cbdd4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x5da6b8: cmp             w0, NULL
    // 0x5da6bc: b.ne            #0x5da718
    // 0x5da6c0: ldur            x0, [fp, #-8]
    // 0x5da6c4: LoadField: r1 = r0->field_7
    //     0x5da6c4: ldur            x1, [x0, #7]
    // 0x5da6c8: tbnz            x1, #0x3f, #0x5da6d4
    // 0x5da6cc: LoadField: r2 = r0->field_f
    //     0x5da6cc: ldur            x2, [x0, #0xf]
    // 0x5da6d0: tbz             x2, #0x3f, #0x5da6d8
    // 0x5da6d4: r1 = 0
    //     0x5da6d4: movz            x1, #0
    // 0x5da6d8: ldr             x0, [fp, #0x10]
    // 0x5da6dc: stur            x1, [fp, #-0x10]
    // 0x5da6e0: LoadField: r2 = r0->field_a7
    //     0x5da6e0: ldur            w2, [x0, #0xa7]
    // 0x5da6e4: DecompressPointer r2
    //     0x5da6e4: add             x2, x2, HEAP, lsl #32
    // 0x5da6e8: stur            x2, [fp, #-8]
    // 0x5da6ec: r0 = TextPosition()
    //     0x5da6ec: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0x5da6f0: mov             x1, x0
    // 0x5da6f4: ldur            x0, [fp, #-0x10]
    // 0x5da6f8: StoreField: r1->field_7 = r0
    //     0x5da6f8: stur            x0, [x1, #7]
    // 0x5da6fc: r0 = Instance_TextAffinity
    //     0x5da6fc: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x5da700: StoreField: r1->field_f = r0
    //     0x5da700: stur            w0, [x1, #0xf]
    // 0x5da704: ldur            x16, [fp, #-8]
    // 0x5da708: stp             x1, x16, [SP]
    // 0x5da70c: r0 = getLocalRectForCaret()
    //     0x5da70c: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0x5da710: mov             x1, x0
    // 0x5da714: b               #0x5da71c
    // 0x5da718: mov             x1, x0
    // 0x5da71c: ldr             x0, [fp, #0x10]
    // 0x5da720: LoadField: r2 = r0->field_3b
    //     0x5da720: ldur            w2, [x0, #0x3b]
    // 0x5da724: DecompressPointer r2
    //     0x5da724: add             x2, x2, HEAP, lsl #32
    // 0x5da728: cmp             w2, NULL
    // 0x5da72c: b.eq            #0x5da754
    // 0x5da730: stp             x1, x2, [SP]
    // 0x5da734: r0 = setComposingRect()
    //     0x5da734: bl              #0x5da758  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setComposingRect
    // 0x5da738: r0 = Null
    //     0x5da738: mov             x0, NULL
    // 0x5da73c: LeaveFrame
    //     0x5da73c: mov             SP, fp
    //     0x5da740: ldp             fp, lr, [SP], #0x10
    // 0x5da744: ret
    //     0x5da744: ret             
    // 0x5da748: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5da748: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5da74c: b               #0x5da65c
    // 0x5da750: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5da750: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5da754: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5da754: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateSelectionRects(/* No info */) {
    // ** addr: 0x5dab88, size: 0x44
    // 0x5dab88: EnterFrame
    //     0x5dab88: stp             fp, lr, [SP, #-0x10]!
    //     0x5dab8c: mov             fp, SP
    // 0x5dab90: mov             x1, x4
    // 0x5dab94: LoadField: r2 = r1->field_13
    //     0x5dab94: ldur            w2, [x1, #0x13]
    // 0x5dab98: DecompressPointer r2
    //     0x5dab98: add             x2, x2, HEAP, lsl #32
    // 0x5dab9c: sub             x1, x2, #2
    // 0x5daba0: add             x2, fp, w1, sxtw #2
    // 0x5daba4: ldr             x2, [x2, #0x10]
    // 0x5daba8: LoadField: r1 = r2->field_b
    //     0x5daba8: ldur            w1, [x2, #0xb]
    // 0x5dabac: DecompressPointer r1
    //     0x5dabac: add             x1, x1, HEAP, lsl #32
    // 0x5dabb0: cmp             w1, NULL
    // 0x5dabb4: b.eq            #0x5dabc8
    // 0x5dabb8: r0 = Null
    //     0x5dabb8: mov             x0, NULL
    // 0x5dabbc: LeaveFrame
    //     0x5dabbc: mov             SP, fp
    //     0x5dabc0: ldp             fp, lr, [SP], #0x10
    // 0x5dabc4: ret
    //     0x5dabc4: ret             
    // 0x5dabc8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dabc8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateSizeAndTransform(/* No info */) {
    // ** addr: 0x5dabcc, size: 0xa0
    // 0x5dabcc: EnterFrame
    //     0x5dabcc: stp             fp, lr, [SP, #-0x10]!
    //     0x5dabd0: mov             fp, SP
    // 0x5dabd4: AllocStack(0x20)
    //     0x5dabd4: sub             SP, SP, #0x20
    // 0x5dabd8: CheckStackOverflow
    //     0x5dabd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dabdc: cmp             SP, x16
    //     0x5dabe0: b.ls            #0x5dac60
    // 0x5dabe4: ldr             x1, [fp, #0x10]
    // 0x5dabe8: LoadField: r0 = r1->field_a7
    //     0x5dabe8: ldur            w0, [x1, #0xa7]
    // 0x5dabec: DecompressPointer r0
    //     0x5dabec: add             x0, x0, HEAP, lsl #32
    // 0x5dabf0: r16 = Sentinel
    //     0x5dabf0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5dabf4: cmp             w0, w16
    // 0x5dabf8: b.ne            #0x5dac04
    // 0x5dabfc: r2 = renderEditable
    //     0x5dabfc: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x5dac00: r0 = InitLateFinalInstanceField()
    //     0x5dac00: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x5dac04: str             x0, [SP]
    // 0x5dac08: r0 = size()
    //     0x5dac08: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x5dac0c: mov             x1, x0
    // 0x5dac10: ldr             x0, [fp, #0x10]
    // 0x5dac14: stur            x1, [fp, #-8]
    // 0x5dac18: LoadField: r2 = r0->field_a7
    //     0x5dac18: ldur            w2, [x0, #0xa7]
    // 0x5dac1c: DecompressPointer r2
    //     0x5dac1c: add             x2, x2, HEAP, lsl #32
    // 0x5dac20: stp             NULL, x2, [SP]
    // 0x5dac24: r0 = getTransformTo()
    //     0x5dac24: bl              #0x5c933c  ; [package:flutter/src/rendering/object.dart] RenderObject::getTransformTo
    // 0x5dac28: mov             x1, x0
    // 0x5dac2c: ldr             x0, [fp, #0x10]
    // 0x5dac30: LoadField: r2 = r0->field_3b
    //     0x5dac30: ldur            w2, [x0, #0x3b]
    // 0x5dac34: DecompressPointer r2
    //     0x5dac34: add             x2, x2, HEAP, lsl #32
    // 0x5dac38: cmp             w2, NULL
    // 0x5dac3c: b.eq            #0x5dac68
    // 0x5dac40: ldur            x16, [fp, #-8]
    // 0x5dac44: stp             x16, x2, [SP, #8]
    // 0x5dac48: str             x1, [SP]
    // 0x5dac4c: r0 = setEditableSizeAndTransform()
    //     0x5dac4c: bl              #0x5dac6c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditableSizeAndTransform
    // 0x5dac50: r0 = Null
    //     0x5dac50: mov             x0, NULL
    // 0x5dac54: LeaveFrame
    //     0x5dac54: mov             SP, fp
    //     0x5dac58: ldp             fp, lr, [SP], #0x10
    // 0x5dac5c: ret
    //     0x5dac5c: ret             
    // 0x5dac60: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dac60: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dac64: b               #0x5dabe4
    // 0x5dac68: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dac68: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _effectiveAutofillClient(/* No info */) {
    // ** addr: 0x5db0fc, size: 0x38
    // 0x5db0fc: EnterFrame
    //     0x5db0fc: stp             fp, lr, [SP, #-0x10]!
    //     0x5db100: mov             fp, SP
    // 0x5db104: ldr             x1, [fp, #0x10]
    // 0x5db108: LoadField: r2 = r1->field_b
    //     0x5db108: ldur            w2, [x1, #0xb]
    // 0x5db10c: DecompressPointer r2
    //     0x5db10c: add             x2, x2, HEAP, lsl #32
    // 0x5db110: cmp             w2, NULL
    // 0x5db114: b.eq            #0x5db130
    // 0x5db118: r17 = 259
    //     0x5db118: movz            x17, #0x103
    // 0x5db11c: ldr             w0, [x2, x17]
    // 0x5db120: DecompressPointer r0
    //     0x5db120: add             x0, x0, HEAP, lsl #32
    // 0x5db124: LeaveFrame
    //     0x5db124: mov             SP, fp
    //     0x5db128: ldp             fp, lr, [SP], #0x10
    // 0x5db12c: ret
    //     0x5db12c: ret             
    // 0x5db130: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5db130: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ textInputConfiguration(/* No info */) {
    // ** addr: 0x5dbd18, size: 0x1c0
    // 0x5dbd18: EnterFrame
    //     0x5dbd18: stp             fp, lr, [SP, #-0x10]!
    //     0x5dbd1c: mov             fp, SP
    // 0x5dbd20: AllocStack(0x40)
    //     0x5dbd20: sub             SP, SP, #0x40
    // 0x5dbd24: r0 = const []
    //     0x5dbd24: ldr             x0, [PP, #0x6740]  ; [pp+0x6740] List<String>(0)
    // 0x5dbd28: CheckStackOverflow
    //     0x5dbd28: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dbd2c: cmp             SP, x16
    //     0x5dbd30: b.ls            #0x5dbec8
    // 0x5dbd34: ldr             x1, [fp, #0x10]
    // 0x5dbd38: LoadField: r2 = r1->field_b
    //     0x5dbd38: ldur            w2, [x1, #0xb]
    // 0x5dbd3c: DecompressPointer r2
    //     0x5dbd3c: add             x2, x2, HEAP, lsl #32
    // 0x5dbd40: cmp             w2, NULL
    // 0x5dbd44: b.eq            #0x5dbed0
    // 0x5dbd48: LoadField: r2 = r0->field_7
    //     0x5dbd48: ldur            w2, [x0, #7]
    // 0x5dbd4c: DecompressPointer r2
    //     0x5dbd4c: add             x2, x2, HEAP, lsl #32
    // 0x5dbd50: stur            x2, [fp, #-8]
    // 0x5dbd54: str             x1, [SP]
    // 0x5dbd58: r0 = autofillId()
    //     0x5dbd58: bl              #0x5dbed8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::autofillId
    // 0x5dbd5c: mov             x1, x0
    // 0x5dbd60: ldr             x0, [fp, #0x10]
    // 0x5dbd64: stur            x1, [fp, #-0x20]
    // 0x5dbd68: LoadField: r2 = r0->field_b
    //     0x5dbd68: ldur            w2, [x0, #0xb]
    // 0x5dbd6c: DecompressPointer r2
    //     0x5dbd6c: add             x2, x2, HEAP, lsl #32
    // 0x5dbd70: stur            x2, [fp, #-0x18]
    // 0x5dbd74: cmp             w2, NULL
    // 0x5dbd78: b.eq            #0x5dbed4
    // 0x5dbd7c: LoadField: r0 = r2->field_b
    //     0x5dbd7c: ldur            w0, [x2, #0xb]
    // 0x5dbd80: DecompressPointer r0
    //     0x5dbd80: add             x0, x0, HEAP, lsl #32
    // 0x5dbd84: LoadField: r3 = r0->field_27
    //     0x5dbd84: ldur            w3, [x0, #0x27]
    // 0x5dbd88: DecompressPointer r3
    //     0x5dbd88: add             x3, x3, HEAP, lsl #32
    // 0x5dbd8c: stur            x3, [fp, #-0x10]
    // 0x5dbd90: r0 = AutofillConfiguration()
    //     0x5dbd90: bl              #0x5dbf7c  ; AllocateAutofillConfigurationStub -> AutofillConfiguration (size=0x1c)
    // 0x5dbd94: mov             x3, x0
    // 0x5dbd98: r0 = true
    //     0x5dbd98: add             x0, NULL, #0x20  ; true
    // 0x5dbd9c: stur            x3, [fp, #-0x28]
    // 0x5dbda0: StoreField: r3->field_7 = r0
    //     0x5dbda0: stur            w0, [x3, #7]
    // 0x5dbda4: ldur            x1, [fp, #-0x20]
    // 0x5dbda8: StoreField: r3->field_b = r1
    //     0x5dbda8: stur            w1, [x3, #0xb]
    // 0x5dbdac: ldur            x1, [fp, #-8]
    // 0x5dbdb0: r2 = 0
    //     0x5dbdb0: movz            x2, #0
    // 0x5dbdb4: r0 = AllocateArray()
    //     0x5dbdb4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dbdb8: mov             x1, x0
    // 0x5dbdbc: ldur            x0, [fp, #-0x28]
    // 0x5dbdc0: StoreField: r0->field_f = r1
    //     0x5dbdc0: stur            w1, [x0, #0xf]
    // 0x5dbdc4: ldur            x1, [fp, #-0x10]
    // 0x5dbdc8: StoreField: r0->field_13 = r1
    //     0x5dbdc8: stur            w1, [x0, #0x13]
    // 0x5dbdcc: ldur            x1, [fp, #-0x18]
    // 0x5dbdd0: LoadField: r2 = r1->field_8f
    //     0x5dbdd0: ldur            w2, [x1, #0x8f]
    // 0x5dbdd4: DecompressPointer r2
    //     0x5dbdd4: add             x2, x2, HEAP, lsl #32
    // 0x5dbdd8: stur            x2, [fp, #-0x38]
    // 0x5dbddc: LoadField: r3 = r1->field_23
    //     0x5dbddc: ldur            w3, [x1, #0x23]
    // 0x5dbde0: DecompressPointer r3
    //     0x5dbde0: add             x3, x3, HEAP, lsl #32
    // 0x5dbde4: stur            x3, [fp, #-0x30]
    // 0x5dbde8: LoadField: r4 = r1->field_3f
    //     0x5dbde8: ldur            w4, [x1, #0x3f]
    // 0x5dbdec: DecompressPointer r4
    //     0x5dbdec: add             x4, x4, HEAP, lsl #32
    // 0x5dbdf0: stur            x4, [fp, #-0x20]
    // 0x5dbdf4: LoadField: r5 = r1->field_93
    //     0x5dbdf4: ldur            w5, [x1, #0x93]
    // 0x5dbdf8: DecompressPointer r5
    //     0x5dbdf8: add             x5, x5, HEAP, lsl #32
    // 0x5dbdfc: cmp             w5, NULL
    // 0x5dbe00: b.ne            #0x5dbe40
    // 0x5dbe04: LoadField: r5 = r2->field_7
    //     0x5dbe04: ldur            x5, [x2, #7]
    // 0x5dbe08: lsl             x6, x5, #1
    // 0x5dbe0c: cmp             w6, #2
    // 0x5dbe10: b.ne            #0x5dbe3c
    // 0x5dbe14: LoadField: r5 = r2->field_f
    //     0x5dbe14: ldur            w5, [x2, #0xf]
    // 0x5dbe18: DecompressPointer r5
    //     0x5dbe18: add             x5, x5, HEAP, lsl #32
    // 0x5dbe1c: cmp             w5, NULL
    // 0x5dbe20: b.ne            #0x5dbe3c
    // 0x5dbe24: LoadField: r5 = r2->field_13
    //     0x5dbe24: ldur            w5, [x2, #0x13]
    // 0x5dbe28: DecompressPointer r5
    //     0x5dbe28: add             x5, x5, HEAP, lsl #32
    // 0x5dbe2c: cmp             w5, NULL
    // 0x5dbe30: b.ne            #0x5dbe3c
    // 0x5dbe34: r5 = Instance_TextInputAction
    //     0x5dbe34: ldr             x5, [PP, #0x6758]  ; [pp+0x6758] Obj!TextInputAction@c43151
    // 0x5dbe38: b               #0x5dbe40
    // 0x5dbe3c: r5 = Instance_TextInputAction
    //     0x5dbe3c: ldr             x5, [PP, #0x6760]  ; [pp+0x6760] Obj!TextInputAction@c43131
    // 0x5dbe40: stur            x5, [fp, #-0x10]
    // 0x5dbe44: LoadField: r6 = r1->field_e3
    //     0x5dbe44: ldur            w6, [x1, #0xe3]
    // 0x5dbe48: DecompressPointer r6
    //     0x5dbe48: add             x6, x6, HEAP, lsl #32
    // 0x5dbe4c: stur            x6, [fp, #-8]
    // 0x5dbe50: r0 = TextInputConfiguration()
    //     0x5dbe50: bl              #0x5dbd0c  ; AllocateTextInputConfigurationStub -> TextInputConfiguration (size=0x48)
    // 0x5dbe54: ldur            x1, [fp, #-0x38]
    // 0x5dbe58: StoreField: r0->field_7 = r1
    //     0x5dbe58: stur            w1, [x0, #7]
    // 0x5dbe5c: ldur            x1, [fp, #-0x30]
    // 0x5dbe60: StoreField: r0->field_b = r1
    //     0x5dbe60: stur            w1, [x0, #0xb]
    // 0x5dbe64: r1 = false
    //     0x5dbe64: add             x1, NULL, #0x30  ; false
    // 0x5dbe68: StoreField: r0->field_f = r1
    //     0x5dbe68: stur            w1, [x0, #0xf]
    // 0x5dbe6c: r2 = true
    //     0x5dbe6c: add             x2, NULL, #0x20  ; true
    // 0x5dbe70: StoreField: r0->field_13 = r2
    //     0x5dbe70: stur            w2, [x0, #0x13]
    // 0x5dbe74: StoreField: r0->field_23 = r2
    //     0x5dbe74: stur            w2, [x0, #0x23]
    // 0x5dbe78: StoreField: r0->field_27 = r2
    //     0x5dbe78: stur            w2, [x0, #0x27]
    // 0x5dbe7c: ldur            x3, [fp, #-0x10]
    // 0x5dbe80: StoreField: r0->field_2f = r3
    //     0x5dbe80: stur            w3, [x0, #0x2f]
    // 0x5dbe84: ldur            x3, [fp, #-8]
    // 0x5dbe88: StoreField: r0->field_37 = r3
    //     0x5dbe88: stur            w3, [x0, #0x37]
    // 0x5dbe8c: r3 = Instance_TextCapitalization
    //     0x5dbe8c: ldr             x3, [PP, #0x6748]  ; [pp+0x6748] Obj!TextCapitalization@c43111
    // 0x5dbe90: StoreField: r0->field_33 = r3
    //     0x5dbe90: stur            w3, [x0, #0x33]
    // 0x5dbe94: ldur            x3, [fp, #-0x28]
    // 0x5dbe98: ArrayStore: r0[0] = r3  ; List_4
    //     0x5dbe98: stur            w3, [x0, #0x17]
    // 0x5dbe9c: StoreField: r0->field_3b = r2
    //     0x5dbe9c: stur            w2, [x0, #0x3b]
    // 0x5dbea0: r2 = const []
    //     0x5dbea0: ldr             x2, [PP, #0x6740]  ; [pp+0x6740] List<String>(0)
    // 0x5dbea4: StoreField: r0->field_3f = r2
    //     0x5dbea4: stur            w2, [x0, #0x3f]
    // 0x5dbea8: StoreField: r0->field_43 = r1
    //     0x5dbea8: stur            w1, [x0, #0x43]
    // 0x5dbeac: r1 = Instance_SmartDashesType
    //     0x5dbeac: ldr             x1, [PP, #0x6750]  ; [pp+0x6750] Obj!SmartDashesType@c432f1
    // 0x5dbeb0: StoreField: r0->field_1b = r1
    //     0x5dbeb0: stur            w1, [x0, #0x1b]
    // 0x5dbeb4: ldur            x1, [fp, #-0x20]
    // 0x5dbeb8: StoreField: r0->field_1f = r1
    //     0x5dbeb8: stur            w1, [x0, #0x1f]
    // 0x5dbebc: LeaveFrame
    //     0x5dbebc: mov             SP, fp
    //     0x5dbec0: ldp             fp, lr, [SP], #0x10
    // 0x5dbec4: ret
    //     0x5dbec4: ret             
    // 0x5dbec8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dbec8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dbecc: b               #0x5dbd34
    // 0x5dbed0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dbed0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dbed4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dbed4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ autofillId(/* No info */) {
    // ** addr: 0x5dbed8, size: 0x64
    // 0x5dbed8: EnterFrame
    //     0x5dbed8: stp             fp, lr, [SP, #-0x10]!
    //     0x5dbedc: mov             fp, SP
    // 0x5dbee0: AllocStack(0x10)
    //     0x5dbee0: sub             SP, SP, #0x10
    // 0x5dbee4: CheckStackOverflow
    //     0x5dbee4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dbee8: cmp             SP, x16
    //     0x5dbeec: b.ls            #0x5dbf34
    // 0x5dbef0: r1 = Null
    //     0x5dbef0: mov             x1, NULL
    // 0x5dbef4: r2 = 4
    //     0x5dbef4: movz            x2, #0x4
    // 0x5dbef8: r0 = AllocateArray()
    //     0x5dbef8: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dbefc: stur            x0, [fp, #-8]
    // 0x5dbf00: r17 = "EditableText-"
    //     0x5dbf00: ldr             x17, [PP, #0x6768]  ; [pp+0x6768] "EditableText-"
    // 0x5dbf04: StoreField: r0->field_f = r17
    //     0x5dbf04: stur            w17, [x0, #0xf]
    // 0x5dbf08: ldr             x16, [fp, #0x10]
    // 0x5dbf0c: str             x16, [SP]
    // 0x5dbf10: r0 = _getHash()
    //     0x5dbf10: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0x5dbf14: mov             x1, x0
    // 0x5dbf18: ldur            x0, [fp, #-8]
    // 0x5dbf1c: StoreField: r0->field_13 = r1
    //     0x5dbf1c: stur            w1, [x0, #0x13]
    // 0x5dbf20: str             x0, [SP]
    // 0x5dbf24: r0 = _interpolate()
    //     0x5dbf24: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x5dbf28: LeaveFrame
    //     0x5dbf28: mov             SP, fp
    //     0x5dbf2c: ldp             fp, lr, [SP], #0x10
    // 0x5dbf30: ret
    //     0x5dbf30: ret             
    // 0x5dbf34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dbf34: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dbf38: b               #0x5dbef0
  }
  get _ _shouldCreateInputConnection(/* No info */) {
    // ** addr: 0x5dc080, size: 0x38
    // 0x5dc080: EnterFrame
    //     0x5dc080: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc084: mov             fp, SP
    // 0x5dc088: ldr             x1, [fp, #0x10]
    // 0x5dc08c: LoadField: r2 = r1->field_b
    //     0x5dc08c: ldur            w2, [x1, #0xb]
    // 0x5dc090: DecompressPointer r2
    //     0x5dc090: add             x2, x2, HEAP, lsl #32
    // 0x5dc094: cmp             w2, NULL
    // 0x5dc098: b.eq            #0x5dc0b4
    // 0x5dc09c: LoadField: r1 = r2->field_23
    //     0x5dc09c: ldur            w1, [x2, #0x23]
    // 0x5dc0a0: DecompressPointer r1
    //     0x5dc0a0: add             x1, x1, HEAP, lsl #32
    // 0x5dc0a4: eor             x0, x1, #0x10
    // 0x5dc0a8: LeaveFrame
    //     0x5dc0a8: mov             SP, fp
    //     0x5dc0ac: ldp             fp, lr, [SP], #0x10
    // 0x5dc0b0: ret
    //     0x5dc0b0: ret             
    // 0x5dc0b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dc0b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  RenderEditable renderEditable(EditableTextState) {
    // ** addr: 0x5dc5a4, size: 0x94
    // 0x5dc5a4: EnterFrame
    //     0x5dc5a4: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc5a8: mov             fp, SP
    // 0x5dc5ac: AllocStack(0x10)
    //     0x5dc5ac: sub             SP, SP, #0x10
    // 0x5dc5b0: CheckStackOverflow
    //     0x5dc5b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dc5b4: cmp             SP, x16
    //     0x5dc5b8: b.ls            #0x5dc628
    // 0x5dc5bc: ldr             x0, [fp, #0x10]
    // 0x5dc5c0: LoadField: r1 = r0->field_2f
    //     0x5dc5c0: ldur            w1, [x0, #0x2f]
    // 0x5dc5c4: DecompressPointer r1
    //     0x5dc5c4: add             x1, x1, HEAP, lsl #32
    // 0x5dc5c8: str             x1, [SP]
    // 0x5dc5cc: r0 = _currentElement()
    //     0x5dc5cc: bl              #0x5b02fc  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0x5dc5d0: cmp             w0, NULL
    // 0x5dc5d4: b.eq            #0x5dc630
    // 0x5dc5d8: str             x0, [SP]
    // 0x5dc5dc: r0 = findRenderObject()
    //     0x5dc5dc: bl              #0x5c8648  ; [package:flutter/src/widgets/framework.dart] Element::findRenderObject
    // 0x5dc5e0: mov             x3, x0
    // 0x5dc5e4: stur            x3, [fp, #-8]
    // 0x5dc5e8: cmp             w3, NULL
    // 0x5dc5ec: b.eq            #0x5dc634
    // 0x5dc5f0: mov             x0, x3
    // 0x5dc5f4: r2 = Null
    //     0x5dc5f4: mov             x2, NULL
    // 0x5dc5f8: r1 = Null
    //     0x5dc5f8: mov             x1, NULL
    // 0x5dc5fc: r4 = LoadClassIdInstr(r0)
    //     0x5dc5fc: ldur            x4, [x0, #-1]
    //     0x5dc600: ubfx            x4, x4, #0xc, #0x14
    // 0x5dc604: cmp             x4, #0x811
    // 0x5dc608: b.eq            #0x5dc618
    // 0x5dc60c: r8 = RenderEditable
    //     0x5dc60c: ldr             x8, [PP, #0x5fd8]  ; [pp+0x5fd8] Type: RenderEditable
    // 0x5dc610: r3 = Null
    //     0x5dc610: ldr             x3, [PP, #0x5fe0]  ; [pp+0x5fe0] Null
    // 0x5dc614: r0 = DefaultTypeTest()
    //     0x5dc614: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0x5dc618: ldur            x0, [fp, #-8]
    // 0x5dc61c: LeaveFrame
    //     0x5dc61c: mov             SP, fp
    //     0x5dc620: ldp             fp, lr, [SP], #0x10
    // 0x5dc624: ret
    //     0x5dc624: ret             
    // 0x5dc628: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dc628: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dc62c: b               #0x5dc5bc
    // 0x5dc630: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dc630: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dc634: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dc634: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onFloatingCursorResetTick(dynamic) {
    // ** addr: 0x5dc638, size: 0x48
    // 0x5dc638: EnterFrame
    //     0x5dc638: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc63c: mov             fp, SP
    // 0x5dc640: AllocStack(0x8)
    //     0x5dc640: sub             SP, SP, #8
    // 0x5dc644: SetupParameters()
    //     0x5dc644: ldr             x0, [fp, #0x10]
    //     0x5dc648: ldur            w1, [x0, #0x17]
    //     0x5dc64c: add             x1, x1, HEAP, lsl #32
    // 0x5dc650: CheckStackOverflow
    //     0x5dc650: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dc654: cmp             SP, x16
    //     0x5dc658: b.ls            #0x5dc678
    // 0x5dc65c: LoadField: r0 = r1->field_f
    //     0x5dc65c: ldur            w0, [x1, #0xf]
    // 0x5dc660: DecompressPointer r0
    //     0x5dc660: add             x0, x0, HEAP, lsl #32
    // 0x5dc664: str             x0, [SP]
    // 0x5dc668: r0 = _onFloatingCursorResetTick()
    //     0x5dc668: bl              #0x5d1654  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onFloatingCursorResetTick
    // 0x5dc66c: LeaveFrame
    //     0x5dc66c: mov             SP, fp
    //     0x5dc670: ldp             fp, lr, [SP], #0x10
    // 0x5dc674: ret
    //     0x5dc674: ret             
    // 0x5dc678: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dc678: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dc67c: b               #0x5dc65c
  }
  _ performAction(/* No info */) {
    // ** addr: 0x5dc98c, size: 0xd8
    // 0x5dc98c: EnterFrame
    //     0x5dc98c: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc990: mov             fp, SP
    // 0x5dc994: AllocStack(0x18)
    //     0x5dc994: sub             SP, SP, #0x18
    // 0x5dc998: CheckStackOverflow
    //     0x5dc998: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dc99c: cmp             SP, x16
    //     0x5dc9a0: b.ls            #0x5dca58
    // 0x5dc9a4: ldr             x0, [fp, #0x10]
    // 0x5dc9a8: LoadField: r1 = r0->field_7
    //     0x5dc9a8: ldur            x1, [x0, #7]
    // 0x5dc9ac: cmp             x1, #6
    // 0x5dc9b0: b.gt            #0x5dc9c8
    // 0x5dc9b4: cmp             x1, #3
    // 0x5dc9b8: b.gt            #0x5dc9e0
    // 0x5dc9bc: cmp             x1, #1
    // 0x5dc9c0: b.gt            #0x5dc9e0
    // 0x5dc9c4: b               #0x5dca00
    // 0x5dc9c8: cmp             x1, #9
    // 0x5dc9cc: b.gt            #0x5dc9f8
    // 0x5dc9d0: cmp             x1, #8
    // 0x5dc9d4: b.gt            #0x5dca00
    // 0x5dc9d8: cmp             x1, #7
    // 0x5dc9dc: b.gt            #0x5dca00
    // 0x5dc9e0: ldr             x16, [fp, #0x18]
    // 0x5dc9e4: stp             x0, x16, [SP, #8]
    // 0x5dc9e8: r16 = true
    //     0x5dc9e8: add             x16, NULL, #0x20  ; true
    // 0x5dc9ec: str             x16, [SP]
    // 0x5dc9f0: r0 = _finalizeEditing()
    //     0x5dc9f0: bl              #0x5dca64  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x5dc9f4: b               #0x5dca48
    // 0x5dc9f8: cmp             x1, #0xb
    // 0x5dc9fc: b.gt            #0x5dca18
    // 0x5dca00: ldr             x16, [fp, #0x18]
    // 0x5dca04: stp             x0, x16, [SP, #8]
    // 0x5dca08: r16 = false
    //     0x5dca08: add             x16, NULL, #0x30  ; false
    // 0x5dca0c: str             x16, [SP]
    // 0x5dca10: r0 = _finalizeEditing()
    //     0x5dca10: bl              #0x5dca64  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x5dca14: b               #0x5dca48
    // 0x5dca18: ldr             x1, [fp, #0x18]
    // 0x5dca1c: LoadField: r2 = r1->field_b
    //     0x5dca1c: ldur            w2, [x1, #0xb]
    // 0x5dca20: DecompressPointer r2
    //     0x5dca20: add             x2, x2, HEAP, lsl #32
    // 0x5dca24: cmp             w2, NULL
    // 0x5dca28: b.eq            #0x5dca60
    // 0x5dca2c: LoadField: r3 = r2->field_73
    //     0x5dca2c: ldur            x3, [x2, #0x73]
    // 0x5dca30: cmp             x3, #1
    // 0x5dca34: b.ne            #0x5dca48
    // 0x5dca38: stp             x0, x1, [SP, #8]
    // 0x5dca3c: r16 = true
    //     0x5dca3c: add             x16, NULL, #0x20  ; true
    // 0x5dca40: str             x16, [SP]
    // 0x5dca44: r0 = _finalizeEditing()
    //     0x5dca44: bl              #0x5dca64  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_finalizeEditing
    // 0x5dca48: r0 = Null
    //     0x5dca48: mov             x0, NULL
    // 0x5dca4c: LeaveFrame
    //     0x5dca4c: mov             SP, fp
    //     0x5dca50: ldp             fp, lr, [SP], #0x10
    // 0x5dca54: ret
    //     0x5dca54: ret             
    // 0x5dca58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dca58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dca5c: b               #0x5dc9a4
    // 0x5dca60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dca60: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _finalizeEditing(/* No info */) {
    // ** addr: 0x5dca64, size: 0x3d4
    // 0x5dca64: EnterFrame
    //     0x5dca64: stp             fp, lr, [SP, #-0x10]!
    //     0x5dca68: mov             fp, SP
    // 0x5dca6c: AllocStack(0x80)
    //     0x5dca6c: sub             SP, SP, #0x80
    // 0x5dca70: CheckStackOverflow
    //     0x5dca70: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dca74: cmp             SP, x16
    //     0x5dca78: b.ls            #0x5dce1c
    // 0x5dca7c: ldr             x1, [fp, #0x20]
    // 0x5dca80: LoadField: r0 = r1->field_b
    //     0x5dca80: ldur            w0, [x1, #0xb]
    // 0x5dca84: DecompressPointer r0
    //     0x5dca84: add             x0, x0, HEAP, lsl #32
    // 0x5dca88: cmp             w0, NULL
    // 0x5dca8c: b.eq            #0x5dce24
    // 0x5dca90: LoadField: r2 = r0->field_9b
    //     0x5dca90: ldur            w2, [x0, #0x9b]
    // 0x5dca94: DecompressPointer r2
    //     0x5dca94: add             x2, x2, HEAP, lsl #32
    // 0x5dca98: stur            x2, [fp, #-0x58]
    // 0x5dca9c: cmp             w2, NULL
    // 0x5dcaa0: b.eq            #0x5dcad0
    // 0x5dcaa4: ldr             x4, [fp, #0x18]
    // 0x5dcaa8: ldr             x3, [fp, #0x10]
    // 0x5dcaac: str             x2, [SP]
    // 0x5dcab0: mov             x0, x2
    // 0x5dcab4: ClosureCall
    //     0x5dcab4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x5dcab8: ldur            x2, [x0, #0x1f]
    //     0x5dcabc: blr             x2
    // 0x5dcac0: ldr             x2, [fp, #0x20]
    // 0x5dcac4: ldr             x1, [fp, #0x18]
    // 0x5dcac8: ldr             x0, [fp, #0x10]
    // 0x5dcacc: b               #0x5dcc7c
    // 0x5dcad0: ldr             x1, [fp, #0x10]
    // 0x5dcad4: LoadField: r2 = r0->field_b
    //     0x5dcad4: ldur            w2, [x0, #0xb]
    // 0x5dcad8: DecompressPointer r2
    //     0x5dcad8: add             x2, x2, HEAP, lsl #32
    // 0x5dcadc: str             x2, [SP]
    // 0x5dcae0: r0 = clearComposing()
    //     0x5dcae0: bl              #0x5e20e4  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::clearComposing
    // 0x5dcae4: ldr             x0, [fp, #0x10]
    // 0x5dcae8: tbnz            w0, #4, #0x5dcb9c
    // 0x5dcaec: ldr             x1, [fp, #0x18]
    // 0x5dcaf0: LoadField: r2 = r1->field_7
    //     0x5dcaf0: ldur            x2, [x1, #7]
    // 0x5dcaf4: cmp             x2, #6
    // 0x5dcaf8: b.gt            #0x5dcb34
    // 0x5dcafc: cmp             x2, #3
    // 0x5dcb00: b.le            #0x5dcb74
    // 0x5dcb04: cmp             x2, #5
    // 0x5dcb08: b.le            #0x5dcb74
    // 0x5dcb0c: ldr             x2, [fp, #0x20]
    // 0x5dcb10: LoadField: r3 = r2->field_b
    //     0x5dcb10: ldur            w3, [x2, #0xb]
    // 0x5dcb14: DecompressPointer r3
    //     0x5dcb14: add             x3, x3, HEAP, lsl #32
    // 0x5dcb18: cmp             w3, NULL
    // 0x5dcb1c: b.eq            #0x5dce28
    // 0x5dcb20: LoadField: r4 = r3->field_f
    //     0x5dcb20: ldur            w4, [x3, #0xf]
    // 0x5dcb24: DecompressPointer r4
    //     0x5dcb24: add             x4, x4, HEAP, lsl #32
    // 0x5dcb28: str             x4, [SP]
    // 0x5dcb2c: r0 = nextFocus()
    //     0x5dcb2c: bl              #0x5e2048  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::nextFocus
    // 0x5dcb30: b               #0x5dcb9c
    // 0x5dcb34: cmp             x2, #9
    // 0x5dcb38: b.gt            #0x5dcb74
    // 0x5dcb3c: cmp             x2, #8
    // 0x5dcb40: b.gt            #0x5dcb74
    // 0x5dcb44: cmp             x2, #7
    // 0x5dcb48: b.gt            #0x5dcb74
    // 0x5dcb4c: ldr             x0, [fp, #0x20]
    // 0x5dcb50: LoadField: r1 = r0->field_b
    //     0x5dcb50: ldur            w1, [x0, #0xb]
    // 0x5dcb54: DecompressPointer r1
    //     0x5dcb54: add             x1, x1, HEAP, lsl #32
    // 0x5dcb58: cmp             w1, NULL
    // 0x5dcb5c: b.eq            #0x5dce2c
    // 0x5dcb60: LoadField: r2 = r1->field_f
    //     0x5dcb60: ldur            w2, [x1, #0xf]
    // 0x5dcb64: DecompressPointer r2
    //     0x5dcb64: add             x2, x2, HEAP, lsl #32
    // 0x5dcb68: str             x2, [SP]
    // 0x5dcb6c: r0 = previousFocus()
    //     0x5dcb6c: bl              #0x5dd4f4  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::previousFocus
    // 0x5dcb70: b               #0x5dcb9c
    // 0x5dcb74: ldr             x0, [fp, #0x20]
    // 0x5dcb78: LoadField: r1 = r0->field_b
    //     0x5dcb78: ldur            w1, [x0, #0xb]
    // 0x5dcb7c: DecompressPointer r1
    //     0x5dcb7c: add             x1, x1, HEAP, lsl #32
    // 0x5dcb80: cmp             w1, NULL
    // 0x5dcb84: b.eq            #0x5dce30
    // 0x5dcb88: LoadField: r2 = r1->field_f
    //     0x5dcb88: ldur            w2, [x1, #0xf]
    // 0x5dcb8c: DecompressPointer r2
    //     0x5dcb8c: add             x2, x2, HEAP, lsl #32
    // 0x5dcb90: str             x2, [SP]
    // 0x5dcb94: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x5dcb94: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x5dcb98: r0 = unfocus()
    //     0x5dcb98: bl              #0x5cce84  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x5dcb9c: ldr             x3, [fp, #0x20]
    // 0x5dcba0: ldr             x2, [fp, #0x18]
    // 0x5dcba4: ldr             x1, [fp, #0x10]
    // 0x5dcba8: b               #0x5dcc88
    // 0x5dcbac: sub             SP, fp, #0x80
    // 0x5dcbb0: mov             x3, x0
    // 0x5dcbb4: stur            x0, [fp, #-0x58]
    // 0x5dcbb8: mov             x0, x1
    // 0x5dcbbc: stur            x1, [fp, #-0x60]
    // 0x5dcbc0: r1 = Null
    //     0x5dcbc0: mov             x1, NULL
    // 0x5dcbc4: r2 = 4
    //     0x5dcbc4: movz            x2, #0x4
    // 0x5dcbc8: r0 = AllocateArray()
    //     0x5dcbc8: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dcbcc: r17 = "while calling onEditingComplete for "
    //     0x5dcbcc: ldr             x17, [PP, #0x6838]  ; [pp+0x6838] "while calling onEditingComplete for "
    // 0x5dcbd0: StoreField: r0->field_f = r17
    //     0x5dcbd0: stur            w17, [x0, #0xf]
    // 0x5dcbd4: ldr             x1, [fp, #0x18]
    // 0x5dcbd8: StoreField: r0->field_13 = r1
    //     0x5dcbd8: stur            w1, [x0, #0x13]
    // 0x5dcbdc: str             x0, [SP]
    // 0x5dcbe0: r0 = _interpolate()
    //     0x5dcbe0: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x5dcbe4: r1 = Null
    //     0x5dcbe4: mov             x1, NULL
    // 0x5dcbe8: r2 = 2
    //     0x5dcbe8: movz            x2, #0x2
    // 0x5dcbec: stur            x0, [fp, #-0x68]
    // 0x5dcbf0: r0 = AllocateArray()
    //     0x5dcbf0: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dcbf4: mov             x2, x0
    // 0x5dcbf8: ldur            x0, [fp, #-0x68]
    // 0x5dcbfc: stur            x2, [fp, #-0x70]
    // 0x5dcc00: StoreField: r2->field_f = r0
    //     0x5dcc00: stur            w0, [x2, #0xf]
    // 0x5dcc04: r1 = <Object>
    //     0x5dcc04: ldr             x1, [PP, #0x150]  ; [pp+0x150] TypeArguments: <Object>
    // 0x5dcc08: r0 = AllocateGrowableArray()
    //     0x5dcc08: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x5dcc0c: mov             x2, x0
    // 0x5dcc10: ldur            x0, [fp, #-0x70]
    // 0x5dcc14: stur            x2, [fp, #-0x68]
    // 0x5dcc18: StoreField: r2->field_f = r0
    //     0x5dcc18: stur            w0, [x2, #0xf]
    // 0x5dcc1c: r3 = 2
    //     0x5dcc1c: movz            x3, #0x2
    // 0x5dcc20: StoreField: r2->field_b = r3
    //     0x5dcc20: stur            w3, [x2, #0xb]
    // 0x5dcc24: r1 = <List<Object>>
    //     0x5dcc24: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] TypeArguments: <List<Object>>
    // 0x5dcc28: r0 = ErrorDescription()
    //     0x5dcc28: bl              #0x5151c0  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x5dcc2c: r4 = true
    //     0x5dcc2c: add             x4, NULL, #0x20  ; true
    // 0x5dcc30: StoreField: r0->field_f = r4
    //     0x5dcc30: stur            w4, [x0, #0xf]
    // 0x5dcc34: ldur            x1, [fp, #-0x68]
    // 0x5dcc38: StoreField: r0->field_b = r1
    //     0x5dcc38: stur            w1, [x0, #0xb]
    // 0x5dcc3c: r0 = FlutterErrorDetails()
    //     0x5dcc3c: bl              #0x5151b4  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x5dcc40: mov             x1, x0
    // 0x5dcc44: ldur            x0, [fp, #-0x58]
    // 0x5dcc48: StoreField: r1->field_7 = r0
    //     0x5dcc48: stur            w0, [x1, #7]
    // 0x5dcc4c: ldur            x0, [fp, #-0x60]
    // 0x5dcc50: StoreField: r1->field_b = r0
    //     0x5dcc50: stur            w0, [x1, #0xb]
    // 0x5dcc54: r5 = "widgets"
    //     0x5dcc54: ldr             x5, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5dcc58: StoreField: r1->field_f = r5
    //     0x5dcc58: stur            w5, [x1, #0xf]
    // 0x5dcc5c: r6 = false
    //     0x5dcc5c: add             x6, NULL, #0x30  ; false
    // 0x5dcc60: StoreField: r1->field_13 = r6
    //     0x5dcc60: stur            w6, [x1, #0x13]
    // 0x5dcc64: str             x1, [SP]
    // 0x5dcc68: r0 = reportError()
    //     0x5dcc68: bl              #0x510a8c  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x5dcc6c: ldr             x1, [fp, #0x20]
    // 0x5dcc70: ldr             x0, [fp, #0x10]
    // 0x5dcc74: mov             x2, x1
    // 0x5dcc78: ldr             x1, [fp, #0x18]
    // 0x5dcc7c: mov             x3, x2
    // 0x5dcc80: mov             x2, x1
    // 0x5dcc84: mov             x1, x0
    // 0x5dcc88: stur            x3, [fp, #-0x60]
    // 0x5dcc8c: stur            x2, [fp, #-0x68]
    // 0x5dcc90: stur            x1, [fp, #-0x70]
    // 0x5dcc94: LoadField: r0 = r3->field_b
    //     0x5dcc94: ldur            w0, [x3, #0xb]
    // 0x5dcc98: DecompressPointer r0
    //     0x5dcc98: add             x0, x0, HEAP, lsl #32
    // 0x5dcc9c: cmp             w0, NULL
    // 0x5dcca0: b.eq            #0x5dce34
    // 0x5dcca4: LoadField: r4 = r0->field_9f
    //     0x5dcca4: ldur            w4, [x0, #0x9f]
    // 0x5dcca8: DecompressPointer r4
    //     0x5dcca8: add             x4, x4, HEAP, lsl #32
    // 0x5dccac: stur            x4, [fp, #-0x58]
    // 0x5dccb0: cmp             w4, NULL
    // 0x5dccb4: b.ne            #0x5dccc8
    // 0x5dccb8: r0 = Null
    //     0x5dccb8: mov             x0, NULL
    // 0x5dccbc: LeaveFrame
    //     0x5dccbc: mov             SP, fp
    //     0x5dccc0: ldp             fp, lr, [SP], #0x10
    // 0x5dccc4: ret
    //     0x5dccc4: ret             
    // 0x5dccc8: LoadField: r5 = r0->field_b
    //     0x5dccc8: ldur            w5, [x0, #0xb]
    // 0x5dcccc: DecompressPointer r5
    //     0x5dcccc: add             x5, x5, HEAP, lsl #32
    // 0x5dccd0: LoadField: r0 = r5->field_27
    //     0x5dccd0: ldur            w0, [x5, #0x27]
    // 0x5dccd4: DecompressPointer r0
    //     0x5dccd4: add             x0, x0, HEAP, lsl #32
    // 0x5dccd8: LoadField: r5 = r0->field_7
    //     0x5dccd8: ldur            w5, [x0, #7]
    // 0x5dccdc: DecompressPointer r5
    //     0x5dccdc: add             x5, x5, HEAP, lsl #32
    // 0x5dcce0: stp             x5, x4, [SP]
    // 0x5dcce4: mov             x0, x4
    // 0x5dcce8: ClosureCall
    //     0x5dcce8: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x5dccec: ldur            x2, [x0, #0x1f]
    //     0x5dccf0: blr             x2
    // 0x5dccf4: ldur            x2, [fp, #-0x60]
    // 0x5dccf8: ldur            x1, [fp, #-0x70]
    // 0x5dccfc: b               #0x5dcde4
    // 0x5dcd00: r3 = 2
    //     0x5dcd00: movz            x3, #0x2
    // 0x5dcd04: r5 = "widgets"
    //     0x5dcd04: ldr             x5, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5dcd08: r4 = true
    //     0x5dcd08: add             x4, NULL, #0x20  ; true
    // 0x5dcd0c: r6 = false
    //     0x5dcd0c: add             x6, NULL, #0x30  ; false
    // 0x5dcd10: sub             SP, fp, #0x80
    // 0x5dcd14: mov             x7, x0
    // 0x5dcd18: stur            x0, [fp, #-0x58]
    // 0x5dcd1c: mov             x0, x1
    // 0x5dcd20: stur            x1, [fp, #-0x60]
    // 0x5dcd24: r1 = Null
    //     0x5dcd24: mov             x1, NULL
    // 0x5dcd28: r2 = 4
    //     0x5dcd28: movz            x2, #0x4
    // 0x5dcd2c: r0 = AllocateArray()
    //     0x5dcd2c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dcd30: r17 = "while calling onSubmitted for "
    //     0x5dcd30: ldr             x17, [PP, #0x6840]  ; [pp+0x6840] "while calling onSubmitted for "
    // 0x5dcd34: StoreField: r0->field_f = r17
    //     0x5dcd34: stur            w17, [x0, #0xf]
    // 0x5dcd38: ldr             x1, [fp, #0x18]
    // 0x5dcd3c: StoreField: r0->field_13 = r1
    //     0x5dcd3c: stur            w1, [x0, #0x13]
    // 0x5dcd40: str             x0, [SP]
    // 0x5dcd44: r0 = _interpolate()
    //     0x5dcd44: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x5dcd48: r1 = Null
    //     0x5dcd48: mov             x1, NULL
    // 0x5dcd4c: r2 = 2
    //     0x5dcd4c: movz            x2, #0x2
    // 0x5dcd50: stur            x0, [fp, #-0x68]
    // 0x5dcd54: r0 = AllocateArray()
    //     0x5dcd54: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dcd58: mov             x2, x0
    // 0x5dcd5c: ldur            x0, [fp, #-0x68]
    // 0x5dcd60: stur            x2, [fp, #-0x70]
    // 0x5dcd64: StoreField: r2->field_f = r0
    //     0x5dcd64: stur            w0, [x2, #0xf]
    // 0x5dcd68: r1 = <Object>
    //     0x5dcd68: ldr             x1, [PP, #0x150]  ; [pp+0x150] TypeArguments: <Object>
    // 0x5dcd6c: r0 = AllocateGrowableArray()
    //     0x5dcd6c: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x5dcd70: mov             x2, x0
    // 0x5dcd74: ldur            x0, [fp, #-0x70]
    // 0x5dcd78: stur            x2, [fp, #-0x68]
    // 0x5dcd7c: StoreField: r2->field_f = r0
    //     0x5dcd7c: stur            w0, [x2, #0xf]
    // 0x5dcd80: r0 = 2
    //     0x5dcd80: movz            x0, #0x2
    // 0x5dcd84: StoreField: r2->field_b = r0
    //     0x5dcd84: stur            w0, [x2, #0xb]
    // 0x5dcd88: r1 = <List<Object>>
    //     0x5dcd88: ldr             x1, [PP, #0x2b88]  ; [pp+0x2b88] TypeArguments: <List<Object>>
    // 0x5dcd8c: r0 = ErrorDescription()
    //     0x5dcd8c: bl              #0x5151c0  ; AllocateErrorDescriptionStub -> ErrorDescription (size=0x14)
    // 0x5dcd90: mov             x1, x0
    // 0x5dcd94: r0 = true
    //     0x5dcd94: add             x0, NULL, #0x20  ; true
    // 0x5dcd98: StoreField: r1->field_f = r0
    //     0x5dcd98: stur            w0, [x1, #0xf]
    // 0x5dcd9c: ldur            x0, [fp, #-0x68]
    // 0x5dcda0: StoreField: r1->field_b = r0
    //     0x5dcda0: stur            w0, [x1, #0xb]
    // 0x5dcda4: r0 = FlutterErrorDetails()
    //     0x5dcda4: bl              #0x5151b4  ; AllocateFlutterErrorDetailsStub -> FlutterErrorDetails (size=0x18)
    // 0x5dcda8: mov             x1, x0
    // 0x5dcdac: ldur            x0, [fp, #-0x58]
    // 0x5dcdb0: StoreField: r1->field_7 = r0
    //     0x5dcdb0: stur            w0, [x1, #7]
    // 0x5dcdb4: ldur            x0, [fp, #-0x60]
    // 0x5dcdb8: StoreField: r1->field_b = r0
    //     0x5dcdb8: stur            w0, [x1, #0xb]
    // 0x5dcdbc: r0 = "widgets"
    //     0x5dcdbc: ldr             x0, [PP, #0x61d8]  ; [pp+0x61d8] "widgets"
    // 0x5dcdc0: StoreField: r1->field_f = r0
    //     0x5dcdc0: stur            w0, [x1, #0xf]
    // 0x5dcdc4: r0 = false
    //     0x5dcdc4: add             x0, NULL, #0x30  ; false
    // 0x5dcdc8: StoreField: r1->field_13 = r0
    //     0x5dcdc8: stur            w0, [x1, #0x13]
    // 0x5dcdcc: str             x1, [SP]
    // 0x5dcdd0: r0 = reportError()
    //     0x5dcdd0: bl              #0x510a8c  ; [package:flutter/src/foundation/assertions.dart] FlutterError::reportError
    // 0x5dcdd4: ldr             x1, [fp, #0x20]
    // 0x5dcdd8: ldr             x0, [fp, #0x10]
    // 0x5dcddc: mov             x2, x1
    // 0x5dcde0: mov             x1, x0
    // 0x5dcde4: mov             x0, x1
    // 0x5dcde8: stur            x2, [fp, #-0x58]
    // 0x5dcdec: stur            x1, [fp, #-0x60]
    // 0x5dcdf0: tbnz            w0, #5, #0x5dcdf8
    // 0x5dcdf4: r0 = AssertBoolean()
    //     0x5dcdf4: bl              #0xc5d270  ; AssertBooleanStub
    // 0x5dcdf8: ldur            x0, [fp, #-0x60]
    // 0x5dcdfc: tbnz            w0, #4, #0x5dce0c
    // 0x5dce00: ldur            x16, [fp, #-0x58]
    // 0x5dce04: str             x16, [SP]
    // 0x5dce08: r0 = _scheduleRestartConnection()
    //     0x5dce08: bl              #0x5dce38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleRestartConnection
    // 0x5dce0c: r0 = Null
    //     0x5dce0c: mov             x0, NULL
    // 0x5dce10: LeaveFrame
    //     0x5dce10: mov             SP, fp
    //     0x5dce14: ldp             fp, lr, [SP], #0x10
    // 0x5dce18: ret
    //     0x5dce18: ret             
    // 0x5dce1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dce1c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dce20: b               #0x5dca7c
    // 0x5dce24: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dce24: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dce28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dce28: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dce2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dce2c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dce30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dce30: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dce34: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dce34: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _scheduleRestartConnection(/* No info */) {
    // ** addr: 0x5dce38, size: 0x80
    // 0x5dce38: EnterFrame
    //     0x5dce38: stp             fp, lr, [SP, #-0x10]!
    //     0x5dce3c: mov             fp, SP
    // 0x5dce40: AllocStack(0x8)
    //     0x5dce40: sub             SP, SP, #8
    // 0x5dce44: CheckStackOverflow
    //     0x5dce44: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dce48: cmp             SP, x16
    //     0x5dce4c: b.ls            #0x5dceb0
    // 0x5dce50: ldr             x0, [fp, #0x10]
    // 0x5dce54: LoadField: r1 = r0->field_8f
    //     0x5dce54: ldur            w1, [x0, #0x8f]
    // 0x5dce58: DecompressPointer r1
    //     0x5dce58: add             x1, x1, HEAP, lsl #32
    // 0x5dce5c: tbnz            w1, #4, #0x5dce70
    // 0x5dce60: r0 = Null
    //     0x5dce60: mov             x0, NULL
    // 0x5dce64: LeaveFrame
    //     0x5dce64: mov             SP, fp
    //     0x5dce68: ldp             fp, lr, [SP], #0x10
    // 0x5dce6c: ret
    //     0x5dce6c: ret             
    // 0x5dce70: r1 = true
    //     0x5dce70: add             x1, NULL, #0x20  ; true
    // 0x5dce74: StoreField: r0->field_8f = r1
    //     0x5dce74: stur            w1, [x0, #0x8f]
    // 0x5dce78: r1 = 1
    //     0x5dce78: movz            x1, #0x1
    // 0x5dce7c: r0 = AllocateContext()
    //     0x5dce7c: bl              #0xc5def4  ; AllocateContextStub
    // 0x5dce80: mov             x1, x0
    // 0x5dce84: ldr             x0, [fp, #0x10]
    // 0x5dce88: StoreField: r1->field_f = r0
    //     0x5dce88: stur            w0, [x1, #0xf]
    // 0x5dce8c: mov             x2, x1
    // 0x5dce90: r1 = Function '_restartConnectionIfNeeded@244183791':.
    //     0x5dce90: ldr             x1, [PP, #0x6848]  ; [pp+0x6848] AnonymousClosure: (0x5dceb8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_restartConnectionIfNeeded (0x5dcf00)
    // 0x5dce94: r0 = AllocateClosure()
    //     0x5dce94: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5dce98: str             x0, [SP]
    // 0x5dce9c: r0 = scheduleMicrotask()
    //     0x5dce9c: bl              #0x4d689c  ; [dart:async] ::scheduleMicrotask
    // 0x5dcea0: r0 = Null
    //     0x5dcea0: mov             x0, NULL
    // 0x5dcea4: LeaveFrame
    //     0x5dcea4: mov             SP, fp
    //     0x5dcea8: ldp             fp, lr, [SP], #0x10
    // 0x5dceac: ret
    //     0x5dceac: ret             
    // 0x5dceb0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dceb0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dceb4: b               #0x5dce50
  }
  [closure] void _restartConnectionIfNeeded(dynamic) {
    // ** addr: 0x5dceb8, size: 0x48
    // 0x5dceb8: EnterFrame
    //     0x5dceb8: stp             fp, lr, [SP, #-0x10]!
    //     0x5dcebc: mov             fp, SP
    // 0x5dcec0: AllocStack(0x8)
    //     0x5dcec0: sub             SP, SP, #8
    // 0x5dcec4: SetupParameters()
    //     0x5dcec4: ldr             x0, [fp, #0x10]
    //     0x5dcec8: ldur            w1, [x0, #0x17]
    //     0x5dcecc: add             x1, x1, HEAP, lsl #32
    // 0x5dced0: CheckStackOverflow
    //     0x5dced0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dced4: cmp             SP, x16
    //     0x5dced8: b.ls            #0x5dcef8
    // 0x5dcedc: LoadField: r0 = r1->field_f
    //     0x5dcedc: ldur            w0, [x1, #0xf]
    // 0x5dcee0: DecompressPointer r0
    //     0x5dcee0: add             x0, x0, HEAP, lsl #32
    // 0x5dcee4: str             x0, [SP]
    // 0x5dcee8: r0 = _restartConnectionIfNeeded()
    //     0x5dcee8: bl              #0x5dcf00  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_restartConnectionIfNeeded
    // 0x5dceec: LeaveFrame
    //     0x5dceec: mov             SP, fp
    //     0x5dcef0: ldp             fp, lr, [SP], #0x10
    // 0x5dcef4: ret
    //     0x5dcef4: ret             
    // 0x5dcef8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dcef8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dcefc: b               #0x5dcedc
  }
  _ _restartConnectionIfNeeded(/* No info */) {
    // ** addr: 0x5dcf00, size: 0x268
    // 0x5dcf00: EnterFrame
    //     0x5dcf00: stp             fp, lr, [SP, #-0x10]!
    //     0x5dcf04: mov             fp, SP
    // 0x5dcf08: AllocStack(0x50)
    //     0x5dcf08: sub             SP, SP, #0x50
    // 0x5dcf0c: r0 = false
    //     0x5dcf0c: add             x0, NULL, #0x30  ; false
    // 0x5dcf10: CheckStackOverflow
    //     0x5dcf10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dcf14: cmp             SP, x16
    //     0x5dcf18: b.ls            #0x5dd134
    // 0x5dcf1c: ldr             x1, [fp, #0x10]
    // 0x5dcf20: StoreField: r1->field_8f = r0
    //     0x5dcf20: stur            w0, [x1, #0x8f]
    // 0x5dcf24: str             x1, [SP]
    // 0x5dcf28: r0 = _hasInputConnection()
    //     0x5dcf28: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5dcf2c: tbnz            w0, #4, #0x5dcf54
    // 0x5dcf30: ldr             x0, [fp, #0x10]
    // 0x5dcf34: LoadField: r1 = r0->field_b
    //     0x5dcf34: ldur            w1, [x0, #0xb]
    // 0x5dcf38: DecompressPointer r1
    //     0x5dcf38: add             x1, x1, HEAP, lsl #32
    // 0x5dcf3c: cmp             w1, NULL
    // 0x5dcf40: b.eq            #0x5dd13c
    // 0x5dcf44: LoadField: r2 = r1->field_23
    //     0x5dcf44: ldur            w2, [x1, #0x23]
    // 0x5dcf48: DecompressPointer r2
    //     0x5dcf48: add             x2, x2, HEAP, lsl #32
    // 0x5dcf4c: eor             x1, x2, #0x10
    // 0x5dcf50: tbz             w1, #4, #0x5dcf64
    // 0x5dcf54: r0 = Null
    //     0x5dcf54: mov             x0, NULL
    // 0x5dcf58: LeaveFrame
    //     0x5dcf58: mov             SP, fp
    //     0x5dcf5c: ldp             fp, lr, [SP], #0x10
    // 0x5dcf60: ret
    //     0x5dcf60: ret             
    // 0x5dcf64: LoadField: r1 = r0->field_3b
    //     0x5dcf64: ldur            w1, [x0, #0x3b]
    // 0x5dcf68: DecompressPointer r1
    //     0x5dcf68: add             x1, x1, HEAP, lsl #32
    // 0x5dcf6c: cmp             w1, NULL
    // 0x5dcf70: b.eq            #0x5dd140
    // 0x5dcf74: str             x1, [SP]
    // 0x5dcf78: r0 = close()
    //     0x5dcf78: bl              #0x5dd168  ; [package:flutter/src/services/text_input.dart] TextInputConnection::close
    // 0x5dcf7c: ldr             x0, [fp, #0x10]
    // 0x5dcf80: StoreField: r0->field_3b = rNULL
    //     0x5dcf80: stur            NULL, [x0, #0x3b]
    // 0x5dcf84: StoreField: r0->field_73 = rNULL
    //     0x5dcf84: stur            NULL, [x0, #0x73]
    // 0x5dcf88: LoadField: r1 = r0->field_b
    //     0x5dcf88: ldur            w1, [x0, #0xb]
    // 0x5dcf8c: DecompressPointer r1
    //     0x5dcf8c: add             x1, x1, HEAP, lsl #32
    // 0x5dcf90: cmp             w1, NULL
    // 0x5dcf94: b.eq            #0x5dd144
    // 0x5dcf98: r17 = 259
    //     0x5dcf98: movz            x17, #0x103
    // 0x5dcf9c: ldr             w2, [x1, x17]
    // 0x5dcfa0: DecompressPointer r2
    //     0x5dcfa0: add             x2, x2, HEAP, lsl #32
    // 0x5dcfa4: str             x2, [SP]
    // 0x5dcfa8: r0 = textInputConfiguration()
    //     0x5dcfa8: bl              #0x5db134  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x5dcfac: ldr             x0, [fp, #0x10]
    // 0x5dcfb0: LoadField: r1 = r0->field_b
    //     0x5dcfb0: ldur            w1, [x0, #0xb]
    // 0x5dcfb4: DecompressPointer r1
    //     0x5dcfb4: add             x1, x1, HEAP, lsl #32
    // 0x5dcfb8: cmp             w1, NULL
    // 0x5dcfbc: b.eq            #0x5dd148
    // 0x5dcfc0: r17 = 259
    //     0x5dcfc0: movz            x17, #0x103
    // 0x5dcfc4: ldr             w2, [x1, x17]
    // 0x5dcfc8: DecompressPointer r2
    //     0x5dcfc8: add             x2, x2, HEAP, lsl #32
    // 0x5dcfcc: str             x2, [SP]
    // 0x5dcfd0: r0 = textInputConfiguration()
    //     0x5dcfd0: bl              #0x5db134  ; [package:flutter/src/material/text_field.dart] _TextFieldState::textInputConfiguration
    // 0x5dcfd4: ldr             x16, [fp, #0x10]
    // 0x5dcfd8: stp             x0, x16, [SP]
    // 0x5dcfdc: r0 = attach()
    //     0x5dcfdc: bl              #0x5dafa8  ; [package:flutter/src/services/text_input.dart] TextInput::attach
    // 0x5dcfe0: mov             x2, x0
    // 0x5dcfe4: ldr             x1, [fp, #0x10]
    // 0x5dcfe8: stur            x2, [fp, #-8]
    // 0x5dcfec: StoreField: r1->field_3b = r0
    //     0x5dcfec: stur            w0, [x1, #0x3b]
    //     0x5dcff0: ldurb           w16, [x1, #-1]
    //     0x5dcff4: ldurb           w17, [x0, #-1]
    //     0x5dcff8: and             x16, x17, x16, lsr #2
    //     0x5dcffc: tst             x16, HEAP, lsr #32
    //     0x5dd000: b.eq            #0x5dd008
    //     0x5dd004: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5dd008: str             x2, [SP]
    // 0x5dd00c: r0 = show()
    //     0x5dd00c: bl              #0x5d99c8  ; [package:flutter/src/services/text_input.dart] TextInputConnection::show
    // 0x5dd010: ldr             x0, [fp, #0x10]
    // 0x5dd014: LoadField: r1 = r0->field_63
    //     0x5dd014: ldur            w1, [x0, #0x63]
    // 0x5dd018: DecompressPointer r1
    //     0x5dd018: add             x1, x1, HEAP, lsl #32
    // 0x5dd01c: r16 = Sentinel
    //     0x5dd01c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x5dd020: cmp             w1, w16
    // 0x5dd024: b.eq            #0x5dd14c
    // 0x5dd028: LoadField: r2 = r1->field_13
    //     0x5dd028: ldur            w2, [x1, #0x13]
    // 0x5dd02c: DecompressPointer r2
    //     0x5dd02c: add             x2, x2, HEAP, lsl #32
    // 0x5dd030: stur            x2, [fp, #-0x20]
    // 0x5dd034: LoadField: r3 = r1->field_1f
    //     0x5dd034: ldur            w3, [x1, #0x1f]
    // 0x5dd038: DecompressPointer r3
    //     0x5dd038: add             x3, x3, HEAP, lsl #32
    // 0x5dd03c: stur            x3, [fp, #-0x18]
    // 0x5dd040: LoadField: r4 = r1->field_23
    //     0x5dd040: ldur            w4, [x1, #0x23]
    // 0x5dd044: DecompressPointer r4
    //     0x5dd044: add             x4, x4, HEAP, lsl #32
    // 0x5dd048: stur            x4, [fp, #-0x10]
    // 0x5dd04c: LoadField: r1 = r0->field_b
    //     0x5dd04c: ldur            w1, [x0, #0xb]
    // 0x5dd050: DecompressPointer r1
    //     0x5dd050: add             x1, x1, HEAP, lsl #32
    // 0x5dd054: cmp             w1, NULL
    // 0x5dd058: b.eq            #0x5dd154
    // 0x5dd05c: LoadField: r1 = r0->field_f
    //     0x5dd05c: ldur            w1, [x0, #0xf]
    // 0x5dd060: DecompressPointer r1
    //     0x5dd060: add             x1, x1, HEAP, lsl #32
    // 0x5dd064: cmp             w1, NULL
    // 0x5dd068: b.eq            #0x5dd158
    // 0x5dd06c: str             x1, [SP]
    // 0x5dd070: r0 = of()
    //     0x5dd070: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x5dd074: mov             x1, x0
    // 0x5dd078: ldr             x0, [fp, #0x10]
    // 0x5dd07c: LoadField: r2 = r0->field_b
    //     0x5dd07c: ldur            w2, [x0, #0xb]
    // 0x5dd080: DecompressPointer r2
    //     0x5dd080: add             x2, x2, HEAP, lsl #32
    // 0x5dd084: cmp             w2, NULL
    // 0x5dd088: b.eq            #0x5dd15c
    // 0x5dd08c: LoadField: r3 = r2->field_53
    //     0x5dd08c: ldur            w3, [x2, #0x53]
    // 0x5dd090: DecompressPointer r3
    //     0x5dd090: add             x3, x3, HEAP, lsl #32
    // 0x5dd094: ldur            x16, [fp, #-8]
    // 0x5dd098: ldur            lr, [fp, #-0x20]
    // 0x5dd09c: stp             lr, x16, [SP, #0x20]
    // 0x5dd0a0: ldur            x16, [fp, #-0x18]
    // 0x5dd0a4: ldur            lr, [fp, #-0x10]
    // 0x5dd0a8: stp             lr, x16, [SP, #0x10]
    // 0x5dd0ac: stp             x1, x3, [SP]
    // 0x5dd0b0: r0 = setStyle()
    //     0x5dd0b0: bl              #0x5d9b2c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setStyle
    // 0x5dd0b4: ldr             x0, [fp, #0x10]
    // 0x5dd0b8: LoadField: r1 = r0->field_b
    //     0x5dd0b8: ldur            w1, [x0, #0xb]
    // 0x5dd0bc: DecompressPointer r1
    //     0x5dd0bc: add             x1, x1, HEAP, lsl #32
    // 0x5dd0c0: cmp             w1, NULL
    // 0x5dd0c4: b.eq            #0x5dd160
    // 0x5dd0c8: LoadField: r2 = r1->field_b
    //     0x5dd0c8: ldur            w2, [x1, #0xb]
    // 0x5dd0cc: DecompressPointer r2
    //     0x5dd0cc: add             x2, x2, HEAP, lsl #32
    // 0x5dd0d0: LoadField: r1 = r2->field_27
    //     0x5dd0d0: ldur            w1, [x2, #0x27]
    // 0x5dd0d4: DecompressPointer r1
    //     0x5dd0d4: add             x1, x1, HEAP, lsl #32
    // 0x5dd0d8: ldur            x16, [fp, #-8]
    // 0x5dd0dc: stp             x1, x16, [SP]
    // 0x5dd0e0: r0 = setEditingState()
    //     0x5dd0e0: bl              #0x5d439c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setEditingState
    // 0x5dd0e4: ldr             x1, [fp, #0x10]
    // 0x5dd0e8: LoadField: r2 = r1->field_b
    //     0x5dd0e8: ldur            w2, [x1, #0xb]
    // 0x5dd0ec: DecompressPointer r2
    //     0x5dd0ec: add             x2, x2, HEAP, lsl #32
    // 0x5dd0f0: cmp             w2, NULL
    // 0x5dd0f4: b.eq            #0x5dd164
    // 0x5dd0f8: LoadField: r3 = r2->field_b
    //     0x5dd0f8: ldur            w3, [x2, #0xb]
    // 0x5dd0fc: DecompressPointer r3
    //     0x5dd0fc: add             x3, x3, HEAP, lsl #32
    // 0x5dd100: LoadField: r0 = r3->field_27
    //     0x5dd100: ldur            w0, [x3, #0x27]
    // 0x5dd104: DecompressPointer r0
    //     0x5dd104: add             x0, x0, HEAP, lsl #32
    // 0x5dd108: StoreField: r1->field_73 = r0
    //     0x5dd108: stur            w0, [x1, #0x73]
    //     0x5dd10c: ldurb           w16, [x1, #-1]
    //     0x5dd110: ldurb           w17, [x0, #-1]
    //     0x5dd114: and             x16, x17, x16, lsr #2
    //     0x5dd118: tst             x16, HEAP, lsr #32
    //     0x5dd11c: b.eq            #0x5dd124
    //     0x5dd120: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5dd124: r0 = Null
    //     0x5dd124: mov             x0, NULL
    // 0x5dd128: LeaveFrame
    //     0x5dd128: mov             SP, fp
    //     0x5dd12c: ldp             fp, lr, [SP], #0x10
    // 0x5dd130: ret
    //     0x5dd130: ret             
    // 0x5dd134: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dd134: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dd138: b               #0x5dcf1c
    // 0x5dd13c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd13c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd140: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd140: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd144: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd144: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd148: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd148: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd14c: r9 = _style
    //     0x5dd14c: ldr             x9, [PP, #0x6640]  ; [pp+0x6640] Field <EditableTextState._style@244183791>: late (offset: 0x64)
    // 0x5dd150: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x5dd150: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x5dd154: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd154: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd158: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd158: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd15c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd15c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd160: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd160: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5dd164: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5dd164: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ updateEditingValue(/* No info */) {
    // ** addr: 0x5e309c, size: 0x3e8
    // 0x5e309c: EnterFrame
    //     0x5e309c: stp             fp, lr, [SP, #-0x10]!
    //     0x5e30a0: mov             fp, SP
    // 0x5e30a4: AllocStack(0x28)
    //     0x5e30a4: sub             SP, SP, #0x28
    // 0x5e30a8: CheckStackOverflow
    //     0x5e30a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e30ac: cmp             SP, x16
    //     0x5e30b0: b.ls            #0x5e345c
    // 0x5e30b4: ldr             x0, [fp, #0x18]
    // 0x5e30b8: LoadField: r1 = r0->field_b
    //     0x5e30b8: ldur            w1, [x0, #0xb]
    // 0x5e30bc: DecompressPointer r1
    //     0x5e30bc: add             x1, x1, HEAP, lsl #32
    // 0x5e30c0: cmp             w1, NULL
    // 0x5e30c4: b.eq            #0x5e3464
    // 0x5e30c8: LoadField: r2 = r1->field_23
    //     0x5e30c8: ldur            w2, [x1, #0x23]
    // 0x5e30cc: DecompressPointer r2
    //     0x5e30cc: add             x2, x2, HEAP, lsl #32
    // 0x5e30d0: eor             x1, x2, #0x10
    // 0x5e30d4: tbz             w1, #4, #0x5e30e8
    // 0x5e30d8: r0 = Null
    //     0x5e30d8: mov             x0, NULL
    // 0x5e30dc: LeaveFrame
    //     0x5e30dc: mov             SP, fp
    //     0x5e30e0: ldp             fp, lr, [SP], #0x10
    // 0x5e30e4: ret
    //     0x5e30e4: ret             
    // 0x5e30e8: ldr             x16, [fp, #0x10]
    // 0x5e30ec: stp             x16, x0, [SP]
    // 0x5e30f0: r0 = _checkNeedsAdjustAffinity()
    //     0x5e30f0: bl              #0x5e39ac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_checkNeedsAdjustAffinity
    // 0x5e30f4: tbnz            w0, #4, #0x5e315c
    // 0x5e30f8: ldr             x0, [fp, #0x18]
    // 0x5e30fc: ldr             x1, [fp, #0x10]
    // 0x5e3100: LoadField: r2 = r1->field_b
    //     0x5e3100: ldur            w2, [x1, #0xb]
    // 0x5e3104: DecompressPointer r2
    //     0x5e3104: add             x2, x2, HEAP, lsl #32
    // 0x5e3108: LoadField: r3 = r0->field_b
    //     0x5e3108: ldur            w3, [x0, #0xb]
    // 0x5e310c: DecompressPointer r3
    //     0x5e310c: add             x3, x3, HEAP, lsl #32
    // 0x5e3110: cmp             w3, NULL
    // 0x5e3114: b.eq            #0x5e3468
    // 0x5e3118: LoadField: r4 = r3->field_b
    //     0x5e3118: ldur            w4, [x3, #0xb]
    // 0x5e311c: DecompressPointer r4
    //     0x5e311c: add             x4, x4, HEAP, lsl #32
    // 0x5e3120: LoadField: r3 = r4->field_27
    //     0x5e3120: ldur            w3, [x4, #0x27]
    // 0x5e3124: DecompressPointer r3
    //     0x5e3124: add             x3, x3, HEAP, lsl #32
    // 0x5e3128: LoadField: r4 = r3->field_b
    //     0x5e3128: ldur            w4, [x3, #0xb]
    // 0x5e312c: DecompressPointer r4
    //     0x5e312c: add             x4, x4, HEAP, lsl #32
    // 0x5e3130: LoadField: r3 = r4->field_27
    //     0x5e3130: ldur            w3, [x4, #0x27]
    // 0x5e3134: DecompressPointer r3
    //     0x5e3134: add             x3, x3, HEAP, lsl #32
    // 0x5e3138: stp             x3, x2, [SP]
    // 0x5e313c: r4 = const [0, 0x2, 0x2, 0x1, affinity, 0x1, null]
    //     0x5e313c: ldr             x4, [PP, #0x6ce8]  ; [pp+0x6ce8] List(7) [0, 0x2, 0x2, 0x1, "affinity", 0x1, Null]
    // 0x5e3140: r0 = copyWith()
    //     0x5e3140: bl              #0x5e37dc  ; [package:flutter/src/services/text_editing.dart] TextSelection::copyWith
    // 0x5e3144: ldr             x16, [fp, #0x10]
    // 0x5e3148: stp             x0, x16, [SP]
    // 0x5e314c: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x5e314c: ldr             x4, [PP, #0x6330]  ; [pp+0x6330] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x5e3150: r0 = copyWith()
    //     0x5e3150: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x5e3154: mov             x1, x0
    // 0x5e3158: b               #0x5e3160
    // 0x5e315c: ldr             x1, [fp, #0x10]
    // 0x5e3160: ldr             x0, [fp, #0x18]
    // 0x5e3164: LoadField: r2 = r0->field_b
    //     0x5e3164: ldur            w2, [x0, #0xb]
    // 0x5e3168: DecompressPointer r2
    //     0x5e3168: add             x2, x2, HEAP, lsl #32
    // 0x5e316c: cmp             w2, NULL
    // 0x5e3170: b.eq            #0x5e346c
    // 0x5e3174: LoadField: r3 = r2->field_23
    //     0x5e3174: ldur            w3, [x2, #0x23]
    // 0x5e3178: DecompressPointer r3
    //     0x5e3178: add             x3, x3, HEAP, lsl #32
    // 0x5e317c: tbnz            w3, #4, #0x5e31ac
    // 0x5e3180: LoadField: r3 = r2->field_b
    //     0x5e3180: ldur            w3, [x2, #0xb]
    // 0x5e3184: DecompressPointer r3
    //     0x5e3184: add             x3, x3, HEAP, lsl #32
    // 0x5e3188: LoadField: r2 = r3->field_27
    //     0x5e3188: ldur            w2, [x3, #0x27]
    // 0x5e318c: DecompressPointer r2
    //     0x5e318c: add             x2, x2, HEAP, lsl #32
    // 0x5e3190: LoadField: r3 = r1->field_b
    //     0x5e3190: ldur            w3, [x1, #0xb]
    // 0x5e3194: DecompressPointer r3
    //     0x5e3194: add             x3, x3, HEAP, lsl #32
    // 0x5e3198: stp             x3, x2, [SP]
    // 0x5e319c: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x5e319c: ldr             x4, [PP, #0x6330]  ; [pp+0x6330] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x5e31a0: r0 = copyWith()
    //     0x5e31a0: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x5e31a4: mov             x2, x0
    // 0x5e31a8: b               #0x5e31b0
    // 0x5e31ac: mov             x2, x1
    // 0x5e31b0: ldr             x1, [fp, #0x18]
    // 0x5e31b4: mov             x0, x2
    // 0x5e31b8: stur            x2, [fp, #-8]
    // 0x5e31bc: StoreField: r1->field_73 = r0
    //     0x5e31bc: stur            w0, [x1, #0x73]
    //     0x5e31c0: ldurb           w16, [x1, #-1]
    //     0x5e31c4: ldurb           w17, [x0, #-1]
    //     0x5e31c8: and             x16, x17, x16, lsr #2
    //     0x5e31cc: tst             x16, HEAP, lsr #32
    //     0x5e31d0: b.eq            #0x5e31d8
    //     0x5e31d4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x5e31d8: LoadField: r0 = r1->field_b
    //     0x5e31d8: ldur            w0, [x1, #0xb]
    // 0x5e31dc: DecompressPointer r0
    //     0x5e31dc: add             x0, x0, HEAP, lsl #32
    // 0x5e31e0: cmp             w0, NULL
    // 0x5e31e4: b.eq            #0x5e3470
    // 0x5e31e8: LoadField: r3 = r0->field_b
    //     0x5e31e8: ldur            w3, [x0, #0xb]
    // 0x5e31ec: DecompressPointer r3
    //     0x5e31ec: add             x3, x3, HEAP, lsl #32
    // 0x5e31f0: LoadField: r0 = r3->field_27
    //     0x5e31f0: ldur            w0, [x3, #0x27]
    // 0x5e31f4: DecompressPointer r0
    //     0x5e31f4: add             x0, x0, HEAP, lsl #32
    // 0x5e31f8: stp             x0, x2, [SP]
    // 0x5e31fc: r0 = ==()
    //     0x5e31fc: bl              #0xbe23ec  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x5e3200: tbnz            w0, #4, #0x5e3214
    // 0x5e3204: r0 = Null
    //     0x5e3204: mov             x0, NULL
    // 0x5e3208: LeaveFrame
    //     0x5e3208: mov             SP, fp
    //     0x5e320c: ldp             fp, lr, [SP], #0x10
    // 0x5e3210: ret
    //     0x5e3210: ret             
    // 0x5e3214: ldr             x1, [fp, #0x18]
    // 0x5e3218: ldur            x2, [fp, #-8]
    // 0x5e321c: LoadField: r3 = r2->field_7
    //     0x5e321c: ldur            w3, [x2, #7]
    // 0x5e3220: DecompressPointer r3
    //     0x5e3220: add             x3, x3, HEAP, lsl #32
    // 0x5e3224: stur            x3, [fp, #-0x10]
    // 0x5e3228: LoadField: r0 = r1->field_b
    //     0x5e3228: ldur            w0, [x1, #0xb]
    // 0x5e322c: DecompressPointer r0
    //     0x5e322c: add             x0, x0, HEAP, lsl #32
    // 0x5e3230: cmp             w0, NULL
    // 0x5e3234: b.eq            #0x5e3474
    // 0x5e3238: LoadField: r4 = r0->field_b
    //     0x5e3238: ldur            w4, [x0, #0xb]
    // 0x5e323c: DecompressPointer r4
    //     0x5e323c: add             x4, x4, HEAP, lsl #32
    // 0x5e3240: LoadField: r0 = r4->field_27
    //     0x5e3240: ldur            w0, [x4, #0x27]
    // 0x5e3244: DecompressPointer r0
    //     0x5e3244: add             x0, x0, HEAP, lsl #32
    // 0x5e3248: LoadField: r4 = r0->field_7
    //     0x5e3248: ldur            w4, [x0, #7]
    // 0x5e324c: DecompressPointer r4
    //     0x5e324c: add             x4, x4, HEAP, lsl #32
    // 0x5e3250: r0 = LoadClassIdInstr(r3)
    //     0x5e3250: ldur            x0, [x3, #-1]
    //     0x5e3254: ubfx            x0, x0, #0xc, #0x14
    // 0x5e3258: stp             x4, x3, [SP]
    // 0x5e325c: mov             lr, x0
    // 0x5e3260: ldr             lr, [x21, lr, lsl #3]
    // 0x5e3264: blr             lr
    // 0x5e3268: tbnz            w0, #4, #0x5e3344
    // 0x5e326c: ldr             x0, [fp, #0x18]
    // 0x5e3270: ldur            x1, [fp, #-8]
    // 0x5e3274: LoadField: r2 = r1->field_f
    //     0x5e3274: ldur            w2, [x1, #0xf]
    // 0x5e3278: DecompressPointer r2
    //     0x5e3278: add             x2, x2, HEAP, lsl #32
    // 0x5e327c: LoadField: r3 = r0->field_b
    //     0x5e327c: ldur            w3, [x0, #0xb]
    // 0x5e3280: DecompressPointer r3
    //     0x5e3280: add             x3, x3, HEAP, lsl #32
    // 0x5e3284: cmp             w3, NULL
    // 0x5e3288: b.eq            #0x5e3478
    // 0x5e328c: LoadField: r4 = r3->field_b
    //     0x5e328c: ldur            w4, [x3, #0xb]
    // 0x5e3290: DecompressPointer r4
    //     0x5e3290: add             x4, x4, HEAP, lsl #32
    // 0x5e3294: LoadField: r3 = r4->field_27
    //     0x5e3294: ldur            w3, [x4, #0x27]
    // 0x5e3298: DecompressPointer r3
    //     0x5e3298: add             x3, x3, HEAP, lsl #32
    // 0x5e329c: LoadField: r4 = r3->field_f
    //     0x5e329c: ldur            w4, [x3, #0xf]
    // 0x5e32a0: DecompressPointer r4
    //     0x5e32a0: add             x4, x4, HEAP, lsl #32
    // 0x5e32a4: cmp             w2, w4
    // 0x5e32a8: b.eq            #0x5e32cc
    // 0x5e32ac: LoadField: r3 = r4->field_7
    //     0x5e32ac: ldur            x3, [x4, #7]
    // 0x5e32b0: LoadField: r5 = r2->field_7
    //     0x5e32b0: ldur            x5, [x2, #7]
    // 0x5e32b4: cmp             x3, x5
    // 0x5e32b8: b.ne            #0x5e3348
    // 0x5e32bc: LoadField: r3 = r4->field_f
    //     0x5e32bc: ldur            x3, [x4, #0xf]
    // 0x5e32c0: LoadField: r4 = r2->field_f
    //     0x5e32c0: ldur            x4, [x2, #0xf]
    // 0x5e32c4: cmp             x3, x4
    // 0x5e32c8: b.ne            #0x5e3348
    // 0x5e32cc: LoadField: r2 = r0->field_3b
    //     0x5e32cc: ldur            w2, [x0, #0x3b]
    // 0x5e32d0: DecompressPointer r2
    //     0x5e32d0: add             x2, x2, HEAP, lsl #32
    // 0x5e32d4: cmp             w2, NULL
    // 0x5e32d8: b.ne            #0x5e32e4
    // 0x5e32dc: r0 = Null
    //     0x5e32dc: mov             x0, NULL
    // 0x5e32e0: b               #0x5e32ec
    // 0x5e32e4: str             x2, [SP]
    // 0x5e32e8: r0 = scribbleInProgress()
    //     0x5e32e8: bl              #0x5e378c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::scribbleInProgress
    // 0x5e32ec: cmp             w0, NULL
    // 0x5e32f0: b.eq            #0x5e3304
    // 0x5e32f4: tbnz            w0, #4, #0x5e3304
    // 0x5e32f8: ldr             x0, [fp, #0x18]
    // 0x5e32fc: r2 = Instance_SelectionChangedCause
    //     0x5e32fc: ldr             x2, [PP, #0x61b0]  ; [pp+0x61b0] Obj!SelectionChangedCause@c43011
    // 0x5e3300: b               #0x5e3328
    // 0x5e3304: ldr             x0, [fp, #0x18]
    // 0x5e3308: LoadField: r1 = r0->field_7f
    //     0x5e3308: ldur            w1, [x0, #0x7f]
    // 0x5e330c: DecompressPointer r1
    //     0x5e330c: add             x1, x1, HEAP, lsl #32
    // 0x5e3310: cmp             w1, NULL
    // 0x5e3314: b.eq            #0x5e3320
    // 0x5e3318: r1 = Instance_SelectionChangedCause
    //     0x5e3318: ldr             x1, [PP, #0x6180]  ; [pp+0x6180] Obj!SelectionChangedCause@c43091
    // 0x5e331c: b               #0x5e3324
    // 0x5e3320: r1 = Instance_SelectionChangedCause
    //     0x5e3320: ldr             x1, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x5e3324: mov             x2, x1
    // 0x5e3328: ldur            x1, [fp, #-8]
    // 0x5e332c: LoadField: r3 = r1->field_b
    //     0x5e332c: ldur            w3, [x1, #0xb]
    // 0x5e3330: DecompressPointer r3
    //     0x5e3330: add             x3, x3, HEAP, lsl #32
    // 0x5e3334: stp             x3, x0, [SP, #8]
    // 0x5e3338: str             x2, [SP]
    // 0x5e333c: r0 = _handleSelectionChanged()
    //     0x5e333c: bl              #0x5d1a30  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x5e3340: b               #0x5e33fc
    // 0x5e3344: ldur            x1, [fp, #-8]
    // 0x5e3348: ldr             x2, [fp, #0x18]
    // 0x5e334c: ldur            x0, [fp, #-0x10]
    // 0x5e3350: LoadField: r3 = r2->field_b
    //     0x5e3350: ldur            w3, [x2, #0xb]
    // 0x5e3354: DecompressPointer r3
    //     0x5e3354: add             x3, x3, HEAP, lsl #32
    // 0x5e3358: cmp             w3, NULL
    // 0x5e335c: b.eq            #0x5e347c
    // 0x5e3360: LoadField: r4 = r3->field_b
    //     0x5e3360: ldur            w4, [x3, #0xb]
    // 0x5e3364: DecompressPointer r4
    //     0x5e3364: add             x4, x4, HEAP, lsl #32
    // 0x5e3368: LoadField: r3 = r4->field_27
    //     0x5e3368: ldur            w3, [x4, #0x27]
    // 0x5e336c: DecompressPointer r3
    //     0x5e336c: add             x3, x3, HEAP, lsl #32
    // 0x5e3370: LoadField: r4 = r3->field_7
    //     0x5e3370: ldur            w4, [x3, #7]
    // 0x5e3374: DecompressPointer r4
    //     0x5e3374: add             x4, x4, HEAP, lsl #32
    // 0x5e3378: r3 = LoadClassIdInstr(r0)
    //     0x5e3378: ldur            x3, [x0, #-1]
    //     0x5e337c: ubfx            x3, x3, #0xc, #0x14
    // 0x5e3380: stp             x4, x0, [SP]
    // 0x5e3384: mov             x0, x3
    // 0x5e3388: mov             lr, x0
    // 0x5e338c: ldr             lr, [x21, lr, lsl #3]
    // 0x5e3390: blr             lr
    // 0x5e3394: tbz             w0, #4, #0x5e33ac
    // 0x5e3398: ldr             x16, [fp, #0x18]
    // 0x5e339c: r30 = false
    //     0x5e339c: add             lr, NULL, #0x30  ; false
    // 0x5e33a0: stp             lr, x16, [SP]
    // 0x5e33a4: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x5e33a4: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x5e33a8: r0 = hideToolbar()
    //     0x5e33a8: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x5e33ac: ldr             x0, [fp, #0x18]
    // 0x5e33b0: StoreField: r0->field_b3 = rNULL
    //     0x5e33b0: stur            NULL, [x0, #0xb3]
    // 0x5e33b4: str             x0, [SP]
    // 0x5e33b8: r0 = _hasInputConnection()
    //     0x5e33b8: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x5e33bc: tbnz            w0, #4, #0x5e33d8
    // 0x5e33c0: ldr             x0, [fp, #0x18]
    // 0x5e33c4: LoadField: r1 = r0->field_b
    //     0x5e33c4: ldur            w1, [x0, #0xb]
    // 0x5e33c8: DecompressPointer r1
    //     0x5e33c8: add             x1, x1, HEAP, lsl #32
    // 0x5e33cc: cmp             w1, NULL
    // 0x5e33d0: b.eq            #0x5e3480
    // 0x5e33d4: b               #0x5e33dc
    // 0x5e33d8: ldr             x0, [fp, #0x18]
    // 0x5e33dc: r1 = 0
    //     0x5e33dc: movz            x1, #0
    // 0x5e33e0: StoreField: r0->field_9b = r1
    //     0x5e33e0: stur            x1, [x0, #0x9b]
    // 0x5e33e4: ldur            x16, [fp, #-8]
    // 0x5e33e8: stp             x16, x0, [SP, #8]
    // 0x5e33ec: r16 = Instance_SelectionChangedCause
    //     0x5e33ec: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x5e33f0: str             x16, [SP]
    // 0x5e33f4: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x5e33f4: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x5e33f8: r0 = _formatAndSetValue()
    //     0x5e33f8: bl              #0x5d3cd8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_formatAndSetValue
    // 0x5e33fc: ldr             x16, [fp, #0x18]
    // 0x5e3400: str             x16, [SP]
    // 0x5e3404: r0 = _showBlinkingCursor()
    //     0x5e3404: bl              #0x5d1d94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x5e3408: tbnz            w0, #4, #0x5e343c
    // 0x5e340c: ldr             x0, [fp, #0x18]
    // 0x5e3410: LoadField: r1 = r0->field_1f
    //     0x5e3410: ldur            w1, [x0, #0x1f]
    // 0x5e3414: DecompressPointer r1
    //     0x5e3414: add             x1, x1, HEAP, lsl #32
    // 0x5e3418: cmp             w1, NULL
    // 0x5e341c: b.eq            #0x5e343c
    // 0x5e3420: r16 = false
    //     0x5e3420: add             x16, NULL, #0x30  ; false
    // 0x5e3424: stp             x16, x0, [SP]
    // 0x5e3428: r4 = const [0, 0x2, 0x2, 0x1, resetCharTicks, 0x1, null]
    //     0x5e3428: ldr             x4, [PP, #0x5fb0]  ; [pp+0x5fb0] List(7) [0, 0x2, 0x2, 0x1, "resetCharTicks", 0x1, Null]
    // 0x5e342c: r0 = _stopCursorBlink()
    //     0x5e342c: bl              #0x5d1584  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x5e3430: ldr             x16, [fp, #0x18]
    // 0x5e3434: str             x16, [SP]
    // 0x5e3438: r0 = _startCursorBlink()
    //     0x5e3438: bl              #0x5cee38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x5e343c: ldr             x16, [fp, #0x18]
    // 0x5e3440: r30 = true
    //     0x5e3440: add             lr, NULL, #0x20  ; true
    // 0x5e3444: stp             lr, x16, [SP]
    // 0x5e3448: r0 = _scheduleShowCaretOnScreen()
    //     0x5e3448: bl              #0x5d660c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x5e344c: r0 = Null
    //     0x5e344c: mov             x0, NULL
    // 0x5e3450: LeaveFrame
    //     0x5e3450: mov             SP, fp
    //     0x5e3454: ldp             fp, lr, [SP], #0x10
    // 0x5e3458: ret
    //     0x5e3458: ret             
    // 0x5e345c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e345c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e3460: b               #0x5e30b4
    // 0x5e3464: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3464: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3468: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3468: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e346c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e346c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3470: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3470: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3474: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3474: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3478: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3478: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e347c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e347c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3480: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3480: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ hideToolbar(/* No info */) {
    // ** addr: 0x5e3484, size: 0xd0
    // 0x5e3484: EnterFrame
    //     0x5e3484: stp             fp, lr, [SP, #-0x10]!
    //     0x5e3488: mov             fp, SP
    // 0x5e348c: AllocStack(0x10)
    //     0x5e348c: sub             SP, SP, #0x10
    // 0x5e3490: SetupParameters(EditableTextState this /* r1, fp-0x8 */, [dynamic _ = true /* r0 */])
    //     0x5e3490: mov             x0, x4
    //     0x5e3494: ldur            w1, [x0, #0x13]
    //     0x5e3498: add             x1, x1, HEAP, lsl #32
    //     0x5e349c: sub             x0, x1, #2
    //     0x5e34a0: add             x1, fp, w0, sxtw #2
    //     0x5e34a4: ldr             x1, [x1, #0x10]
    //     0x5e34a8: stur            x1, [fp, #-8]
    //     0x5e34ac: cmp             w0, #2
    //     0x5e34b0: b.lt            #0x5e34c4
    //     0x5e34b4: add             x2, fp, w0, sxtw #2
    //     0x5e34b8: ldr             x2, [x2, #8]
    //     0x5e34bc: mov             x0, x2
    //     0x5e34c0: b               #0x5e34c8
    //     0x5e34c4: add             x0, NULL, #0x20  ; true
    // 0x5e34c8: CheckStackOverflow
    //     0x5e34c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e34cc: cmp             SP, x16
    //     0x5e34d0: b.ls            #0x5e354c
    // 0x5e34d4: tbnz            w0, #4, #0x5e34f4
    // 0x5e34d8: LoadField: r0 = r1->field_3f
    //     0x5e34d8: ldur            w0, [x1, #0x3f]
    // 0x5e34dc: DecompressPointer r0
    //     0x5e34dc: add             x0, x0, HEAP, lsl #32
    // 0x5e34e0: cmp             w0, NULL
    // 0x5e34e4: b.eq            #0x5e353c
    // 0x5e34e8: str             x0, [SP]
    // 0x5e34ec: r0 = hide()
    //     0x5e34ec: bl              #0x5e3600  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hide
    // 0x5e34f0: b               #0x5e353c
    // 0x5e34f4: LoadField: r0 = r1->field_3f
    //     0x5e34f4: ldur            w0, [x1, #0x3f]
    // 0x5e34f8: DecompressPointer r0
    //     0x5e34f8: add             x0, x0, HEAP, lsl #32
    // 0x5e34fc: cmp             w0, NULL
    // 0x5e3500: b.ne            #0x5e350c
    // 0x5e3504: r0 = Null
    //     0x5e3504: mov             x0, NULL
    // 0x5e3508: b               #0x5e3514
    // 0x5e350c: str             x0, [SP]
    // 0x5e3510: r0 = toolbarIsVisible()
    //     0x5e3510: bl              #0x5e35ac  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::toolbarIsVisible
    // 0x5e3514: cmp             w0, NULL
    // 0x5e3518: b.eq            #0x5e353c
    // 0x5e351c: tbnz            w0, #4, #0x5e353c
    // 0x5e3520: ldur            x0, [fp, #-8]
    // 0x5e3524: LoadField: r1 = r0->field_3f
    //     0x5e3524: ldur            w1, [x0, #0x3f]
    // 0x5e3528: DecompressPointer r1
    //     0x5e3528: add             x1, x1, HEAP, lsl #32
    // 0x5e352c: cmp             w1, NULL
    // 0x5e3530: b.eq            #0x5e353c
    // 0x5e3534: str             x1, [SP]
    // 0x5e3538: r0 = hideToolbar()
    //     0x5e3538: bl              #0x5e3554  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hideToolbar
    // 0x5e353c: r0 = Null
    //     0x5e353c: mov             x0, NULL
    // 0x5e3540: LeaveFrame
    //     0x5e3540: mov             SP, fp
    //     0x5e3544: ldp             fp, lr, [SP], #0x10
    // 0x5e3548: ret
    //     0x5e3548: ret             
    // 0x5e354c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e354c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e3550: b               #0x5e34d4
  }
  _ _checkNeedsAdjustAffinity(/* No info */) {
    // ** addr: 0x5e39ac, size: 0x130
    // 0x5e39ac: EnterFrame
    //     0x5e39ac: stp             fp, lr, [SP, #-0x10]!
    //     0x5e39b0: mov             fp, SP
    // 0x5e39b4: AllocStack(0x10)
    //     0x5e39b4: sub             SP, SP, #0x10
    // 0x5e39b8: CheckStackOverflow
    //     0x5e39b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e39bc: cmp             SP, x16
    //     0x5e39c0: b.ls            #0x5e3acc
    // 0x5e39c4: ldr             x1, [fp, #0x10]
    // 0x5e39c8: LoadField: r0 = r1->field_7
    //     0x5e39c8: ldur            w0, [x1, #7]
    // 0x5e39cc: DecompressPointer r0
    //     0x5e39cc: add             x0, x0, HEAP, lsl #32
    // 0x5e39d0: ldr             x2, [fp, #0x18]
    // 0x5e39d4: LoadField: r3 = r2->field_b
    //     0x5e39d4: ldur            w3, [x2, #0xb]
    // 0x5e39d8: DecompressPointer r3
    //     0x5e39d8: add             x3, x3, HEAP, lsl #32
    // 0x5e39dc: cmp             w3, NULL
    // 0x5e39e0: b.eq            #0x5e3ad4
    // 0x5e39e4: LoadField: r4 = r3->field_b
    //     0x5e39e4: ldur            w4, [x3, #0xb]
    // 0x5e39e8: DecompressPointer r4
    //     0x5e39e8: add             x4, x4, HEAP, lsl #32
    // 0x5e39ec: LoadField: r3 = r4->field_27
    //     0x5e39ec: ldur            w3, [x4, #0x27]
    // 0x5e39f0: DecompressPointer r3
    //     0x5e39f0: add             x3, x3, HEAP, lsl #32
    // 0x5e39f4: LoadField: r4 = r3->field_7
    //     0x5e39f4: ldur            w4, [x3, #7]
    // 0x5e39f8: DecompressPointer r4
    //     0x5e39f8: add             x4, x4, HEAP, lsl #32
    // 0x5e39fc: r3 = LoadClassIdInstr(r0)
    //     0x5e39fc: ldur            x3, [x0, #-1]
    //     0x5e3a00: ubfx            x3, x3, #0xc, #0x14
    // 0x5e3a04: stp             x4, x0, [SP]
    // 0x5e3a08: mov             x0, x3
    // 0x5e3a0c: mov             lr, x0
    // 0x5e3a10: ldr             lr, [x21, lr, lsl #3]
    // 0x5e3a14: blr             lr
    // 0x5e3a18: tbnz            w0, #4, #0x5e3abc
    // 0x5e3a1c: ldr             x2, [fp, #0x18]
    // 0x5e3a20: ldr             x1, [fp, #0x10]
    // 0x5e3a24: LoadField: r3 = r1->field_b
    //     0x5e3a24: ldur            w3, [x1, #0xb]
    // 0x5e3a28: DecompressPointer r3
    //     0x5e3a28: add             x3, x3, HEAP, lsl #32
    // 0x5e3a2c: LoadField: r1 = r3->field_7
    //     0x5e3a2c: ldur            x1, [x3, #7]
    // 0x5e3a30: LoadField: r4 = r3->field_f
    //     0x5e3a30: ldur            x4, [x3, #0xf]
    // 0x5e3a34: cmp             x1, x4
    // 0x5e3a38: r16 = true
    //     0x5e3a38: add             x16, NULL, #0x20  ; true
    // 0x5e3a3c: r17 = false
    //     0x5e3a3c: add             x17, NULL, #0x30  ; false
    // 0x5e3a40: csel            x5, x16, x17, eq
    // 0x5e3a44: LoadField: r4 = r2->field_b
    //     0x5e3a44: ldur            w4, [x2, #0xb]
    // 0x5e3a48: DecompressPointer r4
    //     0x5e3a48: add             x4, x4, HEAP, lsl #32
    // 0x5e3a4c: cmp             w4, NULL
    // 0x5e3a50: b.eq            #0x5e3ad8
    // 0x5e3a54: LoadField: r2 = r4->field_b
    //     0x5e3a54: ldur            w2, [x4, #0xb]
    // 0x5e3a58: DecompressPointer r2
    //     0x5e3a58: add             x2, x2, HEAP, lsl #32
    // 0x5e3a5c: LoadField: r4 = r2->field_27
    //     0x5e3a5c: ldur            w4, [x2, #0x27]
    // 0x5e3a60: DecompressPointer r4
    //     0x5e3a60: add             x4, x4, HEAP, lsl #32
    // 0x5e3a64: LoadField: r2 = r4->field_b
    //     0x5e3a64: ldur            w2, [x4, #0xb]
    // 0x5e3a68: DecompressPointer r2
    //     0x5e3a68: add             x2, x2, HEAP, lsl #32
    // 0x5e3a6c: LoadField: r4 = r2->field_7
    //     0x5e3a6c: ldur            x4, [x2, #7]
    // 0x5e3a70: LoadField: r6 = r2->field_f
    //     0x5e3a70: ldur            x6, [x2, #0xf]
    // 0x5e3a74: cmp             x4, x6
    // 0x5e3a78: r16 = true
    //     0x5e3a78: add             x16, NULL, #0x20  ; true
    // 0x5e3a7c: r17 = false
    //     0x5e3a7c: add             x17, NULL, #0x30  ; false
    // 0x5e3a80: csel            x7, x16, x17, eq
    // 0x5e3a84: cmp             w5, w7
    // 0x5e3a88: b.ne            #0x5e3abc
    // 0x5e3a8c: cmp             x1, x4
    // 0x5e3a90: b.ne            #0x5e3abc
    // 0x5e3a94: LoadField: r1 = r3->field_27
    //     0x5e3a94: ldur            w1, [x3, #0x27]
    // 0x5e3a98: DecompressPointer r1
    //     0x5e3a98: add             x1, x1, HEAP, lsl #32
    // 0x5e3a9c: LoadField: r3 = r2->field_27
    //     0x5e3a9c: ldur            w3, [x2, #0x27]
    // 0x5e3aa0: DecompressPointer r3
    //     0x5e3aa0: add             x3, x3, HEAP, lsl #32
    // 0x5e3aa4: cmp             w1, w3
    // 0x5e3aa8: r16 = true
    //     0x5e3aa8: add             x16, NULL, #0x20  ; true
    // 0x5e3aac: r17 = false
    //     0x5e3aac: add             x17, NULL, #0x30  ; false
    // 0x5e3ab0: csel            x2, x16, x17, ne
    // 0x5e3ab4: mov             x0, x2
    // 0x5e3ab8: b               #0x5e3ac0
    // 0x5e3abc: r0 = false
    //     0x5e3abc: add             x0, NULL, #0x30  ; false
    // 0x5e3ac0: LeaveFrame
    //     0x5e3ac0: mov             SP, fp
    //     0x5e3ac4: ldp             fp, lr, [SP], #0x10
    // 0x5e3ac8: ret
    //     0x5e3ac8: ret             
    // 0x5e3acc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e3acc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e3ad0: b               #0x5e39c4
    // 0x5e3ad4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3ad4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x5e3ad8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e3ad8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _value(/* No info */) {
    // ** addr: 0x5e4034, size: 0x3c
    // 0x5e4034: EnterFrame
    //     0x5e4034: stp             fp, lr, [SP, #-0x10]!
    //     0x5e4038: mov             fp, SP
    // 0x5e403c: ldr             x1, [fp, #0x10]
    // 0x5e4040: LoadField: r2 = r1->field_b
    //     0x5e4040: ldur            w2, [x1, #0xb]
    // 0x5e4044: DecompressPointer r2
    //     0x5e4044: add             x2, x2, HEAP, lsl #32
    // 0x5e4048: cmp             w2, NULL
    // 0x5e404c: b.eq            #0x5e406c
    // 0x5e4050: LoadField: r1 = r2->field_b
    //     0x5e4050: ldur            w1, [x2, #0xb]
    // 0x5e4054: DecompressPointer r1
    //     0x5e4054: add             x1, x1, HEAP, lsl #32
    // 0x5e4058: LoadField: r0 = r1->field_27
    //     0x5e4058: ldur            w0, [x1, #0x27]
    // 0x5e405c: DecompressPointer r0
    //     0x5e405c: add             x0, x0, HEAP, lsl #32
    // 0x5e4060: LeaveFrame
    //     0x5e4060: mov             SP, fp
    //     0x5e4064: ldp             fp, lr, [SP], #0x10
    // 0x5e4068: ret
    //     0x5e4068: ret             
    // 0x5e406c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5e406c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void performSelector(dynamic, String) {
    // ** addr: 0x5e49b0, size: 0x4c
    // 0x5e49b0: EnterFrame
    //     0x5e49b0: stp             fp, lr, [SP, #-0x10]!
    //     0x5e49b4: mov             fp, SP
    // 0x5e49b8: AllocStack(0x10)
    //     0x5e49b8: sub             SP, SP, #0x10
    // 0x5e49bc: SetupParameters()
    //     0x5e49bc: ldr             x0, [fp, #0x18]
    //     0x5e49c0: ldur            w1, [x0, #0x17]
    //     0x5e49c4: add             x1, x1, HEAP, lsl #32
    // 0x5e49c8: CheckStackOverflow
    //     0x5e49c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e49cc: cmp             SP, x16
    //     0x5e49d0: b.ls            #0x5e49f4
    // 0x5e49d4: LoadField: r0 = r1->field_f
    //     0x5e49d4: ldur            w0, [x1, #0xf]
    // 0x5e49d8: DecompressPointer r0
    //     0x5e49d8: add             x0, x0, HEAP, lsl #32
    // 0x5e49dc: ldr             x16, [fp, #0x10]
    // 0x5e49e0: stp             x16, x0, [SP]
    // 0x5e49e4: r0 = performSelector()
    //     0x5e49e4: bl              #0x5e49fc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::performSelector
    // 0x5e49e8: LeaveFrame
    //     0x5e49e8: mov             SP, fp
    //     0x5e49ec: ldp             fp, lr, [SP], #0x10
    // 0x5e49f0: ret
    //     0x5e49f0: ret             
    // 0x5e49f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e49f4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e49f8: b               #0x5e49d4
  }
  _ performSelector(/* No info */) {
    // ** addr: 0x5e49fc, size: 0x88
    // 0x5e49fc: EnterFrame
    //     0x5e49fc: stp             fp, lr, [SP, #-0x10]!
    //     0x5e4a00: mov             fp, SP
    // 0x5e4a04: AllocStack(0x20)
    //     0x5e4a04: sub             SP, SP, #0x20
    // 0x5e4a08: CheckStackOverflow
    //     0x5e4a08: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e4a0c: cmp             SP, x16
    //     0x5e4a10: b.ls            #0x5e4a7c
    // 0x5e4a14: ldr             x16, [fp, #0x10]
    // 0x5e4a18: str             x16, [SP]
    // 0x5e4a1c: r0 = intentForMacOSSelector()
    //     0x5e4a1c: bl              #0x5e5564  ; [package:flutter/src/widgets/default_text_editing_shortcuts.dart] ::intentForMacOSSelector
    // 0x5e4a20: stur            x0, [fp, #-8]
    // 0x5e4a24: cmp             w0, NULL
    // 0x5e4a28: b.eq            #0x5e4a6c
    // 0x5e4a2c: r0 = primaryFocus()
    //     0x5e4a2c: bl              #0x5e5518  ; [package:flutter/src/widgets/focus_manager.dart] ::primaryFocus
    // 0x5e4a30: cmp             w0, NULL
    // 0x5e4a34: b.ne            #0x5e4a40
    // 0x5e4a38: r0 = Null
    //     0x5e4a38: mov             x0, NULL
    // 0x5e4a3c: b               #0x5e4a4c
    // 0x5e4a40: LoadField: r1 = r0->field_33
    //     0x5e4a40: ldur            w1, [x0, #0x33]
    // 0x5e4a44: DecompressPointer r1
    //     0x5e4a44: add             x1, x1, HEAP, lsl #32
    // 0x5e4a48: mov             x0, x1
    // 0x5e4a4c: cmp             w0, NULL
    // 0x5e4a50: b.eq            #0x5e4a6c
    // 0x5e4a54: r16 = <Intent>
    //     0x5e4a54: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x5e4a58: stp             x0, x16, [SP, #8]
    // 0x5e4a5c: ldur            x16, [fp, #-8]
    // 0x5e4a60: str             x16, [SP]
    // 0x5e4a64: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x5e4a64: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x5e4a68: r0 = invoke()
    //     0x5e4a68: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0x5e4a6c: r0 = Null
    //     0x5e4a6c: mov             x0, NULL
    // 0x5e4a70: LeaveFrame
    //     0x5e4a70: mov             SP, fp
    //     0x5e4a74: ldp             fp, lr, [SP], #0x10
    // 0x5e4a78: ret
    //     0x5e4a78: ret             
    // 0x5e4a7c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e4a7c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e4a80: b               #0x5e4a14
  }
  get _ contextMenuAnchors(/* No info */) {
    // ** addr: 0x69bf50, size: 0x108
    // 0x69bf50: EnterFrame
    //     0x69bf50: stp             fp, lr, [SP, #-0x10]!
    //     0x69bf54: mov             fp, SP
    // 0x69bf58: AllocStack(0x30)
    //     0x69bf58: sub             SP, SP, #0x30
    // 0x69bf5c: CheckStackOverflow
    //     0x69bf5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69bf60: cmp             SP, x16
    //     0x69bf64: b.ls            #0x69c04c
    // 0x69bf68: ldr             x1, [fp, #0x10]
    // 0x69bf6c: LoadField: r0 = r1->field_a7
    //     0x69bf6c: ldur            w0, [x1, #0xa7]
    // 0x69bf70: DecompressPointer r0
    //     0x69bf70: add             x0, x0, HEAP, lsl #32
    // 0x69bf74: r16 = Sentinel
    //     0x69bf74: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x69bf78: cmp             w0, w16
    // 0x69bf7c: b.ne            #0x69bf88
    // 0x69bf80: r2 = renderEditable
    //     0x69bf80: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x69bf84: r0 = InitLateFinalInstanceField()
    //     0x69bf84: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x69bf88: r17 = 303
    //     0x69bf88: movz            x17, #0x12f
    // 0x69bf8c: ldr             w1, [x0, x17]
    // 0x69bf90: DecompressPointer r1
    //     0x69bf90: add             x1, x1, HEAP, lsl #32
    // 0x69bf94: stur            x1, [fp, #-8]
    // 0x69bf98: cmp             w1, NULL
    // 0x69bf9c: b.eq            #0x69bfc0
    // 0x69bfa0: r0 = TextSelectionToolbarAnchors()
    //     0x69bfa0: bl              #0x69c768  ; AllocateTextSelectionToolbarAnchorsStub -> TextSelectionToolbarAnchors (size=0x10)
    // 0x69bfa4: mov             x1, x0
    // 0x69bfa8: ldur            x0, [fp, #-8]
    // 0x69bfac: StoreField: r1->field_7 = r0
    //     0x69bfac: stur            w0, [x1, #7]
    // 0x69bfb0: mov             x0, x1
    // 0x69bfb4: LeaveFrame
    //     0x69bfb4: mov             SP, fp
    //     0x69bfb8: ldp             fp, lr, [SP], #0x10
    // 0x69bfbc: ret
    //     0x69bfbc: ret             
    // 0x69bfc0: ldr             x0, [fp, #0x10]
    // 0x69bfc4: str             x0, [SP]
    // 0x69bfc8: r0 = _getGlyphHeights()
    //     0x69bfc8: bl              #0x69c3b4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_getGlyphHeights
    // 0x69bfcc: mov             x1, x0
    // 0x69bfd0: ldr             x0, [fp, #0x10]
    // 0x69bfd4: stur            x1, [fp, #-8]
    // 0x69bfd8: LoadField: r2 = r0->field_b
    //     0x69bfd8: ldur            w2, [x0, #0xb]
    // 0x69bfdc: DecompressPointer r2
    //     0x69bfdc: add             x2, x2, HEAP, lsl #32
    // 0x69bfe0: cmp             w2, NULL
    // 0x69bfe4: b.eq            #0x69c054
    // 0x69bfe8: LoadField: r3 = r2->field_b
    //     0x69bfe8: ldur            w3, [x2, #0xb]
    // 0x69bfec: DecompressPointer r3
    //     0x69bfec: add             x3, x3, HEAP, lsl #32
    // 0x69bff0: LoadField: r2 = r3->field_27
    //     0x69bff0: ldur            w2, [x3, #0x27]
    // 0x69bff4: DecompressPointer r2
    //     0x69bff4: add             x2, x2, HEAP, lsl #32
    // 0x69bff8: LoadField: r3 = r2->field_b
    //     0x69bff8: ldur            w3, [x2, #0xb]
    // 0x69bffc: DecompressPointer r3
    //     0x69bffc: add             x3, x3, HEAP, lsl #32
    // 0x69c000: LoadField: r2 = r0->field_a7
    //     0x69c000: ldur            w2, [x0, #0xa7]
    // 0x69c004: DecompressPointer r2
    //     0x69c004: add             x2, x2, HEAP, lsl #32
    // 0x69c008: stp             x3, x2, [SP]
    // 0x69c00c: r0 = getEndpointsForSelection()
    //     0x69c00c: bl              #0x5c9de8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getEndpointsForSelection
    // 0x69c010: mov             x1, x0
    // 0x69c014: ldr             x0, [fp, #0x10]
    // 0x69c018: LoadField: r2 = r0->field_a7
    //     0x69c018: ldur            w2, [x0, #0xa7]
    // 0x69c01c: DecompressPointer r2
    //     0x69c01c: add             x2, x2, HEAP, lsl #32
    // 0x69c020: ldur            x0, [fp, #-8]
    // 0x69c024: LoadField: d0 = r0->field_7
    //     0x69c024: ldur            d0, [x0, #7]
    // 0x69c028: LoadField: d1 = r0->field_f
    //     0x69c028: ldur            d1, [x0, #0xf]
    // 0x69c02c: str             NULL, [SP, #0x20]
    // 0x69c030: str             d1, [SP, #0x18]
    // 0x69c034: stp             x1, x2, [SP, #8]
    // 0x69c038: str             d0, [SP]
    // 0x69c03c: r0 = TextSelectionToolbarAnchors.fromSelection()
    //     0x69c03c: bl              #0x69c058  ; [package:flutter/src/widgets/text_selection_toolbar_anchors.dart] TextSelectionToolbarAnchors::TextSelectionToolbarAnchors.fromSelection
    // 0x69c040: LeaveFrame
    //     0x69c040: mov             SP, fp
    //     0x69c044: ldp             fp, lr, [SP], #0x10
    // 0x69c048: ret
    //     0x69c048: ret             
    // 0x69c04c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69c04c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69c050: b               #0x69bf68
    // 0x69c054: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69c054: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _getGlyphHeights(/* No info */) {
    // ** addr: 0x69c3b4, size: 0x3a8
    // 0x69c3b4: EnterFrame
    //     0x69c3b4: stp             fp, lr, [SP, #-0x10]!
    //     0x69c3b8: mov             fp, SP
    // 0x69c3bc: AllocStack(0x48)
    //     0x69c3bc: sub             SP, SP, #0x48
    // 0x69c3c0: CheckStackOverflow
    //     0x69c3c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69c3c4: cmp             SP, x16
    //     0x69c3c8: b.ls            #0x69c720
    // 0x69c3cc: ldr             x0, [fp, #0x10]
    // 0x69c3d0: LoadField: r1 = r0->field_b
    //     0x69c3d0: ldur            w1, [x0, #0xb]
    // 0x69c3d4: DecompressPointer r1
    //     0x69c3d4: add             x1, x1, HEAP, lsl #32
    // 0x69c3d8: cmp             w1, NULL
    // 0x69c3dc: b.eq            #0x69c728
    // 0x69c3e0: LoadField: r2 = r1->field_b
    //     0x69c3e0: ldur            w2, [x1, #0xb]
    // 0x69c3e4: DecompressPointer r2
    //     0x69c3e4: add             x2, x2, HEAP, lsl #32
    // 0x69c3e8: LoadField: r1 = r2->field_27
    //     0x69c3e8: ldur            w1, [x2, #0x27]
    // 0x69c3ec: DecompressPointer r1
    //     0x69c3ec: add             x1, x1, HEAP, lsl #32
    // 0x69c3f0: LoadField: r2 = r1->field_b
    //     0x69c3f0: ldur            w2, [x1, #0xb]
    // 0x69c3f4: DecompressPointer r2
    //     0x69c3f4: add             x2, x2, HEAP, lsl #32
    // 0x69c3f8: mov             x1, x0
    // 0x69c3fc: stur            x2, [fp, #-8]
    // 0x69c400: LoadField: r0 = r1->field_a7
    //     0x69c400: ldur            w0, [x1, #0xa7]
    // 0x69c404: DecompressPointer r0
    //     0x69c404: add             x0, x0, HEAP, lsl #32
    // 0x69c408: r16 = Sentinel
    //     0x69c408: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x69c40c: cmp             w0, w16
    // 0x69c410: b.ne            #0x69c41c
    // 0x69c414: r2 = renderEditable
    //     0x69c414: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x69c418: r0 = InitLateFinalInstanceField()
    //     0x69c418: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x69c41c: LoadField: r1 = r0->field_b7
    //     0x69c41c: ldur            w1, [x0, #0xb7]
    // 0x69c420: DecompressPointer r1
    //     0x69c420: add             x1, x1, HEAP, lsl #32
    // 0x69c424: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x69c424: ldur            w0, [x1, #0x17]
    // 0x69c428: DecompressPointer r0
    //     0x69c428: add             x0, x0, HEAP, lsl #32
    // 0x69c42c: cmp             w0, NULL
    // 0x69c430: b.eq            #0x69c72c
    // 0x69c434: str             x0, [SP]
    // 0x69c438: r0 = toPlainText()
    //     0x69c438: bl              #0x5cb1f0  ; [package:flutter/src/painting/inline_span.dart] InlineSpan::toPlainText
    // 0x69c43c: ldr             x1, [fp, #0x10]
    // 0x69c440: LoadField: r2 = r1->field_b
    //     0x69c440: ldur            w2, [x1, #0xb]
    // 0x69c444: DecompressPointer r2
    //     0x69c444: add             x2, x2, HEAP, lsl #32
    // 0x69c448: cmp             w2, NULL
    // 0x69c44c: b.eq            #0x69c730
    // 0x69c450: LoadField: r3 = r2->field_b
    //     0x69c450: ldur            w3, [x2, #0xb]
    // 0x69c454: DecompressPointer r3
    //     0x69c454: add             x3, x3, HEAP, lsl #32
    // 0x69c458: LoadField: r2 = r3->field_27
    //     0x69c458: ldur            w2, [x3, #0x27]
    // 0x69c45c: DecompressPointer r2
    //     0x69c45c: add             x2, x2, HEAP, lsl #32
    // 0x69c460: LoadField: r3 = r2->field_7
    //     0x69c460: ldur            w3, [x2, #7]
    // 0x69c464: DecompressPointer r3
    //     0x69c464: add             x3, x3, HEAP, lsl #32
    // 0x69c468: stur            x3, [fp, #-0x10]
    // 0x69c46c: r2 = LoadClassIdInstr(r0)
    //     0x69c46c: ldur            x2, [x0, #-1]
    //     0x69c470: ubfx            x2, x2, #0xc, #0x14
    // 0x69c474: stp             x3, x0, [SP]
    // 0x69c478: mov             x0, x2
    // 0x69c47c: mov             lr, x0
    // 0x69c480: ldr             lr, [x21, lr, lsl #3]
    // 0x69c484: blr             lr
    // 0x69c488: tbz             w0, #4, #0x69c494
    // 0x69c48c: ldr             x0, [fp, #0x10]
    // 0x69c490: b               #0x69c6c4
    // 0x69c494: ldur            x0, [fp, #-8]
    // 0x69c498: LoadField: r1 = r0->field_7
    //     0x69c498: ldur            x1, [x0, #7]
    // 0x69c49c: stur            x1, [fp, #-0x20]
    // 0x69c4a0: tbnz            x1, #0x3f, #0x69c6c0
    // 0x69c4a4: LoadField: r2 = r0->field_f
    //     0x69c4a4: ldur            x2, [x0, #0xf]
    // 0x69c4a8: stur            x2, [fp, #-0x18]
    // 0x69c4ac: tbz             x2, #0x3f, #0x69c4b8
    // 0x69c4b0: ldr             x0, [fp, #0x10]
    // 0x69c4b4: b               #0x69c6c4
    // 0x69c4b8: cmp             x1, x2
    // 0x69c4bc: b.ne            #0x69c4c8
    // 0x69c4c0: ldr             x0, [fp, #0x10]
    // 0x69c4c4: b               #0x69c6c4
    // 0x69c4c8: ldr             x3, [fp, #0x10]
    // 0x69c4cc: ldur            x16, [fp, #-0x10]
    // 0x69c4d0: stp             x16, x0, [SP]
    // 0x69c4d4: r0 = textInside()
    //     0x69c4d4: bl              #0x5cc3d0  ; [dart:ui] TextRange::textInside
    // 0x69c4d8: stur            x0, [fp, #-8]
    // 0x69c4dc: str             x0, [SP]
    // 0x69c4e0: r0 = StringCharacters.characters()
    //     0x69c4e0: bl              #0x5cc35c  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0x69c4e4: str             x0, [SP]
    // 0x69c4e8: r0 = first()
    //     0x69c4e8: bl              #0x561008  ; [package:characters/src/characters_impl.dart] StringCharacters::first
    // 0x69c4ec: LoadField: r1 = r0->field_7
    //     0x69c4ec: ldur            w1, [x0, #7]
    // 0x69c4f0: DecompressPointer r1
    //     0x69c4f0: add             x1, x1, HEAP, lsl #32
    // 0x69c4f4: ldr             x0, [fp, #0x10]
    // 0x69c4f8: LoadField: r2 = r0->field_a7
    //     0x69c4f8: ldur            w2, [x0, #0xa7]
    // 0x69c4fc: DecompressPointer r2
    //     0x69c4fc: add             x2, x2, HEAP, lsl #32
    // 0x69c500: stur            x2, [fp, #-0x10]
    // 0x69c504: r3 = LoadInt32Instr(r1)
    //     0x69c504: sbfx            x3, x1, #1, #0x1f
    // 0x69c508: ldur            x1, [fp, #-0x20]
    // 0x69c50c: add             x4, x1, x3
    // 0x69c510: stur            x4, [fp, #-0x28]
    // 0x69c514: r0 = TextRange()
    //     0x69c514: bl              #0x5cc350  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x69c518: mov             x1, x0
    // 0x69c51c: ldur            x0, [fp, #-0x20]
    // 0x69c520: StoreField: r1->field_7 = r0
    //     0x69c520: stur            x0, [x1, #7]
    // 0x69c524: ldur            x0, [fp, #-0x28]
    // 0x69c528: StoreField: r1->field_f = r0
    //     0x69c528: stur            x0, [x1, #0xf]
    // 0x69c52c: ldur            x16, [fp, #-0x10]
    // 0x69c530: stp             x1, x16, [SP]
    // 0x69c534: r0 = getRectForComposingRange()
    //     0x69c534: bl              #0x5cbdd4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x69c538: stur            x0, [fp, #-0x10]
    // 0x69c53c: ldur            x16, [fp, #-8]
    // 0x69c540: str             x16, [SP]
    // 0x69c544: r0 = StringCharacters.characters()
    //     0x69c544: bl              #0x5cc35c  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0x69c548: str             x0, [SP]
    // 0x69c54c: r0 = last()
    //     0x69c54c: bl              #0x52ea58  ; [package:characters/src/characters_impl.dart] StringCharacters::last
    // 0x69c550: LoadField: r1 = r0->field_7
    //     0x69c550: ldur            w1, [x0, #7]
    // 0x69c554: DecompressPointer r1
    //     0x69c554: add             x1, x1, HEAP, lsl #32
    // 0x69c558: ldr             x0, [fp, #0x10]
    // 0x69c55c: LoadField: r2 = r0->field_a7
    //     0x69c55c: ldur            w2, [x0, #0xa7]
    // 0x69c560: DecompressPointer r2
    //     0x69c560: add             x2, x2, HEAP, lsl #32
    // 0x69c564: stur            x2, [fp, #-8]
    // 0x69c568: r3 = LoadInt32Instr(r1)
    //     0x69c568: sbfx            x3, x1, #1, #0x1f
    // 0x69c56c: ldur            x1, [fp, #-0x18]
    // 0x69c570: sub             x4, x1, x3
    // 0x69c574: stur            x4, [fp, #-0x20]
    // 0x69c578: r0 = TextRange()
    //     0x69c578: bl              #0x5cc350  ; AllocateTextRangeStub -> TextRange (size=0x18)
    // 0x69c57c: mov             x1, x0
    // 0x69c580: ldur            x0, [fp, #-0x20]
    // 0x69c584: StoreField: r1->field_7 = r0
    //     0x69c584: stur            x0, [x1, #7]
    // 0x69c588: ldur            x0, [fp, #-0x18]
    // 0x69c58c: StoreField: r1->field_f = r0
    //     0x69c58c: stur            x0, [x1, #0xf]
    // 0x69c590: ldur            x16, [fp, #-8]
    // 0x69c594: stp             x1, x16, [SP]
    // 0x69c598: r0 = getRectForComposingRange()
    //     0x69c598: bl              #0x5cbdd4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getRectForComposingRange
    // 0x69c59c: mov             x1, x0
    // 0x69c5a0: ldur            x0, [fp, #-0x10]
    // 0x69c5a4: stur            x1, [fp, #-8]
    // 0x69c5a8: cmp             w0, NULL
    // 0x69c5ac: b.ne            #0x69c5b8
    // 0x69c5b0: r0 = Null
    //     0x69c5b0: mov             x0, NULL
    // 0x69c5b4: b               #0x69c5ec
    // 0x69c5b8: LoadField: d0 = r0->field_1f
    //     0x69c5b8: ldur            d0, [x0, #0x1f]
    // 0x69c5bc: LoadField: d1 = r0->field_f
    //     0x69c5bc: ldur            d1, [x0, #0xf]
    // 0x69c5c0: fsub            d2, d0, d1
    // 0x69c5c4: r0 = inline_Allocate_Double()
    //     0x69c5c4: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x69c5c8: add             x0, x0, #0x10
    //     0x69c5cc: cmp             x2, x0
    //     0x69c5d0: b.ls            #0x69c734
    //     0x69c5d4: str             x0, [THR, #0x50]  ; THR::top
    //     0x69c5d8: sub             x0, x0, #0xf
    //     0x69c5dc: movz            x2, #0xd148
    //     0x69c5e0: movk            x2, #0x3, lsl #16
    //     0x69c5e4: stur            x2, [x0, #-1]
    // 0x69c5e8: StoreField: r0->field_7 = d2
    //     0x69c5e8: stur            d2, [x0, #7]
    // 0x69c5ec: cmp             w0, NULL
    // 0x69c5f0: b.ne            #0x69c614
    // 0x69c5f4: ldr             x0, [fp, #0x10]
    // 0x69c5f8: LoadField: r2 = r0->field_a7
    //     0x69c5f8: ldur            w2, [x0, #0xa7]
    // 0x69c5fc: DecompressPointer r2
    //     0x69c5fc: add             x2, x2, HEAP, lsl #32
    // 0x69c600: LoadField: r3 = r2->field_b7
    //     0x69c600: ldur            w3, [x2, #0xb7]
    // 0x69c604: DecompressPointer r3
    //     0x69c604: add             x3, x3, HEAP, lsl #32
    // 0x69c608: str             x3, [SP]
    // 0x69c60c: r0 = preferredLineHeight()
    //     0x69c60c: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x69c610: b               #0x69c618
    // 0x69c614: LoadField: d0 = r0->field_7
    //     0x69c614: ldur            d0, [x0, #7]
    // 0x69c618: ldur            x0, [fp, #-8]
    // 0x69c61c: stur            d0, [fp, #-0x30]
    // 0x69c620: cmp             w0, NULL
    // 0x69c624: b.ne            #0x69c630
    // 0x69c628: r0 = Null
    //     0x69c628: mov             x0, NULL
    // 0x69c62c: b               #0x69c664
    // 0x69c630: LoadField: d1 = r0->field_1f
    //     0x69c630: ldur            d1, [x0, #0x1f]
    // 0x69c634: LoadField: d2 = r0->field_f
    //     0x69c634: ldur            d2, [x0, #0xf]
    // 0x69c638: fsub            d3, d1, d2
    // 0x69c63c: r0 = inline_Allocate_Double()
    //     0x69c63c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x69c640: add             x0, x0, #0x10
    //     0x69c644: cmp             x1, x0
    //     0x69c648: b.ls            #0x69c74c
    //     0x69c64c: str             x0, [THR, #0x50]  ; THR::top
    //     0x69c650: sub             x0, x0, #0xf
    //     0x69c654: movz            x1, #0xd148
    //     0x69c658: movk            x1, #0x3, lsl #16
    //     0x69c65c: stur            x1, [x0, #-1]
    // 0x69c660: StoreField: r0->field_7 = d3
    //     0x69c660: stur            d3, [x0, #7]
    // 0x69c664: cmp             w0, NULL
    // 0x69c668: b.ne            #0x69c690
    // 0x69c66c: ldr             x0, [fp, #0x10]
    // 0x69c670: LoadField: r1 = r0->field_a7
    //     0x69c670: ldur            w1, [x0, #0xa7]
    // 0x69c674: DecompressPointer r1
    //     0x69c674: add             x1, x1, HEAP, lsl #32
    // 0x69c678: LoadField: r0 = r1->field_b7
    //     0x69c678: ldur            w0, [x1, #0xb7]
    // 0x69c67c: DecompressPointer r0
    //     0x69c67c: add             x0, x0, HEAP, lsl #32
    // 0x69c680: str             x0, [SP]
    // 0x69c684: r0 = preferredLineHeight()
    //     0x69c684: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x69c688: mov             v1.16b, v0.16b
    // 0x69c68c: b               #0x69c698
    // 0x69c690: LoadField: d0 = r0->field_7
    //     0x69c690: ldur            d0, [x0, #7]
    // 0x69c694: mov             v1.16b, v0.16b
    // 0x69c698: ldur            d0, [fp, #-0x30]
    // 0x69c69c: stur            d1, [fp, #-0x38]
    // 0x69c6a0: r0 = _GlyphHeights()
    //     0x69c6a0: bl              #0x69c75c  ; Allocate_GlyphHeightsStub -> _GlyphHeights (size=0x18)
    // 0x69c6a4: ldur            d0, [fp, #-0x30]
    // 0x69c6a8: StoreField: r0->field_7 = d0
    //     0x69c6a8: stur            d0, [x0, #7]
    // 0x69c6ac: ldur            d0, [fp, #-0x38]
    // 0x69c6b0: StoreField: r0->field_f = d0
    //     0x69c6b0: stur            d0, [x0, #0xf]
    // 0x69c6b4: LeaveFrame
    //     0x69c6b4: mov             SP, fp
    //     0x69c6b8: ldp             fp, lr, [SP], #0x10
    // 0x69c6bc: ret
    //     0x69c6bc: ret             
    // 0x69c6c0: ldr             x0, [fp, #0x10]
    // 0x69c6c4: LoadField: r1 = r0->field_a7
    //     0x69c6c4: ldur            w1, [x0, #0xa7]
    // 0x69c6c8: DecompressPointer r1
    //     0x69c6c8: add             x1, x1, HEAP, lsl #32
    // 0x69c6cc: LoadField: r2 = r1->field_b7
    //     0x69c6cc: ldur            w2, [x1, #0xb7]
    // 0x69c6d0: DecompressPointer r2
    //     0x69c6d0: add             x2, x2, HEAP, lsl #32
    // 0x69c6d4: str             x2, [SP]
    // 0x69c6d8: r0 = preferredLineHeight()
    //     0x69c6d8: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x69c6dc: ldr             x0, [fp, #0x10]
    // 0x69c6e0: stur            d0, [fp, #-0x30]
    // 0x69c6e4: LoadField: r1 = r0->field_a7
    //     0x69c6e4: ldur            w1, [x0, #0xa7]
    // 0x69c6e8: DecompressPointer r1
    //     0x69c6e8: add             x1, x1, HEAP, lsl #32
    // 0x69c6ec: LoadField: r0 = r1->field_b7
    //     0x69c6ec: ldur            w0, [x1, #0xb7]
    // 0x69c6f0: DecompressPointer r0
    //     0x69c6f0: add             x0, x0, HEAP, lsl #32
    // 0x69c6f4: str             x0, [SP]
    // 0x69c6f8: r0 = preferredLineHeight()
    //     0x69c6f8: bl              #0x58383c  ; [package:flutter/src/painting/text_painter.dart] TextPainter::preferredLineHeight
    // 0x69c6fc: stur            d0, [fp, #-0x38]
    // 0x69c700: r0 = _GlyphHeights()
    //     0x69c700: bl              #0x69c75c  ; Allocate_GlyphHeightsStub -> _GlyphHeights (size=0x18)
    // 0x69c704: ldur            d0, [fp, #-0x30]
    // 0x69c708: StoreField: r0->field_7 = d0
    //     0x69c708: stur            d0, [x0, #7]
    // 0x69c70c: ldur            d0, [fp, #-0x38]
    // 0x69c710: StoreField: r0->field_f = d0
    //     0x69c710: stur            d0, [x0, #0xf]
    // 0x69c714: LeaveFrame
    //     0x69c714: mov             SP, fp
    //     0x69c718: ldp             fp, lr, [SP], #0x10
    // 0x69c71c: ret
    //     0x69c71c: ret             
    // 0x69c720: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69c720: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69c724: b               #0x69c3cc
    // 0x69c728: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69c728: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69c72c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69c72c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69c730: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69c730: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69c734: SaveReg d2
    //     0x69c734: str             q2, [SP, #-0x10]!
    // 0x69c738: SaveReg r1
    //     0x69c738: str             x1, [SP, #-8]!
    // 0x69c73c: r0 = AllocateDouble()
    //     0x69c73c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x69c740: RestoreReg r1
    //     0x69c740: ldr             x1, [SP], #8
    // 0x69c744: RestoreReg d2
    //     0x69c744: ldr             q2, [SP], #0x10
    // 0x69c748: b               #0x69c5e8
    // 0x69c74c: stp             q0, q3, [SP, #-0x20]!
    // 0x69c750: r0 = AllocateDouble()
    //     0x69c750: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x69c754: ldp             q0, q3, [SP], #0x20
    // 0x69c758: b               #0x69c660
  }
  get _ contextMenuButtonItems(/* No info */) {
    // ** addr: 0x69c780, size: 0x164
    // 0x69c780: EnterFrame
    //     0x69c780: stp             fp, lr, [SP, #-0x10]!
    //     0x69c784: mov             fp, SP
    // 0x69c788: AllocStack(0x60)
    //     0x69c788: sub             SP, SP, #0x60
    // 0x69c78c: CheckStackOverflow
    //     0x69c78c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69c790: cmp             SP, x16
    //     0x69c794: b.ls            #0x69c8dc
    // 0x69c798: r1 = 1
    //     0x69c798: movz            x1, #0x1
    // 0x69c79c: r0 = AllocateContext()
    //     0x69c79c: bl              #0xc5def4  ; AllocateContextStub
    // 0x69c7a0: mov             x1, x0
    // 0x69c7a4: ldr             x0, [fp, #0x10]
    // 0x69c7a8: stur            x1, [fp, #-8]
    // 0x69c7ac: StoreField: r1->field_f = r0
    //     0x69c7ac: stur            w0, [x1, #0xf]
    // 0x69c7b0: str             x0, [SP]
    // 0x69c7b4: r0 = buttonItemsForToolbarOptions()
    //     0x69c7b4: bl              #0x69d124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions
    // 0x69c7b8: cmp             w0, NULL
    // 0x69c7bc: b.ne            #0x69c8d0
    // 0x69c7c0: ldr             x0, [fp, #0x10]
    // 0x69c7c4: LoadField: r1 = r0->field_33
    //     0x69c7c4: ldur            w1, [x0, #0x33]
    // 0x69c7c8: DecompressPointer r1
    //     0x69c7c8: add             x1, x1, HEAP, lsl #32
    // 0x69c7cc: LoadField: r2 = r1->field_27
    //     0x69c7cc: ldur            w2, [x1, #0x27]
    // 0x69c7d0: DecompressPointer r2
    //     0x69c7d0: add             x2, x2, HEAP, lsl #32
    // 0x69c7d4: stur            x2, [fp, #-0x10]
    // 0x69c7d8: str             x0, [SP]
    // 0x69c7dc: r0 = copyEnabled()
    //     0x69c7dc: bl              #0x69d06c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copyEnabled
    // 0x69c7e0: tbnz            w0, #4, #0x69c7f8
    // 0x69c7e4: ldur            x2, [fp, #-8]
    // 0x69c7e8: r1 = Function '<anonymous closure>':.
    //     0x69c7e8: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe18] AnonymousClosure: (0x69f0ec), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x69c780)
    //     0x69c7ec: ldr             x1, [x1, #0xe18]
    // 0x69c7f0: r0 = AllocateClosure()
    //     0x69c7f0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69c7f4: b               #0x69c7fc
    // 0x69c7f8: r0 = Null
    //     0x69c7f8: mov             x0, NULL
    // 0x69c7fc: stur            x0, [fp, #-0x18]
    // 0x69c800: ldr             x16, [fp, #0x10]
    // 0x69c804: str             x16, [SP]
    // 0x69c808: r0 = cutEnabled()
    //     0x69c808: bl              #0x69cf90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x69c80c: tbnz            w0, #4, #0x69c824
    // 0x69c810: ldur            x2, [fp, #-8]
    // 0x69c814: r1 = Function '<anonymous closure>':.
    //     0x69c814: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe20] AnonymousClosure: (0x69f0a0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x69c780)
    //     0x69c818: ldr             x1, [x1, #0xe20]
    // 0x69c81c: r0 = AllocateClosure()
    //     0x69c81c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69c820: b               #0x69c828
    // 0x69c824: r0 = Null
    //     0x69c824: mov             x0, NULL
    // 0x69c828: stur            x0, [fp, #-0x20]
    // 0x69c82c: ldr             x16, [fp, #0x10]
    // 0x69c830: str             x16, [SP]
    // 0x69c834: r0 = pasteEnabled()
    //     0x69c834: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x69c838: tbnz            w0, #4, #0x69c850
    // 0x69c83c: ldur            x2, [fp, #-8]
    // 0x69c840: r1 = Function '<anonymous closure>':.
    //     0x69c840: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe28] AnonymousClosure: (0x69f054), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x69c780)
    //     0x69c844: ldr             x1, [x1, #0xe28]
    // 0x69c848: r0 = AllocateClosure()
    //     0x69c848: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69c84c: b               #0x69c854
    // 0x69c850: r0 = Null
    //     0x69c850: mov             x0, NULL
    // 0x69c854: stur            x0, [fp, #-0x28]
    // 0x69c858: ldr             x16, [fp, #0x10]
    // 0x69c85c: str             x16, [SP]
    // 0x69c860: r0 = selectAllEnabled()
    //     0x69c860: bl              #0x69cdd8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAllEnabled
    // 0x69c864: tbnz            w0, #4, #0x69c87c
    // 0x69c868: ldur            x2, [fp, #-8]
    // 0x69c86c: r1 = Function '<anonymous closure>':.
    //     0x69c86c: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe30] AnonymousClosure: (0x69f008), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x69c780)
    //     0x69c870: ldr             x1, [x1, #0xe30]
    // 0x69c874: r0 = AllocateClosure()
    //     0x69c874: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69c878: b               #0x69c880
    // 0x69c87c: r0 = Null
    //     0x69c87c: mov             x0, NULL
    // 0x69c880: stur            x0, [fp, #-0x30]
    // 0x69c884: ldr             x16, [fp, #0x10]
    // 0x69c888: str             x16, [SP]
    // 0x69c88c: r0 = liveTextInputEnabled()
    //     0x69c88c: bl              #0x69cd48  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::liveTextInputEnabled
    // 0x69c890: tbnz            w0, #4, #0x69c8a8
    // 0x69c894: ldur            x2, [fp, #-8]
    // 0x69c898: r1 = Function '<anonymous closure>':.
    //     0x69c898: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe38] AnonymousClosure: (0x69ef00), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::contextMenuButtonItems (0x69c780)
    //     0x69c89c: ldr             x1, [x1, #0xe38]
    // 0x69c8a0: r0 = AllocateClosure()
    //     0x69c8a0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69c8a4: b               #0x69c8ac
    // 0x69c8a8: r0 = Null
    //     0x69c8a8: mov             x0, NULL
    // 0x69c8ac: ldur            x16, [fp, #-0x10]
    // 0x69c8b0: ldur            lr, [fp, #-0x18]
    // 0x69c8b4: stp             lr, x16, [SP, #0x20]
    // 0x69c8b8: ldur            x16, [fp, #-0x20]
    // 0x69c8bc: stp             x0, x16, [SP, #0x10]
    // 0x69c8c0: ldur            x16, [fp, #-0x28]
    // 0x69c8c4: ldur            lr, [fp, #-0x30]
    // 0x69c8c8: stp             lr, x16, [SP]
    // 0x69c8cc: r0 = getEditableButtonItems()
    //     0x69c8cc: bl              #0x69c8e4  ; [package:flutter/src/widgets/editable_text.dart] EditableText::getEditableButtonItems
    // 0x69c8d0: LeaveFrame
    //     0x69c8d0: mov             SP, fp
    //     0x69c8d4: ldp             fp, lr, [SP], #0x10
    // 0x69c8d8: ret
    //     0x69c8d8: ret             
    // 0x69c8dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69c8dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69c8e0: b               #0x69c798
  }
  get _ liveTextInputEnabled(/* No info */) {
    // ** addr: 0x69cd48, size: 0x90
    // 0x69cd48: EnterFrame
    //     0x69cd48: stp             fp, lr, [SP, #-0x10]!
    //     0x69cd4c: mov             fp, SP
    // 0x69cd50: ldr             x1, [fp, #0x10]
    // 0x69cd54: LoadField: r2 = r1->field_37
    //     0x69cd54: ldur            w2, [x1, #0x37]
    // 0x69cd58: DecompressPointer r2
    //     0x69cd58: add             x2, x2, HEAP, lsl #32
    // 0x69cd5c: LoadField: r3 = r2->field_27
    //     0x69cd5c: ldur            w3, [x2, #0x27]
    // 0x69cd60: DecompressPointer r3
    //     0x69cd60: add             x3, x3, HEAP, lsl #32
    // 0x69cd64: r16 = Instance_LiveTextInputStatus
    //     0x69cd64: ldr             x16, [PP, #0x5e78]  ; [pp+0x5e78] Obj!LiveTextInputStatus@c421b1
    // 0x69cd68: cmp             w3, w16
    // 0x69cd6c: b.ne            #0x69cdc4
    // 0x69cd70: LoadField: r2 = r1->field_b
    //     0x69cd70: ldur            w2, [x1, #0xb]
    // 0x69cd74: DecompressPointer r2
    //     0x69cd74: add             x2, x2, HEAP, lsl #32
    // 0x69cd78: cmp             w2, NULL
    // 0x69cd7c: b.eq            #0x69cdd4
    // 0x69cd80: LoadField: r1 = r2->field_23
    //     0x69cd80: ldur            w1, [x2, #0x23]
    // 0x69cd84: DecompressPointer r1
    //     0x69cd84: add             x1, x1, HEAP, lsl #32
    // 0x69cd88: tbz             w1, #4, #0x69cdc4
    // 0x69cd8c: LoadField: r1 = r2->field_b
    //     0x69cd8c: ldur            w1, [x2, #0xb]
    // 0x69cd90: DecompressPointer r1
    //     0x69cd90: add             x1, x1, HEAP, lsl #32
    // 0x69cd94: LoadField: r2 = r1->field_27
    //     0x69cd94: ldur            w2, [x1, #0x27]
    // 0x69cd98: DecompressPointer r2
    //     0x69cd98: add             x2, x2, HEAP, lsl #32
    // 0x69cd9c: LoadField: r1 = r2->field_b
    //     0x69cd9c: ldur            w1, [x2, #0xb]
    // 0x69cda0: DecompressPointer r1
    //     0x69cda0: add             x1, x1, HEAP, lsl #32
    // 0x69cda4: LoadField: r2 = r1->field_7
    //     0x69cda4: ldur            x2, [x1, #7]
    // 0x69cda8: LoadField: r3 = r1->field_f
    //     0x69cda8: ldur            x3, [x1, #0xf]
    // 0x69cdac: cmp             x2, x3
    // 0x69cdb0: r16 = true
    //     0x69cdb0: add             x16, NULL, #0x20  ; true
    // 0x69cdb4: r17 = false
    //     0x69cdb4: add             x17, NULL, #0x30  ; false
    // 0x69cdb8: csel            x1, x16, x17, eq
    // 0x69cdbc: mov             x0, x1
    // 0x69cdc0: b               #0x69cdc8
    // 0x69cdc4: r0 = false
    //     0x69cdc4: add             x0, NULL, #0x30  ; false
    // 0x69cdc8: LeaveFrame
    //     0x69cdc8: mov             SP, fp
    //     0x69cdcc: ldp             fp, lr, [SP], #0x10
    // 0x69cdd0: ret
    //     0x69cdd0: ret             
    // 0x69cdd4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69cdd4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ selectAllEnabled(/* No info */) {
    // ** addr: 0x69cdd8, size: 0xe8
    // 0x69cdd8: EnterFrame
    //     0x69cdd8: stp             fp, lr, [SP, #-0x10]!
    //     0x69cddc: mov             fp, SP
    // 0x69cde0: ldr             x1, [fp, #0x10]
    // 0x69cde4: LoadField: r2 = r1->field_b
    //     0x69cde4: ldur            w2, [x1, #0xb]
    // 0x69cde8: DecompressPointer r2
    //     0x69cde8: add             x2, x2, HEAP, lsl #32
    // 0x69cdec: cmp             w2, NULL
    // 0x69cdf0: b.eq            #0x69cebc
    // 0x69cdf4: LoadField: r1 = r2->field_8b
    //     0x69cdf4: ldur            w1, [x2, #0x8b]
    // 0x69cdf8: DecompressPointer r1
    //     0x69cdf8: add             x1, x1, HEAP, lsl #32
    // 0x69cdfc: r3 = LoadClassIdInstr(r1)
    //     0x69cdfc: ldur            x3, [x1, #-1]
    //     0x69ce00: ubfx            x3, x3, #0xc, #0x14
    // 0x69ce04: lsl             x3, x3, #1
    // 0x69ce08: r1 = LoadInt32Instr(r3)
    //     0x69ce08: sbfx            x1, x3, #1, #0x1f
    // 0x69ce0c: r17 = 4411
    //     0x69ce0c: movz            x17, #0x113b
    // 0x69ce10: cmp             x1, x17
    // 0x69ce14: b.lt            #0x69ce90
    // 0x69ce18: r17 = 4421
    //     0x69ce18: movz            x17, #0x1145
    // 0x69ce1c: cmp             x1, x17
    // 0x69ce20: b.gt            #0x69ce90
    // 0x69ce24: LoadField: r1 = r2->field_b
    //     0x69ce24: ldur            w1, [x2, #0xb]
    // 0x69ce28: DecompressPointer r1
    //     0x69ce28: add             x1, x1, HEAP, lsl #32
    // 0x69ce2c: LoadField: r3 = r1->field_27
    //     0x69ce2c: ldur            w3, [x1, #0x27]
    // 0x69ce30: DecompressPointer r3
    //     0x69ce30: add             x3, x3, HEAP, lsl #32
    // 0x69ce34: LoadField: r1 = r3->field_7
    //     0x69ce34: ldur            w1, [x3, #7]
    // 0x69ce38: DecompressPointer r1
    //     0x69ce38: add             x1, x1, HEAP, lsl #32
    // 0x69ce3c: LoadField: r4 = r1->field_7
    //     0x69ce3c: ldur            w4, [x1, #7]
    // 0x69ce40: DecompressPointer r4
    //     0x69ce40: add             x4, x4, HEAP, lsl #32
    // 0x69ce44: cbz             w4, #0x69ce80
    // 0x69ce48: LoadField: r1 = r3->field_b
    //     0x69ce48: ldur            w1, [x3, #0xb]
    // 0x69ce4c: DecompressPointer r1
    //     0x69ce4c: add             x1, x1, HEAP, lsl #32
    // 0x69ce50: LoadField: r3 = r1->field_7
    //     0x69ce50: ldur            x3, [x1, #7]
    // 0x69ce54: cbnz            x3, #0x69ce78
    // 0x69ce58: LoadField: r3 = r1->field_f
    //     0x69ce58: ldur            x3, [x1, #0xf]
    // 0x69ce5c: r1 = LoadInt32Instr(r4)
    //     0x69ce5c: sbfx            x1, x4, #1, #0x1f
    // 0x69ce60: cmp             x3, x1
    // 0x69ce64: r16 = true
    //     0x69ce64: add             x16, NULL, #0x20  ; true
    // 0x69ce68: r17 = false
    //     0x69ce68: add             x17, NULL, #0x30  ; false
    // 0x69ce6c: csel            x4, x16, x17, ne
    // 0x69ce70: mov             x0, x4
    // 0x69ce74: b               #0x69ce84
    // 0x69ce78: r0 = true
    //     0x69ce78: add             x0, NULL, #0x20  ; true
    // 0x69ce7c: b               #0x69ce84
    // 0x69ce80: r0 = false
    //     0x69ce80: add             x0, NULL, #0x30  ; false
    // 0x69ce84: LeaveFrame
    //     0x69ce84: mov             SP, fp
    //     0x69ce88: ldp             fp, lr, [SP], #0x10
    // 0x69ce8c: ret
    //     0x69ce8c: ret             
    // 0x69ce90: LoadField: r1 = r2->field_2b
    //     0x69ce90: ldur            w1, [x2, #0x2b]
    // 0x69ce94: DecompressPointer r1
    //     0x69ce94: add             x1, x1, HEAP, lsl #32
    // 0x69ce98: LoadField: r2 = r1->field_13
    //     0x69ce98: ldur            w2, [x1, #0x13]
    // 0x69ce9c: DecompressPointer r2
    //     0x69ce9c: add             x2, x2, HEAP, lsl #32
    // 0x69cea0: tbnz            w2, #4, #0x69ceac
    // 0x69cea4: r0 = true
    //     0x69cea4: add             x0, NULL, #0x20  ; true
    // 0x69cea8: b               #0x69ceb0
    // 0x69ceac: r0 = false
    //     0x69ceac: add             x0, NULL, #0x30  ; false
    // 0x69ceb0: LeaveFrame
    //     0x69ceb0: mov             SP, fp
    //     0x69ceb4: ldp             fp, lr, [SP], #0x10
    // 0x69ceb8: ret
    //     0x69ceb8: ret             
    // 0x69cebc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69cebc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ pasteEnabled(/* No info */) {
    // ** addr: 0x69cec0, size: 0xd0
    // 0x69cec0: EnterFrame
    //     0x69cec0: stp             fp, lr, [SP, #-0x10]!
    //     0x69cec4: mov             fp, SP
    // 0x69cec8: ldr             x1, [fp, #0x10]
    // 0x69cecc: LoadField: r2 = r1->field_b
    //     0x69cecc: ldur            w2, [x1, #0xb]
    // 0x69ced0: DecompressPointer r2
    //     0x69ced0: add             x2, x2, HEAP, lsl #32
    // 0x69ced4: cmp             w2, NULL
    // 0x69ced8: b.eq            #0x69cf8c
    // 0x69cedc: LoadField: r3 = r2->field_8b
    //     0x69cedc: ldur            w3, [x2, #0x8b]
    // 0x69cee0: DecompressPointer r3
    //     0x69cee0: add             x3, x3, HEAP, lsl #32
    // 0x69cee4: r4 = LoadClassIdInstr(r3)
    //     0x69cee4: ldur            x4, [x3, #-1]
    //     0x69cee8: ubfx            x4, x4, #0xc, #0x14
    // 0x69ceec: lsl             x4, x4, #1
    // 0x69cef0: r3 = LoadInt32Instr(r4)
    //     0x69cef0: sbfx            x3, x4, #1, #0x1f
    // 0x69cef4: r17 = 4411
    //     0x69cef4: movz            x17, #0x113b
    // 0x69cef8: cmp             x3, x17
    // 0x69cefc: b.lt            #0x69cf54
    // 0x69cf00: r17 = 4421
    //     0x69cf00: movz            x17, #0x1145
    // 0x69cf04: cmp             x3, x17
    // 0x69cf08: b.gt            #0x69cf54
    // 0x69cf0c: LoadField: r3 = r2->field_23
    //     0x69cf0c: ldur            w3, [x2, #0x23]
    // 0x69cf10: DecompressPointer r3
    //     0x69cf10: add             x3, x3, HEAP, lsl #32
    // 0x69cf14: tbz             w3, #4, #0x69cf44
    // 0x69cf18: LoadField: r3 = r1->field_33
    //     0x69cf18: ldur            w3, [x1, #0x33]
    // 0x69cf1c: DecompressPointer r3
    //     0x69cf1c: add             x3, x3, HEAP, lsl #32
    // 0x69cf20: LoadField: r1 = r3->field_27
    //     0x69cf20: ldur            w1, [x3, #0x27]
    // 0x69cf24: DecompressPointer r1
    //     0x69cf24: add             x1, x1, HEAP, lsl #32
    // 0x69cf28: r16 = Instance_ClipboardStatus
    //     0x69cf28: ldr             x16, [PP, #0x5e28]  ; [pp+0x5e28] Obj!ClipboardStatus@c42211
    // 0x69cf2c: cmp             w1, w16
    // 0x69cf30: r16 = true
    //     0x69cf30: add             x16, NULL, #0x20  ; true
    // 0x69cf34: r17 = false
    //     0x69cf34: add             x17, NULL, #0x30  ; false
    // 0x69cf38: csel            x3, x16, x17, eq
    // 0x69cf3c: mov             x0, x3
    // 0x69cf40: b               #0x69cf48
    // 0x69cf44: r0 = false
    //     0x69cf44: add             x0, NULL, #0x30  ; false
    // 0x69cf48: LeaveFrame
    //     0x69cf48: mov             SP, fp
    //     0x69cf4c: ldp             fp, lr, [SP], #0x10
    // 0x69cf50: ret
    //     0x69cf50: ret             
    // 0x69cf54: LoadField: r1 = r2->field_2b
    //     0x69cf54: ldur            w1, [x2, #0x2b]
    // 0x69cf58: DecompressPointer r1
    //     0x69cf58: add             x1, x1, HEAP, lsl #32
    // 0x69cf5c: LoadField: r3 = r1->field_f
    //     0x69cf5c: ldur            w3, [x1, #0xf]
    // 0x69cf60: DecompressPointer r3
    //     0x69cf60: add             x3, x3, HEAP, lsl #32
    // 0x69cf64: tbnz            w3, #4, #0x69cf7c
    // 0x69cf68: LoadField: r1 = r2->field_23
    //     0x69cf68: ldur            w1, [x2, #0x23]
    // 0x69cf6c: DecompressPointer r1
    //     0x69cf6c: add             x1, x1, HEAP, lsl #32
    // 0x69cf70: eor             x2, x1, #0x10
    // 0x69cf74: mov             x0, x2
    // 0x69cf78: b               #0x69cf80
    // 0x69cf7c: r0 = false
    //     0x69cf7c: add             x0, NULL, #0x30  ; false
    // 0x69cf80: LeaveFrame
    //     0x69cf80: mov             SP, fp
    //     0x69cf84: ldp             fp, lr, [SP], #0x10
    // 0x69cf88: ret
    //     0x69cf88: ret             
    // 0x69cf8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69cf8c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ cutEnabled(/* No info */) {
    // ** addr: 0x69cf90, size: 0xdc
    // 0x69cf90: EnterFrame
    //     0x69cf90: stp             fp, lr, [SP, #-0x10]!
    //     0x69cf94: mov             fp, SP
    // 0x69cf98: ldr             x1, [fp, #0x10]
    // 0x69cf9c: LoadField: r2 = r1->field_b
    //     0x69cf9c: ldur            w2, [x1, #0xb]
    // 0x69cfa0: DecompressPointer r2
    //     0x69cfa0: add             x2, x2, HEAP, lsl #32
    // 0x69cfa4: cmp             w2, NULL
    // 0x69cfa8: b.eq            #0x69d068
    // 0x69cfac: LoadField: r1 = r2->field_8b
    //     0x69cfac: ldur            w1, [x2, #0x8b]
    // 0x69cfb0: DecompressPointer r1
    //     0x69cfb0: add             x1, x1, HEAP, lsl #32
    // 0x69cfb4: r3 = LoadClassIdInstr(r1)
    //     0x69cfb4: ldur            x3, [x1, #-1]
    //     0x69cfb8: ubfx            x3, x3, #0xc, #0x14
    // 0x69cfbc: lsl             x3, x3, #1
    // 0x69cfc0: r1 = LoadInt32Instr(r3)
    //     0x69cfc0: sbfx            x1, x3, #1, #0x1f
    // 0x69cfc4: r17 = 4411
    //     0x69cfc4: movz            x17, #0x113b
    // 0x69cfc8: cmp             x1, x17
    // 0x69cfcc: b.lt            #0x69d030
    // 0x69cfd0: r17 = 4421
    //     0x69cfd0: movz            x17, #0x1145
    // 0x69cfd4: cmp             x1, x17
    // 0x69cfd8: b.gt            #0x69d030
    // 0x69cfdc: LoadField: r1 = r2->field_23
    //     0x69cfdc: ldur            w1, [x2, #0x23]
    // 0x69cfe0: DecompressPointer r1
    //     0x69cfe0: add             x1, x1, HEAP, lsl #32
    // 0x69cfe4: tbz             w1, #4, #0x69d020
    // 0x69cfe8: LoadField: r1 = r2->field_b
    //     0x69cfe8: ldur            w1, [x2, #0xb]
    // 0x69cfec: DecompressPointer r1
    //     0x69cfec: add             x1, x1, HEAP, lsl #32
    // 0x69cff0: LoadField: r3 = r1->field_27
    //     0x69cff0: ldur            w3, [x1, #0x27]
    // 0x69cff4: DecompressPointer r3
    //     0x69cff4: add             x3, x3, HEAP, lsl #32
    // 0x69cff8: LoadField: r1 = r3->field_b
    //     0x69cff8: ldur            w1, [x3, #0xb]
    // 0x69cffc: DecompressPointer r1
    //     0x69cffc: add             x1, x1, HEAP, lsl #32
    // 0x69d000: LoadField: r3 = r1->field_7
    //     0x69d000: ldur            x3, [x1, #7]
    // 0x69d004: LoadField: r4 = r1->field_f
    //     0x69d004: ldur            x4, [x1, #0xf]
    // 0x69d008: cmp             x3, x4
    // 0x69d00c: r16 = true
    //     0x69d00c: add             x16, NULL, #0x20  ; true
    // 0x69d010: r17 = false
    //     0x69d010: add             x17, NULL, #0x30  ; false
    // 0x69d014: csel            x1, x16, x17, ne
    // 0x69d018: mov             x0, x1
    // 0x69d01c: b               #0x69d024
    // 0x69d020: r0 = false
    //     0x69d020: add             x0, NULL, #0x30  ; false
    // 0x69d024: LeaveFrame
    //     0x69d024: mov             SP, fp
    //     0x69d028: ldp             fp, lr, [SP], #0x10
    // 0x69d02c: ret
    //     0x69d02c: ret             
    // 0x69d030: LoadField: r1 = r2->field_2b
    //     0x69d030: ldur            w1, [x2, #0x2b]
    // 0x69d034: DecompressPointer r1
    //     0x69d034: add             x1, x1, HEAP, lsl #32
    // 0x69d038: LoadField: r3 = r1->field_b
    //     0x69d038: ldur            w3, [x1, #0xb]
    // 0x69d03c: DecompressPointer r3
    //     0x69d03c: add             x3, x3, HEAP, lsl #32
    // 0x69d040: tbnz            w3, #4, #0x69d058
    // 0x69d044: LoadField: r1 = r2->field_23
    //     0x69d044: ldur            w1, [x2, #0x23]
    // 0x69d048: DecompressPointer r1
    //     0x69d048: add             x1, x1, HEAP, lsl #32
    // 0x69d04c: tbz             w1, #4, #0x69d058
    // 0x69d050: r0 = true
    //     0x69d050: add             x0, NULL, #0x20  ; true
    // 0x69d054: b               #0x69d05c
    // 0x69d058: r0 = false
    //     0x69d058: add             x0, NULL, #0x30  ; false
    // 0x69d05c: LeaveFrame
    //     0x69d05c: mov             SP, fp
    //     0x69d060: ldp             fp, lr, [SP], #0x10
    // 0x69d064: ret
    //     0x69d064: ret             
    // 0x69d068: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69d068: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ copyEnabled(/* No info */) {
    // ** addr: 0x69d06c, size: 0xb8
    // 0x69d06c: EnterFrame
    //     0x69d06c: stp             fp, lr, [SP, #-0x10]!
    //     0x69d070: mov             fp, SP
    // 0x69d074: ldr             x1, [fp, #0x10]
    // 0x69d078: LoadField: r2 = r1->field_b
    //     0x69d078: ldur            w2, [x1, #0xb]
    // 0x69d07c: DecompressPointer r2
    //     0x69d07c: add             x2, x2, HEAP, lsl #32
    // 0x69d080: cmp             w2, NULL
    // 0x69d084: b.eq            #0x69d120
    // 0x69d088: LoadField: r1 = r2->field_8b
    //     0x69d088: ldur            w1, [x2, #0x8b]
    // 0x69d08c: DecompressPointer r1
    //     0x69d08c: add             x1, x1, HEAP, lsl #32
    // 0x69d090: r3 = LoadClassIdInstr(r1)
    //     0x69d090: ldur            x3, [x1, #-1]
    //     0x69d094: ubfx            x3, x3, #0xc, #0x14
    // 0x69d098: lsl             x3, x3, #1
    // 0x69d09c: r1 = LoadInt32Instr(r3)
    //     0x69d09c: sbfx            x1, x3, #1, #0x1f
    // 0x69d0a0: r17 = 4411
    //     0x69d0a0: movz            x17, #0x113b
    // 0x69d0a4: cmp             x1, x17
    // 0x69d0a8: b.lt            #0x69d0f4
    // 0x69d0ac: r17 = 4421
    //     0x69d0ac: movz            x17, #0x1145
    // 0x69d0b0: cmp             x1, x17
    // 0x69d0b4: b.gt            #0x69d0f4
    // 0x69d0b8: LoadField: r1 = r2->field_b
    //     0x69d0b8: ldur            w1, [x2, #0xb]
    // 0x69d0bc: DecompressPointer r1
    //     0x69d0bc: add             x1, x1, HEAP, lsl #32
    // 0x69d0c0: LoadField: r3 = r1->field_27
    //     0x69d0c0: ldur            w3, [x1, #0x27]
    // 0x69d0c4: DecompressPointer r3
    //     0x69d0c4: add             x3, x3, HEAP, lsl #32
    // 0x69d0c8: LoadField: r1 = r3->field_b
    //     0x69d0c8: ldur            w1, [x3, #0xb]
    // 0x69d0cc: DecompressPointer r1
    //     0x69d0cc: add             x1, x1, HEAP, lsl #32
    // 0x69d0d0: LoadField: r3 = r1->field_7
    //     0x69d0d0: ldur            x3, [x1, #7]
    // 0x69d0d4: LoadField: r4 = r1->field_f
    //     0x69d0d4: ldur            x4, [x1, #0xf]
    // 0x69d0d8: cmp             x3, x4
    // 0x69d0dc: r16 = true
    //     0x69d0dc: add             x16, NULL, #0x20  ; true
    // 0x69d0e0: r17 = false
    //     0x69d0e0: add             x17, NULL, #0x30  ; false
    // 0x69d0e4: csel            x0, x16, x17, ne
    // 0x69d0e8: LeaveFrame
    //     0x69d0e8: mov             SP, fp
    //     0x69d0ec: ldp             fp, lr, [SP], #0x10
    // 0x69d0f0: ret
    //     0x69d0f0: ret             
    // 0x69d0f4: LoadField: r1 = r2->field_2b
    //     0x69d0f4: ldur            w1, [x2, #0x2b]
    // 0x69d0f8: DecompressPointer r1
    //     0x69d0f8: add             x1, x1, HEAP, lsl #32
    // 0x69d0fc: LoadField: r2 = r1->field_7
    //     0x69d0fc: ldur            w2, [x1, #7]
    // 0x69d100: DecompressPointer r2
    //     0x69d100: add             x2, x2, HEAP, lsl #32
    // 0x69d104: tbnz            w2, #4, #0x69d110
    // 0x69d108: r0 = true
    //     0x69d108: add             x0, NULL, #0x20  ; true
    // 0x69d10c: b               #0x69d114
    // 0x69d110: r0 = false
    //     0x69d110: add             x0, NULL, #0x30  ; false
    // 0x69d114: LeaveFrame
    //     0x69d114: mov             SP, fp
    //     0x69d118: ldp             fp, lr, [SP], #0x10
    // 0x69d11c: ret
    //     0x69d11c: ret             
    // 0x69d120: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69d120: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ buttonItemsForToolbarOptions(/* No info */) {
    // ** addr: 0x69d124, size: 0x458
    // 0x69d124: EnterFrame
    //     0x69d124: stp             fp, lr, [SP, #-0x10]!
    //     0x69d128: mov             fp, SP
    // 0x69d12c: AllocStack(0x38)
    //     0x69d12c: sub             SP, SP, #0x38
    // 0x69d130: CheckStackOverflow
    //     0x69d130: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69d134: cmp             SP, x16
    //     0x69d138: b.ls            #0x69d560
    // 0x69d13c: r1 = 1
    //     0x69d13c: movz            x1, #0x1
    // 0x69d140: r0 = AllocateContext()
    //     0x69d140: bl              #0xc5def4  ; AllocateContextStub
    // 0x69d144: mov             x1, x0
    // 0x69d148: ldr             x0, [fp, #0x10]
    // 0x69d14c: stur            x1, [fp, #-0x10]
    // 0x69d150: StoreField: r1->field_f = r0
    //     0x69d150: stur            w0, [x1, #0xf]
    // 0x69d154: LoadField: r2 = r0->field_b
    //     0x69d154: ldur            w2, [x0, #0xb]
    // 0x69d158: DecompressPointer r2
    //     0x69d158: add             x2, x2, HEAP, lsl #32
    // 0x69d15c: cmp             w2, NULL
    // 0x69d160: b.eq            #0x69d568
    // 0x69d164: LoadField: r3 = r2->field_2b
    //     0x69d164: ldur            w3, [x2, #0x2b]
    // 0x69d168: DecompressPointer r3
    //     0x69d168: add             x3, x3, HEAP, lsl #32
    // 0x69d16c: stur            x3, [fp, #-8]
    // 0x69d170: r16 = Instance_ToolbarOptions
    //     0x69d170: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1ff08] Obj!ToolbarOptions@c2c871
    //     0x69d174: ldr             x16, [x16, #0xf08]
    // 0x69d178: cmp             w3, w16
    // 0x69d17c: b.ne            #0x69d190
    // 0x69d180: r0 = Null
    //     0x69d180: mov             x0, NULL
    // 0x69d184: LeaveFrame
    //     0x69d184: mov             SP, fp
    //     0x69d188: ldp             fp, lr, [SP], #0x10
    // 0x69d18c: ret
    //     0x69d18c: ret             
    // 0x69d190: r16 = <ContextMenuButtonItem>
    //     0x69d190: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1fed8] TypeArguments: <ContextMenuButtonItem>
    //     0x69d194: ldr             x16, [x16, #0xed8]
    // 0x69d198: stp             xzr, x16, [SP]
    // 0x69d19c: r0 = _GrowableList()
    //     0x69d19c: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x69d1a0: mov             x1, x0
    // 0x69d1a4: ldur            x0, [fp, #-8]
    // 0x69d1a8: stur            x1, [fp, #-0x18]
    // 0x69d1ac: LoadField: r2 = r0->field_b
    //     0x69d1ac: ldur            w2, [x0, #0xb]
    // 0x69d1b0: DecompressPointer r2
    //     0x69d1b0: add             x2, x2, HEAP, lsl #32
    // 0x69d1b4: tbnz            w2, #4, #0x69d294
    // 0x69d1b8: ldr             x16, [fp, #0x10]
    // 0x69d1bc: str             x16, [SP]
    // 0x69d1c0: r0 = cutEnabled()
    //     0x69d1c0: bl              #0x69cf90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x69d1c4: tbnz            w0, #4, #0x69d28c
    // 0x69d1c8: ldur            x0, [fp, #-0x18]
    // 0x69d1cc: ldur            x2, [fp, #-0x10]
    // 0x69d1d0: r1 = Function '<anonymous closure>':.
    //     0x69d1d0: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1ff10] AnonymousClosure: (0x69e3fc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x69d124)
    //     0x69d1d4: ldr             x1, [x1, #0xf10]
    // 0x69d1d8: r0 = AllocateClosure()
    //     0x69d1d8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69d1dc: stur            x0, [fp, #-0x20]
    // 0x69d1e0: r0 = ContextMenuButtonItem()
    //     0x69d1e0: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69d1e4: mov             x1, x0
    // 0x69d1e8: ldur            x0, [fp, #-0x20]
    // 0x69d1ec: stur            x1, [fp, #-0x28]
    // 0x69d1f0: StoreField: r1->field_7 = r0
    //     0x69d1f0: stur            w0, [x1, #7]
    // 0x69d1f4: r0 = Instance_ContextMenuButtonType
    //     0x69d1f4: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fee0] Obj!ContextMenuButtonType@c42ed1
    //     0x69d1f8: ldr             x0, [x0, #0xee0]
    // 0x69d1fc: StoreField: r1->field_b = r0
    //     0x69d1fc: stur            w0, [x1, #0xb]
    // 0x69d200: ldur            x0, [fp, #-0x18]
    // 0x69d204: LoadField: r2 = r0->field_b
    //     0x69d204: ldur            w2, [x0, #0xb]
    // 0x69d208: DecompressPointer r2
    //     0x69d208: add             x2, x2, HEAP, lsl #32
    // 0x69d20c: stur            x2, [fp, #-0x20]
    // 0x69d210: LoadField: r3 = r0->field_f
    //     0x69d210: ldur            w3, [x0, #0xf]
    // 0x69d214: DecompressPointer r3
    //     0x69d214: add             x3, x3, HEAP, lsl #32
    // 0x69d218: LoadField: r4 = r3->field_b
    //     0x69d218: ldur            w4, [x3, #0xb]
    // 0x69d21c: DecompressPointer r4
    //     0x69d21c: add             x4, x4, HEAP, lsl #32
    // 0x69d220: cmp             w2, w4
    // 0x69d224: b.ne            #0x69d230
    // 0x69d228: str             x0, [SP]
    // 0x69d22c: r0 = _growToNextCapacity()
    //     0x69d22c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69d230: ldur            x2, [fp, #-0x18]
    // 0x69d234: ldur            x0, [fp, #-0x20]
    // 0x69d238: r3 = LoadInt32Instr(r0)
    //     0x69d238: sbfx            x3, x0, #1, #0x1f
    // 0x69d23c: add             x0, x3, #1
    // 0x69d240: lsl             x1, x0, #1
    // 0x69d244: StoreField: r2->field_b = r1
    //     0x69d244: stur            w1, [x2, #0xb]
    // 0x69d248: mov             x1, x3
    // 0x69d24c: cmp             x1, x0
    // 0x69d250: b.hs            #0x69d56c
    // 0x69d254: LoadField: r1 = r2->field_f
    //     0x69d254: ldur            w1, [x2, #0xf]
    // 0x69d258: DecompressPointer r1
    //     0x69d258: add             x1, x1, HEAP, lsl #32
    // 0x69d25c: ldur            x0, [fp, #-0x28]
    // 0x69d260: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69d260: add             x25, x1, x3, lsl #2
    //     0x69d264: add             x25, x25, #0xf
    //     0x69d268: str             w0, [x25]
    //     0x69d26c: tbz             w0, #0, #0x69d288
    //     0x69d270: ldurb           w16, [x1, #-1]
    //     0x69d274: ldurb           w17, [x0, #-1]
    //     0x69d278: and             x16, x17, x16, lsr #2
    //     0x69d27c: tst             x16, HEAP, lsr #32
    //     0x69d280: b.eq            #0x69d288
    //     0x69d284: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69d288: b               #0x69d298
    // 0x69d28c: ldur            x2, [fp, #-0x18]
    // 0x69d290: b               #0x69d298
    // 0x69d294: mov             x2, x1
    // 0x69d298: ldur            x0, [fp, #-8]
    // 0x69d29c: LoadField: r1 = r0->field_7
    //     0x69d29c: ldur            w1, [x0, #7]
    // 0x69d2a0: DecompressPointer r1
    //     0x69d2a0: add             x1, x1, HEAP, lsl #32
    // 0x69d2a4: tbnz            w1, #4, #0x69d380
    // 0x69d2a8: ldr             x16, [fp, #0x10]
    // 0x69d2ac: str             x16, [SP]
    // 0x69d2b0: r0 = copyEnabled()
    //     0x69d2b0: bl              #0x69d06c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copyEnabled
    // 0x69d2b4: tbnz            w0, #4, #0x69d37c
    // 0x69d2b8: ldur            x0, [fp, #-0x18]
    // 0x69d2bc: ldur            x2, [fp, #-0x10]
    // 0x69d2c0: r1 = Function '<anonymous closure>':.
    //     0x69d2c0: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1ff18] AnonymousClosure: (0x69e138), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x69d124)
    //     0x69d2c4: ldr             x1, [x1, #0xf18]
    // 0x69d2c8: r0 = AllocateClosure()
    //     0x69d2c8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69d2cc: stur            x0, [fp, #-0x20]
    // 0x69d2d0: r0 = ContextMenuButtonItem()
    //     0x69d2d0: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69d2d4: mov             x1, x0
    // 0x69d2d8: ldur            x0, [fp, #-0x20]
    // 0x69d2dc: stur            x1, [fp, #-0x28]
    // 0x69d2e0: StoreField: r1->field_7 = r0
    //     0x69d2e0: stur            w0, [x1, #7]
    // 0x69d2e4: r0 = Instance_ContextMenuButtonType
    //     0x69d2e4: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fee8] Obj!ContextMenuButtonType@c42eb1
    //     0x69d2e8: ldr             x0, [x0, #0xee8]
    // 0x69d2ec: StoreField: r1->field_b = r0
    //     0x69d2ec: stur            w0, [x1, #0xb]
    // 0x69d2f0: ldur            x0, [fp, #-0x18]
    // 0x69d2f4: LoadField: r2 = r0->field_b
    //     0x69d2f4: ldur            w2, [x0, #0xb]
    // 0x69d2f8: DecompressPointer r2
    //     0x69d2f8: add             x2, x2, HEAP, lsl #32
    // 0x69d2fc: stur            x2, [fp, #-0x20]
    // 0x69d300: LoadField: r3 = r0->field_f
    //     0x69d300: ldur            w3, [x0, #0xf]
    // 0x69d304: DecompressPointer r3
    //     0x69d304: add             x3, x3, HEAP, lsl #32
    // 0x69d308: LoadField: r4 = r3->field_b
    //     0x69d308: ldur            w4, [x3, #0xb]
    // 0x69d30c: DecompressPointer r4
    //     0x69d30c: add             x4, x4, HEAP, lsl #32
    // 0x69d310: cmp             w2, w4
    // 0x69d314: b.ne            #0x69d320
    // 0x69d318: str             x0, [SP]
    // 0x69d31c: r0 = _growToNextCapacity()
    //     0x69d31c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69d320: ldur            x2, [fp, #-0x18]
    // 0x69d324: ldur            x0, [fp, #-0x20]
    // 0x69d328: r3 = LoadInt32Instr(r0)
    //     0x69d328: sbfx            x3, x0, #1, #0x1f
    // 0x69d32c: add             x0, x3, #1
    // 0x69d330: lsl             x1, x0, #1
    // 0x69d334: StoreField: r2->field_b = r1
    //     0x69d334: stur            w1, [x2, #0xb]
    // 0x69d338: mov             x1, x3
    // 0x69d33c: cmp             x1, x0
    // 0x69d340: b.hs            #0x69d570
    // 0x69d344: LoadField: r1 = r2->field_f
    //     0x69d344: ldur            w1, [x2, #0xf]
    // 0x69d348: DecompressPointer r1
    //     0x69d348: add             x1, x1, HEAP, lsl #32
    // 0x69d34c: ldur            x0, [fp, #-0x28]
    // 0x69d350: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69d350: add             x25, x1, x3, lsl #2
    //     0x69d354: add             x25, x25, #0xf
    //     0x69d358: str             w0, [x25]
    //     0x69d35c: tbz             w0, #0, #0x69d378
    //     0x69d360: ldurb           w16, [x1, #-1]
    //     0x69d364: ldurb           w17, [x0, #-1]
    //     0x69d368: and             x16, x17, x16, lsr #2
    //     0x69d36c: tst             x16, HEAP, lsr #32
    //     0x69d370: b.eq            #0x69d378
    //     0x69d374: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69d378: b               #0x69d380
    // 0x69d37c: ldur            x2, [fp, #-0x18]
    // 0x69d380: ldur            x0, [fp, #-8]
    // 0x69d384: LoadField: r1 = r0->field_f
    //     0x69d384: ldur            w1, [x0, #0xf]
    // 0x69d388: DecompressPointer r1
    //     0x69d388: add             x1, x1, HEAP, lsl #32
    // 0x69d38c: tbnz            w1, #4, #0x69d468
    // 0x69d390: ldr             x16, [fp, #0x10]
    // 0x69d394: str             x16, [SP]
    // 0x69d398: r0 = pasteEnabled()
    //     0x69d398: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x69d39c: tbnz            w0, #4, #0x69d464
    // 0x69d3a0: ldur            x0, [fp, #-0x18]
    // 0x69d3a4: ldur            x2, [fp, #-0x10]
    // 0x69d3a8: r1 = Function '<anonymous closure>':.
    //     0x69d3a8: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1ff20] AnonymousClosure: (0x69d714), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x69d124)
    //     0x69d3ac: ldr             x1, [x1, #0xf20]
    // 0x69d3b0: r0 = AllocateClosure()
    //     0x69d3b0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69d3b4: stur            x0, [fp, #-0x20]
    // 0x69d3b8: r0 = ContextMenuButtonItem()
    //     0x69d3b8: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69d3bc: mov             x1, x0
    // 0x69d3c0: ldur            x0, [fp, #-0x20]
    // 0x69d3c4: stur            x1, [fp, #-0x28]
    // 0x69d3c8: StoreField: r1->field_7 = r0
    //     0x69d3c8: stur            w0, [x1, #7]
    // 0x69d3cc: r0 = Instance_ContextMenuButtonType
    //     0x69d3cc: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fef0] Obj!ContextMenuButtonType@c42e91
    //     0x69d3d0: ldr             x0, [x0, #0xef0]
    // 0x69d3d4: StoreField: r1->field_b = r0
    //     0x69d3d4: stur            w0, [x1, #0xb]
    // 0x69d3d8: ldur            x0, [fp, #-0x18]
    // 0x69d3dc: LoadField: r2 = r0->field_b
    //     0x69d3dc: ldur            w2, [x0, #0xb]
    // 0x69d3e0: DecompressPointer r2
    //     0x69d3e0: add             x2, x2, HEAP, lsl #32
    // 0x69d3e4: stur            x2, [fp, #-0x20]
    // 0x69d3e8: LoadField: r3 = r0->field_f
    //     0x69d3e8: ldur            w3, [x0, #0xf]
    // 0x69d3ec: DecompressPointer r3
    //     0x69d3ec: add             x3, x3, HEAP, lsl #32
    // 0x69d3f0: LoadField: r4 = r3->field_b
    //     0x69d3f0: ldur            w4, [x3, #0xb]
    // 0x69d3f4: DecompressPointer r4
    //     0x69d3f4: add             x4, x4, HEAP, lsl #32
    // 0x69d3f8: cmp             w2, w4
    // 0x69d3fc: b.ne            #0x69d408
    // 0x69d400: str             x0, [SP]
    // 0x69d404: r0 = _growToNextCapacity()
    //     0x69d404: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69d408: ldur            x2, [fp, #-0x18]
    // 0x69d40c: ldur            x0, [fp, #-0x20]
    // 0x69d410: r3 = LoadInt32Instr(r0)
    //     0x69d410: sbfx            x3, x0, #1, #0x1f
    // 0x69d414: add             x0, x3, #1
    // 0x69d418: lsl             x1, x0, #1
    // 0x69d41c: StoreField: r2->field_b = r1
    //     0x69d41c: stur            w1, [x2, #0xb]
    // 0x69d420: mov             x1, x3
    // 0x69d424: cmp             x1, x0
    // 0x69d428: b.hs            #0x69d574
    // 0x69d42c: LoadField: r1 = r2->field_f
    //     0x69d42c: ldur            w1, [x2, #0xf]
    // 0x69d430: DecompressPointer r1
    //     0x69d430: add             x1, x1, HEAP, lsl #32
    // 0x69d434: ldur            x0, [fp, #-0x28]
    // 0x69d438: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69d438: add             x25, x1, x3, lsl #2
    //     0x69d43c: add             x25, x25, #0xf
    //     0x69d440: str             w0, [x25]
    //     0x69d444: tbz             w0, #0, #0x69d460
    //     0x69d448: ldurb           w16, [x1, #-1]
    //     0x69d44c: ldurb           w17, [x0, #-1]
    //     0x69d450: and             x16, x17, x16, lsr #2
    //     0x69d454: tst             x16, HEAP, lsr #32
    //     0x69d458: b.eq            #0x69d460
    //     0x69d45c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69d460: b               #0x69d468
    // 0x69d464: ldur            x2, [fp, #-0x18]
    // 0x69d468: ldur            x0, [fp, #-8]
    // 0x69d46c: LoadField: r1 = r0->field_13
    //     0x69d46c: ldur            w1, [x0, #0x13]
    // 0x69d470: DecompressPointer r1
    //     0x69d470: add             x1, x1, HEAP, lsl #32
    // 0x69d474: tbnz            w1, #4, #0x69d550
    // 0x69d478: ldr             x16, [fp, #0x10]
    // 0x69d47c: str             x16, [SP]
    // 0x69d480: r0 = selectAllEnabled()
    //     0x69d480: bl              #0x69cdd8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAllEnabled
    // 0x69d484: tbnz            w0, #4, #0x69d54c
    // 0x69d488: ldur            x0, [fp, #-0x18]
    // 0x69d48c: ldur            x2, [fp, #-0x10]
    // 0x69d490: r1 = Function '<anonymous closure>':.
    //     0x69d490: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1ff28] AnonymousClosure: (0x69d57c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::buttonItemsForToolbarOptions (0x69d124)
    //     0x69d494: ldr             x1, [x1, #0xf28]
    // 0x69d498: r0 = AllocateClosure()
    //     0x69d498: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69d49c: stur            x0, [fp, #-8]
    // 0x69d4a0: r0 = ContextMenuButtonItem()
    //     0x69d4a0: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69d4a4: mov             x1, x0
    // 0x69d4a8: ldur            x0, [fp, #-8]
    // 0x69d4ac: stur            x1, [fp, #-0x10]
    // 0x69d4b0: StoreField: r1->field_7 = r0
    //     0x69d4b0: stur            w0, [x1, #7]
    // 0x69d4b4: r0 = Instance_ContextMenuButtonType
    //     0x69d4b4: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fef8] Obj!ContextMenuButtonType@c42e71
    //     0x69d4b8: ldr             x0, [x0, #0xef8]
    // 0x69d4bc: StoreField: r1->field_b = r0
    //     0x69d4bc: stur            w0, [x1, #0xb]
    // 0x69d4c0: ldur            x0, [fp, #-0x18]
    // 0x69d4c4: LoadField: r2 = r0->field_b
    //     0x69d4c4: ldur            w2, [x0, #0xb]
    // 0x69d4c8: DecompressPointer r2
    //     0x69d4c8: add             x2, x2, HEAP, lsl #32
    // 0x69d4cc: stur            x2, [fp, #-8]
    // 0x69d4d0: LoadField: r3 = r0->field_f
    //     0x69d4d0: ldur            w3, [x0, #0xf]
    // 0x69d4d4: DecompressPointer r3
    //     0x69d4d4: add             x3, x3, HEAP, lsl #32
    // 0x69d4d8: LoadField: r4 = r3->field_b
    //     0x69d4d8: ldur            w4, [x3, #0xb]
    // 0x69d4dc: DecompressPointer r4
    //     0x69d4dc: add             x4, x4, HEAP, lsl #32
    // 0x69d4e0: cmp             w2, w4
    // 0x69d4e4: b.ne            #0x69d4f0
    // 0x69d4e8: str             x0, [SP]
    // 0x69d4ec: r0 = _growToNextCapacity()
    //     0x69d4ec: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69d4f0: ldur            x2, [fp, #-0x18]
    // 0x69d4f4: ldur            x3, [fp, #-8]
    // 0x69d4f8: r4 = LoadInt32Instr(r3)
    //     0x69d4f8: sbfx            x4, x3, #1, #0x1f
    // 0x69d4fc: add             x0, x4, #1
    // 0x69d500: lsl             x3, x0, #1
    // 0x69d504: StoreField: r2->field_b = r3
    //     0x69d504: stur            w3, [x2, #0xb]
    // 0x69d508: mov             x1, x4
    // 0x69d50c: cmp             x1, x0
    // 0x69d510: b.hs            #0x69d578
    // 0x69d514: LoadField: r1 = r2->field_f
    //     0x69d514: ldur            w1, [x2, #0xf]
    // 0x69d518: DecompressPointer r1
    //     0x69d518: add             x1, x1, HEAP, lsl #32
    // 0x69d51c: ldur            x0, [fp, #-0x10]
    // 0x69d520: ArrayStore: r1[r4] = r0  ; List_4
    //     0x69d520: add             x25, x1, x4, lsl #2
    //     0x69d524: add             x25, x25, #0xf
    //     0x69d528: str             w0, [x25]
    //     0x69d52c: tbz             w0, #0, #0x69d548
    //     0x69d530: ldurb           w16, [x1, #-1]
    //     0x69d534: ldurb           w17, [x0, #-1]
    //     0x69d538: and             x16, x17, x16, lsr #2
    //     0x69d53c: tst             x16, HEAP, lsr #32
    //     0x69d540: b.eq            #0x69d548
    //     0x69d544: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69d548: b               #0x69d550
    // 0x69d54c: ldur            x2, [fp, #-0x18]
    // 0x69d550: mov             x0, x2
    // 0x69d554: LeaveFrame
    //     0x69d554: mov             SP, fp
    //     0x69d558: ldp             fp, lr, [SP], #0x10
    // 0x69d55c: ret
    //     0x69d55c: ret             
    // 0x69d560: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69d560: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69d564: b               #0x69d13c
    // 0x69d568: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69d568: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69d56c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69d56c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69d570: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69d570: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69d574: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69d574: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69d578: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69d578: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69d57c, size: 0x50
    // 0x69d57c: EnterFrame
    //     0x69d57c: stp             fp, lr, [SP, #-0x10]!
    //     0x69d580: mov             fp, SP
    // 0x69d584: AllocStack(0x10)
    //     0x69d584: sub             SP, SP, #0x10
    // 0x69d588: SetupParameters()
    //     0x69d588: ldr             x0, [fp, #0x10]
    //     0x69d58c: ldur            w1, [x0, #0x17]
    //     0x69d590: add             x1, x1, HEAP, lsl #32
    // 0x69d594: CheckStackOverflow
    //     0x69d594: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69d598: cmp             SP, x16
    //     0x69d59c: b.ls            #0x69d5c4
    // 0x69d5a0: LoadField: r0 = r1->field_f
    //     0x69d5a0: ldur            w0, [x1, #0xf]
    // 0x69d5a4: DecompressPointer r0
    //     0x69d5a4: add             x0, x0, HEAP, lsl #32
    // 0x69d5a8: r16 = Instance_SelectionChangedCause
    //     0x69d5a8: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69d5ac: stp             x16, x0, [SP]
    // 0x69d5b0: r0 = selectAll()
    //     0x69d5b0: bl              #0x69d5cc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAll
    // 0x69d5b4: r0 = Null
    //     0x69d5b4: mov             x0, NULL
    // 0x69d5b8: LeaveFrame
    //     0x69d5b8: mov             SP, fp
    //     0x69d5bc: ldp             fp, lr, [SP], #0x10
    // 0x69d5c0: ret
    //     0x69d5c0: ret             
    // 0x69d5c4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69d5c4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69d5c8: b               #0x69d5a0
  }
  _ selectAll(/* No info */) {
    // ** addr: 0x69d5cc, size: 0x148
    // 0x69d5cc: EnterFrame
    //     0x69d5cc: stp             fp, lr, [SP, #-0x10]!
    //     0x69d5d0: mov             fp, SP
    // 0x69d5d4: AllocStack(0x28)
    //     0x69d5d4: sub             SP, SP, #0x28
    // 0x69d5d8: CheckStackOverflow
    //     0x69d5d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69d5dc: cmp             SP, x16
    //     0x69d5e0: b.ls            #0x69d704
    // 0x69d5e4: ldr             x0, [fp, #0x18]
    // 0x69d5e8: LoadField: r1 = r0->field_b
    //     0x69d5e8: ldur            w1, [x0, #0xb]
    // 0x69d5ec: DecompressPointer r1
    //     0x69d5ec: add             x1, x1, HEAP, lsl #32
    // 0x69d5f0: cmp             w1, NULL
    // 0x69d5f4: b.eq            #0x69d70c
    // 0x69d5f8: LoadField: r2 = r1->field_b
    //     0x69d5f8: ldur            w2, [x1, #0xb]
    // 0x69d5fc: DecompressPointer r2
    //     0x69d5fc: add             x2, x2, HEAP, lsl #32
    // 0x69d600: LoadField: r1 = r2->field_27
    //     0x69d600: ldur            w1, [x2, #0x27]
    // 0x69d604: DecompressPointer r1
    //     0x69d604: add             x1, x1, HEAP, lsl #32
    // 0x69d608: stur            x1, [fp, #-0x10]
    // 0x69d60c: LoadField: r2 = r1->field_7
    //     0x69d60c: ldur            w2, [x1, #7]
    // 0x69d610: DecompressPointer r2
    //     0x69d610: add             x2, x2, HEAP, lsl #32
    // 0x69d614: LoadField: r3 = r2->field_7
    //     0x69d614: ldur            w3, [x2, #7]
    // 0x69d618: DecompressPointer r3
    //     0x69d618: add             x3, x3, HEAP, lsl #32
    // 0x69d61c: stur            x3, [fp, #-8]
    // 0x69d620: r0 = TextSelection()
    //     0x69d620: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x69d624: mov             x1, x0
    // 0x69d628: r0 = 0
    //     0x69d628: movz            x0, #0
    // 0x69d62c: ArrayStore: r1[0] = r0  ; List_8
    //     0x69d62c: stur            x0, [x1, #0x17]
    // 0x69d630: ldur            x0, [fp, #-8]
    // 0x69d634: r2 = LoadInt32Instr(r0)
    //     0x69d634: sbfx            x2, x0, #1, #0x1f
    // 0x69d638: StoreField: r1->field_1f = r2
    //     0x69d638: stur            x2, [x1, #0x1f]
    // 0x69d63c: r0 = Instance_TextAffinity
    //     0x69d63c: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x69d640: StoreField: r1->field_27 = r0
    //     0x69d640: stur            w0, [x1, #0x27]
    // 0x69d644: r0 = false
    //     0x69d644: add             x0, NULL, #0x30  ; false
    // 0x69d648: StoreField: r1->field_2b = r0
    //     0x69d648: stur            w0, [x1, #0x2b]
    // 0x69d64c: cmp             x2, #0
    // 0x69d650: r16 = true
    //     0x69d650: add             x16, NULL, #0x20  ; true
    // 0x69d654: r17 = false
    //     0x69d654: add             x17, NULL, #0x30  ; false
    // 0x69d658: csel            x0, x16, x17, gt
    // 0x69d65c: tbnz            w0, #4, #0x69d668
    // 0x69d660: r3 = 0
    //     0x69d660: movz            x3, #0
    // 0x69d664: b               #0x69d66c
    // 0x69d668: mov             x3, x2
    // 0x69d66c: tbz             w0, #4, #0x69d674
    // 0x69d670: r2 = 0
    //     0x69d670: movz            x2, #0
    // 0x69d674: ldr             x0, [fp, #0x10]
    // 0x69d678: StoreField: r1->field_7 = r3
    //     0x69d678: stur            x3, [x1, #7]
    // 0x69d67c: StoreField: r1->field_f = r2
    //     0x69d67c: stur            x2, [x1, #0xf]
    // 0x69d680: ldur            x16, [fp, #-0x10]
    // 0x69d684: stp             x1, x16, [SP]
    // 0x69d688: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x69d688: ldr             x4, [PP, #0x6330]  ; [pp+0x6330] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x69d68c: r0 = copyWith()
    //     0x69d68c: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x69d690: ldr             x16, [fp, #0x18]
    // 0x69d694: stp             x0, x16, [SP, #8]
    // 0x69d698: ldr             x16, [fp, #0x10]
    // 0x69d69c: str             x16, [SP]
    // 0x69d6a0: r0 = userUpdateTextEditingValue()
    //     0x69d6a0: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x69d6a4: ldr             x0, [fp, #0x10]
    // 0x69d6a8: r16 = Instance_SelectionChangedCause
    //     0x69d6a8: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69d6ac: cmp             w0, w16
    // 0x69d6b0: b.ne            #0x69d6f4
    // 0x69d6b4: ldr             x0, [fp, #0x18]
    // 0x69d6b8: LoadField: r1 = r0->field_b
    //     0x69d6b8: ldur            w1, [x0, #0xb]
    // 0x69d6bc: DecompressPointer r1
    //     0x69d6bc: add             x1, x1, HEAP, lsl #32
    // 0x69d6c0: cmp             w1, NULL
    // 0x69d6c4: b.eq            #0x69d710
    // 0x69d6c8: LoadField: r2 = r1->field_b
    //     0x69d6c8: ldur            w2, [x1, #0xb]
    // 0x69d6cc: DecompressPointer r2
    //     0x69d6cc: add             x2, x2, HEAP, lsl #32
    // 0x69d6d0: LoadField: r1 = r2->field_27
    //     0x69d6d0: ldur            w1, [x2, #0x27]
    // 0x69d6d4: DecompressPointer r1
    //     0x69d6d4: add             x1, x1, HEAP, lsl #32
    // 0x69d6d8: LoadField: r2 = r1->field_b
    //     0x69d6d8: ldur            w2, [x1, #0xb]
    // 0x69d6dc: DecompressPointer r2
    //     0x69d6dc: add             x2, x2, HEAP, lsl #32
    // 0x69d6e0: str             x2, [SP]
    // 0x69d6e4: r0 = extent()
    //     0x69d6e4: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x69d6e8: ldr             x16, [fp, #0x18]
    // 0x69d6ec: stp             x0, x16, [SP]
    // 0x69d6f0: r0 = bringIntoView()
    //     0x69d6f0: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x69d6f4: r0 = Null
    //     0x69d6f4: mov             x0, NULL
    // 0x69d6f8: LeaveFrame
    //     0x69d6f8: mov             SP, fp
    //     0x69d6fc: ldp             fp, lr, [SP], #0x10
    // 0x69d700: ret
    //     0x69d700: ret             
    // 0x69d704: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69d704: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69d708: b               #0x69d5e4
    // 0x69d70c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69d70c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69d710: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69d710: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69d714, size: 0x50
    // 0x69d714: EnterFrame
    //     0x69d714: stp             fp, lr, [SP, #-0x10]!
    //     0x69d718: mov             fp, SP
    // 0x69d71c: AllocStack(0x10)
    //     0x69d71c: sub             SP, SP, #0x10
    // 0x69d720: SetupParameters()
    //     0x69d720: ldr             x0, [fp, #0x10]
    //     0x69d724: ldur            w1, [x0, #0x17]
    //     0x69d728: add             x1, x1, HEAP, lsl #32
    // 0x69d72c: CheckStackOverflow
    //     0x69d72c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69d730: cmp             SP, x16
    //     0x69d734: b.ls            #0x69d75c
    // 0x69d738: LoadField: r0 = r1->field_f
    //     0x69d738: ldur            w0, [x1, #0xf]
    // 0x69d73c: DecompressPointer r0
    //     0x69d73c: add             x0, x0, HEAP, lsl #32
    // 0x69d740: r16 = Instance_SelectionChangedCause
    //     0x69d740: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69d744: stp             x16, x0, [SP]
    // 0x69d748: r0 = pasteText()
    //     0x69d748: bl              #0x69d764  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x69d74c: r0 = Null
    //     0x69d74c: mov             x0, NULL
    // 0x69d750: LeaveFrame
    //     0x69d750: mov             SP, fp
    //     0x69d754: ldp             fp, lr, [SP], #0x10
    // 0x69d758: ret
    //     0x69d758: ret             
    // 0x69d75c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69d75c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69d760: b               #0x69d738
  }
  _ pasteText(/* No info */) async {
    // ** addr: 0x69d764, size: 0x44c
    // 0x69d764: EnterFrame
    //     0x69d764: stp             fp, lr, [SP, #-0x10]!
    //     0x69d768: mov             fp, SP
    // 0x69d76c: AllocStack(0x60)
    //     0x69d76c: sub             SP, SP, #0x60
    // 0x69d770: SetupParameters(EditableTextState this /* r1, fp-0x18 */, dynamic _ /* r2, fp-0x10 */)
    //     0x69d770: stur            NULL, [fp, #-8]
    //     0x69d774: movz            x0, #0
    //     0x69d778: add             x1, fp, w0, sxtw #2
    //     0x69d77c: ldr             x1, [x1, #0x18]
    //     0x69d780: stur            x1, [fp, #-0x18]
    //     0x69d784: add             x2, fp, w0, sxtw #2
    //     0x69d788: ldr             x2, [x2, #0x10]
    //     0x69d78c: stur            x2, [fp, #-0x10]
    // 0x69d790: CheckStackOverflow
    //     0x69d790: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69d794: cmp             SP, x16
    //     0x69d798: b.ls            #0x69db98
    // 0x69d79c: r1 = 1
    //     0x69d79c: movz            x1, #0x1
    // 0x69d7a0: r0 = AllocateContext()
    //     0x69d7a0: bl              #0xc5def4  ; AllocateContextStub
    // 0x69d7a4: mov             x2, x0
    // 0x69d7a8: ldur            x1, [fp, #-0x18]
    // 0x69d7ac: stur            x2, [fp, #-0x20]
    // 0x69d7b0: StoreField: r2->field_f = r1
    //     0x69d7b0: stur            w1, [x2, #0xf]
    // 0x69d7b4: InitAsync() -> Future<void?>
    //     0x69d7b4: ldr             x0, [PP, #0x1c18]  ; [pp+0x1c18] TypeArguments: <void?>
    //     0x69d7b8: bl              #0x4dea10  ; InitAsyncStub
    // 0x69d7bc: ldur            x0, [fp, #-0x18]
    // 0x69d7c0: LoadField: r1 = r0->field_b
    //     0x69d7c0: ldur            w1, [x0, #0xb]
    // 0x69d7c4: DecompressPointer r1
    //     0x69d7c4: add             x1, x1, HEAP, lsl #32
    // 0x69d7c8: cmp             w1, NULL
    // 0x69d7cc: b.eq            #0x69dba0
    // 0x69d7d0: LoadField: r2 = r1->field_23
    //     0x69d7d0: ldur            w2, [x1, #0x23]
    // 0x69d7d4: DecompressPointer r2
    //     0x69d7d4: add             x2, x2, HEAP, lsl #32
    // 0x69d7d8: tbnz            w2, #4, #0x69d7e4
    // 0x69d7dc: r0 = Null
    //     0x69d7dc: mov             x0, NULL
    // 0x69d7e0: r0 = ReturnAsyncNotFuture()
    //     0x69d7e0: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x69d7e4: LoadField: r2 = r1->field_b
    //     0x69d7e4: ldur            w2, [x1, #0xb]
    // 0x69d7e8: DecompressPointer r2
    //     0x69d7e8: add             x2, x2, HEAP, lsl #32
    // 0x69d7ec: LoadField: r1 = r2->field_27
    //     0x69d7ec: ldur            w1, [x2, #0x27]
    // 0x69d7f0: DecompressPointer r1
    //     0x69d7f0: add             x1, x1, HEAP, lsl #32
    // 0x69d7f4: LoadField: r2 = r1->field_b
    //     0x69d7f4: ldur            w2, [x1, #0xb]
    // 0x69d7f8: DecompressPointer r2
    //     0x69d7f8: add             x2, x2, HEAP, lsl #32
    // 0x69d7fc: stur            x2, [fp, #-0x28]
    // 0x69d800: LoadField: r1 = r2->field_7
    //     0x69d800: ldur            x1, [x2, #7]
    // 0x69d804: tbnz            x1, #0x3f, #0x69db90
    // 0x69d808: LoadField: r1 = r2->field_f
    //     0x69d808: ldur            x1, [x2, #0xf]
    // 0x69d80c: tbnz            x1, #0x3f, #0x69db90
    // 0x69d810: r0 = getData()
    //     0x69d810: bl              #0x69dfb8  ; [package:flutter/src/services/clipboard.dart] Clipboard::getData
    // 0x69d814: mov             x1, x0
    // 0x69d818: stur            x1, [fp, #-0x30]
    // 0x69d81c: r0 = Await()
    //     0x69d81c: bl              #0x4de7e4  ; AwaitStub
    // 0x69d820: mov             x2, x0
    // 0x69d824: stur            x2, [fp, #-0x40]
    // 0x69d828: cmp             w2, NULL
    // 0x69d82c: b.ne            #0x69d838
    // 0x69d830: r0 = Null
    //     0x69d830: mov             x0, NULL
    // 0x69d834: r0 = ReturnAsyncNotFuture()
    //     0x69d834: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x69d838: ldur            x3, [fp, #-0x28]
    // 0x69d83c: ArrayLoad: r4 = r3[0]  ; List_8
    //     0x69d83c: ldur            x4, [x3, #0x17]
    // 0x69d840: stur            x4, [fp, #-0x38]
    // 0x69d844: LoadField: r5 = r3->field_1f
    //     0x69d844: ldur            x5, [x3, #0x1f]
    // 0x69d848: cmp             x4, x5
    // 0x69d84c: b.le            #0x69d870
    // 0x69d850: r0 = BoxInt64Instr(r4)
    //     0x69d850: sbfiz           x0, x4, #1, #0x1f
    //     0x69d854: cmp             x4, x0, asr #1
    //     0x69d858: b.eq            #0x69d864
    //     0x69d85c: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d860: stur            x4, [x0, #7]
    // 0x69d864: mov             x3, x0
    // 0x69d868: mov             x0, x2
    // 0x69d86c: b               #0x69d9c8
    // 0x69d870: cmp             x4, x5
    // 0x69d874: b.ge            #0x69d898
    // 0x69d878: r0 = BoxInt64Instr(r5)
    //     0x69d878: sbfiz           x0, x5, #1, #0x1f
    //     0x69d87c: cmp             x5, x0, asr #1
    //     0x69d880: b.eq            #0x69d88c
    //     0x69d884: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d888: stur            x5, [x0, #7]
    // 0x69d88c: mov             x3, x0
    // 0x69d890: mov             x0, x2
    // 0x69d894: b               #0x69d9c8
    // 0x69d898: r0 = BoxInt64Instr(r5)
    //     0x69d898: sbfiz           x0, x5, #1, #0x1f
    //     0x69d89c: cmp             x5, x0, asr #1
    //     0x69d8a0: b.eq            #0x69d8ac
    //     0x69d8a4: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d8a8: stur            x5, [x0, #7]
    // 0x69d8ac: mov             x6, x0
    // 0x69d8b0: stur            x6, [fp, #-0x30]
    // 0x69d8b4: r0 = LoadTaggedClassIdMayBeSmiInstr(r6)
    //     0x69d8b4: movz            x0, #0x76
    //     0x69d8b8: tbz             w6, #0, #0x69d8c8
    //     0x69d8bc: ldur            x0, [x6, #-1]
    //     0x69d8c0: ubfx            x0, x0, #0xc, #0x14
    //     0x69d8c4: lsl             x0, x0, #1
    // 0x69d8c8: cmp             w0, #0x7a
    // 0x69d8cc: b.ne            #0x69d95c
    // 0x69d8d0: r0 = BoxInt64Instr(r4)
    //     0x69d8d0: sbfiz           x0, x4, #1, #0x1f
    //     0x69d8d4: cmp             x4, x0, asr #1
    //     0x69d8d8: b.eq            #0x69d8e4
    //     0x69d8dc: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d8e0: stur            x4, [x0, #7]
    // 0x69d8e4: r1 = LoadTaggedClassIdMayBeSmiInstr(r0)
    //     0x69d8e4: movz            x1, #0x76
    //     0x69d8e8: tbz             w0, #0, #0x69d8f8
    //     0x69d8ec: ldur            x1, [x0, #-1]
    //     0x69d8f0: ubfx            x1, x1, #0xc, #0x14
    //     0x69d8f4: lsl             x1, x1, #1
    // 0x69d8f8: cmp             w1, #0x7a
    // 0x69d8fc: b.ne            #0x69d938
    // 0x69d900: d0 = 0.000000
    //     0x69d900: eor             v0.16b, v0.16b, v0.16b
    // 0x69d904: scvtf           d1, x4
    // 0x69d908: fcmp            d1, d0
    // 0x69d90c: b.vs            #0x69d938
    // 0x69d910: b.ne            #0x69d938
    // 0x69d914: add             x6, x4, x5
    // 0x69d918: r0 = BoxInt64Instr(r6)
    //     0x69d918: sbfiz           x0, x6, #1, #0x1f
    //     0x69d91c: cmp             x6, x0, asr #1
    //     0x69d920: b.eq            #0x69d92c
    //     0x69d924: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d928: stur            x6, [x0, #7]
    // 0x69d92c: mov             x3, x0
    // 0x69d930: mov             x0, x2
    // 0x69d934: b               #0x69d9c8
    // 0x69d938: LoadField: d0 = r6->field_7
    //     0x69d938: ldur            d0, [x6, #7]
    // 0x69d93c: fcmp            d0, d0
    // 0x69d940: b.vc            #0x69d950
    // 0x69d944: mov             x3, x6
    // 0x69d948: mov             x0, x2
    // 0x69d94c: b               #0x69d9c8
    // 0x69d950: mov             x3, x0
    // 0x69d954: mov             x0, x2
    // 0x69d958: b               #0x69d9c8
    // 0x69d95c: cbnz            x5, #0x69d9a8
    // 0x69d960: r0 = BoxInt64Instr(r4)
    //     0x69d960: sbfiz           x0, x4, #1, #0x1f
    //     0x69d964: cmp             x4, x0, asr #1
    //     0x69d968: b.eq            #0x69d974
    //     0x69d96c: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d970: stur            x4, [x0, #7]
    // 0x69d974: r1 = 59
    //     0x69d974: movz            x1, #0x3b
    // 0x69d978: branchIfSmi(r0, 0x69d984)
    //     0x69d978: tbz             w0, #0, #0x69d984
    // 0x69d97c: r1 = LoadClassIdInstr(r0)
    //     0x69d97c: ldur            x1, [x0, #-1]
    //     0x69d980: ubfx            x1, x1, #0xc, #0x14
    // 0x69d984: str             x0, [SP]
    // 0x69d988: mov             x0, x1
    // 0x69d98c: r0 = GDT[cid_x0 + -0xfea]()
    //     0x69d98c: sub             lr, x0, #0xfea
    //     0x69d990: ldr             lr, [x21, lr, lsl #3]
    //     0x69d994: blr             lr
    // 0x69d998: tbnz            w0, #4, #0x69d9a8
    // 0x69d99c: ldur            x3, [fp, #-0x30]
    // 0x69d9a0: ldur            x0, [fp, #-0x40]
    // 0x69d9a4: b               #0x69d9c8
    // 0x69d9a8: ldur            x2, [fp, #-0x38]
    // 0x69d9ac: r0 = BoxInt64Instr(r2)
    //     0x69d9ac: sbfiz           x0, x2, #1, #0x1f
    //     0x69d9b0: cmp             x2, x0, asr #1
    //     0x69d9b4: b.eq            #0x69d9c0
    //     0x69d9b8: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x69d9bc: stur            x2, [x0, #7]
    // 0x69d9c0: mov             x3, x0
    // 0x69d9c4: ldur            x0, [fp, #-0x40]
    // 0x69d9c8: ldur            x1, [fp, #-0x18]
    // 0x69d9cc: ldur            x2, [fp, #-0x10]
    // 0x69d9d0: stur            x3, [fp, #-0x48]
    // 0x69d9d4: LoadField: r4 = r1->field_b
    //     0x69d9d4: ldur            w4, [x1, #0xb]
    // 0x69d9d8: DecompressPointer r4
    //     0x69d9d8: add             x4, x4, HEAP, lsl #32
    // 0x69d9dc: cmp             w4, NULL
    // 0x69d9e0: b.eq            #0x69dba4
    // 0x69d9e4: LoadField: r5 = r4->field_b
    //     0x69d9e4: ldur            w5, [x4, #0xb]
    // 0x69d9e8: DecompressPointer r5
    //     0x69d9e8: add             x5, x5, HEAP, lsl #32
    // 0x69d9ec: LoadField: r4 = r5->field_27
    //     0x69d9ec: ldur            w4, [x5, #0x27]
    // 0x69d9f0: DecompressPointer r4
    //     0x69d9f0: add             x4, x4, HEAP, lsl #32
    // 0x69d9f4: stur            x4, [fp, #-0x30]
    // 0x69d9f8: r0 = TextSelection()
    //     0x69d9f8: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x69d9fc: mov             x1, x0
    // 0x69da00: r0 = Instance_TextAffinity
    //     0x69da00: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x69da04: StoreField: r1->field_27 = r0
    //     0x69da04: stur            w0, [x1, #0x27]
    // 0x69da08: ldur            x0, [fp, #-0x48]
    // 0x69da0c: r2 = LoadInt32Instr(r0)
    //     0x69da0c: sbfx            x2, x0, #1, #0x1f
    //     0x69da10: tbz             w0, #0, #0x69da18
    //     0x69da14: ldur            x2, [x0, #7]
    // 0x69da18: ArrayStore: r1[0] = r2  ; List_8
    //     0x69da18: stur            x2, [x1, #0x17]
    // 0x69da1c: StoreField: r1->field_1f = r2
    //     0x69da1c: stur            x2, [x1, #0x1f]
    // 0x69da20: r0 = false
    //     0x69da20: add             x0, NULL, #0x30  ; false
    // 0x69da24: StoreField: r1->field_2b = r0
    //     0x69da24: stur            w0, [x1, #0x2b]
    // 0x69da28: StoreField: r1->field_7 = r2
    //     0x69da28: stur            x2, [x1, #7]
    // 0x69da2c: StoreField: r1->field_f = r2
    //     0x69da2c: stur            x2, [x1, #0xf]
    // 0x69da30: ldur            x16, [fp, #-0x30]
    // 0x69da34: stp             x1, x16, [SP]
    // 0x69da38: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0x69da38: ldr             x4, [PP, #0x6330]  ; [pp+0x6330] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0x69da3c: r0 = copyWith()
    //     0x69da3c: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x69da40: mov             x1, x0
    // 0x69da44: ldur            x0, [fp, #-0x40]
    // 0x69da48: LoadField: r2 = r0->field_7
    //     0x69da48: ldur            w2, [x0, #7]
    // 0x69da4c: DecompressPointer r2
    //     0x69da4c: add             x2, x2, HEAP, lsl #32
    // 0x69da50: ldur            x16, [fp, #-0x28]
    // 0x69da54: stp             x16, x1, [SP, #8]
    // 0x69da58: str             x2, [SP]
    // 0x69da5c: r0 = replaced()
    //     0x69da5c: bl              #0x69dbb0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::replaced
    // 0x69da60: ldur            x16, [fp, #-0x18]
    // 0x69da64: stp             x0, x16, [SP, #8]
    // 0x69da68: ldur            x16, [fp, #-0x10]
    // 0x69da6c: str             x16, [SP]
    // 0x69da70: r0 = userUpdateTextEditingValue()
    //     0x69da70: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x69da74: ldur            x0, [fp, #-0x10]
    // 0x69da78: r16 = Instance_SelectionChangedCause
    //     0x69da78: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69da7c: cmp             w0, w16
    // 0x69da80: b.ne            #0x69db88
    // 0x69da84: r0 = LoadStaticField(0x1474)
    //     0x69da84: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x69da88: ldr             x0, [x0, #0x28e8]
    // 0x69da8c: cmp             w0, NULL
    // 0x69da90: b.eq            #0x69dba8
    // 0x69da94: LoadField: r3 = r0->field_53
    //     0x69da94: ldur            w3, [x0, #0x53]
    // 0x69da98: DecompressPointer r3
    //     0x69da98: add             x3, x3, HEAP, lsl #32
    // 0x69da9c: stur            x3, [fp, #-0x28]
    // 0x69daa0: LoadField: r0 = r3->field_7
    //     0x69daa0: ldur            w0, [x3, #7]
    // 0x69daa4: DecompressPointer r0
    //     0x69daa4: add             x0, x0, HEAP, lsl #32
    // 0x69daa8: ldur            x2, [fp, #-0x20]
    // 0x69daac: stur            x0, [fp, #-0x10]
    // 0x69dab0: r1 = Function '<anonymous closure>':.
    //     0x69dab0: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe48] AnonymousClosure: (0x69e0a0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText (0x69d764)
    //     0x69dab4: ldr             x1, [x1, #0xe48]
    // 0x69dab8: r0 = AllocateClosure()
    //     0x69dab8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69dabc: ldur            x2, [fp, #-0x10]
    // 0x69dac0: mov             x3, x0
    // 0x69dac4: r1 = Null
    //     0x69dac4: mov             x1, NULL
    // 0x69dac8: stur            x3, [fp, #-0x10]
    // 0x69dacc: cmp             w2, NULL
    // 0x69dad0: b.eq            #0x69daf0
    // 0x69dad4: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x69dad4: ldur            w4, [x2, #0x17]
    // 0x69dad8: DecompressPointer r4
    //     0x69dad8: add             x4, x4, HEAP, lsl #32
    // 0x69dadc: r8 = X0
    //     0x69dadc: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x69dae0: LoadField: r9 = r4->field_7
    //     0x69dae0: ldur            x9, [x4, #7]
    // 0x69dae4: r3 = Null
    //     0x69dae4: add             x3, PP, #0x1f, lsl #12  ; [pp+0x1fe50] Null
    //     0x69dae8: ldr             x3, [x3, #0xe50]
    // 0x69daec: blr             x9
    // 0x69daf0: ldur            x0, [fp, #-0x28]
    // 0x69daf4: LoadField: r1 = r0->field_b
    //     0x69daf4: ldur            w1, [x0, #0xb]
    // 0x69daf8: DecompressPointer r1
    //     0x69daf8: add             x1, x1, HEAP, lsl #32
    // 0x69dafc: stur            x1, [fp, #-0x20]
    // 0x69db00: LoadField: r2 = r0->field_f
    //     0x69db00: ldur            w2, [x0, #0xf]
    // 0x69db04: DecompressPointer r2
    //     0x69db04: add             x2, x2, HEAP, lsl #32
    // 0x69db08: LoadField: r3 = r2->field_b
    //     0x69db08: ldur            w3, [x2, #0xb]
    // 0x69db0c: DecompressPointer r3
    //     0x69db0c: add             x3, x3, HEAP, lsl #32
    // 0x69db10: cmp             w1, w3
    // 0x69db14: b.ne            #0x69db20
    // 0x69db18: str             x0, [SP]
    // 0x69db1c: r0 = _growToNextCapacity()
    //     0x69db1c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69db20: ldur            x2, [fp, #-0x28]
    // 0x69db24: ldur            x0, [fp, #-0x20]
    // 0x69db28: r3 = LoadInt32Instr(r0)
    //     0x69db28: sbfx            x3, x0, #1, #0x1f
    // 0x69db2c: add             x0, x3, #1
    // 0x69db30: lsl             x1, x0, #1
    // 0x69db34: StoreField: r2->field_b = r1
    //     0x69db34: stur            w1, [x2, #0xb]
    // 0x69db38: mov             x1, x3
    // 0x69db3c: cmp             x1, x0
    // 0x69db40: b.hs            #0x69dbac
    // 0x69db44: LoadField: r1 = r2->field_f
    //     0x69db44: ldur            w1, [x2, #0xf]
    // 0x69db48: DecompressPointer r1
    //     0x69db48: add             x1, x1, HEAP, lsl #32
    // 0x69db4c: ldur            x0, [fp, #-0x10]
    // 0x69db50: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69db50: add             x25, x1, x3, lsl #2
    //     0x69db54: add             x25, x25, #0xf
    //     0x69db58: str             w0, [x25]
    //     0x69db5c: tbz             w0, #0, #0x69db78
    //     0x69db60: ldurb           w16, [x1, #-1]
    //     0x69db64: ldurb           w17, [x0, #-1]
    //     0x69db68: and             x16, x17, x16, lsr #2
    //     0x69db6c: tst             x16, HEAP, lsr #32
    //     0x69db70: b.eq            #0x69db78
    //     0x69db74: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69db78: ldur            x16, [fp, #-0x18]
    // 0x69db7c: str             x16, [SP]
    // 0x69db80: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x69db80: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x69db84: r0 = hideToolbar()
    //     0x69db84: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x69db88: r0 = Null
    //     0x69db88: mov             x0, NULL
    // 0x69db8c: r0 = ReturnAsyncNotFuture()
    //     0x69db8c: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x69db90: r0 = Null
    //     0x69db90: mov             x0, NULL
    // 0x69db94: r0 = ReturnAsyncNotFuture()
    //     0x69db94: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x69db98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69db98: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69db9c: b               #0x69d79c
    // 0x69dba0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69dba0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69dba4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69dba4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69dba8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69dba8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69dbac: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69dbac: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x69e0a0, size: 0x98
    // 0x69e0a0: EnterFrame
    //     0x69e0a0: stp             fp, lr, [SP, #-0x10]!
    //     0x69e0a4: mov             fp, SP
    // 0x69e0a8: AllocStack(0x18)
    //     0x69e0a8: sub             SP, SP, #0x18
    // 0x69e0ac: SetupParameters()
    //     0x69e0ac: ldr             x0, [fp, #0x18]
    //     0x69e0b0: ldur            w1, [x0, #0x17]
    //     0x69e0b4: add             x1, x1, HEAP, lsl #32
    // 0x69e0b8: CheckStackOverflow
    //     0x69e0b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e0bc: cmp             SP, x16
    //     0x69e0c0: b.ls            #0x69e12c
    // 0x69e0c4: LoadField: r0 = r1->field_f
    //     0x69e0c4: ldur            w0, [x1, #0xf]
    // 0x69e0c8: DecompressPointer r0
    //     0x69e0c8: add             x0, x0, HEAP, lsl #32
    // 0x69e0cc: stur            x0, [fp, #-8]
    // 0x69e0d0: LoadField: r1 = r0->field_f
    //     0x69e0d0: ldur            w1, [x0, #0xf]
    // 0x69e0d4: DecompressPointer r1
    //     0x69e0d4: add             x1, x1, HEAP, lsl #32
    // 0x69e0d8: cmp             w1, NULL
    // 0x69e0dc: b.eq            #0x69e11c
    // 0x69e0e0: LoadField: r1 = r0->field_b
    //     0x69e0e0: ldur            w1, [x0, #0xb]
    // 0x69e0e4: DecompressPointer r1
    //     0x69e0e4: add             x1, x1, HEAP, lsl #32
    // 0x69e0e8: cmp             w1, NULL
    // 0x69e0ec: b.eq            #0x69e134
    // 0x69e0f0: LoadField: r2 = r1->field_b
    //     0x69e0f0: ldur            w2, [x1, #0xb]
    // 0x69e0f4: DecompressPointer r2
    //     0x69e0f4: add             x2, x2, HEAP, lsl #32
    // 0x69e0f8: LoadField: r1 = r2->field_27
    //     0x69e0f8: ldur            w1, [x2, #0x27]
    // 0x69e0fc: DecompressPointer r1
    //     0x69e0fc: add             x1, x1, HEAP, lsl #32
    // 0x69e100: LoadField: r2 = r1->field_b
    //     0x69e100: ldur            w2, [x1, #0xb]
    // 0x69e104: DecompressPointer r2
    //     0x69e104: add             x2, x2, HEAP, lsl #32
    // 0x69e108: str             x2, [SP]
    // 0x69e10c: r0 = extent()
    //     0x69e10c: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x69e110: ldur            x16, [fp, #-8]
    // 0x69e114: stp             x0, x16, [SP]
    // 0x69e118: r0 = bringIntoView()
    //     0x69e118: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x69e11c: r0 = Null
    //     0x69e11c: mov             x0, NULL
    // 0x69e120: LeaveFrame
    //     0x69e120: mov             SP, fp
    //     0x69e124: ldp             fp, lr, [SP], #0x10
    // 0x69e128: ret
    //     0x69e128: ret             
    // 0x69e12c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e12c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e130: b               #0x69e0c4
    // 0x69e134: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e134: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69e138, size: 0x50
    // 0x69e138: EnterFrame
    //     0x69e138: stp             fp, lr, [SP, #-0x10]!
    //     0x69e13c: mov             fp, SP
    // 0x69e140: AllocStack(0x10)
    //     0x69e140: sub             SP, SP, #0x10
    // 0x69e144: SetupParameters()
    //     0x69e144: ldr             x0, [fp, #0x10]
    //     0x69e148: ldur            w1, [x0, #0x17]
    //     0x69e14c: add             x1, x1, HEAP, lsl #32
    // 0x69e150: CheckStackOverflow
    //     0x69e150: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e154: cmp             SP, x16
    //     0x69e158: b.ls            #0x69e180
    // 0x69e15c: LoadField: r0 = r1->field_f
    //     0x69e15c: ldur            w0, [x1, #0xf]
    // 0x69e160: DecompressPointer r0
    //     0x69e160: add             x0, x0, HEAP, lsl #32
    // 0x69e164: r16 = Instance_SelectionChangedCause
    //     0x69e164: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69e168: stp             x16, x0, [SP]
    // 0x69e16c: r0 = copySelection()
    //     0x69e16c: bl              #0x69e188  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0x69e170: r0 = Null
    //     0x69e170: mov             x0, NULL
    // 0x69e174: LeaveFrame
    //     0x69e174: mov             SP, fp
    //     0x69e178: ldp             fp, lr, [SP], #0x10
    // 0x69e17c: ret
    //     0x69e17c: ret             
    // 0x69e180: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e180: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e184: b               #0x69e15c
  }
  _ copySelection(/* No info */) {
    // ** addr: 0x69e188, size: 0x1d4
    // 0x69e188: EnterFrame
    //     0x69e188: stp             fp, lr, [SP, #-0x10]!
    //     0x69e18c: mov             fp, SP
    // 0x69e190: AllocStack(0x30)
    //     0x69e190: sub             SP, SP, #0x30
    // 0x69e194: CheckStackOverflow
    //     0x69e194: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e198: cmp             SP, x16
    //     0x69e19c: b.ls            #0x69e348
    // 0x69e1a0: ldr             x0, [fp, #0x18]
    // 0x69e1a4: LoadField: r1 = r0->field_b
    //     0x69e1a4: ldur            w1, [x0, #0xb]
    // 0x69e1a8: DecompressPointer r1
    //     0x69e1a8: add             x1, x1, HEAP, lsl #32
    // 0x69e1ac: cmp             w1, NULL
    // 0x69e1b0: b.eq            #0x69e350
    // 0x69e1b4: LoadField: r2 = r1->field_b
    //     0x69e1b4: ldur            w2, [x1, #0xb]
    // 0x69e1b8: DecompressPointer r2
    //     0x69e1b8: add             x2, x2, HEAP, lsl #32
    // 0x69e1bc: LoadField: r1 = r2->field_27
    //     0x69e1bc: ldur            w1, [x2, #0x27]
    // 0x69e1c0: DecompressPointer r1
    //     0x69e1c0: add             x1, x1, HEAP, lsl #32
    // 0x69e1c4: LoadField: r2 = r1->field_b
    //     0x69e1c4: ldur            w2, [x1, #0xb]
    // 0x69e1c8: DecompressPointer r2
    //     0x69e1c8: add             x2, x2, HEAP, lsl #32
    // 0x69e1cc: LoadField: r3 = r2->field_7
    //     0x69e1cc: ldur            x3, [x2, #7]
    // 0x69e1d0: LoadField: r4 = r2->field_f
    //     0x69e1d0: ldur            x4, [x2, #0xf]
    // 0x69e1d4: cmp             x3, x4
    // 0x69e1d8: b.ne            #0x69e1ec
    // 0x69e1dc: r0 = Null
    //     0x69e1dc: mov             x0, NULL
    // 0x69e1e0: LeaveFrame
    //     0x69e1e0: mov             SP, fp
    //     0x69e1e4: ldp             fp, lr, [SP], #0x10
    // 0x69e1e8: ret
    //     0x69e1e8: ret             
    // 0x69e1ec: ldr             x3, [fp, #0x10]
    // 0x69e1f0: LoadField: r4 = r1->field_7
    //     0x69e1f0: ldur            w4, [x1, #7]
    // 0x69e1f4: DecompressPointer r4
    //     0x69e1f4: add             x4, x4, HEAP, lsl #32
    // 0x69e1f8: stp             x4, x2, [SP]
    // 0x69e1fc: r0 = textInside()
    //     0x69e1fc: bl              #0x5cc3d0  ; [dart:ui] TextRange::textInside
    // 0x69e200: stur            x0, [fp, #-8]
    // 0x69e204: r0 = ClipboardData()
    //     0x69e204: bl              #0x69e094  ; AllocateClipboardDataStub -> ClipboardData (size=0xc)
    // 0x69e208: mov             x1, x0
    // 0x69e20c: ldur            x0, [fp, #-8]
    // 0x69e210: StoreField: r1->field_7 = r0
    //     0x69e210: stur            w0, [x1, #7]
    // 0x69e214: str             x1, [SP]
    // 0x69e218: r0 = setData()
    //     0x69e218: bl              #0x69e35c  ; [package:flutter/src/services/clipboard.dart] Clipboard::setData
    // 0x69e21c: ldr             x0, [fp, #0x10]
    // 0x69e220: r16 = Instance_SelectionChangedCause
    //     0x69e220: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69e224: cmp             w0, w16
    // 0x69e228: b.ne            #0x69e324
    // 0x69e22c: ldr             x0, [fp, #0x18]
    // 0x69e230: LoadField: r1 = r0->field_b
    //     0x69e230: ldur            w1, [x0, #0xb]
    // 0x69e234: DecompressPointer r1
    //     0x69e234: add             x1, x1, HEAP, lsl #32
    // 0x69e238: cmp             w1, NULL
    // 0x69e23c: b.eq            #0x69e354
    // 0x69e240: LoadField: r2 = r1->field_b
    //     0x69e240: ldur            w2, [x1, #0xb]
    // 0x69e244: DecompressPointer r2
    //     0x69e244: add             x2, x2, HEAP, lsl #32
    // 0x69e248: LoadField: r1 = r2->field_27
    //     0x69e248: ldur            w1, [x2, #0x27]
    // 0x69e24c: DecompressPointer r1
    //     0x69e24c: add             x1, x1, HEAP, lsl #32
    // 0x69e250: LoadField: r2 = r1->field_b
    //     0x69e250: ldur            w2, [x1, #0xb]
    // 0x69e254: DecompressPointer r2
    //     0x69e254: add             x2, x2, HEAP, lsl #32
    // 0x69e258: str             x2, [SP]
    // 0x69e25c: r0 = extent()
    //     0x69e25c: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0x69e260: ldr             x16, [fp, #0x18]
    // 0x69e264: stp             x0, x16, [SP]
    // 0x69e268: r0 = bringIntoView()
    //     0x69e268: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0x69e26c: ldr             x16, [fp, #0x18]
    // 0x69e270: r30 = false
    //     0x69e270: add             lr, NULL, #0x30  ; false
    // 0x69e274: stp             lr, x16, [SP]
    // 0x69e278: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x69e278: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x69e27c: r0 = hideToolbar()
    //     0x69e27c: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x69e280: ldr             x0, [fp, #0x18]
    // 0x69e284: LoadField: r1 = r0->field_b
    //     0x69e284: ldur            w1, [x0, #0xb]
    // 0x69e288: DecompressPointer r1
    //     0x69e288: add             x1, x1, HEAP, lsl #32
    // 0x69e28c: cmp             w1, NULL
    // 0x69e290: b.eq            #0x69e358
    // 0x69e294: LoadField: r2 = r1->field_b
    //     0x69e294: ldur            w2, [x1, #0xb]
    // 0x69e298: DecompressPointer r2
    //     0x69e298: add             x2, x2, HEAP, lsl #32
    // 0x69e29c: LoadField: r1 = r2->field_27
    //     0x69e29c: ldur            w1, [x2, #0x27]
    // 0x69e2a0: DecompressPointer r1
    //     0x69e2a0: add             x1, x1, HEAP, lsl #32
    // 0x69e2a4: LoadField: r2 = r1->field_7
    //     0x69e2a4: ldur            w2, [x1, #7]
    // 0x69e2a8: DecompressPointer r2
    //     0x69e2a8: add             x2, x2, HEAP, lsl #32
    // 0x69e2ac: stur            x2, [fp, #-8]
    // 0x69e2b0: LoadField: r3 = r1->field_b
    //     0x69e2b0: ldur            w3, [x1, #0xb]
    // 0x69e2b4: DecompressPointer r3
    //     0x69e2b4: add             x3, x3, HEAP, lsl #32
    // 0x69e2b8: LoadField: r1 = r3->field_f
    //     0x69e2b8: ldur            x1, [x3, #0xf]
    // 0x69e2bc: stur            x1, [fp, #-0x10]
    // 0x69e2c0: r0 = TextSelection()
    //     0x69e2c0: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x69e2c4: mov             x1, x0
    // 0x69e2c8: r0 = Instance_TextAffinity
    //     0x69e2c8: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x69e2cc: stur            x1, [fp, #-0x18]
    // 0x69e2d0: StoreField: r1->field_27 = r0
    //     0x69e2d0: stur            w0, [x1, #0x27]
    // 0x69e2d4: ldur            x0, [fp, #-0x10]
    // 0x69e2d8: ArrayStore: r1[0] = r0  ; List_8
    //     0x69e2d8: stur            x0, [x1, #0x17]
    // 0x69e2dc: StoreField: r1->field_1f = r0
    //     0x69e2dc: stur            x0, [x1, #0x1f]
    // 0x69e2e0: r2 = false
    //     0x69e2e0: add             x2, NULL, #0x30  ; false
    // 0x69e2e4: StoreField: r1->field_2b = r2
    //     0x69e2e4: stur            w2, [x1, #0x2b]
    // 0x69e2e8: StoreField: r1->field_7 = r0
    //     0x69e2e8: stur            x0, [x1, #7]
    // 0x69e2ec: StoreField: r1->field_f = r0
    //     0x69e2ec: stur            x0, [x1, #0xf]
    // 0x69e2f0: r0 = TextEditingValue()
    //     0x69e2f0: bl              #0x5d73a4  ; AllocateTextEditingValueStub -> TextEditingValue (size=0x14)
    // 0x69e2f4: mov             x1, x0
    // 0x69e2f8: ldur            x0, [fp, #-8]
    // 0x69e2fc: StoreField: r1->field_7 = r0
    //     0x69e2fc: stur            w0, [x1, #7]
    // 0x69e300: ldur            x0, [fp, #-0x18]
    // 0x69e304: StoreField: r1->field_b = r0
    //     0x69e304: stur            w0, [x1, #0xb]
    // 0x69e308: r0 = Instance_TextRange
    //     0x69e308: ldr             x0, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0x69e30c: StoreField: r1->field_f = r0
    //     0x69e30c: stur            w0, [x1, #0xf]
    // 0x69e310: ldr             x16, [fp, #0x18]
    // 0x69e314: stp             x1, x16, [SP, #8]
    // 0x69e318: r16 = Instance_SelectionChangedCause
    //     0x69e318: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69e31c: str             x16, [SP]
    // 0x69e320: r0 = userUpdateTextEditingValue()
    //     0x69e320: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x69e324: ldr             x0, [fp, #0x18]
    // 0x69e328: LoadField: r1 = r0->field_33
    //     0x69e328: ldur            w1, [x0, #0x33]
    // 0x69e32c: DecompressPointer r1
    //     0x69e32c: add             x1, x1, HEAP, lsl #32
    // 0x69e330: str             x1, [SP]
    // 0x69e334: r0 = update()
    //     0x69e334: bl              #0x5cc818  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x69e338: r0 = Null
    //     0x69e338: mov             x0, NULL
    // 0x69e33c: LeaveFrame
    //     0x69e33c: mov             SP, fp
    //     0x69e340: ldp             fp, lr, [SP], #0x10
    // 0x69e344: ret
    //     0x69e344: ret             
    // 0x69e348: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e348: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e34c: b               #0x69e1a0
    // 0x69e350: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e350: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e354: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e354: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e358: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e358: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69e3fc, size: 0x50
    // 0x69e3fc: EnterFrame
    //     0x69e3fc: stp             fp, lr, [SP, #-0x10]!
    //     0x69e400: mov             fp, SP
    // 0x69e404: AllocStack(0x10)
    //     0x69e404: sub             SP, SP, #0x10
    // 0x69e408: SetupParameters()
    //     0x69e408: ldr             x0, [fp, #0x10]
    //     0x69e40c: ldur            w1, [x0, #0x17]
    //     0x69e410: add             x1, x1, HEAP, lsl #32
    // 0x69e414: CheckStackOverflow
    //     0x69e414: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e418: cmp             SP, x16
    //     0x69e41c: b.ls            #0x69e444
    // 0x69e420: LoadField: r0 = r1->field_f
    //     0x69e420: ldur            w0, [x1, #0xf]
    // 0x69e424: DecompressPointer r0
    //     0x69e424: add             x0, x0, HEAP, lsl #32
    // 0x69e428: r16 = Instance_SelectionChangedCause
    //     0x69e428: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69e42c: stp             x16, x0, [SP]
    // 0x69e430: r0 = cutSelection()
    //     0x69e430: bl              #0x69e44c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutSelection
    // 0x69e434: r0 = Null
    //     0x69e434: mov             x0, NULL
    // 0x69e438: LeaveFrame
    //     0x69e438: mov             SP, fp
    //     0x69e43c: ldp             fp, lr, [SP], #0x10
    // 0x69e440: ret
    //     0x69e440: ret             
    // 0x69e444: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e444: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e448: b               #0x69e420
  }
  _ cutSelection(/* No info */) {
    // ** addr: 0x69e44c, size: 0x274
    // 0x69e44c: EnterFrame
    //     0x69e44c: stp             fp, lr, [SP, #-0x10]!
    //     0x69e450: mov             fp, SP
    // 0x69e454: AllocStack(0x28)
    //     0x69e454: sub             SP, SP, #0x28
    // 0x69e458: CheckStackOverflow
    //     0x69e458: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e45c: cmp             SP, x16
    //     0x69e460: b.ls            #0x69e6a8
    // 0x69e464: r1 = 1
    //     0x69e464: movz            x1, #0x1
    // 0x69e468: r0 = AllocateContext()
    //     0x69e468: bl              #0xc5def4  ; AllocateContextStub
    // 0x69e46c: mov             x1, x0
    // 0x69e470: ldr             x0, [fp, #0x18]
    // 0x69e474: stur            x1, [fp, #-0x10]
    // 0x69e478: StoreField: r1->field_f = r0
    //     0x69e478: stur            w0, [x1, #0xf]
    // 0x69e47c: LoadField: r2 = r0->field_b
    //     0x69e47c: ldur            w2, [x0, #0xb]
    // 0x69e480: DecompressPointer r2
    //     0x69e480: add             x2, x2, HEAP, lsl #32
    // 0x69e484: cmp             w2, NULL
    // 0x69e488: b.eq            #0x69e6b0
    // 0x69e48c: LoadField: r3 = r2->field_23
    //     0x69e48c: ldur            w3, [x2, #0x23]
    // 0x69e490: DecompressPointer r3
    //     0x69e490: add             x3, x3, HEAP, lsl #32
    // 0x69e494: tbnz            w3, #4, #0x69e4a8
    // 0x69e498: r0 = Null
    //     0x69e498: mov             x0, NULL
    // 0x69e49c: LeaveFrame
    //     0x69e49c: mov             SP, fp
    //     0x69e4a0: ldp             fp, lr, [SP], #0x10
    // 0x69e4a4: ret
    //     0x69e4a4: ret             
    // 0x69e4a8: LoadField: r3 = r2->field_b
    //     0x69e4a8: ldur            w3, [x2, #0xb]
    // 0x69e4ac: DecompressPointer r3
    //     0x69e4ac: add             x3, x3, HEAP, lsl #32
    // 0x69e4b0: LoadField: r2 = r3->field_27
    //     0x69e4b0: ldur            w2, [x3, #0x27]
    // 0x69e4b4: DecompressPointer r2
    //     0x69e4b4: add             x2, x2, HEAP, lsl #32
    // 0x69e4b8: LoadField: r3 = r2->field_b
    //     0x69e4b8: ldur            w3, [x2, #0xb]
    // 0x69e4bc: DecompressPointer r3
    //     0x69e4bc: add             x3, x3, HEAP, lsl #32
    // 0x69e4c0: stur            x3, [fp, #-8]
    // 0x69e4c4: LoadField: r4 = r2->field_7
    //     0x69e4c4: ldur            w4, [x2, #7]
    // 0x69e4c8: DecompressPointer r4
    //     0x69e4c8: add             x4, x4, HEAP, lsl #32
    // 0x69e4cc: LoadField: r2 = r3->field_7
    //     0x69e4cc: ldur            x2, [x3, #7]
    // 0x69e4d0: LoadField: r5 = r3->field_f
    //     0x69e4d0: ldur            x5, [x3, #0xf]
    // 0x69e4d4: cmp             x2, x5
    // 0x69e4d8: b.ne            #0x69e4ec
    // 0x69e4dc: r0 = Null
    //     0x69e4dc: mov             x0, NULL
    // 0x69e4e0: LeaveFrame
    //     0x69e4e0: mov             SP, fp
    //     0x69e4e4: ldp             fp, lr, [SP], #0x10
    // 0x69e4e8: ret
    //     0x69e4e8: ret             
    // 0x69e4ec: ldr             x2, [fp, #0x10]
    // 0x69e4f0: stp             x4, x3, [SP]
    // 0x69e4f4: r0 = textInside()
    //     0x69e4f4: bl              #0x5cc3d0  ; [dart:ui] TextRange::textInside
    // 0x69e4f8: stur            x0, [fp, #-0x18]
    // 0x69e4fc: r0 = ClipboardData()
    //     0x69e4fc: bl              #0x69e094  ; AllocateClipboardDataStub -> ClipboardData (size=0xc)
    // 0x69e500: mov             x1, x0
    // 0x69e504: ldur            x0, [fp, #-0x18]
    // 0x69e508: StoreField: r1->field_7 = r0
    //     0x69e508: stur            w0, [x1, #7]
    // 0x69e50c: str             x1, [SP]
    // 0x69e510: r0 = setData()
    //     0x69e510: bl              #0x69e35c  ; [package:flutter/src/services/clipboard.dart] Clipboard::setData
    // 0x69e514: ldr             x0, [fp, #0x18]
    // 0x69e518: LoadField: r1 = r0->field_b
    //     0x69e518: ldur            w1, [x0, #0xb]
    // 0x69e51c: DecompressPointer r1
    //     0x69e51c: add             x1, x1, HEAP, lsl #32
    // 0x69e520: cmp             w1, NULL
    // 0x69e524: b.eq            #0x69e6b4
    // 0x69e528: LoadField: r2 = r1->field_b
    //     0x69e528: ldur            w2, [x1, #0xb]
    // 0x69e52c: DecompressPointer r2
    //     0x69e52c: add             x2, x2, HEAP, lsl #32
    // 0x69e530: LoadField: r1 = r2->field_27
    //     0x69e530: ldur            w1, [x2, #0x27]
    // 0x69e534: DecompressPointer r1
    //     0x69e534: add             x1, x1, HEAP, lsl #32
    // 0x69e538: stur            x1, [fp, #-0x18]
    // 0x69e53c: r0 = ReplaceTextIntent()
    //     0x69e53c: bl              #0x69eef4  ; AllocateReplaceTextIntentStub -> ReplaceTextIntent (size=0x18)
    // 0x69e540: mov             x1, x0
    // 0x69e544: ldur            x0, [fp, #-0x18]
    // 0x69e548: StoreField: r1->field_7 = r0
    //     0x69e548: stur            w0, [x1, #7]
    // 0x69e54c: r0 = ""
    //     0x69e54c: ldr             x0, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0x69e550: StoreField: r1->field_b = r0
    //     0x69e550: stur            w0, [x1, #0xb]
    // 0x69e554: ldur            x0, [fp, #-8]
    // 0x69e558: StoreField: r1->field_f = r0
    //     0x69e558: stur            w0, [x1, #0xf]
    // 0x69e55c: ldr             x0, [fp, #0x10]
    // 0x69e560: StoreField: r1->field_13 = r0
    //     0x69e560: stur            w0, [x1, #0x13]
    // 0x69e564: ldr             x16, [fp, #0x18]
    // 0x69e568: stp             x1, x16, [SP]
    // 0x69e56c: r0 = _replaceText()
    //     0x69e56c: bl              #0x69e6c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_replaceText
    // 0x69e570: ldr             x0, [fp, #0x10]
    // 0x69e574: r16 = Instance_SelectionChangedCause
    //     0x69e574: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69e578: cmp             w0, w16
    // 0x69e57c: b.ne            #0x69e684
    // 0x69e580: r0 = LoadStaticField(0x1474)
    //     0x69e580: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x69e584: ldr             x0, [x0, #0x28e8]
    // 0x69e588: cmp             w0, NULL
    // 0x69e58c: b.eq            #0x69e6b8
    // 0x69e590: LoadField: r3 = r0->field_53
    //     0x69e590: ldur            w3, [x0, #0x53]
    // 0x69e594: DecompressPointer r3
    //     0x69e594: add             x3, x3, HEAP, lsl #32
    // 0x69e598: stur            x3, [fp, #-0x18]
    // 0x69e59c: LoadField: r0 = r3->field_7
    //     0x69e59c: ldur            w0, [x3, #7]
    // 0x69e5a0: DecompressPointer r0
    //     0x69e5a0: add             x0, x0, HEAP, lsl #32
    // 0x69e5a4: ldur            x2, [fp, #-0x10]
    // 0x69e5a8: stur            x0, [fp, #-8]
    // 0x69e5ac: r1 = Function '<anonymous closure>':.
    //     0x69e5ac: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fe90] AnonymousClosure: (0x69e0a0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText (0x69d764)
    //     0x69e5b0: ldr             x1, [x1, #0xe90]
    // 0x69e5b4: r0 = AllocateClosure()
    //     0x69e5b4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69e5b8: ldur            x2, [fp, #-8]
    // 0x69e5bc: mov             x3, x0
    // 0x69e5c0: r1 = Null
    //     0x69e5c0: mov             x1, NULL
    // 0x69e5c4: stur            x3, [fp, #-8]
    // 0x69e5c8: cmp             w2, NULL
    // 0x69e5cc: b.eq            #0x69e5ec
    // 0x69e5d0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x69e5d0: ldur            w4, [x2, #0x17]
    // 0x69e5d4: DecompressPointer r4
    //     0x69e5d4: add             x4, x4, HEAP, lsl #32
    // 0x69e5d8: r8 = X0
    //     0x69e5d8: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x69e5dc: LoadField: r9 = r4->field_7
    //     0x69e5dc: ldur            x9, [x4, #7]
    // 0x69e5e0: r3 = Null
    //     0x69e5e0: add             x3, PP, #0x1f, lsl #12  ; [pp+0x1fe98] Null
    //     0x69e5e4: ldr             x3, [x3, #0xe98]
    // 0x69e5e8: blr             x9
    // 0x69e5ec: ldur            x0, [fp, #-0x18]
    // 0x69e5f0: LoadField: r1 = r0->field_b
    //     0x69e5f0: ldur            w1, [x0, #0xb]
    // 0x69e5f4: DecompressPointer r1
    //     0x69e5f4: add             x1, x1, HEAP, lsl #32
    // 0x69e5f8: stur            x1, [fp, #-0x10]
    // 0x69e5fc: LoadField: r2 = r0->field_f
    //     0x69e5fc: ldur            w2, [x0, #0xf]
    // 0x69e600: DecompressPointer r2
    //     0x69e600: add             x2, x2, HEAP, lsl #32
    // 0x69e604: LoadField: r3 = r2->field_b
    //     0x69e604: ldur            w3, [x2, #0xb]
    // 0x69e608: DecompressPointer r3
    //     0x69e608: add             x3, x3, HEAP, lsl #32
    // 0x69e60c: cmp             w1, w3
    // 0x69e610: b.ne            #0x69e61c
    // 0x69e614: str             x0, [SP]
    // 0x69e618: r0 = _growToNextCapacity()
    //     0x69e618: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69e61c: ldur            x2, [fp, #-0x18]
    // 0x69e620: ldur            x0, [fp, #-0x10]
    // 0x69e624: r3 = LoadInt32Instr(r0)
    //     0x69e624: sbfx            x3, x0, #1, #0x1f
    // 0x69e628: add             x0, x3, #1
    // 0x69e62c: lsl             x1, x0, #1
    // 0x69e630: StoreField: r2->field_b = r1
    //     0x69e630: stur            w1, [x2, #0xb]
    // 0x69e634: mov             x1, x3
    // 0x69e638: cmp             x1, x0
    // 0x69e63c: b.hs            #0x69e6bc
    // 0x69e640: LoadField: r1 = r2->field_f
    //     0x69e640: ldur            w1, [x2, #0xf]
    // 0x69e644: DecompressPointer r1
    //     0x69e644: add             x1, x1, HEAP, lsl #32
    // 0x69e648: ldur            x0, [fp, #-8]
    // 0x69e64c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69e64c: add             x25, x1, x3, lsl #2
    //     0x69e650: add             x25, x25, #0xf
    //     0x69e654: str             w0, [x25]
    //     0x69e658: tbz             w0, #0, #0x69e674
    //     0x69e65c: ldurb           w16, [x1, #-1]
    //     0x69e660: ldurb           w17, [x0, #-1]
    //     0x69e664: and             x16, x17, x16, lsr #2
    //     0x69e668: tst             x16, HEAP, lsr #32
    //     0x69e66c: b.eq            #0x69e674
    //     0x69e670: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69e674: ldr             x16, [fp, #0x18]
    // 0x69e678: str             x16, [SP]
    // 0x69e67c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x69e67c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x69e680: r0 = hideToolbar()
    //     0x69e680: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x69e684: ldr             x0, [fp, #0x18]
    // 0x69e688: LoadField: r1 = r0->field_33
    //     0x69e688: ldur            w1, [x0, #0x33]
    // 0x69e68c: DecompressPointer r1
    //     0x69e68c: add             x1, x1, HEAP, lsl #32
    // 0x69e690: str             x1, [SP]
    // 0x69e694: r0 = update()
    //     0x69e694: bl              #0x5cc818  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x69e698: r0 = Null
    //     0x69e698: mov             x0, NULL
    // 0x69e69c: LeaveFrame
    //     0x69e69c: mov             SP, fp
    //     0x69e6a0: ldp             fp, lr, [SP], #0x10
    // 0x69e6a4: ret
    //     0x69e6a4: ret             
    // 0x69e6a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e6a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e6ac: b               #0x69e464
    // 0x69e6b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e6b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e6b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e6b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e6b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e6b8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e6bc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69e6bc: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ _replaceText(/* No info */) {
    // ** addr: 0x69e6c0, size: 0xc4
    // 0x69e6c0: EnterFrame
    //     0x69e6c0: stp             fp, lr, [SP, #-0x10]!
    //     0x69e6c4: mov             fp, SP
    // 0x69e6c8: AllocStack(0x28)
    //     0x69e6c8: sub             SP, SP, #0x28
    // 0x69e6cc: CheckStackOverflow
    //     0x69e6cc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e6d0: cmp             SP, x16
    //     0x69e6d4: b.ls            #0x69e778
    // 0x69e6d8: ldr             x0, [fp, #0x18]
    // 0x69e6dc: LoadField: r1 = r0->field_b
    //     0x69e6dc: ldur            w1, [x0, #0xb]
    // 0x69e6e0: DecompressPointer r1
    //     0x69e6e0: add             x1, x1, HEAP, lsl #32
    // 0x69e6e4: cmp             w1, NULL
    // 0x69e6e8: b.eq            #0x69e780
    // 0x69e6ec: LoadField: r2 = r1->field_b
    //     0x69e6ec: ldur            w2, [x1, #0xb]
    // 0x69e6f0: DecompressPointer r2
    //     0x69e6f0: add             x2, x2, HEAP, lsl #32
    // 0x69e6f4: LoadField: r1 = r2->field_27
    //     0x69e6f4: ldur            w1, [x2, #0x27]
    // 0x69e6f8: DecompressPointer r1
    //     0x69e6f8: add             x1, x1, HEAP, lsl #32
    // 0x69e6fc: ldr             x2, [fp, #0x10]
    // 0x69e700: stur            x1, [fp, #-8]
    // 0x69e704: LoadField: r3 = r2->field_7
    //     0x69e704: ldur            w3, [x2, #7]
    // 0x69e708: DecompressPointer r3
    //     0x69e708: add             x3, x3, HEAP, lsl #32
    // 0x69e70c: LoadField: r4 = r2->field_f
    //     0x69e70c: ldur            w4, [x2, #0xf]
    // 0x69e710: DecompressPointer r4
    //     0x69e710: add             x4, x4, HEAP, lsl #32
    // 0x69e714: stp             x4, x3, [SP, #8]
    // 0x69e718: r16 = ""
    //     0x69e718: ldr             x16, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0x69e71c: str             x16, [SP]
    // 0x69e720: r0 = replaced()
    //     0x69e720: bl              #0x69dbb0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::replaced
    // 0x69e724: mov             x1, x0
    // 0x69e728: ldr             x0, [fp, #0x10]
    // 0x69e72c: stur            x1, [fp, #-0x10]
    // 0x69e730: LoadField: r2 = r0->field_13
    //     0x69e730: ldur            w2, [x0, #0x13]
    // 0x69e734: DecompressPointer r2
    //     0x69e734: add             x2, x2, HEAP, lsl #32
    // 0x69e738: ldr             x16, [fp, #0x18]
    // 0x69e73c: stp             x1, x16, [SP, #8]
    // 0x69e740: str             x2, [SP]
    // 0x69e744: r0 = userUpdateTextEditingValue()
    //     0x69e744: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x69e748: ldur            x16, [fp, #-0x10]
    // 0x69e74c: ldur            lr, [fp, #-8]
    // 0x69e750: stp             lr, x16, [SP]
    // 0x69e754: r0 = ==()
    //     0x69e754: bl              #0xbe23ec  ; [package:flutter/src/services/text_input.dart] TextEditingValue::==
    // 0x69e758: tbnz            w0, #4, #0x69e768
    // 0x69e75c: ldr             x16, [fp, #0x18]
    // 0x69e760: str             x16, [SP]
    // 0x69e764: r0 = _didChangeTextEditingValue()
    //     0x69e764: bl              #0x69e7f0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue
    // 0x69e768: r0 = Null
    //     0x69e768: mov             x0, NULL
    // 0x69e76c: LeaveFrame
    //     0x69e76c: mov             SP, fp
    //     0x69e770: ldp             fp, lr, [SP], #0x10
    // 0x69e774: ret
    //     0x69e774: ret             
    // 0x69e778: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e778: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e77c: b               #0x69e6d8
    // 0x69e780: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e780: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _replaceText(dynamic, ReplaceTextIntent) {
    // ** addr: 0x69e784, size: 0x4c
    // 0x69e784: EnterFrame
    //     0x69e784: stp             fp, lr, [SP, #-0x10]!
    //     0x69e788: mov             fp, SP
    // 0x69e78c: AllocStack(0x10)
    //     0x69e78c: sub             SP, SP, #0x10
    // 0x69e790: SetupParameters()
    //     0x69e790: ldr             x0, [fp, #0x18]
    //     0x69e794: ldur            w1, [x0, #0x17]
    //     0x69e798: add             x1, x1, HEAP, lsl #32
    // 0x69e79c: CheckStackOverflow
    //     0x69e79c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e7a0: cmp             SP, x16
    //     0x69e7a4: b.ls            #0x69e7c8
    // 0x69e7a8: LoadField: r0 = r1->field_f
    //     0x69e7a8: ldur            w0, [x1, #0xf]
    // 0x69e7ac: DecompressPointer r0
    //     0x69e7ac: add             x0, x0, HEAP, lsl #32
    // 0x69e7b0: ldr             x16, [fp, #0x10]
    // 0x69e7b4: stp             x16, x0, [SP]
    // 0x69e7b8: r0 = _replaceText()
    //     0x69e7b8: bl              #0x69e6c0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_replaceText
    // 0x69e7bc: LeaveFrame
    //     0x69e7bc: mov             SP, fp
    //     0x69e7c0: ldp             fp, lr, [SP], #0x10
    // 0x69e7c4: ret
    //     0x69e7c4: ret             
    // 0x69e7c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e7c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e7cc: b               #0x69e7a8
  }
  _ _didChangeTextEditingValue(/* No info */) {
    // ** addr: 0x69e7f0, size: 0x1d4
    // 0x69e7f0: EnterFrame
    //     0x69e7f0: stp             fp, lr, [SP, #-0x10]!
    //     0x69e7f4: mov             fp, SP
    // 0x69e7f8: AllocStack(0x18)
    //     0x69e7f8: sub             SP, SP, #0x18
    // 0x69e7fc: CheckStackOverflow
    //     0x69e7fc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69e800: cmp             SP, x16
    //     0x69e804: b.ls            #0x69e9a8
    // 0x69e808: ldr             x1, [fp, #0x10]
    // 0x69e80c: LoadField: r0 = r1->field_b
    //     0x69e80c: ldur            w0, [x1, #0xb]
    // 0x69e810: DecompressPointer r0
    //     0x69e810: add             x0, x0, HEAP, lsl #32
    // 0x69e814: cmp             w0, NULL
    // 0x69e818: b.eq            #0x69e9b0
    // 0x69e81c: LoadField: r2 = r0->field_f
    //     0x69e81c: ldur            w2, [x0, #0xf]
    // 0x69e820: DecompressPointer r2
    //     0x69e820: add             x2, x2, HEAP, lsl #32
    // 0x69e824: str             x2, [SP]
    // 0x69e828: r0 = hasFocus()
    //     0x69e828: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x69e82c: tbnz            w0, #4, #0x69e92c
    // 0x69e830: ldr             x1, [fp, #0x10]
    // 0x69e834: LoadField: r0 = r1->field_b
    //     0x69e834: ldur            w0, [x1, #0xb]
    // 0x69e838: DecompressPointer r0
    //     0x69e838: add             x0, x0, HEAP, lsl #32
    // 0x69e83c: cmp             w0, NULL
    // 0x69e840: b.eq            #0x69e9b4
    // 0x69e844: LoadField: r2 = r0->field_b
    //     0x69e844: ldur            w2, [x0, #0xb]
    // 0x69e848: DecompressPointer r2
    //     0x69e848: add             x2, x2, HEAP, lsl #32
    // 0x69e84c: stur            x2, [fp, #-8]
    // 0x69e850: LoadField: r0 = r2->field_27
    //     0x69e850: ldur            w0, [x2, #0x27]
    // 0x69e854: DecompressPointer r0
    //     0x69e854: add             x0, x0, HEAP, lsl #32
    // 0x69e858: LoadField: r3 = r0->field_b
    //     0x69e858: ldur            w3, [x0, #0xb]
    // 0x69e85c: DecompressPointer r3
    //     0x69e85c: add             x3, x3, HEAP, lsl #32
    // 0x69e860: LoadField: r0 = r3->field_7
    //     0x69e860: ldur            x0, [x3, #7]
    // 0x69e864: tbnz            x0, #0x3f, #0x69e870
    // 0x69e868: LoadField: r0 = r3->field_f
    //     0x69e868: ldur            x0, [x3, #0xf]
    // 0x69e86c: tbz             x0, #0x3f, #0x69e92c
    // 0x69e870: r1 = 1
    //     0x69e870: movz            x1, #0x1
    // 0x69e874: r0 = AllocateContext()
    //     0x69e874: bl              #0xc5def4  ; AllocateContextStub
    // 0x69e878: mov             x1, x0
    // 0x69e87c: ldr             x0, [fp, #0x10]
    // 0x69e880: StoreField: r1->field_f = r0
    //     0x69e880: stur            w0, [x1, #0xf]
    // 0x69e884: mov             x2, x1
    // 0x69e888: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0x69e888: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0x69e88c: ldr             x1, [x1, #0xea8]
    // 0x69e890: r0 = AllocateClosure()
    //     0x69e890: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69e894: ldur            x16, [fp, #-8]
    // 0x69e898: stp             x0, x16, [SP]
    // 0x69e89c: r0 = removeListener()
    //     0x69e89c: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x69e8a0: ldr             x1, [fp, #0x10]
    // 0x69e8a4: LoadField: r0 = r1->field_b
    //     0x69e8a4: ldur            w0, [x1, #0xb]
    // 0x69e8a8: DecompressPointer r0
    //     0x69e8a8: add             x0, x0, HEAP, lsl #32
    // 0x69e8ac: cmp             w0, NULL
    // 0x69e8b0: b.eq            #0x69e9b8
    // 0x69e8b4: LoadField: r2 = r0->field_b
    //     0x69e8b4: ldur            w2, [x0, #0xb]
    // 0x69e8b8: DecompressPointer r2
    //     0x69e8b8: add             x2, x2, HEAP, lsl #32
    // 0x69e8bc: stur            x2, [fp, #-8]
    // 0x69e8c0: str             x1, [SP]
    // 0x69e8c4: r0 = _adjustedSelectionWhenFocused()
    //     0x69e8c4: bl              #0x69ed04  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_adjustedSelectionWhenFocused
    // 0x69e8c8: cmp             w0, NULL
    // 0x69e8cc: b.eq            #0x69e9bc
    // 0x69e8d0: ldur            x16, [fp, #-8]
    // 0x69e8d4: stp             x0, x16, [SP]
    // 0x69e8d8: r0 = selection=()
    //     0x69e8d8: bl              #0x5dc0b8  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::selection=
    // 0x69e8dc: ldr             x1, [fp, #0x10]
    // 0x69e8e0: LoadField: r0 = r1->field_b
    //     0x69e8e0: ldur            w0, [x1, #0xb]
    // 0x69e8e4: DecompressPointer r0
    //     0x69e8e4: add             x0, x0, HEAP, lsl #32
    // 0x69e8e8: cmp             w0, NULL
    // 0x69e8ec: b.eq            #0x69e9c0
    // 0x69e8f0: LoadField: r2 = r0->field_b
    //     0x69e8f0: ldur            w2, [x0, #0xb]
    // 0x69e8f4: DecompressPointer r2
    //     0x69e8f4: add             x2, x2, HEAP, lsl #32
    // 0x69e8f8: stur            x2, [fp, #-8]
    // 0x69e8fc: r1 = 1
    //     0x69e8fc: movz            x1, #0x1
    // 0x69e900: r0 = AllocateContext()
    //     0x69e900: bl              #0xc5def4  ; AllocateContextStub
    // 0x69e904: mov             x1, x0
    // 0x69e908: ldr             x0, [fp, #0x10]
    // 0x69e90c: StoreField: r1->field_f = r0
    //     0x69e90c: stur            w0, [x1, #0xf]
    // 0x69e910: mov             x2, x1
    // 0x69e914: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0x69e914: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0x69e918: ldr             x1, [x1, #0xea8]
    // 0x69e91c: r0 = AllocateClosure()
    //     0x69e91c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69e920: ldur            x16, [fp, #-8]
    // 0x69e924: stp             x0, x16, [SP]
    // 0x69e928: r0 = addListener()
    //     0x69e928: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x69e92c: ldr             x16, [fp, #0x10]
    // 0x69e930: str             x16, [SP]
    // 0x69e934: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x69e934: bl              #0x5d42a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x69e938: ldr             x16, [fp, #0x10]
    // 0x69e93c: str             x16, [SP]
    // 0x69e940: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x69e940: bl              #0x69ec94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x69e944: ldr             x16, [fp, #0x10]
    // 0x69e948: str             x16, [SP]
    // 0x69e94c: r0 = _updateOrDisposeSelectionOverlayIfNeeded()
    //     0x69e94c: bl              #0x69ea94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateOrDisposeSelectionOverlayIfNeeded
    // 0x69e950: r1 = Function '<anonymous closure>':.
    //     0x69e950: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1feb0] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0x69e954: ldr             x1, [x1, #0xeb0]
    // 0x69e958: r2 = Null
    //     0x69e958: mov             x2, NULL
    // 0x69e95c: r0 = AllocateClosure()
    //     0x69e95c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x69e960: ldr             x16, [fp, #0x10]
    // 0x69e964: stp             x0, x16, [SP]
    // 0x69e968: r0 = setState()
    //     0x69e968: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x69e96c: ldr             x1, [fp, #0x10]
    // 0x69e970: LoadField: r0 = r1->field_c3
    //     0x69e970: ldur            w0, [x1, #0xc3]
    // 0x69e974: DecompressPointer r0
    //     0x69e974: add             x0, x0, HEAP, lsl #32
    // 0x69e978: r16 = Sentinel
    //     0x69e978: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x69e97c: cmp             w0, w16
    // 0x69e980: b.ne            #0x69e990
    // 0x69e984: r2 = _verticalSelectionUpdateAction
    //     0x69e984: add             x2, PP, #0x1f, lsl #12  ; [pp+0x1feb8] Field <EditableTextState._verticalSelectionUpdateAction@244183791>: late final (offset: 0xc4)
    //     0x69e988: ldr             x2, [x2, #0xeb8]
    // 0x69e98c: r0 = InitLateFinalInstanceField()
    //     0x69e98c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x69e990: str             x0, [SP]
    // 0x69e994: r0 = stopCurrentVerticalRunIfSelectionChanges()
    //     0x69e994: bl              #0x69e9c4  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionVerticallyAction::stopCurrentVerticalRunIfSelectionChanges
    // 0x69e998: r0 = Null
    //     0x69e998: mov             x0, NULL
    // 0x69e99c: LeaveFrame
    //     0x69e99c: mov             SP, fp
    //     0x69e9a0: ldp             fp, lr, [SP], #0x10
    // 0x69e9a4: ret
    //     0x69e9a4: ret             
    // 0x69e9a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69e9a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69e9ac: b               #0x69e808
    // 0x69e9b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e9b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e9b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e9b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e9b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e9b8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e9bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e9bc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69e9c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69e9c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateOrDisposeSelectionOverlayIfNeeded(/* No info */) {
    // ** addr: 0x69ea94, size: 0xdc
    // 0x69ea94: EnterFrame
    //     0x69ea94: stp             fp, lr, [SP, #-0x10]!
    //     0x69ea98: mov             fp, SP
    // 0x69ea9c: AllocStack(0x10)
    //     0x69ea9c: sub             SP, SP, #0x10
    // 0x69eaa0: CheckStackOverflow
    //     0x69eaa0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69eaa4: cmp             SP, x16
    //     0x69eaa8: b.ls            #0x69eb58
    // 0x69eaac: ldr             x0, [fp, #0x10]
    // 0x69eab0: LoadField: r1 = r0->field_3f
    //     0x69eab0: ldur            w1, [x0, #0x3f]
    // 0x69eab4: DecompressPointer r1
    //     0x69eab4: add             x1, x1, HEAP, lsl #32
    // 0x69eab8: cmp             w1, NULL
    // 0x69eabc: b.eq            #0x69eb48
    // 0x69eac0: LoadField: r1 = r0->field_b
    //     0x69eac0: ldur            w1, [x0, #0xb]
    // 0x69eac4: DecompressPointer r1
    //     0x69eac4: add             x1, x1, HEAP, lsl #32
    // 0x69eac8: cmp             w1, NULL
    // 0x69eacc: b.eq            #0x69eb60
    // 0x69ead0: LoadField: r2 = r1->field_f
    //     0x69ead0: ldur            w2, [x1, #0xf]
    // 0x69ead4: DecompressPointer r2
    //     0x69ead4: add             x2, x2, HEAP, lsl #32
    // 0x69ead8: str             x2, [SP]
    // 0x69eadc: r0 = hasFocus()
    //     0x69eadc: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x69eae0: tbnz            w0, #4, #0x69eb24
    // 0x69eae4: ldr             x0, [fp, #0x10]
    // 0x69eae8: LoadField: r1 = r0->field_3f
    //     0x69eae8: ldur            w1, [x0, #0x3f]
    // 0x69eaec: DecompressPointer r1
    //     0x69eaec: add             x1, x1, HEAP, lsl #32
    // 0x69eaf0: cmp             w1, NULL
    // 0x69eaf4: b.eq            #0x69eb64
    // 0x69eaf8: LoadField: r2 = r0->field_b
    //     0x69eaf8: ldur            w2, [x0, #0xb]
    // 0x69eafc: DecompressPointer r2
    //     0x69eafc: add             x2, x2, HEAP, lsl #32
    // 0x69eb00: cmp             w2, NULL
    // 0x69eb04: b.eq            #0x69eb68
    // 0x69eb08: LoadField: r0 = r2->field_b
    //     0x69eb08: ldur            w0, [x2, #0xb]
    // 0x69eb0c: DecompressPointer r0
    //     0x69eb0c: add             x0, x0, HEAP, lsl #32
    // 0x69eb10: LoadField: r2 = r0->field_27
    //     0x69eb10: ldur            w2, [x0, #0x27]
    // 0x69eb14: DecompressPointer r2
    //     0x69eb14: add             x2, x2, HEAP, lsl #32
    // 0x69eb18: stp             x2, x1, [SP]
    // 0x69eb1c: r0 = update()
    //     0x69eb1c: bl              #0x5d2c78  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x69eb20: b               #0x69eb48
    // 0x69eb24: ldr             x0, [fp, #0x10]
    // 0x69eb28: LoadField: r1 = r0->field_3f
    //     0x69eb28: ldur            w1, [x0, #0x3f]
    // 0x69eb2c: DecompressPointer r1
    //     0x69eb2c: add             x1, x1, HEAP, lsl #32
    // 0x69eb30: cmp             w1, NULL
    // 0x69eb34: b.eq            #0x69eb6c
    // 0x69eb38: str             x1, [SP]
    // 0x69eb3c: r0 = dispose()
    //     0x69eb3c: bl              #0x69eb70  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::dispose
    // 0x69eb40: ldr             x1, [fp, #0x10]
    // 0x69eb44: StoreField: r1->field_3f = rNULL
    //     0x69eb44: stur            NULL, [x1, #0x3f]
    // 0x69eb48: r0 = Null
    //     0x69eb48: mov             x0, NULL
    // 0x69eb4c: LeaveFrame
    //     0x69eb4c: mov             SP, fp
    //     0x69eb50: ldp             fp, lr, [SP], #0x10
    // 0x69eb54: ret
    //     0x69eb54: ret             
    // 0x69eb58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69eb58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69eb5c: b               #0x69eaac
    // 0x69eb60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69eb60: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69eb64: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69eb64: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69eb68: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69eb68: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x69eb6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69eb6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _startOrStopCursorTimerIfNeeded(/* No info */) {
    // ** addr: 0x69ec94, size: 0x70
    // 0x69ec94: EnterFrame
    //     0x69ec94: stp             fp, lr, [SP, #-0x10]!
    //     0x69ec98: mov             fp, SP
    // 0x69ec9c: AllocStack(0x8)
    //     0x69ec9c: sub             SP, SP, #8
    // 0x69eca0: CheckStackOverflow
    //     0x69eca0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69eca4: cmp             SP, x16
    //     0x69eca8: b.ls            #0x69ecfc
    // 0x69ecac: ldr             x16, [fp, #0x10]
    // 0x69ecb0: str             x16, [SP]
    // 0x69ecb4: r0 = _showBlinkingCursor()
    //     0x69ecb4: bl              #0x5d1d94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x69ecb8: tbz             w0, #4, #0x69ecd0
    // 0x69ecbc: ldr             x16, [fp, #0x10]
    // 0x69ecc0: str             x16, [SP]
    // 0x69ecc4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x69ecc4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x69ecc8: r0 = _stopCursorBlink()
    //     0x69ecc8: bl              #0x5d1584  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x69eccc: b               #0x69ecec
    // 0x69ecd0: ldr             x0, [fp, #0x10]
    // 0x69ecd4: LoadField: r1 = r0->field_1f
    //     0x69ecd4: ldur            w1, [x0, #0x1f]
    // 0x69ecd8: DecompressPointer r1
    //     0x69ecd8: add             x1, x1, HEAP, lsl #32
    // 0x69ecdc: cmp             w1, NULL
    // 0x69ece0: b.ne            #0x69ecec
    // 0x69ece4: str             x0, [SP]
    // 0x69ece8: r0 = _startCursorBlink()
    //     0x69ece8: bl              #0x5cee38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x69ecec: r0 = Null
    //     0x69ecec: mov             x0, NULL
    // 0x69ecf0: LeaveFrame
    //     0x69ecf0: mov             SP, fp
    //     0x69ecf4: ldp             fp, lr, [SP], #0x10
    // 0x69ecf8: ret
    //     0x69ecf8: ret             
    // 0x69ecfc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69ecfc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69ed00: b               #0x69ecac
  }
  _ _adjustedSelectionWhenFocused(/* No info */) {
    // ** addr: 0x69ed04, size: 0xa0
    // 0x69ed04: EnterFrame
    //     0x69ed04: stp             fp, lr, [SP, #-0x10]!
    //     0x69ed08: mov             fp, SP
    // 0x69ed0c: AllocStack(0x8)
    //     0x69ed0c: sub             SP, SP, #8
    // 0x69ed10: ldr             x0, [fp, #0x10]
    // 0x69ed14: LoadField: r1 = r0->field_b
    //     0x69ed14: ldur            w1, [x0, #0xb]
    // 0x69ed18: DecompressPointer r1
    //     0x69ed18: add             x1, x1, HEAP, lsl #32
    // 0x69ed1c: cmp             w1, NULL
    // 0x69ed20: b.eq            #0x69eda0
    // 0x69ed24: LoadField: r0 = r1->field_b
    //     0x69ed24: ldur            w0, [x1, #0xb]
    // 0x69ed28: DecompressPointer r0
    //     0x69ed28: add             x0, x0, HEAP, lsl #32
    // 0x69ed2c: LoadField: r1 = r0->field_27
    //     0x69ed2c: ldur            w1, [x0, #0x27]
    // 0x69ed30: DecompressPointer r1
    //     0x69ed30: add             x1, x1, HEAP, lsl #32
    // 0x69ed34: LoadField: r0 = r1->field_b
    //     0x69ed34: ldur            w0, [x1, #0xb]
    // 0x69ed38: DecompressPointer r0
    //     0x69ed38: add             x0, x0, HEAP, lsl #32
    // 0x69ed3c: LoadField: r2 = r0->field_7
    //     0x69ed3c: ldur            x2, [x0, #7]
    // 0x69ed40: tbnz            x2, #0x3f, #0x69ed54
    // 0x69ed44: LoadField: r2 = r0->field_f
    //     0x69ed44: ldur            x2, [x0, #0xf]
    // 0x69ed48: tbnz            x2, #0x3f, #0x69ed54
    // 0x69ed4c: r0 = Null
    //     0x69ed4c: mov             x0, NULL
    // 0x69ed50: b               #0x69ed94
    // 0x69ed54: LoadField: r0 = r1->field_7
    //     0x69ed54: ldur            w0, [x1, #7]
    // 0x69ed58: DecompressPointer r0
    //     0x69ed58: add             x0, x0, HEAP, lsl #32
    // 0x69ed5c: LoadField: r1 = r0->field_7
    //     0x69ed5c: ldur            w1, [x0, #7]
    // 0x69ed60: DecompressPointer r1
    //     0x69ed60: add             x1, x1, HEAP, lsl #32
    // 0x69ed64: stur            x1, [fp, #-8]
    // 0x69ed68: r0 = TextSelection()
    //     0x69ed68: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0x69ed6c: r1 = Instance_TextAffinity
    //     0x69ed6c: ldr             x1, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0x69ed70: StoreField: r0->field_27 = r1
    //     0x69ed70: stur            w1, [x0, #0x27]
    // 0x69ed74: ldur            x1, [fp, #-8]
    // 0x69ed78: r2 = LoadInt32Instr(r1)
    //     0x69ed78: sbfx            x2, x1, #1, #0x1f
    // 0x69ed7c: ArrayStore: r0[0] = r2  ; List_8
    //     0x69ed7c: stur            x2, [x0, #0x17]
    // 0x69ed80: StoreField: r0->field_1f = r2
    //     0x69ed80: stur            x2, [x0, #0x1f]
    // 0x69ed84: r1 = false
    //     0x69ed84: add             x1, NULL, #0x30  ; false
    // 0x69ed88: StoreField: r0->field_2b = r1
    //     0x69ed88: stur            w1, [x0, #0x2b]
    // 0x69ed8c: StoreField: r0->field_7 = r2
    //     0x69ed8c: stur            x2, [x0, #7]
    // 0x69ed90: StoreField: r0->field_f = r2
    //     0x69ed90: stur            x2, [x0, #0xf]
    // 0x69ed94: LeaveFrame
    //     0x69ed94: mov             SP, fp
    //     0x69ed98: ldp             fp, lr, [SP], #0x10
    // 0x69ed9c: ret
    //     0x69ed9c: ret             
    // 0x69eda0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x69eda0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _UpdateTextSelectionVerticallyAction<DirectionalCaretMovementIntent> _verticalSelectionUpdateAction(EditableTextState) {
    // ** addr: 0x69eda4, size: 0x54
    // 0x69eda4: EnterFrame
    //     0x69eda4: stp             fp, lr, [SP, #-0x10]!
    //     0x69eda8: mov             fp, SP
    // 0x69edac: AllocStack(0x10)
    //     0x69edac: sub             SP, SP, #0x10
    // 0x69edb0: CheckStackOverflow
    //     0x69edb0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69edb4: cmp             SP, x16
    //     0x69edb8: b.ls            #0x69edf0
    // 0x69edbc: r1 = <DirectionalCaretMovementIntent>
    //     0x69edbc: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fec0] TypeArguments: <DirectionalCaretMovementIntent>
    //     0x69edc0: ldr             x1, [x1, #0xec0]
    // 0x69edc4: r0 = _UpdateTextSelectionVerticallyAction()
    //     0x69edc4: bl              #0x69eea0  ; Allocate_UpdateTextSelectionVerticallyActionStub -> _UpdateTextSelectionVerticallyAction<X0 bound DirectionalCaretMovementIntent> (size=0x20)
    // 0x69edc8: mov             x1, x0
    // 0x69edcc: ldr             x0, [fp, #0x10]
    // 0x69edd0: stur            x1, [fp, #-8]
    // 0x69edd4: StoreField: r1->field_13 = r0
    //     0x69edd4: stur            w0, [x1, #0x13]
    // 0x69edd8: str             x1, [SP]
    // 0x69eddc: r0 = Action()
    //     0x69eddc: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x69ede0: ldur            x0, [fp, #-8]
    // 0x69ede4: LeaveFrame
    //     0x69ede4: mov             SP, fp
    //     0x69ede8: ldp             fp, lr, [SP], #0x10
    // 0x69edec: ret
    //     0x69edec: ret             
    // 0x69edf0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69edf0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69edf4: b               #0x69edbc
  }
  [closure] void _didChangeTextEditingValue(dynamic) {
    // ** addr: 0x69eeac, size: 0x48
    // 0x69eeac: EnterFrame
    //     0x69eeac: stp             fp, lr, [SP, #-0x10]!
    //     0x69eeb0: mov             fp, SP
    // 0x69eeb4: AllocStack(0x8)
    //     0x69eeb4: sub             SP, SP, #8
    // 0x69eeb8: SetupParameters()
    //     0x69eeb8: ldr             x0, [fp, #0x10]
    //     0x69eebc: ldur            w1, [x0, #0x17]
    //     0x69eec0: add             x1, x1, HEAP, lsl #32
    // 0x69eec4: CheckStackOverflow
    //     0x69eec4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69eec8: cmp             SP, x16
    //     0x69eecc: b.ls            #0x69eeec
    // 0x69eed0: LoadField: r0 = r1->field_f
    //     0x69eed0: ldur            w0, [x1, #0xf]
    // 0x69eed4: DecompressPointer r0
    //     0x69eed4: add             x0, x0, HEAP, lsl #32
    // 0x69eed8: str             x0, [SP]
    // 0x69eedc: r0 = _didChangeTextEditingValue()
    //     0x69eedc: bl              #0x69e7f0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue
    // 0x69eee0: LeaveFrame
    //     0x69eee0: mov             SP, fp
    //     0x69eee4: ldp             fp, lr, [SP], #0x10
    // 0x69eee8: ret
    //     0x69eee8: ret             
    // 0x69eeec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69eeec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69eef0: b               #0x69eed0
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69ef00, size: 0x48
    // 0x69ef00: EnterFrame
    //     0x69ef00: stp             fp, lr, [SP, #-0x10]!
    //     0x69ef04: mov             fp, SP
    // 0x69ef08: AllocStack(0x8)
    //     0x69ef08: sub             SP, SP, #8
    // 0x69ef0c: SetupParameters()
    //     0x69ef0c: ldr             x0, [fp, #0x10]
    //     0x69ef10: ldur            w1, [x0, #0x17]
    //     0x69ef14: add             x1, x1, HEAP, lsl #32
    // 0x69ef18: CheckStackOverflow
    //     0x69ef18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69ef1c: cmp             SP, x16
    //     0x69ef20: b.ls            #0x69ef40
    // 0x69ef24: LoadField: r0 = r1->field_f
    //     0x69ef24: ldur            w0, [x1, #0xf]
    // 0x69ef28: DecompressPointer r0
    //     0x69ef28: add             x0, x0, HEAP, lsl #32
    // 0x69ef2c: str             x0, [SP]
    // 0x69ef30: r0 = _startLiveTextInput()
    //     0x69ef30: bl              #0x69ef48  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startLiveTextInput
    // 0x69ef34: LeaveFrame
    //     0x69ef34: mov             SP, fp
    //     0x69ef38: ldp             fp, lr, [SP], #0x10
    // 0x69ef3c: ret
    //     0x69ef3c: ret             
    // 0x69ef40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69ef40: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69ef44: b               #0x69ef24
  }
  _ _startLiveTextInput(/* No info */) {
    // ** addr: 0x69ef48, size: 0x74
    // 0x69ef48: EnterFrame
    //     0x69ef48: stp             fp, lr, [SP, #-0x10]!
    //     0x69ef4c: mov             fp, SP
    // 0x69ef50: AllocStack(0x8)
    //     0x69ef50: sub             SP, SP, #8
    // 0x69ef54: CheckStackOverflow
    //     0x69ef54: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69ef58: cmp             SP, x16
    //     0x69ef5c: b.ls            #0x69efb4
    // 0x69ef60: ldr             x16, [fp, #0x10]
    // 0x69ef64: str             x16, [SP]
    // 0x69ef68: r0 = liveTextInputEnabled()
    //     0x69ef68: bl              #0x69cd48  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::liveTextInputEnabled
    // 0x69ef6c: tbz             w0, #4, #0x69ef80
    // 0x69ef70: r0 = Null
    //     0x69ef70: mov             x0, NULL
    // 0x69ef74: LeaveFrame
    //     0x69ef74: mov             SP, fp
    //     0x69ef78: ldp             fp, lr, [SP], #0x10
    // 0x69ef7c: ret
    //     0x69ef7c: ret             
    // 0x69ef80: ldr             x16, [fp, #0x10]
    // 0x69ef84: str             x16, [SP]
    // 0x69ef88: r0 = _hasInputConnection()
    //     0x69ef88: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x69ef8c: tbnz            w0, #4, #0x69ef94
    // 0x69ef90: r0 = startLiveTextInput()
    //     0x69ef90: bl              #0x69efbc  ; [package:flutter/src/services/live_text.dart] LiveText::startLiveTextInput
    // 0x69ef94: ldr             x16, [fp, #0x10]
    // 0x69ef98: str             x16, [SP]
    // 0x69ef9c: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x69ef9c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x69efa0: r0 = hideToolbar()
    //     0x69efa0: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x69efa4: r0 = Null
    //     0x69efa4: mov             x0, NULL
    // 0x69efa8: LeaveFrame
    //     0x69efa8: mov             SP, fp
    //     0x69efac: ldp             fp, lr, [SP], #0x10
    // 0x69efb0: ret
    //     0x69efb0: ret             
    // 0x69efb4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69efb4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69efb8: b               #0x69ef60
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69f008, size: 0x4c
    // 0x69f008: EnterFrame
    //     0x69f008: stp             fp, lr, [SP, #-0x10]!
    //     0x69f00c: mov             fp, SP
    // 0x69f010: AllocStack(0x10)
    //     0x69f010: sub             SP, SP, #0x10
    // 0x69f014: SetupParameters()
    //     0x69f014: ldr             x0, [fp, #0x10]
    //     0x69f018: ldur            w1, [x0, #0x17]
    //     0x69f01c: add             x1, x1, HEAP, lsl #32
    // 0x69f020: CheckStackOverflow
    //     0x69f020: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69f024: cmp             SP, x16
    //     0x69f028: b.ls            #0x69f04c
    // 0x69f02c: LoadField: r0 = r1->field_f
    //     0x69f02c: ldur            w0, [x1, #0xf]
    // 0x69f030: DecompressPointer r0
    //     0x69f030: add             x0, x0, HEAP, lsl #32
    // 0x69f034: r16 = Instance_SelectionChangedCause
    //     0x69f034: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69f038: stp             x16, x0, [SP]
    // 0x69f03c: r0 = selectAll()
    //     0x69f03c: bl              #0x69d5cc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::selectAll
    // 0x69f040: LeaveFrame
    //     0x69f040: mov             SP, fp
    //     0x69f044: ldp             fp, lr, [SP], #0x10
    // 0x69f048: ret
    //     0x69f048: ret             
    // 0x69f04c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69f04c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69f050: b               #0x69f02c
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69f054, size: 0x4c
    // 0x69f054: EnterFrame
    //     0x69f054: stp             fp, lr, [SP, #-0x10]!
    //     0x69f058: mov             fp, SP
    // 0x69f05c: AllocStack(0x10)
    //     0x69f05c: sub             SP, SP, #0x10
    // 0x69f060: SetupParameters()
    //     0x69f060: ldr             x0, [fp, #0x10]
    //     0x69f064: ldur            w1, [x0, #0x17]
    //     0x69f068: add             x1, x1, HEAP, lsl #32
    // 0x69f06c: CheckStackOverflow
    //     0x69f06c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69f070: cmp             SP, x16
    //     0x69f074: b.ls            #0x69f098
    // 0x69f078: LoadField: r0 = r1->field_f
    //     0x69f078: ldur            w0, [x1, #0xf]
    // 0x69f07c: DecompressPointer r0
    //     0x69f07c: add             x0, x0, HEAP, lsl #32
    // 0x69f080: r16 = Instance_SelectionChangedCause
    //     0x69f080: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69f084: stp             x16, x0, [SP]
    // 0x69f088: r0 = pasteText()
    //     0x69f088: bl              #0x69d764  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x69f08c: LeaveFrame
    //     0x69f08c: mov             SP, fp
    //     0x69f090: ldp             fp, lr, [SP], #0x10
    // 0x69f094: ret
    //     0x69f094: ret             
    // 0x69f098: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69f098: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69f09c: b               #0x69f078
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69f0a0, size: 0x4c
    // 0x69f0a0: EnterFrame
    //     0x69f0a0: stp             fp, lr, [SP, #-0x10]!
    //     0x69f0a4: mov             fp, SP
    // 0x69f0a8: AllocStack(0x10)
    //     0x69f0a8: sub             SP, SP, #0x10
    // 0x69f0ac: SetupParameters()
    //     0x69f0ac: ldr             x0, [fp, #0x10]
    //     0x69f0b0: ldur            w1, [x0, #0x17]
    //     0x69f0b4: add             x1, x1, HEAP, lsl #32
    // 0x69f0b8: CheckStackOverflow
    //     0x69f0b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69f0bc: cmp             SP, x16
    //     0x69f0c0: b.ls            #0x69f0e4
    // 0x69f0c4: LoadField: r0 = r1->field_f
    //     0x69f0c4: ldur            w0, [x1, #0xf]
    // 0x69f0c8: DecompressPointer r0
    //     0x69f0c8: add             x0, x0, HEAP, lsl #32
    // 0x69f0cc: r16 = Instance_SelectionChangedCause
    //     0x69f0cc: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69f0d0: stp             x16, x0, [SP]
    // 0x69f0d4: r0 = cutSelection()
    //     0x69f0d4: bl              #0x69e44c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutSelection
    // 0x69f0d8: LeaveFrame
    //     0x69f0d8: mov             SP, fp
    //     0x69f0dc: ldp             fp, lr, [SP], #0x10
    // 0x69f0e0: ret
    //     0x69f0e0: ret             
    // 0x69f0e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69f0e4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69f0e8: b               #0x69f0c4
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x69f0ec, size: 0x4c
    // 0x69f0ec: EnterFrame
    //     0x69f0ec: stp             fp, lr, [SP, #-0x10]!
    //     0x69f0f0: mov             fp, SP
    // 0x69f0f4: AllocStack(0x10)
    //     0x69f0f4: sub             SP, SP, #0x10
    // 0x69f0f8: SetupParameters()
    //     0x69f0f8: ldr             x0, [fp, #0x10]
    //     0x69f0fc: ldur            w1, [x0, #0x17]
    //     0x69f100: add             x1, x1, HEAP, lsl #32
    // 0x69f104: CheckStackOverflow
    //     0x69f104: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69f108: cmp             SP, x16
    //     0x69f10c: b.ls            #0x69f130
    // 0x69f110: LoadField: r0 = r1->field_f
    //     0x69f110: ldur            w0, [x1, #0xf]
    // 0x69f114: DecompressPointer r0
    //     0x69f114: add             x0, x0, HEAP, lsl #32
    // 0x69f118: r16 = Instance_SelectionChangedCause
    //     0x69f118: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x69f11c: stp             x16, x0, [SP]
    // 0x69f120: r0 = copySelection()
    //     0x69f120: bl              #0x69e188  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0x69f124: LeaveFrame
    //     0x69f124: mov             SP, fp
    //     0x69f128: ldp             fp, lr, [SP], #0x10
    // 0x69f12c: ret
    //     0x69f12c: ret             
    // 0x69f130: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69f130: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69f134: b               #0x69f110
  }
  _ didChangeMetrics(/* No info */) {
    // ** addr: 0x83b8d8, size: 0x340
    // 0x83b8d8: EnterFrame
    //     0x83b8d8: stp             fp, lr, [SP, #-0x10]!
    //     0x83b8dc: mov             fp, SP
    // 0x83b8e0: AllocStack(0x38)
    //     0x83b8e0: sub             SP, SP, #0x38
    // 0x83b8e4: CheckStackOverflow
    //     0x83b8e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x83b8e8: cmp             SP, x16
    //     0x83b8ec: b.ls            #0x83bbd8
    // 0x83b8f0: r1 = 1
    //     0x83b8f0: movz            x1, #0x1
    // 0x83b8f4: r0 = AllocateContext()
    //     0x83b8f4: bl              #0xc5def4  ; AllocateContextStub
    // 0x83b8f8: mov             x1, x0
    // 0x83b8fc: ldr             x0, [fp, #0x10]
    // 0x83b900: stur            x1, [fp, #-8]
    // 0x83b904: StoreField: r1->field_f = r0
    //     0x83b904: stur            w0, [x1, #0xf]
    // 0x83b908: LoadField: r2 = r0->field_f
    //     0x83b908: ldur            w2, [x0, #0xf]
    // 0x83b90c: DecompressPointer r2
    //     0x83b90c: add             x2, x2, HEAP, lsl #32
    // 0x83b910: cmp             w2, NULL
    // 0x83b914: b.ne            #0x83b928
    // 0x83b918: r0 = Null
    //     0x83b918: mov             x0, NULL
    // 0x83b91c: LeaveFrame
    //     0x83b91c: mov             SP, fp
    //     0x83b920: ldp             fp, lr, [SP], #0x10
    // 0x83b924: ret
    //     0x83b924: ret             
    // 0x83b928: str             x2, [SP]
    // 0x83b92c: r0 = of()
    //     0x83b92c: bl              #0x5e69ec  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x83b930: ldr             x2, [fp, #0x10]
    // 0x83b934: LoadField: r3 = r2->field_97
    //     0x83b934: ldur            w3, [x2, #0x97]
    // 0x83b938: DecompressPointer r3
    //     0x83b938: add             x3, x3, HEAP, lsl #32
    // 0x83b93c: r16 = Sentinel
    //     0x83b93c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x83b940: cmp             w3, w16
    // 0x83b944: b.eq            #0x83bbe0
    // 0x83b948: stur            x3, [fp, #-0x20]
    // 0x83b94c: LoadField: r1 = r0->field_f
    //     0x83b94c: ldur            w1, [x0, #0xf]
    // 0x83b950: DecompressPointer r1
    //     0x83b950: add             x1, x1, HEAP, lsl #32
    // 0x83b954: LoadField: r4 = r1->field_1b
    //     0x83b954: ldur            w4, [x1, #0x1b]
    // 0x83b958: DecompressPointer r4
    //     0x83b958: add             x4, x4, HEAP, lsl #32
    // 0x83b95c: stur            x4, [fp, #-0x18]
    // 0x83b960: LoadField: r5 = r0->field_7
    //     0x83b960: ldur            x5, [x0, #7]
    // 0x83b964: r0 = BoxInt64Instr(r5)
    //     0x83b964: sbfiz           x0, x5, #1, #0x1f
    //     0x83b968: cmp             x5, x0, asr #1
    //     0x83b96c: b.eq            #0x83b978
    //     0x83b970: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x83b974: stur            x5, [x0, #7]
    // 0x83b978: stur            x0, [fp, #-0x10]
    // 0x83b97c: stp             x0, x4, [SP]
    // 0x83b980: r0 = _getValueOrData()
    //     0x83b980: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x83b984: mov             x1, x0
    // 0x83b988: ldur            x0, [fp, #-0x18]
    // 0x83b98c: LoadField: r2 = r0->field_f
    //     0x83b98c: ldur            w2, [x0, #0xf]
    // 0x83b990: DecompressPointer r2
    //     0x83b990: add             x2, x2, HEAP, lsl #32
    // 0x83b994: cmp             w2, w1
    // 0x83b998: b.ne            #0x83b9a4
    // 0x83b99c: r2 = Null
    //     0x83b99c: mov             x2, NULL
    // 0x83b9a0: b               #0x83b9a8
    // 0x83b9a4: mov             x2, x1
    // 0x83b9a8: ldur            x1, [fp, #-0x20]
    // 0x83b9ac: cmp             w2, NULL
    // 0x83b9b0: b.eq            #0x83bbec
    // 0x83b9b4: LoadField: r3 = r2->field_23
    //     0x83b9b4: ldur            w3, [x2, #0x23]
    // 0x83b9b8: DecompressPointer r3
    //     0x83b9b8: add             x3, x3, HEAP, lsl #32
    // 0x83b9bc: LoadField: d0 = r3->field_1f
    //     0x83b9bc: ldur            d0, [x3, #0x1f]
    // 0x83b9c0: LoadField: d1 = r1->field_7
    //     0x83b9c0: ldur            d1, [x1, #7]
    // 0x83b9c4: fcmp            d1, d0
    // 0x83b9c8: b.eq            #0x83bb3c
    // 0x83b9cc: r1 = LoadStaticField(0x1474)
    //     0x83b9cc: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x83b9d0: ldr             x1, [x1, #0x28e8]
    // 0x83b9d4: cmp             w1, NULL
    // 0x83b9d8: b.eq            #0x83bbf0
    // 0x83b9dc: LoadField: r3 = r1->field_53
    //     0x83b9dc: ldur            w3, [x1, #0x53]
    // 0x83b9e0: DecompressPointer r3
    //     0x83b9e0: add             x3, x3, HEAP, lsl #32
    // 0x83b9e4: stur            x3, [fp, #-0x28]
    // 0x83b9e8: LoadField: r4 = r3->field_7
    //     0x83b9e8: ldur            w4, [x3, #7]
    // 0x83b9ec: DecompressPointer r4
    //     0x83b9ec: add             x4, x4, HEAP, lsl #32
    // 0x83b9f0: ldur            x2, [fp, #-8]
    // 0x83b9f4: stur            x4, [fp, #-0x20]
    // 0x83b9f8: r1 = Function '<anonymous closure>':.
    //     0x83b9f8: add             x1, PP, #0x41, lsl #12  ; [pp+0x413e0] AnonymousClosure: (0x83bc18), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::didChangeMetrics (0x83b8d8)
    //     0x83b9fc: ldr             x1, [x1, #0x3e0]
    // 0x83ba00: r0 = AllocateClosure()
    //     0x83ba00: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x83ba04: ldur            x2, [fp, #-0x20]
    // 0x83ba08: mov             x3, x0
    // 0x83ba0c: r1 = Null
    //     0x83ba0c: mov             x1, NULL
    // 0x83ba10: stur            x3, [fp, #-8]
    // 0x83ba14: cmp             w2, NULL
    // 0x83ba18: b.eq            #0x83ba38
    // 0x83ba1c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x83ba1c: ldur            w4, [x2, #0x17]
    // 0x83ba20: DecompressPointer r4
    //     0x83ba20: add             x4, x4, HEAP, lsl #32
    // 0x83ba24: r8 = X0
    //     0x83ba24: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x83ba28: LoadField: r9 = r4->field_7
    //     0x83ba28: ldur            x9, [x4, #7]
    // 0x83ba2c: r3 = Null
    //     0x83ba2c: add             x3, PP, #0x41, lsl #12  ; [pp+0x413e8] Null
    //     0x83ba30: ldr             x3, [x3, #0x3e8]
    // 0x83ba34: blr             x9
    // 0x83ba38: ldur            x0, [fp, #-0x28]
    // 0x83ba3c: LoadField: r1 = r0->field_b
    //     0x83ba3c: ldur            w1, [x0, #0xb]
    // 0x83ba40: DecompressPointer r1
    //     0x83ba40: add             x1, x1, HEAP, lsl #32
    // 0x83ba44: stur            x1, [fp, #-0x20]
    // 0x83ba48: LoadField: r2 = r0->field_f
    //     0x83ba48: ldur            w2, [x0, #0xf]
    // 0x83ba4c: DecompressPointer r2
    //     0x83ba4c: add             x2, x2, HEAP, lsl #32
    // 0x83ba50: LoadField: r3 = r2->field_b
    //     0x83ba50: ldur            w3, [x2, #0xb]
    // 0x83ba54: DecompressPointer r3
    //     0x83ba54: add             x3, x3, HEAP, lsl #32
    // 0x83ba58: cmp             w1, w3
    // 0x83ba5c: b.ne            #0x83ba68
    // 0x83ba60: str             x0, [SP]
    // 0x83ba64: r0 = _growToNextCapacity()
    //     0x83ba64: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x83ba68: ldr             x4, [fp, #0x10]
    // 0x83ba6c: ldur            x2, [fp, #-0x28]
    // 0x83ba70: ldur            x3, [fp, #-0x18]
    // 0x83ba74: ldur            x0, [fp, #-0x20]
    // 0x83ba78: r5 = LoadInt32Instr(r0)
    //     0x83ba78: sbfx            x5, x0, #1, #0x1f
    // 0x83ba7c: add             x0, x5, #1
    // 0x83ba80: lsl             x1, x0, #1
    // 0x83ba84: StoreField: r2->field_b = r1
    //     0x83ba84: stur            w1, [x2, #0xb]
    // 0x83ba88: mov             x1, x5
    // 0x83ba8c: cmp             x1, x0
    // 0x83ba90: b.hs            #0x83bbf4
    // 0x83ba94: LoadField: r1 = r2->field_f
    //     0x83ba94: ldur            w1, [x2, #0xf]
    // 0x83ba98: DecompressPointer r1
    //     0x83ba98: add             x1, x1, HEAP, lsl #32
    // 0x83ba9c: ldur            x0, [fp, #-8]
    // 0x83baa0: ArrayStore: r1[r5] = r0  ; List_4
    //     0x83baa0: add             x25, x1, x5, lsl #2
    //     0x83baa4: add             x25, x25, #0xf
    //     0x83baa8: str             w0, [x25]
    //     0x83baac: tbz             w0, #0, #0x83bac8
    //     0x83bab0: ldurb           w16, [x1, #-1]
    //     0x83bab4: ldurb           w17, [x0, #-1]
    //     0x83bab8: and             x16, x17, x16, lsr #2
    //     0x83babc: tst             x16, HEAP, lsr #32
    //     0x83bac0: b.eq            #0x83bac8
    //     0x83bac4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x83bac8: LoadField: r0 = r4->field_97
    //     0x83bac8: ldur            w0, [x4, #0x97]
    // 0x83bacc: DecompressPointer r0
    //     0x83bacc: add             x0, x0, HEAP, lsl #32
    // 0x83bad0: stur            x0, [fp, #-8]
    // 0x83bad4: ldur            x16, [fp, #-0x10]
    // 0x83bad8: stp             x16, x3, [SP]
    // 0x83badc: r0 = _getValueOrData()
    //     0x83badc: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x83bae0: mov             x1, x0
    // 0x83bae4: ldur            x0, [fp, #-0x18]
    // 0x83bae8: LoadField: r2 = r0->field_f
    //     0x83bae8: ldur            w2, [x0, #0xf]
    // 0x83baec: DecompressPointer r2
    //     0x83baec: add             x2, x2, HEAP, lsl #32
    // 0x83baf0: cmp             w2, w1
    // 0x83baf4: b.ne            #0x83bb00
    // 0x83baf8: r2 = Null
    //     0x83baf8: mov             x2, NULL
    // 0x83bafc: b               #0x83bb04
    // 0x83bb00: mov             x2, x1
    // 0x83bb04: ldur            x1, [fp, #-8]
    // 0x83bb08: cmp             w2, NULL
    // 0x83bb0c: b.eq            #0x83bbf8
    // 0x83bb10: LoadField: r3 = r2->field_23
    //     0x83bb10: ldur            w3, [x2, #0x23]
    // 0x83bb14: DecompressPointer r3
    //     0x83bb14: add             x3, x3, HEAP, lsl #32
    // 0x83bb18: LoadField: d0 = r3->field_1f
    //     0x83bb18: ldur            d0, [x3, #0x1f]
    // 0x83bb1c: LoadField: d1 = r1->field_7
    //     0x83bb1c: ldur            d1, [x1, #7]
    // 0x83bb20: fcmp            d1, d0
    // 0x83bb24: b.vs            #0x83bb3c
    // 0x83bb28: b.ge            #0x83bb3c
    // 0x83bb2c: ldr             x16, [fp, #0x10]
    // 0x83bb30: r30 = false
    //     0x83bb30: add             lr, NULL, #0x30  ; false
    // 0x83bb34: stp             lr, x16, [SP]
    // 0x83bb38: r0 = _scheduleShowCaretOnScreen()
    //     0x83bb38: bl              #0x5d660c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x83bb3c: ldur            x0, [fp, #-0x18]
    // 0x83bb40: ldur            x16, [fp, #-0x10]
    // 0x83bb44: stp             x16, x0, [SP]
    // 0x83bb48: r0 = _getValueOrData()
    //     0x83bb48: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x83bb4c: ldur            x1, [fp, #-0x18]
    // 0x83bb50: LoadField: r2 = r1->field_f
    //     0x83bb50: ldur            w2, [x1, #0xf]
    // 0x83bb54: DecompressPointer r2
    //     0x83bb54: add             x2, x2, HEAP, lsl #32
    // 0x83bb58: cmp             w2, w0
    // 0x83bb5c: b.ne            #0x83bb68
    // 0x83bb60: r2 = Null
    //     0x83bb60: mov             x2, NULL
    // 0x83bb64: b               #0x83bb6c
    // 0x83bb68: mov             x2, x0
    // 0x83bb6c: ldr             x1, [fp, #0x10]
    // 0x83bb70: cmp             w2, NULL
    // 0x83bb74: b.eq            #0x83bbfc
    // 0x83bb78: LoadField: r3 = r2->field_23
    //     0x83bb78: ldur            w3, [x2, #0x23]
    // 0x83bb7c: DecompressPointer r3
    //     0x83bb7c: add             x3, x3, HEAP, lsl #32
    // 0x83bb80: LoadField: d0 = r3->field_1f
    //     0x83bb80: ldur            d0, [x3, #0x1f]
    // 0x83bb84: r0 = inline_Allocate_Double()
    //     0x83bb84: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x83bb88: add             x0, x0, #0x10
    //     0x83bb8c: cmp             x2, x0
    //     0x83bb90: b.ls            #0x83bc00
    //     0x83bb94: str             x0, [THR, #0x50]  ; THR::top
    //     0x83bb98: sub             x0, x0, #0xf
    //     0x83bb9c: movz            x2, #0xd148
    //     0x83bba0: movk            x2, #0x3, lsl #16
    //     0x83bba4: stur            x2, [x0, #-1]
    // 0x83bba8: StoreField: r0->field_7 = d0
    //     0x83bba8: stur            d0, [x0, #7]
    // 0x83bbac: StoreField: r1->field_97 = r0
    //     0x83bbac: stur            w0, [x1, #0x97]
    //     0x83bbb0: ldurb           w16, [x1, #-1]
    //     0x83bbb4: ldurb           w17, [x0, #-1]
    //     0x83bbb8: and             x16, x17, x16, lsr #2
    //     0x83bbbc: tst             x16, HEAP, lsr #32
    //     0x83bbc0: b.eq            #0x83bbc8
    //     0x83bbc4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x83bbc8: r0 = Null
    //     0x83bbc8: mov             x0, NULL
    // 0x83bbcc: LeaveFrame
    //     0x83bbcc: mov             SP, fp
    //     0x83bbd0: ldp             fp, lr, [SP], #0x10
    // 0x83bbd4: ret
    //     0x83bbd4: ret             
    // 0x83bbd8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x83bbd8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x83bbdc: b               #0x83b8f0
    // 0x83bbe0: r9 = _lastBottomViewInset
    //     0x83bbe0: add             x9, PP, #0x41, lsl #12  ; [pp+0x413f8] Field <EditableTextState._lastBottomViewInset@244183791>: late (offset: 0x98)
    //     0x83bbe4: ldr             x9, [x9, #0x3f8]
    // 0x83bbe8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x83bbe8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x83bbec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x83bbec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x83bbf0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x83bbf0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x83bbf4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x83bbf4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x83bbf8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x83bbf8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x83bbfc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x83bbfc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x83bc00: SaveReg d0
    //     0x83bc00: str             q0, [SP, #-0x10]!
    // 0x83bc04: SaveReg r1
    //     0x83bc04: str             x1, [SP, #-8]!
    // 0x83bc08: r0 = AllocateDouble()
    //     0x83bc08: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x83bc0c: RestoreReg r1
    //     0x83bc0c: ldr             x1, [SP], #8
    // 0x83bc10: RestoreReg d0
    //     0x83bc10: ldr             q0, [SP], #0x10
    // 0x83bc14: b               #0x83bba8
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x83bc18, size: 0x5c
    // 0x83bc18: EnterFrame
    //     0x83bc18: stp             fp, lr, [SP, #-0x10]!
    //     0x83bc1c: mov             fp, SP
    // 0x83bc20: AllocStack(0x8)
    //     0x83bc20: sub             SP, SP, #8
    // 0x83bc24: SetupParameters()
    //     0x83bc24: ldr             x0, [fp, #0x18]
    //     0x83bc28: ldur            w1, [x0, #0x17]
    //     0x83bc2c: add             x1, x1, HEAP, lsl #32
    // 0x83bc30: CheckStackOverflow
    //     0x83bc30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x83bc34: cmp             SP, x16
    //     0x83bc38: b.ls            #0x83bc6c
    // 0x83bc3c: LoadField: r0 = r1->field_f
    //     0x83bc3c: ldur            w0, [x1, #0xf]
    // 0x83bc40: DecompressPointer r0
    //     0x83bc40: add             x0, x0, HEAP, lsl #32
    // 0x83bc44: LoadField: r1 = r0->field_3f
    //     0x83bc44: ldur            w1, [x0, #0x3f]
    // 0x83bc48: DecompressPointer r1
    //     0x83bc48: add             x1, x1, HEAP, lsl #32
    // 0x83bc4c: cmp             w1, NULL
    // 0x83bc50: b.eq            #0x83bc5c
    // 0x83bc54: str             x1, [SP]
    // 0x83bc58: r0 = updateForScroll()
    //     0x83bc58: bl              #0x83bc74  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateForScroll
    // 0x83bc5c: r0 = Null
    //     0x83bc5c: mov             x0, NULL
    // 0x83bc60: LeaveFrame
    //     0x83bc60: mov             SP, fp
    //     0x83bc64: ldp             fp, lr, [SP], #0x10
    // 0x83bc68: ret
    //     0x83bc68: ret             
    // 0x83bc6c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x83bc6c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x83bc70: b               #0x83bc3c
  }
  _ didChangeDependencies(/* No info */) {
    // ** addr: 0x873080, size: 0x344
    // 0x873080: EnterFrame
    //     0x873080: stp             fp, lr, [SP, #-0x10]!
    //     0x873084: mov             fp, SP
    // 0x873088: AllocStack(0x28)
    //     0x873088: sub             SP, SP, #0x28
    // 0x87308c: CheckStackOverflow
    //     0x87308c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x873090: cmp             SP, x16
    //     0x873094: b.ls            #0x873398
    // 0x873098: r1 = 1
    //     0x873098: movz            x1, #0x1
    // 0x87309c: r0 = AllocateContext()
    //     0x87309c: bl              #0xc5def4  ; AllocateContextStub
    // 0x8730a0: mov             x1, x0
    // 0x8730a4: ldr             x0, [fp, #0x10]
    // 0x8730a8: stur            x1, [fp, #-8]
    // 0x8730ac: StoreField: r1->field_f = r0
    //     0x8730ac: stur            w0, [x1, #0xf]
    // 0x8730b0: LoadField: r2 = r0->field_f
    //     0x8730b0: ldur            w2, [x0, #0xf]
    // 0x8730b4: DecompressPointer r2
    //     0x8730b4: add             x2, x2, HEAP, lsl #32
    // 0x8730b8: cmp             w2, NULL
    // 0x8730bc: b.eq            #0x8733a0
    // 0x8730c0: str             x2, [SP]
    // 0x8730c4: r0 = boldTextOf()
    //     0x8730c4: bl              #0x8734f0  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::boldTextOf
    // 0x8730c8: tbnz            w0, #4, #0x873100
    // 0x8730cc: ldr             x0, [fp, #0x10]
    // 0x8730d0: LoadField: r1 = r0->field_b
    //     0x8730d0: ldur            w1, [x0, #0xb]
    // 0x8730d4: DecompressPointer r1
    //     0x8730d4: add             x1, x1, HEAP, lsl #32
    // 0x8730d8: cmp             w1, NULL
    // 0x8730dc: b.eq            #0x8733a4
    // 0x8730e0: LoadField: r2 = r1->field_47
    //     0x8730e0: ldur            w2, [x1, #0x47]
    // 0x8730e4: DecompressPointer r2
    //     0x8730e4: add             x2, x2, HEAP, lsl #32
    // 0x8730e8: r16 = Instance_TextStyle
    //     0x8730e8: add             x16, PP, #0x1e, lsl #12  ; [pp+0x1eaa8] Obj!TextStyle@c35e51
    //     0x8730ec: ldr             x16, [x16, #0xaa8]
    // 0x8730f0: stp             x16, x2, [SP]
    // 0x8730f4: r0 = merge()
    //     0x8730f4: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x8730f8: ldr             x1, [fp, #0x10]
    // 0x8730fc: b               #0x873120
    // 0x873100: ldr             x1, [fp, #0x10]
    // 0x873104: LoadField: r0 = r1->field_b
    //     0x873104: ldur            w0, [x1, #0xb]
    // 0x873108: DecompressPointer r0
    //     0x873108: add             x0, x0, HEAP, lsl #32
    // 0x87310c: cmp             w0, NULL
    // 0x873110: b.eq            #0x8733a8
    // 0x873114: LoadField: r2 = r0->field_47
    //     0x873114: ldur            w2, [x0, #0x47]
    // 0x873118: DecompressPointer r2
    //     0x873118: add             x2, x2, HEAP, lsl #32
    // 0x87311c: mov             x0, x2
    // 0x873120: StoreField: r1->field_63 = r0
    //     0x873120: stur            w0, [x1, #0x63]
    //     0x873124: ldurb           w16, [x1, #-1]
    //     0x873128: ldurb           w17, [x0, #-1]
    //     0x87312c: and             x16, x17, x16, lsr #2
    //     0x873130: tst             x16, HEAP, lsr #32
    //     0x873134: b.eq            #0x87313c
    //     0x873138: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x87313c: LoadField: r0 = r1->field_f
    //     0x87313c: ldur            w0, [x1, #0xf]
    // 0x873140: DecompressPointer r0
    //     0x873140: add             x0, x0, HEAP, lsl #32
    // 0x873144: cmp             w0, NULL
    // 0x873148: b.eq            #0x8733ac
    // 0x87314c: str             x0, [SP]
    // 0x873150: r0 = maybeOf()
    //     0x873150: bl              #0x8734a8  ; [package:flutter/src/widgets/autofill.dart] AutofillGroup::maybeOf
    // 0x873154: ldr             x0, [fp, #0x10]
    // 0x873158: LoadField: r1 = r0->field_57
    //     0x873158: ldur            w1, [x0, #0x57]
    // 0x87315c: DecompressPointer r1
    //     0x87315c: add             x1, x1, HEAP, lsl #32
    // 0x873160: tbz             w1, #4, #0x87327c
    // 0x873164: LoadField: r1 = r0->field_b
    //     0x873164: ldur            w1, [x0, #0xb]
    // 0x873168: DecompressPointer r1
    //     0x873168: add             x1, x1, HEAP, lsl #32
    // 0x87316c: cmp             w1, NULL
    // 0x873170: b.eq            #0x8733b0
    // 0x873174: LoadField: r2 = r1->field_83
    //     0x873174: ldur            w2, [x1, #0x83]
    // 0x873178: DecompressPointer r2
    //     0x873178: add             x2, x2, HEAP, lsl #32
    // 0x87317c: tbnz            w2, #4, #0x87327c
    // 0x873180: r1 = true
    //     0x873180: add             x1, NULL, #0x20  ; true
    // 0x873184: StoreField: r0->field_57 = r1
    //     0x873184: stur            w1, [x0, #0x57]
    // 0x873188: r1 = LoadStaticField(0x1474)
    //     0x873188: ldr             x1, [THR, #0x68]  ; THR::field_table_values
    //     0x87318c: ldr             x1, [x1, #0x28e8]
    // 0x873190: cmp             w1, NULL
    // 0x873194: b.eq            #0x8733b4
    // 0x873198: LoadField: r3 = r1->field_53
    //     0x873198: ldur            w3, [x1, #0x53]
    // 0x87319c: DecompressPointer r3
    //     0x87319c: add             x3, x3, HEAP, lsl #32
    // 0x8731a0: stur            x3, [fp, #-0x18]
    // 0x8731a4: LoadField: r4 = r3->field_7
    //     0x8731a4: ldur            w4, [x3, #7]
    // 0x8731a8: DecompressPointer r4
    //     0x8731a8: add             x4, x4, HEAP, lsl #32
    // 0x8731ac: ldur            x2, [fp, #-8]
    // 0x8731b0: stur            x4, [fp, #-0x10]
    // 0x8731b4: r1 = Function '<anonymous closure>':.
    //     0x8731b4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41470] AnonymousClosure: (0x873594), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::didChangeDependencies (0x873080)
    //     0x8731b8: ldr             x1, [x1, #0x470]
    // 0x8731bc: r0 = AllocateClosure()
    //     0x8731bc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8731c0: ldur            x2, [fp, #-0x10]
    // 0x8731c4: mov             x3, x0
    // 0x8731c8: r1 = Null
    //     0x8731c8: mov             x1, NULL
    // 0x8731cc: stur            x3, [fp, #-8]
    // 0x8731d0: cmp             w2, NULL
    // 0x8731d4: b.eq            #0x8731f4
    // 0x8731d8: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8731d8: ldur            w4, [x2, #0x17]
    // 0x8731dc: DecompressPointer r4
    //     0x8731dc: add             x4, x4, HEAP, lsl #32
    // 0x8731e0: r8 = X0
    //     0x8731e0: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x8731e4: LoadField: r9 = r4->field_7
    //     0x8731e4: ldur            x9, [x4, #7]
    // 0x8731e8: r3 = Null
    //     0x8731e8: add             x3, PP, #0x41, lsl #12  ; [pp+0x41478] Null
    //     0x8731ec: ldr             x3, [x3, #0x478]
    // 0x8731f0: blr             x9
    // 0x8731f4: ldur            x0, [fp, #-0x18]
    // 0x8731f8: LoadField: r1 = r0->field_b
    //     0x8731f8: ldur            w1, [x0, #0xb]
    // 0x8731fc: DecompressPointer r1
    //     0x8731fc: add             x1, x1, HEAP, lsl #32
    // 0x873200: stur            x1, [fp, #-0x10]
    // 0x873204: LoadField: r2 = r0->field_f
    //     0x873204: ldur            w2, [x0, #0xf]
    // 0x873208: DecompressPointer r2
    //     0x873208: add             x2, x2, HEAP, lsl #32
    // 0x87320c: LoadField: r3 = r2->field_b
    //     0x87320c: ldur            w3, [x2, #0xb]
    // 0x873210: DecompressPointer r3
    //     0x873210: add             x3, x3, HEAP, lsl #32
    // 0x873214: cmp             w1, w3
    // 0x873218: b.ne            #0x873224
    // 0x87321c: str             x0, [SP]
    // 0x873220: r0 = _growToNextCapacity()
    //     0x873220: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x873224: ldur            x2, [fp, #-0x18]
    // 0x873228: ldur            x0, [fp, #-0x10]
    // 0x87322c: r3 = LoadInt32Instr(r0)
    //     0x87322c: sbfx            x3, x0, #1, #0x1f
    // 0x873230: add             x0, x3, #1
    // 0x873234: lsl             x1, x0, #1
    // 0x873238: StoreField: r2->field_b = r1
    //     0x873238: stur            w1, [x2, #0xb]
    // 0x87323c: mov             x1, x3
    // 0x873240: cmp             x1, x0
    // 0x873244: b.hs            #0x8733b8
    // 0x873248: LoadField: r1 = r2->field_f
    //     0x873248: ldur            w1, [x2, #0xf]
    // 0x87324c: DecompressPointer r1
    //     0x87324c: add             x1, x1, HEAP, lsl #32
    // 0x873250: ldur            x0, [fp, #-8]
    // 0x873254: ArrayStore: r1[r3] = r0  ; List_4
    //     0x873254: add             x25, x1, x3, lsl #2
    //     0x873258: add             x25, x25, #0xf
    //     0x87325c: str             w0, [x25]
    //     0x873260: tbz             w0, #0, #0x87327c
    //     0x873264: ldurb           w16, [x1, #-1]
    //     0x873268: ldurb           w17, [x0, #-1]
    //     0x87326c: and             x16, x17, x16, lsr #2
    //     0x873270: tst             x16, HEAP, lsr #32
    //     0x873274: b.eq            #0x87327c
    //     0x873278: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x87327c: ldr             x0, [fp, #0x10]
    // 0x873280: LoadField: r1 = r0->field_f
    //     0x873280: ldur            w1, [x0, #0xf]
    // 0x873284: DecompressPointer r1
    //     0x873284: add             x1, x1, HEAP, lsl #32
    // 0x873288: cmp             w1, NULL
    // 0x87328c: b.eq            #0x8733bc
    // 0x873290: str             x1, [SP]
    // 0x873294: r0 = of()
    //     0x873294: bl              #0x873438  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::of
    // 0x873298: mov             x1, x0
    // 0x87329c: ldr             x0, [fp, #0x10]
    // 0x8732a0: LoadField: r2 = r0->field_6f
    //     0x8732a0: ldur            w2, [x0, #0x6f]
    // 0x8732a4: DecompressPointer r2
    //     0x8732a4: add             x2, x2, HEAP, lsl #32
    // 0x8732a8: cmp             w2, w1
    // 0x8732ac: b.eq            #0x8732fc
    // 0x8732b0: StoreField: r0->field_6f = r1
    //     0x8732b0: stur            w1, [x0, #0x6f]
    // 0x8732b4: str             x0, [SP]
    // 0x8732b8: r0 = _showBlinkingCursor()
    //     0x8732b8: bl              #0x5d1d94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_showBlinkingCursor
    // 0x8732bc: tbnz            w0, #4, #0x8732d0
    // 0x8732c0: ldr             x16, [fp, #0x10]
    // 0x8732c4: str             x16, [SP]
    // 0x8732c8: r0 = _startCursorBlink()
    //     0x8732c8: bl              #0x5cee38  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startCursorBlink
    // 0x8732cc: b               #0x8732fc
    // 0x8732d0: ldr             x0, [fp, #0x10]
    // 0x8732d4: LoadField: r1 = r0->field_6f
    //     0x8732d4: ldur            w1, [x0, #0x6f]
    // 0x8732d8: DecompressPointer r1
    //     0x8732d8: add             x1, x1, HEAP, lsl #32
    // 0x8732dc: tbz             w1, #4, #0x8732fc
    // 0x8732e0: LoadField: r1 = r0->field_1f
    //     0x8732e0: ldur            w1, [x0, #0x1f]
    // 0x8732e4: DecompressPointer r1
    //     0x8732e4: add             x1, x1, HEAP, lsl #32
    // 0x8732e8: cmp             w1, NULL
    // 0x8732ec: b.eq            #0x8732fc
    // 0x8732f0: str             x0, [SP]
    // 0x8732f4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8732f4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8732f8: r0 = _stopCursorBlink()
    //     0x8732f8: bl              #0x5d1584  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_stopCursorBlink
    // 0x8732fc: ldr             x0, [fp, #0x10]
    // 0x873300: LoadField: r1 = r0->field_f
    //     0x873300: ldur            w1, [x0, #0xf]
    // 0x873304: DecompressPointer r1
    //     0x873304: add             x1, x1, HEAP, lsl #32
    // 0x873308: cmp             w1, NULL
    // 0x87330c: b.eq            #0x8733c0
    // 0x873310: str             x1, [SP]
    // 0x873314: r0 = orientationOf()
    //     0x873314: bl              #0x8733c4  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::orientationOf
    // 0x873318: ldr             x1, [fp, #0x10]
    // 0x87331c: LoadField: r2 = r1->field_6b
    //     0x87331c: ldur            w2, [x1, #0x6b]
    // 0x873320: DecompressPointer r2
    //     0x873320: add             x2, x2, HEAP, lsl #32
    // 0x873324: cmp             w2, NULL
    // 0x873328: b.ne            #0x873358
    // 0x87332c: StoreField: r1->field_6b = r0
    //     0x87332c: stur            w0, [x1, #0x6b]
    //     0x873330: ldurb           w16, [x1, #-1]
    //     0x873334: ldurb           w17, [x0, #-1]
    //     0x873338: and             x16, x17, x16, lsr #2
    //     0x87333c: tst             x16, HEAP, lsr #32
    //     0x873340: b.eq            #0x873348
    //     0x873344: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x873348: r0 = Null
    //     0x873348: mov             x0, NULL
    // 0x87334c: LeaveFrame
    //     0x87334c: mov             SP, fp
    //     0x873350: ldp             fp, lr, [SP], #0x10
    // 0x873354: ret
    //     0x873354: ret             
    // 0x873358: cmp             w0, w2
    // 0x87335c: b.eq            #0x873388
    // 0x873360: StoreField: r1->field_6b = r0
    //     0x873360: stur            w0, [x1, #0x6b]
    //     0x873364: ldurb           w16, [x1, #-1]
    //     0x873368: ldurb           w17, [x0, #-1]
    //     0x87336c: and             x16, x17, x16, lsr #2
    //     0x873370: tst             x16, HEAP, lsr #32
    //     0x873374: b.eq            #0x87337c
    //     0x873378: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x87337c: str             x1, [SP]
    // 0x873380: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x873380: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x873384: r0 = hideToolbar()
    //     0x873384: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x873388: r0 = Null
    //     0x873388: mov             x0, NULL
    // 0x87338c: LeaveFrame
    //     0x87338c: mov             SP, fp
    //     0x873390: ldp             fp, lr, [SP], #0x10
    // 0x873394: ret
    //     0x873394: ret             
    // 0x873398: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x873398: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x87339c: b               #0x873098
    // 0x8733a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733a4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733a8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733b8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8733b8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8733bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733bc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8733c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8733c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x873594, size: 0xf4
    // 0x873594: EnterFrame
    //     0x873594: stp             fp, lr, [SP, #-0x10]!
    //     0x873598: mov             fp, SP
    // 0x87359c: AllocStack(0x18)
    //     0x87359c: sub             SP, SP, #0x18
    // 0x8735a0: SetupParameters()
    //     0x8735a0: ldr             x0, [fp, #0x18]
    //     0x8735a4: ldur            w2, [x0, #0x17]
    //     0x8735a8: add             x2, x2, HEAP, lsl #32
    //     0x8735ac: stur            x2, [fp, #-8]
    // 0x8735b0: CheckStackOverflow
    //     0x8735b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8735b4: cmp             SP, x16
    //     0x8735b8: b.ls            #0x873678
    // 0x8735bc: LoadField: r1 = r2->field_f
    //     0x8735bc: ldur            w1, [x2, #0xf]
    // 0x8735c0: DecompressPointer r1
    //     0x8735c0: add             x1, x1, HEAP, lsl #32
    // 0x8735c4: LoadField: r0 = r1->field_f
    //     0x8735c4: ldur            w0, [x1, #0xf]
    // 0x8735c8: DecompressPointer r0
    //     0x8735c8: add             x0, x0, HEAP, lsl #32
    // 0x8735cc: cmp             w0, NULL
    // 0x8735d0: b.eq            #0x873668
    // 0x8735d4: LoadField: r0 = r1->field_a7
    //     0x8735d4: ldur            w0, [x1, #0xa7]
    // 0x8735d8: DecompressPointer r0
    //     0x8735d8: add             x0, x0, HEAP, lsl #32
    // 0x8735dc: r16 = Sentinel
    //     0x8735dc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8735e0: cmp             w0, w16
    // 0x8735e4: b.ne            #0x8735f0
    // 0x8735e8: r2 = renderEditable
    //     0x8735e8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x8735ec: r0 = InitLateFinalInstanceField()
    //     0x8735ec: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x8735f0: LoadField: r1 = r0->field_57
    //     0x8735f0: ldur            w1, [x0, #0x57]
    // 0x8735f4: DecompressPointer r1
    //     0x8735f4: add             x1, x1, HEAP, lsl #32
    // 0x8735f8: cmp             w1, NULL
    // 0x8735fc: b.eq            #0x873668
    // 0x873600: ldur            x0, [fp, #-8]
    // 0x873604: LoadField: r1 = r0->field_f
    //     0x873604: ldur            w1, [x0, #0xf]
    // 0x873608: DecompressPointer r1
    //     0x873608: add             x1, x1, HEAP, lsl #32
    // 0x87360c: str             x1, [SP]
    // 0x873610: r0 = _flagInternalFocus()
    //     0x873610: bl              #0x5d64a4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_flagInternalFocus
    // 0x873614: ldur            x0, [fp, #-8]
    // 0x873618: LoadField: r1 = r0->field_f
    //     0x873618: ldur            w1, [x0, #0xf]
    // 0x87361c: DecompressPointer r1
    //     0x87361c: add             x1, x1, HEAP, lsl #32
    // 0x873620: LoadField: r2 = r1->field_f
    //     0x873620: ldur            w2, [x1, #0xf]
    // 0x873624: DecompressPointer r2
    //     0x873624: add             x2, x2, HEAP, lsl #32
    // 0x873628: cmp             w2, NULL
    // 0x87362c: b.eq            #0x873680
    // 0x873630: str             x2, [SP]
    // 0x873634: r0 = of()
    //     0x873634: bl              #0x69850c  ; [package:flutter/src/widgets/focus_scope.dart] FocusScope::of
    // 0x873638: mov             x1, x0
    // 0x87363c: ldur            x0, [fp, #-8]
    // 0x873640: LoadField: r2 = r0->field_f
    //     0x873640: ldur            w2, [x0, #0xf]
    // 0x873644: DecompressPointer r2
    //     0x873644: add             x2, x2, HEAP, lsl #32
    // 0x873648: LoadField: r0 = r2->field_b
    //     0x873648: ldur            w0, [x2, #0xb]
    // 0x87364c: DecompressPointer r0
    //     0x87364c: add             x0, x0, HEAP, lsl #32
    // 0x873650: cmp             w0, NULL
    // 0x873654: b.eq            #0x873684
    // 0x873658: LoadField: r2 = r0->field_f
    //     0x873658: ldur            w2, [x0, #0xf]
    // 0x87365c: DecompressPointer r2
    //     0x87365c: add             x2, x2, HEAP, lsl #32
    // 0x873660: stp             x2, x1, [SP]
    // 0x873664: r0 = autofocus()
    //     0x873664: bl              #0x873688  ; [package:flutter/src/widgets/focus_manager.dart] FocusScopeNode::autofocus
    // 0x873668: r0 = Null
    //     0x873668: mov             x0, NULL
    // 0x87366c: LeaveFrame
    //     0x87366c: mov             SP, fp
    //     0x873670: ldp             fp, lr, [SP], #0x10
    // 0x873674: ret
    //     0x873674: ret             
    // 0x873678: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x873678: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x87367c: b               #0x8735bc
    // 0x873680: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x873680: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x873684: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x873684: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8b6d78, size: 0x818
    // 0x8b6d78: EnterFrame
    //     0x8b6d78: stp             fp, lr, [SP, #-0x10]!
    //     0x8b6d7c: mov             fp, SP
    // 0x8b6d80: AllocStack(0x50)
    //     0x8b6d80: sub             SP, SP, #0x50
    // 0x8b6d84: CheckStackOverflow
    //     0x8b6d84: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b6d88: cmp             SP, x16
    //     0x8b6d8c: b.ls            #0x8b752c
    // 0x8b6d90: r1 = 1
    //     0x8b6d90: movz            x1, #0x1
    // 0x8b6d94: r0 = AllocateContext()
    //     0x8b6d94: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b6d98: mov             x4, x0
    // 0x8b6d9c: ldr             x3, [fp, #0x18]
    // 0x8b6da0: stur            x4, [fp, #-8]
    // 0x8b6da4: StoreField: r4->field_f = r3
    //     0x8b6da4: stur            w3, [x4, #0xf]
    // 0x8b6da8: ldr             x0, [fp, #0x10]
    // 0x8b6dac: r2 = Null
    //     0x8b6dac: mov             x2, NULL
    // 0x8b6db0: r1 = Null
    //     0x8b6db0: mov             x1, NULL
    // 0x8b6db4: r4 = 59
    //     0x8b6db4: movz            x4, #0x3b
    // 0x8b6db8: branchIfSmi(r0, 0x8b6dc4)
    //     0x8b6db8: tbz             w0, #0, #0x8b6dc4
    // 0x8b6dbc: r4 = LoadClassIdInstr(r0)
    //     0x8b6dbc: ldur            x4, [x0, #-1]
    //     0x8b6dc0: ubfx            x4, x4, #0xc, #0x14
    // 0x8b6dc4: r17 = 4128
    //     0x8b6dc4: movz            x17, #0x1020
    // 0x8b6dc8: cmp             x4, x17
    // 0x8b6dcc: b.eq            #0x8b6de0
    // 0x8b6dd0: r8 = EditableText
    //     0x8b6dd0: ldr             x8, [PP, #0x6228]  ; [pp+0x6228] Type: EditableText
    // 0x8b6dd4: r3 = Null
    //     0x8b6dd4: add             x3, PP, #0x41, lsl #12  ; [pp+0x41430] Null
    //     0x8b6dd8: ldr             x3, [x3, #0x430]
    // 0x8b6ddc: r0 = EditableText()
    //     0x8b6ddc: bl              #0x51dcec  ; IsType_EditableText_Stub
    // 0x8b6de0: ldr             x3, [fp, #0x18]
    // 0x8b6de4: LoadField: r2 = r3->field_7
    //     0x8b6de4: ldur            w2, [x3, #7]
    // 0x8b6de8: DecompressPointer r2
    //     0x8b6de8: add             x2, x2, HEAP, lsl #32
    // 0x8b6dec: ldr             x0, [fp, #0x10]
    // 0x8b6df0: r1 = Null
    //     0x8b6df0: mov             x1, NULL
    // 0x8b6df4: cmp             w2, NULL
    // 0x8b6df8: b.eq            #0x8b6e1c
    // 0x8b6dfc: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8b6dfc: ldur            w4, [x2, #0x17]
    // 0x8b6e00: DecompressPointer r4
    //     0x8b6e00: add             x4, x4, HEAP, lsl #32
    // 0x8b6e04: r8 = X0 bound StatefulWidget
    //     0x8b6e04: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8b6e08: ldr             x8, [x8, #0x290]
    // 0x8b6e0c: LoadField: r9 = r4->field_7
    //     0x8b6e0c: ldur            x9, [x4, #7]
    // 0x8b6e10: r3 = Null
    //     0x8b6e10: add             x3, PP, #0x41, lsl #12  ; [pp+0x41440] Null
    //     0x8b6e14: ldr             x3, [x3, #0x440]
    // 0x8b6e18: blr             x9
    // 0x8b6e1c: ldr             x0, [fp, #0x18]
    // 0x8b6e20: LoadField: r1 = r0->field_b
    //     0x8b6e20: ldur            w1, [x0, #0xb]
    // 0x8b6e24: DecompressPointer r1
    //     0x8b6e24: add             x1, x1, HEAP, lsl #32
    // 0x8b6e28: cmp             w1, NULL
    // 0x8b6e2c: b.eq            #0x8b7534
    // 0x8b6e30: LoadField: r2 = r1->field_b
    //     0x8b6e30: ldur            w2, [x1, #0xb]
    // 0x8b6e34: DecompressPointer r2
    //     0x8b6e34: add             x2, x2, HEAP, lsl #32
    // 0x8b6e38: ldr             x1, [fp, #0x10]
    // 0x8b6e3c: LoadField: r3 = r1->field_b
    //     0x8b6e3c: ldur            w3, [x1, #0xb]
    // 0x8b6e40: DecompressPointer r3
    //     0x8b6e40: add             x3, x3, HEAP, lsl #32
    // 0x8b6e44: stur            x3, [fp, #-0x10]
    // 0x8b6e48: cmp             w2, w3
    // 0x8b6e4c: b.eq            #0x8b6edc
    // 0x8b6e50: r1 = 1
    //     0x8b6e50: movz            x1, #0x1
    // 0x8b6e54: r0 = AllocateContext()
    //     0x8b6e54: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b6e58: mov             x1, x0
    // 0x8b6e5c: ldr             x0, [fp, #0x18]
    // 0x8b6e60: StoreField: r1->field_f = r0
    //     0x8b6e60: stur            w0, [x1, #0xf]
    // 0x8b6e64: mov             x2, x1
    // 0x8b6e68: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0x8b6e68: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0x8b6e6c: ldr             x1, [x1, #0xea8]
    // 0x8b6e70: r0 = AllocateClosure()
    //     0x8b6e70: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b6e74: ldur            x16, [fp, #-0x10]
    // 0x8b6e78: stp             x0, x16, [SP]
    // 0x8b6e7c: r0 = removeListener()
    //     0x8b6e7c: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x8b6e80: ldr             x0, [fp, #0x18]
    // 0x8b6e84: LoadField: r1 = r0->field_b
    //     0x8b6e84: ldur            w1, [x0, #0xb]
    // 0x8b6e88: DecompressPointer r1
    //     0x8b6e88: add             x1, x1, HEAP, lsl #32
    // 0x8b6e8c: cmp             w1, NULL
    // 0x8b6e90: b.eq            #0x8b7538
    // 0x8b6e94: LoadField: r2 = r1->field_b
    //     0x8b6e94: ldur            w2, [x1, #0xb]
    // 0x8b6e98: DecompressPointer r2
    //     0x8b6e98: add             x2, x2, HEAP, lsl #32
    // 0x8b6e9c: stur            x2, [fp, #-0x18]
    // 0x8b6ea0: r1 = 1
    //     0x8b6ea0: movz            x1, #0x1
    // 0x8b6ea4: r0 = AllocateContext()
    //     0x8b6ea4: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b6ea8: mov             x1, x0
    // 0x8b6eac: ldr             x0, [fp, #0x18]
    // 0x8b6eb0: StoreField: r1->field_f = r0
    //     0x8b6eb0: stur            w0, [x1, #0xf]
    // 0x8b6eb4: mov             x2, x1
    // 0x8b6eb8: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0x8b6eb8: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0x8b6ebc: ldr             x1, [x1, #0xea8]
    // 0x8b6ec0: r0 = AllocateClosure()
    //     0x8b6ec0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b6ec4: ldur            x16, [fp, #-0x18]
    // 0x8b6ec8: stp             x0, x16, [SP]
    // 0x8b6ecc: r0 = addListener()
    //     0x8b6ecc: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x8b6ed0: ldr             x16, [fp, #0x18]
    // 0x8b6ed4: str             x16, [SP]
    // 0x8b6ed8: r0 = _updateRemoteEditingValueIfNeeded()
    //     0x8b6ed8: bl              #0x5d42a8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateRemoteEditingValueIfNeeded
    // 0x8b6edc: ldr             x0, [fp, #0x18]
    // 0x8b6ee0: ldur            x1, [fp, #-0x10]
    // 0x8b6ee4: LoadField: r2 = r0->field_b
    //     0x8b6ee4: ldur            w2, [x0, #0xb]
    // 0x8b6ee8: DecompressPointer r2
    //     0x8b6ee8: add             x2, x2, HEAP, lsl #32
    // 0x8b6eec: cmp             w2, NULL
    // 0x8b6ef0: b.eq            #0x8b753c
    // 0x8b6ef4: LoadField: r3 = r2->field_b
    //     0x8b6ef4: ldur            w3, [x2, #0xb]
    // 0x8b6ef8: DecompressPointer r3
    //     0x8b6ef8: add             x3, x3, HEAP, lsl #32
    // 0x8b6efc: LoadField: r2 = r3->field_27
    //     0x8b6efc: ldur            w2, [x3, #0x27]
    // 0x8b6f00: DecompressPointer r2
    //     0x8b6f00: add             x2, x2, HEAP, lsl #32
    // 0x8b6f04: LoadField: r3 = r2->field_b
    //     0x8b6f04: ldur            w3, [x2, #0xb]
    // 0x8b6f08: DecompressPointer r3
    //     0x8b6f08: add             x3, x3, HEAP, lsl #32
    // 0x8b6f0c: LoadField: r2 = r1->field_27
    //     0x8b6f0c: ldur            w2, [x1, #0x27]
    // 0x8b6f10: DecompressPointer r2
    //     0x8b6f10: add             x2, x2, HEAP, lsl #32
    // 0x8b6f14: LoadField: r1 = r2->field_b
    //     0x8b6f14: ldur            w1, [x2, #0xb]
    // 0x8b6f18: DecompressPointer r1
    //     0x8b6f18: add             x1, x1, HEAP, lsl #32
    // 0x8b6f1c: stp             x1, x3, [SP]
    // 0x8b6f20: r0 = ==()
    //     0x8b6f20: bl              #0xbb3e28  ; [package:flutter/src/services/text_editing.dart] TextSelection::==
    // 0x8b6f24: tbz             w0, #4, #0x8b6f64
    // 0x8b6f28: ldr             x0, [fp, #0x18]
    // 0x8b6f2c: LoadField: r1 = r0->field_3f
    //     0x8b6f2c: ldur            w1, [x0, #0x3f]
    // 0x8b6f30: DecompressPointer r1
    //     0x8b6f30: add             x1, x1, HEAP, lsl #32
    // 0x8b6f34: cmp             w1, NULL
    // 0x8b6f38: b.eq            #0x8b6f64
    // 0x8b6f3c: LoadField: r2 = r0->field_b
    //     0x8b6f3c: ldur            w2, [x0, #0xb]
    // 0x8b6f40: DecompressPointer r2
    //     0x8b6f40: add             x2, x2, HEAP, lsl #32
    // 0x8b6f44: cmp             w2, NULL
    // 0x8b6f48: b.eq            #0x8b7540
    // 0x8b6f4c: LoadField: r3 = r2->field_b
    //     0x8b6f4c: ldur            w3, [x2, #0xb]
    // 0x8b6f50: DecompressPointer r3
    //     0x8b6f50: add             x3, x3, HEAP, lsl #32
    // 0x8b6f54: LoadField: r2 = r3->field_27
    //     0x8b6f54: ldur            w2, [x3, #0x27]
    // 0x8b6f58: DecompressPointer r2
    //     0x8b6f58: add             x2, x2, HEAP, lsl #32
    // 0x8b6f5c: stp             x2, x1, [SP]
    // 0x8b6f60: r0 = update()
    //     0x8b6f60: bl              #0x5d2c78  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::update
    // 0x8b6f64: ldr             x0, [fp, #0x18]
    // 0x8b6f68: LoadField: r1 = r0->field_3f
    //     0x8b6f68: ldur            w1, [x0, #0x3f]
    // 0x8b6f6c: DecompressPointer r1
    //     0x8b6f6c: add             x1, x1, HEAP, lsl #32
    // 0x8b6f70: cmp             w1, NULL
    // 0x8b6f74: b.eq            #0x8b6fb0
    // 0x8b6f78: LoadField: r2 = r0->field_b
    //     0x8b6f78: ldur            w2, [x0, #0xb]
    // 0x8b6f7c: DecompressPointer r2
    //     0x8b6f7c: add             x2, x2, HEAP, lsl #32
    // 0x8b6f80: cmp             w2, NULL
    // 0x8b6f84: b.eq            #0x8b7544
    // 0x8b6f88: LoadField: r3 = r2->field_2f
    //     0x8b6f88: ldur            w3, [x2, #0x2f]
    // 0x8b6f8c: DecompressPointer r3
    //     0x8b6f8c: add             x3, x3, HEAP, lsl #32
    // 0x8b6f90: LoadField: r2 = r1->field_2f
    //     0x8b6f90: ldur            w2, [x1, #0x2f]
    // 0x8b6f94: DecompressPointer r2
    //     0x8b6f94: add             x2, x2, HEAP, lsl #32
    // 0x8b6f98: cmp             w2, w3
    // 0x8b6f9c: b.eq            #0x8b6fac
    // 0x8b6fa0: StoreField: r1->field_2f = r3
    //     0x8b6fa0: stur            w3, [x1, #0x2f]
    // 0x8b6fa4: str             x1, [SP]
    // 0x8b6fa8: r0 = _updateTextSelectionOverlayVisibilities()
    //     0x8b6fa8: bl              #0x5d2b34  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::_updateTextSelectionOverlayVisibilities
    // 0x8b6fac: ldr             x0, [fp, #0x18]
    // 0x8b6fb0: ldr             x1, [fp, #0x10]
    // 0x8b6fb4: LoadField: r2 = r0->field_b
    //     0x8b6fb4: ldur            w2, [x0, #0xb]
    // 0x8b6fb8: DecompressPointer r2
    //     0x8b6fb8: add             x2, x2, HEAP, lsl #32
    // 0x8b6fbc: cmp             w2, NULL
    // 0x8b6fc0: b.eq            #0x8b7548
    // 0x8b6fc4: LoadField: r3 = r2->field_f
    //     0x8b6fc4: ldur            w3, [x2, #0xf]
    // 0x8b6fc8: DecompressPointer r3
    //     0x8b6fc8: add             x3, x3, HEAP, lsl #32
    // 0x8b6fcc: LoadField: r2 = r1->field_f
    //     0x8b6fcc: ldur            w2, [x1, #0xf]
    // 0x8b6fd0: DecompressPointer r2
    //     0x8b6fd0: add             x2, x2, HEAP, lsl #32
    // 0x8b6fd4: stur            x2, [fp, #-0x10]
    // 0x8b6fd8: cmp             w3, w2
    // 0x8b6fdc: b.eq            #0x8b706c
    // 0x8b6fe0: r1 = 1
    //     0x8b6fe0: movz            x1, #0x1
    // 0x8b6fe4: r0 = AllocateContext()
    //     0x8b6fe4: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b6fe8: mov             x1, x0
    // 0x8b6fec: ldr             x0, [fp, #0x18]
    // 0x8b6ff0: StoreField: r1->field_f = r0
    //     0x8b6ff0: stur            w0, [x1, #0xf]
    // 0x8b6ff4: mov             x2, x1
    // 0x8b6ff8: r1 = Function '_handleFocusChanged@244183791':.
    //     0x8b6ff8: add             x1, PP, #0x41, lsl #12  ; [pp+0x41400] AnonymousClosure: (0x8b7774), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x8b77bc)
    //     0x8b6ffc: ldr             x1, [x1, #0x400]
    // 0x8b7000: r0 = AllocateClosure()
    //     0x8b7000: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b7004: ldur            x16, [fp, #-0x10]
    // 0x8b7008: stp             x0, x16, [SP]
    // 0x8b700c: r0 = removeListener()
    //     0x8b700c: bl              #0x86b820  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0x8b7010: ldr             x0, [fp, #0x18]
    // 0x8b7014: LoadField: r1 = r0->field_b
    //     0x8b7014: ldur            w1, [x0, #0xb]
    // 0x8b7018: DecompressPointer r1
    //     0x8b7018: add             x1, x1, HEAP, lsl #32
    // 0x8b701c: cmp             w1, NULL
    // 0x8b7020: b.eq            #0x8b754c
    // 0x8b7024: LoadField: r2 = r1->field_f
    //     0x8b7024: ldur            w2, [x1, #0xf]
    // 0x8b7028: DecompressPointer r2
    //     0x8b7028: add             x2, x2, HEAP, lsl #32
    // 0x8b702c: stur            x2, [fp, #-0x10]
    // 0x8b7030: r1 = 1
    //     0x8b7030: movz            x1, #0x1
    // 0x8b7034: r0 = AllocateContext()
    //     0x8b7034: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b7038: mov             x1, x0
    // 0x8b703c: ldr             x0, [fp, #0x18]
    // 0x8b7040: StoreField: r1->field_f = r0
    //     0x8b7040: stur            w0, [x1, #0xf]
    // 0x8b7044: mov             x2, x1
    // 0x8b7048: r1 = Function '_handleFocusChanged@244183791':.
    //     0x8b7048: add             x1, PP, #0x41, lsl #12  ; [pp+0x41400] AnonymousClosure: (0x8b7774), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x8b77bc)
    //     0x8b704c: ldr             x1, [x1, #0x400]
    // 0x8b7050: r0 = AllocateClosure()
    //     0x8b7050: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b7054: ldur            x16, [fp, #-0x10]
    // 0x8b7058: stp             x0, x16, [SP]
    // 0x8b705c: r0 = addListener()
    //     0x8b705c: bl              #0x85c1b4  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0x8b7060: ldr             x16, [fp, #0x18]
    // 0x8b7064: str             x16, [SP]
    // 0x8b7068: r0 = updateKeepAlive()
    //     0x8b7068: bl              #0x8b7608  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::updateKeepAlive
    // 0x8b706c: ldr             x0, [fp, #0x18]
    // 0x8b7070: ldr             x1, [fp, #0x10]
    // 0x8b7074: LoadField: r2 = r0->field_b
    //     0x8b7074: ldur            w2, [x0, #0xb]
    // 0x8b7078: DecompressPointer r2
    //     0x8b7078: add             x2, x2, HEAP, lsl #32
    // 0x8b707c: cmp             w2, NULL
    // 0x8b7080: b.eq            #0x8b7550
    // 0x8b7084: LoadField: r3 = r2->field_f3
    //     0x8b7084: ldur            w3, [x2, #0xf3]
    // 0x8b7088: DecompressPointer r3
    //     0x8b7088: add             x3, x3, HEAP, lsl #32
    // 0x8b708c: LoadField: r2 = r1->field_f3
    //     0x8b708c: ldur            w2, [x1, #0xf3]
    // 0x8b7090: DecompressPointer r2
    //     0x8b7090: add             x2, x2, HEAP, lsl #32
    // 0x8b7094: cmp             w3, w2
    // 0x8b7098: b.eq            #0x8b7128
    // 0x8b709c: cmp             w2, NULL
    // 0x8b70a0: b.ne            #0x8b70ac
    // 0x8b70a4: LoadField: r2 = r0->field_47
    //     0x8b70a4: ldur            w2, [x0, #0x47]
    // 0x8b70a8: DecompressPointer r2
    //     0x8b70a8: add             x2, x2, HEAP, lsl #32
    // 0x8b70ac: stur            x2, [fp, #-0x10]
    // 0x8b70b0: cmp             w2, NULL
    // 0x8b70b4: b.eq            #0x8b70ec
    // 0x8b70b8: r1 = 1
    //     0x8b70b8: movz            x1, #0x1
    // 0x8b70bc: r0 = AllocateContext()
    //     0x8b70bc: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b70c0: mov             x1, x0
    // 0x8b70c4: ldr             x0, [fp, #0x18]
    // 0x8b70c8: StoreField: r1->field_f = r0
    //     0x8b70c8: stur            w0, [x1, #0xf]
    // 0x8b70cc: mov             x2, x1
    // 0x8b70d0: r1 = Function '_onEditableScroll@244183791':.
    //     0x8b70d0: add             x1, PP, #0x41, lsl #12  ; [pp+0x41450] AnonymousClosure: (0x8b76d0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll (0x8b7718)
    //     0x8b70d4: ldr             x1, [x1, #0x450]
    // 0x8b70d8: r0 = AllocateClosure()
    //     0x8b70d8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b70dc: ldur            x16, [fp, #-0x10]
    // 0x8b70e0: stp             x0, x16, [SP]
    // 0x8b70e4: r0 = removeListener()
    //     0x8b70e4: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x8b70e8: ldr             x0, [fp, #0x18]
    // 0x8b70ec: str             x0, [SP]
    // 0x8b70f0: r0 = _scrollController()
    //     0x8b70f0: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x8b70f4: stur            x0, [fp, #-0x10]
    // 0x8b70f8: r1 = 1
    //     0x8b70f8: movz            x1, #0x1
    // 0x8b70fc: r0 = AllocateContext()
    //     0x8b70fc: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b7100: mov             x1, x0
    // 0x8b7104: ldr             x0, [fp, #0x18]
    // 0x8b7108: StoreField: r1->field_f = r0
    //     0x8b7108: stur            w0, [x1, #0xf]
    // 0x8b710c: mov             x2, x1
    // 0x8b7110: r1 = Function '_onEditableScroll@244183791':.
    //     0x8b7110: add             x1, PP, #0x41, lsl #12  ; [pp+0x41450] AnonymousClosure: (0x8b76d0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll (0x8b7718)
    //     0x8b7114: ldr             x1, [x1, #0x450]
    // 0x8b7118: r0 = AllocateClosure()
    //     0x8b7118: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b711c: ldur            x16, [fp, #-0x10]
    // 0x8b7120: stp             x0, x16, [SP]
    // 0x8b7124: r0 = addListener()
    //     0x8b7124: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x8b7128: ldr             x0, [fp, #0x18]
    // 0x8b712c: LoadField: r1 = r0->field_b
    //     0x8b712c: ldur            w1, [x0, #0xb]
    // 0x8b7130: DecompressPointer r1
    //     0x8b7130: add             x1, x1, HEAP, lsl #32
    // 0x8b7134: cmp             w1, NULL
    // 0x8b7138: b.eq            #0x8b7554
    // 0x8b713c: LoadField: r2 = r1->field_23
    //     0x8b713c: ldur            w2, [x1, #0x23]
    // 0x8b7140: DecompressPointer r2
    //     0x8b7140: add             x2, x2, HEAP, lsl #32
    // 0x8b7144: eor             x3, x2, #0x10
    // 0x8b7148: tbz             w3, #4, #0x8b7158
    // 0x8b714c: str             x0, [SP]
    // 0x8b7150: r0 = _closeInputConnectionIfNeeded()
    //     0x8b7150: bl              #0x8b7590  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_closeInputConnectionIfNeeded
    // 0x8b7154: b               #0x8b7270
    // 0x8b7158: ldr             x0, [fp, #0x10]
    // 0x8b715c: LoadField: r2 = r0->field_23
    //     0x8b715c: ldur            w2, [x0, #0x23]
    // 0x8b7160: DecompressPointer r2
    //     0x8b7160: add             x2, x2, HEAP, lsl #32
    // 0x8b7164: tbnz            w2, #4, #0x8b7270
    // 0x8b7168: LoadField: r2 = r1->field_f
    //     0x8b7168: ldur            w2, [x1, #0xf]
    // 0x8b716c: DecompressPointer r2
    //     0x8b716c: add             x2, x2, HEAP, lsl #32
    // 0x8b7170: str             x2, [SP]
    // 0x8b7174: r0 = hasFocus()
    //     0x8b7174: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x8b7178: tbnz            w0, #4, #0x8b7270
    // 0x8b717c: r0 = LoadStaticField(0x1474)
    //     0x8b717c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8b7180: ldr             x0, [x0, #0x28e8]
    // 0x8b7184: cmp             w0, NULL
    // 0x8b7188: b.eq            #0x8b7558
    // 0x8b718c: LoadField: r3 = r0->field_53
    //     0x8b718c: ldur            w3, [x0, #0x53]
    // 0x8b7190: DecompressPointer r3
    //     0x8b7190: add             x3, x3, HEAP, lsl #32
    // 0x8b7194: stur            x3, [fp, #-0x18]
    // 0x8b7198: LoadField: r0 = r3->field_7
    //     0x8b7198: ldur            w0, [x3, #7]
    // 0x8b719c: DecompressPointer r0
    //     0x8b719c: add             x0, x0, HEAP, lsl #32
    // 0x8b71a0: ldur            x2, [fp, #-8]
    // 0x8b71a4: stur            x0, [fp, #-0x10]
    // 0x8b71a8: r1 = Function '<anonymous closure>':.
    //     0x8b71a8: add             x1, PP, #0x41, lsl #12  ; [pp+0x41458] AnonymousClosure: (0x8b7684), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::didUpdateWidget (0x8b6d78)
    //     0x8b71ac: ldr             x1, [x1, #0x458]
    // 0x8b71b0: r0 = AllocateClosure()
    //     0x8b71b0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b71b4: ldur            x2, [fp, #-0x10]
    // 0x8b71b8: mov             x3, x0
    // 0x8b71bc: r1 = Null
    //     0x8b71bc: mov             x1, NULL
    // 0x8b71c0: stur            x3, [fp, #-8]
    // 0x8b71c4: cmp             w2, NULL
    // 0x8b71c8: b.eq            #0x8b71e8
    // 0x8b71cc: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8b71cc: ldur            w4, [x2, #0x17]
    // 0x8b71d0: DecompressPointer r4
    //     0x8b71d0: add             x4, x4, HEAP, lsl #32
    // 0x8b71d4: r8 = X0
    //     0x8b71d4: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x8b71d8: LoadField: r9 = r4->field_7
    //     0x8b71d8: ldur            x9, [x4, #7]
    // 0x8b71dc: r3 = Null
    //     0x8b71dc: add             x3, PP, #0x41, lsl #12  ; [pp+0x41460] Null
    //     0x8b71e0: ldr             x3, [x3, #0x460]
    // 0x8b71e4: blr             x9
    // 0x8b71e8: ldur            x0, [fp, #-0x18]
    // 0x8b71ec: LoadField: r1 = r0->field_b
    //     0x8b71ec: ldur            w1, [x0, #0xb]
    // 0x8b71f0: DecompressPointer r1
    //     0x8b71f0: add             x1, x1, HEAP, lsl #32
    // 0x8b71f4: stur            x1, [fp, #-0x10]
    // 0x8b71f8: LoadField: r2 = r0->field_f
    //     0x8b71f8: ldur            w2, [x0, #0xf]
    // 0x8b71fc: DecompressPointer r2
    //     0x8b71fc: add             x2, x2, HEAP, lsl #32
    // 0x8b7200: LoadField: r3 = r2->field_b
    //     0x8b7200: ldur            w3, [x2, #0xb]
    // 0x8b7204: DecompressPointer r3
    //     0x8b7204: add             x3, x3, HEAP, lsl #32
    // 0x8b7208: cmp             w1, w3
    // 0x8b720c: b.ne            #0x8b7218
    // 0x8b7210: str             x0, [SP]
    // 0x8b7214: r0 = _growToNextCapacity()
    //     0x8b7214: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x8b7218: ldur            x2, [fp, #-0x18]
    // 0x8b721c: ldur            x0, [fp, #-0x10]
    // 0x8b7220: r3 = LoadInt32Instr(r0)
    //     0x8b7220: sbfx            x3, x0, #1, #0x1f
    // 0x8b7224: add             x0, x3, #1
    // 0x8b7228: lsl             x1, x0, #1
    // 0x8b722c: StoreField: r2->field_b = r1
    //     0x8b722c: stur            w1, [x2, #0xb]
    // 0x8b7230: mov             x1, x3
    // 0x8b7234: cmp             x1, x0
    // 0x8b7238: b.hs            #0x8b755c
    // 0x8b723c: LoadField: r1 = r2->field_f
    //     0x8b723c: ldur            w1, [x2, #0xf]
    // 0x8b7240: DecompressPointer r1
    //     0x8b7240: add             x1, x1, HEAP, lsl #32
    // 0x8b7244: ldur            x0, [fp, #-8]
    // 0x8b7248: ArrayStore: r1[r3] = r0  ; List_4
    //     0x8b7248: add             x25, x1, x3, lsl #2
    //     0x8b724c: add             x25, x25, #0xf
    //     0x8b7250: str             w0, [x25]
    //     0x8b7254: tbz             w0, #0, #0x8b7270
    //     0x8b7258: ldurb           w16, [x1, #-1]
    //     0x8b725c: ldurb           w17, [x0, #-1]
    //     0x8b7260: and             x16, x17, x16, lsr #2
    //     0x8b7264: tst             x16, HEAP, lsr #32
    //     0x8b7268: b.eq            #0x8b7270
    //     0x8b726c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x8b7270: ldr             x16, [fp, #0x18]
    // 0x8b7274: str             x16, [SP]
    // 0x8b7278: r0 = _hasInputConnection()
    //     0x8b7278: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x8b727c: tbnz            w0, #4, #0x8b7298
    // 0x8b7280: ldr             x0, [fp, #0x18]
    // 0x8b7284: LoadField: r1 = r0->field_b
    //     0x8b7284: ldur            w1, [x0, #0xb]
    // 0x8b7288: DecompressPointer r1
    //     0x8b7288: add             x1, x1, HEAP, lsl #32
    // 0x8b728c: cmp             w1, NULL
    // 0x8b7290: b.eq            #0x8b7560
    // 0x8b7294: b               #0x8b729c
    // 0x8b7298: ldr             x0, [fp, #0x18]
    // 0x8b729c: ldr             x1, [fp, #0x10]
    // 0x8b72a0: LoadField: r2 = r0->field_b
    //     0x8b72a0: ldur            w2, [x0, #0xb]
    // 0x8b72a4: DecompressPointer r2
    //     0x8b72a4: add             x2, x2, HEAP, lsl #32
    // 0x8b72a8: cmp             w2, NULL
    // 0x8b72ac: b.eq            #0x8b7564
    // 0x8b72b0: LoadField: r3 = r2->field_47
    //     0x8b72b0: ldur            w3, [x2, #0x47]
    // 0x8b72b4: DecompressPointer r3
    //     0x8b72b4: add             x3, x3, HEAP, lsl #32
    // 0x8b72b8: LoadField: r2 = r1->field_47
    //     0x8b72b8: ldur            w2, [x1, #0x47]
    // 0x8b72bc: DecompressPointer r2
    //     0x8b72bc: add             x2, x2, HEAP, lsl #32
    // 0x8b72c0: stp             x2, x3, [SP]
    // 0x8b72c4: r0 = ==()
    //     0x8b72c4: bl              #0xbcbd38  ; [package:flutter/src/painting/text_style.dart] TextStyle::==
    // 0x8b72c8: tbz             w0, #4, #0x8b7414
    // 0x8b72cc: ldr             x0, [fp, #0x18]
    // 0x8b72d0: LoadField: r1 = r0->field_f
    //     0x8b72d0: ldur            w1, [x0, #0xf]
    // 0x8b72d4: DecompressPointer r1
    //     0x8b72d4: add             x1, x1, HEAP, lsl #32
    // 0x8b72d8: cmp             w1, NULL
    // 0x8b72dc: b.eq            #0x8b7568
    // 0x8b72e0: str             x1, [SP]
    // 0x8b72e4: r0 = boldTextOf()
    //     0x8b72e4: bl              #0x8734f0  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::boldTextOf
    // 0x8b72e8: tbnz            w0, #4, #0x8b7320
    // 0x8b72ec: ldr             x0, [fp, #0x18]
    // 0x8b72f0: LoadField: r1 = r0->field_b
    //     0x8b72f0: ldur            w1, [x0, #0xb]
    // 0x8b72f4: DecompressPointer r1
    //     0x8b72f4: add             x1, x1, HEAP, lsl #32
    // 0x8b72f8: cmp             w1, NULL
    // 0x8b72fc: b.eq            #0x8b756c
    // 0x8b7300: LoadField: r2 = r1->field_47
    //     0x8b7300: ldur            w2, [x1, #0x47]
    // 0x8b7304: DecompressPointer r2
    //     0x8b7304: add             x2, x2, HEAP, lsl #32
    // 0x8b7308: r16 = Instance_TextStyle
    //     0x8b7308: add             x16, PP, #0x1e, lsl #12  ; [pp+0x1eaa8] Obj!TextStyle@c35e51
    //     0x8b730c: ldr             x16, [x16, #0xaa8]
    // 0x8b7310: stp             x16, x2, [SP]
    // 0x8b7314: r0 = merge()
    //     0x8b7314: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x8b7318: ldr             x1, [fp, #0x18]
    // 0x8b731c: b               #0x8b7340
    // 0x8b7320: ldr             x1, [fp, #0x18]
    // 0x8b7324: LoadField: r0 = r1->field_b
    //     0x8b7324: ldur            w0, [x1, #0xb]
    // 0x8b7328: DecompressPointer r0
    //     0x8b7328: add             x0, x0, HEAP, lsl #32
    // 0x8b732c: cmp             w0, NULL
    // 0x8b7330: b.eq            #0x8b7570
    // 0x8b7334: LoadField: r2 = r0->field_47
    //     0x8b7334: ldur            w2, [x0, #0x47]
    // 0x8b7338: DecompressPointer r2
    //     0x8b7338: add             x2, x2, HEAP, lsl #32
    // 0x8b733c: mov             x0, x2
    // 0x8b7340: StoreField: r1->field_63 = r0
    //     0x8b7340: stur            w0, [x1, #0x63]
    //     0x8b7344: ldurb           w16, [x1, #-1]
    //     0x8b7348: ldurb           w17, [x0, #-1]
    //     0x8b734c: and             x16, x17, x16, lsr #2
    //     0x8b7350: tst             x16, HEAP, lsr #32
    //     0x8b7354: b.eq            #0x8b735c
    //     0x8b7358: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8b735c: str             x1, [SP]
    // 0x8b7360: r0 = _hasInputConnection()
    //     0x8b7360: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x8b7364: tbnz            w0, #4, #0x8b7414
    // 0x8b7368: ldr             x0, [fp, #0x18]
    // 0x8b736c: LoadField: r1 = r0->field_3b
    //     0x8b736c: ldur            w1, [x0, #0x3b]
    // 0x8b7370: DecompressPointer r1
    //     0x8b7370: add             x1, x1, HEAP, lsl #32
    // 0x8b7374: stur            x1, [fp, #-0x20]
    // 0x8b7378: cmp             w1, NULL
    // 0x8b737c: b.eq            #0x8b7574
    // 0x8b7380: LoadField: r2 = r0->field_63
    //     0x8b7380: ldur            w2, [x0, #0x63]
    // 0x8b7384: DecompressPointer r2
    //     0x8b7384: add             x2, x2, HEAP, lsl #32
    // 0x8b7388: LoadField: r3 = r2->field_13
    //     0x8b7388: ldur            w3, [x2, #0x13]
    // 0x8b738c: DecompressPointer r3
    //     0x8b738c: add             x3, x3, HEAP, lsl #32
    // 0x8b7390: stur            x3, [fp, #-0x18]
    // 0x8b7394: LoadField: r4 = r2->field_1f
    //     0x8b7394: ldur            w4, [x2, #0x1f]
    // 0x8b7398: DecompressPointer r4
    //     0x8b7398: add             x4, x4, HEAP, lsl #32
    // 0x8b739c: stur            x4, [fp, #-0x10]
    // 0x8b73a0: LoadField: r5 = r2->field_23
    //     0x8b73a0: ldur            w5, [x2, #0x23]
    // 0x8b73a4: DecompressPointer r5
    //     0x8b73a4: add             x5, x5, HEAP, lsl #32
    // 0x8b73a8: stur            x5, [fp, #-8]
    // 0x8b73ac: LoadField: r2 = r0->field_b
    //     0x8b73ac: ldur            w2, [x0, #0xb]
    // 0x8b73b0: DecompressPointer r2
    //     0x8b73b0: add             x2, x2, HEAP, lsl #32
    // 0x8b73b4: cmp             w2, NULL
    // 0x8b73b8: b.eq            #0x8b7578
    // 0x8b73bc: LoadField: r2 = r0->field_f
    //     0x8b73bc: ldur            w2, [x0, #0xf]
    // 0x8b73c0: DecompressPointer r2
    //     0x8b73c0: add             x2, x2, HEAP, lsl #32
    // 0x8b73c4: cmp             w2, NULL
    // 0x8b73c8: b.eq            #0x8b757c
    // 0x8b73cc: str             x2, [SP]
    // 0x8b73d0: r0 = of()
    //     0x8b73d0: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x8b73d4: mov             x1, x0
    // 0x8b73d8: ldr             x0, [fp, #0x18]
    // 0x8b73dc: LoadField: r2 = r0->field_b
    //     0x8b73dc: ldur            w2, [x0, #0xb]
    // 0x8b73e0: DecompressPointer r2
    //     0x8b73e0: add             x2, x2, HEAP, lsl #32
    // 0x8b73e4: cmp             w2, NULL
    // 0x8b73e8: b.eq            #0x8b7580
    // 0x8b73ec: LoadField: r3 = r2->field_53
    //     0x8b73ec: ldur            w3, [x2, #0x53]
    // 0x8b73f0: DecompressPointer r3
    //     0x8b73f0: add             x3, x3, HEAP, lsl #32
    // 0x8b73f4: ldur            x16, [fp, #-0x20]
    // 0x8b73f8: ldur            lr, [fp, #-0x18]
    // 0x8b73fc: stp             lr, x16, [SP, #0x20]
    // 0x8b7400: ldur            x16, [fp, #-0x10]
    // 0x8b7404: ldur            lr, [fp, #-8]
    // 0x8b7408: stp             lr, x16, [SP, #0x10]
    // 0x8b740c: stp             x1, x3, [SP]
    // 0x8b7410: r0 = setStyle()
    //     0x8b7410: bl              #0x5d9b2c  ; [package:flutter/src/services/text_input.dart] TextInputConnection::setStyle
    // 0x8b7414: ldr             x0, [fp, #0x18]
    // 0x8b7418: ldr             x1, [fp, #0x10]
    // 0x8b741c: LoadField: r2 = r0->field_b
    //     0x8b741c: ldur            w2, [x0, #0xb]
    // 0x8b7420: DecompressPointer r2
    //     0x8b7420: add             x2, x2, HEAP, lsl #32
    // 0x8b7424: cmp             w2, NULL
    // 0x8b7428: b.eq            #0x8b7584
    // 0x8b742c: LoadField: r3 = r2->field_33
    //     0x8b742c: ldur            w3, [x2, #0x33]
    // 0x8b7430: DecompressPointer r3
    //     0x8b7430: add             x3, x3, HEAP, lsl #32
    // 0x8b7434: LoadField: r2 = r1->field_33
    //     0x8b7434: ldur            w2, [x1, #0x33]
    // 0x8b7438: DecompressPointer r2
    //     0x8b7438: add             x2, x2, HEAP, lsl #32
    // 0x8b743c: cmp             w3, w2
    // 0x8b7440: b.eq            #0x8b744c
    // 0x8b7444: str             x0, [SP]
    // 0x8b7448: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x8b7448: bl              #0x69ec94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x8b744c: ldr             x0, [fp, #0x18]
    // 0x8b7450: LoadField: r1 = r0->field_b
    //     0x8b7450: ldur            w1, [x0, #0xb]
    // 0x8b7454: DecompressPointer r1
    //     0x8b7454: add             x1, x1, HEAP, lsl #32
    // 0x8b7458: cmp             w1, NULL
    // 0x8b745c: b.eq            #0x8b7588
    // 0x8b7460: LoadField: r2 = r1->field_8b
    //     0x8b7460: ldur            w2, [x1, #0x8b]
    // 0x8b7464: DecompressPointer r2
    //     0x8b7464: add             x2, x2, HEAP, lsl #32
    // 0x8b7468: r1 = LoadClassIdInstr(r2)
    //     0x8b7468: ldur            x1, [x2, #-1]
    //     0x8b746c: ubfx            x1, x1, #0xc, #0x14
    // 0x8b7470: lsl             x1, x1, #1
    // 0x8b7474: r3 = LoadInt32Instr(r1)
    //     0x8b7474: sbfx            x3, x1, #1, #0x1f
    // 0x8b7478: r17 = 4411
    //     0x8b7478: movz            x17, #0x113b
    // 0x8b747c: cmp             x3, x17
    // 0x8b7480: b.lt            #0x8b74a0
    // 0x8b7484: r17 = 4421
    //     0x8b7484: movz            x17, #0x1145
    // 0x8b7488: cmp             x3, x17
    // 0x8b748c: b.gt            #0x8b74a0
    // 0x8b7490: str             x0, [SP]
    // 0x8b7494: r0 = pasteEnabled()
    //     0x8b7494: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x8b7498: mov             x1, x0
    // 0x8b749c: b               #0x8b74dc
    // 0x8b74a0: cmp             w2, NULL
    // 0x8b74a4: b.ne            #0x8b74b0
    // 0x8b74a8: r0 = Null
    //     0x8b74a8: mov             x0, NULL
    // 0x8b74ac: b               #0x8b74cc
    // 0x8b74b0: r0 = LoadClassIdInstr(r2)
    //     0x8b74b0: ldur            x0, [x2, #-1]
    //     0x8b74b4: ubfx            x0, x0, #0xc, #0x14
    // 0x8b74b8: str             x2, [SP]
    // 0x8b74bc: r0 = GDT[cid_x0 + 0x4c]()
    //     0x8b74bc: add             lr, x0, #0x4c
    //     0x8b74c0: ldr             lr, [x21, lr, lsl #3]
    //     0x8b74c4: blr             lr
    // 0x8b74c8: r0 = false
    //     0x8b74c8: add             x0, NULL, #0x30  ; false
    // 0x8b74cc: cmp             w0, NULL
    // 0x8b74d0: b.ne            #0x8b74d8
    // 0x8b74d4: r0 = false
    //     0x8b74d4: add             x0, NULL, #0x30  ; false
    // 0x8b74d8: mov             x1, x0
    // 0x8b74dc: ldr             x0, [fp, #0x18]
    // 0x8b74e0: stur            x1, [fp, #-8]
    // 0x8b74e4: LoadField: r2 = r0->field_b
    //     0x8b74e4: ldur            w2, [x0, #0xb]
    // 0x8b74e8: DecompressPointer r2
    //     0x8b74e8: add             x2, x2, HEAP, lsl #32
    // 0x8b74ec: cmp             w2, NULL
    // 0x8b74f0: b.eq            #0x8b758c
    // 0x8b74f4: str             x0, [SP]
    // 0x8b74f8: r0 = pasteEnabled()
    //     0x8b74f8: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x8b74fc: tbnz            w0, #4, #0x8b751c
    // 0x8b7500: ldur            x0, [fp, #-8]
    // 0x8b7504: tbnz            w0, #4, #0x8b751c
    // 0x8b7508: ldr             x0, [fp, #0x18]
    // 0x8b750c: LoadField: r1 = r0->field_33
    //     0x8b750c: ldur            w1, [x0, #0x33]
    // 0x8b7510: DecompressPointer r1
    //     0x8b7510: add             x1, x1, HEAP, lsl #32
    // 0x8b7514: str             x1, [SP]
    // 0x8b7518: r0 = update()
    //     0x8b7518: bl              #0x5cc818  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::update
    // 0x8b751c: r0 = Null
    //     0x8b751c: mov             x0, NULL
    // 0x8b7520: LeaveFrame
    //     0x8b7520: mov             SP, fp
    //     0x8b7524: ldp             fp, lr, [SP], #0x10
    // 0x8b7528: ret
    //     0x8b7528: ret             
    // 0x8b752c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b752c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7530: b               #0x8b6d90
    // 0x8b7534: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7534: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7538: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7538: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b753c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b753c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7540: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7540: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7544: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7544: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7548: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7548: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b754c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b754c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7550: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7550: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7554: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7554: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7558: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7558: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b755c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8b755c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8b7560: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7560: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7564: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7564: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7568: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7568: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b756c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b756c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7570: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7570: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7574: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7574: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7578: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7578: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b757c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b757c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7580: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7580: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7584: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7584: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7588: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7588: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b758c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b758c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _closeInputConnectionIfNeeded(/* No info */) {
    // ** addr: 0x8b7590, size: 0x78
    // 0x8b7590: EnterFrame
    //     0x8b7590: stp             fp, lr, [SP, #-0x10]!
    //     0x8b7594: mov             fp, SP
    // 0x8b7598: AllocStack(0x8)
    //     0x8b7598: sub             SP, SP, #8
    // 0x8b759c: CheckStackOverflow
    //     0x8b759c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b75a0: cmp             SP, x16
    //     0x8b75a4: b.ls            #0x8b75fc
    // 0x8b75a8: ldr             x16, [fp, #0x10]
    // 0x8b75ac: str             x16, [SP]
    // 0x8b75b0: r0 = _hasInputConnection()
    //     0x8b75b0: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x8b75b4: tbnz            w0, #4, #0x8b75ec
    // 0x8b75b8: ldr             x0, [fp, #0x10]
    // 0x8b75bc: LoadField: r1 = r0->field_3b
    //     0x8b75bc: ldur            w1, [x0, #0x3b]
    // 0x8b75c0: DecompressPointer r1
    //     0x8b75c0: add             x1, x1, HEAP, lsl #32
    // 0x8b75c4: cmp             w1, NULL
    // 0x8b75c8: b.eq            #0x8b7604
    // 0x8b75cc: str             x1, [SP]
    // 0x8b75d0: r0 = close()
    //     0x8b75d0: bl              #0x5dd168  ; [package:flutter/src/services/text_input.dart] TextInputConnection::close
    // 0x8b75d4: ldr             x0, [fp, #0x10]
    // 0x8b75d8: StoreField: r0->field_3b = rNULL
    //     0x8b75d8: stur            NULL, [x0, #0x3b]
    // 0x8b75dc: StoreField: r0->field_73 = rNULL
    //     0x8b75dc: stur            NULL, [x0, #0x73]
    // 0x8b75e0: StoreField: r0->field_a3 = rNULL
    //     0x8b75e0: stur            NULL, [x0, #0xa3]
    // 0x8b75e4: str             x0, [SP]
    // 0x8b75e8: r0 = removeTextPlaceholder()
    //     0x8b75e8: bl              #0x5c712c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::removeTextPlaceholder
    // 0x8b75ec: r0 = Null
    //     0x8b75ec: mov             x0, NULL
    // 0x8b75f0: LeaveFrame
    //     0x8b75f0: mov             SP, fp
    //     0x8b75f4: ldp             fp, lr, [SP], #0x10
    // 0x8b75f8: ret
    //     0x8b75f8: ret             
    // 0x8b75fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b75fc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7600: b               #0x8b75a8
    // 0x8b7604: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7604: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x8b7684, size: 0x4c
    // 0x8b7684: EnterFrame
    //     0x8b7684: stp             fp, lr, [SP, #-0x10]!
    //     0x8b7688: mov             fp, SP
    // 0x8b768c: AllocStack(0x8)
    //     0x8b768c: sub             SP, SP, #8
    // 0x8b7690: SetupParameters()
    //     0x8b7690: ldr             x0, [fp, #0x18]
    //     0x8b7694: ldur            w1, [x0, #0x17]
    //     0x8b7698: add             x1, x1, HEAP, lsl #32
    // 0x8b769c: CheckStackOverflow
    //     0x8b769c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b76a0: cmp             SP, x16
    //     0x8b76a4: b.ls            #0x8b76c8
    // 0x8b76a8: LoadField: r0 = r1->field_f
    //     0x8b76a8: ldur            w0, [x1, #0xf]
    // 0x8b76ac: DecompressPointer r0
    //     0x8b76ac: add             x0, x0, HEAP, lsl #32
    // 0x8b76b0: str             x0, [SP]
    // 0x8b76b4: r0 = _openInputConnection()
    //     0x8b76b4: bl              #0x5d9568  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x8b76b8: r0 = Null
    //     0x8b76b8: mov             x0, NULL
    // 0x8b76bc: LeaveFrame
    //     0x8b76bc: mov             SP, fp
    //     0x8b76c0: ldp             fp, lr, [SP], #0x10
    // 0x8b76c4: ret
    //     0x8b76c4: ret             
    // 0x8b76c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b76c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b76cc: b               #0x8b76a8
  }
  [closure] void _onEditableScroll(dynamic) {
    // ** addr: 0x8b76d0, size: 0x48
    // 0x8b76d0: EnterFrame
    //     0x8b76d0: stp             fp, lr, [SP, #-0x10]!
    //     0x8b76d4: mov             fp, SP
    // 0x8b76d8: AllocStack(0x8)
    //     0x8b76d8: sub             SP, SP, #8
    // 0x8b76dc: SetupParameters()
    //     0x8b76dc: ldr             x0, [fp, #0x10]
    //     0x8b76e0: ldur            w1, [x0, #0x17]
    //     0x8b76e4: add             x1, x1, HEAP, lsl #32
    // 0x8b76e8: CheckStackOverflow
    //     0x8b76e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b76ec: cmp             SP, x16
    //     0x8b76f0: b.ls            #0x8b7710
    // 0x8b76f4: LoadField: r0 = r1->field_f
    //     0x8b76f4: ldur            w0, [x1, #0xf]
    // 0x8b76f8: DecompressPointer r0
    //     0x8b76f8: add             x0, x0, HEAP, lsl #32
    // 0x8b76fc: str             x0, [SP]
    // 0x8b7700: r0 = _onEditableScroll()
    //     0x8b7700: bl              #0x8b7718  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll
    // 0x8b7704: LeaveFrame
    //     0x8b7704: mov             SP, fp
    //     0x8b7708: ldp             fp, lr, [SP], #0x10
    // 0x8b770c: ret
    //     0x8b770c: ret             
    // 0x8b7710: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b7710: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7714: b               #0x8b76f4
  }
  _ _onEditableScroll(/* No info */) {
    // ** addr: 0x8b7718, size: 0x5c
    // 0x8b7718: EnterFrame
    //     0x8b7718: stp             fp, lr, [SP, #-0x10]!
    //     0x8b771c: mov             fp, SP
    // 0x8b7720: AllocStack(0x8)
    //     0x8b7720: sub             SP, SP, #8
    // 0x8b7724: CheckStackOverflow
    //     0x8b7724: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b7728: cmp             SP, x16
    //     0x8b772c: b.ls            #0x8b776c
    // 0x8b7730: ldr             x0, [fp, #0x10]
    // 0x8b7734: LoadField: r1 = r0->field_3f
    //     0x8b7734: ldur            w1, [x0, #0x3f]
    // 0x8b7738: DecompressPointer r1
    //     0x8b7738: add             x1, x1, HEAP, lsl #32
    // 0x8b773c: cmp             w1, NULL
    // 0x8b7740: b.ne            #0x8b774c
    // 0x8b7744: mov             x1, x0
    // 0x8b7748: b               #0x8b7758
    // 0x8b774c: str             x1, [SP]
    // 0x8b7750: r0 = updateForScroll()
    //     0x8b7750: bl              #0x83bc74  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateForScroll
    // 0x8b7754: ldr             x1, [fp, #0x10]
    // 0x8b7758: StoreField: r1->field_a3 = rNULL
    //     0x8b7758: stur            NULL, [x1, #0xa3]
    // 0x8b775c: r0 = Null
    //     0x8b775c: mov             x0, NULL
    // 0x8b7760: LeaveFrame
    //     0x8b7760: mov             SP, fp
    //     0x8b7764: ldp             fp, lr, [SP], #0x10
    // 0x8b7768: ret
    //     0x8b7768: ret             
    // 0x8b776c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b776c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7770: b               #0x8b7730
  }
  [closure] void _handleFocusChanged(dynamic) {
    // ** addr: 0x8b7774, size: 0x48
    // 0x8b7774: EnterFrame
    //     0x8b7774: stp             fp, lr, [SP, #-0x10]!
    //     0x8b7778: mov             fp, SP
    // 0x8b777c: AllocStack(0x8)
    //     0x8b777c: sub             SP, SP, #8
    // 0x8b7780: SetupParameters()
    //     0x8b7780: ldr             x0, [fp, #0x10]
    //     0x8b7784: ldur            w1, [x0, #0x17]
    //     0x8b7788: add             x1, x1, HEAP, lsl #32
    // 0x8b778c: CheckStackOverflow
    //     0x8b778c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b7790: cmp             SP, x16
    //     0x8b7794: b.ls            #0x8b77b4
    // 0x8b7798: LoadField: r0 = r1->field_f
    //     0x8b7798: ldur            w0, [x1, #0xf]
    // 0x8b779c: DecompressPointer r0
    //     0x8b779c: add             x0, x0, HEAP, lsl #32
    // 0x8b77a0: str             x0, [SP]
    // 0x8b77a4: r0 = _handleFocusChanged()
    //     0x8b77a4: bl              #0x8b77bc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged
    // 0x8b77a8: LeaveFrame
    //     0x8b77a8: mov             SP, fp
    //     0x8b77ac: ldp             fp, lr, [SP], #0x10
    // 0x8b77b0: ret
    //     0x8b77b0: ret             
    // 0x8b77b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b77b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b77b8: b               #0x8b7798
  }
  _ _handleFocusChanged(/* No info */) {
    // ** addr: 0x8b77bc, size: 0x2c8
    // 0x8b77bc: EnterFrame
    //     0x8b77bc: stp             fp, lr, [SP, #-0x10]!
    //     0x8b77c0: mov             fp, SP
    // 0x8b77c4: AllocStack(0x30)
    //     0x8b77c4: sub             SP, SP, #0x30
    // 0x8b77c8: CheckStackOverflow
    //     0x8b77c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b77cc: cmp             SP, x16
    //     0x8b77d0: b.ls            #0x8b7a48
    // 0x8b77d4: r1 = 1
    //     0x8b77d4: movz            x1, #0x1
    // 0x8b77d8: r0 = AllocateContext()
    //     0x8b77d8: bl              #0xc5def4  ; AllocateContextStub
    // 0x8b77dc: mov             x1, x0
    // 0x8b77e0: ldr             x0, [fp, #0x10]
    // 0x8b77e4: stur            x1, [fp, #-8]
    // 0x8b77e8: StoreField: r1->field_f = r0
    //     0x8b77e8: stur            w0, [x1, #0xf]
    // 0x8b77ec: str             x0, [SP]
    // 0x8b77f0: r0 = _openOrCloseInputConnectionIfNeeded()
    //     0x8b77f0: bl              #0x8b7a84  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openOrCloseInputConnectionIfNeeded
    // 0x8b77f4: ldr             x16, [fp, #0x10]
    // 0x8b77f8: str             x16, [SP]
    // 0x8b77fc: r0 = _startOrStopCursorTimerIfNeeded()
    //     0x8b77fc: bl              #0x69ec94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_startOrStopCursorTimerIfNeeded
    // 0x8b7800: ldr             x16, [fp, #0x10]
    // 0x8b7804: str             x16, [SP]
    // 0x8b7808: r0 = _updateOrDisposeSelectionOverlayIfNeeded()
    //     0x8b7808: bl              #0x69ea94  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateOrDisposeSelectionOverlayIfNeeded
    // 0x8b780c: ldr             x0, [fp, #0x10]
    // 0x8b7810: LoadField: r1 = r0->field_b
    //     0x8b7810: ldur            w1, [x0, #0xb]
    // 0x8b7814: DecompressPointer r1
    //     0x8b7814: add             x1, x1, HEAP, lsl #32
    // 0x8b7818: cmp             w1, NULL
    // 0x8b781c: b.eq            #0x8b7a50
    // 0x8b7820: LoadField: r2 = r1->field_f
    //     0x8b7820: ldur            w2, [x1, #0xf]
    // 0x8b7824: DecompressPointer r2
    //     0x8b7824: add             x2, x2, HEAP, lsl #32
    // 0x8b7828: str             x2, [SP]
    // 0x8b782c: r0 = hasFocus()
    //     0x8b782c: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x8b7830: tbnz            w0, #4, #0x8b79f4
    // 0x8b7834: r0 = LoadStaticField(0xc34)
    //     0x8b7834: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8b7838: ldr             x0, [x0, #0x1868]
    // 0x8b783c: cmp             w0, NULL
    // 0x8b7840: b.eq            #0x8b7a54
    // 0x8b7844: LoadField: r1 = r0->field_db
    //     0x8b7844: ldur            w1, [x0, #0xdb]
    // 0x8b7848: DecompressPointer r1
    //     0x8b7848: add             x1, x1, HEAP, lsl #32
    // 0x8b784c: stur            x1, [fp, #-0x18]
    // 0x8b7850: LoadField: r0 = r1->field_b
    //     0x8b7850: ldur            w0, [x1, #0xb]
    // 0x8b7854: DecompressPointer r0
    //     0x8b7854: add             x0, x0, HEAP, lsl #32
    // 0x8b7858: stur            x0, [fp, #-0x10]
    // 0x8b785c: LoadField: r2 = r1->field_f
    //     0x8b785c: ldur            w2, [x1, #0xf]
    // 0x8b7860: DecompressPointer r2
    //     0x8b7860: add             x2, x2, HEAP, lsl #32
    // 0x8b7864: LoadField: r3 = r2->field_b
    //     0x8b7864: ldur            w3, [x2, #0xb]
    // 0x8b7868: DecompressPointer r3
    //     0x8b7868: add             x3, x3, HEAP, lsl #32
    // 0x8b786c: cmp             w0, w3
    // 0x8b7870: b.ne            #0x8b787c
    // 0x8b7874: str             x1, [SP]
    // 0x8b7878: r0 = _growToNextCapacity()
    //     0x8b7878: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x8b787c: ldr             x3, [fp, #0x10]
    // 0x8b7880: ldur            x2, [fp, #-0x18]
    // 0x8b7884: ldur            x0, [fp, #-0x10]
    // 0x8b7888: r4 = LoadInt32Instr(r0)
    //     0x8b7888: sbfx            x4, x0, #1, #0x1f
    // 0x8b788c: add             x0, x4, #1
    // 0x8b7890: lsl             x1, x0, #1
    // 0x8b7894: StoreField: r2->field_b = r1
    //     0x8b7894: stur            w1, [x2, #0xb]
    // 0x8b7898: mov             x1, x4
    // 0x8b789c: cmp             x1, x0
    // 0x8b78a0: b.hs            #0x8b7a58
    // 0x8b78a4: LoadField: r1 = r2->field_f
    //     0x8b78a4: ldur            w1, [x2, #0xf]
    // 0x8b78a8: DecompressPointer r1
    //     0x8b78a8: add             x1, x1, HEAP, lsl #32
    // 0x8b78ac: mov             x0, x3
    // 0x8b78b0: ArrayStore: r1[r4] = r0  ; List_4
    //     0x8b78b0: add             x25, x1, x4, lsl #2
    //     0x8b78b4: add             x25, x25, #0xf
    //     0x8b78b8: str             w0, [x25]
    //     0x8b78bc: tbz             w0, #0, #0x8b78d8
    //     0x8b78c0: ldurb           w16, [x1, #-1]
    //     0x8b78c4: ldurb           w17, [x0, #-1]
    //     0x8b78c8: and             x16, x17, x16, lsr #2
    //     0x8b78cc: tst             x16, HEAP, lsr #32
    //     0x8b78d0: b.eq            #0x8b78d8
    //     0x8b78d4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x8b78d8: LoadField: r0 = r3->field_f
    //     0x8b78d8: ldur            w0, [x3, #0xf]
    // 0x8b78dc: DecompressPointer r0
    //     0x8b78dc: add             x0, x0, HEAP, lsl #32
    // 0x8b78e0: cmp             w0, NULL
    // 0x8b78e4: b.eq            #0x8b7a5c
    // 0x8b78e8: str             x0, [SP]
    // 0x8b78ec: r0 = of()
    //     0x8b78ec: bl              #0x5e69ec  ; [package:flutter/src/widgets/view.dart] View::of
    // 0x8b78f0: LoadField: r1 = r0->field_f
    //     0x8b78f0: ldur            w1, [x0, #0xf]
    // 0x8b78f4: DecompressPointer r1
    //     0x8b78f4: add             x1, x1, HEAP, lsl #32
    // 0x8b78f8: LoadField: r2 = r1->field_1b
    //     0x8b78f8: ldur            w2, [x1, #0x1b]
    // 0x8b78fc: DecompressPointer r2
    //     0x8b78fc: add             x2, x2, HEAP, lsl #32
    // 0x8b7900: stur            x2, [fp, #-0x10]
    // 0x8b7904: LoadField: r3 = r0->field_7
    //     0x8b7904: ldur            x3, [x0, #7]
    // 0x8b7908: r0 = BoxInt64Instr(r3)
    //     0x8b7908: sbfiz           x0, x3, #1, #0x1f
    //     0x8b790c: cmp             x3, x0, asr #1
    //     0x8b7910: b.eq            #0x8b791c
    //     0x8b7914: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x8b7918: stur            x3, [x0, #7]
    // 0x8b791c: stp             x0, x2, [SP]
    // 0x8b7920: r0 = _getValueOrData()
    //     0x8b7920: bl              #0xc5a358  ; [dart:collection] __Map&_HashVMBase&MapMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashMapMixin::_getValueOrData
    // 0x8b7924: mov             x1, x0
    // 0x8b7928: ldur            x0, [fp, #-0x10]
    // 0x8b792c: LoadField: r2 = r0->field_f
    //     0x8b792c: ldur            w2, [x0, #0xf]
    // 0x8b7930: DecompressPointer r2
    //     0x8b7930: add             x2, x2, HEAP, lsl #32
    // 0x8b7934: cmp             w2, w1
    // 0x8b7938: b.ne            #0x8b7944
    // 0x8b793c: r0 = Null
    //     0x8b793c: mov             x0, NULL
    // 0x8b7940: b               #0x8b7948
    // 0x8b7944: mov             x0, x1
    // 0x8b7948: ldr             x1, [fp, #0x10]
    // 0x8b794c: cmp             w0, NULL
    // 0x8b7950: b.eq            #0x8b7a60
    // 0x8b7954: LoadField: r2 = r0->field_23
    //     0x8b7954: ldur            w2, [x0, #0x23]
    // 0x8b7958: DecompressPointer r2
    //     0x8b7958: add             x2, x2, HEAP, lsl #32
    // 0x8b795c: LoadField: d0 = r2->field_1f
    //     0x8b795c: ldur            d0, [x2, #0x1f]
    // 0x8b7960: r0 = inline_Allocate_Double()
    //     0x8b7960: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x8b7964: add             x0, x0, #0x10
    //     0x8b7968: cmp             x2, x0
    //     0x8b796c: b.ls            #0x8b7a64
    //     0x8b7970: str             x0, [THR, #0x50]  ; THR::top
    //     0x8b7974: sub             x0, x0, #0xf
    //     0x8b7978: movz            x2, #0xd148
    //     0x8b797c: movk            x2, #0x3, lsl #16
    //     0x8b7980: stur            x2, [x0, #-1]
    // 0x8b7984: StoreField: r0->field_7 = d0
    //     0x8b7984: stur            d0, [x0, #7]
    // 0x8b7988: StoreField: r1->field_97 = r0
    //     0x8b7988: stur            w0, [x1, #0x97]
    //     0x8b798c: ldurb           w16, [x1, #-1]
    //     0x8b7990: ldurb           w17, [x0, #-1]
    //     0x8b7994: and             x16, x17, x16, lsr #2
    //     0x8b7998: tst             x16, HEAP, lsr #32
    //     0x8b799c: b.eq            #0x8b79a4
    //     0x8b79a0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8b79a4: LoadField: r0 = r1->field_b
    //     0x8b79a4: ldur            w0, [x1, #0xb]
    // 0x8b79a8: DecompressPointer r0
    //     0x8b79a8: add             x0, x0, HEAP, lsl #32
    // 0x8b79ac: cmp             w0, NULL
    // 0x8b79b0: b.eq            #0x8b7a7c
    // 0x8b79b4: LoadField: r2 = r0->field_23
    //     0x8b79b4: ldur            w2, [x0, #0x23]
    // 0x8b79b8: DecompressPointer r2
    //     0x8b79b8: add             x2, x2, HEAP, lsl #32
    // 0x8b79bc: tbz             w2, #4, #0x8b79cc
    // 0x8b79c0: r16 = true
    //     0x8b79c0: add             x16, NULL, #0x20  ; true
    // 0x8b79c4: stp             x16, x1, [SP]
    // 0x8b79c8: r0 = _scheduleShowCaretOnScreen()
    //     0x8b79c8: bl              #0x5d660c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scheduleShowCaretOnScreen
    // 0x8b79cc: ldr             x16, [fp, #0x10]
    // 0x8b79d0: str             x16, [SP]
    // 0x8b79d4: r0 = _adjustedSelectionWhenFocused()
    //     0x8b79d4: bl              #0x69ed04  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_adjustedSelectionWhenFocused
    // 0x8b79d8: cmp             w0, NULL
    // 0x8b79dc: b.eq            #0x8b7a2c
    // 0x8b79e0: ldr             x16, [fp, #0x10]
    // 0x8b79e4: stp             x0, x16, [SP, #8]
    // 0x8b79e8: str             NULL, [SP]
    // 0x8b79ec: r0 = _handleSelectionChanged()
    //     0x8b79ec: bl              #0x5d1a30  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleSelectionChanged
    // 0x8b79f0: b               #0x8b7a2c
    // 0x8b79f4: r0 = LoadStaticField(0xc34)
    //     0x8b79f4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8b79f8: ldr             x0, [x0, #0x1868]
    // 0x8b79fc: cmp             w0, NULL
    // 0x8b7a00: b.eq            #0x8b7a80
    // 0x8b7a04: ldr             x16, [fp, #0x10]
    // 0x8b7a08: stp             x16, x0, [SP]
    // 0x8b7a0c: r0 = removeObserver()
    //     0x8b7a0c: bl              #0x840fe4  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding&WidgetsBinding::removeObserver
    // 0x8b7a10: ldur            x2, [fp, #-8]
    // 0x8b7a14: r1 = Function '<anonymous closure>':.
    //     0x8b7a14: add             x1, PP, #0x41, lsl #12  ; [pp+0x41428] AnonymousClosure: (0x8b7ba4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x8b77bc)
    //     0x8b7a18: ldr             x1, [x1, #0x428]
    // 0x8b7a1c: r0 = AllocateClosure()
    //     0x8b7a1c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8b7a20: ldr             x16, [fp, #0x10]
    // 0x8b7a24: stp             x0, x16, [SP]
    // 0x8b7a28: r0 = setState()
    //     0x8b7a28: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0x8b7a2c: ldr             x16, [fp, #0x10]
    // 0x8b7a30: str             x16, [SP]
    // 0x8b7a34: r0 = updateKeepAlive()
    //     0x8b7a34: bl              #0x8b7608  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::updateKeepAlive
    // 0x8b7a38: r0 = Null
    //     0x8b7a38: mov             x0, NULL
    // 0x8b7a3c: LeaveFrame
    //     0x8b7a3c: mov             SP, fp
    //     0x8b7a40: ldp             fp, lr, [SP], #0x10
    // 0x8b7a44: ret
    //     0x8b7a44: ret             
    // 0x8b7a48: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b7a48: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7a4c: b               #0x8b77d4
    // 0x8b7a50: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a50: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7a54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a54: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7a58: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x8b7a58: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x8b7a5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a5c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7a60: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a60: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7a64: SaveReg d0
    //     0x8b7a64: str             q0, [SP, #-0x10]!
    // 0x8b7a68: SaveReg r1
    //     0x8b7a68: str             x1, [SP, #-8]!
    // 0x8b7a6c: r0 = AllocateDouble()
    //     0x8b7a6c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x8b7a70: RestoreReg r1
    //     0x8b7a70: ldr             x1, [SP], #8
    // 0x8b7a74: RestoreReg d0
    //     0x8b7a74: ldr             q0, [SP], #0x10
    // 0x8b7a78: b               #0x8b7984
    // 0x8b7a7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a7c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7a80: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7a80: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _openOrCloseInputConnectionIfNeeded(/* No info */) {
    // ** addr: 0x8b7a84, size: 0xf8
    // 0x8b7a84: EnterFrame
    //     0x8b7a84: stp             fp, lr, [SP, #-0x10]!
    //     0x8b7a88: mov             fp, SP
    // 0x8b7a8c: AllocStack(0x8)
    //     0x8b7a8c: sub             SP, SP, #8
    // 0x8b7a90: CheckStackOverflow
    //     0x8b7a90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8b7a94: cmp             SP, x16
    //     0x8b7a98: b.ls            #0x8b7b64
    // 0x8b7a9c: ldr             x0, [fp, #0x10]
    // 0x8b7aa0: LoadField: r1 = r0->field_b
    //     0x8b7aa0: ldur            w1, [x0, #0xb]
    // 0x8b7aa4: DecompressPointer r1
    //     0x8b7aa4: add             x1, x1, HEAP, lsl #32
    // 0x8b7aa8: cmp             w1, NULL
    // 0x8b7aac: b.eq            #0x8b7b6c
    // 0x8b7ab0: LoadField: r2 = r1->field_f
    //     0x8b7ab0: ldur            w2, [x1, #0xf]
    // 0x8b7ab4: DecompressPointer r2
    //     0x8b7ab4: add             x2, x2, HEAP, lsl #32
    // 0x8b7ab8: str             x2, [SP]
    // 0x8b7abc: r0 = hasFocus()
    //     0x8b7abc: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x8b7ac0: tbnz            w0, #4, #0x8b7afc
    // 0x8b7ac4: ldr             x0, [fp, #0x10]
    // 0x8b7ac8: LoadField: r1 = r0->field_b
    //     0x8b7ac8: ldur            w1, [x0, #0xb]
    // 0x8b7acc: DecompressPointer r1
    //     0x8b7acc: add             x1, x1, HEAP, lsl #32
    // 0x8b7ad0: cmp             w1, NULL
    // 0x8b7ad4: b.eq            #0x8b7b70
    // 0x8b7ad8: LoadField: r2 = r1->field_f
    //     0x8b7ad8: ldur            w2, [x1, #0xf]
    // 0x8b7adc: DecompressPointer r2
    //     0x8b7adc: add             x2, x2, HEAP, lsl #32
    // 0x8b7ae0: str             x2, [SP]
    // 0x8b7ae4: r0 = consumeKeyboardToken()
    //     0x8b7ae4: bl              #0x8b7b7c  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::consumeKeyboardToken
    // 0x8b7ae8: tbnz            w0, #4, #0x8b7afc
    // 0x8b7aec: ldr             x16, [fp, #0x10]
    // 0x8b7af0: str             x16, [SP]
    // 0x8b7af4: r0 = _openInputConnection()
    //     0x8b7af4: bl              #0x5d9568  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x8b7af8: b               #0x8b7b54
    // 0x8b7afc: ldr             x0, [fp, #0x10]
    // 0x8b7b00: LoadField: r1 = r0->field_b
    //     0x8b7b00: ldur            w1, [x0, #0xb]
    // 0x8b7b04: DecompressPointer r1
    //     0x8b7b04: add             x1, x1, HEAP, lsl #32
    // 0x8b7b08: cmp             w1, NULL
    // 0x8b7b0c: b.eq            #0x8b7b74
    // 0x8b7b10: LoadField: r2 = r1->field_f
    //     0x8b7b10: ldur            w2, [x1, #0xf]
    // 0x8b7b14: DecompressPointer r2
    //     0x8b7b14: add             x2, x2, HEAP, lsl #32
    // 0x8b7b18: str             x2, [SP]
    // 0x8b7b1c: r0 = hasFocus()
    //     0x8b7b1c: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x8b7b20: tbz             w0, #4, #0x8b7b54
    // 0x8b7b24: ldr             x0, [fp, #0x10]
    // 0x8b7b28: str             x0, [SP]
    // 0x8b7b2c: r0 = _closeInputConnectionIfNeeded()
    //     0x8b7b2c: bl              #0x8b7590  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_closeInputConnectionIfNeeded
    // 0x8b7b30: ldr             x0, [fp, #0x10]
    // 0x8b7b34: LoadField: r1 = r0->field_b
    //     0x8b7b34: ldur            w1, [x0, #0xb]
    // 0x8b7b38: DecompressPointer r1
    //     0x8b7b38: add             x1, x1, HEAP, lsl #32
    // 0x8b7b3c: cmp             w1, NULL
    // 0x8b7b40: b.eq            #0x8b7b78
    // 0x8b7b44: LoadField: r0 = r1->field_b
    //     0x8b7b44: ldur            w0, [x1, #0xb]
    // 0x8b7b48: DecompressPointer r0
    //     0x8b7b48: add             x0, x0, HEAP, lsl #32
    // 0x8b7b4c: str             x0, [SP]
    // 0x8b7b50: r0 = clearComposing()
    //     0x8b7b50: bl              #0x5e20e4  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::clearComposing
    // 0x8b7b54: r0 = Null
    //     0x8b7b54: mov             x0, NULL
    // 0x8b7b58: LeaveFrame
    //     0x8b7b58: mov             SP, fp
    //     0x8b7b5c: ldp             fp, lr, [SP], #0x10
    // 0x8b7b60: ret
    //     0x8b7b60: ret             
    // 0x8b7b64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8b7b64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8b7b68: b               #0x8b7a9c
    // 0x8b7b6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7b6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7b70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7b70: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7b74: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7b74: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8b7b78: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8b7b78: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x8b7ba4, size: 0x20
    // 0x8b7ba4: ldr             x1, [SP]
    // 0x8b7ba8: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x8b7ba8: ldur            w2, [x1, #0x17]
    // 0x8b7bac: DecompressPointer r2
    //     0x8b7bac: add             x2, x2, HEAP, lsl #32
    // 0x8b7bb0: LoadField: r1 = r2->field_f
    //     0x8b7bb0: ldur            w1, [x2, #0xf]
    // 0x8b7bb4: DecompressPointer r1
    //     0x8b7bb4: add             x1, x1, HEAP, lsl #32
    // 0x8b7bb8: StoreField: r1->field_b3 = rNULL
    //     0x8b7bb8: stur            NULL, [x1, #0xb3]
    // 0x8b7bbc: r0 = Null
    //     0x8b7bbc: mov             x0, NULL
    // 0x8b7bc0: ret
    //     0x8b7bc0: ret             
  }
  _ hideMagnifier(/* No info */) {
    // ** addr: 0x94f300, size: 0x80
    // 0x94f300: EnterFrame
    //     0x94f300: stp             fp, lr, [SP, #-0x10]!
    //     0x94f304: mov             fp, SP
    // 0x94f308: AllocStack(0x8)
    //     0x94f308: sub             SP, SP, #8
    // 0x94f30c: CheckStackOverflow
    //     0x94f30c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x94f310: cmp             SP, x16
    //     0x94f314: b.ls            #0x94f374
    // 0x94f318: ldr             x0, [fp, #0x10]
    // 0x94f31c: LoadField: r1 = r0->field_3f
    //     0x94f31c: ldur            w1, [x0, #0x3f]
    // 0x94f320: DecompressPointer r1
    //     0x94f320: add             x1, x1, HEAP, lsl #32
    // 0x94f324: cmp             w1, NULL
    // 0x94f328: b.ne            #0x94f33c
    // 0x94f32c: r0 = Null
    //     0x94f32c: mov             x0, NULL
    // 0x94f330: LeaveFrame
    //     0x94f330: mov             SP, fp
    //     0x94f334: ldp             fp, lr, [SP], #0x10
    // 0x94f338: ret
    //     0x94f338: ret             
    // 0x94f33c: str             x1, [SP]
    // 0x94f340: r0 = magnifierIsVisible()
    //     0x94f340: bl              #0x94f3d8  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::magnifierIsVisible
    // 0x94f344: tbnz            w0, #4, #0x94f364
    // 0x94f348: ldr             x0, [fp, #0x10]
    // 0x94f34c: LoadField: r1 = r0->field_3f
    //     0x94f34c: ldur            w1, [x0, #0x3f]
    // 0x94f350: DecompressPointer r1
    //     0x94f350: add             x1, x1, HEAP, lsl #32
    // 0x94f354: cmp             w1, NULL
    // 0x94f358: b.eq            #0x94f37c
    // 0x94f35c: str             x1, [SP]
    // 0x94f360: r0 = hideMagnifier()
    //     0x94f360: bl              #0x94f380  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::hideMagnifier
    // 0x94f364: r0 = Null
    //     0x94f364: mov             x0, NULL
    // 0x94f368: LeaveFrame
    //     0x94f368: mov             SP, fp
    //     0x94f36c: ldp             fp, lr, [SP], #0x10
    // 0x94f370: ret
    //     0x94f370: ret             
    // 0x94f374: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x94f374: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x94f378: b               #0x94f318
    // 0x94f37c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x94f37c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ showMagnifier(/* No info */) {
    // ** addr: 0x9503cc, size: 0xd0
    // 0x9503cc: EnterFrame
    //     0x9503cc: stp             fp, lr, [SP, #-0x10]!
    //     0x9503d0: mov             fp, SP
    // 0x9503d4: AllocStack(0x10)
    //     0x9503d4: sub             SP, SP, #0x10
    // 0x9503d8: CheckStackOverflow
    //     0x9503d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x9503dc: cmp             SP, x16
    //     0x9503e0: b.ls            #0x950484
    // 0x9503e4: ldr             x0, [fp, #0x18]
    // 0x9503e8: LoadField: r1 = r0->field_3f
    //     0x9503e8: ldur            w1, [x0, #0x3f]
    // 0x9503ec: DecompressPointer r1
    //     0x9503ec: add             x1, x1, HEAP, lsl #32
    // 0x9503f0: cmp             w1, NULL
    // 0x9503f4: b.ne            #0x950408
    // 0x9503f8: r0 = Null
    //     0x9503f8: mov             x0, NULL
    // 0x9503fc: LeaveFrame
    //     0x9503fc: mov             SP, fp
    //     0x950400: ldp             fp, lr, [SP], #0x10
    // 0x950404: ret
    //     0x950404: ret             
    // 0x950408: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x950408: ldur            w2, [x1, #0x17]
    // 0x95040c: DecompressPointer r2
    //     0x95040c: add             x2, x2, HEAP, lsl #32
    // 0x950410: r16 = Sentinel
    //     0x950410: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x950414: cmp             w2, w16
    // 0x950418: b.eq            #0x95048c
    // 0x95041c: LoadField: r1 = r2->field_f
    //     0x95041c: ldur            w1, [x2, #0xf]
    // 0x950420: DecompressPointer r1
    //     0x950420: add             x1, x1, HEAP, lsl #32
    // 0x950424: str             x1, [SP]
    // 0x950428: r0 = shown()
    //     0x950428: bl              #0x94f434  ; [package:flutter/src/widgets/magnifier.dart] MagnifierController::shown
    // 0x95042c: tbnz            w0, #4, #0x950454
    // 0x950430: ldr             x0, [fp, #0x18]
    // 0x950434: LoadField: r1 = r0->field_3f
    //     0x950434: ldur            w1, [x0, #0x3f]
    // 0x950438: DecompressPointer r1
    //     0x950438: add             x1, x1, HEAP, lsl #32
    // 0x95043c: cmp             w1, NULL
    // 0x950440: b.eq            #0x950494
    // 0x950444: ldr             x16, [fp, #0x10]
    // 0x950448: stp             x16, x1, [SP]
    // 0x95044c: r0 = updateMagnifier()
    //     0x95044c: bl              #0x950540  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::updateMagnifier
    // 0x950450: b               #0x950474
    // 0x950454: ldr             x0, [fp, #0x18]
    // 0x950458: LoadField: r1 = r0->field_3f
    //     0x950458: ldur            w1, [x0, #0x3f]
    // 0x95045c: DecompressPointer r1
    //     0x95045c: add             x1, x1, HEAP, lsl #32
    // 0x950460: cmp             w1, NULL
    // 0x950464: b.eq            #0x950498
    // 0x950468: ldr             x16, [fp, #0x10]
    // 0x95046c: stp             x16, x1, [SP]
    // 0x950470: r0 = showMagnifier()
    //     0x950470: bl              #0x95049c  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::showMagnifier
    // 0x950474: r0 = Null
    //     0x950474: mov             x0, NULL
    // 0x950478: LeaveFrame
    //     0x950478: mov             SP, fp
    //     0x95047c: ldp             fp, lr, [SP], #0x10
    // 0x950480: ret
    //     0x950480: ret             
    // 0x950484: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x950484: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x950488: b               #0x9503e4
    // 0x95048c: r9 = _selectionOverlay
    //     0x95048c: ldr             x9, [PP, #0x57c8]  ; [pp+0x57c8] Field <TextSelectionOverlay._selectionOverlay@324111801>: late final (offset: 0x18)
    // 0x950490: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x950490: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x950494: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x950494: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x950498: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x950498: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ toggleToolbar(/* No info */) {
    // ** addr: 0x951954, size: 0x100
    // 0x951954: EnterFrame
    //     0x951954: stp             fp, lr, [SP, #-0x10]!
    //     0x951958: mov             fp, SP
    // 0x95195c: AllocStack(0x20)
    //     0x95195c: sub             SP, SP, #0x20
    // 0x951960: SetupParameters(EditableTextState this /* r1, fp-0x10 */, [dynamic _ = true /* r0, fp-0x8 */])
    //     0x951960: mov             x0, x4
    //     0x951964: ldur            w1, [x0, #0x13]
    //     0x951968: add             x1, x1, HEAP, lsl #32
    //     0x95196c: sub             x0, x1, #2
    //     0x951970: add             x1, fp, w0, sxtw #2
    //     0x951974: ldr             x1, [x1, #0x10]
    //     0x951978: stur            x1, [fp, #-0x10]
    //     0x95197c: cmp             w0, #2
    //     0x951980: b.lt            #0x951994
    //     0x951984: add             x2, fp, w0, sxtw #2
    //     0x951988: ldr             x2, [x2, #8]
    //     0x95198c: mov             x0, x2
    //     0x951990: b               #0x951998
    //     0x951994: add             x0, NULL, #0x20  ; true
    //     0x951998: stur            x0, [fp, #-8]
    // 0x95199c: CheckStackOverflow
    //     0x95199c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x9519a0: cmp             SP, x16
    //     0x9519a4: b.ls            #0x951a44
    // 0x9519a8: LoadField: r2 = r1->field_3f
    //     0x9519a8: ldur            w2, [x1, #0x3f]
    // 0x9519ac: DecompressPointer r2
    //     0x9519ac: add             x2, x2, HEAP, lsl #32
    // 0x9519b0: cmp             w2, NULL
    // 0x9519b4: b.ne            #0x9519ec
    // 0x9519b8: str             x1, [SP]
    // 0x9519bc: r0 = _createSelectionOverlay()
    //     0x9519bc: bl              #0x5d2d28  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_createSelectionOverlay
    // 0x9519c0: mov             x2, x0
    // 0x9519c4: ldur            x1, [fp, #-0x10]
    // 0x9519c8: StoreField: r1->field_3f = r0
    //     0x9519c8: stur            w0, [x1, #0x3f]
    //     0x9519cc: ldurb           w16, [x1, #-1]
    //     0x9519d0: ldurb           w17, [x0, #-1]
    //     0x9519d4: and             x16, x17, x16, lsr #2
    //     0x9519d8: tst             x16, HEAP, lsr #32
    //     0x9519dc: b.eq            #0x9519e4
    //     0x9519e0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x9519e4: mov             x0, x2
    // 0x9519e8: b               #0x9519f0
    // 0x9519ec: mov             x0, x2
    // 0x9519f0: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x9519f0: ldur            w2, [x0, #0x17]
    // 0x9519f4: DecompressPointer r2
    //     0x9519f4: add             x2, x2, HEAP, lsl #32
    // 0x9519f8: r16 = Sentinel
    //     0x9519f8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9519fc: cmp             w2, w16
    // 0x951a00: b.eq            #0x951a4c
    // 0x951a04: str             x2, [SP]
    // 0x951a08: r0 = toolbarIsVisible()
    //     0x951a08: bl              #0x5d888c  ; [package:flutter/src/widgets/text_selection.dart] SelectionOverlay::toolbarIsVisible
    // 0x951a0c: tbnz            w0, #4, #0x951a28
    // 0x951a10: ldur            x16, [fp, #-0x10]
    // 0x951a14: ldur            lr, [fp, #-8]
    // 0x951a18: stp             lr, x16, [SP]
    // 0x951a1c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x951a1c: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x951a20: r0 = hideToolbar()
    //     0x951a20: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0x951a24: b               #0x951a34
    // 0x951a28: ldur            x16, [fp, #-0x10]
    // 0x951a2c: str             x16, [SP]
    // 0x951a30: r0 = showToolbar()
    //     0x951a30: bl              #0x5c75d8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::showToolbar
    // 0x951a34: r0 = Null
    //     0x951a34: mov             x0, NULL
    // 0x951a38: LeaveFrame
    //     0x951a38: mov             SP, fp
    //     0x951a3c: ldp             fp, lr, [SP], #0x10
    // 0x951a40: ret
    //     0x951a40: ret             
    // 0x951a44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x951a44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x951a48: b               #0x9519a8
    // 0x951a4c: r9 = _selectionOverlay
    //     0x951a4c: ldr             x9, [PP, #0x57c8]  ; [pp+0x57c8] Field <TextSelectionOverlay._selectionOverlay@324111801>: late final (offset: 0x18)
    // 0x951a50: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x951a50: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x959b50, size: 0x3a8
    // 0x959b50: EnterFrame
    //     0x959b50: stp             fp, lr, [SP, #-0x10]!
    //     0x959b54: mov             fp, SP
    // 0x959b58: AllocStack(0x78)
    //     0x959b58: sub             SP, SP, #0x78
    // 0x959b5c: CheckStackOverflow
    //     0x959b5c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x959b60: cmp             SP, x16
    //     0x959b64: b.ls            #0x959edc
    // 0x959b68: r1 = 2
    //     0x959b68: movz            x1, #0x2
    // 0x959b6c: r0 = AllocateContext()
    //     0x959b6c: bl              #0xc5def4  ; AllocateContextStub
    // 0x959b70: ldr             x1, [fp, #0x18]
    // 0x959b74: stur            x0, [fp, #-8]
    // 0x959b78: StoreField: r0->field_f = r1
    //     0x959b78: stur            w1, [x0, #0xf]
    // 0x959b7c: ldr             x16, [fp, #0x10]
    // 0x959b80: stp             x16, x1, [SP]
    // 0x959b84: r0 = build()
    //     0x959b84: bl              #0x959f10  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::build
    // 0x959b88: ldr             x1, [fp, #0x18]
    // 0x959b8c: LoadField: r0 = r1->field_b
    //     0x959b8c: ldur            w0, [x1, #0xb]
    // 0x959b90: DecompressPointer r0
    //     0x959b90: add             x0, x0, HEAP, lsl #32
    // 0x959b94: cmp             w0, NULL
    // 0x959b98: b.eq            #0x959ee4
    // 0x959b9c: LoadField: r2 = r0->field_8b
    //     0x959b9c: ldur            w2, [x0, #0x8b]
    // 0x959ba0: DecompressPointer r2
    //     0x959ba0: add             x2, x2, HEAP, lsl #32
    // 0x959ba4: mov             x0, x2
    // 0x959ba8: ldur            x2, [fp, #-8]
    // 0x959bac: StoreField: r2->field_13 = r0
    //     0x959bac: stur            w0, [x2, #0x13]
    //     0x959bb0: ldurb           w16, [x2, #-1]
    //     0x959bb4: ldurb           w17, [x0, #-1]
    //     0x959bb8: and             x16, x17, x16, lsr #2
    //     0x959bbc: tst             x16, HEAP, lsr #32
    //     0x959bc0: b.eq            #0x959bc8
    //     0x959bc4: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x959bc8: r1 = 1
    //     0x959bc8: movz            x1, #0x1
    // 0x959bcc: r0 = AllocateContext()
    //     0x959bcc: bl              #0xc5def4  ; AllocateContextStub
    // 0x959bd0: ldr             x1, [fp, #0x18]
    // 0x959bd4: stur            x0, [fp, #-0x10]
    // 0x959bd8: StoreField: r0->field_f = r1
    //     0x959bd8: stur            w1, [x0, #0xf]
    // 0x959bdc: str             x1, [SP]
    // 0x959be0: r0 = _hasInputConnection()
    //     0x959be0: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x959be4: ldr             x1, [fp, #0x18]
    // 0x959be8: stur            x0, [fp, #-0x18]
    // 0x959bec: LoadField: r2 = r1->field_b
    //     0x959bec: ldur            w2, [x1, #0xb]
    // 0x959bf0: DecompressPointer r2
    //     0x959bf0: add             x2, x2, HEAP, lsl #32
    // 0x959bf4: cmp             w2, NULL
    // 0x959bf8: b.eq            #0x959ee8
    // 0x959bfc: r1 = 1
    //     0x959bfc: movz            x1, #0x1
    // 0x959c00: r0 = AllocateContext()
    //     0x959c00: bl              #0xc5def4  ; AllocateContextStub
    // 0x959c04: mov             x2, x0
    // 0x959c08: ldr             x0, [fp, #0x18]
    // 0x959c0c: stur            x2, [fp, #-0x20]
    // 0x959c10: StoreField: r2->field_f = r0
    //     0x959c10: stur            w0, [x2, #0xf]
    // 0x959c14: mov             x1, x0
    // 0x959c18: LoadField: r0 = r1->field_c7
    //     0x959c18: ldur            w0, [x1, #0xc7]
    // 0x959c1c: DecompressPointer r0
    //     0x959c1c: add             x0, x0, HEAP, lsl #32
    // 0x959c20: r16 = Sentinel
    //     0x959c20: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x959c24: cmp             w0, w16
    // 0x959c28: b.ne            #0x959c38
    // 0x959c2c: r2 = _actions
    //     0x959c2c: add             x2, PP, #0x41, lsl #12  ; [pp+0x411c0] Field <EditableTextState._actions@244183791>: late final (offset: 0xc8)
    //     0x959c30: ldr             x2, [x2, #0x1c0]
    // 0x959c34: r0 = InitLateFinalInstanceField()
    //     0x959c34: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x959c38: mov             x1, x0
    // 0x959c3c: ldr             x0, [fp, #0x18]
    // 0x959c40: stur            x1, [fp, #-0x48]
    // 0x959c44: LoadField: r2 = r0->field_b
    //     0x959c44: ldur            w2, [x0, #0xb]
    // 0x959c48: DecompressPointer r2
    //     0x959c48: add             x2, x2, HEAP, lsl #32
    // 0x959c4c: cmp             w2, NULL
    // 0x959c50: b.eq            #0x959eec
    // 0x959c54: LoadField: r3 = r2->field_b
    //     0x959c54: ldur            w3, [x2, #0xb]
    // 0x959c58: DecompressPointer r3
    //     0x959c58: add             x3, x3, HEAP, lsl #32
    // 0x959c5c: stur            x3, [fp, #-0x40]
    // 0x959c60: LoadField: r4 = r2->field_f
    //     0x959c60: ldur            w4, [x2, #0xf]
    // 0x959c64: DecompressPointer r4
    //     0x959c64: add             x4, x4, HEAP, lsl #32
    // 0x959c68: stur            x4, [fp, #-0x38]
    // 0x959c6c: LoadField: r5 = r0->field_43
    //     0x959c6c: ldur            w5, [x0, #0x43]
    // 0x959c70: DecompressPointer r5
    //     0x959c70: add             x5, x5, HEAP, lsl #32
    // 0x959c74: stur            x5, [fp, #-0x30]
    // 0x959c78: LoadField: r6 = r2->field_73
    //     0x959c78: ldur            x6, [x2, #0x73]
    // 0x959c7c: cmp             x6, #1
    // 0x959c80: b.eq            #0x959c8c
    // 0x959c84: r6 = Instance_AxisDirection
    //     0x959c84: ldr             x6, [PP, #0x6a88]  ; [pp+0x6a88] Obj!AxisDirection@c44011
    // 0x959c88: b               #0x959c90
    // 0x959c8c: r6 = Instance_AxisDirection
    //     0x959c8c: ldr             x6, [PP, #0x6a90]  ; [pp+0x6a90] Obj!AxisDirection@c44051
    // 0x959c90: ldur            x2, [fp, #-0x18]
    // 0x959c94: stur            x6, [fp, #-0x28]
    // 0x959c98: str             x0, [SP]
    // 0x959c9c: r0 = _scrollController()
    //     0x959c9c: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0x959ca0: mov             x1, x0
    // 0x959ca4: ldr             x0, [fp, #0x18]
    // 0x959ca8: stur            x1, [fp, #-0x50]
    // 0x959cac: LoadField: r2 = r0->field_b
    //     0x959cac: ldur            w2, [x0, #0xb]
    // 0x959cb0: DecompressPointer r2
    //     0x959cb0: add             x2, x2, HEAP, lsl #32
    // 0x959cb4: cmp             w2, NULL
    // 0x959cb8: b.eq            #0x959ef0
    // 0x959cbc: ldr             x16, [fp, #0x10]
    // 0x959cc0: str             x16, [SP]
    // 0x959cc4: r0 = of()
    //     0x959cc4: bl              #0x877820  ; [package:flutter/src/widgets/scroll_configuration.dart] ScrollConfiguration::of
    // 0x959cc8: mov             x1, x0
    // 0x959ccc: ldr             x0, [fp, #0x18]
    // 0x959cd0: LoadField: r2 = r0->field_b
    //     0x959cd0: ldur            w2, [x0, #0xb]
    // 0x959cd4: DecompressPointer r2
    //     0x959cd4: add             x2, x2, HEAP, lsl #32
    // 0x959cd8: cmp             w2, NULL
    // 0x959cdc: b.eq            #0x959ef4
    // 0x959ce0: LoadField: r0 = r2->field_73
    //     0x959ce0: ldur            x0, [x2, #0x73]
    // 0x959ce4: cmp             x0, #1
    // 0x959ce8: r16 = true
    //     0x959ce8: add             x16, NULL, #0x20  ; true
    // 0x959cec: r17 = false
    //     0x959cec: add             x17, NULL, #0x30  ; false
    // 0x959cf0: csel            x2, x16, x17, ne
    // 0x959cf4: r0 = LoadClassIdInstr(r1)
    //     0x959cf4: ldur            x0, [x1, #-1]
    //     0x959cf8: ubfx            x0, x0, #0xc, #0x14
    // 0x959cfc: stp             x2, x1, [SP, #8]
    // 0x959d00: r16 = false
    //     0x959d00: add             x16, NULL, #0x30  ; false
    // 0x959d04: str             x16, [SP]
    // 0x959d08: r4 = const [0, 0x3, 0x3, 0x1, overscroll, 0x2, scrollbars, 0x1, null]
    //     0x959d08: add             x4, PP, #0x41, lsl #12  ; [pp+0x411c8] List(9) [0, 0x3, 0x3, 0x1, "overscroll", 0x2, "scrollbars", 0x1, Null]
    //     0x959d0c: ldr             x4, [x4, #0x1c8]
    // 0x959d10: r0 = GDT[cid_x0 + -0xfdf]()
    //     0x959d10: sub             lr, x0, #0xfdf
    //     0x959d14: ldr             lr, [x21, lr, lsl #3]
    //     0x959d18: blr             lr
    // 0x959d1c: stur            x0, [fp, #-0x58]
    // 0x959d20: r0 = Scrollable()
    //     0x959d20: bl              #0x8fbc68  ; AllocateScrollableStub -> Scrollable (size=0x38)
    // 0x959d24: mov             x3, x0
    // 0x959d28: ldur            x0, [fp, #-0x28]
    // 0x959d2c: stur            x3, [fp, #-0x60]
    // 0x959d30: StoreField: r3->field_b = r0
    //     0x959d30: stur            w0, [x3, #0xb]
    // 0x959d34: ldur            x0, [fp, #-0x50]
    // 0x959d38: StoreField: r3->field_f = r0
    //     0x959d38: stur            w0, [x3, #0xf]
    // 0x959d3c: ldur            x2, [fp, #-8]
    // 0x959d40: r1 = Function '<anonymous closure>':.
    //     0x959d40: add             x1, PP, #0x41, lsl #12  ; [pp+0x411d0] AnonymousClosure: (0x95a2e4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x959b50)
    //     0x959d44: ldr             x1, [x1, #0x1d0]
    // 0x959d48: r0 = AllocateClosure()
    //     0x959d48: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x959d4c: mov             x1, x0
    // 0x959d50: ldur            x0, [fp, #-0x60]
    // 0x959d54: ArrayStore: r0[0] = r1  ; List_4
    //     0x959d54: stur            w1, [x0, #0x17]
    // 0x959d58: r1 = true
    //     0x959d58: add             x1, NULL, #0x20  ; true
    // 0x959d5c: StoreField: r0->field_1f = r1
    //     0x959d5c: stur            w1, [x0, #0x1f]
    // 0x959d60: r2 = Instance_DragStartBehavior
    //     0x959d60: ldr             x2, [PP, #0x6218]  ; [pp+0x6218] Obj!DragStartBehavior@c44d91
    // 0x959d64: StoreField: r0->field_27 = r2
    //     0x959d64: stur            w2, [x0, #0x27]
    // 0x959d68: r2 = "editable"
    //     0x959d68: add             x2, PP, #0x34, lsl #12  ; [pp+0x34b00] "editable"
    //     0x959d6c: ldr             x2, [x2, #0xb00]
    // 0x959d70: StoreField: r0->field_2b = r2
    //     0x959d70: stur            w2, [x0, #0x2b]
    // 0x959d74: ldur            x2, [fp, #-0x58]
    // 0x959d78: StoreField: r0->field_2f = r2
    //     0x959d78: stur            w2, [x0, #0x2f]
    // 0x959d7c: r2 = Instance_Clip
    //     0x959d7c: add             x2, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x959d80: ldr             x2, [x2, #0x438]
    // 0x959d84: StoreField: r0->field_33 = r2
    //     0x959d84: stur            w2, [x0, #0x33]
    // 0x959d88: ldur            x2, [fp, #-0x30]
    // 0x959d8c: StoreField: r0->field_7 = r2
    //     0x959d8c: stur            w2, [x0, #7]
    // 0x959d90: r0 = Focus()
    //     0x959d90: bl              #0x929954  ; AllocateFocusStub -> Focus (size=0x40)
    // 0x959d94: mov             x3, x0
    // 0x959d98: ldur            x0, [fp, #-0x60]
    // 0x959d9c: stur            x3, [fp, #-0x28]
    // 0x959da0: StoreField: r3->field_f = r0
    //     0x959da0: stur            w0, [x3, #0xf]
    // 0x959da4: ldur            x0, [fp, #-0x38]
    // 0x959da8: StoreField: r3->field_13 = r0
    //     0x959da8: stur            w0, [x3, #0x13]
    // 0x959dac: r1 = false
    //     0x959dac: add             x1, NULL, #0x30  ; false
    // 0x959db0: ArrayStore: r3[0] = r1  ; List_4
    //     0x959db0: stur            w1, [x3, #0x17]
    // 0x959db4: StoreField: r3->field_37 = r1
    //     0x959db4: stur            w1, [x3, #0x37]
    // 0x959db8: ldur            x2, [fp, #-8]
    // 0x959dbc: r1 = Function '<anonymous closure>':.
    //     0x959dbc: add             x1, PP, #0x41, lsl #12  ; [pp+0x411d8] AnonymousClosure: (0x95a1d4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x959b50)
    //     0x959dc0: ldr             x1, [x1, #0x1d8]
    // 0x959dc4: r0 = AllocateClosure()
    //     0x959dc4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x959dc8: r1 = <TextEditingValue>
    //     0x959dc8: ldr             x1, [PP, #0x6350]  ; [pp+0x6350] TypeArguments: <TextEditingValue>
    // 0x959dcc: stur            x0, [fp, #-0x30]
    // 0x959dd0: r0 = UndoHistory()
    //     0x959dd0: bl              #0x959f04  ; AllocateUndoHistoryStub -> UndoHistory<X0> (size=0x28)
    // 0x959dd4: mov             x3, x0
    // 0x959dd8: ldur            x0, [fp, #-0x30]
    // 0x959ddc: stur            x3, [fp, #-0x50]
    // 0x959de0: StoreField: r3->field_13 = r0
    //     0x959de0: stur            w0, [x3, #0x13]
    // 0x959de4: ldur            x0, [fp, #-0x40]
    // 0x959de8: StoreField: r3->field_f = r0
    //     0x959de8: stur            w0, [x3, #0xf]
    // 0x959dec: ldur            x2, [fp, #-8]
    // 0x959df0: r1 = Function '<anonymous closure>':.
    //     0x959df0: add             x1, PP, #0x41, lsl #12  ; [pp+0x411e0] AnonymousClosure: (0x95a17c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x959b50)
    //     0x959df4: ldr             x1, [x1, #0x1e0]
    // 0x959df8: r0 = AllocateClosure()
    //     0x959df8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x959dfc: mov             x1, x0
    // 0x959e00: ldur            x0, [fp, #-0x50]
    // 0x959e04: ArrayStore: r0[0] = r1  ; List_4
    //     0x959e04: stur            w1, [x0, #0x17]
    // 0x959e08: ldur            x1, [fp, #-0x38]
    // 0x959e0c: StoreField: r0->field_1b = r1
    //     0x959e0c: stur            w1, [x0, #0x1b]
    // 0x959e10: ldur            x1, [fp, #-0x28]
    // 0x959e14: StoreField: r0->field_23 = r1
    //     0x959e14: stur            w1, [x0, #0x23]
    // 0x959e18: r0 = Actions()
    //     0x959e18: bl              #0x938868  ; AllocateActionsStub -> Actions (size=0x18)
    // 0x959e1c: mov             x1, x0
    // 0x959e20: ldur            x0, [fp, #-0x48]
    // 0x959e24: stur            x1, [fp, #-8]
    // 0x959e28: StoreField: r1->field_f = r0
    //     0x959e28: stur            w0, [x1, #0xf]
    // 0x959e2c: ldur            x0, [fp, #-0x50]
    // 0x959e30: StoreField: r1->field_13 = r0
    //     0x959e30: stur            w0, [x1, #0x13]
    // 0x959e34: r0 = MouseRegion()
    //     0x959e34: bl              #0x920d58  ; AllocateMouseRegionStub -> MouseRegion (size=0x28)
    // 0x959e38: mov             x1, x0
    // 0x959e3c: r0 = Instance__DeferringMouseCursor
    //     0x959e3c: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x959e40: stur            x1, [fp, #-0x28]
    // 0x959e44: StoreField: r1->field_1b = r0
    //     0x959e44: stur            w0, [x1, #0x1b]
    // 0x959e48: r0 = true
    //     0x959e48: add             x0, NULL, #0x20  ; true
    // 0x959e4c: StoreField: r1->field_1f = r0
    //     0x959e4c: stur            w0, [x1, #0x1f]
    // 0x959e50: ldur            x2, [fp, #-8]
    // 0x959e54: StoreField: r1->field_b = r2
    //     0x959e54: stur            w2, [x1, #0xb]
    // 0x959e58: r0 = TextFieldTapRegion()
    //     0x959e58: bl              #0x5d23c0  ; AllocateTextFieldTapRegionStub -> TextFieldTapRegion (size=0x28)
    // 0x959e5c: mov             x3, x0
    // 0x959e60: r0 = true
    //     0x959e60: add             x0, NULL, #0x20  ; true
    // 0x959e64: stur            x3, [fp, #-8]
    // 0x959e68: StoreField: r3->field_f = r0
    //     0x959e68: stur            w0, [x3, #0xf]
    // 0x959e6c: r0 = Instance_HitTestBehavior
    //     0x959e6c: ldr             x0, [PP, #0x6220]  ; [pp+0x6220] Obj!HitTestBehavior@c43a51
    // 0x959e70: StoreField: r3->field_13 = r0
    //     0x959e70: stur            w0, [x3, #0x13]
    // 0x959e74: ldur            x2, [fp, #-0x20]
    // 0x959e78: r1 = Function '_defaultOnTapOutside@244183791':.
    //     0x959e78: add             x1, PP, #0x41, lsl #12  ; [pp+0x411e8] AnonymousClosure: (0x95a064), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_defaultOnTapOutside (0x95a0b0)
    //     0x959e7c: ldr             x1, [x1, #0x1e8]
    // 0x959e80: r0 = AllocateClosure()
    //     0x959e80: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x959e84: mov             x1, x0
    // 0x959e88: ldur            x0, [fp, #-8]
    // 0x959e8c: ArrayStore: r0[0] = r1  ; List_4
    //     0x959e8c: stur            w1, [x0, #0x17]
    // 0x959e90: r1 = EditableText
    //     0x959e90: ldr             x1, [PP, #0x6228]  ; [pp+0x6228] Type: EditableText
    // 0x959e94: StoreField: r0->field_1f = r1
    //     0x959e94: stur            w1, [x0, #0x1f]
    // 0x959e98: ldur            x1, [fp, #-0x28]
    // 0x959e9c: StoreField: r0->field_b = r1
    //     0x959e9c: stur            w1, [x0, #0xb]
    // 0x959ea0: ldur            x2, [fp, #-0x10]
    // 0x959ea4: r1 = Function '_compositeCallback@244183791':.
    //     0x959ea4: add             x1, PP, #0x41, lsl #12  ; [pp+0x411f0] AnonymousClosure: (0x959f8c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_compositeCallback (0x959fd8)
    //     0x959ea8: ldr             x1, [x1, #0x1f0]
    // 0x959eac: r0 = AllocateClosure()
    //     0x959eac: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x959eb0: stur            x0, [fp, #-0x10]
    // 0x959eb4: r0 = _CompositionCallback()
    //     0x959eb4: bl              #0x959ef8  ; Allocate_CompositionCallbackStub -> _CompositionCallback (size=0x18)
    // 0x959eb8: ldur            x1, [fp, #-0x10]
    // 0x959ebc: StoreField: r0->field_f = r1
    //     0x959ebc: stur            w1, [x0, #0xf]
    // 0x959ec0: ldur            x1, [fp, #-0x18]
    // 0x959ec4: StoreField: r0->field_13 = r1
    //     0x959ec4: stur            w1, [x0, #0x13]
    // 0x959ec8: ldur            x1, [fp, #-8]
    // 0x959ecc: StoreField: r0->field_b = r1
    //     0x959ecc: stur            w1, [x0, #0xb]
    // 0x959ed0: LeaveFrame
    //     0x959ed0: mov             SP, fp
    //     0x959ed4: ldp             fp, lr, [SP], #0x10
    // 0x959ed8: ret
    //     0x959ed8: ret             
    // 0x959edc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x959edc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x959ee0: b               #0x959b68
    // 0x959ee4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959ee4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x959ee8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959ee8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x959eec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959eec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x959ef0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959ef0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x959ef4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x959ef4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _compositeCallback(dynamic, Layer) {
    // ** addr: 0x959f8c, size: 0x4c
    // 0x959f8c: EnterFrame
    //     0x959f8c: stp             fp, lr, [SP, #-0x10]!
    //     0x959f90: mov             fp, SP
    // 0x959f94: AllocStack(0x10)
    //     0x959f94: sub             SP, SP, #0x10
    // 0x959f98: SetupParameters()
    //     0x959f98: ldr             x0, [fp, #0x18]
    //     0x959f9c: ldur            w1, [x0, #0x17]
    //     0x959fa0: add             x1, x1, HEAP, lsl #32
    // 0x959fa4: CheckStackOverflow
    //     0x959fa4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x959fa8: cmp             SP, x16
    //     0x959fac: b.ls            #0x959fd0
    // 0x959fb0: LoadField: r0 = r1->field_f
    //     0x959fb0: ldur            w0, [x1, #0xf]
    // 0x959fb4: DecompressPointer r0
    //     0x959fb4: add             x0, x0, HEAP, lsl #32
    // 0x959fb8: ldr             x16, [fp, #0x10]
    // 0x959fbc: stp             x16, x0, [SP]
    // 0x959fc0: r0 = _compositeCallback()
    //     0x959fc0: bl              #0x959fd8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_compositeCallback
    // 0x959fc4: LeaveFrame
    //     0x959fc4: mov             SP, fp
    //     0x959fc8: ldp             fp, lr, [SP], #0x10
    // 0x959fcc: ret
    //     0x959fcc: ret             
    // 0x959fd0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x959fd0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x959fd4: b               #0x959fb0
  }
  _ _compositeCallback(/* No info */) {
    // ** addr: 0x959fd8, size: 0x8c
    // 0x959fd8: EnterFrame
    //     0x959fd8: stp             fp, lr, [SP, #-0x10]!
    //     0x959fdc: mov             fp, SP
    // 0x959fe0: AllocStack(0x8)
    //     0x959fe0: sub             SP, SP, #8
    // 0x959fe4: CheckStackOverflow
    //     0x959fe4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x959fe8: cmp             SP, x16
    //     0x959fec: b.ls            #0x95a05c
    // 0x959ff0: ldr             x1, [fp, #0x18]
    // 0x959ff4: LoadField: r0 = r1->field_a7
    //     0x959ff4: ldur            w0, [x1, #0xa7]
    // 0x959ff8: DecompressPointer r0
    //     0x959ff8: add             x0, x0, HEAP, lsl #32
    // 0x959ffc: r16 = Sentinel
    //     0x959ffc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95a000: cmp             w0, w16
    // 0x95a004: b.ne            #0x95a010
    // 0x95a008: r2 = renderEditable
    //     0x95a008: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x95a00c: r0 = InitLateFinalInstanceField()
    //     0x95a00c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95a010: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x95a010: ldur            w1, [x0, #0x17]
    // 0x95a014: DecompressPointer r1
    //     0x95a014: add             x1, x1, HEAP, lsl #32
    // 0x95a018: cmp             w1, NULL
    // 0x95a01c: b.eq            #0x95a030
    // 0x95a020: ldr             x16, [fp, #0x18]
    // 0x95a024: str             x16, [SP]
    // 0x95a028: r0 = _hasInputConnection()
    //     0x95a028: bl              #0x5cd854  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hasInputConnection
    // 0x95a02c: tbz             w0, #4, #0x95a040
    // 0x95a030: r0 = Null
    //     0x95a030: mov             x0, NULL
    // 0x95a034: LeaveFrame
    //     0x95a034: mov             SP, fp
    //     0x95a038: ldp             fp, lr, [SP], #0x10
    // 0x95a03c: ret
    //     0x95a03c: ret             
    // 0x95a040: ldr             x16, [fp, #0x18]
    // 0x95a044: str             x16, [SP]
    // 0x95a048: r0 = _updateSizeAndTransform()
    //     0x95a048: bl              #0x5dabcc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSizeAndTransform
    // 0x95a04c: r0 = Null
    //     0x95a04c: mov             x0, NULL
    // 0x95a050: LeaveFrame
    //     0x95a050: mov             SP, fp
    //     0x95a054: ldp             fp, lr, [SP], #0x10
    // 0x95a058: ret
    //     0x95a058: ret             
    // 0x95a05c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a05c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a060: b               #0x959ff0
  }
  [closure] void _defaultOnTapOutside(dynamic, PointerDownEvent) {
    // ** addr: 0x95a064, size: 0x4c
    // 0x95a064: EnterFrame
    //     0x95a064: stp             fp, lr, [SP, #-0x10]!
    //     0x95a068: mov             fp, SP
    // 0x95a06c: AllocStack(0x10)
    //     0x95a06c: sub             SP, SP, #0x10
    // 0x95a070: SetupParameters()
    //     0x95a070: ldr             x0, [fp, #0x18]
    //     0x95a074: ldur            w1, [x0, #0x17]
    //     0x95a078: add             x1, x1, HEAP, lsl #32
    // 0x95a07c: CheckStackOverflow
    //     0x95a07c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a080: cmp             SP, x16
    //     0x95a084: b.ls            #0x95a0a8
    // 0x95a088: LoadField: r0 = r1->field_f
    //     0x95a088: ldur            w0, [x1, #0xf]
    // 0x95a08c: DecompressPointer r0
    //     0x95a08c: add             x0, x0, HEAP, lsl #32
    // 0x95a090: ldr             x16, [fp, #0x10]
    // 0x95a094: stp             x16, x0, [SP]
    // 0x95a098: r0 = _defaultOnTapOutside()
    //     0x95a098: bl              #0x95a0b0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_defaultOnTapOutside
    // 0x95a09c: LeaveFrame
    //     0x95a09c: mov             SP, fp
    //     0x95a0a0: ldp             fp, lr, [SP], #0x10
    // 0x95a0a4: ret
    //     0x95a0a4: ret             
    // 0x95a0a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a0a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a0ac: b               #0x95a088
  }
  _ _defaultOnTapOutside(/* No info */) {
    // ** addr: 0x95a0b0, size: 0xcc
    // 0x95a0b0: EnterFrame
    //     0x95a0b0: stp             fp, lr, [SP, #-0x10]!
    //     0x95a0b4: mov             fp, SP
    // 0x95a0b8: AllocStack(0x8)
    //     0x95a0b8: sub             SP, SP, #8
    // 0x95a0bc: CheckStackOverflow
    //     0x95a0bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a0c0: cmp             SP, x16
    //     0x95a0c4: b.ls            #0x95a170
    // 0x95a0c8: ldr             x0, [fp, #0x10]
    // 0x95a0cc: r1 = LoadClassIdInstr(r0)
    //     0x95a0cc: ldur            x1, [x0, #-1]
    //     0x95a0d0: ubfx            x1, x1, #0xc, #0x14
    // 0x95a0d4: str             x0, [SP]
    // 0x95a0d8: mov             x0, x1
    // 0x95a0dc: r0 = GDT[cid_x0 + -0xf61]()
    //     0x95a0dc: sub             lr, x0, #0xf61
    //     0x95a0e0: ldr             lr, [x21, lr, lsl #3]
    //     0x95a0e4: blr             lr
    // 0x95a0e8: LoadField: r1 = r0->field_7
    //     0x95a0e8: ldur            x1, [x0, #7]
    // 0x95a0ec: cmp             x1, #2
    // 0x95a0f0: b.gt            #0x95a108
    // 0x95a0f4: cmp             x1, #1
    // 0x95a0f8: b.gt            #0x95a118
    // 0x95a0fc: cmp             x1, #0
    // 0x95a100: b.gt            #0x95a118
    // 0x95a104: b               #0x95a140
    // 0x95a108: cmp             x1, #4
    // 0x95a10c: b.gt            #0x95a118
    // 0x95a110: cmp             x1, #3
    // 0x95a114: b.gt            #0x95a150
    // 0x95a118: ldr             x0, [fp, #0x18]
    // 0x95a11c: LoadField: r1 = r0->field_b
    //     0x95a11c: ldur            w1, [x0, #0xb]
    // 0x95a120: DecompressPointer r1
    //     0x95a120: add             x1, x1, HEAP, lsl #32
    // 0x95a124: cmp             w1, NULL
    // 0x95a128: b.eq            #0x95a178
    // 0x95a12c: LoadField: r0 = r1->field_f
    //     0x95a12c: ldur            w0, [x1, #0xf]
    // 0x95a130: DecompressPointer r0
    //     0x95a130: add             x0, x0, HEAP, lsl #32
    // 0x95a134: str             x0, [SP]
    // 0x95a138: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x95a138: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x95a13c: r0 = unfocus()
    //     0x95a13c: bl              #0x5cce84  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::unfocus
    // 0x95a140: r0 = Null
    //     0x95a140: mov             x0, NULL
    // 0x95a144: LeaveFrame
    //     0x95a144: mov             SP, fp
    //     0x95a148: ldp             fp, lr, [SP], #0x10
    // 0x95a14c: ret
    //     0x95a14c: ret             
    // 0x95a150: r0 = UnimplementedError()
    //     0x95a150: bl              #0x545ec0  ; AllocateUnimplementedErrorStub -> UnimplementedError (size=0x10)
    // 0x95a154: mov             x1, x0
    // 0x95a158: r0 = "Unexpected pointer down event for trackpad"
    //     0x95a158: add             x0, PP, #0x41, lsl #12  ; [pp+0x411f8] "Unexpected pointer down event for trackpad"
    //     0x95a15c: ldr             x0, [x0, #0x1f8]
    // 0x95a160: StoreField: r1->field_b = r0
    //     0x95a160: stur            w0, [x1, #0xb]
    // 0x95a164: mov             x0, x1
    // 0x95a168: r0 = Throw()
    //     0x95a168: bl              #0xc5d2b8  ; ThrowStub
    // 0x95a16c: brk             #0
    // 0x95a170: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a170: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a174: b               #0x95a0c8
    // 0x95a178: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a178: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic, TextEditingValue) {
    // ** addr: 0x95a17c, size: 0x58
    // 0x95a17c: EnterFrame
    //     0x95a17c: stp             fp, lr, [SP, #-0x10]!
    //     0x95a180: mov             fp, SP
    // 0x95a184: AllocStack(0x18)
    //     0x95a184: sub             SP, SP, #0x18
    // 0x95a188: SetupParameters()
    //     0x95a188: ldr             x0, [fp, #0x18]
    //     0x95a18c: ldur            w1, [x0, #0x17]
    //     0x95a190: add             x1, x1, HEAP, lsl #32
    // 0x95a194: CheckStackOverflow
    //     0x95a194: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a198: cmp             SP, x16
    //     0x95a19c: b.ls            #0x95a1cc
    // 0x95a1a0: LoadField: r0 = r1->field_f
    //     0x95a1a0: ldur            w0, [x1, #0xf]
    // 0x95a1a4: DecompressPointer r0
    //     0x95a1a4: add             x0, x0, HEAP, lsl #32
    // 0x95a1a8: ldr             x16, [fp, #0x10]
    // 0x95a1ac: stp             x16, x0, [SP, #8]
    // 0x95a1b0: r16 = Instance_SelectionChangedCause
    //     0x95a1b0: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x95a1b4: str             x16, [SP]
    // 0x95a1b8: r0 = userUpdateTextEditingValue()
    //     0x95a1b8: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0x95a1bc: r0 = Null
    //     0x95a1bc: mov             x0, NULL
    // 0x95a1c0: LeaveFrame
    //     0x95a1c0: mov             SP, fp
    //     0x95a1c4: ldp             fp, lr, [SP], #0x10
    // 0x95a1c8: ret
    //     0x95a1c8: ret             
    // 0x95a1cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a1cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a1d0: b               #0x95a1a0
  }
  [closure] bool <anonymous closure>(dynamic, TextEditingValue?, TextEditingValue) {
    // ** addr: 0x95a1d4, size: 0x110
    // 0x95a1d4: EnterFrame
    //     0x95a1d4: stp             fp, lr, [SP, #-0x10]!
    //     0x95a1d8: mov             fp, SP
    // 0x95a1dc: AllocStack(0x10)
    //     0x95a1dc: sub             SP, SP, #0x10
    // 0x95a1e0: CheckStackOverflow
    //     0x95a1e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a1e4: cmp             SP, x16
    //     0x95a1e8: b.ls            #0x95a2dc
    // 0x95a1ec: ldr             x1, [fp, #0x10]
    // 0x95a1f0: LoadField: r0 = r1->field_b
    //     0x95a1f0: ldur            w0, [x1, #0xb]
    // 0x95a1f4: DecompressPointer r0
    //     0x95a1f4: add             x0, x0, HEAP, lsl #32
    // 0x95a1f8: LoadField: r2 = r0->field_7
    //     0x95a1f8: ldur            x2, [x0, #7]
    // 0x95a1fc: tbnz            x2, #0x3f, #0x95a2cc
    // 0x95a200: LoadField: r2 = r0->field_f
    //     0x95a200: ldur            x2, [x0, #0xf]
    // 0x95a204: tbnz            x2, #0x3f, #0x95a2cc
    // 0x95a208: ldr             x2, [fp, #0x18]
    // 0x95a20c: cmp             w2, NULL
    // 0x95a210: b.ne            #0x95a224
    // 0x95a214: r0 = true
    //     0x95a214: add             x0, NULL, #0x20  ; true
    // 0x95a218: LeaveFrame
    //     0x95a218: mov             SP, fp
    //     0x95a21c: ldp             fp, lr, [SP], #0x10
    // 0x95a220: ret
    //     0x95a220: ret             
    // 0x95a224: LoadField: r0 = r2->field_7
    //     0x95a224: ldur            w0, [x2, #7]
    // 0x95a228: DecompressPointer r0
    //     0x95a228: add             x0, x0, HEAP, lsl #32
    // 0x95a22c: LoadField: r3 = r1->field_7
    //     0x95a22c: ldur            w3, [x1, #7]
    // 0x95a230: DecompressPointer r3
    //     0x95a230: add             x3, x3, HEAP, lsl #32
    // 0x95a234: r4 = LoadClassIdInstr(r0)
    //     0x95a234: ldur            x4, [x0, #-1]
    //     0x95a238: ubfx            x4, x4, #0xc, #0x14
    // 0x95a23c: stp             x3, x0, [SP]
    // 0x95a240: mov             x0, x4
    // 0x95a244: mov             lr, x0
    // 0x95a248: ldr             lr, [x21, lr, lsl #3]
    // 0x95a24c: blr             lr
    // 0x95a250: tbz             w0, #4, #0x95a25c
    // 0x95a254: r0 = true
    //     0x95a254: add             x0, NULL, #0x20  ; true
    // 0x95a258: b               #0x95a2c0
    // 0x95a25c: ldr             x2, [fp, #0x18]
    // 0x95a260: ldr             x1, [fp, #0x10]
    // 0x95a264: LoadField: r3 = r2->field_f
    //     0x95a264: ldur            w3, [x2, #0xf]
    // 0x95a268: DecompressPointer r3
    //     0x95a268: add             x3, x3, HEAP, lsl #32
    // 0x95a26c: LoadField: r2 = r1->field_f
    //     0x95a26c: ldur            w2, [x1, #0xf]
    // 0x95a270: DecompressPointer r2
    //     0x95a270: add             x2, x2, HEAP, lsl #32
    // 0x95a274: cmp             w3, w2
    // 0x95a278: b.ne            #0x95a284
    // 0x95a27c: r1 = true
    //     0x95a27c: add             x1, NULL, #0x20  ; true
    // 0x95a280: b               #0x95a2b8
    // 0x95a284: LoadField: r1 = r2->field_7
    //     0x95a284: ldur            x1, [x2, #7]
    // 0x95a288: LoadField: r4 = r3->field_7
    //     0x95a288: ldur            x4, [x3, #7]
    // 0x95a28c: cmp             x1, x4
    // 0x95a290: b.ne            #0x95a2b4
    // 0x95a294: LoadField: r1 = r2->field_f
    //     0x95a294: ldur            x1, [x2, #0xf]
    // 0x95a298: LoadField: r2 = r3->field_f
    //     0x95a298: ldur            x2, [x3, #0xf]
    // 0x95a29c: cmp             x1, x2
    // 0x95a2a0: r16 = true
    //     0x95a2a0: add             x16, NULL, #0x20  ; true
    // 0x95a2a4: r17 = false
    //     0x95a2a4: add             x17, NULL, #0x30  ; false
    // 0x95a2a8: csel            x3, x16, x17, eq
    // 0x95a2ac: mov             x1, x3
    // 0x95a2b0: b               #0x95a2b8
    // 0x95a2b4: r1 = false
    //     0x95a2b4: add             x1, NULL, #0x30  ; false
    // 0x95a2b8: eor             x2, x1, #0x10
    // 0x95a2bc: mov             x0, x2
    // 0x95a2c0: LeaveFrame
    //     0x95a2c0: mov             SP, fp
    //     0x95a2c4: ldp             fp, lr, [SP], #0x10
    // 0x95a2c8: ret
    //     0x95a2c8: ret             
    // 0x95a2cc: r0 = false
    //     0x95a2cc: add             x0, NULL, #0x30  ; false
    // 0x95a2d0: LeaveFrame
    //     0x95a2d0: mov             SP, fp
    //     0x95a2d4: ldp             fp, lr, [SP], #0x10
    // 0x95a2d8: ret
    //     0x95a2d8: ret             
    // 0x95a2dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a2dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a2e0: b               #0x95a1ec
  }
  [closure] CompositedTransformTarget <anonymous closure>(dynamic, BuildContext, ViewportOffset) {
    // ** addr: 0x95a2e4, size: 0x514
    // 0x95a2e4: EnterFrame
    //     0x95a2e4: stp             fp, lr, [SP, #-0x10]!
    //     0x95a2e8: mov             fp, SP
    // 0x95a2ec: AllocStack(0x1d0)
    //     0x95a2ec: sub             SP, SP, #0x1d0
    // 0x95a2f0: SetupParameters()
    //     0x95a2f0: ldr             x0, [fp, #0x20]
    //     0x95a2f4: ldur            w2, [x0, #0x17]
    //     0x95a2f8: add             x2, x2, HEAP, lsl #32
    //     0x95a2fc: stur            x2, [fp, #-0x18]
    // 0x95a300: CheckStackOverflow
    //     0x95a300: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a304: cmp             SP, x16
    //     0x95a308: b.ls            #0x95a7bc
    // 0x95a30c: LoadField: r0 = r2->field_f
    //     0x95a30c: ldur            w0, [x2, #0xf]
    // 0x95a310: DecompressPointer r0
    //     0x95a310: add             x0, x0, HEAP, lsl #32
    // 0x95a314: LoadField: r1 = r0->field_4b
    //     0x95a314: ldur            w1, [x0, #0x4b]
    // 0x95a318: DecompressPointer r1
    //     0x95a318: add             x1, x1, HEAP, lsl #32
    // 0x95a31c: stur            x1, [fp, #-0x10]
    // 0x95a320: LoadField: r3 = r2->field_13
    //     0x95a320: ldur            w3, [x2, #0x13]
    // 0x95a324: DecompressPointer r3
    //     0x95a324: add             x3, x3, HEAP, lsl #32
    // 0x95a328: stur            x3, [fp, #-8]
    // 0x95a32c: stp             x3, x0, [SP]
    // 0x95a330: r0 = _semanticsOnCopy()
    //     0x95a330: bl              #0x95ba04  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCopy
    // 0x95a334: ldur            x2, [fp, #-0x18]
    // 0x95a338: stur            x0, [fp, #-0x20]
    // 0x95a33c: LoadField: r1 = r2->field_f
    //     0x95a33c: ldur            w1, [x2, #0xf]
    // 0x95a340: DecompressPointer r1
    //     0x95a340: add             x1, x1, HEAP, lsl #32
    // 0x95a344: ldur            x16, [fp, #-8]
    // 0x95a348: stp             x16, x1, [SP]
    // 0x95a34c: r0 = _semanticsOnCut()
    //     0x95a34c: bl              #0x95b82c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCut
    // 0x95a350: ldur            x2, [fp, #-0x18]
    // 0x95a354: stur            x0, [fp, #-0x28]
    // 0x95a358: LoadField: r1 = r2->field_f
    //     0x95a358: ldur            w1, [x2, #0xf]
    // 0x95a35c: DecompressPointer r1
    //     0x95a35c: add             x1, x1, HEAP, lsl #32
    // 0x95a360: ldur            x16, [fp, #-8]
    // 0x95a364: stp             x16, x1, [SP]
    // 0x95a368: r0 = _semanticsOnPaste()
    //     0x95a368: bl              #0x95b634  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnPaste
    // 0x95a36c: ldur            x2, [fp, #-0x18]
    // 0x95a370: stur            x0, [fp, #-0x48]
    // 0x95a374: LoadField: r1 = r2->field_f
    //     0x95a374: ldur            w1, [x2, #0xf]
    // 0x95a378: DecompressPointer r1
    //     0x95a378: add             x1, x1, HEAP, lsl #32
    // 0x95a37c: LoadField: r3 = r1->field_b
    //     0x95a37c: ldur            w3, [x1, #0xb]
    // 0x95a380: DecompressPointer r3
    //     0x95a380: add             x3, x3, HEAP, lsl #32
    // 0x95a384: cmp             w3, NULL
    // 0x95a388: b.eq            #0x95a7c4
    // 0x95a38c: LoadField: r4 = r3->field_f
    //     0x95a38c: ldur            w4, [x3, #0xf]
    // 0x95a390: DecompressPointer r4
    //     0x95a390: add             x4, x4, HEAP, lsl #32
    // 0x95a394: stur            x4, [fp, #-0x40]
    // 0x95a398: LoadField: r3 = r1->field_2f
    //     0x95a398: ldur            w3, [x1, #0x2f]
    // 0x95a39c: DecompressPointer r3
    //     0x95a39c: add             x3, x3, HEAP, lsl #32
    // 0x95a3a0: stur            x3, [fp, #-0x38]
    // 0x95a3a4: LoadField: r5 = r1->field_4f
    //     0x95a3a4: ldur            w5, [x1, #0x4f]
    // 0x95a3a8: DecompressPointer r5
    //     0x95a3a8: add             x5, x5, HEAP, lsl #32
    // 0x95a3ac: stur            x5, [fp, #-0x30]
    // 0x95a3b0: LoadField: r6 = r1->field_53
    //     0x95a3b0: ldur            w6, [x1, #0x53]
    // 0x95a3b4: DecompressPointer r6
    //     0x95a3b4: add             x6, x6, HEAP, lsl #32
    // 0x95a3b8: stur            x6, [fp, #-8]
    // 0x95a3bc: str             x1, [SP]
    // 0x95a3c0: r0 = buildTextSpan()
    //     0x95a3c0: bl              #0x95adac  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::buildTextSpan
    // 0x95a3c4: ldur            x2, [fp, #-0x18]
    // 0x95a3c8: stur            x0, [fp, #-0x58]
    // 0x95a3cc: LoadField: r1 = r2->field_f
    //     0x95a3cc: ldur            w1, [x2, #0xf]
    // 0x95a3d0: DecompressPointer r1
    //     0x95a3d0: add             x1, x1, HEAP, lsl #32
    // 0x95a3d4: LoadField: r3 = r1->field_b
    //     0x95a3d4: ldur            w3, [x1, #0xb]
    // 0x95a3d8: DecompressPointer r3
    //     0x95a3d8: add             x3, x3, HEAP, lsl #32
    // 0x95a3dc: cmp             w3, NULL
    // 0x95a3e0: b.eq            #0x95a7c8
    // 0x95a3e4: LoadField: r4 = r3->field_b
    //     0x95a3e4: ldur            w4, [x3, #0xb]
    // 0x95a3e8: DecompressPointer r4
    //     0x95a3e8: add             x4, x4, HEAP, lsl #32
    // 0x95a3ec: LoadField: r3 = r4->field_27
    //     0x95a3ec: ldur            w3, [x4, #0x27]
    // 0x95a3f0: DecompressPointer r3
    //     0x95a3f0: add             x3, x3, HEAP, lsl #32
    // 0x95a3f4: stur            x3, [fp, #-0x50]
    // 0x95a3f8: str             x1, [SP]
    // 0x95a3fc: r0 = _cursorColor()
    //     0x95a3fc: bl              #0x95ad24  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorColor
    // 0x95a400: ldur            x2, [fp, #-0x18]
    // 0x95a404: stur            x0, [fp, #-0x70]
    // 0x95a408: LoadField: r1 = r2->field_f
    //     0x95a408: ldur            w1, [x2, #0xf]
    // 0x95a40c: DecompressPointer r1
    //     0x95a40c: add             x1, x1, HEAP, lsl #32
    // 0x95a410: LoadField: r3 = r1->field_b
    //     0x95a410: ldur            w3, [x1, #0xb]
    // 0x95a414: DecompressPointer r3
    //     0x95a414: add             x3, x3, HEAP, lsl #32
    // 0x95a418: cmp             w3, NULL
    // 0x95a41c: b.eq            #0x95a7cc
    // 0x95a420: LoadField: r4 = r1->field_2b
    //     0x95a420: ldur            w4, [x1, #0x2b]
    // 0x95a424: DecompressPointer r4
    //     0x95a424: add             x4, x4, HEAP, lsl #32
    // 0x95a428: stur            x4, [fp, #-0x68]
    // 0x95a42c: LoadField: r1 = r3->field_23
    //     0x95a42c: ldur            w1, [x3, #0x23]
    // 0x95a430: DecompressPointer r1
    //     0x95a430: add             x1, x1, HEAP, lsl #32
    // 0x95a434: stur            x1, [fp, #-0x60]
    // 0x95a438: LoadField: r5 = r3->field_f
    //     0x95a438: ldur            w5, [x3, #0xf]
    // 0x95a43c: DecompressPointer r5
    //     0x95a43c: add             x5, x5, HEAP, lsl #32
    // 0x95a440: str             x5, [SP]
    // 0x95a444: r0 = hasFocus()
    //     0x95a444: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x95a448: ldur            x2, [fp, #-0x18]
    // 0x95a44c: stur            x0, [fp, #-0x90]
    // 0x95a450: LoadField: r1 = r2->field_f
    //     0x95a450: ldur            w1, [x2, #0xf]
    // 0x95a454: DecompressPointer r1
    //     0x95a454: add             x1, x1, HEAP, lsl #32
    // 0x95a458: LoadField: r3 = r1->field_b
    //     0x95a458: ldur            w3, [x1, #0xb]
    // 0x95a45c: DecompressPointer r3
    //     0x95a45c: add             x3, x3, HEAP, lsl #32
    // 0x95a460: cmp             w3, NULL
    // 0x95a464: b.eq            #0x95a7d0
    // 0x95a468: LoadField: r1 = r3->field_73
    //     0x95a468: ldur            x1, [x3, #0x73]
    // 0x95a46c: stur            x1, [fp, #-0x88]
    // 0x95a470: LoadField: r4 = r3->field_7b
    //     0x95a470: ldur            w4, [x3, #0x7b]
    // 0x95a474: DecompressPointer r4
    //     0x95a474: add             x4, x4, HEAP, lsl #32
    // 0x95a478: stur            x4, [fp, #-0x80]
    // 0x95a47c: LoadField: r5 = r3->field_47
    //     0x95a47c: ldur            w5, [x3, #0x47]
    // 0x95a480: DecompressPointer r5
    //     0x95a480: add             x5, x5, HEAP, lsl #32
    // 0x95a484: stur            x5, [fp, #-0x78]
    // 0x95a488: r0 = StrutStyle()
    //     0x95a488: bl              #0x95ad18  ; AllocateStrutStyleStub -> StrutStyle (size=0x2c)
    // 0x95a48c: stur            x0, [fp, #-0x98]
    // 0x95a490: ldur            x16, [fp, #-0x78]
    // 0x95a494: stp             x16, x0, [SP]
    // 0x95a498: r0 = StrutStyle.fromTextStyle()
    //     0x95a498: bl              #0x95ac1c  ; [package:flutter/src/painting/strut_style.dart] StrutStyle::StrutStyle.fromTextStyle
    // 0x95a49c: ldur            x2, [fp, #-0x18]
    // 0x95a4a0: LoadField: r0 = r2->field_f
    //     0x95a4a0: ldur            w0, [x2, #0xf]
    // 0x95a4a4: DecompressPointer r0
    //     0x95a4a4: add             x0, x0, HEAP, lsl #32
    // 0x95a4a8: LoadField: r1 = r0->field_3f
    //     0x95a4a8: ldur            w1, [x0, #0x3f]
    // 0x95a4ac: DecompressPointer r1
    //     0x95a4ac: add             x1, x1, HEAP, lsl #32
    // 0x95a4b0: cmp             w1, NULL
    // 0x95a4b4: b.ne            #0x95a4c0
    // 0x95a4b8: r0 = Null
    //     0x95a4b8: mov             x0, NULL
    // 0x95a4bc: b               #0x95a4c8
    // 0x95a4c0: str             x1, [SP]
    // 0x95a4c4: r0 = spellCheckToolbarIsVisible()
    //     0x95a4c4: bl              #0x95abc8  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::spellCheckToolbarIsVisible
    // 0x95a4c8: cmp             w0, NULL
    // 0x95a4cc: b.ne            #0x95a4d8
    // 0x95a4d0: ldur            x2, [fp, #-0x18]
    // 0x95a4d4: b               #0x95a51c
    // 0x95a4d8: tbnz            w0, #4, #0x95a518
    // 0x95a4dc: ldur            x2, [fp, #-0x18]
    // 0x95a4e0: LoadField: r0 = r2->field_f
    //     0x95a4e0: ldur            w0, [x2, #0xf]
    // 0x95a4e4: DecompressPointer r0
    //     0x95a4e4: add             x0, x0, HEAP, lsl #32
    // 0x95a4e8: LoadField: r1 = r0->field_5f
    //     0x95a4e8: ldur            w1, [x0, #0x5f]
    // 0x95a4ec: DecompressPointer r1
    //     0x95a4ec: add             x1, x1, HEAP, lsl #32
    // 0x95a4f0: r16 = Sentinel
    //     0x95a4f0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95a4f4: cmp             w1, w16
    // 0x95a4f8: b.eq            #0x95a7d4
    // 0x95a4fc: LoadField: r1 = r0->field_b
    //     0x95a4fc: ldur            w1, [x0, #0xb]
    // 0x95a500: DecompressPointer r1
    //     0x95a500: add             x1, x1, HEAP, lsl #32
    // 0x95a504: cmp             w1, NULL
    // 0x95a508: b.eq            #0x95a7dc
    // 0x95a50c: LoadField: r0 = r1->field_87
    //     0x95a50c: ldur            w0, [x1, #0x87]
    // 0x95a510: DecompressPointer r0
    //     0x95a510: add             x0, x0, HEAP, lsl #32
    // 0x95a514: b               #0x95a53c
    // 0x95a518: ldur            x2, [fp, #-0x18]
    // 0x95a51c: LoadField: r0 = r2->field_f
    //     0x95a51c: ldur            w0, [x2, #0xf]
    // 0x95a520: DecompressPointer r0
    //     0x95a520: add             x0, x0, HEAP, lsl #32
    // 0x95a524: LoadField: r1 = r0->field_b
    //     0x95a524: ldur            w1, [x0, #0xb]
    // 0x95a528: DecompressPointer r1
    //     0x95a528: add             x1, x1, HEAP, lsl #32
    // 0x95a52c: cmp             w1, NULL
    // 0x95a530: b.eq            #0x95a7e0
    // 0x95a534: LoadField: r0 = r1->field_87
    //     0x95a534: ldur            w0, [x1, #0x87]
    // 0x95a538: DecompressPointer r0
    //     0x95a538: add             x0, x0, HEAP, lsl #32
    // 0x95a53c: stur            x0, [fp, #-0x78]
    // 0x95a540: ldr             x16, [fp, #0x18]
    // 0x95a544: str             x16, [SP]
    // 0x95a548: r0 = textScaleFactorOf()
    //     0x95a548: bl              #0x93e540  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::textScaleFactorOf
    // 0x95a54c: ldur            x2, [fp, #-0x18]
    // 0x95a550: stur            d0, [fp, #-0xe8]
    // 0x95a554: LoadField: r0 = r2->field_f
    //     0x95a554: ldur            w0, [x2, #0xf]
    // 0x95a558: DecompressPointer r0
    //     0x95a558: add             x0, x0, HEAP, lsl #32
    // 0x95a55c: LoadField: r1 = r0->field_b
    //     0x95a55c: ldur            w1, [x0, #0xb]
    // 0x95a560: DecompressPointer r1
    //     0x95a560: add             x1, x1, HEAP, lsl #32
    // 0x95a564: cmp             w1, NULL
    // 0x95a568: b.eq            #0x95a7e4
    // 0x95a56c: LoadField: r3 = r1->field_53
    //     0x95a56c: ldur            w3, [x1, #0x53]
    // 0x95a570: DecompressPointer r3
    //     0x95a570: add             x3, x3, HEAP, lsl #32
    // 0x95a574: stur            x3, [fp, #-0xa0]
    // 0x95a578: LoadField: r1 = r0->field_f
    //     0x95a578: ldur            w1, [x0, #0xf]
    // 0x95a57c: DecompressPointer r1
    //     0x95a57c: add             x1, x1, HEAP, lsl #32
    // 0x95a580: cmp             w1, NULL
    // 0x95a584: b.eq            #0x95a7e8
    // 0x95a588: str             x1, [SP]
    // 0x95a58c: r0 = of()
    //     0x95a58c: bl              #0x5d9e00  ; [package:flutter/src/widgets/basic.dart] Directionality::of
    // 0x95a590: ldur            x2, [fp, #-0x18]
    // 0x95a594: stur            x0, [fp, #-0xa8]
    // 0x95a598: LoadField: r1 = r2->field_f
    //     0x95a598: ldur            w1, [x2, #0xf]
    // 0x95a59c: DecompressPointer r1
    //     0x95a59c: add             x1, x1, HEAP, lsl #32
    // 0x95a5a0: LoadField: r3 = r1->field_b
    //     0x95a5a0: ldur            w3, [x1, #0xb]
    // 0x95a5a4: DecompressPointer r3
    //     0x95a5a4: add             x3, x3, HEAP, lsl #32
    // 0x95a5a8: cmp             w3, NULL
    // 0x95a5ac: b.eq            #0x95a7ec
    // 0x95a5b0: ldr             x16, [fp, #0x18]
    // 0x95a5b4: str             x16, [SP]
    // 0x95a5b8: r0 = maybeOf()
    //     0x95a5b8: bl              #0x95ab80  ; [package:flutter/src/widgets/text.dart] DefaultTextHeightBehavior::maybeOf
    // 0x95a5bc: ldur            x2, [fp, #-0x18]
    // 0x95a5c0: LoadField: r0 = r2->field_f
    //     0x95a5c0: ldur            w0, [x2, #0xf]
    // 0x95a5c4: DecompressPointer r0
    //     0x95a5c4: add             x0, x0, HEAP, lsl #32
    // 0x95a5c8: LoadField: r1 = r0->field_b
    //     0x95a5c8: ldur            w1, [x0, #0xb]
    // 0x95a5cc: DecompressPointer r1
    //     0x95a5cc: add             x1, x1, HEAP, lsl #32
    // 0x95a5d0: cmp             w1, NULL
    // 0x95a5d4: b.eq            #0x95a7f0
    // 0x95a5d8: LoadField: d0 = r1->field_bf
    //     0x95a5d8: ldur            d0, [x1, #0xbf]
    // 0x95a5dc: stur            d0, [fp, #-0xf0]
    // 0x95a5e0: LoadField: r3 = r1->field_cb
    //     0x95a5e0: ldur            w3, [x1, #0xcb]
    // 0x95a5e4: DecompressPointer r3
    //     0x95a5e4: add             x3, x3, HEAP, lsl #32
    // 0x95a5e8: stur            x3, [fp, #-0xc0]
    // 0x95a5ec: LoadField: r4 = r1->field_d3
    //     0x95a5ec: ldur            w4, [x1, #0xd3]
    // 0x95a5f0: DecompressPointer r4
    //     0x95a5f0: add             x4, x4, HEAP, lsl #32
    // 0x95a5f4: cmp             w4, NULL
    // 0x95a5f8: b.ne            #0x95a604
    // 0x95a5fc: r8 = Instance_Offset
    //     0x95a5fc: ldr             x8, [PP, #0x4010]  ; [pp+0x4010] Obj!Offset@c3cb91
    // 0x95a600: b               #0x95a608
    // 0x95a604: mov             x8, x4
    // 0x95a608: ldur            x7, [fp, #-0x10]
    // 0x95a60c: ldur            x5, [fp, #-0x40]
    // 0x95a610: ldur            x6, [fp, #-0x38]
    // 0x95a614: ldur            x4, [fp, #-0x88]
    // 0x95a618: ldur            d1, [fp, #-0xe8]
    // 0x95a61c: stur            x8, [fp, #-0xb8]
    // 0x95a620: LoadField: r9 = r1->field_d7
    //     0x95a620: ldur            w9, [x1, #0xd7]
    // 0x95a624: DecompressPointer r9
    //     0x95a624: add             x9, x9, HEAP, lsl #32
    // 0x95a628: stur            x9, [fp, #-0xb0]
    // 0x95a62c: str             x0, [SP]
    // 0x95a630: r0 = _devicePixelRatio()
    //     0x95a630: bl              #0x95ab34  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_devicePixelRatio
    // 0x95a634: ldur            x2, [fp, #-0x18]
    // 0x95a638: stur            d0, [fp, #-0xf8]
    // 0x95a63c: LoadField: r0 = r2->field_f
    //     0x95a63c: ldur            w0, [x2, #0xf]
    // 0x95a640: DecompressPointer r0
    //     0x95a640: add             x0, x0, HEAP, lsl #32
    // 0x95a644: stur            x0, [fp, #-0xd8]
    // 0x95a648: LoadField: r1 = r0->field_b3
    //     0x95a648: ldur            w1, [x0, #0xb3]
    // 0x95a64c: DecompressPointer r1
    //     0x95a64c: add             x1, x1, HEAP, lsl #32
    // 0x95a650: stur            x1, [fp, #-0xd0]
    // 0x95a654: LoadField: r3 = r0->field_b
    //     0x95a654: ldur            w3, [x0, #0xb]
    // 0x95a658: DecompressPointer r3
    //     0x95a658: add             x3, x3, HEAP, lsl #32
    // 0x95a65c: cmp             w3, NULL
    // 0x95a660: b.eq            #0x95a7f4
    // 0x95a664: LoadField: r4 = r3->field_6b
    //     0x95a664: ldur            w4, [x3, #0x6b]
    // 0x95a668: DecompressPointer r4
    //     0x95a668: add             x4, x4, HEAP, lsl #32
    // 0x95a66c: stur            x4, [fp, #-0xc8]
    // 0x95a670: r0 = _Editable()
    //     0x95a670: bl              #0x95ab28  ; Allocate_EditableStub -> _Editable (size=0xb8)
    // 0x95a674: stur            x0, [fp, #-0xe0]
    // 0x95a678: ldur            x16, [fp, #-0x70]
    // 0x95a67c: stp             x16, x0, [SP, #0xc8]
    // 0x95a680: ldur            x16, [fp, #-0xb8]
    // 0x95a684: ldur            lr, [fp, #-0xc0]
    // 0x95a688: stp             lr, x16, [SP, #0xb8]
    // 0x95a68c: ldur            d0, [fp, #-0xf0]
    // 0x95a690: str             d0, [SP, #0xb0]
    // 0x95a694: ldur            d0, [fp, #-0xf8]
    // 0x95a698: str             d0, [SP, #0xa8]
    // 0x95a69c: r16 = true
    //     0x95a69c: add             x16, NULL, #0x20  ; true
    // 0x95a6a0: ldur            lr, [fp, #-8]
    // 0x95a6a4: stp             lr, x16, [SP, #0x98]
    // 0x95a6a8: ldur            x16, [fp, #-0x90]
    // 0x95a6ac: ldur            lr, [fp, #-0x58]
    // 0x95a6b0: stp             lr, x16, [SP, #0x88]
    // 0x95a6b4: ldur            x16, [fp, #-0x38]
    // 0x95a6b8: str             x16, [SP, #0x80]
    // 0x95a6bc: ldur            x1, [fp, #-0x88]
    // 0x95a6c0: ldur            x16, [fp, #-0x80]
    // 0x95a6c4: stp             x16, x1, [SP, #0x70]
    // 0x95a6c8: ldr             x16, [fp, #0x10]
    // 0x95a6cc: ldur            lr, [fp, #-0xb0]
    // 0x95a6d0: stp             lr, x16, [SP, #0x60]
    // 0x95a6d4: ldur            x16, [fp, #-0xc8]
    // 0x95a6d8: ldur            lr, [fp, #-0xd0]
    // 0x95a6dc: stp             lr, x16, [SP, #0x50]
    // 0x95a6e0: ldur            x16, [fp, #-0x60]
    // 0x95a6e4: ldur            lr, [fp, #-0x78]
    // 0x95a6e8: stp             lr, x16, [SP, #0x40]
    // 0x95a6ec: ldur            x16, [fp, #-0x68]
    // 0x95a6f0: ldur            lr, [fp, #-0x30]
    // 0x95a6f4: stp             lr, x16, [SP, #0x30]
    // 0x95a6f8: ldur            x16, [fp, #-0x98]
    // 0x95a6fc: ldur            lr, [fp, #-0xa0]
    // 0x95a700: stp             lr, x16, [SP, #0x20]
    // 0x95a704: ldur            x16, [fp, #-0xa8]
    // 0x95a708: str             x16, [SP, #0x18]
    // 0x95a70c: ldur            d0, [fp, #-0xe8]
    // 0x95a710: str             d0, [SP, #0x10]
    // 0x95a714: ldur            x16, [fp, #-0xd8]
    // 0x95a718: ldur            lr, [fp, #-0x50]
    // 0x95a71c: stp             lr, x16, [SP]
    // 0x95a720: r0 = _Editable()
    //     0x95a720: bl              #0x95a804  ; [package:flutter/src/widgets/editable_text.dart] _Editable::_Editable
    // 0x95a724: r0 = _ScribbleFocusable()
    //     0x95a724: bl              #0x95a7f8  ; Allocate_ScribbleFocusableStub -> _ScribbleFocusable (size=0x20)
    // 0x95a728: mov             x3, x0
    // 0x95a72c: ldur            x0, [fp, #-0xe0]
    // 0x95a730: stur            x3, [fp, #-8]
    // 0x95a734: StoreField: r3->field_b = r0
    //     0x95a734: stur            w0, [x3, #0xb]
    // 0x95a738: ldur            x0, [fp, #-0x40]
    // 0x95a73c: StoreField: r3->field_f = r0
    //     0x95a73c: stur            w0, [x3, #0xf]
    // 0x95a740: ldur            x0, [fp, #-0x38]
    // 0x95a744: StoreField: r3->field_13 = r0
    //     0x95a744: stur            w0, [x3, #0x13]
    // 0x95a748: ldur            x2, [fp, #-0x18]
    // 0x95a74c: r1 = Function '<anonymous closure>':.
    //     0x95a74c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41200] AnonymousClosure: (0x95bbdc), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::build (0x959b50)
    //     0x95a750: ldr             x1, [x1, #0x200]
    // 0x95a754: r0 = AllocateClosure()
    //     0x95a754: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x95a758: mov             x1, x0
    // 0x95a75c: ldur            x0, [fp, #-8]
    // 0x95a760: ArrayStore: r0[0] = r1  ; List_4
    //     0x95a760: stur            w1, [x0, #0x17]
    // 0x95a764: r1 = true
    //     0x95a764: add             x1, NULL, #0x20  ; true
    // 0x95a768: StoreField: r0->field_1b = r1
    //     0x95a768: stur            w1, [x0, #0x1b]
    // 0x95a76c: r0 = Semantics()
    //     0x95a76c: bl              #0x60a9b0  ; AllocateSemanticsStub -> Semantics (size=0x24)
    // 0x95a770: stur            x0, [fp, #-0x18]
    // 0x95a774: ldur            x16, [fp, #-0x20]
    // 0x95a778: stp             x16, x0, [SP, #0x18]
    // 0x95a77c: ldur            x16, [fp, #-0x28]
    // 0x95a780: ldur            lr, [fp, #-0x48]
    // 0x95a784: stp             lr, x16, [SP, #8]
    // 0x95a788: ldur            x16, [fp, #-8]
    // 0x95a78c: str             x16, [SP]
    // 0x95a790: r4 = const [0, 0x5, 0x5, 0x1, child, 0x4, onCopy, 0x1, onCut, 0x2, onPaste, 0x3, null]
    //     0x95a790: add             x4, PP, #0x41, lsl #12  ; [pp+0x41208] List(13) [0, 0x5, 0x5, 0x1, "child", 0x4, "onCopy", 0x1, "onCut", 0x2, "onPaste", 0x3, Null]
    //     0x95a794: ldr             x4, [x4, #0x208]
    // 0x95a798: r0 = Semantics()
    //     0x95a798: bl              #0x609c34  ; [package:flutter/src/widgets/basic.dart] Semantics::Semantics
    // 0x95a79c: r0 = CompositedTransformTarget()
    //     0x95a79c: bl              #0x949dd0  ; AllocateCompositedTransformTargetStub -> CompositedTransformTarget (size=0x14)
    // 0x95a7a0: ldur            x1, [fp, #-0x10]
    // 0x95a7a4: StoreField: r0->field_f = r1
    //     0x95a7a4: stur            w1, [x0, #0xf]
    // 0x95a7a8: ldur            x1, [fp, #-0x18]
    // 0x95a7ac: StoreField: r0->field_b = r1
    //     0x95a7ac: stur            w1, [x0, #0xb]
    // 0x95a7b0: LeaveFrame
    //     0x95a7b0: mov             SP, fp
    //     0x95a7b4: ldp             fp, lr, [SP], #0x10
    // 0x95a7b8: ret
    //     0x95a7b8: ret             
    // 0x95a7bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95a7bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95a7c0: b               #0x95a30c
    // 0x95a7c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7c8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7c8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7cc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7d4: r9 = _spellCheckConfiguration
    //     0x95a7d4: ldr             x9, [PP, #0x63c0]  ; [pp+0x63c0] Field <EditableTextState._spellCheckConfiguration@244183791>: late (offset: 0x60)
    // 0x95a7d8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x95a7d8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x95a7dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7dc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7e4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x95a7e4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x95a7e8: r0 = NullCastErrorSharedWithFPURegs()
    //     0x95a7e8: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x95a7ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7ec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95a7f0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95a7f4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x95a7f4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  get _ _devicePixelRatio(/* No info */) {
    // ** addr: 0x95ab34, size: 0x4c
    // 0x95ab34: EnterFrame
    //     0x95ab34: stp             fp, lr, [SP, #-0x10]!
    //     0x95ab38: mov             fp, SP
    // 0x95ab3c: AllocStack(0x8)
    //     0x95ab3c: sub             SP, SP, #8
    // 0x95ab40: CheckStackOverflow
    //     0x95ab40: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95ab44: cmp             SP, x16
    //     0x95ab48: b.ls            #0x95ab74
    // 0x95ab4c: ldr             x0, [fp, #0x10]
    // 0x95ab50: LoadField: r1 = r0->field_f
    //     0x95ab50: ldur            w1, [x0, #0xf]
    // 0x95ab54: DecompressPointer r1
    //     0x95ab54: add             x1, x1, HEAP, lsl #32
    // 0x95ab58: cmp             w1, NULL
    // 0x95ab5c: b.eq            #0x95ab7c
    // 0x95ab60: str             x1, [SP]
    // 0x95ab64: r0 = devicePixelRatioOf()
    //     0x95ab64: bl              #0x9289bc  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::devicePixelRatioOf
    // 0x95ab68: LeaveFrame
    //     0x95ab68: mov             SP, fp
    //     0x95ab6c: ldp             fp, lr, [SP], #0x10
    // 0x95ab70: ret
    //     0x95ab70: ret             
    // 0x95ab74: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95ab74: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95ab78: b               #0x95ab4c
    // 0x95ab7c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95ab7c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _cursorColor(/* No info */) {
    // ** addr: 0x95ad24, size: 0x88
    // 0x95ad24: EnterFrame
    //     0x95ad24: stp             fp, lr, [SP, #-0x10]!
    //     0x95ad28: mov             fp, SP
    // 0x95ad2c: AllocStack(0x18)
    //     0x95ad2c: sub             SP, SP, #0x18
    // 0x95ad30: CheckStackOverflow
    //     0x95ad30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95ad34: cmp             SP, x16
    //     0x95ad38: b.ls            #0x95ad98
    // 0x95ad3c: ldr             x0, [fp, #0x10]
    // 0x95ad40: LoadField: r1 = r0->field_b
    //     0x95ad40: ldur            w1, [x0, #0xb]
    // 0x95ad44: DecompressPointer r1
    //     0x95ad44: add             x1, x1, HEAP, lsl #32
    // 0x95ad48: cmp             w1, NULL
    // 0x95ad4c: b.eq            #0x95ada0
    // 0x95ad50: LoadField: r2 = r1->field_67
    //     0x95ad50: ldur            w2, [x1, #0x67]
    // 0x95ad54: DecompressPointer r2
    //     0x95ad54: add             x2, x2, HEAP, lsl #32
    // 0x95ad58: stur            x2, [fp, #-8]
    // 0x95ad5c: str             x0, [SP]
    // 0x95ad60: r0 = _cursorBlinkOpacityController()
    //     0x95ad60: bl              #0x5d1124  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_cursorBlinkOpacityController
    // 0x95ad64: LoadField: r1 = r0->field_37
    //     0x95ad64: ldur            w1, [x0, #0x37]
    // 0x95ad68: DecompressPointer r1
    //     0x95ad68: add             x1, x1, HEAP, lsl #32
    // 0x95ad6c: r16 = Sentinel
    //     0x95ad6c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95ad70: cmp             w1, w16
    // 0x95ad74: b.eq            #0x95ada4
    // 0x95ad78: LoadField: d0 = r1->field_7
    //     0x95ad78: ldur            d0, [x1, #7]
    // 0x95ad7c: ldur            x16, [fp, #-8]
    // 0x95ad80: str             x16, [SP, #8]
    // 0x95ad84: str             d0, [SP]
    // 0x95ad88: r0 = withOpacity()
    //     0x95ad88: bl              #0x5d14c4  ; [dart:ui] Color::withOpacity
    // 0x95ad8c: LeaveFrame
    //     0x95ad8c: mov             SP, fp
    //     0x95ad90: ldp             fp, lr, [SP], #0x10
    // 0x95ad94: ret
    //     0x95ad94: ret             
    // 0x95ad98: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95ad98: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95ad9c: b               #0x95ad3c
    // 0x95ada0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95ada0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95ada4: r9 = _value
    //     0x95ada4: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x95ada8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x95ada8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ buildTextSpan(/* No info */) {
    // ** addr: 0x95adac, size: 0x564
    // 0x95adac: EnterFrame
    //     0x95adac: stp             fp, lr, [SP, #-0x10]!
    //     0x95adb0: mov             fp, SP
    // 0x95adb4: AllocStack(0x48)
    //     0x95adb4: sub             SP, SP, #0x48
    // 0x95adb8: CheckStackOverflow
    //     0x95adb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95adbc: cmp             SP, x16
    //     0x95adc0: b.ls            #0x95b2c8
    // 0x95adc4: ldr             x1, [fp, #0x10]
    // 0x95adc8: LoadField: r0 = r1->field_b
    //     0x95adc8: ldur            w0, [x1, #0xb]
    // 0x95adcc: DecompressPointer r0
    //     0x95adcc: add             x0, x0, HEAP, lsl #32
    // 0x95add0: cmp             w0, NULL
    // 0x95add4: b.eq            #0x95b2d0
    // 0x95add8: LoadField: r2 = r1->field_ab
    //     0x95add8: ldur            x2, [x1, #0xab]
    // 0x95addc: tbnz            x2, #0x3f, #0x95b234
    // 0x95ade0: LoadField: r3 = r0->field_b
    //     0x95ade0: ldur            w3, [x0, #0xb]
    // 0x95ade4: DecompressPointer r3
    //     0x95ade4: add             x3, x3, HEAP, lsl #32
    // 0x95ade8: LoadField: r4 = r3->field_27
    //     0x95ade8: ldur            w4, [x3, #0x27]
    // 0x95adec: DecompressPointer r4
    //     0x95adec: add             x4, x4, HEAP, lsl #32
    // 0x95adf0: LoadField: r3 = r4->field_7
    //     0x95adf0: ldur            w3, [x4, #7]
    // 0x95adf4: DecompressPointer r3
    //     0x95adf4: add             x3, x3, HEAP, lsl #32
    // 0x95adf8: LoadField: r4 = r3->field_7
    //     0x95adf8: ldur            w4, [x3, #7]
    // 0x95adfc: DecompressPointer r4
    //     0x95adfc: add             x4, x4, HEAP, lsl #32
    // 0x95ae00: r3 = LoadInt32Instr(r4)
    //     0x95ae00: sbfx            x3, x4, #1, #0x1f
    // 0x95ae04: cmp             x2, x3
    // 0x95ae08: b.gt            #0x95b234
    // 0x95ae0c: r16 = <_ScribblePlaceholder>
    //     0x95ae0c: add             x16, PP, #0x41, lsl #12  ; [pp+0x41218] TypeArguments: <_ScribblePlaceholder>
    //     0x95ae10: ldr             x16, [x16, #0x218]
    // 0x95ae14: stp             xzr, x16, [SP]
    // 0x95ae18: r0 = _GrowableList()
    //     0x95ae18: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x95ae1c: ldr             x1, [fp, #0x10]
    // 0x95ae20: stur            x0, [fp, #-0x18]
    // 0x95ae24: LoadField: r2 = r1->field_b
    //     0x95ae24: ldur            w2, [x1, #0xb]
    // 0x95ae28: DecompressPointer r2
    //     0x95ae28: add             x2, x2, HEAP, lsl #32
    // 0x95ae2c: cmp             w2, NULL
    // 0x95ae30: b.eq            #0x95b2d4
    // 0x95ae34: LoadField: r3 = r2->field_b
    //     0x95ae34: ldur            w3, [x2, #0xb]
    // 0x95ae38: DecompressPointer r3
    //     0x95ae38: add             x3, x3, HEAP, lsl #32
    // 0x95ae3c: LoadField: r4 = r3->field_27
    //     0x95ae3c: ldur            w4, [x3, #0x27]
    // 0x95ae40: DecompressPointer r4
    //     0x95ae40: add             x4, x4, HEAP, lsl #32
    // 0x95ae44: LoadField: r3 = r4->field_7
    //     0x95ae44: ldur            w3, [x4, #7]
    // 0x95ae48: DecompressPointer r3
    //     0x95ae48: add             x3, x3, HEAP, lsl #32
    // 0x95ae4c: LoadField: r4 = r3->field_7
    //     0x95ae4c: ldur            w4, [x3, #7]
    // 0x95ae50: DecompressPointer r4
    //     0x95ae50: add             x4, x4, HEAP, lsl #32
    // 0x95ae54: LoadField: r3 = r1->field_ab
    //     0x95ae54: ldur            x3, [x1, #0xab]
    // 0x95ae58: r5 = LoadInt32Instr(r4)
    //     0x95ae58: sbfx            x5, x4, #1, #0x1f
    // 0x95ae5c: sub             x4, x5, x3
    // 0x95ae60: stur            x4, [fp, #-0x10]
    // 0x95ae64: LoadField: r3 = r2->field_73
    //     0x95ae64: ldur            x3, [x2, #0x73]
    // 0x95ae68: cmp             x3, #1
    // 0x95ae6c: b.eq            #0x95afd4
    // 0x95ae70: LoadField: r2 = r0->field_b
    //     0x95ae70: ldur            w2, [x0, #0xb]
    // 0x95ae74: DecompressPointer r2
    //     0x95ae74: add             x2, x2, HEAP, lsl #32
    // 0x95ae78: stur            x2, [fp, #-8]
    // 0x95ae7c: LoadField: r3 = r0->field_f
    //     0x95ae7c: ldur            w3, [x0, #0xf]
    // 0x95ae80: DecompressPointer r3
    //     0x95ae80: add             x3, x3, HEAP, lsl #32
    // 0x95ae84: LoadField: r5 = r3->field_b
    //     0x95ae84: ldur            w5, [x3, #0xb]
    // 0x95ae88: DecompressPointer r5
    //     0x95ae88: add             x5, x5, HEAP, lsl #32
    // 0x95ae8c: cmp             w2, w5
    // 0x95ae90: b.ne            #0x95ae9c
    // 0x95ae94: str             x0, [SP]
    // 0x95ae98: r0 = _growToNextCapacity()
    //     0x95ae98: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x95ae9c: ldur            x2, [fp, #-0x18]
    // 0x95aea0: ldur            x0, [fp, #-8]
    // 0x95aea4: r3 = LoadInt32Instr(r0)
    //     0x95aea4: sbfx            x3, x0, #1, #0x1f
    // 0x95aea8: add             x0, x3, #1
    // 0x95aeac: lsl             x1, x0, #1
    // 0x95aeb0: StoreField: r2->field_b = r1
    //     0x95aeb0: stur            w1, [x2, #0xb]
    // 0x95aeb4: mov             x1, x3
    // 0x95aeb8: cmp             x1, x0
    // 0x95aebc: b.hs            #0x95b2d8
    // 0x95aec0: LoadField: r0 = r2->field_f
    //     0x95aec0: ldur            w0, [x2, #0xf]
    // 0x95aec4: DecompressPointer r0
    //     0x95aec4: add             x0, x0, HEAP, lsl #32
    // 0x95aec8: add             x1, x0, x3, lsl #2
    // 0x95aecc: r17 = Instance__ScribblePlaceholder
    //     0x95aecc: add             x17, PP, #0x41, lsl #12  ; [pp+0x41220] Obj!_ScribblePlaceholder@c37b31
    //     0x95aed0: ldr             x17, [x17, #0x220]
    // 0x95aed4: StoreField: r1->field_f = r17
    //     0x95aed4: stur            w17, [x1, #0xf]
    // 0x95aed8: ldr             x1, [fp, #0x10]
    // 0x95aedc: LoadField: r0 = r1->field_a7
    //     0x95aedc: ldur            w0, [x1, #0xa7]
    // 0x95aee0: DecompressPointer r0
    //     0x95aee0: add             x0, x0, HEAP, lsl #32
    // 0x95aee4: r16 = Sentinel
    //     0x95aee4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95aee8: cmp             w0, w16
    // 0x95aeec: b.ne            #0x95aef8
    // 0x95aef0: r2 = renderEditable
    //     0x95aef0: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0x95aef4: r0 = InitLateFinalInstanceField()
    //     0x95aef4: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95aef8: str             x0, [SP]
    // 0x95aefc: r0 = size()
    //     0x95aefc: bl              #0x593570  ; [package:flutter/src/rendering/box.dart] RenderBox::size
    // 0x95af00: LoadField: d0 = r0->field_7
    //     0x95af00: ldur            d0, [x0, #7]
    // 0x95af04: stur            d0, [fp, #-0x30]
    // 0x95af08: r0 = Size()
    //     0x95af08: bl              #0x5034b8  ; AllocateSizeStub -> Size (size=0x18)
    // 0x95af0c: ldur            d0, [fp, #-0x30]
    // 0x95af10: stur            x0, [fp, #-8]
    // 0x95af14: StoreField: r0->field_7 = d0
    //     0x95af14: stur            d0, [x0, #7]
    // 0x95af18: d0 = 0.000000
    //     0x95af18: eor             v0.16b, v0.16b, v0.16b
    // 0x95af1c: StoreField: r0->field_f = d0
    //     0x95af1c: stur            d0, [x0, #0xf]
    // 0x95af20: r0 = _ScribblePlaceholder()
    //     0x95af20: bl              #0x95b608  ; Allocate_ScribblePlaceholderStub -> _ScribblePlaceholder (size=0x1c)
    // 0x95af24: mov             x1, x0
    // 0x95af28: ldur            x0, [fp, #-8]
    // 0x95af2c: stur            x1, [fp, #-0x20]
    // 0x95af30: ArrayStore: r1[0] = r0  ; List_4
    //     0x95af30: stur            w0, [x1, #0x17]
    // 0x95af34: r0 = Instance_SizedBox
    //     0x95af34: ldr             x0, [PP, #0x61f8]  ; [pp+0x61f8] Obj!SizedBox@c37c11
    // 0x95af38: StoreField: r1->field_13 = r0
    //     0x95af38: stur            w0, [x1, #0x13]
    // 0x95af3c: r0 = Instance_PlaceholderAlignment
    //     0x95af3c: add             x0, PP, #0x1e, lsl #12  ; [pp+0x1ea98] Obj!PlaceholderAlignment@c46c81
    //     0x95af40: ldr             x0, [x0, #0xa98]
    // 0x95af44: StoreField: r1->field_b = r0
    //     0x95af44: stur            w0, [x1, #0xb]
    // 0x95af48: ldur            x0, [fp, #-0x18]
    // 0x95af4c: LoadField: r2 = r0->field_b
    //     0x95af4c: ldur            w2, [x0, #0xb]
    // 0x95af50: DecompressPointer r2
    //     0x95af50: add             x2, x2, HEAP, lsl #32
    // 0x95af54: stur            x2, [fp, #-8]
    // 0x95af58: LoadField: r3 = r0->field_f
    //     0x95af58: ldur            w3, [x0, #0xf]
    // 0x95af5c: DecompressPointer r3
    //     0x95af5c: add             x3, x3, HEAP, lsl #32
    // 0x95af60: LoadField: r4 = r3->field_b
    //     0x95af60: ldur            w4, [x3, #0xb]
    // 0x95af64: DecompressPointer r4
    //     0x95af64: add             x4, x4, HEAP, lsl #32
    // 0x95af68: cmp             w2, w4
    // 0x95af6c: b.ne            #0x95af78
    // 0x95af70: str             x0, [SP]
    // 0x95af74: r0 = _growToNextCapacity()
    //     0x95af74: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x95af78: ldur            x2, [fp, #-0x18]
    // 0x95af7c: ldur            x0, [fp, #-8]
    // 0x95af80: r3 = LoadInt32Instr(r0)
    //     0x95af80: sbfx            x3, x0, #1, #0x1f
    // 0x95af84: add             x0, x3, #1
    // 0x95af88: lsl             x1, x0, #1
    // 0x95af8c: StoreField: r2->field_b = r1
    //     0x95af8c: stur            w1, [x2, #0xb]
    // 0x95af90: mov             x1, x3
    // 0x95af94: cmp             x1, x0
    // 0x95af98: b.hs            #0x95b2dc
    // 0x95af9c: LoadField: r1 = r2->field_f
    //     0x95af9c: ldur            w1, [x2, #0xf]
    // 0x95afa0: DecompressPointer r1
    //     0x95afa0: add             x1, x1, HEAP, lsl #32
    // 0x95afa4: ldur            x0, [fp, #-0x20]
    // 0x95afa8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x95afa8: add             x25, x1, x3, lsl #2
    //     0x95afac: add             x25, x25, #0xf
    //     0x95afb0: str             w0, [x25]
    //     0x95afb4: tbz             w0, #0, #0x95afd0
    //     0x95afb8: ldurb           w16, [x1, #-1]
    //     0x95afbc: ldurb           w17, [x0, #-1]
    //     0x95afc0: and             x16, x17, x16, lsr #2
    //     0x95afc4: tst             x16, HEAP, lsr #32
    //     0x95afc8: b.eq            #0x95afd0
    //     0x95afcc: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95afd0: b               #0x95b040
    // 0x95afd4: mov             x2, x0
    // 0x95afd8: LoadField: r0 = r2->field_b
    //     0x95afd8: ldur            w0, [x2, #0xb]
    // 0x95afdc: DecompressPointer r0
    //     0x95afdc: add             x0, x0, HEAP, lsl #32
    // 0x95afe0: stur            x0, [fp, #-8]
    // 0x95afe4: LoadField: r1 = r2->field_f
    //     0x95afe4: ldur            w1, [x2, #0xf]
    // 0x95afe8: DecompressPointer r1
    //     0x95afe8: add             x1, x1, HEAP, lsl #32
    // 0x95afec: LoadField: r3 = r1->field_b
    //     0x95afec: ldur            w3, [x1, #0xb]
    // 0x95aff0: DecompressPointer r3
    //     0x95aff0: add             x3, x3, HEAP, lsl #32
    // 0x95aff4: cmp             w0, w3
    // 0x95aff8: b.ne            #0x95b004
    // 0x95affc: str             x2, [SP]
    // 0x95b000: r0 = _growToNextCapacity()
    //     0x95b000: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x95b004: ldur            x2, [fp, #-0x18]
    // 0x95b008: ldur            x0, [fp, #-8]
    // 0x95b00c: r3 = LoadInt32Instr(r0)
    //     0x95b00c: sbfx            x3, x0, #1, #0x1f
    // 0x95b010: add             x0, x3, #1
    // 0x95b014: lsl             x1, x0, #1
    // 0x95b018: StoreField: r2->field_b = r1
    //     0x95b018: stur            w1, [x2, #0xb]
    // 0x95b01c: mov             x1, x3
    // 0x95b020: cmp             x1, x0
    // 0x95b024: b.hs            #0x95b2e0
    // 0x95b028: LoadField: r0 = r2->field_f
    //     0x95b028: ldur            w0, [x2, #0xf]
    // 0x95b02c: DecompressPointer r0
    //     0x95b02c: add             x0, x0, HEAP, lsl #32
    // 0x95b030: add             x1, x0, x3, lsl #2
    // 0x95b034: r17 = Instance__ScribblePlaceholder
    //     0x95b034: add             x17, PP, #0x41, lsl #12  ; [pp+0x41228] Obj!_ScribblePlaceholder@c37b11
    //     0x95b038: ldr             x17, [x17, #0x228]
    // 0x95b03c: StoreField: r1->field_f = r17
    //     0x95b03c: stur            w17, [x1, #0xf]
    // 0x95b040: ldr             x3, [fp, #0x10]
    // 0x95b044: ldur            x4, [fp, #-0x10]
    // 0x95b048: LoadField: r5 = r3->field_63
    //     0x95b048: ldur            w5, [x3, #0x63]
    // 0x95b04c: DecompressPointer r5
    //     0x95b04c: add             x5, x5, HEAP, lsl #32
    // 0x95b050: r16 = Sentinel
    //     0x95b050: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95b054: cmp             w5, w16
    // 0x95b058: b.eq            #0x95b2e4
    // 0x95b05c: stur            x5, [fp, #-8]
    // 0x95b060: LoadField: r0 = r3->field_b
    //     0x95b060: ldur            w0, [x3, #0xb]
    // 0x95b064: DecompressPointer r0
    //     0x95b064: add             x0, x0, HEAP, lsl #32
    // 0x95b068: cmp             w0, NULL
    // 0x95b06c: b.eq            #0x95b2ec
    // 0x95b070: LoadField: r1 = r0->field_b
    //     0x95b070: ldur            w1, [x0, #0xb]
    // 0x95b074: DecompressPointer r1
    //     0x95b074: add             x1, x1, HEAP, lsl #32
    // 0x95b078: LoadField: r0 = r1->field_27
    //     0x95b078: ldur            w0, [x1, #0x27]
    // 0x95b07c: DecompressPointer r0
    //     0x95b07c: add             x0, x0, HEAP, lsl #32
    // 0x95b080: LoadField: r6 = r0->field_7
    //     0x95b080: ldur            w6, [x0, #7]
    // 0x95b084: DecompressPointer r6
    //     0x95b084: add             x6, x6, HEAP, lsl #32
    // 0x95b088: r0 = BoxInt64Instr(r4)
    //     0x95b088: sbfiz           x0, x4, #1, #0x1f
    //     0x95b08c: cmp             x4, x0, asr #1
    //     0x95b090: b.eq            #0x95b09c
    //     0x95b094: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0x95b098: stur            x4, [x0, #7]
    // 0x95b09c: stp             xzr, x6, [SP, #8]
    // 0x95b0a0: str             x0, [SP]
    // 0x95b0a4: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x95b0a4: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x95b0a8: r0 = substring()
    //     0x95b0a8: bl              #0x4cc2a0  ; [dart:core] _StringBase::substring
    // 0x95b0ac: stur            x0, [fp, #-0x20]
    // 0x95b0b0: r0 = TextSpan()
    //     0x95b0b0: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b0b4: mov             x3, x0
    // 0x95b0b8: ldur            x0, [fp, #-0x20]
    // 0x95b0bc: stur            x3, [fp, #-0x28]
    // 0x95b0c0: StoreField: r3->field_b = r0
    //     0x95b0c0: stur            w0, [x3, #0xb]
    // 0x95b0c4: r0 = Instance__DeferringMouseCursor
    //     0x95b0c4: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b0c8: ArrayStore: r3[0] = r0  ; List_4
    //     0x95b0c8: stur            w0, [x3, #0x17]
    // 0x95b0cc: r1 = Null
    //     0x95b0cc: mov             x1, NULL
    // 0x95b0d0: r2 = 2
    //     0x95b0d0: movz            x2, #0x2
    // 0x95b0d4: r0 = AllocateArray()
    //     0x95b0d4: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x95b0d8: mov             x2, x0
    // 0x95b0dc: ldur            x0, [fp, #-0x28]
    // 0x95b0e0: stur            x2, [fp, #-0x20]
    // 0x95b0e4: StoreField: r2->field_f = r0
    //     0x95b0e4: stur            w0, [x2, #0xf]
    // 0x95b0e8: r1 = <InlineSpan>
    //     0x95b0e8: add             x1, PP, #0x12, lsl #12  ; [pp+0x12890] TypeArguments: <InlineSpan>
    //     0x95b0ec: ldr             x1, [x1, #0x890]
    // 0x95b0f0: r0 = AllocateGrowableArray()
    //     0x95b0f0: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x95b0f4: mov             x1, x0
    // 0x95b0f8: ldur            x0, [fp, #-0x20]
    // 0x95b0fc: stur            x1, [fp, #-0x28]
    // 0x95b100: StoreField: r1->field_f = r0
    //     0x95b100: stur            w0, [x1, #0xf]
    // 0x95b104: r0 = 2
    //     0x95b104: movz            x0, #0x2
    // 0x95b108: StoreField: r1->field_b = r0
    //     0x95b108: stur            w0, [x1, #0xb]
    // 0x95b10c: ldur            x16, [fp, #-0x18]
    // 0x95b110: stp             x16, x1, [SP]
    // 0x95b114: r0 = addAll()
    //     0x95b114: bl              #0x5295f8  ; [dart:core] _GrowableList::addAll
    // 0x95b118: ldr             x1, [fp, #0x10]
    // 0x95b11c: LoadField: r0 = r1->field_b
    //     0x95b11c: ldur            w0, [x1, #0xb]
    // 0x95b120: DecompressPointer r0
    //     0x95b120: add             x0, x0, HEAP, lsl #32
    // 0x95b124: cmp             w0, NULL
    // 0x95b128: b.eq            #0x95b2f0
    // 0x95b12c: LoadField: r1 = r0->field_b
    //     0x95b12c: ldur            w1, [x0, #0xb]
    // 0x95b130: DecompressPointer r1
    //     0x95b130: add             x1, x1, HEAP, lsl #32
    // 0x95b134: LoadField: r0 = r1->field_27
    //     0x95b134: ldur            w0, [x1, #0x27]
    // 0x95b138: DecompressPointer r0
    //     0x95b138: add             x0, x0, HEAP, lsl #32
    // 0x95b13c: LoadField: r1 = r0->field_7
    //     0x95b13c: ldur            w1, [x0, #7]
    // 0x95b140: DecompressPointer r1
    //     0x95b140: add             x1, x1, HEAP, lsl #32
    // 0x95b144: str             x1, [SP, #8]
    // 0x95b148: ldur            x0, [fp, #-0x10]
    // 0x95b14c: str             x0, [SP]
    // 0x95b150: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x95b150: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x95b154: r0 = substring()
    //     0x95b154: bl              #0x4cc2a0  ; [dart:core] _StringBase::substring
    // 0x95b158: stur            x0, [fp, #-0x18]
    // 0x95b15c: r0 = TextSpan()
    //     0x95b15c: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b160: mov             x1, x0
    // 0x95b164: ldur            x0, [fp, #-0x18]
    // 0x95b168: stur            x1, [fp, #-0x20]
    // 0x95b16c: StoreField: r1->field_b = r0
    //     0x95b16c: stur            w0, [x1, #0xb]
    // 0x95b170: r0 = Instance__DeferringMouseCursor
    //     0x95b170: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b174: ArrayStore: r1[0] = r0  ; List_4
    //     0x95b174: stur            w0, [x1, #0x17]
    // 0x95b178: ldur            x2, [fp, #-0x28]
    // 0x95b17c: LoadField: r3 = r2->field_b
    //     0x95b17c: ldur            w3, [x2, #0xb]
    // 0x95b180: DecompressPointer r3
    //     0x95b180: add             x3, x3, HEAP, lsl #32
    // 0x95b184: stur            x3, [fp, #-0x18]
    // 0x95b188: LoadField: r4 = r2->field_f
    //     0x95b188: ldur            w4, [x2, #0xf]
    // 0x95b18c: DecompressPointer r4
    //     0x95b18c: add             x4, x4, HEAP, lsl #32
    // 0x95b190: LoadField: r5 = r4->field_b
    //     0x95b190: ldur            w5, [x4, #0xb]
    // 0x95b194: DecompressPointer r5
    //     0x95b194: add             x5, x5, HEAP, lsl #32
    // 0x95b198: cmp             w3, w5
    // 0x95b19c: b.ne            #0x95b1a8
    // 0x95b1a0: str             x2, [SP]
    // 0x95b1a4: r0 = _growToNextCapacity()
    //     0x95b1a4: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x95b1a8: ldur            x3, [fp, #-8]
    // 0x95b1ac: ldur            x2, [fp, #-0x28]
    // 0x95b1b0: ldur            x0, [fp, #-0x18]
    // 0x95b1b4: r4 = LoadInt32Instr(r0)
    //     0x95b1b4: sbfx            x4, x0, #1, #0x1f
    // 0x95b1b8: add             x0, x4, #1
    // 0x95b1bc: lsl             x1, x0, #1
    // 0x95b1c0: StoreField: r2->field_b = r1
    //     0x95b1c0: stur            w1, [x2, #0xb]
    // 0x95b1c4: mov             x1, x4
    // 0x95b1c8: cmp             x1, x0
    // 0x95b1cc: b.hs            #0x95b2f4
    // 0x95b1d0: LoadField: r1 = r2->field_f
    //     0x95b1d0: ldur            w1, [x2, #0xf]
    // 0x95b1d4: DecompressPointer r1
    //     0x95b1d4: add             x1, x1, HEAP, lsl #32
    // 0x95b1d8: ldur            x0, [fp, #-0x20]
    // 0x95b1dc: ArrayStore: r1[r4] = r0  ; List_4
    //     0x95b1dc: add             x25, x1, x4, lsl #2
    //     0x95b1e0: add             x25, x25, #0xf
    //     0x95b1e4: str             w0, [x25]
    //     0x95b1e8: tbz             w0, #0, #0x95b204
    //     0x95b1ec: ldurb           w16, [x1, #-1]
    //     0x95b1f0: ldurb           w17, [x0, #-1]
    //     0x95b1f4: and             x16, x17, x16, lsr #2
    //     0x95b1f8: tst             x16, HEAP, lsr #32
    //     0x95b1fc: b.eq            #0x95b204
    //     0x95b200: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95b204: r0 = TextSpan()
    //     0x95b204: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b208: mov             x1, x0
    // 0x95b20c: ldur            x0, [fp, #-0x28]
    // 0x95b210: StoreField: r1->field_f = r0
    //     0x95b210: stur            w0, [x1, #0xf]
    // 0x95b214: r0 = Instance__DeferringMouseCursor
    //     0x95b214: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b218: ArrayStore: r1[0] = r0  ; List_4
    //     0x95b218: stur            w0, [x1, #0x17]
    // 0x95b21c: ldur            x0, [fp, #-8]
    // 0x95b220: StoreField: r1->field_7 = r0
    //     0x95b220: stur            w0, [x1, #7]
    // 0x95b224: mov             x0, x1
    // 0x95b228: LeaveFrame
    //     0x95b228: mov             SP, fp
    //     0x95b22c: ldp             fp, lr, [SP], #0x10
    // 0x95b230: ret
    //     0x95b230: ret             
    // 0x95b234: LoadField: r2 = r0->field_23
    //     0x95b234: ldur            w2, [x0, #0x23]
    // 0x95b238: DecompressPointer r2
    //     0x95b238: add             x2, x2, HEAP, lsl #32
    // 0x95b23c: tbz             w2, #4, #0x95b258
    // 0x95b240: LoadField: r2 = r0->field_f
    //     0x95b240: ldur            w2, [x0, #0xf]
    // 0x95b244: DecompressPointer r2
    //     0x95b244: add             x2, x2, HEAP, lsl #32
    // 0x95b248: str             x2, [SP]
    // 0x95b24c: r0 = hasFocus()
    //     0x95b24c: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x95b250: mov             x1, x0
    // 0x95b254: b               #0x95b25c
    // 0x95b258: r1 = false
    //     0x95b258: add             x1, NULL, #0x30  ; false
    // 0x95b25c: ldr             x0, [fp, #0x10]
    // 0x95b260: LoadField: r2 = r0->field_5f
    //     0x95b260: ldur            w2, [x0, #0x5f]
    // 0x95b264: DecompressPointer r2
    //     0x95b264: add             x2, x2, HEAP, lsl #32
    // 0x95b268: r16 = Sentinel
    //     0x95b268: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95b26c: cmp             w2, w16
    // 0x95b270: b.eq            #0x95b2f8
    // 0x95b274: LoadField: r2 = r0->field_b
    //     0x95b274: ldur            w2, [x0, #0xb]
    // 0x95b278: DecompressPointer r2
    //     0x95b278: add             x2, x2, HEAP, lsl #32
    // 0x95b27c: cmp             w2, NULL
    // 0x95b280: b.eq            #0x95b300
    // 0x95b284: LoadField: r3 = r2->field_b
    //     0x95b284: ldur            w3, [x2, #0xb]
    // 0x95b288: DecompressPointer r3
    //     0x95b288: add             x3, x3, HEAP, lsl #32
    // 0x95b28c: LoadField: r2 = r0->field_f
    //     0x95b28c: ldur            w2, [x0, #0xf]
    // 0x95b290: DecompressPointer r2
    //     0x95b290: add             x2, x2, HEAP, lsl #32
    // 0x95b294: cmp             w2, NULL
    // 0x95b298: b.eq            #0x95b304
    // 0x95b29c: LoadField: r2 = r0->field_63
    //     0x95b29c: ldur            w2, [x0, #0x63]
    // 0x95b2a0: DecompressPointer r2
    //     0x95b2a0: add             x2, x2, HEAP, lsl #32
    // 0x95b2a4: r16 = Sentinel
    //     0x95b2a4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95b2a8: cmp             w2, w16
    // 0x95b2ac: b.eq            #0x95b308
    // 0x95b2b0: stp             x2, x3, [SP, #8]
    // 0x95b2b4: str             x1, [SP]
    // 0x95b2b8: r0 = buildTextSpan()
    //     0x95b2b8: bl              #0x95b310  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::buildTextSpan
    // 0x95b2bc: LeaveFrame
    //     0x95b2bc: mov             SP, fp
    //     0x95b2c0: ldp             fp, lr, [SP], #0x10
    // 0x95b2c4: ret
    //     0x95b2c4: ret             
    // 0x95b2c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b2c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95b2cc: b               #0x95adc4
    // 0x95b2d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b2d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b2d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b2d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b2d8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x95b2d8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x95b2dc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x95b2dc: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x95b2e0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x95b2e0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x95b2e4: r9 = _style
    //     0x95b2e4: ldr             x9, [PP, #0x6640]  ; [pp+0x6640] Field <EditableTextState._style@244183791>: late (offset: 0x64)
    // 0x95b2e8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x95b2e8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x95b2ec: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b2ec: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b2f0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b2f0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b2f4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x95b2f4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x95b2f8: r9 = _spellCheckConfiguration
    //     0x95b2f8: ldr             x9, [PP, #0x63c0]  ; [pp+0x63c0] Field <EditableTextState._spellCheckConfiguration@244183791>: late (offset: 0x60)
    // 0x95b2fc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x95b2fc: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x95b300: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b300: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b304: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b304: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b308: r9 = _style
    //     0x95b308: ldr             x9, [PP, #0x6640]  ; [pp+0x6640] Field <EditableTextState._style@244183791>: late (offset: 0x64)
    // 0x95b30c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x95b30c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ _semanticsOnPaste(/* No info */) {
    // ** addr: 0x95b634, size: 0x16c
    // 0x95b634: EnterFrame
    //     0x95b634: stp             fp, lr, [SP, #-0x10]!
    //     0x95b638: mov             fp, SP
    // 0x95b63c: AllocStack(0x10)
    //     0x95b63c: sub             SP, SP, #0x10
    // 0x95b640: CheckStackOverflow
    //     0x95b640: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95b644: cmp             SP, x16
    //     0x95b648: b.ls            #0x95b78c
    // 0x95b64c: r1 = 2
    //     0x95b64c: movz            x1, #0x2
    // 0x95b650: r0 = AllocateContext()
    //     0x95b650: bl              #0xc5def4  ; AllocateContextStub
    // 0x95b654: mov             x1, x0
    // 0x95b658: ldr             x0, [fp, #0x18]
    // 0x95b65c: stur            x1, [fp, #-8]
    // 0x95b660: StoreField: r1->field_f = r0
    //     0x95b660: stur            w0, [x1, #0xf]
    // 0x95b664: ldr             x2, [fp, #0x10]
    // 0x95b668: StoreField: r1->field_13 = r2
    //     0x95b668: stur            w2, [x1, #0x13]
    // 0x95b66c: LoadField: r2 = r0->field_b
    //     0x95b66c: ldur            w2, [x0, #0xb]
    // 0x95b670: DecompressPointer r2
    //     0x95b670: add             x2, x2, HEAP, lsl #32
    // 0x95b674: cmp             w2, NULL
    // 0x95b678: b.eq            #0x95b794
    // 0x95b67c: LoadField: r3 = r2->field_f
    //     0x95b67c: ldur            w3, [x2, #0xf]
    // 0x95b680: DecompressPointer r3
    //     0x95b680: add             x3, x3, HEAP, lsl #32
    // 0x95b684: str             x3, [SP]
    // 0x95b688: r0 = hasFocus()
    //     0x95b688: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x95b68c: tbnz            w0, #4, #0x95b77c
    // 0x95b690: ldr             x0, [fp, #0x18]
    // 0x95b694: LoadField: r1 = r0->field_b
    //     0x95b694: ldur            w1, [x0, #0xb]
    // 0x95b698: DecompressPointer r1
    //     0x95b698: add             x1, x1, HEAP, lsl #32
    // 0x95b69c: cmp             w1, NULL
    // 0x95b6a0: b.eq            #0x95b798
    // 0x95b6a4: LoadField: r2 = r1->field_8b
    //     0x95b6a4: ldur            w2, [x1, #0x8b]
    // 0x95b6a8: DecompressPointer r2
    //     0x95b6a8: add             x2, x2, HEAP, lsl #32
    // 0x95b6ac: r1 = LoadClassIdInstr(r2)
    //     0x95b6ac: ldur            x1, [x2, #-1]
    //     0x95b6b0: ubfx            x1, x1, #0xc, #0x14
    // 0x95b6b4: lsl             x1, x1, #1
    // 0x95b6b8: r2 = LoadInt32Instr(r1)
    //     0x95b6b8: sbfx            x2, x1, #1, #0x1f
    // 0x95b6bc: r17 = 4411
    //     0x95b6bc: movz            x17, #0x113b
    // 0x95b6c0: cmp             x2, x17
    // 0x95b6c4: b.lt            #0x95b6e4
    // 0x95b6c8: r17 = 4421
    //     0x95b6c8: movz            x17, #0x1145
    // 0x95b6cc: cmp             x2, x17
    // 0x95b6d0: b.gt            #0x95b6e4
    // 0x95b6d4: str             x0, [SP]
    // 0x95b6d8: r0 = pasteEnabled()
    //     0x95b6d8: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x95b6dc: tbnz            w0, #4, #0x95b77c
    // 0x95b6e0: b               #0x95b748
    // 0x95b6e4: ldr             x16, [fp, #0x18]
    // 0x95b6e8: str             x16, [SP]
    // 0x95b6ec: r0 = pasteEnabled()
    //     0x95b6ec: bl              #0x69cec0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteEnabled
    // 0x95b6f0: tbnz            w0, #4, #0x95b77c
    // 0x95b6f4: ldr             x1, [fp, #0x18]
    // 0x95b6f8: LoadField: r0 = r1->field_b
    //     0x95b6f8: ldur            w0, [x1, #0xb]
    // 0x95b6fc: DecompressPointer r0
    //     0x95b6fc: add             x0, x0, HEAP, lsl #32
    // 0x95b700: cmp             w0, NULL
    // 0x95b704: b.eq            #0x95b79c
    // 0x95b708: LoadField: r2 = r0->field_8b
    //     0x95b708: ldur            w2, [x0, #0x8b]
    // 0x95b70c: DecompressPointer r2
    //     0x95b70c: add             x2, x2, HEAP, lsl #32
    // 0x95b710: cmp             w2, NULL
    // 0x95b714: b.ne            #0x95b720
    // 0x95b718: r0 = Null
    //     0x95b718: mov             x0, NULL
    // 0x95b71c: b               #0x95b73c
    // 0x95b720: r0 = LoadClassIdInstr(r2)
    //     0x95b720: ldur            x0, [x2, #-1]
    //     0x95b724: ubfx            x0, x0, #0xc, #0x14
    // 0x95b728: str             x2, [SP]
    // 0x95b72c: r0 = GDT[cid_x0 + 0x4c]()
    //     0x95b72c: add             lr, x0, #0x4c
    //     0x95b730: ldr             lr, [x21, lr, lsl #3]
    //     0x95b734: blr             lr
    // 0x95b738: r0 = false
    //     0x95b738: add             x0, NULL, #0x30  ; false
    // 0x95b73c: cmp             w0, NULL
    // 0x95b740: b.eq            #0x95b77c
    // 0x95b744: tbnz            w0, #4, #0x95b77c
    // 0x95b748: ldr             x0, [fp, #0x18]
    // 0x95b74c: LoadField: r1 = r0->field_33
    //     0x95b74c: ldur            w1, [x0, #0x33]
    // 0x95b750: DecompressPointer r1
    //     0x95b750: add             x1, x1, HEAP, lsl #32
    // 0x95b754: LoadField: r0 = r1->field_27
    //     0x95b754: ldur            w0, [x1, #0x27]
    // 0x95b758: DecompressPointer r0
    //     0x95b758: add             x0, x0, HEAP, lsl #32
    // 0x95b75c: r16 = Instance_ClipboardStatus
    //     0x95b75c: ldr             x16, [PP, #0x5e28]  ; [pp+0x5e28] Obj!ClipboardStatus@c42211
    // 0x95b760: cmp             w0, w16
    // 0x95b764: b.ne            #0x95b77c
    // 0x95b768: ldur            x2, [fp, #-8]
    // 0x95b76c: r1 = Function '<anonymous closure>':.
    //     0x95b76c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41240] AnonymousClosure: (0x95b7a0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnPaste (0x95b634)
    //     0x95b770: ldr             x1, [x1, #0x240]
    // 0x95b774: r0 = AllocateClosure()
    //     0x95b774: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x95b778: b               #0x95b780
    // 0x95b77c: r0 = Null
    //     0x95b77c: mov             x0, NULL
    // 0x95b780: LeaveFrame
    //     0x95b780: mov             SP, fp
    //     0x95b784: ldp             fp, lr, [SP], #0x10
    // 0x95b788: ret
    //     0x95b788: ret             
    // 0x95b78c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b78c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95b790: b               #0x95b64c
    // 0x95b794: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b794: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b798: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b798: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b79c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b79c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x95b7a0, size: 0x8c
    // 0x95b7a0: EnterFrame
    //     0x95b7a0: stp             fp, lr, [SP, #-0x10]!
    //     0x95b7a4: mov             fp, SP
    // 0x95b7a8: AllocStack(0x18)
    //     0x95b7a8: sub             SP, SP, #0x18
    // 0x95b7ac: SetupParameters()
    //     0x95b7ac: ldr             x0, [fp, #0x10]
    //     0x95b7b0: ldur            w1, [x0, #0x17]
    //     0x95b7b4: add             x1, x1, HEAP, lsl #32
    //     0x95b7b8: stur            x1, [fp, #-8]
    // 0x95b7bc: CheckStackOverflow
    //     0x95b7bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95b7c0: cmp             SP, x16
    //     0x95b7c4: b.ls            #0x95b824
    // 0x95b7c8: LoadField: r0 = r1->field_13
    //     0x95b7c8: ldur            w0, [x1, #0x13]
    // 0x95b7cc: DecompressPointer r0
    //     0x95b7cc: add             x0, x0, HEAP, lsl #32
    // 0x95b7d0: cmp             w0, NULL
    // 0x95b7d4: b.ne            #0x95b7e0
    // 0x95b7d8: mov             x0, x1
    // 0x95b7dc: b               #0x95b800
    // 0x95b7e0: r2 = LoadClassIdInstr(r0)
    //     0x95b7e0: ldur            x2, [x0, #-1]
    //     0x95b7e4: ubfx            x2, x2, #0xc, #0x14
    // 0x95b7e8: str             x0, [SP]
    // 0x95b7ec: mov             x0, x2
    // 0x95b7f0: r0 = GDT[cid_x0 + 0x8bd]()
    //     0x95b7f0: add             lr, x0, #0x8bd
    //     0x95b7f4: ldr             lr, [x21, lr, lsl #3]
    //     0x95b7f8: blr             lr
    // 0x95b7fc: ldur            x0, [fp, #-8]
    // 0x95b800: LoadField: r1 = r0->field_f
    //     0x95b800: ldur            w1, [x0, #0xf]
    // 0x95b804: DecompressPointer r1
    //     0x95b804: add             x1, x1, HEAP, lsl #32
    // 0x95b808: r16 = Instance_SelectionChangedCause
    //     0x95b808: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x95b80c: stp             x16, x1, [SP]
    // 0x95b810: r0 = pasteText()
    //     0x95b810: bl              #0x69d764  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x95b814: r0 = Null
    //     0x95b814: mov             x0, NULL
    // 0x95b818: LeaveFrame
    //     0x95b818: mov             SP, fp
    //     0x95b81c: ldp             fp, lr, [SP], #0x10
    // 0x95b820: ret
    //     0x95b820: ret             
    // 0x95b824: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b824: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95b828: b               #0x95b7c8
  }
  _ _semanticsOnCut(/* No info */) {
    // ** addr: 0x95b82c, size: 0x14c
    // 0x95b82c: EnterFrame
    //     0x95b82c: stp             fp, lr, [SP, #-0x10]!
    //     0x95b830: mov             fp, SP
    // 0x95b834: AllocStack(0x10)
    //     0x95b834: sub             SP, SP, #0x10
    // 0x95b838: CheckStackOverflow
    //     0x95b838: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95b83c: cmp             SP, x16
    //     0x95b840: b.ls            #0x95b964
    // 0x95b844: r1 = 2
    //     0x95b844: movz            x1, #0x2
    // 0x95b848: r0 = AllocateContext()
    //     0x95b848: bl              #0xc5def4  ; AllocateContextStub
    // 0x95b84c: mov             x1, x0
    // 0x95b850: ldr             x0, [fp, #0x18]
    // 0x95b854: stur            x1, [fp, #-8]
    // 0x95b858: StoreField: r1->field_f = r0
    //     0x95b858: stur            w0, [x1, #0xf]
    // 0x95b85c: ldr             x2, [fp, #0x10]
    // 0x95b860: StoreField: r1->field_13 = r2
    //     0x95b860: stur            w2, [x1, #0x13]
    // 0x95b864: LoadField: r2 = r0->field_b
    //     0x95b864: ldur            w2, [x0, #0xb]
    // 0x95b868: DecompressPointer r2
    //     0x95b868: add             x2, x2, HEAP, lsl #32
    // 0x95b86c: cmp             w2, NULL
    // 0x95b870: b.eq            #0x95b96c
    // 0x95b874: LoadField: r3 = r2->field_f
    //     0x95b874: ldur            w3, [x2, #0xf]
    // 0x95b878: DecompressPointer r3
    //     0x95b878: add             x3, x3, HEAP, lsl #32
    // 0x95b87c: str             x3, [SP]
    // 0x95b880: r0 = hasFocus()
    //     0x95b880: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x95b884: tbnz            w0, #4, #0x95b954
    // 0x95b888: ldr             x0, [fp, #0x18]
    // 0x95b88c: LoadField: r1 = r0->field_b
    //     0x95b88c: ldur            w1, [x0, #0xb]
    // 0x95b890: DecompressPointer r1
    //     0x95b890: add             x1, x1, HEAP, lsl #32
    // 0x95b894: cmp             w1, NULL
    // 0x95b898: b.eq            #0x95b970
    // 0x95b89c: LoadField: r2 = r1->field_8b
    //     0x95b89c: ldur            w2, [x1, #0x8b]
    // 0x95b8a0: DecompressPointer r2
    //     0x95b8a0: add             x2, x2, HEAP, lsl #32
    // 0x95b8a4: r1 = LoadClassIdInstr(r2)
    //     0x95b8a4: ldur            x1, [x2, #-1]
    //     0x95b8a8: ubfx            x1, x1, #0xc, #0x14
    // 0x95b8ac: lsl             x1, x1, #1
    // 0x95b8b0: r2 = LoadInt32Instr(r1)
    //     0x95b8b0: sbfx            x2, x1, #1, #0x1f
    // 0x95b8b4: r17 = 4411
    //     0x95b8b4: movz            x17, #0x113b
    // 0x95b8b8: cmp             x2, x17
    // 0x95b8bc: b.lt            #0x95b8dc
    // 0x95b8c0: r17 = 4421
    //     0x95b8c0: movz            x17, #0x1145
    // 0x95b8c4: cmp             x2, x17
    // 0x95b8c8: b.gt            #0x95b8dc
    // 0x95b8cc: str             x0, [SP]
    // 0x95b8d0: r0 = cutEnabled()
    //     0x95b8d0: bl              #0x69cf90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x95b8d4: tbnz            w0, #4, #0x95b954
    // 0x95b8d8: b               #0x95b940
    // 0x95b8dc: str             x0, [SP]
    // 0x95b8e0: r0 = cutEnabled()
    //     0x95b8e0: bl              #0x69cf90  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutEnabled
    // 0x95b8e4: tbnz            w0, #4, #0x95b954
    // 0x95b8e8: ldr             x0, [fp, #0x18]
    // 0x95b8ec: LoadField: r1 = r0->field_b
    //     0x95b8ec: ldur            w1, [x0, #0xb]
    // 0x95b8f0: DecompressPointer r1
    //     0x95b8f0: add             x1, x1, HEAP, lsl #32
    // 0x95b8f4: cmp             w1, NULL
    // 0x95b8f8: b.eq            #0x95b974
    // 0x95b8fc: LoadField: r0 = r1->field_8b
    //     0x95b8fc: ldur            w0, [x1, #0x8b]
    // 0x95b900: DecompressPointer r0
    //     0x95b900: add             x0, x0, HEAP, lsl #32
    // 0x95b904: cmp             w0, NULL
    // 0x95b908: b.ne            #0x95b914
    // 0x95b90c: r0 = Null
    //     0x95b90c: mov             x0, NULL
    // 0x95b910: b               #0x95b934
    // 0x95b914: r1 = LoadClassIdInstr(r0)
    //     0x95b914: ldur            x1, [x0, #-1]
    //     0x95b918: ubfx            x1, x1, #0xc, #0x14
    // 0x95b91c: str             x0, [SP]
    // 0x95b920: mov             x0, x1
    // 0x95b924: r0 = GDT[cid_x0 + 0x944]()
    //     0x95b924: add             lr, x0, #0x944
    //     0x95b928: ldr             lr, [x21, lr, lsl #3]
    //     0x95b92c: blr             lr
    // 0x95b930: r0 = false
    //     0x95b930: add             x0, NULL, #0x30  ; false
    // 0x95b934: cmp             w0, NULL
    // 0x95b938: b.eq            #0x95b954
    // 0x95b93c: tbnz            w0, #4, #0x95b954
    // 0x95b940: ldur            x2, [fp, #-8]
    // 0x95b944: r1 = Function '<anonymous closure>':.
    //     0x95b944: add             x1, PP, #0x41, lsl #12  ; [pp+0x41248] AnonymousClosure: (0x95b978), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCut (0x95b82c)
    //     0x95b948: ldr             x1, [x1, #0x248]
    // 0x95b94c: r0 = AllocateClosure()
    //     0x95b94c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x95b950: b               #0x95b958
    // 0x95b954: r0 = Null
    //     0x95b954: mov             x0, NULL
    // 0x95b958: LeaveFrame
    //     0x95b958: mov             SP, fp
    //     0x95b95c: ldp             fp, lr, [SP], #0x10
    // 0x95b960: ret
    //     0x95b960: ret             
    // 0x95b964: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b964: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95b968: b               #0x95b844
    // 0x95b96c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b96c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b970: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b970: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95b974: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95b974: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x95b978, size: 0x8c
    // 0x95b978: EnterFrame
    //     0x95b978: stp             fp, lr, [SP, #-0x10]!
    //     0x95b97c: mov             fp, SP
    // 0x95b980: AllocStack(0x18)
    //     0x95b980: sub             SP, SP, #0x18
    // 0x95b984: SetupParameters()
    //     0x95b984: ldr             x0, [fp, #0x10]
    //     0x95b988: ldur            w1, [x0, #0x17]
    //     0x95b98c: add             x1, x1, HEAP, lsl #32
    //     0x95b990: stur            x1, [fp, #-8]
    // 0x95b994: CheckStackOverflow
    //     0x95b994: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95b998: cmp             SP, x16
    //     0x95b99c: b.ls            #0x95b9fc
    // 0x95b9a0: LoadField: r0 = r1->field_13
    //     0x95b9a0: ldur            w0, [x1, #0x13]
    // 0x95b9a4: DecompressPointer r0
    //     0x95b9a4: add             x0, x0, HEAP, lsl #32
    // 0x95b9a8: cmp             w0, NULL
    // 0x95b9ac: b.ne            #0x95b9b8
    // 0x95b9b0: mov             x0, x1
    // 0x95b9b4: b               #0x95b9d8
    // 0x95b9b8: r2 = LoadClassIdInstr(r0)
    //     0x95b9b8: ldur            x2, [x0, #-1]
    //     0x95b9bc: ubfx            x2, x2, #0xc, #0x14
    // 0x95b9c0: str             x0, [SP]
    // 0x95b9c4: mov             x0, x2
    // 0x95b9c8: r0 = GDT[cid_x0 + 0x8d3]()
    //     0x95b9c8: add             lr, x0, #0x8d3
    //     0x95b9cc: ldr             lr, [x21, lr, lsl #3]
    //     0x95b9d0: blr             lr
    // 0x95b9d4: ldur            x0, [fp, #-8]
    // 0x95b9d8: LoadField: r1 = r0->field_f
    //     0x95b9d8: ldur            w1, [x0, #0xf]
    // 0x95b9dc: DecompressPointer r1
    //     0x95b9dc: add             x1, x1, HEAP, lsl #32
    // 0x95b9e0: r16 = Instance_SelectionChangedCause
    //     0x95b9e0: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x95b9e4: stp             x16, x1, [SP]
    // 0x95b9e8: r0 = cutSelection()
    //     0x95b9e8: bl              #0x69e44c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::cutSelection
    // 0x95b9ec: r0 = Null
    //     0x95b9ec: mov             x0, NULL
    // 0x95b9f0: LeaveFrame
    //     0x95b9f0: mov             SP, fp
    //     0x95b9f4: ldp             fp, lr, [SP], #0x10
    // 0x95b9f8: ret
    //     0x95b9f8: ret             
    // 0x95b9fc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b9fc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95ba00: b               #0x95b9a0
  }
  _ _semanticsOnCopy(/* No info */) {
    // ** addr: 0x95ba04, size: 0x14c
    // 0x95ba04: EnterFrame
    //     0x95ba04: stp             fp, lr, [SP, #-0x10]!
    //     0x95ba08: mov             fp, SP
    // 0x95ba0c: AllocStack(0x10)
    //     0x95ba0c: sub             SP, SP, #0x10
    // 0x95ba10: CheckStackOverflow
    //     0x95ba10: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95ba14: cmp             SP, x16
    //     0x95ba18: b.ls            #0x95bb3c
    // 0x95ba1c: r1 = 2
    //     0x95ba1c: movz            x1, #0x2
    // 0x95ba20: r0 = AllocateContext()
    //     0x95ba20: bl              #0xc5def4  ; AllocateContextStub
    // 0x95ba24: mov             x1, x0
    // 0x95ba28: ldr             x0, [fp, #0x18]
    // 0x95ba2c: stur            x1, [fp, #-8]
    // 0x95ba30: StoreField: r1->field_f = r0
    //     0x95ba30: stur            w0, [x1, #0xf]
    // 0x95ba34: ldr             x2, [fp, #0x10]
    // 0x95ba38: StoreField: r1->field_13 = r2
    //     0x95ba38: stur            w2, [x1, #0x13]
    // 0x95ba3c: LoadField: r2 = r0->field_b
    //     0x95ba3c: ldur            w2, [x0, #0xb]
    // 0x95ba40: DecompressPointer r2
    //     0x95ba40: add             x2, x2, HEAP, lsl #32
    // 0x95ba44: cmp             w2, NULL
    // 0x95ba48: b.eq            #0x95bb44
    // 0x95ba4c: LoadField: r3 = r2->field_f
    //     0x95ba4c: ldur            w3, [x2, #0xf]
    // 0x95ba50: DecompressPointer r3
    //     0x95ba50: add             x3, x3, HEAP, lsl #32
    // 0x95ba54: str             x3, [SP]
    // 0x95ba58: r0 = hasFocus()
    //     0x95ba58: bl              #0x5cd6f8  ; [package:flutter/src/widgets/focus_manager.dart] FocusNode::hasFocus
    // 0x95ba5c: tbnz            w0, #4, #0x95bb2c
    // 0x95ba60: ldr             x0, [fp, #0x18]
    // 0x95ba64: LoadField: r1 = r0->field_b
    //     0x95ba64: ldur            w1, [x0, #0xb]
    // 0x95ba68: DecompressPointer r1
    //     0x95ba68: add             x1, x1, HEAP, lsl #32
    // 0x95ba6c: cmp             w1, NULL
    // 0x95ba70: b.eq            #0x95bb48
    // 0x95ba74: LoadField: r2 = r1->field_8b
    //     0x95ba74: ldur            w2, [x1, #0x8b]
    // 0x95ba78: DecompressPointer r2
    //     0x95ba78: add             x2, x2, HEAP, lsl #32
    // 0x95ba7c: r1 = LoadClassIdInstr(r2)
    //     0x95ba7c: ldur            x1, [x2, #-1]
    //     0x95ba80: ubfx            x1, x1, #0xc, #0x14
    // 0x95ba84: lsl             x1, x1, #1
    // 0x95ba88: r2 = LoadInt32Instr(r1)
    //     0x95ba88: sbfx            x2, x1, #1, #0x1f
    // 0x95ba8c: r17 = 4411
    //     0x95ba8c: movz            x17, #0x113b
    // 0x95ba90: cmp             x2, x17
    // 0x95ba94: b.lt            #0x95bab4
    // 0x95ba98: r17 = 4421
    //     0x95ba98: movz            x17, #0x1145
    // 0x95ba9c: cmp             x2, x17
    // 0x95baa0: b.gt            #0x95bab4
    // 0x95baa4: str             x0, [SP]
    // 0x95baa8: r0 = copyEnabled()
    //     0x95baa8: bl              #0x69d06c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copyEnabled
    // 0x95baac: tbnz            w0, #4, #0x95bb2c
    // 0x95bab0: b               #0x95bb18
    // 0x95bab4: str             x0, [SP]
    // 0x95bab8: r0 = copyEnabled()
    //     0x95bab8: bl              #0x69d06c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copyEnabled
    // 0x95babc: tbnz            w0, #4, #0x95bb2c
    // 0x95bac0: ldr             x0, [fp, #0x18]
    // 0x95bac4: LoadField: r1 = r0->field_b
    //     0x95bac4: ldur            w1, [x0, #0xb]
    // 0x95bac8: DecompressPointer r1
    //     0x95bac8: add             x1, x1, HEAP, lsl #32
    // 0x95bacc: cmp             w1, NULL
    // 0x95bad0: b.eq            #0x95bb4c
    // 0x95bad4: LoadField: r0 = r1->field_8b
    //     0x95bad4: ldur            w0, [x1, #0x8b]
    // 0x95bad8: DecompressPointer r0
    //     0x95bad8: add             x0, x0, HEAP, lsl #32
    // 0x95badc: cmp             w0, NULL
    // 0x95bae0: b.ne            #0x95baec
    // 0x95bae4: r0 = Null
    //     0x95bae4: mov             x0, NULL
    // 0x95bae8: b               #0x95bb0c
    // 0x95baec: r1 = LoadClassIdInstr(r0)
    //     0x95baec: ldur            x1, [x0, #-1]
    //     0x95baf0: ubfx            x1, x1, #0xc, #0x14
    // 0x95baf4: str             x0, [SP]
    // 0x95baf8: mov             x0, x1
    // 0x95bafc: r0 = GDT[cid_x0 + 0x8e8]()
    //     0x95bafc: add             lr, x0, #0x8e8
    //     0x95bb00: ldr             lr, [x21, lr, lsl #3]
    //     0x95bb04: blr             lr
    // 0x95bb08: r0 = false
    //     0x95bb08: add             x0, NULL, #0x30  ; false
    // 0x95bb0c: cmp             w0, NULL
    // 0x95bb10: b.eq            #0x95bb2c
    // 0x95bb14: tbnz            w0, #4, #0x95bb2c
    // 0x95bb18: ldur            x2, [fp, #-8]
    // 0x95bb1c: r1 = Function '<anonymous closure>':.
    //     0x95bb1c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41250] AnonymousClosure: (0x95bb50), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_semanticsOnCopy (0x95ba04)
    //     0x95bb20: ldr             x1, [x1, #0x250]
    // 0x95bb24: r0 = AllocateClosure()
    //     0x95bb24: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x95bb28: b               #0x95bb30
    // 0x95bb2c: r0 = Null
    //     0x95bb2c: mov             x0, NULL
    // 0x95bb30: LeaveFrame
    //     0x95bb30: mov             SP, fp
    //     0x95bb34: ldp             fp, lr, [SP], #0x10
    // 0x95bb38: ret
    //     0x95bb38: ret             
    // 0x95bb3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95bb3c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95bb40: b               #0x95ba1c
    // 0x95bb44: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95bb44: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95bb48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95bb48: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x95bb4c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95bb4c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x95bb50, size: 0x8c
    // 0x95bb50: EnterFrame
    //     0x95bb50: stp             fp, lr, [SP, #-0x10]!
    //     0x95bb54: mov             fp, SP
    // 0x95bb58: AllocStack(0x18)
    //     0x95bb58: sub             SP, SP, #0x18
    // 0x95bb5c: SetupParameters()
    //     0x95bb5c: ldr             x0, [fp, #0x10]
    //     0x95bb60: ldur            w1, [x0, #0x17]
    //     0x95bb64: add             x1, x1, HEAP, lsl #32
    //     0x95bb68: stur            x1, [fp, #-8]
    // 0x95bb6c: CheckStackOverflow
    //     0x95bb6c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95bb70: cmp             SP, x16
    //     0x95bb74: b.ls            #0x95bbd4
    // 0x95bb78: LoadField: r0 = r1->field_13
    //     0x95bb78: ldur            w0, [x1, #0x13]
    // 0x95bb7c: DecompressPointer r0
    //     0x95bb7c: add             x0, x0, HEAP, lsl #32
    // 0x95bb80: cmp             w0, NULL
    // 0x95bb84: b.ne            #0x95bb90
    // 0x95bb88: mov             x0, x1
    // 0x95bb8c: b               #0x95bbb0
    // 0x95bb90: r2 = LoadClassIdInstr(r0)
    //     0x95bb90: ldur            x2, [x0, #-1]
    //     0x95bb94: ubfx            x2, x2, #0xc, #0x14
    // 0x95bb98: str             x0, [SP]
    // 0x95bb9c: mov             x0, x2
    // 0x95bba0: r0 = GDT[cid_x0 + 0x8bf]()
    //     0x95bba0: add             lr, x0, #0x8bf
    //     0x95bba4: ldr             lr, [x21, lr, lsl #3]
    //     0x95bba8: blr             lr
    // 0x95bbac: ldur            x0, [fp, #-8]
    // 0x95bbb0: LoadField: r1 = r0->field_f
    //     0x95bbb0: ldur            w1, [x0, #0xf]
    // 0x95bbb4: DecompressPointer r1
    //     0x95bbb4: add             x1, x1, HEAP, lsl #32
    // 0x95bbb8: r16 = Instance_SelectionChangedCause
    //     0x95bbb8: ldr             x16, [PP, #0x61c0]  ; [pp+0x61c0] Obj!SelectionChangedCause@c42fd1
    // 0x95bbbc: stp             x16, x1, [SP]
    // 0x95bbc0: r0 = copySelection()
    //     0x95bbc0: bl              #0x69e188  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::copySelection
    // 0x95bbc4: r0 = Null
    //     0x95bbc4: mov             x0, NULL
    // 0x95bbc8: LeaveFrame
    //     0x95bbc8: mov             SP, fp
    //     0x95bbcc: ldp             fp, lr, [SP], #0x10
    // 0x95bbd0: ret
    //     0x95bbd0: ret             
    // 0x95bbd4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95bbd4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95bbd8: b               #0x95bb78
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0x95bbdc, size: 0x70
    // 0x95bbdc: EnterFrame
    //     0x95bbdc: stp             fp, lr, [SP, #-0x10]!
    //     0x95bbe0: mov             fp, SP
    // 0x95bbe4: AllocStack(0x18)
    //     0x95bbe4: sub             SP, SP, #0x18
    // 0x95bbe8: SetupParameters()
    //     0x95bbe8: ldr             x0, [fp, #0x10]
    //     0x95bbec: ldur            w1, [x0, #0x17]
    //     0x95bbf0: add             x1, x1, HEAP, lsl #32
    //     0x95bbf4: stur            x1, [fp, #-8]
    // 0x95bbf8: CheckStackOverflow
    //     0x95bbf8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95bbfc: cmp             SP, x16
    //     0x95bc00: b.ls            #0x95bc44
    // 0x95bc04: LoadField: r0 = r1->field_f
    //     0x95bc04: ldur            w0, [x1, #0xf]
    // 0x95bc08: DecompressPointer r0
    //     0x95bc08: add             x0, x0, HEAP, lsl #32
    // 0x95bc0c: str             x0, [SP]
    // 0x95bc10: r0 = _openInputConnection()
    //     0x95bc10: bl              #0x5d9568  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_openInputConnection
    // 0x95bc14: ldur            x0, [fp, #-8]
    // 0x95bc18: LoadField: r1 = r0->field_f
    //     0x95bc18: ldur            w1, [x0, #0xf]
    // 0x95bc1c: DecompressPointer r1
    //     0x95bc1c: add             x1, x1, HEAP, lsl #32
    // 0x95bc20: r16 = true
    //     0x95bc20: add             x16, NULL, #0x20  ; true
    // 0x95bc24: stp             x16, x1, [SP]
    // 0x95bc28: r4 = const [0, 0x2, 0x2, 0x1, force, 0x1, null]
    //     0x95bc28: add             x4, PP, #0x41, lsl #12  ; [pp+0x41210] List(7) [0, 0x2, 0x2, 0x1, "force", 0x1, Null]
    //     0x95bc2c: ldr             x4, [x4, #0x210]
    // 0x95bc30: r0 = _updateSelectionRects()
    //     0x95bc30: bl              #0x5dab88  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelectionRects
    // 0x95bc34: r0 = Null
    //     0x95bc34: mov             x0, NULL
    // 0x95bc38: LeaveFrame
    //     0x95bc38: mov             SP, fp
    //     0x95bc3c: ldp             fp, lr, [SP], #0x10
    // 0x95bc40: ret
    //     0x95bc40: ret             
    // 0x95bc44: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95bc44: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95bc48: b               #0x95bc04
  }
  Map<Type, Action<Intent>> _actions(EditableTextState) {
    // ** addr: 0x95bc4c, size: 0x1134
    // 0x95bc4c: EnterFrame
    //     0x95bc4c: stp             fp, lr, [SP, #-0x10]!
    //     0x95bc50: mov             fp, SP
    // 0x95bc54: AllocStack(0x58)
    //     0x95bc54: sub             SP, SP, #0x58
    // 0x95bc58: CheckStackOverflow
    //     0x95bc58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95bc5c: cmp             SP, x16
    //     0x95bc60: b.ls            #0x95cd78
    // 0x95bc64: r1 = 1
    //     0x95bc64: movz            x1, #0x1
    // 0x95bc68: r0 = AllocateContext()
    //     0x95bc68: bl              #0xc5def4  ; AllocateContextStub
    // 0x95bc6c: mov             x3, x0
    // 0x95bc70: ldr             x0, [fp, #0x10]
    // 0x95bc74: stur            x3, [fp, #-8]
    // 0x95bc78: StoreField: r3->field_f = r0
    //     0x95bc78: stur            w0, [x3, #0xf]
    // 0x95bc7c: r1 = Null
    //     0x95bc7c: mov             x1, NULL
    // 0x95bc80: r2 = 104
    //     0x95bc80: movz            x2, #0x68
    // 0x95bc84: r0 = AllocateArray()
    //     0x95bc84: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x95bc88: stur            x0, [fp, #-0x10]
    // 0x95bc8c: r17 = DoNothingAndStopPropagationTextIntent
    //     0x95bc8c: add             x17, PP, #0x41, lsl #12  ; [pp+0x41258] Type: DoNothingAndStopPropagationTextIntent
    //     0x95bc90: ldr             x17, [x17, #0x258]
    // 0x95bc94: StoreField: r0->field_f = r17
    //     0x95bc94: stur            w17, [x0, #0xf]
    // 0x95bc98: r1 = <Intent>
    //     0x95bc98: ldr             x1, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95bc9c: r0 = DoNothingAction()
    //     0x95bc9c: bl              #0x957530  ; AllocateDoNothingActionStub -> DoNothingAction (size=0x18)
    // 0x95bca0: mov             x1, x0
    // 0x95bca4: r0 = false
    //     0x95bca4: add             x0, NULL, #0x30  ; false
    // 0x95bca8: stur            x1, [fp, #-0x18]
    // 0x95bcac: StoreField: r1->field_13 = r0
    //     0x95bcac: stur            w0, [x1, #0x13]
    // 0x95bcb0: str             x1, [SP]
    // 0x95bcb4: r0 = Action()
    //     0x95bcb4: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95bcb8: ldur            x1, [fp, #-0x10]
    // 0x95bcbc: ldur            x0, [fp, #-0x18]
    // 0x95bcc0: ArrayStore: r1[1] = r0  ; List_4
    //     0x95bcc0: add             x25, x1, #0x13
    //     0x95bcc4: str             w0, [x25]
    //     0x95bcc8: tbz             w0, #0, #0x95bce4
    //     0x95bccc: ldurb           w16, [x1, #-1]
    //     0x95bcd0: ldurb           w17, [x0, #-1]
    //     0x95bcd4: and             x16, x17, x16, lsr #2
    //     0x95bcd8: tst             x16, HEAP, lsr #32
    //     0x95bcdc: b.eq            #0x95bce4
    //     0x95bce0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95bce4: ldur            x0, [fp, #-0x10]
    // 0x95bce8: r17 = ReplaceTextIntent
    //     0x95bce8: add             x17, PP, #0x41, lsl #12  ; [pp+0x41260] Type: ReplaceTextIntent
    //     0x95bcec: ldr             x17, [x17, #0x260]
    // 0x95bcf0: ArrayStore: r0[0] = r17  ; List_4
    //     0x95bcf0: stur            w17, [x0, #0x17]
    // 0x95bcf4: ldr             x1, [fp, #0x10]
    // 0x95bcf8: LoadField: r0 = r1->field_bb
    //     0x95bcf8: ldur            w0, [x1, #0xbb]
    // 0x95bcfc: DecompressPointer r0
    //     0x95bcfc: add             x0, x0, HEAP, lsl #32
    // 0x95bd00: r16 = Sentinel
    //     0x95bd00: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95bd04: cmp             w0, w16
    // 0x95bd08: b.ne            #0x95bd18
    // 0x95bd0c: r2 = _replaceTextAction
    //     0x95bd0c: add             x2, PP, #0x41, lsl #12  ; [pp+0x41268] Field <EditableTextState._replaceTextAction@244183791>: late final (offset: 0xbc)
    //     0x95bd10: ldr             x2, [x2, #0x268]
    // 0x95bd14: r0 = InitLateFinalInstanceField()
    //     0x95bd14: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95bd18: ldur            x1, [fp, #-0x10]
    // 0x95bd1c: ArrayStore: r1[3] = r0  ; List_4
    //     0x95bd1c: add             x25, x1, #0x1b
    //     0x95bd20: str             w0, [x25]
    //     0x95bd24: tbz             w0, #0, #0x95bd40
    //     0x95bd28: ldurb           w16, [x1, #-1]
    //     0x95bd2c: ldurb           w17, [x0, #-1]
    //     0x95bd30: and             x16, x17, x16, lsr #2
    //     0x95bd34: tst             x16, HEAP, lsr #32
    //     0x95bd38: b.eq            #0x95bd40
    //     0x95bd3c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95bd40: ldur            x0, [fp, #-0x10]
    // 0x95bd44: r17 = UpdateSelectionIntent
    //     0x95bd44: add             x17, PP, #0x41, lsl #12  ; [pp+0x41270] Type: UpdateSelectionIntent
    //     0x95bd48: ldr             x17, [x17, #0x270]
    // 0x95bd4c: StoreField: r0->field_1f = r17
    //     0x95bd4c: stur            w17, [x0, #0x1f]
    // 0x95bd50: ldr             x1, [fp, #0x10]
    // 0x95bd54: LoadField: r0 = r1->field_bf
    //     0x95bd54: ldur            w0, [x1, #0xbf]
    // 0x95bd58: DecompressPointer r0
    //     0x95bd58: add             x0, x0, HEAP, lsl #32
    // 0x95bd5c: r16 = Sentinel
    //     0x95bd5c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95bd60: cmp             w0, w16
    // 0x95bd64: b.ne            #0x95bd74
    // 0x95bd68: r2 = _updateSelectionAction
    //     0x95bd68: add             x2, PP, #0x41, lsl #12  ; [pp+0x41278] Field <EditableTextState._updateSelectionAction@244183791>: late final (offset: 0xc0)
    //     0x95bd6c: ldr             x2, [x2, #0x278]
    // 0x95bd70: r0 = InitLateFinalInstanceField()
    //     0x95bd70: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95bd74: ldur            x1, [fp, #-0x10]
    // 0x95bd78: ArrayStore: r1[5] = r0  ; List_4
    //     0x95bd78: add             x25, x1, #0x23
    //     0x95bd7c: str             w0, [x25]
    //     0x95bd80: tbz             w0, #0, #0x95bd9c
    //     0x95bd84: ldurb           w16, [x1, #-1]
    //     0x95bd88: ldurb           w17, [x0, #-1]
    //     0x95bd8c: and             x16, x17, x16, lsr #2
    //     0x95bd90: tst             x16, HEAP, lsr #32
    //     0x95bd94: b.eq            #0x95bd9c
    //     0x95bd98: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95bd9c: ldur            x0, [fp, #-0x10]
    // 0x95bda0: r17 = DirectionalFocusIntent
    //     0x95bda0: add             x17, PP, #0x2b, lsl #12  ; [pp+0x2bf18] Type: DirectionalFocusIntent
    //     0x95bda4: ldr             x17, [x17, #0xf18]
    // 0x95bda8: StoreField: r0->field_27 = r17
    //     0x95bda8: stur            w17, [x0, #0x27]
    // 0x95bdac: r1 = <DirectionalFocusIntent>
    //     0x95bdac: add             x1, PP, #0x2b, lsl #12  ; [pp+0x2bf20] TypeArguments: <DirectionalFocusIntent>
    //     0x95bdb0: ldr             x1, [x1, #0xf20]
    // 0x95bdb4: r0 = DirectionalFocusAction()
    //     0x95bdb4: bl              #0x957474  ; AllocateDirectionalFocusActionStub -> DirectionalFocusAction (size=0x18)
    // 0x95bdb8: mov             x1, x0
    // 0x95bdbc: r0 = true
    //     0x95bdbc: add             x0, NULL, #0x20  ; true
    // 0x95bdc0: stur            x1, [fp, #-0x18]
    // 0x95bdc4: StoreField: r1->field_13 = r0
    //     0x95bdc4: stur            w0, [x1, #0x13]
    // 0x95bdc8: str             x1, [SP]
    // 0x95bdcc: r0 = Action()
    //     0x95bdcc: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95bdd0: ldur            x1, [fp, #-0x10]
    // 0x95bdd4: ldur            x0, [fp, #-0x18]
    // 0x95bdd8: ArrayStore: r1[7] = r0  ; List_4
    //     0x95bdd8: add             x25, x1, #0x2b
    //     0x95bddc: str             w0, [x25]
    //     0x95bde0: tbz             w0, #0, #0x95bdfc
    //     0x95bde4: ldurb           w16, [x1, #-1]
    //     0x95bde8: ldurb           w17, [x0, #-1]
    //     0x95bdec: and             x16, x17, x16, lsr #2
    //     0x95bdf0: tst             x16, HEAP, lsr #32
    //     0x95bdf4: b.eq            #0x95bdfc
    //     0x95bdf8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95bdfc: ldur            x1, [fp, #-0x10]
    // 0x95be00: r17 = DismissIntent
    //     0x95be00: add             x17, PP, #0x25, lsl #12  ; [pp+0x255c8] Type: DismissIntent
    //     0x95be04: ldr             x17, [x17, #0x5c8]
    // 0x95be08: StoreField: r1->field_2f = r17
    //     0x95be08: stur            w17, [x1, #0x2f]
    // 0x95be0c: ldr             x2, [fp, #0x10]
    // 0x95be10: r0 = 59
    //     0x95be10: movz            x0, #0x3b
    // 0x95be14: branchIfSmi(r2, 0x95be20)
    //     0x95be14: tbz             w2, #0, #0x95be20
    // 0x95be18: r0 = LoadClassIdInstr(r2)
    //     0x95be18: ldur            x0, [x2, #-1]
    //     0x95be1c: ubfx            x0, x0, #0xc, #0x14
    // 0x95be20: str             x2, [SP]
    // 0x95be24: r0 = GDT[cid_x0 + -0xfe3]()
    //     0x95be24: sub             lr, x0, #0xfe3
    //     0x95be28: ldr             lr, [x21, lr, lsl #3]
    //     0x95be2c: blr             lr
    // 0x95be30: r1 = <DismissIntent>
    //     0x95be30: add             x1, PP, #0x25, lsl #12  ; [pp+0x255d0] TypeArguments: <DismissIntent>
    //     0x95be34: ldr             x1, [x1, #0x5d0]
    // 0x95be38: stur            x0, [fp, #-0x18]
    // 0x95be3c: r0 = CallbackAction()
    //     0x95be3c: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95be40: mov             x1, x0
    // 0x95be44: ldur            x0, [fp, #-0x18]
    // 0x95be48: stur            x1, [fp, #-0x20]
    // 0x95be4c: StoreField: r1->field_13 = r0
    //     0x95be4c: stur            w0, [x1, #0x13]
    // 0x95be50: str             x1, [SP]
    // 0x95be54: r0 = Action()
    //     0x95be54: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95be58: ldur            x1, [fp, #-0x10]
    // 0x95be5c: ldur            x0, [fp, #-0x20]
    // 0x95be60: ArrayStore: r1[9] = r0  ; List_4
    //     0x95be60: add             x25, x1, #0x33
    //     0x95be64: str             w0, [x25]
    //     0x95be68: tbz             w0, #0, #0x95be84
    //     0x95be6c: ldurb           w16, [x1, #-1]
    //     0x95be70: ldurb           w17, [x0, #-1]
    //     0x95be74: and             x16, x17, x16, lsr #2
    //     0x95be78: tst             x16, HEAP, lsr #32
    //     0x95be7c: b.eq            #0x95be84
    //     0x95be80: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95be84: ldur            x1, [fp, #-0x10]
    // 0x95be88: r17 = DeleteCharacterIntent
    //     0x95be88: add             x17, PP, #0x41, lsl #12  ; [pp+0x41280] Type: DeleteCharacterIntent
    //     0x95be8c: ldr             x17, [x17, #0x280]
    // 0x95be90: StoreField: r1->field_37 = r17
    //     0x95be90: stur            w17, [x1, #0x37]
    // 0x95be94: ldr             x2, [fp, #0x10]
    // 0x95be98: r0 = 59
    //     0x95be98: movz            x0, #0x3b
    // 0x95be9c: branchIfSmi(r2, 0x95bea8)
    //     0x95be9c: tbz             w2, #0, #0x95bea8
    // 0x95bea0: r0 = LoadClassIdInstr(r2)
    //     0x95bea0: ldur            x0, [x2, #-1]
    //     0x95bea4: ubfx            x0, x0, #0xc, #0x14
    // 0x95bea8: str             x2, [SP]
    // 0x95beac: r0 = GDT[cid_x0 + -0xff1]()
    //     0x95beac: sub             lr, x0, #0xff1
    //     0x95beb0: ldr             lr, [x21, lr, lsl #3]
    //     0x95beb4: blr             lr
    // 0x95beb8: mov             x2, x0
    // 0x95bebc: ldr             x1, [fp, #0x10]
    // 0x95bec0: stur            x2, [fp, #-0x18]
    // 0x95bec4: r0 = 59
    //     0x95bec4: movz            x0, #0x3b
    // 0x95bec8: branchIfSmi(r1, 0x95bed4)
    //     0x95bec8: tbz             w1, #0, #0x95bed4
    // 0x95becc: r0 = LoadClassIdInstr(r1)
    //     0x95becc: ldur            x0, [x1, #-1]
    //     0x95bed0: ubfx            x0, x0, #0xc, #0x14
    // 0x95bed4: str             x1, [SP]
    // 0x95bed8: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95bed8: sub             lr, x0, #1, lsl #12
    //     0x95bedc: ldr             lr, [x21, lr, lsl #3]
    //     0x95bee0: blr             lr
    // 0x95bee4: r1 = <DeleteCharacterIntent>
    //     0x95bee4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41288] TypeArguments: <DeleteCharacterIntent>
    //     0x95bee8: ldr             x1, [x1, #0x288]
    // 0x95beec: stur            x0, [fp, #-0x20]
    // 0x95bef0: r0 = _DeleteTextAction()
    //     0x95bef0: bl              #0x95cf98  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x95bef4: ldr             x1, [fp, #0x10]
    // 0x95bef8: stur            x0, [fp, #-0x28]
    // 0x95befc: StoreField: r0->field_13 = r1
    //     0x95befc: stur            w1, [x0, #0x13]
    // 0x95bf00: ldur            x2, [fp, #-0x18]
    // 0x95bf04: ArrayStore: r0[0] = r2  ; List_4
    //     0x95bf04: stur            w2, [x0, #0x17]
    // 0x95bf08: ldur            x2, [fp, #-0x20]
    // 0x95bf0c: StoreField: r0->field_1b = r2
    //     0x95bf0c: stur            w2, [x0, #0x1b]
    // 0x95bf10: str             x0, [SP]
    // 0x95bf14: r0 = Action()
    //     0x95bf14: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95bf18: r16 = <Intent>
    //     0x95bf18: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95bf1c: ldr             lr, [fp, #0x10]
    // 0x95bf20: stp             lr, x16, [SP, #8]
    // 0x95bf24: ldur            x16, [fp, #-0x28]
    // 0x95bf28: str             x16, [SP]
    // 0x95bf2c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95bf2c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95bf30: r0 = _makeOverridable()
    //     0x95bf30: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95bf34: ldur            x1, [fp, #-0x10]
    // 0x95bf38: ArrayStore: r1[11] = r0  ; List_4
    //     0x95bf38: add             x25, x1, #0x3b
    //     0x95bf3c: str             w0, [x25]
    //     0x95bf40: tbz             w0, #0, #0x95bf5c
    //     0x95bf44: ldurb           w16, [x1, #-1]
    //     0x95bf48: ldurb           w17, [x0, #-1]
    //     0x95bf4c: and             x16, x17, x16, lsr #2
    //     0x95bf50: tst             x16, HEAP, lsr #32
    //     0x95bf54: b.eq            #0x95bf5c
    //     0x95bf58: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95bf5c: ldur            x1, [fp, #-0x10]
    // 0x95bf60: r17 = DeleteToNextWordBoundaryIntent
    //     0x95bf60: add             x17, PP, #0x41, lsl #12  ; [pp+0x41290] Type: DeleteToNextWordBoundaryIntent
    //     0x95bf64: ldr             x17, [x17, #0x290]
    // 0x95bf68: StoreField: r1->field_3f = r17
    //     0x95bf68: stur            w17, [x1, #0x3f]
    // 0x95bf6c: ldr             x2, [fp, #0x10]
    // 0x95bf70: r0 = 59
    //     0x95bf70: movz            x0, #0x3b
    // 0x95bf74: branchIfSmi(r2, 0x95bf80)
    //     0x95bf74: tbz             w2, #0, #0x95bf80
    // 0x95bf78: r0 = LoadClassIdInstr(r2)
    //     0x95bf78: ldur            x0, [x2, #-1]
    //     0x95bf7c: ubfx            x0, x0, #0xc, #0x14
    // 0x95bf80: str             x2, [SP]
    // 0x95bf84: r0 = GDT[cid_x0 + -0xff8]()
    //     0x95bf84: sub             lr, x0, #0xff8
    //     0x95bf88: ldr             lr, [x21, lr, lsl #3]
    //     0x95bf8c: blr             lr
    // 0x95bf90: mov             x2, x0
    // 0x95bf94: ldr             x1, [fp, #0x10]
    // 0x95bf98: stur            x2, [fp, #-0x18]
    // 0x95bf9c: r0 = 59
    //     0x95bf9c: movz            x0, #0x3b
    // 0x95bfa0: branchIfSmi(r1, 0x95bfac)
    //     0x95bfa0: tbz             w1, #0, #0x95bfac
    // 0x95bfa4: r0 = LoadClassIdInstr(r1)
    //     0x95bfa4: ldur            x0, [x1, #-1]
    //     0x95bfa8: ubfx            x0, x0, #0xc, #0x14
    // 0x95bfac: str             x1, [SP]
    // 0x95bfb0: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95bfb0: sub             lr, x0, #1, lsl #12
    //     0x95bfb4: ldr             lr, [x21, lr, lsl #3]
    //     0x95bfb8: blr             lr
    // 0x95bfbc: r1 = <DeleteToNextWordBoundaryIntent>
    //     0x95bfbc: add             x1, PP, #0x41, lsl #12  ; [pp+0x41298] TypeArguments: <DeleteToNextWordBoundaryIntent>
    //     0x95bfc0: ldr             x1, [x1, #0x298]
    // 0x95bfc4: stur            x0, [fp, #-0x20]
    // 0x95bfc8: r0 = _DeleteTextAction()
    //     0x95bfc8: bl              #0x95cf98  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x95bfcc: ldr             x1, [fp, #0x10]
    // 0x95bfd0: stur            x0, [fp, #-0x28]
    // 0x95bfd4: StoreField: r0->field_13 = r1
    //     0x95bfd4: stur            w1, [x0, #0x13]
    // 0x95bfd8: ldur            x2, [fp, #-0x18]
    // 0x95bfdc: ArrayStore: r0[0] = r2  ; List_4
    //     0x95bfdc: stur            w2, [x0, #0x17]
    // 0x95bfe0: ldur            x2, [fp, #-0x20]
    // 0x95bfe4: StoreField: r0->field_1b = r2
    //     0x95bfe4: stur            w2, [x0, #0x1b]
    // 0x95bfe8: str             x0, [SP]
    // 0x95bfec: r0 = Action()
    //     0x95bfec: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95bff0: r16 = <Intent>
    //     0x95bff0: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95bff4: ldr             lr, [fp, #0x10]
    // 0x95bff8: stp             lr, x16, [SP, #8]
    // 0x95bffc: ldur            x16, [fp, #-0x28]
    // 0x95c000: str             x16, [SP]
    // 0x95c004: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c004: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c008: r0 = _makeOverridable()
    //     0x95c008: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c00c: ldur            x1, [fp, #-0x10]
    // 0x95c010: ArrayStore: r1[13] = r0  ; List_4
    //     0x95c010: add             x25, x1, #0x43
    //     0x95c014: str             w0, [x25]
    //     0x95c018: tbz             w0, #0, #0x95c034
    //     0x95c01c: ldurb           w16, [x1, #-1]
    //     0x95c020: ldurb           w17, [x0, #-1]
    //     0x95c024: and             x16, x17, x16, lsr #2
    //     0x95c028: tst             x16, HEAP, lsr #32
    //     0x95c02c: b.eq            #0x95c034
    //     0x95c030: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c034: ldur            x1, [fp, #-0x10]
    // 0x95c038: r17 = DeleteToLineBreakIntent
    //     0x95c038: add             x17, PP, #0x41, lsl #12  ; [pp+0x412a0] Type: DeleteToLineBreakIntent
    //     0x95c03c: ldr             x17, [x17, #0x2a0]
    // 0x95c040: StoreField: r1->field_47 = r17
    //     0x95c040: stur            w17, [x1, #0x47]
    // 0x95c044: ldr             x2, [fp, #0x10]
    // 0x95c048: r0 = 59
    //     0x95c048: movz            x0, #0x3b
    // 0x95c04c: branchIfSmi(r2, 0x95c058)
    //     0x95c04c: tbz             w2, #0, #0x95c058
    // 0x95c050: r0 = LoadClassIdInstr(r2)
    //     0x95c050: ldur            x0, [x2, #-1]
    //     0x95c054: ubfx            x0, x0, #0xc, #0x14
    // 0x95c058: str             x2, [SP]
    // 0x95c05c: r0 = GDT[cid_x0 + -0xff9]()
    //     0x95c05c: sub             lr, x0, #0xff9
    //     0x95c060: ldr             lr, [x21, lr, lsl #3]
    //     0x95c064: blr             lr
    // 0x95c068: mov             x2, x0
    // 0x95c06c: ldr             x1, [fp, #0x10]
    // 0x95c070: stur            x2, [fp, #-0x18]
    // 0x95c074: r0 = 59
    //     0x95c074: movz            x0, #0x3b
    // 0x95c078: branchIfSmi(r1, 0x95c084)
    //     0x95c078: tbz             w1, #0, #0x95c084
    // 0x95c07c: r0 = LoadClassIdInstr(r1)
    //     0x95c07c: ldur            x0, [x1, #-1]
    //     0x95c080: ubfx            x0, x0, #0xc, #0x14
    // 0x95c084: str             x1, [SP]
    // 0x95c088: r0 = GDT[cid_x0 + -0xffc]()
    //     0x95c088: sub             lr, x0, #0xffc
    //     0x95c08c: ldr             lr, [x21, lr, lsl #3]
    //     0x95c090: blr             lr
    // 0x95c094: r1 = <DeleteToLineBreakIntent>
    //     0x95c094: add             x1, PP, #0x41, lsl #12  ; [pp+0x412a8] TypeArguments: <DeleteToLineBreakIntent>
    //     0x95c098: ldr             x1, [x1, #0x2a8]
    // 0x95c09c: stur            x0, [fp, #-0x20]
    // 0x95c0a0: r0 = _DeleteTextAction()
    //     0x95c0a0: bl              #0x95cf98  ; Allocate_DeleteTextActionStub -> _DeleteTextAction<X0 bound DirectionalTextEditingIntent> (size=0x20)
    // 0x95c0a4: ldr             x1, [fp, #0x10]
    // 0x95c0a8: stur            x0, [fp, #-0x28]
    // 0x95c0ac: StoreField: r0->field_13 = r1
    //     0x95c0ac: stur            w1, [x0, #0x13]
    // 0x95c0b0: ldur            x2, [fp, #-0x18]
    // 0x95c0b4: ArrayStore: r0[0] = r2  ; List_4
    //     0x95c0b4: stur            w2, [x0, #0x17]
    // 0x95c0b8: ldur            x2, [fp, #-0x20]
    // 0x95c0bc: StoreField: r0->field_1b = r2
    //     0x95c0bc: stur            w2, [x0, #0x1b]
    // 0x95c0c0: str             x0, [SP]
    // 0x95c0c4: r0 = Action()
    //     0x95c0c4: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95c0c8: r16 = <Intent>
    //     0x95c0c8: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c0cc: ldr             lr, [fp, #0x10]
    // 0x95c0d0: stp             lr, x16, [SP, #8]
    // 0x95c0d4: ldur            x16, [fp, #-0x28]
    // 0x95c0d8: str             x16, [SP]
    // 0x95c0dc: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c0dc: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c0e0: r0 = _makeOverridable()
    //     0x95c0e0: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c0e4: ldur            x1, [fp, #-0x10]
    // 0x95c0e8: ArrayStore: r1[15] = r0  ; List_4
    //     0x95c0e8: add             x25, x1, #0x4b
    //     0x95c0ec: str             w0, [x25]
    //     0x95c0f0: tbz             w0, #0, #0x95c10c
    //     0x95c0f4: ldurb           w16, [x1, #-1]
    //     0x95c0f8: ldurb           w17, [x0, #-1]
    //     0x95c0fc: and             x16, x17, x16, lsr #2
    //     0x95c100: tst             x16, HEAP, lsr #32
    //     0x95c104: b.eq            #0x95c10c
    //     0x95c108: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c10c: ldur            x1, [fp, #-0x10]
    // 0x95c110: r17 = ExtendSelectionByCharacterIntent
    //     0x95c110: add             x17, PP, #0x41, lsl #12  ; [pp+0x412b0] Type: ExtendSelectionByCharacterIntent
    //     0x95c114: ldr             x17, [x17, #0x2b0]
    // 0x95c118: StoreField: r1->field_4f = r17
    //     0x95c118: stur            w17, [x1, #0x4f]
    // 0x95c11c: ldr             x2, [fp, #0x10]
    // 0x95c120: r0 = 59
    //     0x95c120: movz            x0, #0x3b
    // 0x95c124: branchIfSmi(r2, 0x95c130)
    //     0x95c124: tbz             w2, #0, #0x95c130
    // 0x95c128: r0 = LoadClassIdInstr(r2)
    //     0x95c128: ldur            x0, [x2, #-1]
    //     0x95c12c: ubfx            x0, x0, #0xc, #0x14
    // 0x95c130: str             x2, [SP]
    // 0x95c134: r0 = GDT[cid_x0 + -0xff1]()
    //     0x95c134: sub             lr, x0, #0xff1
    //     0x95c138: ldr             lr, [x21, lr, lsl #3]
    //     0x95c13c: blr             lr
    // 0x95c140: mov             x2, x0
    // 0x95c144: ldr             x1, [fp, #0x10]
    // 0x95c148: stur            x2, [fp, #-0x18]
    // 0x95c14c: r0 = 59
    //     0x95c14c: movz            x0, #0x3b
    // 0x95c150: branchIfSmi(r1, 0x95c15c)
    //     0x95c150: tbz             w1, #0, #0x95c15c
    // 0x95c154: r0 = LoadClassIdInstr(r1)
    //     0x95c154: ldur            x0, [x1, #-1]
    //     0x95c158: ubfx            x0, x0, #0xc, #0x14
    // 0x95c15c: str             x1, [SP]
    // 0x95c160: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c160: sub             lr, x0, #1, lsl #12
    //     0x95c164: ldr             lr, [x21, lr, lsl #3]
    //     0x95c168: blr             lr
    // 0x95c16c: r1 = <ExtendSelectionByCharacterIntent>
    //     0x95c16c: add             x1, PP, #0x41, lsl #12  ; [pp+0x412b8] TypeArguments: <ExtendSelectionByCharacterIntent>
    //     0x95c170: ldr             x1, [x1, #0x2b8]
    // 0x95c174: stur            x0, [fp, #-0x20]
    // 0x95c178: r0 = _UpdateTextSelectionAction()
    //     0x95c178: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c17c: stur            x0, [fp, #-0x28]
    // 0x95c180: ldr             x16, [fp, #0x10]
    // 0x95c184: stp             x16, x0, [SP, #0x18]
    // 0x95c188: ldur            x16, [fp, #-0x18]
    // 0x95c18c: ldur            lr, [fp, #-0x20]
    // 0x95c190: stp             lr, x16, [SP, #8]
    // 0x95c194: r16 = false
    //     0x95c194: add             x16, NULL, #0x30  ; false
    // 0x95c198: str             x16, [SP]
    // 0x95c19c: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c19c: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c1a0: r0 = _UpdateTextSelectionAction()
    //     0x95c1a0: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c1a4: r16 = <Intent>
    //     0x95c1a4: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c1a8: ldr             lr, [fp, #0x10]
    // 0x95c1ac: stp             lr, x16, [SP, #8]
    // 0x95c1b0: ldur            x16, [fp, #-0x28]
    // 0x95c1b4: str             x16, [SP]
    // 0x95c1b8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c1b8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c1bc: r0 = _makeOverridable()
    //     0x95c1bc: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c1c0: ldur            x1, [fp, #-0x10]
    // 0x95c1c4: ArrayStore: r1[17] = r0  ; List_4
    //     0x95c1c4: add             x25, x1, #0x53
    //     0x95c1c8: str             w0, [x25]
    //     0x95c1cc: tbz             w0, #0, #0x95c1e8
    //     0x95c1d0: ldurb           w16, [x1, #-1]
    //     0x95c1d4: ldurb           w17, [x0, #-1]
    //     0x95c1d8: and             x16, x17, x16, lsr #2
    //     0x95c1dc: tst             x16, HEAP, lsr #32
    //     0x95c1e0: b.eq            #0x95c1e8
    //     0x95c1e4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c1e8: ldur            x1, [fp, #-0x10]
    // 0x95c1ec: r17 = ExtendSelectionByPageIntent
    //     0x95c1ec: add             x17, PP, #0x41, lsl #12  ; [pp+0x412c0] Type: ExtendSelectionByPageIntent
    //     0x95c1f0: ldr             x17, [x17, #0x2c0]
    // 0x95c1f4: StoreField: r1->field_57 = r17
    //     0x95c1f4: stur            w17, [x1, #0x57]
    // 0x95c1f8: ldr             x2, [fp, #0x10]
    // 0x95c1fc: r0 = 59
    //     0x95c1fc: movz            x0, #0x3b
    // 0x95c200: branchIfSmi(r2, 0x95c20c)
    //     0x95c200: tbz             w2, #0, #0x95c20c
    // 0x95c204: r0 = LoadClassIdInstr(r2)
    //     0x95c204: ldur            x0, [x2, #-1]
    //     0x95c208: ubfx            x0, x0, #0xc, #0x14
    // 0x95c20c: str             x2, [SP]
    // 0x95c210: r0 = GDT[cid_x0 + -0xfe1]()
    //     0x95c210: sub             lr, x0, #0xfe1
    //     0x95c214: ldr             lr, [x21, lr, lsl #3]
    //     0x95c218: blr             lr
    // 0x95c21c: r1 = <ExtendSelectionByPageIntent>
    //     0x95c21c: add             x1, PP, #0x41, lsl #12  ; [pp+0x412c8] TypeArguments: <ExtendSelectionByPageIntent>
    //     0x95c220: ldr             x1, [x1, #0x2c8]
    // 0x95c224: stur            x0, [fp, #-0x18]
    // 0x95c228: r0 = CallbackAction()
    //     0x95c228: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95c22c: mov             x1, x0
    // 0x95c230: ldur            x0, [fp, #-0x18]
    // 0x95c234: stur            x1, [fp, #-0x20]
    // 0x95c238: StoreField: r1->field_13 = r0
    //     0x95c238: stur            w0, [x1, #0x13]
    // 0x95c23c: str             x1, [SP]
    // 0x95c240: r0 = Action()
    //     0x95c240: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95c244: r16 = <Intent>
    //     0x95c244: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c248: ldr             lr, [fp, #0x10]
    // 0x95c24c: stp             lr, x16, [SP, #8]
    // 0x95c250: ldur            x16, [fp, #-0x20]
    // 0x95c254: str             x16, [SP]
    // 0x95c258: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c258: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c25c: r0 = _makeOverridable()
    //     0x95c25c: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c260: ldur            x1, [fp, #-0x10]
    // 0x95c264: ArrayStore: r1[19] = r0  ; List_4
    //     0x95c264: add             x25, x1, #0x5b
    //     0x95c268: str             w0, [x25]
    //     0x95c26c: tbz             w0, #0, #0x95c288
    //     0x95c270: ldurb           w16, [x1, #-1]
    //     0x95c274: ldurb           w17, [x0, #-1]
    //     0x95c278: and             x16, x17, x16, lsr #2
    //     0x95c27c: tst             x16, HEAP, lsr #32
    //     0x95c280: b.eq            #0x95c288
    //     0x95c284: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c288: ldur            x1, [fp, #-0x10]
    // 0x95c28c: r17 = ExtendSelectionToNextWordBoundaryIntent
    //     0x95c28c: add             x17, PP, #0x41, lsl #12  ; [pp+0x412d0] Type: ExtendSelectionToNextWordBoundaryIntent
    //     0x95c290: ldr             x17, [x17, #0x2d0]
    // 0x95c294: StoreField: r1->field_5f = r17
    //     0x95c294: stur            w17, [x1, #0x5f]
    // 0x95c298: ldr             x2, [fp, #0x10]
    // 0x95c29c: r0 = 59
    //     0x95c29c: movz            x0, #0x3b
    // 0x95c2a0: branchIfSmi(r2, 0x95c2ac)
    //     0x95c2a0: tbz             w2, #0, #0x95c2ac
    // 0x95c2a4: r0 = LoadClassIdInstr(r2)
    //     0x95c2a4: ldur            x0, [x2, #-1]
    //     0x95c2a8: ubfx            x0, x0, #0xc, #0x14
    // 0x95c2ac: str             x2, [SP]
    // 0x95c2b0: r0 = GDT[cid_x0 + -0xff8]()
    //     0x95c2b0: sub             lr, x0, #0xff8
    //     0x95c2b4: ldr             lr, [x21, lr, lsl #3]
    //     0x95c2b8: blr             lr
    // 0x95c2bc: mov             x2, x0
    // 0x95c2c0: ldr             x1, [fp, #0x10]
    // 0x95c2c4: stur            x2, [fp, #-0x18]
    // 0x95c2c8: r0 = 59
    //     0x95c2c8: movz            x0, #0x3b
    // 0x95c2cc: branchIfSmi(r1, 0x95c2d8)
    //     0x95c2cc: tbz             w1, #0, #0x95c2d8
    // 0x95c2d0: r0 = LoadClassIdInstr(r1)
    //     0x95c2d0: ldur            x0, [x1, #-1]
    //     0x95c2d4: ubfx            x0, x0, #0xc, #0x14
    // 0x95c2d8: str             x1, [SP]
    // 0x95c2dc: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c2dc: sub             lr, x0, #1, lsl #12
    //     0x95c2e0: ldr             lr, [x21, lr, lsl #3]
    //     0x95c2e4: blr             lr
    // 0x95c2e8: r1 = <ExtendSelectionToNextWordBoundaryIntent>
    //     0x95c2e8: add             x1, PP, #0x41, lsl #12  ; [pp+0x412d8] TypeArguments: <ExtendSelectionToNextWordBoundaryIntent>
    //     0x95c2ec: ldr             x1, [x1, #0x2d8]
    // 0x95c2f0: stur            x0, [fp, #-0x20]
    // 0x95c2f4: r0 = _UpdateTextSelectionAction()
    //     0x95c2f4: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c2f8: stur            x0, [fp, #-0x28]
    // 0x95c2fc: ldr             x16, [fp, #0x10]
    // 0x95c300: stp             x16, x0, [SP, #0x18]
    // 0x95c304: ldur            x16, [fp, #-0x18]
    // 0x95c308: ldur            lr, [fp, #-0x20]
    // 0x95c30c: stp             lr, x16, [SP, #8]
    // 0x95c310: r16 = true
    //     0x95c310: add             x16, NULL, #0x20  ; true
    // 0x95c314: str             x16, [SP]
    // 0x95c318: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c318: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c31c: r0 = _UpdateTextSelectionAction()
    //     0x95c31c: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c320: r16 = <Intent>
    //     0x95c320: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c324: ldr             lr, [fp, #0x10]
    // 0x95c328: stp             lr, x16, [SP, #8]
    // 0x95c32c: ldur            x16, [fp, #-0x28]
    // 0x95c330: str             x16, [SP]
    // 0x95c334: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c334: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c338: r0 = _makeOverridable()
    //     0x95c338: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c33c: ldur            x1, [fp, #-0x10]
    // 0x95c340: ArrayStore: r1[21] = r0  ; List_4
    //     0x95c340: add             x25, x1, #0x63
    //     0x95c344: str             w0, [x25]
    //     0x95c348: tbz             w0, #0, #0x95c364
    //     0x95c34c: ldurb           w16, [x1, #-1]
    //     0x95c350: ldurb           w17, [x0, #-1]
    //     0x95c354: and             x16, x17, x16, lsr #2
    //     0x95c358: tst             x16, HEAP, lsr #32
    //     0x95c35c: b.eq            #0x95c364
    //     0x95c360: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c364: ldur            x1, [fp, #-0x10]
    // 0x95c368: r17 = ExtendSelectionToNextParagraphBoundaryIntent
    //     0x95c368: add             x17, PP, #0x41, lsl #12  ; [pp+0x412e0] Type: ExtendSelectionToNextParagraphBoundaryIntent
    //     0x95c36c: ldr             x17, [x17, #0x2e0]
    // 0x95c370: StoreField: r1->field_67 = r17
    //     0x95c370: stur            w17, [x1, #0x67]
    // 0x95c374: ldr             x2, [fp, #0x10]
    // 0x95c378: r0 = 59
    //     0x95c378: movz            x0, #0x3b
    // 0x95c37c: branchIfSmi(r2, 0x95c388)
    //     0x95c37c: tbz             w2, #0, #0x95c388
    // 0x95c380: r0 = LoadClassIdInstr(r2)
    //     0x95c380: ldur            x0, [x2, #-1]
    //     0x95c384: ubfx            x0, x0, #0xc, #0x14
    // 0x95c388: str             x2, [SP]
    // 0x95c38c: r0 = GDT[cid_x0 + -0xff0]()
    //     0x95c38c: sub             lr, x0, #0xff0
    //     0x95c390: ldr             lr, [x21, lr, lsl #3]
    //     0x95c394: blr             lr
    // 0x95c398: mov             x2, x0
    // 0x95c39c: ldr             x1, [fp, #0x10]
    // 0x95c3a0: stur            x2, [fp, #-0x18]
    // 0x95c3a4: r0 = 59
    //     0x95c3a4: movz            x0, #0x3b
    // 0x95c3a8: branchIfSmi(r1, 0x95c3b4)
    //     0x95c3a8: tbz             w1, #0, #0x95c3b4
    // 0x95c3ac: r0 = LoadClassIdInstr(r1)
    //     0x95c3ac: ldur            x0, [x1, #-1]
    //     0x95c3b0: ubfx            x0, x0, #0xc, #0x14
    // 0x95c3b4: str             x1, [SP]
    // 0x95c3b8: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c3b8: sub             lr, x0, #1, lsl #12
    //     0x95c3bc: ldr             lr, [x21, lr, lsl #3]
    //     0x95c3c0: blr             lr
    // 0x95c3c4: r1 = <ExtendSelectionToNextParagraphBoundaryIntent>
    //     0x95c3c4: add             x1, PP, #0x41, lsl #12  ; [pp+0x412e8] TypeArguments: <ExtendSelectionToNextParagraphBoundaryIntent>
    //     0x95c3c8: ldr             x1, [x1, #0x2e8]
    // 0x95c3cc: stur            x0, [fp, #-0x20]
    // 0x95c3d0: r0 = _UpdateTextSelectionAction()
    //     0x95c3d0: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c3d4: stur            x0, [fp, #-0x28]
    // 0x95c3d8: ldr             x16, [fp, #0x10]
    // 0x95c3dc: stp             x16, x0, [SP, #0x18]
    // 0x95c3e0: ldur            x16, [fp, #-0x18]
    // 0x95c3e4: ldur            lr, [fp, #-0x20]
    // 0x95c3e8: stp             lr, x16, [SP, #8]
    // 0x95c3ec: r16 = true
    //     0x95c3ec: add             x16, NULL, #0x20  ; true
    // 0x95c3f0: str             x16, [SP]
    // 0x95c3f4: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c3f4: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c3f8: r0 = _UpdateTextSelectionAction()
    //     0x95c3f8: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c3fc: r16 = <Intent>
    //     0x95c3fc: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c400: ldr             lr, [fp, #0x10]
    // 0x95c404: stp             lr, x16, [SP, #8]
    // 0x95c408: ldur            x16, [fp, #-0x28]
    // 0x95c40c: str             x16, [SP]
    // 0x95c410: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c410: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c414: r0 = _makeOverridable()
    //     0x95c414: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c418: ldur            x1, [fp, #-0x10]
    // 0x95c41c: ArrayStore: r1[23] = r0  ; List_4
    //     0x95c41c: add             x25, x1, #0x6b
    //     0x95c420: str             w0, [x25]
    //     0x95c424: tbz             w0, #0, #0x95c440
    //     0x95c428: ldurb           w16, [x1, #-1]
    //     0x95c42c: ldurb           w17, [x0, #-1]
    //     0x95c430: and             x16, x17, x16, lsr #2
    //     0x95c434: tst             x16, HEAP, lsr #32
    //     0x95c438: b.eq            #0x95c440
    //     0x95c43c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c440: ldur            x1, [fp, #-0x10]
    // 0x95c444: r17 = ExtendSelectionToLineBreakIntent
    //     0x95c444: add             x17, PP, #0x41, lsl #12  ; [pp+0x412f0] Type: ExtendSelectionToLineBreakIntent
    //     0x95c448: ldr             x17, [x17, #0x2f0]
    // 0x95c44c: StoreField: r1->field_6f = r17
    //     0x95c44c: stur            w17, [x1, #0x6f]
    // 0x95c450: ldr             x2, [fp, #0x10]
    // 0x95c454: r0 = 59
    //     0x95c454: movz            x0, #0x3b
    // 0x95c458: branchIfSmi(r2, 0x95c464)
    //     0x95c458: tbz             w2, #0, #0x95c464
    // 0x95c45c: r0 = LoadClassIdInstr(r2)
    //     0x95c45c: ldur            x0, [x2, #-1]
    //     0x95c460: ubfx            x0, x0, #0xc, #0x14
    // 0x95c464: str             x2, [SP]
    // 0x95c468: r0 = GDT[cid_x0 + -0xff9]()
    //     0x95c468: sub             lr, x0, #0xff9
    //     0x95c46c: ldr             lr, [x21, lr, lsl #3]
    //     0x95c470: blr             lr
    // 0x95c474: mov             x2, x0
    // 0x95c478: ldr             x1, [fp, #0x10]
    // 0x95c47c: stur            x2, [fp, #-0x18]
    // 0x95c480: r0 = 59
    //     0x95c480: movz            x0, #0x3b
    // 0x95c484: branchIfSmi(r1, 0x95c490)
    //     0x95c484: tbz             w1, #0, #0x95c490
    // 0x95c488: r0 = LoadClassIdInstr(r1)
    //     0x95c488: ldur            x0, [x1, #-1]
    //     0x95c48c: ubfx            x0, x0, #0xc, #0x14
    // 0x95c490: str             x1, [SP]
    // 0x95c494: r0 = GDT[cid_x0 + -0xffc]()
    //     0x95c494: sub             lr, x0, #0xffc
    //     0x95c498: ldr             lr, [x21, lr, lsl #3]
    //     0x95c49c: blr             lr
    // 0x95c4a0: r1 = <ExtendSelectionToLineBreakIntent>
    //     0x95c4a0: add             x1, PP, #0x41, lsl #12  ; [pp+0x412f8] TypeArguments: <ExtendSelectionToLineBreakIntent>
    //     0x95c4a4: ldr             x1, [x1, #0x2f8]
    // 0x95c4a8: stur            x0, [fp, #-0x20]
    // 0x95c4ac: r0 = _UpdateTextSelectionAction()
    //     0x95c4ac: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c4b0: stur            x0, [fp, #-0x28]
    // 0x95c4b4: ldr             x16, [fp, #0x10]
    // 0x95c4b8: stp             x16, x0, [SP, #0x18]
    // 0x95c4bc: ldur            x16, [fp, #-0x18]
    // 0x95c4c0: ldur            lr, [fp, #-0x20]
    // 0x95c4c4: stp             lr, x16, [SP, #8]
    // 0x95c4c8: r16 = true
    //     0x95c4c8: add             x16, NULL, #0x20  ; true
    // 0x95c4cc: str             x16, [SP]
    // 0x95c4d0: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c4d0: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c4d4: r0 = _UpdateTextSelectionAction()
    //     0x95c4d4: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c4d8: r16 = <Intent>
    //     0x95c4d8: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c4dc: ldr             lr, [fp, #0x10]
    // 0x95c4e0: stp             lr, x16, [SP, #8]
    // 0x95c4e4: ldur            x16, [fp, #-0x28]
    // 0x95c4e8: str             x16, [SP]
    // 0x95c4ec: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c4ec: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c4f0: r0 = _makeOverridable()
    //     0x95c4f0: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c4f4: ldur            x1, [fp, #-0x10]
    // 0x95c4f8: ArrayStore: r1[25] = r0  ; List_4
    //     0x95c4f8: add             x25, x1, #0x73
    //     0x95c4fc: str             w0, [x25]
    //     0x95c500: tbz             w0, #0, #0x95c51c
    //     0x95c504: ldurb           w16, [x1, #-1]
    //     0x95c508: ldurb           w17, [x0, #-1]
    //     0x95c50c: and             x16, x17, x16, lsr #2
    //     0x95c510: tst             x16, HEAP, lsr #32
    //     0x95c514: b.eq            #0x95c51c
    //     0x95c518: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c51c: ldur            x0, [fp, #-0x10]
    // 0x95c520: r17 = ExtendSelectionVerticallyToAdjacentLineIntent
    //     0x95c520: add             x17, PP, #0x41, lsl #12  ; [pp+0x41300] Type: ExtendSelectionVerticallyToAdjacentLineIntent
    //     0x95c524: ldr             x17, [x17, #0x300]
    // 0x95c528: StoreField: r0->field_77 = r17
    //     0x95c528: stur            w17, [x0, #0x77]
    // 0x95c52c: ldr             x1, [fp, #0x10]
    // 0x95c530: LoadField: r0 = r1->field_c3
    //     0x95c530: ldur            w0, [x1, #0xc3]
    // 0x95c534: DecompressPointer r0
    //     0x95c534: add             x0, x0, HEAP, lsl #32
    // 0x95c538: r16 = Sentinel
    //     0x95c538: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95c53c: cmp             w0, w16
    // 0x95c540: b.ne            #0x95c550
    // 0x95c544: r2 = _verticalSelectionUpdateAction
    //     0x95c544: add             x2, PP, #0x1f, lsl #12  ; [pp+0x1feb8] Field <EditableTextState._verticalSelectionUpdateAction@244183791>: late final (offset: 0xc4)
    //     0x95c548: ldr             x2, [x2, #0xeb8]
    // 0x95c54c: r0 = InitLateFinalInstanceField()
    //     0x95c54c: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95c550: r16 = <Intent>
    //     0x95c550: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c554: ldr             lr, [fp, #0x10]
    // 0x95c558: stp             lr, x16, [SP, #8]
    // 0x95c55c: str             x0, [SP]
    // 0x95c560: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c560: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c564: r0 = _makeOverridable()
    //     0x95c564: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c568: ldur            x1, [fp, #-0x10]
    // 0x95c56c: ArrayStore: r1[27] = r0  ; List_4
    //     0x95c56c: add             x25, x1, #0x7b
    //     0x95c570: str             w0, [x25]
    //     0x95c574: tbz             w0, #0, #0x95c590
    //     0x95c578: ldurb           w16, [x1, #-1]
    //     0x95c57c: ldurb           w17, [x0, #-1]
    //     0x95c580: and             x16, x17, x16, lsr #2
    //     0x95c584: tst             x16, HEAP, lsr #32
    //     0x95c588: b.eq            #0x95c590
    //     0x95c58c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c590: ldur            x1, [fp, #-0x10]
    // 0x95c594: r17 = ExtendSelectionVerticallyToAdjacentPageIntent
    //     0x95c594: add             x17, PP, #0x41, lsl #12  ; [pp+0x41308] Type: ExtendSelectionVerticallyToAdjacentPageIntent
    //     0x95c598: ldr             x17, [x17, #0x308]
    // 0x95c59c: StoreField: r1->field_7f = r17
    //     0x95c59c: stur            w17, [x1, #0x7f]
    // 0x95c5a0: ldr             x0, [fp, #0x10]
    // 0x95c5a4: LoadField: r2 = r0->field_c3
    //     0x95c5a4: ldur            w2, [x0, #0xc3]
    // 0x95c5a8: DecompressPointer r2
    //     0x95c5a8: add             x2, x2, HEAP, lsl #32
    // 0x95c5ac: r16 = <Intent>
    //     0x95c5ac: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c5b0: stp             x0, x16, [SP, #8]
    // 0x95c5b4: str             x2, [SP]
    // 0x95c5b8: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c5b8: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c5bc: r0 = _makeOverridable()
    //     0x95c5bc: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c5c0: ldur            x1, [fp, #-0x10]
    // 0x95c5c4: ArrayStore: r1[29] = r0  ; List_4
    //     0x95c5c4: add             x25, x1, #0x83
    //     0x95c5c8: str             w0, [x25]
    //     0x95c5cc: tbz             w0, #0, #0x95c5e8
    //     0x95c5d0: ldurb           w16, [x1, #-1]
    //     0x95c5d4: ldurb           w17, [x0, #-1]
    //     0x95c5d8: and             x16, x17, x16, lsr #2
    //     0x95c5dc: tst             x16, HEAP, lsr #32
    //     0x95c5e0: b.eq            #0x95c5e8
    //     0x95c5e4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c5e8: ldur            x1, [fp, #-0x10]
    // 0x95c5ec: r17 = ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent
    //     0x95c5ec: add             x17, PP, #0x41, lsl #12  ; [pp+0x41310] Type: ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent
    //     0x95c5f0: ldr             x17, [x17, #0x310]
    // 0x95c5f4: StoreField: r1->field_87 = r17
    //     0x95c5f4: stur            w17, [x1, #0x87]
    // 0x95c5f8: ldr             x2, [fp, #0x10]
    // 0x95c5fc: r0 = 59
    //     0x95c5fc: movz            x0, #0x3b
    // 0x95c600: branchIfSmi(r2, 0x95c60c)
    //     0x95c600: tbz             w2, #0, #0x95c60c
    // 0x95c604: r0 = LoadClassIdInstr(r2)
    //     0x95c604: ldur            x0, [x2, #-1]
    //     0x95c608: ubfx            x0, x0, #0xc, #0x14
    // 0x95c60c: str             x2, [SP]
    // 0x95c610: r0 = GDT[cid_x0 + -0xff0]()
    //     0x95c610: sub             lr, x0, #0xff0
    //     0x95c614: ldr             lr, [x21, lr, lsl #3]
    //     0x95c618: blr             lr
    // 0x95c61c: mov             x2, x0
    // 0x95c620: ldr             x1, [fp, #0x10]
    // 0x95c624: stur            x2, [fp, #-0x18]
    // 0x95c628: r0 = 59
    //     0x95c628: movz            x0, #0x3b
    // 0x95c62c: branchIfSmi(r1, 0x95c638)
    //     0x95c62c: tbz             w1, #0, #0x95c638
    // 0x95c630: r0 = LoadClassIdInstr(r1)
    //     0x95c630: ldur            x0, [x1, #-1]
    //     0x95c634: ubfx            x0, x0, #0xc, #0x14
    // 0x95c638: str             x1, [SP]
    // 0x95c63c: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c63c: sub             lr, x0, #1, lsl #12
    //     0x95c640: ldr             lr, [x21, lr, lsl #3]
    //     0x95c644: blr             lr
    // 0x95c648: r1 = <ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent>
    //     0x95c648: add             x1, PP, #0x41, lsl #12  ; [pp+0x41318] TypeArguments: <ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent>
    //     0x95c64c: ldr             x1, [x1, #0x318]
    // 0x95c650: stur            x0, [fp, #-0x20]
    // 0x95c654: r0 = _UpdateTextSelectionAction()
    //     0x95c654: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c658: stur            x0, [fp, #-0x28]
    // 0x95c65c: ldr             x16, [fp, #0x10]
    // 0x95c660: stp             x16, x0, [SP, #0x18]
    // 0x95c664: ldur            x16, [fp, #-0x18]
    // 0x95c668: ldur            lr, [fp, #-0x20]
    // 0x95c66c: stp             lr, x16, [SP, #8]
    // 0x95c670: r16 = true
    //     0x95c670: add             x16, NULL, #0x20  ; true
    // 0x95c674: str             x16, [SP]
    // 0x95c678: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c678: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c67c: r0 = _UpdateTextSelectionAction()
    //     0x95c67c: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c680: r16 = <Intent>
    //     0x95c680: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c684: ldr             lr, [fp, #0x10]
    // 0x95c688: stp             lr, x16, [SP, #8]
    // 0x95c68c: ldur            x16, [fp, #-0x28]
    // 0x95c690: str             x16, [SP]
    // 0x95c694: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c694: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c698: r0 = _makeOverridable()
    //     0x95c698: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c69c: ldur            x1, [fp, #-0x10]
    // 0x95c6a0: ArrayStore: r1[31] = r0  ; List_4
    //     0x95c6a0: add             x25, x1, #0x8b
    //     0x95c6a4: str             w0, [x25]
    //     0x95c6a8: tbz             w0, #0, #0x95c6c4
    //     0x95c6ac: ldurb           w16, [x1, #-1]
    //     0x95c6b0: ldurb           w17, [x0, #-1]
    //     0x95c6b4: and             x16, x17, x16, lsr #2
    //     0x95c6b8: tst             x16, HEAP, lsr #32
    //     0x95c6bc: b.eq            #0x95c6c4
    //     0x95c6c0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c6c4: ldur            x1, [fp, #-0x10]
    // 0x95c6c8: r17 = ExtendSelectionToDocumentBoundaryIntent
    //     0x95c6c8: add             x17, PP, #0x41, lsl #12  ; [pp+0x41320] Type: ExtendSelectionToDocumentBoundaryIntent
    //     0x95c6cc: ldr             x17, [x17, #0x320]
    // 0x95c6d0: StoreField: r1->field_8f = r17
    //     0x95c6d0: stur            w17, [x1, #0x8f]
    // 0x95c6d4: ldr             x2, [fp, #0x10]
    // 0x95c6d8: r0 = 59
    //     0x95c6d8: movz            x0, #0x3b
    // 0x95c6dc: branchIfSmi(r2, 0x95c6e8)
    //     0x95c6dc: tbz             w2, #0, #0x95c6e8
    // 0x95c6e0: r0 = LoadClassIdInstr(r2)
    //     0x95c6e0: ldur            x0, [x2, #-1]
    //     0x95c6e4: ubfx            x0, x0, #0xc, #0x14
    // 0x95c6e8: str             x2, [SP]
    // 0x95c6ec: r0 = GDT[cid_x0 + -0xfed]()
    //     0x95c6ec: sub             lr, x0, #0xfed
    //     0x95c6f0: ldr             lr, [x21, lr, lsl #3]
    //     0x95c6f4: blr             lr
    // 0x95c6f8: mov             x2, x0
    // 0x95c6fc: ldr             x1, [fp, #0x10]
    // 0x95c700: stur            x2, [fp, #-0x18]
    // 0x95c704: r0 = 59
    //     0x95c704: movz            x0, #0x3b
    // 0x95c708: branchIfSmi(r1, 0x95c714)
    //     0x95c708: tbz             w1, #0, #0x95c714
    // 0x95c70c: r0 = LoadClassIdInstr(r1)
    //     0x95c70c: ldur            x0, [x1, #-1]
    //     0x95c710: ubfx            x0, x0, #0xc, #0x14
    // 0x95c714: str             x1, [SP]
    // 0x95c718: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c718: sub             lr, x0, #1, lsl #12
    //     0x95c71c: ldr             lr, [x21, lr, lsl #3]
    //     0x95c720: blr             lr
    // 0x95c724: r1 = <ExtendSelectionToDocumentBoundaryIntent>
    //     0x95c724: add             x1, PP, #0x41, lsl #12  ; [pp+0x41328] TypeArguments: <ExtendSelectionToDocumentBoundaryIntent>
    //     0x95c728: ldr             x1, [x1, #0x328]
    // 0x95c72c: stur            x0, [fp, #-0x20]
    // 0x95c730: r0 = _UpdateTextSelectionAction()
    //     0x95c730: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c734: stur            x0, [fp, #-0x28]
    // 0x95c738: ldr             x16, [fp, #0x10]
    // 0x95c73c: stp             x16, x0, [SP, #0x18]
    // 0x95c740: ldur            x16, [fp, #-0x18]
    // 0x95c744: ldur            lr, [fp, #-0x20]
    // 0x95c748: stp             lr, x16, [SP, #8]
    // 0x95c74c: r16 = true
    //     0x95c74c: add             x16, NULL, #0x20  ; true
    // 0x95c750: str             x16, [SP]
    // 0x95c754: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c754: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c758: r0 = _UpdateTextSelectionAction()
    //     0x95c758: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c75c: r16 = <Intent>
    //     0x95c75c: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c760: ldr             lr, [fp, #0x10]
    // 0x95c764: stp             lr, x16, [SP, #8]
    // 0x95c768: ldur            x16, [fp, #-0x28]
    // 0x95c76c: str             x16, [SP]
    // 0x95c770: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c770: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c774: r0 = _makeOverridable()
    //     0x95c774: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c778: ldur            x1, [fp, #-0x10]
    // 0x95c77c: ArrayStore: r1[33] = r0  ; List_4
    //     0x95c77c: add             x25, x1, #0x93
    //     0x95c780: str             w0, [x25]
    //     0x95c784: tbz             w0, #0, #0x95c7a0
    //     0x95c788: ldurb           w16, [x1, #-1]
    //     0x95c78c: ldurb           w17, [x0, #-1]
    //     0x95c790: and             x16, x17, x16, lsr #2
    //     0x95c794: tst             x16, HEAP, lsr #32
    //     0x95c798: b.eq            #0x95c7a0
    //     0x95c79c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c7a0: ldur            x1, [fp, #-0x10]
    // 0x95c7a4: r17 = ExtendSelectionToNextWordBoundaryOrCaretLocationIntent
    //     0x95c7a4: add             x17, PP, #0x41, lsl #12  ; [pp+0x41330] Type: ExtendSelectionToNextWordBoundaryOrCaretLocationIntent
    //     0x95c7a8: ldr             x17, [x17, #0x330]
    // 0x95c7ac: StoreField: r1->field_97 = r17
    //     0x95c7ac: stur            w17, [x1, #0x97]
    // 0x95c7b0: ldr             x2, [fp, #0x10]
    // 0x95c7b4: r0 = 59
    //     0x95c7b4: movz            x0, #0x3b
    // 0x95c7b8: branchIfSmi(r2, 0x95c7c4)
    //     0x95c7b8: tbz             w2, #0, #0x95c7c4
    // 0x95c7bc: r0 = LoadClassIdInstr(r2)
    //     0x95c7bc: ldur            x0, [x2, #-1]
    //     0x95c7c0: ubfx            x0, x0, #0xc, #0x14
    // 0x95c7c4: str             x2, [SP]
    // 0x95c7c8: r0 = GDT[cid_x0 + -0xff8]()
    //     0x95c7c8: sub             lr, x0, #0xff8
    //     0x95c7cc: ldr             lr, [x21, lr, lsl #3]
    //     0x95c7d0: blr             lr
    // 0x95c7d4: mov             x2, x0
    // 0x95c7d8: ldr             x1, [fp, #0x10]
    // 0x95c7dc: stur            x2, [fp, #-0x18]
    // 0x95c7e0: r0 = 59
    //     0x95c7e0: movz            x0, #0x3b
    // 0x95c7e4: branchIfSmi(r1, 0x95c7f0)
    //     0x95c7e4: tbz             w1, #0, #0x95c7f0
    // 0x95c7e8: r0 = LoadClassIdInstr(r1)
    //     0x95c7e8: ldur            x0, [x1, #-1]
    //     0x95c7ec: ubfx            x0, x0, #0xc, #0x14
    // 0x95c7f0: str             x1, [SP]
    // 0x95c7f4: r0 = GDT[cid_x0 + -0x1000]()
    //     0x95c7f4: sub             lr, x0, #1, lsl #12
    //     0x95c7f8: ldr             lr, [x21, lr, lsl #3]
    //     0x95c7fc: blr             lr
    // 0x95c800: r1 = <ExtendSelectionToNextWordBoundaryOrCaretLocationIntent>
    //     0x95c800: add             x1, PP, #0x41, lsl #12  ; [pp+0x41338] TypeArguments: <ExtendSelectionToNextWordBoundaryOrCaretLocationIntent>
    //     0x95c804: ldr             x1, [x1, #0x338]
    // 0x95c808: stur            x0, [fp, #-0x20]
    // 0x95c80c: r0 = _UpdateTextSelectionAction()
    //     0x95c80c: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95c810: stur            x0, [fp, #-0x28]
    // 0x95c814: ldr             x16, [fp, #0x10]
    // 0x95c818: stp             x16, x0, [SP, #0x18]
    // 0x95c81c: ldur            x16, [fp, #-0x18]
    // 0x95c820: ldur            lr, [fp, #-0x20]
    // 0x95c824: stp             lr, x16, [SP, #8]
    // 0x95c828: r16 = true
    //     0x95c828: add             x16, NULL, #0x20  ; true
    // 0x95c82c: str             x16, [SP]
    // 0x95c830: r4 = const [0, 0x5, 0x5, 0x5, null]
    //     0x95c830: ldr             x4, [PP, #0x3a0]  ; [pp+0x3a0] List(5) [0, 0x5, 0x5, 0x5, Null]
    // 0x95c834: r0 = _UpdateTextSelectionAction()
    //     0x95c834: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95c838: r16 = <Intent>
    //     0x95c838: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c83c: ldr             lr, [fp, #0x10]
    // 0x95c840: stp             lr, x16, [SP, #8]
    // 0x95c844: ldur            x16, [fp, #-0x28]
    // 0x95c848: str             x16, [SP]
    // 0x95c84c: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c84c: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c850: r0 = _makeOverridable()
    //     0x95c850: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c854: ldur            x1, [fp, #-0x10]
    // 0x95c858: ArrayStore: r1[35] = r0  ; List_4
    //     0x95c858: add             x25, x1, #0x9b
    //     0x95c85c: str             w0, [x25]
    //     0x95c860: tbz             w0, #0, #0x95c87c
    //     0x95c864: ldurb           w16, [x1, #-1]
    //     0x95c868: ldurb           w17, [x0, #-1]
    //     0x95c86c: and             x16, x17, x16, lsr #2
    //     0x95c870: tst             x16, HEAP, lsr #32
    //     0x95c874: b.eq            #0x95c87c
    //     0x95c878: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c87c: ldur            x1, [fp, #-0x10]
    // 0x95c880: r17 = ScrollToDocumentBoundaryIntent
    //     0x95c880: add             x17, PP, #0x41, lsl #12  ; [pp+0x41340] Type: ScrollToDocumentBoundaryIntent
    //     0x95c884: ldr             x17, [x17, #0x340]
    // 0x95c888: StoreField: r1->field_9f = r17
    //     0x95c888: stur            w17, [x1, #0x9f]
    // 0x95c88c: ldr             x2, [fp, #0x10]
    // 0x95c890: r0 = 59
    //     0x95c890: movz            x0, #0x3b
    // 0x95c894: branchIfSmi(r2, 0x95c8a0)
    //     0x95c894: tbz             w2, #0, #0x95c8a0
    // 0x95c898: r0 = LoadClassIdInstr(r2)
    //     0x95c898: ldur            x0, [x2, #-1]
    //     0x95c89c: ubfx            x0, x0, #0xc, #0x14
    // 0x95c8a0: str             x2, [SP]
    // 0x95c8a4: r0 = GDT[cid_x0 + -0xfdf]()
    //     0x95c8a4: sub             lr, x0, #0xfdf
    //     0x95c8a8: ldr             lr, [x21, lr, lsl #3]
    //     0x95c8ac: blr             lr
    // 0x95c8b0: r1 = <ScrollToDocumentBoundaryIntent>
    //     0x95c8b0: add             x1, PP, #0x41, lsl #12  ; [pp+0x41348] TypeArguments: <ScrollToDocumentBoundaryIntent>
    //     0x95c8b4: ldr             x1, [x1, #0x348]
    // 0x95c8b8: stur            x0, [fp, #-0x18]
    // 0x95c8bc: r0 = CallbackAction()
    //     0x95c8bc: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95c8c0: mov             x1, x0
    // 0x95c8c4: ldur            x0, [fp, #-0x18]
    // 0x95c8c8: stur            x1, [fp, #-0x20]
    // 0x95c8cc: StoreField: r1->field_13 = r0
    //     0x95c8cc: stur            w0, [x1, #0x13]
    // 0x95c8d0: str             x1, [SP]
    // 0x95c8d4: r0 = Action()
    //     0x95c8d4: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95c8d8: r16 = <Intent>
    //     0x95c8d8: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95c8dc: ldr             lr, [fp, #0x10]
    // 0x95c8e0: stp             lr, x16, [SP, #8]
    // 0x95c8e4: ldur            x16, [fp, #-0x20]
    // 0x95c8e8: str             x16, [SP]
    // 0x95c8ec: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95c8ec: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95c8f0: r0 = _makeOverridable()
    //     0x95c8f0: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95c8f4: ldur            x1, [fp, #-0x10]
    // 0x95c8f8: ArrayStore: r1[37] = r0  ; List_4
    //     0x95c8f8: add             x25, x1, #0xa3
    //     0x95c8fc: str             w0, [x25]
    //     0x95c900: tbz             w0, #0, #0x95c91c
    //     0x95c904: ldurb           w16, [x1, #-1]
    //     0x95c908: ldurb           w17, [x0, #-1]
    //     0x95c90c: and             x16, x17, x16, lsr #2
    //     0x95c910: tst             x16, HEAP, lsr #32
    //     0x95c914: b.eq            #0x95c91c
    //     0x95c918: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c91c: ldur            x1, [fp, #-0x10]
    // 0x95c920: r17 = ScrollIntent
    //     0x95c920: add             x17, PP, #0x2b, lsl #12  ; [pp+0x2be40] Type: ScrollIntent
    //     0x95c924: ldr             x17, [x17, #0xe40]
    // 0x95c928: StoreField: r1->field_a7 = r17
    //     0x95c928: stur            w17, [x1, #0xa7]
    // 0x95c92c: ldr             x2, [fp, #0x10]
    // 0x95c930: r0 = 59
    //     0x95c930: movz            x0, #0x3b
    // 0x95c934: branchIfSmi(r2, 0x95c940)
    //     0x95c934: tbz             w2, #0, #0x95c940
    // 0x95c938: r0 = LoadClassIdInstr(r2)
    //     0x95c938: ldur            x0, [x2, #-1]
    //     0x95c93c: ubfx            x0, x0, #0xc, #0x14
    // 0x95c940: str             x2, [SP]
    // 0x95c944: r0 = GDT[cid_x0 + -0xfe0]()
    //     0x95c944: sub             lr, x0, #0xfe0
    //     0x95c948: ldr             lr, [x21, lr, lsl #3]
    //     0x95c94c: blr             lr
    // 0x95c950: r1 = <ScrollIntent>
    //     0x95c950: add             x1, PP, #0x2b, lsl #12  ; [pp+0x2be38] TypeArguments: <ScrollIntent>
    //     0x95c954: ldr             x1, [x1, #0xe38]
    // 0x95c958: stur            x0, [fp, #-0x18]
    // 0x95c95c: r0 = CallbackAction()
    //     0x95c95c: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95c960: mov             x1, x0
    // 0x95c964: ldur            x0, [fp, #-0x18]
    // 0x95c968: stur            x1, [fp, #-0x20]
    // 0x95c96c: StoreField: r1->field_13 = r0
    //     0x95c96c: stur            w0, [x1, #0x13]
    // 0x95c970: str             x1, [SP]
    // 0x95c974: r0 = Action()
    //     0x95c974: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95c978: ldur            x1, [fp, #-0x10]
    // 0x95c97c: ldur            x0, [fp, #-0x20]
    // 0x95c980: ArrayStore: r1[39] = r0  ; List_4
    //     0x95c980: add             x25, x1, #0xab
    //     0x95c984: str             w0, [x25]
    //     0x95c988: tbz             w0, #0, #0x95c9a4
    //     0x95c98c: ldurb           w16, [x1, #-1]
    //     0x95c990: ldurb           w17, [x0, #-1]
    //     0x95c994: and             x16, x17, x16, lsr #2
    //     0x95c998: tst             x16, HEAP, lsr #32
    //     0x95c99c: b.eq            #0x95c9a4
    //     0x95c9a0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95c9a4: ldur            x1, [fp, #-0x10]
    // 0x95c9a8: r17 = ExpandSelectionToLineBreakIntent
    //     0x95c9a8: add             x17, PP, #0x41, lsl #12  ; [pp+0x41350] Type: ExpandSelectionToLineBreakIntent
    //     0x95c9ac: ldr             x17, [x17, #0x350]
    // 0x95c9b0: StoreField: r1->field_af = r17
    //     0x95c9b0: stur            w17, [x1, #0xaf]
    // 0x95c9b4: ldr             x2, [fp, #0x10]
    // 0x95c9b8: r0 = 59
    //     0x95c9b8: movz            x0, #0x3b
    // 0x95c9bc: branchIfSmi(r2, 0x95c9c8)
    //     0x95c9bc: tbz             w2, #0, #0x95c9c8
    // 0x95c9c0: r0 = LoadClassIdInstr(r2)
    //     0x95c9c0: ldur            x0, [x2, #-1]
    //     0x95c9c4: ubfx            x0, x0, #0xc, #0x14
    // 0x95c9c8: str             x2, [SP]
    // 0x95c9cc: r0 = GDT[cid_x0 + -0xff9]()
    //     0x95c9cc: sub             lr, x0, #0xff9
    //     0x95c9d0: ldr             lr, [x21, lr, lsl #3]
    //     0x95c9d4: blr             lr
    // 0x95c9d8: mov             x2, x0
    // 0x95c9dc: ldr             x1, [fp, #0x10]
    // 0x95c9e0: stur            x2, [fp, #-0x18]
    // 0x95c9e4: r0 = 59
    //     0x95c9e4: movz            x0, #0x3b
    // 0x95c9e8: branchIfSmi(r1, 0x95c9f4)
    //     0x95c9e8: tbz             w1, #0, #0x95c9f4
    // 0x95c9ec: r0 = LoadClassIdInstr(r1)
    //     0x95c9ec: ldur            x0, [x1, #-1]
    //     0x95c9f0: ubfx            x0, x0, #0xc, #0x14
    // 0x95c9f4: str             x1, [SP]
    // 0x95c9f8: r0 = GDT[cid_x0 + -0xffc]()
    //     0x95c9f8: sub             lr, x0, #0xffc
    //     0x95c9fc: ldr             lr, [x21, lr, lsl #3]
    //     0x95ca00: blr             lr
    // 0x95ca04: r1 = <ExpandSelectionToLineBreakIntent>
    //     0x95ca04: add             x1, PP, #0x41, lsl #12  ; [pp+0x41358] TypeArguments: <ExpandSelectionToLineBreakIntent>
    //     0x95ca08: ldr             x1, [x1, #0x358]
    // 0x95ca0c: stur            x0, [fp, #-0x20]
    // 0x95ca10: r0 = _UpdateTextSelectionAction()
    //     0x95ca10: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95ca14: stur            x0, [fp, #-0x28]
    // 0x95ca18: ldr             x16, [fp, #0x10]
    // 0x95ca1c: stp             x16, x0, [SP, #0x20]
    // 0x95ca20: ldur            x16, [fp, #-0x18]
    // 0x95ca24: ldur            lr, [fp, #-0x20]
    // 0x95ca28: stp             lr, x16, [SP, #0x10]
    // 0x95ca2c: r16 = true
    //     0x95ca2c: add             x16, NULL, #0x20  ; true
    // 0x95ca30: r30 = true
    //     0x95ca30: add             lr, NULL, #0x20  ; true
    // 0x95ca34: stp             lr, x16, [SP]
    // 0x95ca38: r4 = const [0, 0x6, 0x6, 0x5, isExpand, 0x5, null]
    //     0x95ca38: add             x4, PP, #0x41, lsl #12  ; [pp+0x41360] List(7) [0, 0x6, 0x6, 0x5, "isExpand", 0x5, Null]
    //     0x95ca3c: ldr             x4, [x4, #0x360]
    // 0x95ca40: r0 = _UpdateTextSelectionAction()
    //     0x95ca40: bl              #0x95cd98  ; [package:flutter/src/widgets/editable_text.dart] _UpdateTextSelectionAction::_UpdateTextSelectionAction
    // 0x95ca44: r16 = <Intent>
    //     0x95ca44: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95ca48: ldr             lr, [fp, #0x10]
    // 0x95ca4c: stp             lr, x16, [SP, #8]
    // 0x95ca50: ldur            x16, [fp, #-0x28]
    // 0x95ca54: str             x16, [SP]
    // 0x95ca58: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95ca58: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95ca5c: r0 = _makeOverridable()
    //     0x95ca5c: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95ca60: ldur            x1, [fp, #-0x10]
    // 0x95ca64: ArrayStore: r1[41] = r0  ; List_4
    //     0x95ca64: add             x25, x1, #0xb3
    //     0x95ca68: str             w0, [x25]
    //     0x95ca6c: tbz             w0, #0, #0x95ca88
    //     0x95ca70: ldurb           w16, [x1, #-1]
    //     0x95ca74: ldurb           w17, [x0, #-1]
    //     0x95ca78: and             x16, x17, x16, lsr #2
    //     0x95ca7c: tst             x16, HEAP, lsr #32
    //     0x95ca80: b.eq            #0x95ca88
    //     0x95ca84: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95ca88: ldur            x1, [fp, #-0x10]
    // 0x95ca8c: r17 = ExpandSelectionToDocumentBoundaryIntent
    //     0x95ca8c: add             x17, PP, #0x41, lsl #12  ; [pp+0x41368] Type: ExpandSelectionToDocumentBoundaryIntent
    //     0x95ca90: ldr             x17, [x17, #0x368]
    // 0x95ca94: StoreField: r1->field_b7 = r17
    //     0x95ca94: stur            w17, [x1, #0xb7]
    // 0x95ca98: ldr             x2, [fp, #0x10]
    // 0x95ca9c: r0 = 59
    //     0x95ca9c: movz            x0, #0x3b
    // 0x95caa0: branchIfSmi(r2, 0x95caac)
    //     0x95caa0: tbz             w2, #0, #0x95caac
    // 0x95caa4: r0 = LoadClassIdInstr(r2)
    //     0x95caa4: ldur            x0, [x2, #-1]
    //     0x95caa8: ubfx            x0, x0, #0xc, #0x14
    // 0x95caac: str             x2, [SP]
    // 0x95cab0: r0 = GDT[cid_x0 + -0xfed]()
    //     0x95cab0: sub             lr, x0, #0xfed
    //     0x95cab4: ldr             lr, [x21, lr, lsl #3]
    //     0x95cab8: blr             lr
    // 0x95cabc: mov             x2, x0
    // 0x95cac0: ldr             x1, [fp, #0x10]
    // 0x95cac4: stur            x2, [fp, #-0x18]
    // 0x95cac8: r0 = 59
    //     0x95cac8: movz            x0, #0x3b
    // 0x95cacc: branchIfSmi(r1, 0x95cad8)
    //     0x95cacc: tbz             w1, #0, #0x95cad8
    // 0x95cad0: r0 = LoadClassIdInstr(r1)
    //     0x95cad0: ldur            x0, [x1, #-1]
    //     0x95cad4: ubfx            x0, x0, #0xc, #0x14
    // 0x95cad8: str             x1, [SP]
    // 0x95cadc: r0 = GDT[cid_x0 + -0xffc]()
    //     0x95cadc: sub             lr, x0, #0xffc
    //     0x95cae0: ldr             lr, [x21, lr, lsl #3]
    //     0x95cae4: blr             lr
    // 0x95cae8: r1 = <ExpandSelectionToDocumentBoundaryIntent>
    //     0x95cae8: add             x1, PP, #0x41, lsl #12  ; [pp+0x41370] TypeArguments: <ExpandSelectionToDocumentBoundaryIntent>
    //     0x95caec: ldr             x1, [x1, #0x370]
    // 0x95caf0: stur            x0, [fp, #-0x20]
    // 0x95caf4: r0 = _UpdateTextSelectionAction()
    //     0x95caf4: bl              #0x95cf00  ; Allocate_UpdateTextSelectionActionStub -> _UpdateTextSelectionAction<X0 bound DirectionalCaretMovementIntent> (size=0x2c)
    // 0x95caf8: ldr             x1, [fp, #0x10]
    // 0x95cafc: stur            x0, [fp, #-0x28]
    // 0x95cb00: StoreField: r0->field_13 = r1
    //     0x95cb00: stur            w1, [x0, #0x13]
    // 0x95cb04: ldur            x2, [fp, #-0x18]
    // 0x95cb08: StoreField: r0->field_23 = r2
    //     0x95cb08: stur            w2, [x0, #0x23]
    // 0x95cb0c: ldur            x2, [fp, #-0x20]
    // 0x95cb10: StoreField: r0->field_27 = r2
    //     0x95cb10: stur            w2, [x0, #0x27]
    // 0x95cb14: r2 = true
    //     0x95cb14: add             x2, NULL, #0x20  ; true
    // 0x95cb18: ArrayStore: r0[0] = r2  ; List_4
    //     0x95cb18: stur            w2, [x0, #0x17]
    // 0x95cb1c: StoreField: r0->field_1b = r2
    //     0x95cb1c: stur            w2, [x0, #0x1b]
    // 0x95cb20: StoreField: r0->field_1f = r2
    //     0x95cb20: stur            w2, [x0, #0x1f]
    // 0x95cb24: str             x0, [SP]
    // 0x95cb28: r0 = Action()
    //     0x95cb28: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95cb2c: r16 = <Intent>
    //     0x95cb2c: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cb30: ldr             lr, [fp, #0x10]
    // 0x95cb34: stp             lr, x16, [SP, #8]
    // 0x95cb38: ldur            x16, [fp, #-0x28]
    // 0x95cb3c: str             x16, [SP]
    // 0x95cb40: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95cb40: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95cb44: r0 = _makeOverridable()
    //     0x95cb44: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95cb48: ldur            x1, [fp, #-0x10]
    // 0x95cb4c: ArrayStore: r1[43] = r0  ; List_4
    //     0x95cb4c: add             x25, x1, #0xbb
    //     0x95cb50: str             w0, [x25]
    //     0x95cb54: tbz             w0, #0, #0x95cb70
    //     0x95cb58: ldurb           w16, [x1, #-1]
    //     0x95cb5c: ldurb           w17, [x0, #-1]
    //     0x95cb60: and             x16, x17, x16, lsr #2
    //     0x95cb64: tst             x16, HEAP, lsr #32
    //     0x95cb68: b.eq            #0x95cb70
    //     0x95cb6c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95cb70: ldur            x0, [fp, #-0x10]
    // 0x95cb74: r17 = SelectAllTextIntent
    //     0x95cb74: add             x17, PP, #0x41, lsl #12  ; [pp+0x41378] Type: SelectAllTextIntent
    //     0x95cb78: ldr             x17, [x17, #0x378]
    // 0x95cb7c: StoreField: r0->field_bf = r17
    //     0x95cb7c: stur            w17, [x0, #0xbf]
    // 0x95cb80: r1 = <SelectAllTextIntent>
    //     0x95cb80: add             x1, PP, #0x41, lsl #12  ; [pp+0x41380] TypeArguments: <SelectAllTextIntent>
    //     0x95cb84: ldr             x1, [x1, #0x380]
    // 0x95cb88: r0 = _SelectAllAction()
    //     0x95cb88: bl              #0x95cd8c  ; Allocate_SelectAllActionStub -> _SelectAllAction (size=0x18)
    // 0x95cb8c: ldr             x1, [fp, #0x10]
    // 0x95cb90: stur            x0, [fp, #-0x18]
    // 0x95cb94: StoreField: r0->field_13 = r1
    //     0x95cb94: stur            w1, [x0, #0x13]
    // 0x95cb98: str             x0, [SP]
    // 0x95cb9c: r0 = Action()
    //     0x95cb9c: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95cba0: r16 = <Intent>
    //     0x95cba0: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cba4: ldr             lr, [fp, #0x10]
    // 0x95cba8: stp             lr, x16, [SP, #8]
    // 0x95cbac: ldur            x16, [fp, #-0x18]
    // 0x95cbb0: str             x16, [SP]
    // 0x95cbb4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95cbb4: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95cbb8: r0 = _makeOverridable()
    //     0x95cbb8: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95cbbc: ldur            x1, [fp, #-0x10]
    // 0x95cbc0: ArrayStore: r1[45] = r0  ; List_4
    //     0x95cbc0: add             x25, x1, #0xc3
    //     0x95cbc4: str             w0, [x25]
    //     0x95cbc8: tbz             w0, #0, #0x95cbe4
    //     0x95cbcc: ldurb           w16, [x1, #-1]
    //     0x95cbd0: ldurb           w17, [x0, #-1]
    //     0x95cbd4: and             x16, x17, x16, lsr #2
    //     0x95cbd8: tst             x16, HEAP, lsr #32
    //     0x95cbdc: b.eq            #0x95cbe4
    //     0x95cbe0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95cbe4: ldur            x0, [fp, #-0x10]
    // 0x95cbe8: r17 = CopySelectionTextIntent
    //     0x95cbe8: add             x17, PP, #0x41, lsl #12  ; [pp+0x41388] Type: CopySelectionTextIntent
    //     0x95cbec: ldr             x17, [x17, #0x388]
    // 0x95cbf0: StoreField: r0->field_c7 = r17
    //     0x95cbf0: stur            w17, [x0, #0xc7]
    // 0x95cbf4: r1 = <CopySelectionTextIntent>
    //     0x95cbf4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41390] TypeArguments: <CopySelectionTextIntent>
    //     0x95cbf8: ldr             x1, [x1, #0x390]
    // 0x95cbfc: r0 = _CopySelectionAction()
    //     0x95cbfc: bl              #0x95cd80  ; Allocate_CopySelectionActionStub -> _CopySelectionAction (size=0x18)
    // 0x95cc00: ldr             x1, [fp, #0x10]
    // 0x95cc04: stur            x0, [fp, #-0x18]
    // 0x95cc08: StoreField: r0->field_13 = r1
    //     0x95cc08: stur            w1, [x0, #0x13]
    // 0x95cc0c: str             x0, [SP]
    // 0x95cc10: r0 = Action()
    //     0x95cc10: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95cc14: r16 = <Intent>
    //     0x95cc14: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cc18: ldr             lr, [fp, #0x10]
    // 0x95cc1c: stp             lr, x16, [SP, #8]
    // 0x95cc20: ldur            x16, [fp, #-0x18]
    // 0x95cc24: str             x16, [SP]
    // 0x95cc28: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95cc28: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95cc2c: r0 = _makeOverridable()
    //     0x95cc2c: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95cc30: ldur            x1, [fp, #-0x10]
    // 0x95cc34: ArrayStore: r1[47] = r0  ; List_4
    //     0x95cc34: add             x25, x1, #0xcb
    //     0x95cc38: str             w0, [x25]
    //     0x95cc3c: tbz             w0, #0, #0x95cc58
    //     0x95cc40: ldurb           w16, [x1, #-1]
    //     0x95cc44: ldurb           w17, [x0, #-1]
    //     0x95cc48: and             x16, x17, x16, lsr #2
    //     0x95cc4c: tst             x16, HEAP, lsr #32
    //     0x95cc50: b.eq            #0x95cc58
    //     0x95cc54: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95cc58: ldur            x0, [fp, #-0x10]
    // 0x95cc5c: r17 = PasteTextIntent
    //     0x95cc5c: add             x17, PP, #0x41, lsl #12  ; [pp+0x41398] Type: PasteTextIntent
    //     0x95cc60: ldr             x17, [x17, #0x398]
    // 0x95cc64: StoreField: r0->field_cf = r17
    //     0x95cc64: stur            w17, [x0, #0xcf]
    // 0x95cc68: ldur            x2, [fp, #-8]
    // 0x95cc6c: r1 = Function '<anonymous closure>':.
    //     0x95cc6c: add             x1, PP, #0x41, lsl #12  ; [pp+0x413a0] AnonymousClosure: (0x95d024), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_actions (0x95bc4c)
    //     0x95cc70: ldr             x1, [x1, #0x3a0]
    // 0x95cc74: r0 = AllocateClosure()
    //     0x95cc74: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x95cc78: r1 = <PasteTextIntent>
    //     0x95cc78: add             x1, PP, #0x41, lsl #12  ; [pp+0x413a8] TypeArguments: <PasteTextIntent>
    //     0x95cc7c: ldr             x1, [x1, #0x3a8]
    // 0x95cc80: stur            x0, [fp, #-8]
    // 0x95cc84: r0 = CallbackAction()
    //     0x95cc84: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95cc88: mov             x1, x0
    // 0x95cc8c: ldur            x0, [fp, #-8]
    // 0x95cc90: stur            x1, [fp, #-0x18]
    // 0x95cc94: StoreField: r1->field_13 = r0
    //     0x95cc94: stur            w0, [x1, #0x13]
    // 0x95cc98: str             x1, [SP]
    // 0x95cc9c: r0 = Action()
    //     0x95cc9c: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95cca0: r16 = <Intent>
    //     0x95cca0: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cca4: ldr             lr, [fp, #0x10]
    // 0x95cca8: stp             lr, x16, [SP, #8]
    // 0x95ccac: ldur            x16, [fp, #-0x18]
    // 0x95ccb0: str             x16, [SP]
    // 0x95ccb4: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95ccb4: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95ccb8: r0 = _makeOverridable()
    //     0x95ccb8: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95ccbc: ldur            x1, [fp, #-0x10]
    // 0x95ccc0: ArrayStore: r1[49] = r0  ; List_4
    //     0x95ccc0: add             x25, x1, #0xd3
    //     0x95ccc4: str             w0, [x25]
    //     0x95ccc8: tbz             w0, #0, #0x95cce4
    //     0x95cccc: ldurb           w16, [x1, #-1]
    //     0x95ccd0: ldurb           w17, [x0, #-1]
    //     0x95ccd4: and             x16, x17, x16, lsr #2
    //     0x95ccd8: tst             x16, HEAP, lsr #32
    //     0x95ccdc: b.eq            #0x95cce4
    //     0x95cce0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95cce4: ldur            x0, [fp, #-0x10]
    // 0x95cce8: r17 = TransposeCharactersIntent
    //     0x95cce8: add             x17, PP, #0x41, lsl #12  ; [pp+0x413b0] Type: TransposeCharactersIntent
    //     0x95ccec: ldr             x17, [x17, #0x3b0]
    // 0x95ccf0: StoreField: r0->field_d7 = r17
    //     0x95ccf0: stur            w17, [x0, #0xd7]
    // 0x95ccf4: ldr             x1, [fp, #0x10]
    // 0x95ccf8: LoadField: r0 = r1->field_b7
    //     0x95ccf8: ldur            w0, [x1, #0xb7]
    // 0x95ccfc: DecompressPointer r0
    //     0x95ccfc: add             x0, x0, HEAP, lsl #32
    // 0x95cd00: r16 = Sentinel
    //     0x95cd00: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x95cd04: cmp             w0, w16
    // 0x95cd08: b.ne            #0x95cd18
    // 0x95cd0c: r2 = _transposeCharactersAction
    //     0x95cd0c: add             x2, PP, #0x41, lsl #12  ; [pp+0x413b8] Field <EditableTextState._transposeCharactersAction@244183791>: late final (offset: 0xb8)
    //     0x95cd10: ldr             x2, [x2, #0x3b8]
    // 0x95cd14: r0 = InitLateFinalInstanceField()
    //     0x95cd14: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0x95cd18: r16 = <Intent>
    //     0x95cd18: ldr             x16, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cd1c: ldr             lr, [fp, #0x10]
    // 0x95cd20: stp             lr, x16, [SP, #8]
    // 0x95cd24: str             x0, [SP]
    // 0x95cd28: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0x95cd28: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0x95cd2c: r0 = _makeOverridable()
    //     0x95cd2c: bl              #0x95cf0c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_makeOverridable
    // 0x95cd30: ldur            x1, [fp, #-0x10]
    // 0x95cd34: ArrayStore: r1[51] = r0  ; List_4
    //     0x95cd34: add             x25, x1, #0xdb
    //     0x95cd38: str             w0, [x25]
    //     0x95cd3c: tbz             w0, #0, #0x95cd58
    //     0x95cd40: ldurb           w16, [x1, #-1]
    //     0x95cd44: ldurb           w17, [x0, #-1]
    //     0x95cd48: and             x16, x17, x16, lsr #2
    //     0x95cd4c: tst             x16, HEAP, lsr #32
    //     0x95cd50: b.eq            #0x95cd58
    //     0x95cd54: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x95cd58: r16 = <Type, Action<Intent>>
    //     0x95cd58: add             x16, PP, #0x24, lsl #12  ; [pp+0x24110] TypeArguments: <Type, Action<Intent>>
    //     0x95cd5c: ldr             x16, [x16, #0x110]
    // 0x95cd60: ldur            lr, [fp, #-0x10]
    // 0x95cd64: stp             lr, x16, [SP]
    // 0x95cd68: r0 = Map._fromLiteral()
    //     0x95cd68: bl              #0x4da070  ; [dart:core] Map::Map._fromLiteral
    // 0x95cd6c: LeaveFrame
    //     0x95cd6c: mov             SP, fp
    //     0x95cd70: ldp             fp, lr, [SP], #0x10
    // 0x95cd74: ret
    //     0x95cd74: ret             
    // 0x95cd78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95cd78: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95cd7c: b               #0x95bc64
  }
  _ _makeOverridable(/* No info */) {
    // ** addr: 0x95cf0c, size: 0x8c
    // 0x95cf0c: EnterFrame
    //     0x95cf0c: stp             fp, lr, [SP, #-0x10]!
    //     0x95cf10: mov             fp, SP
    // 0x95cf14: AllocStack(0x18)
    //     0x95cf14: sub             SP, SP, #0x18
    // 0x95cf18: SetupParameters()
    //     0x95cf18: mov             x0, x4
    //     0x95cf1c: ldur            w1, [x0, #0xf]
    //     0x95cf20: add             x1, x1, HEAP, lsl #32
    //     0x95cf24: cbnz            w1, #0x95cf30
    //     0x95cf28: mov             x0, NULL
    //     0x95cf2c: b               #0x95cf40
    //     0x95cf30: ldur            w2, [x0, #0x17]
    //     0x95cf34: add             x2, x2, HEAP, lsl #32
    //     0x95cf38: add             x0, fp, w2, sxtw #2
    //     0x95cf3c: ldr             x0, [x0, #0x10]
    // 0x95cf40: CheckStackOverflow
    //     0x95cf40: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95cf44: cmp             SP, x16
    //     0x95cf48: b.ls            #0x95cf8c
    // 0x95cf4c: cbnz            w1, #0x95cf58
    // 0x95cf50: r1 = <Intent>
    //     0x95cf50: ldr             x1, [PP, #0x5540]  ; [pp+0x5540] TypeArguments: <Intent>
    // 0x95cf54: b               #0x95cf5c
    // 0x95cf58: mov             x1, x0
    // 0x95cf5c: ldr             x0, [fp, #0x18]
    // 0x95cf60: LoadField: r2 = r0->field_f
    //     0x95cf60: ldur            w2, [x0, #0xf]
    // 0x95cf64: DecompressPointer r2
    //     0x95cf64: add             x2, x2, HEAP, lsl #32
    // 0x95cf68: cmp             w2, NULL
    // 0x95cf6c: b.eq            #0x95cf94
    // 0x95cf70: stp             x2, x1, [SP, #8]
    // 0x95cf74: ldr             x16, [fp, #0x10]
    // 0x95cf78: str             x16, [SP]
    // 0x95cf7c: r0 = Action.overridable()
    //     0x95cf7c: bl              #0x956a9c  ; [package:flutter/src/widgets/actions.dart] Action::Action.overridable
    // 0x95cf80: LeaveFrame
    //     0x95cf80: mov             SP, fp
    //     0x95cf84: ldp             fp, lr, [SP], #0x10
    // 0x95cf88: ret
    //     0x95cf88: ret             
    // 0x95cf8c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95cf8c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95cf90: b               #0x95cf4c
    // 0x95cf94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x95cf94: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  Action<TransposeCharactersIntent> _transposeCharactersAction(EditableTextState) {
    // ** addr: 0x95cfa4, size: 0x80
    // 0x95cfa4: EnterFrame
    //     0x95cfa4: stp             fp, lr, [SP, #-0x10]!
    //     0x95cfa8: mov             fp, SP
    // 0x95cfac: AllocStack(0x18)
    //     0x95cfac: sub             SP, SP, #0x18
    // 0x95cfb0: CheckStackOverflow
    //     0x95cfb0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95cfb4: cmp             SP, x16
    //     0x95cfb8: b.ls            #0x95d01c
    // 0x95cfbc: ldr             x0, [fp, #0x10]
    // 0x95cfc0: r1 = 59
    //     0x95cfc0: movz            x1, #0x3b
    // 0x95cfc4: branchIfSmi(r0, 0x95cfd0)
    //     0x95cfc4: tbz             w0, #0, #0x95cfd0
    // 0x95cfc8: r1 = LoadClassIdInstr(r0)
    //     0x95cfc8: ldur            x1, [x0, #-1]
    //     0x95cfcc: ubfx            x1, x1, #0xc, #0x14
    // 0x95cfd0: str             x0, [SP]
    // 0x95cfd4: mov             x0, x1
    // 0x95cfd8: r0 = GDT[cid_x0 + -0xfdc]()
    //     0x95cfd8: sub             lr, x0, #0xfdc
    //     0x95cfdc: ldr             lr, [x21, lr, lsl #3]
    //     0x95cfe0: blr             lr
    // 0x95cfe4: r1 = <TransposeCharactersIntent>
    //     0x95cfe4: add             x1, PP, #0x41, lsl #12  ; [pp+0x413c0] TypeArguments: <TransposeCharactersIntent>
    //     0x95cfe8: ldr             x1, [x1, #0x3c0]
    // 0x95cfec: stur            x0, [fp, #-8]
    // 0x95cff0: r0 = CallbackAction()
    //     0x95cff0: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95cff4: mov             x1, x0
    // 0x95cff8: ldur            x0, [fp, #-8]
    // 0x95cffc: stur            x1, [fp, #-0x10]
    // 0x95d000: StoreField: r1->field_13 = r0
    //     0x95d000: stur            w0, [x1, #0x13]
    // 0x95d004: str             x1, [SP]
    // 0x95d008: r0 = Action()
    //     0x95d008: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95d00c: ldur            x0, [fp, #-0x10]
    // 0x95d010: LeaveFrame
    //     0x95d010: mov             SP, fp
    //     0x95d014: ldp             fp, lr, [SP], #0x10
    // 0x95d018: ret
    //     0x95d018: ret             
    // 0x95d01c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95d01c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95d020: b               #0x95cfbc
  }
  [closure] Future<void> <anonymous closure>(dynamic, PasteTextIntent) {
    // ** addr: 0x95d024, size: 0x4c
    // 0x95d024: EnterFrame
    //     0x95d024: stp             fp, lr, [SP, #-0x10]!
    //     0x95d028: mov             fp, SP
    // 0x95d02c: AllocStack(0x10)
    //     0x95d02c: sub             SP, SP, #0x10
    // 0x95d030: SetupParameters()
    //     0x95d030: ldr             x0, [fp, #0x18]
    //     0x95d034: ldur            w1, [x0, #0x17]
    //     0x95d038: add             x1, x1, HEAP, lsl #32
    // 0x95d03c: CheckStackOverflow
    //     0x95d03c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95d040: cmp             SP, x16
    //     0x95d044: b.ls            #0x95d068
    // 0x95d048: LoadField: r0 = r1->field_f
    //     0x95d048: ldur            w0, [x1, #0xf]
    // 0x95d04c: DecompressPointer r0
    //     0x95d04c: add             x0, x0, HEAP, lsl #32
    // 0x95d050: r16 = Instance_SelectionChangedCause
    //     0x95d050: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0x95d054: stp             x16, x0, [SP]
    // 0x95d058: r0 = pasteText()
    //     0x95d058: bl              #0x69d764  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::pasteText
    // 0x95d05c: LeaveFrame
    //     0x95d05c: mov             SP, fp
    //     0x95d060: ldp             fp, lr, [SP], #0x10
    // 0x95d064: ret
    //     0x95d064: ret             
    // 0x95d068: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95d068: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95d06c: b               #0x95d048
  }
  Action<UpdateSelectionIntent> _updateSelectionAction(EditableTextState) {
    // ** addr: 0x95d10c, size: 0x80
    // 0x95d10c: EnterFrame
    //     0x95d10c: stp             fp, lr, [SP, #-0x10]!
    //     0x95d110: mov             fp, SP
    // 0x95d114: AllocStack(0x18)
    //     0x95d114: sub             SP, SP, #0x18
    // 0x95d118: CheckStackOverflow
    //     0x95d118: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95d11c: cmp             SP, x16
    //     0x95d120: b.ls            #0x95d184
    // 0x95d124: ldr             x0, [fp, #0x10]
    // 0x95d128: r1 = 59
    //     0x95d128: movz            x1, #0x3b
    // 0x95d12c: branchIfSmi(r0, 0x95d138)
    //     0x95d12c: tbz             w0, #0, #0x95d138
    // 0x95d130: r1 = LoadClassIdInstr(r0)
    //     0x95d130: ldur            x1, [x0, #-1]
    //     0x95d134: ubfx            x1, x1, #0xc, #0x14
    // 0x95d138: str             x0, [SP]
    // 0x95d13c: mov             x0, x1
    // 0x95d140: r0 = GDT[cid_x0 + -0xfe2]()
    //     0x95d140: sub             lr, x0, #0xfe2
    //     0x95d144: ldr             lr, [x21, lr, lsl #3]
    //     0x95d148: blr             lr
    // 0x95d14c: r1 = <UpdateSelectionIntent>
    //     0x95d14c: add             x1, PP, #0x2b, lsl #12  ; [pp+0x2bc18] TypeArguments: <UpdateSelectionIntent>
    //     0x95d150: ldr             x1, [x1, #0xc18]
    // 0x95d154: stur            x0, [fp, #-8]
    // 0x95d158: r0 = CallbackAction()
    //     0x95d158: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95d15c: mov             x1, x0
    // 0x95d160: ldur            x0, [fp, #-8]
    // 0x95d164: stur            x1, [fp, #-0x10]
    // 0x95d168: StoreField: r1->field_13 = r0
    //     0x95d168: stur            w0, [x1, #0x13]
    // 0x95d16c: str             x1, [SP]
    // 0x95d170: r0 = Action()
    //     0x95d170: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95d174: ldur            x0, [fp, #-0x10]
    // 0x95d178: LeaveFrame
    //     0x95d178: mov             SP, fp
    //     0x95d17c: ldp             fp, lr, [SP], #0x10
    // 0x95d180: ret
    //     0x95d180: ret             
    // 0x95d184: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95d184: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95d188: b               #0x95d124
  }
  Action<ReplaceTextIntent> _replaceTextAction(EditableTextState) {
    // ** addr: 0x95d1ac, size: 0x80
    // 0x95d1ac: EnterFrame
    //     0x95d1ac: stp             fp, lr, [SP, #-0x10]!
    //     0x95d1b0: mov             fp, SP
    // 0x95d1b4: AllocStack(0x18)
    //     0x95d1b4: sub             SP, SP, #0x18
    // 0x95d1b8: CheckStackOverflow
    //     0x95d1b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95d1bc: cmp             SP, x16
    //     0x95d1c0: b.ls            #0x95d224
    // 0x95d1c4: ldr             x0, [fp, #0x10]
    // 0x95d1c8: r1 = 59
    //     0x95d1c8: movz            x1, #0x3b
    // 0x95d1cc: branchIfSmi(r0, 0x95d1d8)
    //     0x95d1cc: tbz             w0, #0, #0x95d1d8
    // 0x95d1d0: r1 = LoadClassIdInstr(r0)
    //     0x95d1d0: ldur            x1, [x0, #-1]
    //     0x95d1d4: ubfx            x1, x1, #0xc, #0x14
    // 0x95d1d8: str             x0, [SP]
    // 0x95d1dc: mov             x0, x1
    // 0x95d1e0: r0 = GDT[cid_x0 + -0xfde]()
    //     0x95d1e0: sub             lr, x0, #0xfde
    //     0x95d1e4: ldr             lr, [x21, lr, lsl #3]
    //     0x95d1e8: blr             lr
    // 0x95d1ec: r1 = <ReplaceTextIntent>
    //     0x95d1ec: add             x1, PP, #0x41, lsl #12  ; [pp+0x413c8] TypeArguments: <ReplaceTextIntent>
    //     0x95d1f0: ldr             x1, [x1, #0x3c8]
    // 0x95d1f4: stur            x0, [fp, #-8]
    // 0x95d1f8: r0 = CallbackAction()
    //     0x95d1f8: bl              #0x9220c0  ; AllocateCallbackActionStub -> CallbackAction<X0 bound Intent> (size=0x18)
    // 0x95d1fc: mov             x1, x0
    // 0x95d200: ldur            x0, [fp, #-8]
    // 0x95d204: stur            x1, [fp, #-0x10]
    // 0x95d208: StoreField: r1->field_13 = r0
    //     0x95d208: stur            w0, [x1, #0x13]
    // 0x95d20c: str             x1, [SP]
    // 0x95d210: r0 = Action()
    //     0x95d210: bl              #0x69edf8  ; [package:flutter/src/widgets/actions.dart] Action::Action
    // 0x95d214: ldur            x0, [fp, #-0x10]
    // 0x95d218: LeaveFrame
    //     0x95d218: mov             SP, fp
    //     0x95d21c: ldp             fp, lr, [SP], #0x10
    // 0x95d220: ret
    //     0x95d220: ret             
    // 0x95d224: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95d224: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95d228: b               #0x95d1c4
  }
  _ initState(/* No info */) {
    // ** addr: 0xa23268, size: 0x200
    // 0xa23268: EnterFrame
    //     0xa23268: stp             fp, lr, [SP, #-0x10]!
    //     0xa2326c: mov             fp, SP
    // 0xa23270: AllocStack(0x18)
    //     0xa23270: sub             SP, SP, #0x18
    // 0xa23274: CheckStackOverflow
    //     0xa23274: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa23278: cmp             SP, x16
    //     0xa2327c: b.ls            #0xa23450
    // 0xa23280: ldr             x16, [fp, #0x10]
    // 0xa23284: str             x16, [SP]
    // 0xa23288: r0 = initState()
    //     0xa23288: bl              #0xa234c8  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin::initState
    // 0xa2328c: ldr             x0, [fp, #0x10]
    // 0xa23290: LoadField: r1 = r0->field_37
    //     0xa23290: ldur            w1, [x0, #0x37]
    // 0xa23294: DecompressPointer r1
    //     0xa23294: add             x1, x1, HEAP, lsl #32
    // 0xa23298: stur            x1, [fp, #-8]
    // 0xa2329c: r1 = 1
    //     0xa2329c: movz            x1, #0x1
    // 0xa232a0: r0 = AllocateContext()
    //     0xa232a0: bl              #0xc5def4  ; AllocateContextStub
    // 0xa232a4: mov             x1, x0
    // 0xa232a8: ldr             x0, [fp, #0x10]
    // 0xa232ac: StoreField: r1->field_f = r0
    //     0xa232ac: stur            w0, [x1, #0xf]
    // 0xa232b0: mov             x2, x1
    // 0xa232b4: r1 = Function '_onChangedLiveTextInputStatus@244183791':.
    //     0xa232b4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41408] AnonymousClosure: (0xa235c4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus (0xa2360c)
    //     0xa232b8: ldr             x1, [x1, #0x408]
    // 0xa232bc: r0 = AllocateClosure()
    //     0xa232bc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa232c0: ldur            x16, [fp, #-8]
    // 0xa232c4: stp             x0, x16, [SP]
    // 0xa232c8: r0 = addListener()
    //     0xa232c8: bl              #0x82ec90  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::addListener
    // 0xa232cc: ldr             x0, [fp, #0x10]
    // 0xa232d0: LoadField: r1 = r0->field_33
    //     0xa232d0: ldur            w1, [x0, #0x33]
    // 0xa232d4: DecompressPointer r1
    //     0xa232d4: add             x1, x1, HEAP, lsl #32
    // 0xa232d8: stur            x1, [fp, #-8]
    // 0xa232dc: r1 = 1
    //     0xa232dc: movz            x1, #0x1
    // 0xa232e0: r0 = AllocateContext()
    //     0xa232e0: bl              #0xc5def4  ; AllocateContextStub
    // 0xa232e4: mov             x1, x0
    // 0xa232e8: ldr             x0, [fp, #0x10]
    // 0xa232ec: StoreField: r1->field_f = r0
    //     0xa232ec: stur            w0, [x1, #0xf]
    // 0xa232f0: mov             x2, x1
    // 0xa232f4: r1 = Function '_onChangedClipboardStatus@244183791':.
    //     0xa232f4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41410] AnonymousClosure: (0xa23530), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus (0xa23578)
    //     0xa232f8: ldr             x1, [x1, #0x410]
    // 0xa232fc: r0 = AllocateClosure()
    //     0xa232fc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa23300: ldur            x16, [fp, #-8]
    // 0xa23304: stp             x0, x16, [SP]
    // 0xa23308: r0 = addListener()
    //     0xa23308: bl              #0x82eb78  ; [package:flutter/src/widgets/text_selection.dart] ClipboardStatusNotifier::addListener
    // 0xa2330c: ldr             x0, [fp, #0x10]
    // 0xa23310: LoadField: r1 = r0->field_b
    //     0xa23310: ldur            w1, [x0, #0xb]
    // 0xa23314: DecompressPointer r1
    //     0xa23314: add             x1, x1, HEAP, lsl #32
    // 0xa23318: cmp             w1, NULL
    // 0xa2331c: b.eq            #0xa23458
    // 0xa23320: LoadField: r2 = r1->field_b
    //     0xa23320: ldur            w2, [x1, #0xb]
    // 0xa23324: DecompressPointer r2
    //     0xa23324: add             x2, x2, HEAP, lsl #32
    // 0xa23328: stur            x2, [fp, #-8]
    // 0xa2332c: r1 = 1
    //     0xa2332c: movz            x1, #0x1
    // 0xa23330: r0 = AllocateContext()
    //     0xa23330: bl              #0xc5def4  ; AllocateContextStub
    // 0xa23334: mov             x1, x0
    // 0xa23338: ldr             x0, [fp, #0x10]
    // 0xa2333c: StoreField: r1->field_f = r0
    //     0xa2333c: stur            w0, [x1, #0xf]
    // 0xa23340: mov             x2, x1
    // 0xa23344: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0xa23344: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0xa23348: ldr             x1, [x1, #0xea8]
    // 0xa2334c: r0 = AllocateClosure()
    //     0xa2334c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa23350: ldur            x16, [fp, #-8]
    // 0xa23354: stp             x0, x16, [SP]
    // 0xa23358: r0 = addListener()
    //     0xa23358: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0xa2335c: ldr             x0, [fp, #0x10]
    // 0xa23360: LoadField: r1 = r0->field_b
    //     0xa23360: ldur            w1, [x0, #0xb]
    // 0xa23364: DecompressPointer r1
    //     0xa23364: add             x1, x1, HEAP, lsl #32
    // 0xa23368: cmp             w1, NULL
    // 0xa2336c: b.eq            #0xa2345c
    // 0xa23370: LoadField: r2 = r1->field_f
    //     0xa23370: ldur            w2, [x1, #0xf]
    // 0xa23374: DecompressPointer r2
    //     0xa23374: add             x2, x2, HEAP, lsl #32
    // 0xa23378: stur            x2, [fp, #-8]
    // 0xa2337c: r1 = 1
    //     0xa2337c: movz            x1, #0x1
    // 0xa23380: r0 = AllocateContext()
    //     0xa23380: bl              #0xc5def4  ; AllocateContextStub
    // 0xa23384: mov             x1, x0
    // 0xa23388: ldr             x0, [fp, #0x10]
    // 0xa2338c: StoreField: r1->field_f = r0
    //     0xa2338c: stur            w0, [x1, #0xf]
    // 0xa23390: mov             x2, x1
    // 0xa23394: r1 = Function '_handleFocusChanged@244183791':.
    //     0xa23394: add             x1, PP, #0x41, lsl #12  ; [pp+0x41400] AnonymousClosure: (0x8b7774), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x8b77bc)
    //     0xa23398: ldr             x1, [x1, #0x400]
    // 0xa2339c: r0 = AllocateClosure()
    //     0xa2339c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa233a0: ldur            x16, [fp, #-8]
    // 0xa233a4: stp             x0, x16, [SP]
    // 0xa233a8: r0 = addListener()
    //     0xa233a8: bl              #0x85c1b4  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::addListener
    // 0xa233ac: ldr             x16, [fp, #0x10]
    // 0xa233b0: str             x16, [SP]
    // 0xa233b4: r0 = _scrollController()
    //     0xa233b4: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0xa233b8: stur            x0, [fp, #-8]
    // 0xa233bc: r1 = 1
    //     0xa233bc: movz            x1, #0x1
    // 0xa233c0: r0 = AllocateContext()
    //     0xa233c0: bl              #0xc5def4  ; AllocateContextStub
    // 0xa233c4: mov             x1, x0
    // 0xa233c8: ldr             x0, [fp, #0x10]
    // 0xa233cc: StoreField: r1->field_f = r0
    //     0xa233cc: stur            w0, [x1, #0xf]
    // 0xa233d0: mov             x2, x1
    // 0xa233d4: r1 = Function '_onEditableScroll@244183791':.
    //     0xa233d4: add             x1, PP, #0x41, lsl #12  ; [pp+0x41450] AnonymousClosure: (0x8b76d0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onEditableScroll (0x8b7718)
    //     0xa233d8: ldr             x1, [x1, #0x450]
    // 0xa233dc: r0 = AllocateClosure()
    //     0xa233dc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa233e0: ldur            x16, [fp, #-8]
    // 0xa233e4: stp             x0, x16, [SP]
    // 0xa233e8: r0 = addListener()
    //     0xa233e8: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0xa233ec: ldr             x0, [fp, #0x10]
    // 0xa233f0: LoadField: r1 = r0->field_2b
    //     0xa233f0: ldur            w1, [x0, #0x2b]
    // 0xa233f4: DecompressPointer r1
    //     0xa233f4: add             x1, x1, HEAP, lsl #32
    // 0xa233f8: LoadField: r2 = r0->field_b
    //     0xa233f8: ldur            w2, [x0, #0xb]
    // 0xa233fc: DecompressPointer r2
    //     0xa233fc: add             x2, x2, HEAP, lsl #32
    // 0xa23400: cmp             w2, NULL
    // 0xa23404: b.eq            #0xa23460
    // 0xa23408: LoadField: r3 = r2->field_33
    //     0xa23408: ldur            w3, [x2, #0x33]
    // 0xa2340c: DecompressPointer r3
    //     0xa2340c: add             x3, x3, HEAP, lsl #32
    // 0xa23410: stp             x3, x1, [SP]
    // 0xa23414: r0 = value=()
    //     0xa23414: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0xa23418: ldr             x0, [fp, #0x10]
    // 0xa2341c: LoadField: r1 = r0->field_b
    //     0xa2341c: ldur            w1, [x0, #0xb]
    // 0xa23420: DecompressPointer r1
    //     0xa23420: add             x1, x1, HEAP, lsl #32
    // 0xa23424: cmp             w1, NULL
    // 0xa23428: b.eq            #0xa23464
    // 0xa2342c: r0 = _inferSpellCheckConfiguration()
    //     0xa2342c: bl              #0xa23468  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_inferSpellCheckConfiguration
    // 0xa23430: ldr             x1, [fp, #0x10]
    // 0xa23434: r2 = Instance_SpellCheckConfiguration
    //     0xa23434: add             x2, PP, #0x34, lsl #12  ; [pp+0x34b08] Obj!SpellCheckConfiguration@c2c061
    //     0xa23438: ldr             x2, [x2, #0xb08]
    // 0xa2343c: StoreField: r1->field_5f = r2
    //     0xa2343c: stur            w2, [x1, #0x5f]
    // 0xa23440: r0 = Null
    //     0xa23440: mov             x0, NULL
    // 0xa23444: LeaveFrame
    //     0xa23444: mov             SP, fp
    //     0xa23448: ldp             fp, lr, [SP], #0x10
    // 0xa2344c: ret
    //     0xa2344c: ret             
    // 0xa23450: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa23450: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa23454: b               #0xa23280
    // 0xa23458: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa23458: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa2345c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa2345c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa23460: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa23460: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa23464: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa23464: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  static _ _inferSpellCheckConfiguration(/* No info */) {
    // ** addr: 0xa23468, size: 0x60
    // 0xa23468: EnterFrame
    //     0xa23468: stp             fp, lr, [SP, #-0x10]!
    //     0xa2346c: mov             fp, SP
    // 0xa23470: CheckStackOverflow
    //     0xa23470: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa23474: cmp             SP, x16
    //     0xa23478: b.ls            #0xa234bc
    // 0xa2347c: r0 = LoadStaticField(0xc34)
    //     0xa2347c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa23480: ldr             x0, [x0, #0x1868]
    // 0xa23484: cmp             w0, NULL
    // 0xa23488: b.eq            #0xa234c4
    // 0xa2348c: r0 = InitLateStaticField(0x954) // [dart:ui] PlatformDispatcher::_instance
    //     0xa2348c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa23490: ldr             x0, [x0, #0x12a8]
    //     0xa23494: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa23498: cmp             w0, w16
    //     0xa2349c: b.ne            #0xa234a8
    //     0xa234a0: ldr             x2, [PP, #0x490]  ; [pp+0x490] Field <PlatformDispatcher._instance@15065589>: static late final (offset: 0x954)
    //     0xa234a4: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa234a8: r0 = Instance_SpellCheckConfiguration
    //     0xa234a8: add             x0, PP, #0x34, lsl #12  ; [pp+0x34b08] Obj!SpellCheckConfiguration@c2c061
    //     0xa234ac: ldr             x0, [x0, #0xb08]
    // 0xa234b0: LeaveFrame
    //     0xa234b0: mov             SP, fp
    //     0xa234b4: ldp             fp, lr, [SP], #0x10
    // 0xa234b8: ret
    //     0xa234b8: ret             
    // 0xa234bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa234bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa234c0: b               #0xa2347c
    // 0xa234c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa234c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onChangedClipboardStatus(dynamic) {
    // ** addr: 0xa23530, size: 0x48
    // 0xa23530: EnterFrame
    //     0xa23530: stp             fp, lr, [SP, #-0x10]!
    //     0xa23534: mov             fp, SP
    // 0xa23538: AllocStack(0x8)
    //     0xa23538: sub             SP, SP, #8
    // 0xa2353c: SetupParameters()
    //     0xa2353c: ldr             x0, [fp, #0x10]
    //     0xa23540: ldur            w1, [x0, #0x17]
    //     0xa23544: add             x1, x1, HEAP, lsl #32
    // 0xa23548: CheckStackOverflow
    //     0xa23548: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa2354c: cmp             SP, x16
    //     0xa23550: b.ls            #0xa23570
    // 0xa23554: LoadField: r0 = r1->field_f
    //     0xa23554: ldur            w0, [x1, #0xf]
    // 0xa23558: DecompressPointer r0
    //     0xa23558: add             x0, x0, HEAP, lsl #32
    // 0xa2355c: str             x0, [SP]
    // 0xa23560: r0 = _onChangedClipboardStatus()
    //     0xa23560: bl              #0xa23578  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus
    // 0xa23564: LeaveFrame
    //     0xa23564: mov             SP, fp
    //     0xa23568: ldp             fp, lr, [SP], #0x10
    // 0xa2356c: ret
    //     0xa2356c: ret             
    // 0xa23570: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa23570: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa23574: b               #0xa23554
  }
  _ _onChangedClipboardStatus(/* No info */) {
    // ** addr: 0xa23578, size: 0x4c
    // 0xa23578: EnterFrame
    //     0xa23578: stp             fp, lr, [SP, #-0x10]!
    //     0xa2357c: mov             fp, SP
    // 0xa23580: AllocStack(0x10)
    //     0xa23580: sub             SP, SP, #0x10
    // 0xa23584: CheckStackOverflow
    //     0xa23584: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa23588: cmp             SP, x16
    //     0xa2358c: b.ls            #0xa235bc
    // 0xa23590: r1 = Function '<anonymous closure>':.
    //     0xa23590: add             x1, PP, #0x41, lsl #12  ; [pp+0x41418] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa23594: ldr             x1, [x1, #0x418]
    // 0xa23598: r2 = Null
    //     0xa23598: mov             x2, NULL
    // 0xa2359c: r0 = AllocateClosure()
    //     0xa2359c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa235a0: ldr             x16, [fp, #0x10]
    // 0xa235a4: stp             x0, x16, [SP]
    // 0xa235a8: r0 = setState()
    //     0xa235a8: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0xa235ac: r0 = Null
    //     0xa235ac: mov             x0, NULL
    // 0xa235b0: LeaveFrame
    //     0xa235b0: mov             SP, fp
    //     0xa235b4: ldp             fp, lr, [SP], #0x10
    // 0xa235b8: ret
    //     0xa235b8: ret             
    // 0xa235bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa235bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa235c0: b               #0xa23590
  }
  [closure] void _onChangedLiveTextInputStatus(dynamic) {
    // ** addr: 0xa235c4, size: 0x48
    // 0xa235c4: EnterFrame
    //     0xa235c4: stp             fp, lr, [SP, #-0x10]!
    //     0xa235c8: mov             fp, SP
    // 0xa235cc: AllocStack(0x8)
    //     0xa235cc: sub             SP, SP, #8
    // 0xa235d0: SetupParameters()
    //     0xa235d0: ldr             x0, [fp, #0x10]
    //     0xa235d4: ldur            w1, [x0, #0x17]
    //     0xa235d8: add             x1, x1, HEAP, lsl #32
    // 0xa235dc: CheckStackOverflow
    //     0xa235dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa235e0: cmp             SP, x16
    //     0xa235e4: b.ls            #0xa23604
    // 0xa235e8: LoadField: r0 = r1->field_f
    //     0xa235e8: ldur            w0, [x1, #0xf]
    // 0xa235ec: DecompressPointer r0
    //     0xa235ec: add             x0, x0, HEAP, lsl #32
    // 0xa235f0: str             x0, [SP]
    // 0xa235f4: r0 = _onChangedLiveTextInputStatus()
    //     0xa235f4: bl              #0xa2360c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus
    // 0xa235f8: LeaveFrame
    //     0xa235f8: mov             SP, fp
    //     0xa235fc: ldp             fp, lr, [SP], #0x10
    // 0xa23600: ret
    //     0xa23600: ret             
    // 0xa23604: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa23604: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa23608: b               #0xa235e8
  }
  _ _onChangedLiveTextInputStatus(/* No info */) {
    // ** addr: 0xa2360c, size: 0x4c
    // 0xa2360c: EnterFrame
    //     0xa2360c: stp             fp, lr, [SP, #-0x10]!
    //     0xa23610: mov             fp, SP
    // 0xa23614: AllocStack(0x10)
    //     0xa23614: sub             SP, SP, #0x10
    // 0xa23618: CheckStackOverflow
    //     0xa23618: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa2361c: cmp             SP, x16
    //     0xa23620: b.ls            #0xa23650
    // 0xa23624: r1 = Function '<anonymous closure>':.
    //     0xa23624: add             x1, PP, #0x41, lsl #12  ; [pp+0x41420] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa23628: ldr             x1, [x1, #0x420]
    // 0xa2362c: r2 = Null
    //     0xa2362c: mov             x2, NULL
    // 0xa23630: r0 = AllocateClosure()
    //     0xa23630: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa23634: ldr             x16, [fp, #0x10]
    // 0xa23638: stp             x0, x16, [SP]
    // 0xa2363c: r0 = setState()
    //     0xa2363c: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0xa23640: r0 = Null
    //     0xa23640: mov             x0, NULL
    // 0xa23644: LeaveFrame
    //     0xa23644: mov             SP, fp
    //     0xa23648: ldp             fp, lr, [SP], #0x10
    // 0xa2364c: ret
    //     0xa2364c: ret             
    // 0xa23650: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa23650: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa23654: b               #0xa23624
  }
  _ EditableTextState(/* No info */) {
    // ** addr: 0xa4d34c, size: 0x26c
    // 0xa4d34c: EnterFrame
    //     0xa4d34c: stp             fp, lr, [SP, #-0x10]!
    //     0xa4d350: mov             fp, SP
    // 0xa4d354: AllocStack(0x10)
    //     0xa4d354: sub             SP, SP, #0x10
    // 0xa4d358: r1 = Sentinel
    //     0xa4d358: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4d35c: r3 = false
    //     0xa4d35c: add             x3, NULL, #0x30  ; false
    // 0xa4d360: r2 = true
    //     0xa4d360: add             x2, NULL, #0x20  ; true
    // 0xa4d364: r0 = 0
    //     0xa4d364: movz            x0, #0
    // 0xa4d368: CheckStackOverflow
    //     0xa4d368: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa4d36c: cmp             SP, x16
    //     0xa4d370: b.ls            #0xa4d5b0
    // 0xa4d374: ldr             x4, [fp, #0x10]
    // 0xa4d378: StoreField: r4->field_27 = r1
    //     0xa4d378: stur            w1, [x4, #0x27]
    // 0xa4d37c: StoreField: r4->field_57 = r3
    //     0xa4d37c: stur            w3, [x4, #0x57]
    // 0xa4d380: StoreField: r4->field_5f = r1
    //     0xa4d380: stur            w1, [x4, #0x5f]
    // 0xa4d384: StoreField: r4->field_63 = r1
    //     0xa4d384: stur            w1, [x4, #0x63]
    // 0xa4d388: StoreField: r4->field_6f = r2
    //     0xa4d388: stur            w2, [x4, #0x6f]
    // 0xa4d38c: StoreField: r4->field_87 = r0
    //     0xa4d38c: stur            x0, [x4, #0x87]
    // 0xa4d390: StoreField: r4->field_8f = r3
    //     0xa4d390: stur            w3, [x4, #0x8f]
    // 0xa4d394: StoreField: r4->field_93 = r3
    //     0xa4d394: stur            w3, [x4, #0x93]
    // 0xa4d398: StoreField: r4->field_97 = r1
    //     0xa4d398: stur            w1, [x4, #0x97]
    // 0xa4d39c: StoreField: r4->field_9b = r0
    //     0xa4d39c: stur            x0, [x4, #0x9b]
    // 0xa4d3a0: StoreField: r4->field_a7 = r1
    //     0xa4d3a0: stur            w1, [x4, #0xa7]
    // 0xa4d3a4: StoreField: r4->field_b7 = r1
    //     0xa4d3a4: stur            w1, [x4, #0xb7]
    // 0xa4d3a8: StoreField: r4->field_bb = r1
    //     0xa4d3a8: stur            w1, [x4, #0xbb]
    // 0xa4d3ac: StoreField: r4->field_bf = r1
    //     0xa4d3ac: stur            w1, [x4, #0xbf]
    // 0xa4d3b0: StoreField: r4->field_c3 = r1
    //     0xa4d3b0: stur            w1, [x4, #0xc3]
    // 0xa4d3b4: StoreField: r4->field_c7 = r1
    //     0xa4d3b4: stur            w1, [x4, #0xc7]
    // 0xa4d3b8: r1 = <bool>
    //     0xa4d3b8: ldr             x1, [PP, #0x3af8]  ; [pp+0x3af8] TypeArguments: <bool>
    // 0xa4d3bc: r0 = ValueNotifier()
    //     0xa4d3bc: bl              #0x5b4170  ; AllocateValueNotifierStub -> ValueNotifier<X0> (size=0x2c)
    // 0xa4d3c0: mov             x1, x0
    // 0xa4d3c4: r0 = true
    //     0xa4d3c4: add             x0, NULL, #0x20  ; true
    // 0xa4d3c8: stur            x1, [fp, #-8]
    // 0xa4d3cc: StoreField: r1->field_27 = r0
    //     0xa4d3cc: stur            w0, [x1, #0x27]
    // 0xa4d3d0: r0 = 0
    //     0xa4d3d0: movz            x0, #0
    // 0xa4d3d4: StoreField: r1->field_7 = r0
    //     0xa4d3d4: stur            x0, [x1, #7]
    // 0xa4d3d8: StoreField: r1->field_13 = r0
    //     0xa4d3d8: stur            x0, [x1, #0x13]
    // 0xa4d3dc: StoreField: r1->field_1b = r0
    //     0xa4d3dc: stur            x0, [x1, #0x1b]
    // 0xa4d3e0: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0xa4d3e0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa4d3e4: ldr             x0, [x0, #0x1478]
    //     0xa4d3e8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa4d3ec: cmp             w0, w16
    //     0xa4d3f0: b.ne            #0xa4d3fc
    //     0xa4d3f4: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0xa4d3f8: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa4d3fc: mov             x2, x0
    // 0xa4d400: ldur            x0, [fp, #-8]
    // 0xa4d404: stur            x2, [fp, #-0x10]
    // 0xa4d408: StoreField: r0->field_f = r2
    //     0xa4d408: stur            w2, [x0, #0xf]
    // 0xa4d40c: ldr             x3, [fp, #0x10]
    // 0xa4d410: StoreField: r3->field_2b = r0
    //     0xa4d410: stur            w0, [x3, #0x2b]
    //     0xa4d414: ldurb           w16, [x3, #-1]
    //     0xa4d418: ldurb           w17, [x0, #-1]
    //     0xa4d41c: and             x16, x17, x16, lsr #2
    //     0xa4d420: tst             x16, HEAP, lsr #32
    //     0xa4d424: b.eq            #0xa4d42c
    //     0xa4d428: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xa4d42c: r1 = <State<StatefulWidget>>
    //     0xa4d42c: ldr             x1, [PP, #0x34a8]  ; [pp+0x34a8] TypeArguments: <State<StatefulWidget>>
    // 0xa4d430: r0 = LabeledGlobalKey()
    //     0xa4d430: bl              #0x5feb28  ; AllocateLabeledGlobalKeyStub -> LabeledGlobalKey<X0 bound State> (size=0x10)
    // 0xa4d434: ldr             x2, [fp, #0x10]
    // 0xa4d438: StoreField: r2->field_2f = r0
    //     0xa4d438: stur            w0, [x2, #0x2f]
    //     0xa4d43c: ldurb           w16, [x2, #-1]
    //     0xa4d440: ldurb           w17, [x0, #-1]
    //     0xa4d444: and             x16, x17, x16, lsr #2
    //     0xa4d448: tst             x16, HEAP, lsr #32
    //     0xa4d44c: b.eq            #0xa4d454
    //     0xa4d450: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa4d454: r1 = <ClipboardStatus>
    //     0xa4d454: add             x1, PP, #0x39, lsl #12  ; [pp+0x39d98] TypeArguments: <ClipboardStatus>
    //     0xa4d458: ldr             x1, [x1, #0xd98]
    // 0xa4d45c: r0 = ClipboardStatusNotifier()
    //     0xa4d45c: bl              #0xa4d5c4  ; AllocateClipboardStatusNotifierStub -> ClipboardStatusNotifier (size=0x30)
    // 0xa4d460: r2 = false
    //     0xa4d460: add             x2, NULL, #0x30  ; false
    // 0xa4d464: StoreField: r0->field_2b = r2
    //     0xa4d464: stur            w2, [x0, #0x2b]
    // 0xa4d468: r1 = Instance_ClipboardStatus
    //     0xa4d468: ldr             x1, [PP, #0x5e48]  ; [pp+0x5e48] Obj!ClipboardStatus@c421d1
    // 0xa4d46c: StoreField: r0->field_27 = r1
    //     0xa4d46c: stur            w1, [x0, #0x27]
    // 0xa4d470: r3 = 0
    //     0xa4d470: movz            x3, #0
    // 0xa4d474: StoreField: r0->field_7 = r3
    //     0xa4d474: stur            x3, [x0, #7]
    // 0xa4d478: StoreField: r0->field_13 = r3
    //     0xa4d478: stur            x3, [x0, #0x13]
    // 0xa4d47c: StoreField: r0->field_1b = r3
    //     0xa4d47c: stur            x3, [x0, #0x1b]
    // 0xa4d480: ldur            x4, [fp, #-0x10]
    // 0xa4d484: StoreField: r0->field_f = r4
    //     0xa4d484: stur            w4, [x0, #0xf]
    // 0xa4d488: ldr             x5, [fp, #0x10]
    // 0xa4d48c: StoreField: r5->field_33 = r0
    //     0xa4d48c: stur            w0, [x5, #0x33]
    //     0xa4d490: ldurb           w16, [x5, #-1]
    //     0xa4d494: ldurb           w17, [x0, #-1]
    //     0xa4d498: and             x16, x17, x16, lsr #2
    //     0xa4d49c: tst             x16, HEAP, lsr #32
    //     0xa4d4a0: b.eq            #0xa4d4a8
    //     0xa4d4a4: bl              #0xc5d77c  ; WriteBarrierWrappersStub
    // 0xa4d4a8: r1 = <LiveTextInputStatus>
    //     0xa4d4a8: add             x1, PP, #0x39, lsl #12  ; [pp+0x39da0] TypeArguments: <LiveTextInputStatus>
    //     0xa4d4ac: ldr             x1, [x1, #0xda0]
    // 0xa4d4b0: r0 = LiveTextInputStatusNotifier()
    //     0xa4d4b0: bl              #0xa4d5b8  ; AllocateLiveTextInputStatusNotifierStub -> LiveTextInputStatusNotifier (size=0x30)
    // 0xa4d4b4: mov             x1, x0
    // 0xa4d4b8: r0 = false
    //     0xa4d4b8: add             x0, NULL, #0x30  ; false
    // 0xa4d4bc: StoreField: r1->field_2b = r0
    //     0xa4d4bc: stur            w0, [x1, #0x2b]
    // 0xa4d4c0: r0 = Instance_LiveTextInputStatus
    //     0xa4d4c0: ldr             x0, [PP, #0x5e90]  ; [pp+0x5e90] Obj!LiveTextInputStatus@c42171
    // 0xa4d4c4: StoreField: r1->field_27 = r0
    //     0xa4d4c4: stur            w0, [x1, #0x27]
    // 0xa4d4c8: r0 = 0
    //     0xa4d4c8: movz            x0, #0
    // 0xa4d4cc: StoreField: r1->field_7 = r0
    //     0xa4d4cc: stur            x0, [x1, #7]
    // 0xa4d4d0: StoreField: r1->field_13 = r0
    //     0xa4d4d0: stur            x0, [x1, #0x13]
    // 0xa4d4d4: StoreField: r1->field_1b = r0
    //     0xa4d4d4: stur            x0, [x1, #0x1b]
    // 0xa4d4d8: ldur            x0, [fp, #-0x10]
    // 0xa4d4dc: StoreField: r1->field_f = r0
    //     0xa4d4dc: stur            w0, [x1, #0xf]
    // 0xa4d4e0: mov             x0, x1
    // 0xa4d4e4: ldr             x2, [fp, #0x10]
    // 0xa4d4e8: StoreField: r2->field_37 = r0
    //     0xa4d4e8: stur            w0, [x2, #0x37]
    //     0xa4d4ec: ldurb           w16, [x2, #-1]
    //     0xa4d4f0: ldurb           w17, [x0, #-1]
    //     0xa4d4f4: and             x16, x17, x16, lsr #2
    //     0xa4d4f8: tst             x16, HEAP, lsr #32
    //     0xa4d4fc: b.eq            #0xa4d504
    //     0xa4d500: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa4d504: r1 = <State<StatefulWidget>>
    //     0xa4d504: ldr             x1, [PP, #0x34a8]  ; [pp+0x34a8] TypeArguments: <State<StatefulWidget>>
    // 0xa4d508: r0 = LabeledGlobalKey()
    //     0xa4d508: bl              #0x5feb28  ; AllocateLabeledGlobalKeyStub -> LabeledGlobalKey<X0 bound State> (size=0x10)
    // 0xa4d50c: ldr             x1, [fp, #0x10]
    // 0xa4d510: StoreField: r1->field_43 = r0
    //     0xa4d510: stur            w0, [x1, #0x43]
    //     0xa4d514: ldurb           w16, [x1, #-1]
    //     0xa4d518: ldurb           w17, [x0, #-1]
    //     0xa4d51c: and             x16, x17, x16, lsr #2
    //     0xa4d520: tst             x16, HEAP, lsr #32
    //     0xa4d524: b.eq            #0xa4d52c
    //     0xa4d528: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa4d52c: r0 = LayerLink()
    //     0xa4d52c: bl              #0xa4c9f0  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0xa4d530: ldr             x1, [fp, #0x10]
    // 0xa4d534: StoreField: r1->field_4b = r0
    //     0xa4d534: stur            w0, [x1, #0x4b]
    //     0xa4d538: ldurb           w16, [x1, #-1]
    //     0xa4d53c: ldurb           w17, [x0, #-1]
    //     0xa4d540: and             x16, x17, x16, lsr #2
    //     0xa4d544: tst             x16, HEAP, lsr #32
    //     0xa4d548: b.eq            #0xa4d550
    //     0xa4d54c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa4d550: r0 = LayerLink()
    //     0xa4d550: bl              #0xa4c9f0  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0xa4d554: ldr             x1, [fp, #0x10]
    // 0xa4d558: StoreField: r1->field_4f = r0
    //     0xa4d558: stur            w0, [x1, #0x4f]
    //     0xa4d55c: ldurb           w16, [x1, #-1]
    //     0xa4d560: ldurb           w17, [x0, #-1]
    //     0xa4d564: and             x16, x17, x16, lsr #2
    //     0xa4d568: tst             x16, HEAP, lsr #32
    //     0xa4d56c: b.eq            #0xa4d574
    //     0xa4d570: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa4d574: r0 = LayerLink()
    //     0xa4d574: bl              #0xa4c9f0  ; AllocateLayerLinkStub -> LayerLink (size=0x10)
    // 0xa4d578: ldr             x1, [fp, #0x10]
    // 0xa4d57c: StoreField: r1->field_53 = r0
    //     0xa4d57c: stur            w0, [x1, #0x53]
    //     0xa4d580: ldurb           w16, [x1, #-1]
    //     0xa4d584: ldurb           w17, [x0, #-1]
    //     0xa4d588: and             x16, x17, x16, lsr #2
    //     0xa4d58c: tst             x16, HEAP, lsr #32
    //     0xa4d590: b.eq            #0xa4d598
    //     0xa4d594: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa4d598: r2 = -1
    //     0xa4d598: movn            x2, #0
    // 0xa4d59c: StoreField: r1->field_ab = r2
    //     0xa4d59c: stur            x2, [x1, #0xab]
    // 0xa4d5a0: r0 = Null
    //     0xa4d5a0: mov             x0, NULL
    // 0xa4d5a4: LeaveFrame
    //     0xa4d5a4: mov             SP, fp
    //     0xa4d5a8: ldp             fp, lr, [SP], #0x10
    // 0xa4d5ac: ret
    //     0xa4d5ac: ret             
    // 0xa4d5b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa4d5b0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa4d5b4: b               #0xa4d374
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa5884c, size: 0x2b8
    // 0xa5884c: EnterFrame
    //     0xa5884c: stp             fp, lr, [SP, #-0x10]!
    //     0xa58850: mov             fp, SP
    // 0xa58854: AllocStack(0x18)
    //     0xa58854: sub             SP, SP, #0x18
    // 0xa58858: CheckStackOverflow
    //     0xa58858: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa5885c: cmp             SP, x16
    //     0xa58860: b.ls            #0xa58ae8
    // 0xa58864: ldr             x0, [fp, #0x10]
    // 0xa58868: LoadField: r1 = r0->field_47
    //     0xa58868: ldur            w1, [x0, #0x47]
    // 0xa5886c: DecompressPointer r1
    //     0xa5886c: add             x1, x1, HEAP, lsl #32
    // 0xa58870: cmp             w1, NULL
    // 0xa58874: b.eq            #0xa58884
    // 0xa58878: str             x1, [SP]
    // 0xa5887c: r0 = dispose()
    //     0xa5887c: bl              #0xa3d00c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::dispose
    // 0xa58880: ldr             x0, [fp, #0x10]
    // 0xa58884: LoadField: r1 = r0->field_b
    //     0xa58884: ldur            w1, [x0, #0xb]
    // 0xa58888: DecompressPointer r1
    //     0xa58888: add             x1, x1, HEAP, lsl #32
    // 0xa5888c: cmp             w1, NULL
    // 0xa58890: b.eq            #0xa58af0
    // 0xa58894: LoadField: r2 = r1->field_b
    //     0xa58894: ldur            w2, [x1, #0xb]
    // 0xa58898: DecompressPointer r2
    //     0xa58898: add             x2, x2, HEAP, lsl #32
    // 0xa5889c: stur            x2, [fp, #-8]
    // 0xa588a0: r1 = 1
    //     0xa588a0: movz            x1, #0x1
    // 0xa588a4: r0 = AllocateContext()
    //     0xa588a4: bl              #0xc5def4  ; AllocateContextStub
    // 0xa588a8: mov             x1, x0
    // 0xa588ac: ldr             x0, [fp, #0x10]
    // 0xa588b0: StoreField: r1->field_f = r0
    //     0xa588b0: stur            w0, [x1, #0xf]
    // 0xa588b4: mov             x2, x1
    // 0xa588b8: r1 = Function '_didChangeTextEditingValue@244183791':.
    //     0xa588b8: add             x1, PP, #0x1f, lsl #12  ; [pp+0x1fea8] AnonymousClosure: (0x69eeac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_didChangeTextEditingValue (0x69e7f0)
    //     0xa588bc: ldr             x1, [x1, #0xea8]
    // 0xa588c0: r0 = AllocateClosure()
    //     0xa588c0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa588c4: ldur            x16, [fp, #-8]
    // 0xa588c8: stp             x0, x16, [SP]
    // 0xa588cc: r0 = removeListener()
    //     0xa588cc: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0xa588d0: ldr             x0, [fp, #0x10]
    // 0xa588d4: LoadField: r1 = r0->field_67
    //     0xa588d4: ldur            w1, [x0, #0x67]
    // 0xa588d8: DecompressPointer r1
    //     0xa588d8: add             x1, x1, HEAP, lsl #32
    // 0xa588dc: cmp             w1, NULL
    // 0xa588e0: b.eq            #0xa588f0
    // 0xa588e4: str             x1, [SP]
    // 0xa588e8: r0 = dispose()
    //     0xa588e8: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa588ec: ldr             x0, [fp, #0x10]
    // 0xa588f0: StoreField: r0->field_67 = rNULL
    //     0xa588f0: stur            NULL, [x0, #0x67]
    // 0xa588f4: str             x0, [SP]
    // 0xa588f8: r0 = _closeInputConnectionIfNeeded()
    //     0xa588f8: bl              #0x8b7590  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_closeInputConnectionIfNeeded
    // 0xa588fc: ldr             x0, [fp, #0x10]
    // 0xa58900: LoadField: r1 = r0->field_1f
    //     0xa58900: ldur            w1, [x0, #0x1f]
    // 0xa58904: DecompressPointer r1
    //     0xa58904: add             x1, x1, HEAP, lsl #32
    // 0xa58908: cmp             w1, NULL
    // 0xa5890c: b.eq            #0xa5891c
    // 0xa58910: str             x1, [SP]
    // 0xa58914: r0 = cancel()
    //     0xa58914: bl              #0x5cf100  ; [dart:isolate] _Timer::cancel
    // 0xa58918: ldr             x0, [fp, #0x10]
    // 0xa5891c: StoreField: r0->field_1f = rNULL
    //     0xa5891c: stur            NULL, [x0, #0x1f]
    // 0xa58920: LoadField: r1 = r0->field_23
    //     0xa58920: ldur            w1, [x0, #0x23]
    // 0xa58924: DecompressPointer r1
    //     0xa58924: add             x1, x1, HEAP, lsl #32
    // 0xa58928: cmp             w1, NULL
    // 0xa5892c: b.eq            #0xa5893c
    // 0xa58930: str             x1, [SP]
    // 0xa58934: r0 = dispose()
    //     0xa58934: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa58938: ldr             x0, [fp, #0x10]
    // 0xa5893c: StoreField: r0->field_23 = rNULL
    //     0xa5893c: stur            NULL, [x0, #0x23]
    // 0xa58940: LoadField: r1 = r0->field_3f
    //     0xa58940: ldur            w1, [x0, #0x3f]
    // 0xa58944: DecompressPointer r1
    //     0xa58944: add             x1, x1, HEAP, lsl #32
    // 0xa58948: cmp             w1, NULL
    // 0xa5894c: b.eq            #0xa5895c
    // 0xa58950: str             x1, [SP]
    // 0xa58954: r0 = dispose()
    //     0xa58954: bl              #0x69eb70  ; [package:flutter/src/widgets/text_selection.dart] TextSelectionOverlay::dispose
    // 0xa58958: ldr             x0, [fp, #0x10]
    // 0xa5895c: StoreField: r0->field_3f = rNULL
    //     0xa5895c: stur            NULL, [x0, #0x3f]
    // 0xa58960: LoadField: r1 = r0->field_b
    //     0xa58960: ldur            w1, [x0, #0xb]
    // 0xa58964: DecompressPointer r1
    //     0xa58964: add             x1, x1, HEAP, lsl #32
    // 0xa58968: cmp             w1, NULL
    // 0xa5896c: b.eq            #0xa58af4
    // 0xa58970: LoadField: r2 = r1->field_f
    //     0xa58970: ldur            w2, [x1, #0xf]
    // 0xa58974: DecompressPointer r2
    //     0xa58974: add             x2, x2, HEAP, lsl #32
    // 0xa58978: stur            x2, [fp, #-8]
    // 0xa5897c: r1 = 1
    //     0xa5897c: movz            x1, #0x1
    // 0xa58980: r0 = AllocateContext()
    //     0xa58980: bl              #0xc5def4  ; AllocateContextStub
    // 0xa58984: mov             x1, x0
    // 0xa58988: ldr             x0, [fp, #0x10]
    // 0xa5898c: StoreField: r1->field_f = r0
    //     0xa5898c: stur            w0, [x1, #0xf]
    // 0xa58990: mov             x2, x1
    // 0xa58994: r1 = Function '_handleFocusChanged@244183791':.
    //     0xa58994: add             x1, PP, #0x41, lsl #12  ; [pp+0x41400] AnonymousClosure: (0x8b7774), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_handleFocusChanged (0x8b77bc)
    //     0xa58998: ldr             x1, [x1, #0x400]
    // 0xa5899c: r0 = AllocateClosure()
    //     0xa5899c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa589a0: ldur            x16, [fp, #-8]
    // 0xa589a4: stp             x0, x16, [SP]
    // 0xa589a8: r0 = removeListener()
    //     0xa589a8: bl              #0x86b820  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0xa589ac: r0 = LoadStaticField(0xc34)
    //     0xa589ac: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa589b0: ldr             x0, [x0, #0x1868]
    // 0xa589b4: cmp             w0, NULL
    // 0xa589b8: b.eq            #0xa58af8
    // 0xa589bc: ldr             x16, [fp, #0x10]
    // 0xa589c0: stp             x16, x0, [SP]
    // 0xa589c4: r0 = removeObserver()
    //     0xa589c4: bl              #0x840fe4  ; [package:flutter/src/widgets/binding.dart] _WidgetsFlutterBinding&BindingBase&GestureBinding&SchedulerBinding&ServicesBinding&PaintingBinding&SemanticsBinding&RendererBinding&WidgetsBinding::removeObserver
    // 0xa589c8: ldr             x0, [fp, #0x10]
    // 0xa589cc: LoadField: r1 = r0->field_37
    //     0xa589cc: ldur            w1, [x0, #0x37]
    // 0xa589d0: DecompressPointer r1
    //     0xa589d0: add             x1, x1, HEAP, lsl #32
    // 0xa589d4: stur            x1, [fp, #-8]
    // 0xa589d8: r1 = 1
    //     0xa589d8: movz            x1, #0x1
    // 0xa589dc: r0 = AllocateContext()
    //     0xa589dc: bl              #0xc5def4  ; AllocateContextStub
    // 0xa589e0: mov             x1, x0
    // 0xa589e4: ldr             x0, [fp, #0x10]
    // 0xa589e8: StoreField: r1->field_f = r0
    //     0xa589e8: stur            w0, [x1, #0xf]
    // 0xa589ec: mov             x2, x1
    // 0xa589f0: r1 = Function '_onChangedLiveTextInputStatus@244183791':.
    //     0xa589f0: add             x1, PP, #0x41, lsl #12  ; [pp+0x41408] AnonymousClosure: (0xa235c4), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedLiveTextInputStatus (0xa2360c)
    //     0xa589f4: ldr             x1, [x1, #0x408]
    // 0xa589f8: r0 = AllocateClosure()
    //     0xa589f8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa589fc: ldur            x16, [fp, #-8]
    // 0xa58a00: stp             x0, x16, [SP]
    // 0xa58a04: r0 = removeListener()
    //     0xa58a04: bl              #0x840f6c  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::removeListener
    // 0xa58a08: ldur            x16, [fp, #-8]
    // 0xa58a0c: str             x16, [SP]
    // 0xa58a10: r0 = dispose()
    //     0xa58a10: bl              #0xa3c4e4  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::dispose
    // 0xa58a14: ldr             x0, [fp, #0x10]
    // 0xa58a18: LoadField: r1 = r0->field_33
    //     0xa58a18: ldur            w1, [x0, #0x33]
    // 0xa58a1c: DecompressPointer r1
    //     0xa58a1c: add             x1, x1, HEAP, lsl #32
    // 0xa58a20: stur            x1, [fp, #-8]
    // 0xa58a24: r1 = 1
    //     0xa58a24: movz            x1, #0x1
    // 0xa58a28: r0 = AllocateContext()
    //     0xa58a28: bl              #0xc5def4  ; AllocateContextStub
    // 0xa58a2c: mov             x1, x0
    // 0xa58a30: ldr             x0, [fp, #0x10]
    // 0xa58a34: StoreField: r1->field_f = r0
    //     0xa58a34: stur            w0, [x1, #0xf]
    // 0xa58a38: mov             x2, x1
    // 0xa58a3c: r1 = Function '_onChangedClipboardStatus@244183791':.
    //     0xa58a3c: add             x1, PP, #0x41, lsl #12  ; [pp+0x41410] AnonymousClosure: (0xa23530), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onChangedClipboardStatus (0xa23578)
    //     0xa58a40: ldr             x1, [x1, #0x410]
    // 0xa58a44: r0 = AllocateClosure()
    //     0xa58a44: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa58a48: ldur            x16, [fp, #-8]
    // 0xa58a4c: stp             x0, x16, [SP]
    // 0xa58a50: r0 = removeListener()
    //     0xa58a50: bl              #0x840f6c  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::removeListener
    // 0xa58a54: ldur            x16, [fp, #-8]
    // 0xa58a58: str             x16, [SP]
    // 0xa58a5c: r0 = dispose()
    //     0xa58a5c: bl              #0xa3c4e4  ; [package:flutter/src/widgets/text_selection.dart] LiveTextInputStatusNotifier::dispose
    // 0xa58a60: ldr             x0, [fp, #0x10]
    // 0xa58a64: LoadField: r1 = r0->field_2b
    //     0xa58a64: ldur            w1, [x0, #0x2b]
    // 0xa58a68: DecompressPointer r1
    //     0xa58a68: add             x1, x1, HEAP, lsl #32
    // 0xa58a6c: str             x1, [SP]
    // 0xa58a70: r0 = dispose()
    //     0xa58a70: bl              #0xa60440  ; [package:flutter/src/widgets/shortcuts.dart] _ShortcutManager&Object&Diagnosticable&ChangeNotifier::dispose
    // 0xa58a74: r0 = LoadStaticField(0xc34)
    //     0xa58a74: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa58a78: ldr             x0, [x0, #0x1868]
    // 0xa58a7c: cmp             w0, NULL
    // 0xa58a80: b.eq            #0xa58afc
    // 0xa58a84: LoadField: r1 = r0->field_d7
    //     0xa58a84: ldur            w1, [x0, #0xd7]
    // 0xa58a88: DecompressPointer r1
    //     0xa58a88: add             x1, x1, HEAP, lsl #32
    // 0xa58a8c: cmp             w1, NULL
    // 0xa58a90: b.eq            #0xa58b00
    // 0xa58a94: LoadField: r0 = r1->field_1b
    //     0xa58a94: ldur            w0, [x1, #0x1b]
    // 0xa58a98: DecompressPointer r0
    //     0xa58a98: add             x0, x0, HEAP, lsl #32
    // 0xa58a9c: stur            x0, [fp, #-8]
    // 0xa58aa0: r1 = 1
    //     0xa58aa0: movz            x1, #0x1
    // 0xa58aa4: r0 = AllocateContext()
    //     0xa58aa4: bl              #0xc5def4  ; AllocateContextStub
    // 0xa58aa8: mov             x1, x0
    // 0xa58aac: ldr             x0, [fp, #0x10]
    // 0xa58ab0: StoreField: r1->field_f = r0
    //     0xa58ab0: stur            w0, [x1, #0xf]
    // 0xa58ab4: mov             x2, x1
    // 0xa58ab8: r1 = Function '_unflagInternalFocus@244183791':.
    //     0xa58ab8: ldr             x1, [PP, #0x6470]  ; [pp+0x6470] AnonymousClosure: (0x5d6534), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_unflagInternalFocus (0x5d657c)
    // 0xa58abc: r0 = AllocateClosure()
    //     0xa58abc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa58ac0: ldur            x16, [fp, #-8]
    // 0xa58ac4: stp             x0, x16, [SP]
    // 0xa58ac8: r0 = removeListener()
    //     0xa58ac8: bl              #0x86b820  ; [package:flutter/src/widgets/focus_manager.dart] _FocusNode&Object&DiagnosticableTreeMixin&ChangeNotifier::removeListener
    // 0xa58acc: ldr             x16, [fp, #0x10]
    // 0xa58ad0: str             x16, [SP]
    // 0xa58ad4: r0 = dispose()
    //     0xa58ad4: bl              #0xa58b04  ; [package:flutter/src/widgets/editable_text.dart] _EditableTextState&State&AutomaticKeepAliveClientMixin&WidgetsBindingObserver&TickerProviderStateMixin::dispose
    // 0xa58ad8: r0 = Null
    //     0xa58ad8: mov             x0, NULL
    // 0xa58adc: LeaveFrame
    //     0xa58adc: mov             SP, fp
    //     0xa58ae0: ldp             fp, lr, [SP], #0x10
    // 0xa58ae4: ret
    //     0xa58ae4: ret             
    // 0xa58ae8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa58ae8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa58aec: b               #0xa58864
    // 0xa58af0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa58af0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa58af4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa58af4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa58af8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa58af8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa58afc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa58afc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa58b00: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa58b00: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _characterBoundary(/* No info */) {
    // ** addr: 0xa7c818, size: 0x58
    // 0xa7c818: EnterFrame
    //     0xa7c818: stp             fp, lr, [SP, #-0x10]!
    //     0xa7c81c: mov             fp, SP
    // 0xa7c820: AllocStack(0x8)
    //     0xa7c820: sub             SP, SP, #8
    // 0xa7c824: ldr             x0, [fp, #0x10]
    // 0xa7c828: LoadField: r1 = r0->field_b
    //     0xa7c828: ldur            w1, [x0, #0xb]
    // 0xa7c82c: DecompressPointer r1
    //     0xa7c82c: add             x1, x1, HEAP, lsl #32
    // 0xa7c830: cmp             w1, NULL
    // 0xa7c834: b.eq            #0xa7c86c
    // 0xa7c838: LoadField: r0 = r1->field_b
    //     0xa7c838: ldur            w0, [x1, #0xb]
    // 0xa7c83c: DecompressPointer r0
    //     0xa7c83c: add             x0, x0, HEAP, lsl #32
    // 0xa7c840: LoadField: r1 = r0->field_27
    //     0xa7c840: ldur            w1, [x0, #0x27]
    // 0xa7c844: DecompressPointer r1
    //     0xa7c844: add             x1, x1, HEAP, lsl #32
    // 0xa7c848: LoadField: r0 = r1->field_7
    //     0xa7c848: ldur            w0, [x1, #7]
    // 0xa7c84c: DecompressPointer r0
    //     0xa7c84c: add             x0, x0, HEAP, lsl #32
    // 0xa7c850: stur            x0, [fp, #-8]
    // 0xa7c854: r0 = CharacterBoundary()
    //     0xa7c854: bl              #0xa7c8b8  ; AllocateCharacterBoundaryStub -> CharacterBoundary (size=0xc)
    // 0xa7c858: ldur            x1, [fp, #-8]
    // 0xa7c85c: StoreField: r0->field_7 = r1
    //     0xa7c85c: stur            w1, [x0, #7]
    // 0xa7c860: LeaveFrame
    //     0xa7c860: mov             SP, fp
    //     0xa7c864: ldp             fp, lr, [SP], #0x10
    // 0xa7c868: ret
    //     0xa7c868: ret             
    // 0xa7c86c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa7c86c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] TextBoundary _characterBoundary(dynamic) {
    // ** addr: 0xa7c870, size: 0x48
    // 0xa7c870: EnterFrame
    //     0xa7c870: stp             fp, lr, [SP, #-0x10]!
    //     0xa7c874: mov             fp, SP
    // 0xa7c878: AllocStack(0x8)
    //     0xa7c878: sub             SP, SP, #8
    // 0xa7c87c: SetupParameters()
    //     0xa7c87c: ldr             x0, [fp, #0x10]
    //     0xa7c880: ldur            w1, [x0, #0x17]
    //     0xa7c884: add             x1, x1, HEAP, lsl #32
    // 0xa7c888: CheckStackOverflow
    //     0xa7c888: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7c88c: cmp             SP, x16
    //     0xa7c890: b.ls            #0xa7c8b0
    // 0xa7c894: LoadField: r0 = r1->field_f
    //     0xa7c894: ldur            w0, [x1, #0xf]
    // 0xa7c898: DecompressPointer r0
    //     0xa7c898: add             x0, x0, HEAP, lsl #32
    // 0xa7c89c: str             x0, [SP]
    // 0xa7c8a0: r0 = _characterBoundary()
    //     0xa7c8a0: bl              #0xa7c818  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary
    // 0xa7c8a4: LeaveFrame
    //     0xa7c8a4: mov             SP, fp
    //     0xa7c8a8: ldp             fp, lr, [SP], #0x10
    // 0xa7c8ac: ret
    //     0xa7c8ac: ret             
    // 0xa7c8b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7c8b0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7c8b4: b               #0xa7c894
  }
  get _ _textEditingValueforTextLayoutMetrics(/* No info */) {
    // ** addr: 0xa7eb3c, size: 0xb0
    // 0xa7eb3c: EnterFrame
    //     0xa7eb3c: stp             fp, lr, [SP, #-0x10]!
    //     0xa7eb40: mov             fp, SP
    // 0xa7eb44: AllocStack(0x8)
    //     0xa7eb44: sub             SP, SP, #8
    // 0xa7eb48: CheckStackOverflow
    //     0xa7eb48: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa7eb4c: cmp             SP, x16
    //     0xa7eb50: b.ls            #0xa7ebe4
    // 0xa7eb54: ldr             x0, [fp, #0x10]
    // 0xa7eb58: LoadField: r1 = r0->field_2f
    //     0xa7eb58: ldur            w1, [x0, #0x2f]
    // 0xa7eb5c: DecompressPointer r1
    //     0xa7eb5c: add             x1, x1, HEAP, lsl #32
    // 0xa7eb60: str             x1, [SP]
    // 0xa7eb64: r0 = _currentElement()
    //     0xa7eb64: bl              #0x5b02fc  ; [package:flutter/src/widgets/framework.dart] GlobalKey::_currentElement
    // 0xa7eb68: cmp             w0, NULL
    // 0xa7eb6c: b.ne            #0xa7eb78
    // 0xa7eb70: r0 = Null
    //     0xa7eb70: mov             x0, NULL
    // 0xa7eb74: b               #0xa7eb94
    // 0xa7eb78: r1 = LoadClassIdInstr(r0)
    //     0xa7eb78: ldur            x1, [x0, #-1]
    //     0xa7eb7c: ubfx            x1, x1, #0xc, #0x14
    // 0xa7eb80: str             x0, [SP]
    // 0xa7eb84: mov             x0, x1
    // 0xa7eb88: r0 = GDT[cid_x0 + -0xf7d]()
    //     0xa7eb88: sub             lr, x0, #0xf7d
    //     0xa7eb8c: ldr             lr, [x21, lr, lsl #3]
    //     0xa7eb90: blr             lr
    // 0xa7eb94: r1 = LoadClassIdInstr(r0)
    //     0xa7eb94: ldur            x1, [x0, #-1]
    //     0xa7eb98: ubfx            x1, x1, #0xc, #0x14
    // 0xa7eb9c: lsl             x1, x1, #1
    // 0xa7eba0: r17 = 7358
    //     0xa7eba0: movz            x17, #0x1cbe
    // 0xa7eba4: cmp             w1, w17
    // 0xa7eba8: b.ne            #0xa7ebc4
    // 0xa7ebac: LoadField: r1 = r0->field_13
    //     0xa7ebac: ldur            w1, [x0, #0x13]
    // 0xa7ebb0: DecompressPointer r1
    //     0xa7ebb0: add             x1, x1, HEAP, lsl #32
    // 0xa7ebb4: mov             x0, x1
    // 0xa7ebb8: LeaveFrame
    //     0xa7ebb8: mov             SP, fp
    //     0xa7ebbc: ldp             fp, lr, [SP], #0x10
    // 0xa7ebc0: ret
    //     0xa7ebc0: ret             
    // 0xa7ebc4: r0 = StateError()
    //     0xa7ebc4: bl              #0x4c3868  ; AllocateStateErrorStub -> StateError (size=0x10)
    // 0xa7ebc8: mov             x1, x0
    // 0xa7ebcc: r0 = "_Editable must be mounted."
    //     0xa7ebcc: add             x0, PP, #0x2b, lsl #12  ; [pp+0x2bc70] "_Editable must be mounted."
    //     0xa7ebd0: ldr             x0, [x0, #0xc70]
    // 0xa7ebd4: StoreField: r1->field_b = r0
    //     0xa7ebd4: stur            w0, [x1, #0xb]
    // 0xa7ebd8: mov             x0, x1
    // 0xa7ebdc: r0 = Throw()
    //     0xa7ebdc: bl              #0xc5d2b8  ; ThrowStub
    // 0xa7ebe0: brk             #0
    // 0xa7ebe4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa7ebe4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa7ebe8: b               #0xa7eb54
  }
  dynamic _schedulePeriodicPostFrameCallbacks(dynamic) {
    // ** addr: 0xc05f70, size: 0x18
    // 0xc05f70: r4 = 7
    //     0xc05f70: movz            x4, #0x7
    // 0xc05f74: r1 = Function '_schedulePeriodicPostFrameCallbacks@244183791':.
    //     0xc05f74: add             x17, PP, #0x41, lsl #12  ; [pp+0x411b8] AnonymousClosure: (0x5da01c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_schedulePeriodicPostFrameCallbacks (0x5d9e78)
    //     0xc05f78: ldr             x1, [x17, #0x1b8]
    // 0xc05f7c: r24 = BuildNonGenericMethodExtractorStub
    //     0xc05f7c: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc05f80: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc05f80: ldur            x0, [x24, #0x17]
    // 0xc05f84: br              x0
  }
  dynamic _transposeCharacters(dynamic) {
    // ** addr: 0xc05f88, size: 0x18
    // 0xc05f88: r4 = 7
    //     0xc05f88: movz            x4, #0x7
    // 0xc05f8c: r1 = Function '_transposeCharacters@244183791':.
    //     0xc05f8c: add             x17, PP, #0x47, lsl #12  ; [pp+0x47398] AnonymousClosure: (0xc05fa0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_transposeCharacters (0xc05fec)
    //     0xc05f90: ldr             x1, [x17, #0x398]
    // 0xc05f94: r24 = BuildNonGenericMethodExtractorStub
    //     0xc05f94: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc05f98: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc05f98: ldur            x0, [x24, #0x17]
    // 0xc05f9c: br              x0
  }
  [closure] void _transposeCharacters(dynamic, TransposeCharactersIntent) {
    // ** addr: 0xc05fa0, size: 0x4c
    // 0xc05fa0: EnterFrame
    //     0xc05fa0: stp             fp, lr, [SP, #-0x10]!
    //     0xc05fa4: mov             fp, SP
    // 0xc05fa8: AllocStack(0x10)
    //     0xc05fa8: sub             SP, SP, #0x10
    // 0xc05fac: SetupParameters()
    //     0xc05fac: ldr             x0, [fp, #0x18]
    //     0xc05fb0: ldur            w1, [x0, #0x17]
    //     0xc05fb4: add             x1, x1, HEAP, lsl #32
    // 0xc05fb8: CheckStackOverflow
    //     0xc05fb8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc05fbc: cmp             SP, x16
    //     0xc05fc0: b.ls            #0xc05fe4
    // 0xc05fc4: LoadField: r0 = r1->field_f
    //     0xc05fc4: ldur            w0, [x1, #0xf]
    // 0xc05fc8: DecompressPointer r0
    //     0xc05fc8: add             x0, x0, HEAP, lsl #32
    // 0xc05fcc: ldr             x16, [fp, #0x10]
    // 0xc05fd0: stp             x16, x0, [SP]
    // 0xc05fd4: r0 = _transposeCharacters()
    //     0xc05fd4: bl              #0xc05fec  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_transposeCharacters
    // 0xc05fd8: LeaveFrame
    //     0xc05fd8: mov             SP, fp
    //     0xc05fdc: ldp             fp, lr, [SP], #0x10
    // 0xc05fe0: ret
    //     0xc05fe0: ret             
    // 0xc05fe4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc05fe4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc05fe8: b               #0xc05fc4
  }
  _ _transposeCharacters(/* No info */) {
    // ** addr: 0xc05fec, size: 0x270
    // 0xc05fec: EnterFrame
    //     0xc05fec: stp             fp, lr, [SP, #-0x10]!
    //     0xc05ff0: mov             fp, SP
    // 0xc05ff4: AllocStack(0x40)
    //     0xc05ff4: sub             SP, SP, #0x40
    // 0xc05ff8: CheckStackOverflow
    //     0xc05ff8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc05ffc: cmp             SP, x16
    //     0xc06000: b.ls            #0xc0624c
    // 0xc06004: ldr             x0, [fp, #0x18]
    // 0xc06008: LoadField: r1 = r0->field_b
    //     0xc06008: ldur            w1, [x0, #0xb]
    // 0xc0600c: DecompressPointer r1
    //     0xc0600c: add             x1, x1, HEAP, lsl #32
    // 0xc06010: cmp             w1, NULL
    // 0xc06014: b.eq            #0xc06254
    // 0xc06018: LoadField: r2 = r1->field_b
    //     0xc06018: ldur            w2, [x1, #0xb]
    // 0xc0601c: DecompressPointer r2
    //     0xc0601c: add             x2, x2, HEAP, lsl #32
    // 0xc06020: LoadField: r1 = r2->field_27
    //     0xc06020: ldur            w1, [x2, #0x27]
    // 0xc06024: DecompressPointer r1
    //     0xc06024: add             x1, x1, HEAP, lsl #32
    // 0xc06028: LoadField: r2 = r1->field_7
    //     0xc06028: ldur            w2, [x1, #7]
    // 0xc0602c: DecompressPointer r2
    //     0xc0602c: add             x2, x2, HEAP, lsl #32
    // 0xc06030: str             x2, [SP]
    // 0xc06034: r0 = StringCharacters.characters()
    //     0xc06034: bl              #0x5cc35c  ; [package:characters/src/extensions.dart] ::StringCharacters.characters
    // 0xc06038: str             x0, [SP]
    // 0xc0603c: r0 = length()
    //     0xc0603c: bl              #0x5ab7bc  ; [package:characters/src/characters_impl.dart] StringCharacters::length
    // 0xc06040: r1 = LoadInt32Instr(r0)
    //     0xc06040: sbfx            x1, x0, #1, #0x1f
    //     0xc06044: tbz             w0, #0, #0xc0604c
    //     0xc06048: ldur            x1, [x0, #7]
    // 0xc0604c: cmp             x1, #1
    // 0xc06050: b.le            #0xc0609c
    // 0xc06054: ldr             x0, [fp, #0x18]
    // 0xc06058: LoadField: r1 = r0->field_b
    //     0xc06058: ldur            w1, [x0, #0xb]
    // 0xc0605c: DecompressPointer r1
    //     0xc0605c: add             x1, x1, HEAP, lsl #32
    // 0xc06060: cmp             w1, NULL
    // 0xc06064: b.eq            #0xc06258
    // 0xc06068: LoadField: r2 = r1->field_b
    //     0xc06068: ldur            w2, [x1, #0xb]
    // 0xc0606c: DecompressPointer r2
    //     0xc0606c: add             x2, x2, HEAP, lsl #32
    // 0xc06070: LoadField: r1 = r2->field_27
    //     0xc06070: ldur            w1, [x2, #0x27]
    // 0xc06074: DecompressPointer r1
    //     0xc06074: add             x1, x1, HEAP, lsl #32
    // 0xc06078: LoadField: r2 = r1->field_b
    //     0xc06078: ldur            w2, [x1, #0xb]
    // 0xc0607c: DecompressPointer r2
    //     0xc0607c: add             x2, x2, HEAP, lsl #32
    // 0xc06080: LoadField: r3 = r2->field_7
    //     0xc06080: ldur            x3, [x2, #7]
    // 0xc06084: LoadField: r4 = r2->field_f
    //     0xc06084: ldur            x4, [x2, #0xf]
    // 0xc06088: cmp             x3, x4
    // 0xc0608c: b.ne            #0xc0609c
    // 0xc06090: ArrayLoad: r3 = r2[0]  ; List_8
    //     0xc06090: ldur            x3, [x2, #0x17]
    // 0xc06094: stur            x3, [fp, #-0x10]
    // 0xc06098: cbnz            x3, #0xc060ac
    // 0xc0609c: r0 = Null
    //     0xc0609c: mov             x0, NULL
    // 0xc060a0: LeaveFrame
    //     0xc060a0: mov             SP, fp
    //     0xc060a4: ldp             fp, lr, [SP], #0x10
    // 0xc060a8: ret
    //     0xc060a8: ret             
    // 0xc060ac: LoadField: r2 = r1->field_7
    //     0xc060ac: ldur            w2, [x1, #7]
    // 0xc060b0: DecompressPointer r2
    //     0xc060b0: add             x2, x2, HEAP, lsl #32
    // 0xc060b4: LoadField: r1 = r2->field_7
    //     0xc060b4: ldur            w1, [x2, #7]
    // 0xc060b8: DecompressPointer r1
    //     0xc060b8: add             x1, x1, HEAP, lsl #32
    // 0xc060bc: r4 = LoadInt32Instr(r1)
    //     0xc060bc: sbfx            x4, x1, #1, #0x1f
    // 0xc060c0: stur            x4, [fp, #-8]
    // 0xc060c4: stp             x2, NULL, [SP, #8]
    // 0xc060c8: str             x3, [SP]
    // 0xc060cc: r0 = StringCharacterRange.at()
    //     0xc060cc: bl              #0xc064f8  ; [package:characters/src/characters_impl.dart] StringCharacterRange::StringCharacterRange.at
    // 0xc060d0: mov             x2, x0
    // 0xc060d4: ldur            x0, [fp, #-0x10]
    // 0xc060d8: ldur            x1, [fp, #-8]
    // 0xc060dc: stur            x2, [fp, #-0x18]
    // 0xc060e0: cmp             x0, x1
    // 0xc060e4: b.ne            #0xc060fc
    // 0xc060e8: r16 = 4
    //     0xc060e8: movz            x16, #0x4
    // 0xc060ec: stp             x16, x2, [SP]
    // 0xc060f0: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0xc060f0: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0xc060f4: r0 = moveBack()
    //     0xc060f4: bl              #0xc06350  ; [package:characters/src/characters_impl.dart] StringCharacterRange::moveBack
    // 0xc060f8: b               #0xc0611c
    // 0xc060fc: ldur            x16, [fp, #-0x18]
    // 0xc06100: str             x16, [SP]
    // 0xc06104: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0xc06104: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0xc06108: r0 = moveBack()
    //     0xc06108: bl              #0xc06350  ; [package:characters/src/characters_impl.dart] StringCharacterRange::moveBack
    // 0xc0610c: ldur            x16, [fp, #-0x18]
    // 0xc06110: str             x16, [SP]
    // 0xc06114: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0xc06114: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0xc06118: r0 = expandNext()
    //     0xc06118: bl              #0xbb042c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::expandNext
    // 0xc0611c: ldur            x0, [fp, #-0x18]
    // 0xc06120: str             x0, [SP]
    // 0xc06124: r0 = stringBefore()
    //     0xc06124: bl              #0xc062f0  ; [package:characters/src/characters_impl.dart] StringCharacterRange::stringBefore
    // 0xc06128: stur            x0, [fp, #-0x20]
    // 0xc0612c: ldur            x16, [fp, #-0x18]
    // 0xc06130: str             x16, [SP]
    // 0xc06134: r0 = currentCharacters()
    //     0xc06134: bl              #0xc062a4  ; [package:characters/src/characters_impl.dart] StringCharacterRange::currentCharacters
    // 0xc06138: str             x0, [SP]
    // 0xc0613c: r0 = last()
    //     0xc0613c: bl              #0x52ea58  ; [package:characters/src/characters_impl.dart] StringCharacters::last
    // 0xc06140: ldur            x16, [fp, #-0x20]
    // 0xc06144: stp             x0, x16, [SP]
    // 0xc06148: r0 = +()
    //     0xc06148: bl              #0x4c9058  ; [dart:core] _StringBase::+
    // 0xc0614c: stur            x0, [fp, #-0x20]
    // 0xc06150: ldur            x16, [fp, #-0x18]
    // 0xc06154: str             x16, [SP]
    // 0xc06158: r0 = current()
    //     0xc06158: bl              #0xba900c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::current
    // 0xc0615c: r1 = <String>
    //     0xc0615c: ldr             x1, [PP, #0x918]  ; [pp+0x918] TypeArguments: <String>
    // 0xc06160: stur            x0, [fp, #-0x28]
    // 0xc06164: r0 = StringCharacters()
    //     0xc06164: bl              #0x52cd78  ; AllocateStringCharactersStub -> StringCharacters (size=0x10)
    // 0xc06168: mov             x1, x0
    // 0xc0616c: ldur            x0, [fp, #-0x28]
    // 0xc06170: StoreField: r1->field_b = r0
    //     0xc06170: stur            w0, [x1, #0xb]
    // 0xc06174: str             x1, [SP]
    // 0xc06178: r0 = first()
    //     0xc06178: bl              #0x561008  ; [package:characters/src/characters_impl.dart] StringCharacters::first
    // 0xc0617c: ldur            x16, [fp, #-0x20]
    // 0xc06180: stp             x0, x16, [SP]
    // 0xc06184: r0 = +()
    //     0xc06184: bl              #0x4c9058  ; [dart:core] _StringBase::+
    // 0xc06188: stur            x0, [fp, #-0x20]
    // 0xc0618c: ldur            x16, [fp, #-0x18]
    // 0xc06190: str             x16, [SP]
    // 0xc06194: r0 = stringAfter()
    //     0xc06194: bl              #0xc0625c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::stringAfter
    // 0xc06198: ldur            x16, [fp, #-0x20]
    // 0xc0619c: stp             x0, x16, [SP]
    // 0xc061a0: r0 = +()
    //     0xc061a0: bl              #0x4c9058  ; [dart:core] _StringBase::+
    // 0xc061a4: mov             x1, x0
    // 0xc061a8: ldur            x0, [fp, #-0x18]
    // 0xc061ac: stur            x1, [fp, #-0x20]
    // 0xc061b0: LoadField: r2 = r0->field_b
    //     0xc061b0: ldur            x2, [x0, #0xb]
    // 0xc061b4: stur            x2, [fp, #-8]
    // 0xc061b8: str             x0, [SP]
    // 0xc061bc: r0 = current()
    //     0xc061bc: bl              #0xba900c  ; [package:characters/src/characters_impl.dart] StringCharacterRange::current
    // 0xc061c0: LoadField: r1 = r0->field_7
    //     0xc061c0: ldur            w1, [x0, #7]
    // 0xc061c4: DecompressPointer r1
    //     0xc061c4: add             x1, x1, HEAP, lsl #32
    // 0xc061c8: r0 = LoadInt32Instr(r1)
    //     0xc061c8: sbfx            x0, x1, #1, #0x1f
    // 0xc061cc: ldur            x1, [fp, #-8]
    // 0xc061d0: add             x2, x1, x0
    // 0xc061d4: stur            x2, [fp, #-0x10]
    // 0xc061d8: r0 = TextSelection()
    //     0xc061d8: bl              #0x5cbf7c  ; AllocateTextSelectionStub -> TextSelection (size=0x30)
    // 0xc061dc: mov             x1, x0
    // 0xc061e0: r0 = Instance_TextAffinity
    //     0xc061e0: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xc061e4: stur            x1, [fp, #-0x18]
    // 0xc061e8: StoreField: r1->field_27 = r0
    //     0xc061e8: stur            w0, [x1, #0x27]
    // 0xc061ec: ldur            x0, [fp, #-0x10]
    // 0xc061f0: ArrayStore: r1[0] = r0  ; List_8
    //     0xc061f0: stur            x0, [x1, #0x17]
    // 0xc061f4: StoreField: r1->field_1f = r0
    //     0xc061f4: stur            x0, [x1, #0x1f]
    // 0xc061f8: r2 = false
    //     0xc061f8: add             x2, NULL, #0x30  ; false
    // 0xc061fc: StoreField: r1->field_2b = r2
    //     0xc061fc: stur            w2, [x1, #0x2b]
    // 0xc06200: StoreField: r1->field_7 = r0
    //     0xc06200: stur            x0, [x1, #7]
    // 0xc06204: StoreField: r1->field_f = r0
    //     0xc06204: stur            x0, [x1, #0xf]
    // 0xc06208: r0 = TextEditingValue()
    //     0xc06208: bl              #0x5d73a4  ; AllocateTextEditingValueStub -> TextEditingValue (size=0x14)
    // 0xc0620c: mov             x1, x0
    // 0xc06210: ldur            x0, [fp, #-0x20]
    // 0xc06214: StoreField: r1->field_7 = r0
    //     0xc06214: stur            w0, [x1, #7]
    // 0xc06218: ldur            x0, [fp, #-0x18]
    // 0xc0621c: StoreField: r1->field_b = r0
    //     0xc0621c: stur            w0, [x1, #0xb]
    // 0xc06220: r0 = Instance_TextRange
    //     0xc06220: ldr             x0, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0xc06224: StoreField: r1->field_f = r0
    //     0xc06224: stur            w0, [x1, #0xf]
    // 0xc06228: ldr             x16, [fp, #0x18]
    // 0xc0622c: stp             x1, x16, [SP, #8]
    // 0xc06230: r16 = Instance_SelectionChangedCause
    //     0xc06230: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xc06234: str             x16, [SP]
    // 0xc06238: r0 = userUpdateTextEditingValue()
    //     0xc06238: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0xc0623c: r0 = Null
    //     0xc0623c: mov             x0, NULL
    // 0xc06240: LeaveFrame
    //     0xc06240: mov             SP, fp
    //     0xc06244: ldp             fp, lr, [SP], #0x10
    // 0xc06248: ret
    //     0xc06248: ret             
    // 0xc0624c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc0624c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc06250: b               #0xc06004
    // 0xc06254: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc06254: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc06258: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc06258: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _replaceText(dynamic) {
    // ** addr: 0xc06fe8, size: 0x18
    // 0xc06fe8: r4 = 7
    //     0xc06fe8: movz            x4, #0x7
    // 0xc06fec: r1 = Function '_replaceText@244183791':.
    //     0xc06fec: add             x17, PP, #0x47, lsl #12  ; [pp+0x47390] AnonymousClosure: (0x69e784), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_replaceText (0x69e6c0)
    //     0xc06ff0: ldr             x1, [x17, #0x390]
    // 0xc06ff4: r24 = BuildNonGenericMethodExtractorStub
    //     0xc06ff4: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc06ff8: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc06ff8: ldur            x0, [x24, #0x17]
    // 0xc06ffc: br              x0
  }
  dynamic _scrollToDocumentBoundary(dynamic) {
    // ** addr: 0xc07000, size: 0x18
    // 0xc07000: r4 = 7
    //     0xc07000: movz            x4, #0x7
    // 0xc07004: r1 = Function '_scrollToDocumentBoundary@244183791':.
    //     0xc07004: add             x17, PP, #0x47, lsl #12  ; [pp+0x47388] AnonymousClosure: (0xc07018), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollToDocumentBoundary (0xc07064)
    //     0xc07008: ldr             x1, [x17, #0x388]
    // 0xc0700c: r24 = BuildNonGenericMethodExtractorStub
    //     0xc0700c: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07010: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07010: ldur            x0, [x24, #0x17]
    // 0xc07014: br              x0
  }
  [closure] void _scrollToDocumentBoundary(dynamic, ScrollToDocumentBoundaryIntent) {
    // ** addr: 0xc07018, size: 0x4c
    // 0xc07018: EnterFrame
    //     0xc07018: stp             fp, lr, [SP, #-0x10]!
    //     0xc0701c: mov             fp, SP
    // 0xc07020: AllocStack(0x10)
    //     0xc07020: sub             SP, SP, #0x10
    // 0xc07024: SetupParameters()
    //     0xc07024: ldr             x0, [fp, #0x18]
    //     0xc07028: ldur            w1, [x0, #0x17]
    //     0xc0702c: add             x1, x1, HEAP, lsl #32
    // 0xc07030: CheckStackOverflow
    //     0xc07030: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07034: cmp             SP, x16
    //     0xc07038: b.ls            #0xc0705c
    // 0xc0703c: LoadField: r0 = r1->field_f
    //     0xc0703c: ldur            w0, [x1, #0xf]
    // 0xc07040: DecompressPointer r0
    //     0xc07040: add             x0, x0, HEAP, lsl #32
    // 0xc07044: ldr             x16, [fp, #0x10]
    // 0xc07048: stp             x16, x0, [SP]
    // 0xc0704c: r0 = _scrollToDocumentBoundary()
    //     0xc0704c: bl              #0xc07064  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollToDocumentBoundary
    // 0xc07050: LeaveFrame
    //     0xc07050: mov             SP, fp
    //     0xc07054: ldp             fp, lr, [SP], #0x10
    // 0xc07058: ret
    //     0xc07058: ret             
    // 0xc0705c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc0705c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07060: b               #0xc0703c
  }
  _ _scrollToDocumentBoundary(/* No info */) {
    // ** addr: 0xc07064, size: 0xbc
    // 0xc07064: EnterFrame
    //     0xc07064: stp             fp, lr, [SP, #-0x10]!
    //     0xc07068: mov             fp, SP
    // 0xc0706c: AllocStack(0x18)
    //     0xc0706c: sub             SP, SP, #0x18
    // 0xc07070: CheckStackOverflow
    //     0xc07070: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07074: cmp             SP, x16
    //     0xc07078: b.ls            #0xc07114
    // 0xc0707c: ldr             x0, [fp, #0x10]
    // 0xc07080: LoadField: r1 = r0->field_7
    //     0xc07080: ldur            w1, [x0, #7]
    // 0xc07084: DecompressPointer r1
    //     0xc07084: add             x1, x1, HEAP, lsl #32
    // 0xc07088: tbnz            w1, #4, #0xc070f0
    // 0xc0708c: ldr             x0, [fp, #0x18]
    // 0xc07090: LoadField: r1 = r0->field_b
    //     0xc07090: ldur            w1, [x0, #0xb]
    // 0xc07094: DecompressPointer r1
    //     0xc07094: add             x1, x1, HEAP, lsl #32
    // 0xc07098: cmp             w1, NULL
    // 0xc0709c: b.eq            #0xc0711c
    // 0xc070a0: LoadField: r2 = r1->field_b
    //     0xc070a0: ldur            w2, [x1, #0xb]
    // 0xc070a4: DecompressPointer r2
    //     0xc070a4: add             x2, x2, HEAP, lsl #32
    // 0xc070a8: LoadField: r1 = r2->field_27
    //     0xc070a8: ldur            w1, [x2, #0x27]
    // 0xc070ac: DecompressPointer r1
    //     0xc070ac: add             x1, x1, HEAP, lsl #32
    // 0xc070b0: LoadField: r2 = r1->field_7
    //     0xc070b0: ldur            w2, [x1, #7]
    // 0xc070b4: DecompressPointer r2
    //     0xc070b4: add             x2, x2, HEAP, lsl #32
    // 0xc070b8: LoadField: r1 = r2->field_7
    //     0xc070b8: ldur            w1, [x2, #7]
    // 0xc070bc: DecompressPointer r1
    //     0xc070bc: add             x1, x1, HEAP, lsl #32
    // 0xc070c0: r2 = LoadInt32Instr(r1)
    //     0xc070c0: sbfx            x2, x1, #1, #0x1f
    // 0xc070c4: stur            x2, [fp, #-8]
    // 0xc070c8: r0 = TextPosition()
    //     0xc070c8: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xc070cc: mov             x1, x0
    // 0xc070d0: ldur            x0, [fp, #-8]
    // 0xc070d4: StoreField: r1->field_7 = r0
    //     0xc070d4: stur            x0, [x1, #7]
    // 0xc070d8: r0 = Instance_TextAffinity
    //     0xc070d8: ldr             x0, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xc070dc: StoreField: r1->field_f = r0
    //     0xc070dc: stur            w0, [x1, #0xf]
    // 0xc070e0: ldr             x16, [fp, #0x18]
    // 0xc070e4: stp             x1, x16, [SP]
    // 0xc070e8: r0 = bringIntoView()
    //     0xc070e8: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0xc070ec: b               #0xc07104
    // 0xc070f0: ldr             x16, [fp, #0x18]
    // 0xc070f4: r30 = Instance_TextPosition
    //     0xc070f4: add             lr, PP, #0x2b, lsl #12  ; [pp+0x2bc10] Obj!TextPosition@c39f21
    //     0xc070f8: ldr             lr, [lr, #0xc10]
    // 0xc070fc: stp             lr, x16, [SP]
    // 0xc07100: r0 = bringIntoView()
    //     0xc07100: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0xc07104: r0 = Null
    //     0xc07104: mov             x0, NULL
    // 0xc07108: LeaveFrame
    //     0xc07108: mov             SP, fp
    //     0xc0710c: ldp             fp, lr, [SP], #0x10
    // 0xc07110: ret
    //     0xc07110: ret             
    // 0xc07114: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07114: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07118: b               #0xc0707c
    // 0xc0711c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc0711c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _scroll(dynamic) {
    // ** addr: 0xc07120, size: 0x18
    // 0xc07120: r4 = 7
    //     0xc07120: movz            x4, #0x7
    // 0xc07124: r1 = Function '_scroll@244183791':.
    //     0xc07124: add             x17, PP, #0x47, lsl #12  ; [pp+0x47370] AnonymousClosure: (0xc07138), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scroll (0xc07184)
    //     0xc07128: ldr             x1, [x17, #0x370]
    // 0xc0712c: r24 = BuildNonGenericMethodExtractorStub
    //     0xc0712c: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07130: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07130: ldur            x0, [x24, #0x17]
    // 0xc07134: br              x0
  }
  [closure] void _scroll(dynamic, ScrollIntent) {
    // ** addr: 0xc07138, size: 0x4c
    // 0xc07138: EnterFrame
    //     0xc07138: stp             fp, lr, [SP, #-0x10]!
    //     0xc0713c: mov             fp, SP
    // 0xc07140: AllocStack(0x10)
    //     0xc07140: sub             SP, SP, #0x10
    // 0xc07144: SetupParameters()
    //     0xc07144: ldr             x0, [fp, #0x18]
    //     0xc07148: ldur            w1, [x0, #0x17]
    //     0xc0714c: add             x1, x1, HEAP, lsl #32
    // 0xc07150: CheckStackOverflow
    //     0xc07150: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07154: cmp             SP, x16
    //     0xc07158: b.ls            #0xc0717c
    // 0xc0715c: LoadField: r0 = r1->field_f
    //     0xc0715c: ldur            w0, [x1, #0xf]
    // 0xc07160: DecompressPointer r0
    //     0xc07160: add             x0, x0, HEAP, lsl #32
    // 0xc07164: ldr             x16, [fp, #0x10]
    // 0xc07168: stp             x16, x0, [SP]
    // 0xc0716c: r0 = _scroll()
    //     0xc0716c: bl              #0xc07184  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scroll
    // 0xc07170: LeaveFrame
    //     0xc07170: mov             SP, fp
    //     0xc07174: ldp             fp, lr, [SP], #0x10
    // 0xc07178: ret
    //     0xc07178: ret             
    // 0xc0717c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc0717c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07180: b               #0xc0715c
  }
  _ _scroll(/* No info */) {
    // ** addr: 0xc07184, size: 0x25c
    // 0xc07184: EnterFrame
    //     0xc07184: stp             fp, lr, [SP, #-0x10]!
    //     0xc07188: mov             fp, SP
    // 0xc0718c: AllocStack(0x28)
    //     0xc0718c: sub             SP, SP, #0x28
    // 0xc07190: CheckStackOverflow
    //     0xc07190: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07194: cmp             SP, x16
    //     0xc07198: b.ls            #0xc073b8
    // 0xc0719c: ldr             x0, [fp, #0x10]
    // 0xc071a0: LoadField: r1 = r0->field_b
    //     0xc071a0: ldur            w1, [x0, #0xb]
    // 0xc071a4: DecompressPointer r1
    //     0xc071a4: add             x1, x1, HEAP, lsl #32
    // 0xc071a8: r16 = Instance_ScrollIncrementType
    //     0xc071a8: add             x16, PP, #0x39, lsl #12  ; [pp+0x397b8] Obj!ScrollIncrementType@c42311
    //     0xc071ac: ldr             x16, [x16, #0x7b8]
    // 0xc071b0: cmp             w1, w16
    // 0xc071b4: b.eq            #0xc071c8
    // 0xc071b8: r0 = Null
    //     0xc071b8: mov             x0, NULL
    // 0xc071bc: LeaveFrame
    //     0xc071bc: mov             SP, fp
    //     0xc071c0: ldp             fp, lr, [SP], #0x10
    // 0xc071c4: ret
    //     0xc071c4: ret             
    // 0xc071c8: ldr             x1, [fp, #0x18]
    // 0xc071cc: str             x1, [SP]
    // 0xc071d0: r0 = _scrollController()
    //     0xc071d0: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0xc071d4: LoadField: r1 = r0->field_3b
    //     0xc071d4: ldur            w1, [x0, #0x3b]
    // 0xc071d8: DecompressPointer r1
    //     0xc071d8: add             x1, x1, HEAP, lsl #32
    // 0xc071dc: str             x1, [SP]
    // 0xc071e0: r0 = single()
    //     0xc071e0: bl              #0x5a9fe4  ; [dart:core] _GrowableList::single
    // 0xc071e4: mov             x1, x0
    // 0xc071e8: ldr             x0, [fp, #0x18]
    // 0xc071ec: stur            x1, [fp, #-8]
    // 0xc071f0: LoadField: r2 = r0->field_b
    //     0xc071f0: ldur            w2, [x0, #0xb]
    // 0xc071f4: DecompressPointer r2
    //     0xc071f4: add             x2, x2, HEAP, lsl #32
    // 0xc071f8: cmp             w2, NULL
    // 0xc071fc: b.eq            #0xc073c0
    // 0xc07200: LoadField: r3 = r2->field_73
    //     0xc07200: ldur            x3, [x2, #0x73]
    // 0xc07204: cmp             x3, #1
    // 0xc07208: b.ne            #0xc07248
    // 0xc0720c: str             x0, [SP]
    // 0xc07210: r0 = _scrollController()
    //     0xc07210: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0xc07214: ldur            x1, [fp, #-8]
    // 0xc07218: LoadField: r2 = r1->field_37
    //     0xc07218: ldur            w2, [x1, #0x37]
    // 0xc0721c: DecompressPointer r2
    //     0xc0721c: add             x2, x2, HEAP, lsl #32
    // 0xc07220: cmp             w2, NULL
    // 0xc07224: b.eq            #0xc073c4
    // 0xc07228: LoadField: d0 = r2->field_7
    //     0xc07228: ldur            d0, [x2, #7]
    // 0xc0722c: str             x0, [SP, #8]
    // 0xc07230: str             d0, [SP]
    // 0xc07234: r0 = jumpTo()
    //     0xc07234: bl              #0x5d453c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0xc07238: r0 = Null
    //     0xc07238: mov             x0, NULL
    // 0xc0723c: LeaveFrame
    //     0xc0723c: mov             SP, fp
    //     0xc07240: ldp             fp, lr, [SP], #0x10
    // 0xc07244: ret
    //     0xc07244: ret             
    // 0xc07248: d0 = 0.000000
    //     0xc07248: eor             v0.16b, v0.16b, v0.16b
    // 0xc0724c: LoadField: r2 = r1->field_37
    //     0xc0724c: ldur            w2, [x1, #0x37]
    // 0xc07250: DecompressPointer r2
    //     0xc07250: add             x2, x2, HEAP, lsl #32
    // 0xc07254: cmp             w2, NULL
    // 0xc07258: b.eq            #0xc073c8
    // 0xc0725c: LoadField: d1 = r2->field_7
    //     0xc0725c: ldur            d1, [x2, #7]
    // 0xc07260: fcmp            d1, d0
    // 0xc07264: b.vs            #0xc0729c
    // 0xc07268: b.ne            #0xc0729c
    // 0xc0726c: LoadField: r2 = r1->field_33
    //     0xc0726c: ldur            w2, [x1, #0x33]
    // 0xc07270: DecompressPointer r2
    //     0xc07270: add             x2, x2, HEAP, lsl #32
    // 0xc07274: cmp             w2, NULL
    // 0xc07278: b.eq            #0xc073cc
    // 0xc0727c: LoadField: d1 = r2->field_7
    //     0xc0727c: ldur            d1, [x2, #7]
    // 0xc07280: fcmp            d1, d0
    // 0xc07284: b.vs            #0xc0729c
    // 0xc07288: b.ne            #0xc0729c
    // 0xc0728c: r0 = Null
    //     0xc0728c: mov             x0, NULL
    // 0xc07290: LeaveFrame
    //     0xc07290: mov             SP, fp
    //     0xc07294: ldp             fp, lr, [SP], #0x10
    // 0xc07298: ret
    //     0xc07298: ret             
    // 0xc0729c: LoadField: r2 = r0->field_43
    //     0xc0729c: ldur            w2, [x0, #0x43]
    // 0xc072a0: DecompressPointer r2
    //     0xc072a0: add             x2, x2, HEAP, lsl #32
    // 0xc072a4: str             x2, [SP]
    // 0xc072a8: r0 = currentState()
    //     0xc072a8: bl              #0x5b0160  ; [package:flutter/src/widgets/framework.dart] GlobalKey::currentState
    // 0xc072ac: mov             x3, x0
    // 0xc072b0: r2 = Null
    //     0xc072b0: mov             x2, NULL
    // 0xc072b4: r1 = Null
    //     0xc072b4: mov             x1, NULL
    // 0xc072b8: stur            x3, [fp, #-0x10]
    // 0xc072bc: r4 = LoadClassIdInstr(r0)
    //     0xc072bc: ldur            x4, [x0, #-1]
    //     0xc072c0: ubfx            x4, x4, #0xc, #0x14
    // 0xc072c4: sub             x4, x4, #0xc39
    // 0xc072c8: cmp             x4, #1
    // 0xc072cc: b.ls            #0xc072e4
    // 0xc072d0: r8 = ScrollableState?
    //     0xc072d0: add             x8, PP, #0x47, lsl #12  ; [pp+0x47358] Type: ScrollableState?
    //     0xc072d4: ldr             x8, [x8, #0x358]
    // 0xc072d8: r3 = Null
    //     0xc072d8: add             x3, PP, #0x47, lsl #12  ; [pp+0x47378] Null
    //     0xc072dc: ldr             x3, [x3, #0x378]
    // 0xc072e0: r0 = DefaultNullableTypeTest()
    //     0xc072e0: bl              #0xc5cf30  ; DefaultNullableTypeTestStub
    // 0xc072e4: ldur            x0, [fp, #-0x10]
    // 0xc072e8: cmp             w0, NULL
    // 0xc072ec: b.eq            #0xc073d0
    // 0xc072f0: ldr             x16, [fp, #0x10]
    // 0xc072f4: stp             x16, x0, [SP]
    // 0xc072f8: r0 = getDirectionalIncrement()
    //     0xc072f8: bl              #0xa7f0e0  ; [package:flutter/src/widgets/scrollable_helpers.dart] ScrollAction::getDirectionalIncrement
    // 0xc072fc: mov             x1, x0
    // 0xc07300: ldur            x0, [fp, #-8]
    // 0xc07304: LoadField: r2 = r0->field_43
    //     0xc07304: ldur            w2, [x0, #0x43]
    // 0xc07308: DecompressPointer r2
    //     0xc07308: add             x2, x2, HEAP, lsl #32
    // 0xc0730c: cmp             w2, NULL
    // 0xc07310: b.eq            #0xc073d4
    // 0xc07314: LoadField: d0 = r1->field_7
    //     0xc07314: ldur            d0, [x1, #7]
    // 0xc07318: LoadField: d1 = r2->field_7
    //     0xc07318: ldur            d1, [x2, #7]
    // 0xc0731c: fadd            d2, d1, d0
    // 0xc07320: LoadField: r1 = r0->field_33
    //     0xc07320: ldur            w1, [x0, #0x33]
    // 0xc07324: DecompressPointer r1
    //     0xc07324: add             x1, x1, HEAP, lsl #32
    // 0xc07328: cmp             w1, NULL
    // 0xc0732c: b.eq            #0xc073d8
    // 0xc07330: LoadField: r2 = r0->field_37
    //     0xc07330: ldur            w2, [x0, #0x37]
    // 0xc07334: DecompressPointer r2
    //     0xc07334: add             x2, x2, HEAP, lsl #32
    // 0xc07338: cmp             w2, NULL
    // 0xc0733c: b.eq            #0xc073dc
    // 0xc07340: LoadField: d0 = r1->field_7
    //     0xc07340: ldur            d0, [x1, #7]
    // 0xc07344: fcmp            d2, d0
    // 0xc07348: b.vs            #0xc07350
    // 0xc0734c: b.lt            #0xc0736c
    // 0xc07350: LoadField: d0 = r2->field_7
    //     0xc07350: ldur            d0, [x2, #7]
    // 0xc07354: fcmp            d2, d0
    // 0xc07358: b.vs            #0xc07360
    // 0xc0735c: b.gt            #0xc0736c
    // 0xc07360: fcmp            d2, d2
    // 0xc07364: b.vs            #0xc0736c
    // 0xc07368: mov             v0.16b, v2.16b
    // 0xc0736c: stur            d0, [fp, #-0x18]
    // 0xc07370: fcmp            d0, d1
    // 0xc07374: b.vs            #0xc0738c
    // 0xc07378: b.ne            #0xc0738c
    // 0xc0737c: r0 = Null
    //     0xc0737c: mov             x0, NULL
    // 0xc07380: LeaveFrame
    //     0xc07380: mov             SP, fp
    //     0xc07384: ldp             fp, lr, [SP], #0x10
    // 0xc07388: ret
    //     0xc07388: ret             
    // 0xc0738c: ldr             x16, [fp, #0x18]
    // 0xc07390: str             x16, [SP]
    // 0xc07394: r0 = _scrollController()
    //     0xc07394: bl              #0x5d4698  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_scrollController
    // 0xc07398: str             x0, [SP, #8]
    // 0xc0739c: ldur            d0, [fp, #-0x18]
    // 0xc073a0: str             d0, [SP]
    // 0xc073a4: r0 = jumpTo()
    //     0xc073a4: bl              #0x5d453c  ; [package:flutter/src/widgets/scroll_controller.dart] ScrollController::jumpTo
    // 0xc073a8: r0 = Null
    //     0xc073a8: mov             x0, NULL
    // 0xc073ac: LeaveFrame
    //     0xc073ac: mov             SP, fp
    //     0xc073b0: ldp             fp, lr, [SP], #0x10
    // 0xc073b4: ret
    //     0xc073b4: ret             
    // 0xc073b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc073b8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc073bc: b               #0xc0719c
    // 0xc073c0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc073c0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc073c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc073c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc073c8: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc073c8: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc073cc: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc073cc: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc073d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc073d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc073d4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc073d4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc073d8: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc073d8: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc073dc: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc073dc: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  dynamic _extendSelectionByPage(dynamic) {
    // ** addr: 0xc073e0, size: 0x18
    // 0xc073e0: r4 = 7
    //     0xc073e0: movz            x4, #0x7
    // 0xc073e4: r1 = Function '_extendSelectionByPage@244183791':.
    //     0xc073e4: add             x17, PP, #0x47, lsl #12  ; [pp+0x47350] AnonymousClosure: (0xc073f8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_extendSelectionByPage (0xc07444)
    //     0xc073e8: ldr             x1, [x17, #0x350]
    // 0xc073ec: r24 = BuildNonGenericMethodExtractorStub
    //     0xc073ec: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc073f0: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc073f0: ldur            x0, [x24, #0x17]
    // 0xc073f4: br              x0
  }
  [closure] void _extendSelectionByPage(dynamic, ExtendSelectionByPageIntent) {
    // ** addr: 0xc073f8, size: 0x4c
    // 0xc073f8: EnterFrame
    //     0xc073f8: stp             fp, lr, [SP, #-0x10]!
    //     0xc073fc: mov             fp, SP
    // 0xc07400: AllocStack(0x10)
    //     0xc07400: sub             SP, SP, #0x10
    // 0xc07404: SetupParameters()
    //     0xc07404: ldr             x0, [fp, #0x18]
    //     0xc07408: ldur            w1, [x0, #0x17]
    //     0xc0740c: add             x1, x1, HEAP, lsl #32
    // 0xc07410: CheckStackOverflow
    //     0xc07410: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07414: cmp             SP, x16
    //     0xc07418: b.ls            #0xc0743c
    // 0xc0741c: LoadField: r0 = r1->field_f
    //     0xc0741c: ldur            w0, [x1, #0xf]
    // 0xc07420: DecompressPointer r0
    //     0xc07420: add             x0, x0, HEAP, lsl #32
    // 0xc07424: ldr             x16, [fp, #0x10]
    // 0xc07428: stp             x16, x0, [SP]
    // 0xc0742c: r0 = _extendSelectionByPage()
    //     0xc0742c: bl              #0xc07444  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_extendSelectionByPage
    // 0xc07430: LeaveFrame
    //     0xc07430: mov             SP, fp
    //     0xc07434: ldp             fp, lr, [SP], #0x10
    // 0xc07438: ret
    //     0xc07438: ret             
    // 0xc0743c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc0743c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07440: b               #0xc0741c
  }
  _ _extendSelectionByPage(/* No info */) {
    // ** addr: 0xc07444, size: 0x150
    // 0xc07444: EnterFrame
    //     0xc07444: stp             fp, lr, [SP, #-0x10]!
    //     0xc07448: mov             fp, SP
    // 0xc0744c: AllocStack(0x18)
    //     0xc0744c: sub             SP, SP, #0x18
    // 0xc07450: CheckStackOverflow
    //     0xc07450: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07454: cmp             SP, x16
    //     0xc07458: b.ls            #0xc07580
    // 0xc0745c: ldr             x0, [fp, #0x18]
    // 0xc07460: LoadField: r1 = r0->field_b
    //     0xc07460: ldur            w1, [x0, #0xb]
    // 0xc07464: DecompressPointer r1
    //     0xc07464: add             x1, x1, HEAP, lsl #32
    // 0xc07468: cmp             w1, NULL
    // 0xc0746c: b.eq            #0xc07588
    // 0xc07470: LoadField: r2 = r1->field_73
    //     0xc07470: ldur            x2, [x1, #0x73]
    // 0xc07474: cmp             x2, #1
    // 0xc07478: b.ne            #0xc0748c
    // 0xc0747c: r0 = Null
    //     0xc0747c: mov             x0, NULL
    // 0xc07480: LeaveFrame
    //     0xc07480: mov             SP, fp
    //     0xc07484: ldp             fp, lr, [SP], #0x10
    // 0xc07488: ret
    //     0xc07488: ret             
    // 0xc0748c: ldr             x2, [fp, #0x10]
    // 0xc07490: mov             x1, x0
    // 0xc07494: LoadField: r0 = r1->field_a7
    //     0xc07494: ldur            w0, [x1, #0xa7]
    // 0xc07498: DecompressPointer r0
    //     0xc07498: add             x0, x0, HEAP, lsl #32
    // 0xc0749c: r16 = Sentinel
    //     0xc0749c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc074a0: cmp             w0, w16
    // 0xc074a4: b.ne            #0xc074b0
    // 0xc074a8: r2 = renderEditable
    //     0xc074a8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xc074ac: r0 = InitLateFinalInstanceField()
    //     0xc074ac: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xc074b0: mov             x1, x0
    // 0xc074b4: ldr             x0, [fp, #0x18]
    // 0xc074b8: stur            x1, [fp, #-8]
    // 0xc074bc: LoadField: r2 = r0->field_b
    //     0xc074bc: ldur            w2, [x0, #0xb]
    // 0xc074c0: DecompressPointer r2
    //     0xc074c0: add             x2, x2, HEAP, lsl #32
    // 0xc074c4: cmp             w2, NULL
    // 0xc074c8: b.eq            #0xc0758c
    // 0xc074cc: LoadField: r3 = r2->field_b
    //     0xc074cc: ldur            w3, [x2, #0xb]
    // 0xc074d0: DecompressPointer r3
    //     0xc074d0: add             x3, x3, HEAP, lsl #32
    // 0xc074d4: LoadField: r2 = r3->field_27
    //     0xc074d4: ldur            w2, [x3, #0x27]
    // 0xc074d8: DecompressPointer r2
    //     0xc074d8: add             x2, x2, HEAP, lsl #32
    // 0xc074dc: LoadField: r3 = r2->field_b
    //     0xc074dc: ldur            w3, [x2, #0xb]
    // 0xc074e0: DecompressPointer r3
    //     0xc074e0: add             x3, x3, HEAP, lsl #32
    // 0xc074e4: str             x3, [SP]
    // 0xc074e8: r0 = extent()
    //     0xc074e8: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0xc074ec: ldur            x16, [fp, #-8]
    // 0xc074f0: stp             x0, x16, [SP]
    // 0xc074f4: r0 = getLocalRectForCaret()
    //     0xc074f4: bl              #0x5d0b9c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::getLocalRectForCaret
    // 0xc074f8: ldr             x0, [fp, #0x18]
    // 0xc074fc: LoadField: r1 = r0->field_43
    //     0xc074fc: ldur            w1, [x0, #0x43]
    // 0xc07500: DecompressPointer r1
    //     0xc07500: add             x1, x1, HEAP, lsl #32
    // 0xc07504: str             x1, [SP]
    // 0xc07508: r0 = currentState()
    //     0xc07508: bl              #0x5b0160  ; [package:flutter/src/widgets/framework.dart] GlobalKey::currentState
    // 0xc0750c: mov             x3, x0
    // 0xc07510: r2 = Null
    //     0xc07510: mov             x2, NULL
    // 0xc07514: r1 = Null
    //     0xc07514: mov             x1, NULL
    // 0xc07518: stur            x3, [fp, #-8]
    // 0xc0751c: r4 = LoadClassIdInstr(r0)
    //     0xc0751c: ldur            x4, [x0, #-1]
    //     0xc07520: ubfx            x4, x4, #0xc, #0x14
    // 0xc07524: sub             x4, x4, #0xc39
    // 0xc07528: cmp             x4, #1
    // 0xc0752c: b.ls            #0xc07544
    // 0xc07530: r8 = ScrollableState?
    //     0xc07530: add             x8, PP, #0x47, lsl #12  ; [pp+0x47358] Type: ScrollableState?
    //     0xc07534: ldr             x8, [x8, #0x358]
    // 0xc07538: r3 = Null
    //     0xc07538: add             x3, PP, #0x47, lsl #12  ; [pp+0x47360] Null
    //     0xc0753c: ldr             x3, [x3, #0x360]
    // 0xc07540: r0 = DefaultNullableTypeTest()
    //     0xc07540: bl              #0xc5cf30  ; DefaultNullableTypeTestStub
    // 0xc07544: ldur            x0, [fp, #-8]
    // 0xc07548: cmp             w0, NULL
    // 0xc0754c: b.eq            #0xc07590
    // 0xc07550: ldr             x0, [fp, #0x10]
    // 0xc07554: r1 = LoadClassIdInstr(r0)
    //     0xc07554: ldur            x1, [x0, #-1]
    //     0xc07558: ubfx            x1, x1, #0xc, #0x14
    // 0xc0755c: str             x0, [SP]
    // 0xc07560: mov             x0, x1
    // 0xc07564: r0 = GDT[cid_x0 + 0xd181]()
    //     0xc07564: movz            x17, #0xd181
    //     0xc07568: add             lr, x0, x17
    //     0xc0756c: ldr             lr, [x21, lr, lsl #3]
    //     0xc07570: blr             lr
    // 0xc07574: r0 = "Attempt to execute code removed by Dart AOT compiler (TFA)"
    //     0xc07574: ldr             x0, [PP, #0x7f8]  ; [pp+0x7f8] "Attempt to execute code removed by Dart AOT compiler (TFA)"
    // 0xc07578: r0 = Throw()
    //     0xc07578: bl              #0xc5d2b8  ; ThrowStub
    // 0xc0757c: brk             #0
    // 0xc07580: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07580: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07584: b               #0xc0745c
    // 0xc07588: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07588: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc0758c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc0758c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc07590: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07590: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _updateSelection(dynamic) {
    // ** addr: 0xc07594, size: 0x18
    // 0xc07594: r4 = 7
    //     0xc07594: movz            x4, #0x7
    // 0xc07598: r1 = Function '_updateSelection@244183791':.
    //     0xc07598: add             x17, PP, #0x47, lsl #12  ; [pp+0x47348] AnonymousClosure: (0xc075ac), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelection (0xc075f8)
    //     0xc0759c: ldr             x1, [x17, #0x348]
    // 0xc075a0: r24 = BuildNonGenericMethodExtractorStub
    //     0xc075a0: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc075a4: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc075a4: ldur            x0, [x24, #0x17]
    // 0xc075a8: br              x0
  }
  [closure] void _updateSelection(dynamic, UpdateSelectionIntent) {
    // ** addr: 0xc075ac, size: 0x4c
    // 0xc075ac: EnterFrame
    //     0xc075ac: stp             fp, lr, [SP, #-0x10]!
    //     0xc075b0: mov             fp, SP
    // 0xc075b4: AllocStack(0x10)
    //     0xc075b4: sub             SP, SP, #0x10
    // 0xc075b8: SetupParameters()
    //     0xc075b8: ldr             x0, [fp, #0x18]
    //     0xc075bc: ldur            w1, [x0, #0x17]
    //     0xc075c0: add             x1, x1, HEAP, lsl #32
    // 0xc075c4: CheckStackOverflow
    //     0xc075c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc075c8: cmp             SP, x16
    //     0xc075cc: b.ls            #0xc075f0
    // 0xc075d0: LoadField: r0 = r1->field_f
    //     0xc075d0: ldur            w0, [x1, #0xf]
    // 0xc075d4: DecompressPointer r0
    //     0xc075d4: add             x0, x0, HEAP, lsl #32
    // 0xc075d8: ldr             x16, [fp, #0x10]
    // 0xc075dc: stp             x16, x0, [SP]
    // 0xc075e0: r0 = _updateSelection()
    //     0xc075e0: bl              #0xc075f8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_updateSelection
    // 0xc075e4: LeaveFrame
    //     0xc075e4: mov             SP, fp
    //     0xc075e8: ldp             fp, lr, [SP], #0x10
    // 0xc075ec: ret
    //     0xc075ec: ret             
    // 0xc075f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc075f0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc075f4: b               #0xc075d0
  }
  _ _updateSelection(/* No info */) {
    // ** addr: 0xc075f8, size: 0x84
    // 0xc075f8: EnterFrame
    //     0xc075f8: stp             fp, lr, [SP, #-0x10]!
    //     0xc075fc: mov             fp, SP
    // 0xc07600: AllocStack(0x20)
    //     0xc07600: sub             SP, SP, #0x20
    // 0xc07604: CheckStackOverflow
    //     0xc07604: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07608: cmp             SP, x16
    //     0xc0760c: b.ls            #0xc07674
    // 0xc07610: ldr             x0, [fp, #0x10]
    // 0xc07614: LoadField: r1 = r0->field_b
    //     0xc07614: ldur            w1, [x0, #0xb]
    // 0xc07618: DecompressPointer r1
    //     0xc07618: add             x1, x1, HEAP, lsl #32
    // 0xc0761c: stur            x1, [fp, #-8]
    // 0xc07620: str             x1, [SP]
    // 0xc07624: r0 = extent()
    //     0xc07624: bl              #0x5cb8f4  ; [package:flutter/src/services/text_editing.dart] TextSelection::extent
    // 0xc07628: ldr             x16, [fp, #0x18]
    // 0xc0762c: stp             x0, x16, [SP]
    // 0xc07630: r0 = bringIntoView()
    //     0xc07630: bl              #0x5d4488  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::bringIntoView
    // 0xc07634: ldr             x0, [fp, #0x10]
    // 0xc07638: LoadField: r1 = r0->field_7
    //     0xc07638: ldur            w1, [x0, #7]
    // 0xc0763c: DecompressPointer r1
    //     0xc0763c: add             x1, x1, HEAP, lsl #32
    // 0xc07640: ldur            x16, [fp, #-8]
    // 0xc07644: stp             x16, x1, [SP]
    // 0xc07648: r4 = const [0, 0x2, 0x2, 0x1, selection, 0x1, null]
    //     0xc07648: ldr             x4, [PP, #0x6330]  ; [pp+0x6330] List(7) [0, 0x2, 0x2, 0x1, "selection", 0x1, Null]
    // 0xc0764c: r0 = copyWith()
    //     0xc0764c: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0xc07650: ldr             x16, [fp, #0x18]
    // 0xc07654: stp             x0, x16, [SP, #8]
    // 0xc07658: r16 = Instance_SelectionChangedCause
    //     0xc07658: ldr             x16, [PP, #0x61c8]  ; [pp+0x61c8] Obj!SelectionChangedCause@c42fb1
    // 0xc0765c: str             x16, [SP]
    // 0xc07660: r0 = userUpdateTextEditingValue()
    //     0xc07660: bl              #0x5d3b20  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::userUpdateTextEditingValue
    // 0xc07664: r0 = Null
    //     0xc07664: mov             x0, NULL
    // 0xc07668: LeaveFrame
    //     0xc07668: mov             SP, fp
    //     0xc0766c: ldp             fp, lr, [SP], #0x10
    // 0xc07670: ret
    //     0xc07670: ret             
    // 0xc07674: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07674: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07678: b               #0xc07610
  }
  dynamic _hideToolbarIfVisible(dynamic) {
    // ** addr: 0xc0767c, size: 0x18
    // 0xc0767c: r4 = 7
    //     0xc0767c: movz            x4, #0x7
    // 0xc07680: r1 = Function '_hideToolbarIfVisible@244183791':.
    //     0xc07680: add             x17, PP, #0x47, lsl #12  ; [pp+0x47340] AnonymousClosure: (0xc07694), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hideToolbarIfVisible (0xc076e0)
    //     0xc07684: ldr             x1, [x17, #0x340]
    // 0xc07688: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07688: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc0768c: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc0768c: ldur            x0, [x24, #0x17]
    // 0xc07690: br              x0
  }
  [closure] Object? _hideToolbarIfVisible(dynamic, DismissIntent) {
    // ** addr: 0xc07694, size: 0x4c
    // 0xc07694: EnterFrame
    //     0xc07694: stp             fp, lr, [SP, #-0x10]!
    //     0xc07698: mov             fp, SP
    // 0xc0769c: AllocStack(0x10)
    //     0xc0769c: sub             SP, SP, #0x10
    // 0xc076a0: SetupParameters()
    //     0xc076a0: ldr             x0, [fp, #0x18]
    //     0xc076a4: ldur            w1, [x0, #0x17]
    //     0xc076a8: add             x1, x1, HEAP, lsl #32
    // 0xc076ac: CheckStackOverflow
    //     0xc076ac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc076b0: cmp             SP, x16
    //     0xc076b4: b.ls            #0xc076d8
    // 0xc076b8: LoadField: r0 = r1->field_f
    //     0xc076b8: ldur            w0, [x1, #0xf]
    // 0xc076bc: DecompressPointer r0
    //     0xc076bc: add             x0, x0, HEAP, lsl #32
    // 0xc076c0: ldr             x16, [fp, #0x10]
    // 0xc076c4: stp             x16, x0, [SP]
    // 0xc076c8: r0 = _hideToolbarIfVisible()
    //     0xc076c8: bl              #0xc076e0  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_hideToolbarIfVisible
    // 0xc076cc: LeaveFrame
    //     0xc076cc: mov             SP, fp
    //     0xc076d0: ldp             fp, lr, [SP], #0x10
    // 0xc076d4: ret
    //     0xc076d4: ret             
    // 0xc076d8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc076d8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc076dc: b               #0xc076b8
  }
  _ _hideToolbarIfVisible(/* No info */) {
    // ** addr: 0xc076e0, size: 0xd0
    // 0xc076e0: EnterFrame
    //     0xc076e0: stp             fp, lr, [SP, #-0x10]!
    //     0xc076e4: mov             fp, SP
    // 0xc076e8: AllocStack(0x18)
    //     0xc076e8: sub             SP, SP, #0x18
    // 0xc076ec: CheckStackOverflow
    //     0xc076ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc076f0: cmp             SP, x16
    //     0xc076f4: b.ls            #0xc0779c
    // 0xc076f8: ldr             x0, [fp, #0x18]
    // 0xc076fc: LoadField: r1 = r0->field_3f
    //     0xc076fc: ldur            w1, [x0, #0x3f]
    // 0xc07700: DecompressPointer r1
    //     0xc07700: add             x1, x1, HEAP, lsl #32
    // 0xc07704: cmp             w1, NULL
    // 0xc07708: b.ne            #0xc07714
    // 0xc0770c: r0 = Null
    //     0xc0770c: mov             x0, NULL
    // 0xc07710: b               #0xc07730
    // 0xc07714: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xc07714: ldur            w2, [x1, #0x17]
    // 0xc07718: DecompressPointer r2
    //     0xc07718: add             x2, x2, HEAP, lsl #32
    // 0xc0771c: r16 = Sentinel
    //     0xc0771c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc07720: cmp             w2, w16
    // 0xc07724: b.eq            #0xc077a4
    // 0xc07728: str             x2, [SP]
    // 0xc0772c: r0 = toolbarIsVisible()
    //     0xc0772c: bl              #0x5d888c  ; [package:flutter/src/widgets/text_selection.dart] SelectionOverlay::toolbarIsVisible
    // 0xc07730: cmp             w0, NULL
    // 0xc07734: b.eq            #0xc07760
    // 0xc07738: tbnz            w0, #4, #0xc07760
    // 0xc0773c: ldr             x16, [fp, #0x18]
    // 0xc07740: r30 = false
    //     0xc07740: add             lr, NULL, #0x30  ; false
    // 0xc07744: stp             lr, x16, [SP]
    // 0xc07748: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0xc07748: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0xc0774c: r0 = hideToolbar()
    //     0xc0774c: bl              #0x5e3484  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::hideToolbar
    // 0xc07750: r0 = Null
    //     0xc07750: mov             x0, NULL
    // 0xc07754: LeaveFrame
    //     0xc07754: mov             SP, fp
    //     0xc07758: ldp             fp, lr, [SP], #0x10
    // 0xc0775c: ret
    //     0xc0775c: ret             
    // 0xc07760: ldr             x0, [fp, #0x18]
    // 0xc07764: LoadField: r1 = r0->field_f
    //     0xc07764: ldur            w1, [x0, #0xf]
    // 0xc07768: DecompressPointer r1
    //     0xc07768: add             x1, x1, HEAP, lsl #32
    // 0xc0776c: cmp             w1, NULL
    // 0xc07770: b.eq            #0xc077ac
    // 0xc07774: r16 = <DismissIntent>
    //     0xc07774: add             x16, PP, #0x25, lsl #12  ; [pp+0x255d0] TypeArguments: <DismissIntent>
    //     0xc07778: ldr             x16, [x16, #0x5d0]
    // 0xc0777c: stp             x1, x16, [SP, #8]
    // 0xc07780: ldr             x16, [fp, #0x10]
    // 0xc07784: str             x16, [SP]
    // 0xc07788: r4 = const [0x1, 0x2, 0x2, 0x2, null]
    //     0xc07788: ldr             x4, [PP, #0x50]  ; [pp+0x50] List(5) [0x1, 0x2, 0x2, 0x2, Null]
    // 0xc0778c: r0 = invoke()
    //     0xc0778c: bl              #0x5e4a84  ; [package:flutter/src/widgets/actions.dart] Actions::invoke
    // 0xc07790: LeaveFrame
    //     0xc07790: mov             SP, fp
    //     0xc07794: ldp             fp, lr, [SP], #0x10
    // 0xc07798: ret
    //     0xc07798: ret             
    // 0xc0779c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc0779c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc077a0: b               #0xc076f8
    // 0xc077a4: r9 = _selectionOverlay
    //     0xc077a4: ldr             x9, [PP, #0x57c8]  ; [pp+0x57c8] Field <TextSelectionOverlay._selectionOverlay@324111801>: late final (offset: 0x18)
    // 0xc077a8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xc077a8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xc077ac: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc077ac: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _documentBoundary(dynamic) {
    // ** addr: 0xc077b0, size: 0x18
    // 0xc077b0: r4 = 7
    //     0xc077b0: movz            x4, #0x7
    // 0xc077b4: r1 = Function '_documentBoundary@244183791':.
    //     0xc077b4: add             x17, PP, #0x47, lsl #12  ; [pp+0x473a8] AnonymousClosure: (0xc077c8), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_documentBoundary (0xc07810)
    //     0xc077b8: ldr             x1, [x17, #0x3a8]
    // 0xc077bc: r24 = BuildNonGenericMethodExtractorStub
    //     0xc077bc: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc077c0: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc077c0: ldur            x0, [x24, #0x17]
    // 0xc077c4: br              x0
  }
  [closure] TextBoundary _documentBoundary(dynamic) {
    // ** addr: 0xc077c8, size: 0x48
    // 0xc077c8: EnterFrame
    //     0xc077c8: stp             fp, lr, [SP, #-0x10]!
    //     0xc077cc: mov             fp, SP
    // 0xc077d0: AllocStack(0x8)
    //     0xc077d0: sub             SP, SP, #8
    // 0xc077d4: SetupParameters()
    //     0xc077d4: ldr             x0, [fp, #0x10]
    //     0xc077d8: ldur            w1, [x0, #0x17]
    //     0xc077dc: add             x1, x1, HEAP, lsl #32
    // 0xc077e0: CheckStackOverflow
    //     0xc077e0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc077e4: cmp             SP, x16
    //     0xc077e8: b.ls            #0xc07808
    // 0xc077ec: LoadField: r0 = r1->field_f
    //     0xc077ec: ldur            w0, [x1, #0xf]
    // 0xc077f0: DecompressPointer r0
    //     0xc077f0: add             x0, x0, HEAP, lsl #32
    // 0xc077f4: str             x0, [SP]
    // 0xc077f8: r0 = _documentBoundary()
    //     0xc077f8: bl              #0xc07810  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_documentBoundary
    // 0xc077fc: LeaveFrame
    //     0xc077fc: mov             SP, fp
    //     0xc07800: ldp             fp, lr, [SP], #0x10
    // 0xc07804: ret
    //     0xc07804: ret             
    // 0xc07808: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07808: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc0780c: b               #0xc077ec
  }
  _ _documentBoundary(/* No info */) {
    // ** addr: 0xc07810, size: 0x58
    // 0xc07810: EnterFrame
    //     0xc07810: stp             fp, lr, [SP, #-0x10]!
    //     0xc07814: mov             fp, SP
    // 0xc07818: AllocStack(0x8)
    //     0xc07818: sub             SP, SP, #8
    // 0xc0781c: ldr             x0, [fp, #0x10]
    // 0xc07820: LoadField: r1 = r0->field_b
    //     0xc07820: ldur            w1, [x0, #0xb]
    // 0xc07824: DecompressPointer r1
    //     0xc07824: add             x1, x1, HEAP, lsl #32
    // 0xc07828: cmp             w1, NULL
    // 0xc0782c: b.eq            #0xc07864
    // 0xc07830: LoadField: r0 = r1->field_b
    //     0xc07830: ldur            w0, [x1, #0xb]
    // 0xc07834: DecompressPointer r0
    //     0xc07834: add             x0, x0, HEAP, lsl #32
    // 0xc07838: LoadField: r1 = r0->field_27
    //     0xc07838: ldur            w1, [x0, #0x27]
    // 0xc0783c: DecompressPointer r1
    //     0xc0783c: add             x1, x1, HEAP, lsl #32
    // 0xc07840: LoadField: r0 = r1->field_7
    //     0xc07840: ldur            w0, [x1, #7]
    // 0xc07844: DecompressPointer r0
    //     0xc07844: add             x0, x0, HEAP, lsl #32
    // 0xc07848: stur            x0, [fp, #-8]
    // 0xc0784c: r0 = DocumentBoundary()
    //     0xc0784c: bl              #0xc07868  ; AllocateDocumentBoundaryStub -> DocumentBoundary (size=0xc)
    // 0xc07850: ldur            x1, [fp, #-8]
    // 0xc07854: StoreField: r0->field_7 = r1
    //     0xc07854: stur            w1, [x0, #7]
    // 0xc07858: LeaveFrame
    //     0xc07858: mov             SP, fp
    //     0xc0785c: ldp             fp, lr, [SP], #0x10
    // 0xc07860: ret
    //     0xc07860: ret             
    // 0xc07864: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07864: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _paragraphBoundary(dynamic) {
    // ** addr: 0xc07874, size: 0x18
    // 0xc07874: r4 = 7
    //     0xc07874: movz            x4, #0x7
    // 0xc07878: r1 = Function '_paragraphBoundary@244183791':.
    //     0xc07878: add             x17, PP, #0x47, lsl #12  ; [pp+0x473b0] AnonymousClosure: (0xc0788c), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_paragraphBoundary (0xc078d4)
    //     0xc0787c: ldr             x1, [x17, #0x3b0]
    // 0xc07880: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07880: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07884: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07884: ldur            x0, [x24, #0x17]
    // 0xc07888: br              x0
  }
  [closure] TextBoundary _paragraphBoundary(dynamic) {
    // ** addr: 0xc0788c, size: 0x48
    // 0xc0788c: EnterFrame
    //     0xc0788c: stp             fp, lr, [SP, #-0x10]!
    //     0xc07890: mov             fp, SP
    // 0xc07894: AllocStack(0x8)
    //     0xc07894: sub             SP, SP, #8
    // 0xc07898: SetupParameters()
    //     0xc07898: ldr             x0, [fp, #0x10]
    //     0xc0789c: ldur            w1, [x0, #0x17]
    //     0xc078a0: add             x1, x1, HEAP, lsl #32
    // 0xc078a4: CheckStackOverflow
    //     0xc078a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc078a8: cmp             SP, x16
    //     0xc078ac: b.ls            #0xc078cc
    // 0xc078b0: LoadField: r0 = r1->field_f
    //     0xc078b0: ldur            w0, [x1, #0xf]
    // 0xc078b4: DecompressPointer r0
    //     0xc078b4: add             x0, x0, HEAP, lsl #32
    // 0xc078b8: str             x0, [SP]
    // 0xc078bc: r0 = _paragraphBoundary()
    //     0xc078bc: bl              #0xc078d4  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_paragraphBoundary
    // 0xc078c0: LeaveFrame
    //     0xc078c0: mov             SP, fp
    //     0xc078c4: ldp             fp, lr, [SP], #0x10
    // 0xc078c8: ret
    //     0xc078c8: ret             
    // 0xc078cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc078cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc078d0: b               #0xc078b0
  }
  _ _paragraphBoundary(/* No info */) {
    // ** addr: 0xc078d4, size: 0x58
    // 0xc078d4: EnterFrame
    //     0xc078d4: stp             fp, lr, [SP, #-0x10]!
    //     0xc078d8: mov             fp, SP
    // 0xc078dc: AllocStack(0x8)
    //     0xc078dc: sub             SP, SP, #8
    // 0xc078e0: ldr             x0, [fp, #0x10]
    // 0xc078e4: LoadField: r1 = r0->field_b
    //     0xc078e4: ldur            w1, [x0, #0xb]
    // 0xc078e8: DecompressPointer r1
    //     0xc078e8: add             x1, x1, HEAP, lsl #32
    // 0xc078ec: cmp             w1, NULL
    // 0xc078f0: b.eq            #0xc07928
    // 0xc078f4: LoadField: r0 = r1->field_b
    //     0xc078f4: ldur            w0, [x1, #0xb]
    // 0xc078f8: DecompressPointer r0
    //     0xc078f8: add             x0, x0, HEAP, lsl #32
    // 0xc078fc: LoadField: r1 = r0->field_27
    //     0xc078fc: ldur            w1, [x0, #0x27]
    // 0xc07900: DecompressPointer r1
    //     0xc07900: add             x1, x1, HEAP, lsl #32
    // 0xc07904: LoadField: r0 = r1->field_7
    //     0xc07904: ldur            w0, [x1, #7]
    // 0xc07908: DecompressPointer r0
    //     0xc07908: add             x0, x0, HEAP, lsl #32
    // 0xc0790c: stur            x0, [fp, #-8]
    // 0xc07910: r0 = ParagraphBoundary()
    //     0xc07910: bl              #0x95035c  ; AllocateParagraphBoundaryStub -> ParagraphBoundary (size=0xc)
    // 0xc07914: ldur            x1, [fp, #-8]
    // 0xc07918: StoreField: r0->field_7 = r1
    //     0xc07918: stur            w1, [x0, #7]
    // 0xc0791c: LeaveFrame
    //     0xc0791c: mov             SP, fp
    //     0xc07920: ldp             fp, lr, [SP], #0x10
    // 0xc07924: ret
    //     0xc07924: ret             
    // 0xc07928: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07928: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _characterBoundary(dynamic) {
    // ** addr: 0xc0792c, size: 0x18
    // 0xc0792c: r4 = 7
    //     0xc0792c: movz            x4, #0x7
    // 0xc07930: r1 = Function '_characterBoundary@244183791':.
    //     0xc07930: add             x17, PP, #0x47, lsl #12  ; [pp+0x473d0] AnonymousClosure: (0xa7c870), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_characterBoundary (0xa7c818)
    //     0xc07934: ldr             x1, [x17, #0x3d0]
    // 0xc07938: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07938: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc0793c: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc0793c: ldur            x0, [x24, #0x17]
    // 0xc07940: br              x0
  }
  dynamic _onCursorTick(dynamic) {
    // ** addr: 0xc07944, size: 0x14
    // 0xc07944: r4 = 7
    //     0xc07944: movz            x4, #0x7
    // 0xc07948: r1 = Function '_onCursorTick@244183791':.
    //     0xc07948: ldr             x1, [PP, #0x60c8]  ; [pp+0x60c8] AnonymousClosure: (0x5cf518), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_onCursorTick (0x5cf210)
    // 0xc0794c: r24 = BuildNonGenericMethodExtractorStub
    //     0xc0794c: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07950: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07950: ldur            x0, [x24, #0x17]
    // 0xc07954: br              x0
  }
  dynamic _nextWordBoundary(dynamic) {
    // ** addr: 0xc07958, size: 0x18
    // 0xc07958: r4 = 7
    //     0xc07958: movz            x4, #0x7
    // 0xc0795c: r1 = Function '_nextWordBoundary@244183791':.
    //     0xc0795c: add             x17, PP, #0x47, lsl #12  ; [pp+0x473c0] AnonymousClosure: (0xc07970), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary (0xc079b8)
    //     0xc07960: ldr             x1, [x17, #0x3c0]
    // 0xc07964: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07964: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07968: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07968: ldur            x0, [x24, #0x17]
    // 0xc0796c: br              x0
  }
  [closure] TextBoundary _nextWordBoundary(dynamic) {
    // ** addr: 0xc07970, size: 0x48
    // 0xc07970: EnterFrame
    //     0xc07970: stp             fp, lr, [SP, #-0x10]!
    //     0xc07974: mov             fp, SP
    // 0xc07978: AllocStack(0x8)
    //     0xc07978: sub             SP, SP, #8
    // 0xc0797c: SetupParameters()
    //     0xc0797c: ldr             x0, [fp, #0x10]
    //     0xc07980: ldur            w1, [x0, #0x17]
    //     0xc07984: add             x1, x1, HEAP, lsl #32
    // 0xc07988: CheckStackOverflow
    //     0xc07988: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc0798c: cmp             SP, x16
    //     0xc07990: b.ls            #0xc079b0
    // 0xc07994: LoadField: r0 = r1->field_f
    //     0xc07994: ldur            w0, [x1, #0xf]
    // 0xc07998: DecompressPointer r0
    //     0xc07998: add             x0, x0, HEAP, lsl #32
    // 0xc0799c: str             x0, [SP]
    // 0xc079a0: r0 = _nextWordBoundary()
    //     0xc079a0: bl              #0xc079b8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_nextWordBoundary
    // 0xc079a4: LeaveFrame
    //     0xc079a4: mov             SP, fp
    //     0xc079a8: ldp             fp, lr, [SP], #0x10
    // 0xc079ac: ret
    //     0xc079ac: ret             
    // 0xc079b0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc079b0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc079b4: b               #0xc07994
  }
  _ _nextWordBoundary(/* No info */) {
    // ** addr: 0xc079b8, size: 0x8c
    // 0xc079b8: EnterFrame
    //     0xc079b8: stp             fp, lr, [SP, #-0x10]!
    //     0xc079bc: mov             fp, SP
    // 0xc079c0: AllocStack(0x8)
    //     0xc079c0: sub             SP, SP, #8
    // 0xc079c4: CheckStackOverflow
    //     0xc079c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc079c8: cmp             SP, x16
    //     0xc079cc: b.ls            #0xc07a38
    // 0xc079d0: ldr             x1, [fp, #0x10]
    // 0xc079d4: LoadField: r0 = r1->field_b
    //     0xc079d4: ldur            w0, [x1, #0xb]
    // 0xc079d8: DecompressPointer r0
    //     0xc079d8: add             x0, x0, HEAP, lsl #32
    // 0xc079dc: cmp             w0, NULL
    // 0xc079e0: b.eq            #0xc07a40
    // 0xc079e4: LoadField: r0 = r1->field_a7
    //     0xc079e4: ldur            w0, [x1, #0xa7]
    // 0xc079e8: DecompressPointer r0
    //     0xc079e8: add             x0, x0, HEAP, lsl #32
    // 0xc079ec: r16 = Sentinel
    //     0xc079ec: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc079f0: cmp             w0, w16
    // 0xc079f4: b.ne            #0xc07a00
    // 0xc079f8: r2 = renderEditable
    //     0xc079f8: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xc079fc: r0 = InitLateFinalInstanceField()
    //     0xc079fc: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xc07a00: str             x0, [SP]
    // 0xc07a04: r0 = wordBoundaries()
    //     0xc07a04: bl              #0xc07a44  ; [package:flutter/src/rendering/editable.dart] RenderEditable::wordBoundaries
    // 0xc07a08: mov             x1, x0
    // 0xc07a0c: LoadField: r0 = r1->field_f
    //     0xc07a0c: ldur            w0, [x1, #0xf]
    // 0xc07a10: DecompressPointer r0
    //     0xc07a10: add             x0, x0, HEAP, lsl #32
    // 0xc07a14: r16 = Sentinel
    //     0xc07a14: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc07a18: cmp             w0, w16
    // 0xc07a1c: b.ne            #0xc07a2c
    // 0xc07a20: r2 = moveByWordBoundary
    //     0xc07a20: add             x2, PP, #0x47, lsl #12  ; [pp+0x473c8] Field <WordBoundary.moveByWordBoundary>: late final (offset: 0x10)
    //     0xc07a24: ldr             x2, [x2, #0x3c8]
    // 0xc07a28: r0 = InitLateFinalInstanceField()
    //     0xc07a28: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xc07a2c: LeaveFrame
    //     0xc07a2c: mov             SP, fp
    //     0xc07a30: ldp             fp, lr, [SP], #0x10
    // 0xc07a34: ret
    //     0xc07a34: ret             
    // 0xc07a38: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07a38: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07a3c: b               #0xc079d0
    // 0xc07a40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07a40: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _linebreak(dynamic) {
    // ** addr: 0xc07b7c, size: 0x18
    // 0xc07b7c: r4 = 7
    //     0xc07b7c: movz            x4, #0x7
    // 0xc07b80: r1 = Function '_linebreak@244183791':.
    //     0xc07b80: add             x17, PP, #0x47, lsl #12  ; [pp+0x473b8] AnonymousClosure: (0xc07b94), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_linebreak (0xc07bdc)
    //     0xc07b84: ldr             x1, [x17, #0x3b8]
    // 0xc07b88: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07b88: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07b8c: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07b8c: ldur            x0, [x24, #0x17]
    // 0xc07b90: br              x0
  }
  [closure] TextBoundary _linebreak(dynamic) {
    // ** addr: 0xc07b94, size: 0x48
    // 0xc07b94: EnterFrame
    //     0xc07b94: stp             fp, lr, [SP, #-0x10]!
    //     0xc07b98: mov             fp, SP
    // 0xc07b9c: AllocStack(0x8)
    //     0xc07b9c: sub             SP, SP, #8
    // 0xc07ba0: SetupParameters()
    //     0xc07ba0: ldr             x0, [fp, #0x10]
    //     0xc07ba4: ldur            w1, [x0, #0x17]
    //     0xc07ba8: add             x1, x1, HEAP, lsl #32
    // 0xc07bac: CheckStackOverflow
    //     0xc07bac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07bb0: cmp             SP, x16
    //     0xc07bb4: b.ls            #0xc07bd4
    // 0xc07bb8: LoadField: r0 = r1->field_f
    //     0xc07bb8: ldur            w0, [x1, #0xf]
    // 0xc07bbc: DecompressPointer r0
    //     0xc07bbc: add             x0, x0, HEAP, lsl #32
    // 0xc07bc0: str             x0, [SP]
    // 0xc07bc4: r0 = _linebreak()
    //     0xc07bc4: bl              #0xc07bdc  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_linebreak
    // 0xc07bc8: LeaveFrame
    //     0xc07bc8: mov             SP, fp
    //     0xc07bcc: ldp             fp, lr, [SP], #0x10
    // 0xc07bd0: ret
    //     0xc07bd0: ret             
    // 0xc07bd4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07bd4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07bd8: b               #0xc07bb8
  }
  _ _linebreak(/* No info */) {
    // ** addr: 0xc07bdc, size: 0x70
    // 0xc07bdc: EnterFrame
    //     0xc07bdc: stp             fp, lr, [SP, #-0x10]!
    //     0xc07be0: mov             fp, SP
    // 0xc07be4: AllocStack(0x8)
    //     0xc07be4: sub             SP, SP, #8
    // 0xc07be8: CheckStackOverflow
    //     0xc07be8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07bec: cmp             SP, x16
    //     0xc07bf0: b.ls            #0xc07c40
    // 0xc07bf4: ldr             x1, [fp, #0x10]
    // 0xc07bf8: LoadField: r0 = r1->field_b
    //     0xc07bf8: ldur            w0, [x1, #0xb]
    // 0xc07bfc: DecompressPointer r0
    //     0xc07bfc: add             x0, x0, HEAP, lsl #32
    // 0xc07c00: cmp             w0, NULL
    // 0xc07c04: b.eq            #0xc07c48
    // 0xc07c08: LoadField: r0 = r1->field_a7
    //     0xc07c08: ldur            w0, [x1, #0xa7]
    // 0xc07c0c: DecompressPointer r0
    //     0xc07c0c: add             x0, x0, HEAP, lsl #32
    // 0xc07c10: r16 = Sentinel
    //     0xc07c10: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc07c14: cmp             w0, w16
    // 0xc07c18: b.ne            #0xc07c24
    // 0xc07c1c: r2 = renderEditable
    //     0xc07c1c: ldr             x2, [PP, #0x5fb8]  ; [pp+0x5fb8] Field <EditableTextState.renderEditable>: late final (offset: 0xa8)
    // 0xc07c20: r0 = InitLateFinalInstanceField()
    //     0xc07c20: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xc07c24: stur            x0, [fp, #-8]
    // 0xc07c28: r0 = LineBoundary()
    //     0xc07c28: bl              #0xc07c4c  ; AllocateLineBoundaryStub -> LineBoundary (size=0xc)
    // 0xc07c2c: ldur            x1, [fp, #-8]
    // 0xc07c30: StoreField: r0->field_7 = r1
    //     0xc07c30: stur            w1, [x0, #7]
    // 0xc07c34: LeaveFrame
    //     0xc07c34: mov             SP, fp
    //     0xc07c38: ldp             fp, lr, [SP], #0x10
    // 0xc07c3c: ret
    //     0xc07c3c: ret             
    // 0xc07c40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07c40: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07c44: b               #0xc07bf4
    // 0xc07c48: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07c48: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _moveToTextBoundary(dynamic) {
    // ** addr: 0xc07c58, size: 0x18
    // 0xc07c58: r4 = 7
    //     0xc07c58: movz            x4, #0x7
    // 0xc07c5c: r1 = Function '_moveToTextBoundary@244183791':.
    //     0xc07c5c: add             x17, PP, #0x47, lsl #12  ; [pp+0x473d8] AnonymousClosure: (0xc07c70), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveToTextBoundary (0xc07cc8)
    //     0xc07c60: ldr             x1, [x17, #0x3d8]
    // 0xc07c64: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07c64: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07c68: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07c68: ldur            x0, [x24, #0x17]
    // 0xc07c6c: br              x0
  }
  [closure] TextPosition _moveToTextBoundary(dynamic, TextPosition, bool, TextBoundary) {
    // ** addr: 0xc07c70, size: 0x58
    // 0xc07c70: EnterFrame
    //     0xc07c70: stp             fp, lr, [SP, #-0x10]!
    //     0xc07c74: mov             fp, SP
    // 0xc07c78: AllocStack(0x20)
    //     0xc07c78: sub             SP, SP, #0x20
    // 0xc07c7c: SetupParameters()
    //     0xc07c7c: ldr             x0, [fp, #0x28]
    //     0xc07c80: ldur            w1, [x0, #0x17]
    //     0xc07c84: add             x1, x1, HEAP, lsl #32
    // 0xc07c88: CheckStackOverflow
    //     0xc07c88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07c8c: cmp             SP, x16
    //     0xc07c90: b.ls            #0xc07cc0
    // 0xc07c94: LoadField: r0 = r1->field_f
    //     0xc07c94: ldur            w0, [x1, #0xf]
    // 0xc07c98: DecompressPointer r0
    //     0xc07c98: add             x0, x0, HEAP, lsl #32
    // 0xc07c9c: ldr             x16, [fp, #0x20]
    // 0xc07ca0: stp             x16, x0, [SP, #0x10]
    // 0xc07ca4: ldr             x16, [fp, #0x18]
    // 0xc07ca8: ldr             lr, [fp, #0x10]
    // 0xc07cac: stp             lr, x16, [SP]
    // 0xc07cb0: r0 = _moveToTextBoundary()
    //     0xc07cb0: bl              #0xc07cc8  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveToTextBoundary
    // 0xc07cb4: LeaveFrame
    //     0xc07cb4: mov             SP, fp
    //     0xc07cb8: ldp             fp, lr, [SP], #0x10
    // 0xc07cbc: ret
    //     0xc07cbc: ret             
    // 0xc07cc0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07cc0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07cc4: b               #0xc07c94
  }
  _ _moveToTextBoundary(/* No info */) {
    // ** addr: 0xc07cc8, size: 0x210
    // 0xc07cc8: EnterFrame
    //     0xc07cc8: stp             fp, lr, [SP, #-0x10]!
    //     0xc07ccc: mov             fp, SP
    // 0xc07cd0: AllocStack(0x18)
    //     0xc07cd0: sub             SP, SP, #0x18
    // 0xc07cd4: CheckStackOverflow
    //     0xc07cd4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07cd8: cmp             SP, x16
    //     0xc07cdc: b.ls            #0xc07ecc
    // 0xc07ce0: ldr             x0, [fp, #0x20]
    // 0xc07ce4: LoadField: r1 = r0->field_f
    //     0xc07ce4: ldur            w1, [x0, #0xf]
    // 0xc07ce8: DecompressPointer r1
    //     0xc07ce8: add             x1, x1, HEAP, lsl #32
    // 0xc07cec: LoadField: r2 = r1->field_7
    //     0xc07cec: ldur            x2, [x1, #7]
    // 0xc07cf0: cmp             x2, #0
    // 0xc07cf4: b.gt            #0xc07da0
    // 0xc07cf8: LoadField: r1 = r0->field_7
    //     0xc07cf8: ldur            x1, [x0, #7]
    // 0xc07cfc: cmp             x1, #1
    // 0xc07d00: b.ge            #0xc07d20
    // 0xc07d04: ldr             x2, [fp, #0x18]
    // 0xc07d08: tbz             w2, #4, #0xc07d24
    // 0xc07d0c: r0 = Instance_TextPosition
    //     0xc07d0c: add             x0, PP, #0x2b, lsl #12  ; [pp+0x2bc10] Obj!TextPosition@c39f21
    //     0xc07d10: ldr             x0, [x0, #0xc10]
    // 0xc07d14: LeaveFrame
    //     0xc07d14: mov             SP, fp
    //     0xc07d18: ldp             fp, lr, [SP], #0x10
    // 0xc07d1c: ret
    //     0xc07d1c: ret             
    // 0xc07d20: ldr             x2, [fp, #0x18]
    // 0xc07d24: sub             x3, x1, #1
    // 0xc07d28: tbz             x3, #0x3f, #0xc07d34
    // 0xc07d2c: r0 = 0
    //     0xc07d2c: movz            x0, #0
    // 0xc07d30: b               #0xc07dbc
    // 0xc07d34: cmp             x3, #0
    // 0xc07d38: b.le            #0xc07d54
    // 0xc07d3c: r0 = BoxInt64Instr(r3)
    //     0xc07d3c: sbfiz           x0, x3, #1, #0x1f
    //     0xc07d40: cmp             x3, x0, asr #1
    //     0xc07d44: b.eq            #0xc07d50
    //     0xc07d48: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xc07d4c: stur            x3, [x0, #7]
    // 0xc07d50: b               #0xc07dbc
    // 0xc07d54: r0 = BoxInt64Instr(r3)
    //     0xc07d54: sbfiz           x0, x3, #1, #0x1f
    //     0xc07d58: cmp             x3, x0, asr #1
    //     0xc07d5c: b.eq            #0xc07d68
    //     0xc07d60: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xc07d64: stur            x3, [x0, #7]
    // 0xc07d68: r1 = LoadTaggedClassIdMayBeSmiInstr(r0)
    //     0xc07d68: movz            x1, #0x76
    //     0xc07d6c: tbz             w0, #0, #0xc07d7c
    //     0xc07d70: ldur            x1, [x0, #-1]
    //     0xc07d74: ubfx            x1, x1, #0xc, #0x14
    //     0xc07d78: lsl             x1, x1, #1
    // 0xc07d7c: cmp             w1, #0x7a
    // 0xc07d80: b.ne            #0xc07d98
    // 0xc07d84: LoadField: d0 = r0->field_7
    //     0xc07d84: ldur            d0, [x0, #7]
    // 0xc07d88: fcmp            d0, d0
    // 0xc07d8c: b.vs            #0xc07dbc
    // 0xc07d90: r0 = 0
    //     0xc07d90: movz            x0, #0
    // 0xc07d94: b               #0xc07dbc
    // 0xc07d98: r0 = 0
    //     0xc07d98: movz            x0, #0
    // 0xc07d9c: b               #0xc07dbc
    // 0xc07da0: ldr             x2, [fp, #0x18]
    // 0xc07da4: LoadField: r3 = r0->field_7
    //     0xc07da4: ldur            x3, [x0, #7]
    // 0xc07da8: r0 = BoxInt64Instr(r3)
    //     0xc07da8: sbfiz           x0, x3, #1, #0x1f
    //     0xc07dac: cmp             x3, x0, asr #1
    //     0xc07db0: b.eq            #0xc07dbc
    //     0xc07db4: bl              #0xc5f008  ; AllocateMintSharedWithoutFPURegsStub
    //     0xc07db8: stur            x3, [x0, #7]
    // 0xc07dbc: tbnz            w2, #4, #0xc07e60
    // 0xc07dc0: ldr             x1, [fp, #0x10]
    // 0xc07dc4: r2 = LoadInt32Instr(r0)
    //     0xc07dc4: sbfx            x2, x0, #1, #0x1f
    //     0xc07dc8: tbz             w0, #0, #0xc07dd0
    //     0xc07dcc: ldur            x2, [x0, #7]
    // 0xc07dd0: r0 = LoadClassIdInstr(r1)
    //     0xc07dd0: ldur            x0, [x1, #-1]
    //     0xc07dd4: ubfx            x0, x0, #0xc, #0x14
    // 0xc07dd8: stp             x2, x1, [SP]
    // 0xc07ddc: r0 = GDT[cid_x0 + -0xff1]()
    //     0xc07ddc: sub             lr, x0, #0xff1
    //     0xc07de0: ldr             lr, [x21, lr, lsl #3]
    //     0xc07de4: blr             lr
    // 0xc07de8: cmp             w0, NULL
    // 0xc07dec: b.ne            #0xc07e2c
    // 0xc07df0: ldr             x0, [fp, #0x28]
    // 0xc07df4: LoadField: r1 = r0->field_b
    //     0xc07df4: ldur            w1, [x0, #0xb]
    // 0xc07df8: DecompressPointer r1
    //     0xc07df8: add             x1, x1, HEAP, lsl #32
    // 0xc07dfc: cmp             w1, NULL
    // 0xc07e00: b.eq            #0xc07ed4
    // 0xc07e04: LoadField: r0 = r1->field_b
    //     0xc07e04: ldur            w0, [x1, #0xb]
    // 0xc07e08: DecompressPointer r0
    //     0xc07e08: add             x0, x0, HEAP, lsl #32
    // 0xc07e0c: LoadField: r1 = r0->field_27
    //     0xc07e0c: ldur            w1, [x0, #0x27]
    // 0xc07e10: DecompressPointer r1
    //     0xc07e10: add             x1, x1, HEAP, lsl #32
    // 0xc07e14: LoadField: r0 = r1->field_7
    //     0xc07e14: ldur            w0, [x1, #7]
    // 0xc07e18: DecompressPointer r0
    //     0xc07e18: add             x0, x0, HEAP, lsl #32
    // 0xc07e1c: LoadField: r1 = r0->field_7
    //     0xc07e1c: ldur            w1, [x0, #7]
    // 0xc07e20: DecompressPointer r1
    //     0xc07e20: add             x1, x1, HEAP, lsl #32
    // 0xc07e24: r0 = LoadInt32Instr(r1)
    //     0xc07e24: sbfx            x0, x1, #1, #0x1f
    // 0xc07e28: b               #0xc07e3c
    // 0xc07e2c: r1 = LoadInt32Instr(r0)
    //     0xc07e2c: sbfx            x1, x0, #1, #0x1f
    //     0xc07e30: tbz             w0, #0, #0xc07e38
    //     0xc07e34: ldur            x1, [x0, #7]
    // 0xc07e38: mov             x0, x1
    // 0xc07e3c: stur            x0, [fp, #-8]
    // 0xc07e40: r0 = TextPosition()
    //     0xc07e40: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xc07e44: mov             x1, x0
    // 0xc07e48: ldur            x0, [fp, #-8]
    // 0xc07e4c: StoreField: r1->field_7 = r0
    //     0xc07e4c: stur            x0, [x1, #7]
    // 0xc07e50: r0 = Instance_TextAffinity
    //     0xc07e50: ldr             x0, [PP, #0x5ce8]  ; [pp+0x5ce8] Obj!TextAffinity@c46d01
    // 0xc07e54: StoreField: r1->field_f = r0
    //     0xc07e54: stur            w0, [x1, #0xf]
    // 0xc07e58: mov             x0, x1
    // 0xc07e5c: b               #0xc07ec0
    // 0xc07e60: ldr             x1, [fp, #0x10]
    // 0xc07e64: r2 = LoadInt32Instr(r0)
    //     0xc07e64: sbfx            x2, x0, #1, #0x1f
    //     0xc07e68: tbz             w0, #0, #0xc07e70
    //     0xc07e6c: ldur            x2, [x0, #7]
    // 0xc07e70: r0 = LoadClassIdInstr(r1)
    //     0xc07e70: ldur            x0, [x1, #-1]
    //     0xc07e74: ubfx            x0, x0, #0xc, #0x14
    // 0xc07e78: stp             x2, x1, [SP]
    // 0xc07e7c: r0 = GDT[cid_x0 + -0xff8]()
    //     0xc07e7c: sub             lr, x0, #0xff8
    //     0xc07e80: ldr             lr, [x21, lr, lsl #3]
    //     0xc07e84: blr             lr
    // 0xc07e88: cmp             w0, NULL
    // 0xc07e8c: b.ne            #0xc07e98
    // 0xc07e90: r0 = 0
    //     0xc07e90: movz            x0, #0
    // 0xc07e94: b               #0xc07ea8
    // 0xc07e98: r1 = LoadInt32Instr(r0)
    //     0xc07e98: sbfx            x1, x0, #1, #0x1f
    //     0xc07e9c: tbz             w0, #0, #0xc07ea4
    //     0xc07ea0: ldur            x1, [x0, #7]
    // 0xc07ea4: mov             x0, x1
    // 0xc07ea8: stur            x0, [fp, #-8]
    // 0xc07eac: r0 = TextPosition()
    //     0xc07eac: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xc07eb0: ldur            x1, [fp, #-8]
    // 0xc07eb4: StoreField: r0->field_7 = r1
    //     0xc07eb4: stur            x1, [x0, #7]
    // 0xc07eb8: r1 = Instance_TextAffinity
    //     0xc07eb8: ldr             x1, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xc07ebc: StoreField: r0->field_f = r1
    //     0xc07ebc: stur            w1, [x0, #0xf]
    // 0xc07ec0: LeaveFrame
    //     0xc07ec0: mov             SP, fp
    //     0xc07ec4: ldp             fp, lr, [SP], #0x10
    // 0xc07ec8: ret
    //     0xc07ec8: ret             
    // 0xc07ecc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07ecc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07ed0: b               #0xc07ce0
    // 0xc07ed4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc07ed4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  dynamic _moveBeyondTextBoundary(dynamic) {
    // ** addr: 0xc07ed8, size: 0x18
    // 0xc07ed8: r4 = 7
    //     0xc07ed8: movz            x4, #0x7
    // 0xc07edc: r1 = Function '_moveBeyondTextBoundary@244183791':.
    //     0xc07edc: add             x17, PP, #0x47, lsl #12  ; [pp+0x473e0] AnonymousClosure: (0xc07ef0), in [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveBeyondTextBoundary (0xc07f48)
    //     0xc07ee0: ldr             x1, [x17, #0x3e0]
    // 0xc07ee4: r24 = BuildNonGenericMethodExtractorStub
    //     0xc07ee4: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xc07ee8: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xc07ee8: ldur            x0, [x24, #0x17]
    // 0xc07eec: br              x0
  }
  [closure] TextPosition _moveBeyondTextBoundary(dynamic, TextPosition, bool, TextBoundary) {
    // ** addr: 0xc07ef0, size: 0x58
    // 0xc07ef0: EnterFrame
    //     0xc07ef0: stp             fp, lr, [SP, #-0x10]!
    //     0xc07ef4: mov             fp, SP
    // 0xc07ef8: AllocStack(0x20)
    //     0xc07ef8: sub             SP, SP, #0x20
    // 0xc07efc: SetupParameters()
    //     0xc07efc: ldr             x0, [fp, #0x28]
    //     0xc07f00: ldur            w1, [x0, #0x17]
    //     0xc07f04: add             x1, x1, HEAP, lsl #32
    // 0xc07f08: CheckStackOverflow
    //     0xc07f08: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07f0c: cmp             SP, x16
    //     0xc07f10: b.ls            #0xc07f40
    // 0xc07f14: LoadField: r0 = r1->field_f
    //     0xc07f14: ldur            w0, [x1, #0xf]
    // 0xc07f18: DecompressPointer r0
    //     0xc07f18: add             x0, x0, HEAP, lsl #32
    // 0xc07f1c: ldr             x16, [fp, #0x20]
    // 0xc07f20: stp             x16, x0, [SP, #0x10]
    // 0xc07f24: ldr             x16, [fp, #0x18]
    // 0xc07f28: ldr             lr, [fp, #0x10]
    // 0xc07f2c: stp             lr, x16, [SP]
    // 0xc07f30: r0 = _moveBeyondTextBoundary()
    //     0xc07f30: bl              #0xc07f48  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_moveBeyondTextBoundary
    // 0xc07f34: LeaveFrame
    //     0xc07f34: mov             SP, fp
    //     0xc07f38: ldp             fp, lr, [SP], #0x10
    // 0xc07f3c: ret
    //     0xc07f3c: ret             
    // 0xc07f40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc07f40: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc07f44: b               #0xc07f14
  }
  _ _moveBeyondTextBoundary(/* No info */) {
    // ** addr: 0xc07f48, size: 0x11c
    // 0xc07f48: EnterFrame
    //     0xc07f48: stp             fp, lr, [SP, #-0x10]!
    //     0xc07f4c: mov             fp, SP
    // 0xc07f50: AllocStack(0x18)
    //     0xc07f50: sub             SP, SP, #0x18
    // 0xc07f54: CheckStackOverflow
    //     0xc07f54: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc07f58: cmp             SP, x16
    //     0xc07f5c: b.ls            #0xc08058
    // 0xc07f60: ldr             x0, [fp, #0x18]
    // 0xc07f64: tbnz            w0, #4, #0xc07fe8
    // 0xc07f68: ldr             x1, [fp, #0x20]
    // 0xc07f6c: ldr             x0, [fp, #0x10]
    // 0xc07f70: LoadField: r2 = r1->field_7
    //     0xc07f70: ldur            x2, [x1, #7]
    // 0xc07f74: r1 = LoadClassIdInstr(r0)
    //     0xc07f74: ldur            x1, [x0, #-1]
    //     0xc07f78: ubfx            x1, x1, #0xc, #0x14
    // 0xc07f7c: stp             x2, x0, [SP]
    // 0xc07f80: mov             x0, x1
    // 0xc07f84: r0 = GDT[cid_x0 + -0xff1]()
    //     0xc07f84: sub             lr, x0, #0xff1
    //     0xc07f88: ldr             lr, [x21, lr, lsl #3]
    //     0xc07f8c: blr             lr
    // 0xc07f90: cmp             w0, NULL
    // 0xc07f94: b.ne            #0xc07fd4
    // 0xc07f98: ldr             x0, [fp, #0x28]
    // 0xc07f9c: LoadField: r1 = r0->field_b
    //     0xc07f9c: ldur            w1, [x0, #0xb]
    // 0xc07fa0: DecompressPointer r1
    //     0xc07fa0: add             x1, x1, HEAP, lsl #32
    // 0xc07fa4: cmp             w1, NULL
    // 0xc07fa8: b.eq            #0xc08060
    // 0xc07fac: LoadField: r0 = r1->field_b
    //     0xc07fac: ldur            w0, [x1, #0xb]
    // 0xc07fb0: DecompressPointer r0
    //     0xc07fb0: add             x0, x0, HEAP, lsl #32
    // 0xc07fb4: LoadField: r1 = r0->field_27
    //     0xc07fb4: ldur            w1, [x0, #0x27]
    // 0xc07fb8: DecompressPointer r1
    //     0xc07fb8: add             x1, x1, HEAP, lsl #32
    // 0xc07fbc: LoadField: r0 = r1->field_7
    //     0xc07fbc: ldur            w0, [x1, #7]
    // 0xc07fc0: DecompressPointer r0
    //     0xc07fc0: add             x0, x0, HEAP, lsl #32
    // 0xc07fc4: LoadField: r1 = r0->field_7
    //     0xc07fc4: ldur            w1, [x0, #7]
    // 0xc07fc8: DecompressPointer r1
    //     0xc07fc8: add             x1, x1, HEAP, lsl #32
    // 0xc07fcc: r0 = LoadInt32Instr(r1)
    //     0xc07fcc: sbfx            x0, x1, #1, #0x1f
    // 0xc07fd0: b               #0xc08034
    // 0xc07fd4: r1 = LoadInt32Instr(r0)
    //     0xc07fd4: sbfx            x1, x0, #1, #0x1f
    //     0xc07fd8: tbz             w0, #0, #0xc07fe0
    //     0xc07fdc: ldur            x1, [x0, #7]
    // 0xc07fe0: mov             x0, x1
    // 0xc07fe4: b               #0xc08034
    // 0xc07fe8: ldr             x1, [fp, #0x20]
    // 0xc07fec: ldr             x0, [fp, #0x10]
    // 0xc07ff0: LoadField: r2 = r1->field_7
    //     0xc07ff0: ldur            x2, [x1, #7]
    // 0xc07ff4: sub             x1, x2, #1
    // 0xc07ff8: r2 = LoadClassIdInstr(r0)
    //     0xc07ff8: ldur            x2, [x0, #-1]
    //     0xc07ffc: ubfx            x2, x2, #0xc, #0x14
    // 0xc08000: stp             x1, x0, [SP]
    // 0xc08004: mov             x0, x2
    // 0xc08008: r0 = GDT[cid_x0 + -0xff8]()
    //     0xc08008: sub             lr, x0, #0xff8
    //     0xc0800c: ldr             lr, [x21, lr, lsl #3]
    //     0xc08010: blr             lr
    // 0xc08014: cmp             w0, NULL
    // 0xc08018: b.ne            #0xc08024
    // 0xc0801c: r0 = 0
    //     0xc0801c: movz            x0, #0
    // 0xc08020: b               #0xc08034
    // 0xc08024: r1 = LoadInt32Instr(r0)
    //     0xc08024: sbfx            x1, x0, #1, #0x1f
    //     0xc08028: tbz             w0, #0, #0xc08030
    //     0xc0802c: ldur            x1, [x0, #7]
    // 0xc08030: mov             x0, x1
    // 0xc08034: stur            x0, [fp, #-8]
    // 0xc08038: r0 = TextPosition()
    //     0xc08038: bl              #0x5a1064  ; AllocateTextPositionStub -> TextPosition (size=0x14)
    // 0xc0803c: ldur            x1, [fp, #-8]
    // 0xc08040: StoreField: r0->field_7 = r1
    //     0xc08040: stur            x1, [x0, #7]
    // 0xc08044: r1 = Instance_TextAffinity
    //     0xc08044: ldr             x1, [PP, #0x5cf0]  ; [pp+0x5cf0] Obj!TextAffinity@c46ce1
    // 0xc08048: StoreField: r0->field_f = r1
    //     0xc08048: stur            w1, [x0, #0xf]
    // 0xc0804c: LeaveFrame
    //     0xc0804c: mov             SP, fp
    //     0xc08050: ldp             fp, lr, [SP], #0x10
    // 0xc08054: ret
    //     0xc08054: ret             
    // 0xc08058: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc08058: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc0805c: b               #0xc07f60
    // 0xc08060: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc08060: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
}

// class id: 3492, size: 0x1c, field offset: 0x18
//   const constructor, 
class _ScribblePlaceholder extends WidgetSpan {

  PlaceholderAlignment field_c;
  SizedBox field_14;
  Size field_18;

  _ build(/* No info */) {
    // ** addr: 0xbf79f4, size: 0x11c
    // 0xbf79f4: EnterFrame
    //     0xbf79f4: stp             fp, lr, [SP, #-0x10]!
    //     0xbf79f8: mov             fp, SP
    // 0xbf79fc: AllocStack(0x30)
    //     0xbf79fc: sub             SP, SP, #0x30
    // 0xbf7a00: CheckStackOverflow
    //     0xbf7a00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbf7a04: cmp             SP, x16
    //     0xbf7a08: b.ls            #0xbf7ae4
    // 0xbf7a0c: ldr             x0, [fp, #0x28]
    // 0xbf7a10: LoadField: r1 = r0->field_7
    //     0xbf7a10: ldur            w1, [x0, #7]
    // 0xbf7a14: DecompressPointer r1
    //     0xbf7a14: add             x1, x1, HEAP, lsl #32
    // 0xbf7a18: cmp             w1, NULL
    // 0xbf7a1c: r16 = true
    //     0xbf7a1c: add             x16, NULL, #0x20  ; true
    // 0xbf7a20: r17 = false
    //     0xbf7a20: add             x17, NULL, #0x30  ; false
    // 0xbf7a24: csel            x2, x16, x17, ne
    // 0xbf7a28: stur            x2, [fp, #-8]
    // 0xbf7a2c: tbnz            w2, #4, #0xbf7a54
    // 0xbf7a30: ldr             d0, [fp, #0x10]
    // 0xbf7a34: cmp             w1, NULL
    // 0xbf7a38: b.eq            #0xbf7aec
    // 0xbf7a3c: str             x1, [SP, #8]
    // 0xbf7a40: str             d0, [SP]
    // 0xbf7a44: r0 = getTextStyle()
    //     0xbf7a44: bl              #0x584908  ; [package:flutter/src/painting/text_style.dart] TextStyle::getTextStyle
    // 0xbf7a48: ldr             x16, [fp, #0x20]
    // 0xbf7a4c: stp             x0, x16, [SP]
    // 0xbf7a50: r0 = pushStyle()
    //     0xbf7a50: bl              #0x583d44  ; [dart:ui] _NativeParagraphBuilder::pushStyle
    // 0xbf7a54: ldr             x0, [fp, #0x28]
    // 0xbf7a58: ldr             d0, [fp, #0x10]
    // 0xbf7a5c: ldur            x1, [fp, #-8]
    // 0xbf7a60: ArrayLoad: r2 = r0[0]  ; List_4
    //     0xbf7a60: ldur            w2, [x0, #0x17]
    // 0xbf7a64: DecompressPointer r2
    //     0xbf7a64: add             x2, x2, HEAP, lsl #32
    // 0xbf7a68: LoadField: d1 = r2->field_7
    //     0xbf7a68: ldur            d1, [x2, #7]
    // 0xbf7a6c: LoadField: d2 = r2->field_f
    //     0xbf7a6c: ldur            d2, [x2, #0xf]
    // 0xbf7a70: r0 = inline_Allocate_Double()
    //     0xbf7a70: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0xbf7a74: add             x0, x0, #0x10
    //     0xbf7a78: cmp             x2, x0
    //     0xbf7a7c: b.ls            #0xbf7af0
    //     0xbf7a80: str             x0, [THR, #0x50]  ; THR::top
    //     0xbf7a84: sub             x0, x0, #0xf
    //     0xbf7a88: movz            x2, #0xd148
    //     0xbf7a8c: movk            x2, #0x3, lsl #16
    //     0xbf7a90: stur            x2, [x0, #-1]
    // 0xbf7a94: StoreField: r0->field_7 = d0
    //     0xbf7a94: stur            d0, [x0, #7]
    // 0xbf7a98: ldr             x16, [fp, #0x20]
    // 0xbf7a9c: str             x16, [SP, #0x20]
    // 0xbf7aa0: str             d1, [SP, #0x18]
    // 0xbf7aa4: str             d2, [SP, #0x10]
    // 0xbf7aa8: r16 = Instance_PlaceholderAlignment
    //     0xbf7aa8: add             x16, PP, #0x1e, lsl #12  ; [pp+0x1ea98] Obj!PlaceholderAlignment@c46c81
    //     0xbf7aac: ldr             x16, [x16, #0xa98]
    // 0xbf7ab0: stp             x0, x16, [SP]
    // 0xbf7ab4: r4 = const [0, 0x5, 0x5, 0x4, scale, 0x4, null]
    //     0xbf7ab4: add             x4, PP, #0x47, lsl #12  ; [pp+0x47450] List(7) [0, 0x5, 0x5, 0x4, "scale", 0x4, Null]
    //     0xbf7ab8: ldr             x4, [x4, #0x450]
    // 0xbf7abc: r0 = addPlaceholder()
    //     0xbf7abc: bl              #0xbf7c70  ; [dart:ui] _NativeParagraphBuilder::addPlaceholder
    // 0xbf7ac0: ldur            x0, [fp, #-8]
    // 0xbf7ac4: tbnz            w0, #4, #0xbf7ad4
    // 0xbf7ac8: ldr             x16, [fp, #0x20]
    // 0xbf7acc: str             x16, [SP]
    // 0xbf7ad0: r0 = pop()
    //     0xbf7ad0: bl              #0xbf7b10  ; [dart:ui] _NativeParagraphBuilder::pop
    // 0xbf7ad4: r0 = Null
    //     0xbf7ad4: mov             x0, NULL
    // 0xbf7ad8: LeaveFrame
    //     0xbf7ad8: mov             SP, fp
    //     0xbf7adc: ldp             fp, lr, [SP], #0x10
    // 0xbf7ae0: ret
    //     0xbf7ae0: ret             
    // 0xbf7ae4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbf7ae4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbf7ae8: b               #0xbf7a0c
    // 0xbf7aec: r0 = NullCastErrorSharedWithFPURegs()
    //     0xbf7aec: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xbf7af0: stp             q1, q2, [SP, #-0x20]!
    // 0xbf7af4: SaveReg d0
    //     0xbf7af4: str             q0, [SP, #-0x10]!
    // 0xbf7af8: SaveReg r1
    //     0xbf7af8: str             x1, [SP, #-8]!
    // 0xbf7afc: r0 = AllocateDouble()
    //     0xbf7afc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xbf7b00: RestoreReg r1
    //     0xbf7b00: ldr             x1, [SP], #8
    // 0xbf7b04: RestoreReg d0
    //     0xbf7b04: ldr             q0, [SP], #0x10
    // 0xbf7b08: ldp             q1, q2, [SP], #0x20
    // 0xbf7b0c: b               #0xbf7a94
  }
}

// class id: 3679, size: 0xb8, field offset: 0x10
class _Editable extends MultiChildRenderObjectWidget {

  _ _Editable(/* No info */) {
    // ** addr: 0x95a804, size: 0x324
    // 0x95a804: EnterFrame
    //     0x95a804: stp             fp, lr, [SP, #-0x10]!
    //     0x95a808: mov             fp, SP
    // 0x95a80c: AllocStack(0x10)
    //     0x95a80c: sub             SP, SP, #0x10
    // 0x95a810: r8 = Instance_CupertinoDynamicColor
    //     0x95a810: add             x8, PP, #0x2a, lsl #12  ; [pp+0x2a630] Obj!CupertinoDynamicColor@c3c071
    //     0x95a814: ldr             x8, [x8, #0x630]
    // 0x95a818: r7 = true
    //     0x95a818: add             x7, NULL, #0x20  ; true
    // 0x95a81c: r6 = Instance_TextWidthBasis
    //     0x95a81c: add             x6, PP, #0x12, lsl #12  ; [pp+0x128d0] Obj!TextWidthBasis@c43e31
    //     0x95a820: ldr             x6, [x6, #0x8d0]
    // 0x95a824: r5 = false
    //     0x95a824: add             x5, NULL, #0x30  ; false
    // 0x95a828: r4 = "•"
    //     0x95a828: add             x4, PP, #0x1f, lsl #12  ; [pp+0x1fde0] "•"
    //     0x95a82c: ldr             x4, [x4, #0xde0]
    // 0x95a830: r3 = Instance_BoxHeightStyle
    //     0x95a830: ldr             x3, [PP, #0x5cf8]  ; [pp+0x5cf8] Obj!BoxHeightStyle@c46cc1
    // 0x95a834: r2 = Instance_BoxWidthStyle
    //     0x95a834: ldr             x2, [PP, #0x5d00]  ; [pp+0x5d00] Obj!BoxWidthStyle@c46ca1
    // 0x95a838: r1 = Instance_Clip
    //     0x95a838: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x95a83c: ldr             x1, [x1, #0x438]
    // 0x95a840: CheckStackOverflow
    //     0x95a840: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95a844: cmp             SP, x16
    //     0x95a848: b.ls            #0x95ab20
    // 0x95a84c: ldr             x0, [fp, #0x98]
    // 0x95a850: ldr             x9, [fp, #0xe0]
    // 0x95a854: StoreField: r9->field_f = r0
    //     0x95a854: stur            w0, [x9, #0xf]
    //     0x95a858: ldurb           w16, [x9, #-1]
    //     0x95a85c: ldurb           w17, [x0, #-1]
    //     0x95a860: and             x16, x17, x16, lsr #2
    //     0x95a864: tst             x16, HEAP, lsr #32
    //     0x95a868: b.eq            #0x95a870
    //     0x95a86c: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a870: ldr             x0, [fp, #0x10]
    // 0x95a874: StoreField: r9->field_13 = r0
    //     0x95a874: stur            w0, [x9, #0x13]
    //     0x95a878: ldurb           w16, [x9, #-1]
    //     0x95a87c: ldurb           w17, [x0, #-1]
    //     0x95a880: and             x16, x17, x16, lsr #2
    //     0x95a884: tst             x16, HEAP, lsr #32
    //     0x95a888: b.eq            #0x95a890
    //     0x95a88c: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a890: ldr             x0, [fp, #0x40]
    // 0x95a894: StoreField: r9->field_1b = r0
    //     0x95a894: stur            w0, [x9, #0x1b]
    //     0x95a898: ldurb           w16, [x9, #-1]
    //     0x95a89c: ldurb           w17, [x0, #-1]
    //     0x95a8a0: and             x16, x17, x16, lsr #2
    //     0x95a8a4: tst             x16, HEAP, lsr #32
    //     0x95a8a8: b.eq            #0x95a8b0
    //     0x95a8ac: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a8b0: ldr             x0, [fp, #0xa8]
    // 0x95a8b4: StoreField: r9->field_1f = r0
    //     0x95a8b4: stur            w0, [x9, #0x1f]
    //     0x95a8b8: ldurb           w16, [x9, #-1]
    //     0x95a8bc: ldurb           w17, [x0, #-1]
    //     0x95a8c0: and             x16, x17, x16, lsr #2
    //     0x95a8c4: tst             x16, HEAP, lsr #32
    //     0x95a8c8: b.eq            #0x95a8d0
    //     0x95a8cc: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a8d0: ldr             x0, [fp, #0xd8]
    // 0x95a8d4: ArrayStore: r9[0] = r0  ; List_4
    //     0x95a8d4: stur            w0, [x9, #0x17]
    //     0x95a8d8: ldurb           w16, [x9, #-1]
    //     0x95a8dc: ldurb           w17, [x0, #-1]
    //     0x95a8e0: and             x16, x17, x16, lsr #2
    //     0x95a8e4: tst             x16, HEAP, lsr #32
    //     0x95a8e8: b.eq            #0x95a8f0
    //     0x95a8ec: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a8f0: StoreField: r9->field_23 = r8
    //     0x95a8f0: stur            w8, [x9, #0x23]
    // 0x95a8f4: ldr             x0, [fp, #0x48]
    // 0x95a8f8: StoreField: r9->field_27 = r0
    //     0x95a8f8: stur            w0, [x9, #0x27]
    //     0x95a8fc: ldurb           w16, [x9, #-1]
    //     0x95a900: ldurb           w17, [x0, #-1]
    //     0x95a904: and             x16, x17, x16, lsr #2
    //     0x95a908: tst             x16, HEAP, lsr #32
    //     0x95a90c: b.eq            #0x95a914
    //     0x95a910: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a914: StoreField: r9->field_2b = r7
    //     0x95a914: stur            w7, [x9, #0x2b]
    // 0x95a918: ldr             x0, [fp, #0x58]
    // 0x95a91c: StoreField: r9->field_2f = r0
    //     0x95a91c: stur            w0, [x9, #0x2f]
    // 0x95a920: StoreField: r9->field_6f = r6
    //     0x95a920: stur            w6, [x9, #0x6f]
    // 0x95a924: ldr             x0, [fp, #0xa0]
    // 0x95a928: StoreField: r9->field_33 = r0
    //     0x95a928: stur            w0, [x9, #0x33]
    // 0x95a92c: ldr             x0, [fp, #0x88]
    // 0x95a930: StoreField: r9->field_37 = r0
    //     0x95a930: stur            x0, [x9, #0x37]
    // 0x95a934: ldr             x0, [fp, #0x80]
    // 0x95a938: StoreField: r9->field_3f = r0
    //     0x95a938: stur            w0, [x9, #0x3f]
    // 0x95a93c: StoreField: r9->field_43 = r5
    //     0x95a93c: stur            w5, [x9, #0x43]
    // 0x95a940: ldr             x0, [fp, #0x38]
    // 0x95a944: StoreField: r9->field_47 = r0
    //     0x95a944: stur            w0, [x9, #0x47]
    //     0x95a948: ldurb           w16, [x9, #-1]
    //     0x95a94c: ldurb           w17, [x0, #-1]
    //     0x95a950: and             x16, x17, x16, lsr #2
    //     0x95a954: tst             x16, HEAP, lsr #32
    //     0x95a958: b.eq            #0x95a960
    //     0x95a95c: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a960: ldr             x0, [fp, #0x50]
    // 0x95a964: StoreField: r9->field_4b = r0
    //     0x95a964: stur            w0, [x9, #0x4b]
    //     0x95a968: ldurb           w16, [x9, #-1]
    //     0x95a96c: ldurb           w17, [x0, #-1]
    //     0x95a970: and             x16, x17, x16, lsr #2
    //     0x95a974: tst             x16, HEAP, lsr #32
    //     0x95a978: b.eq            #0x95a980
    //     0x95a97c: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a980: ldr             d0, [fp, #0x20]
    // 0x95a984: StoreField: r9->field_4f = d0
    //     0x95a984: stur            d0, [x9, #0x4f]
    // 0x95a988: ldr             x0, [fp, #0x30]
    // 0x95a98c: StoreField: r9->field_57 = r0
    //     0x95a98c: stur            w0, [x9, #0x57]
    //     0x95a990: ldurb           w16, [x9, #-1]
    //     0x95a994: ldurb           w17, [x0, #-1]
    //     0x95a998: and             x16, x17, x16, lsr #2
    //     0x95a99c: tst             x16, HEAP, lsr #32
    //     0x95a9a0: b.eq            #0x95a9a8
    //     0x95a9a4: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a9a8: ldr             x0, [fp, #0x28]
    // 0x95a9ac: StoreField: r9->field_5b = r0
    //     0x95a9ac: stur            w0, [x9, #0x5b]
    //     0x95a9b0: ldurb           w16, [x9, #-1]
    //     0x95a9b4: ldurb           w17, [x0, #-1]
    //     0x95a9b8: and             x16, x17, x16, lsr #2
    //     0x95a9bc: tst             x16, HEAP, lsr #32
    //     0x95a9c0: b.eq            #0x95a9c8
    //     0x95a9c4: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a9c8: StoreField: r9->field_63 = r4
    //     0x95a9c8: stur            w4, [x9, #0x63]
    // 0x95a9cc: StoreField: r9->field_67 = r5
    //     0x95a9cc: stur            w5, [x9, #0x67]
    // 0x95a9d0: ldr             x0, [fp, #0x78]
    // 0x95a9d4: StoreField: r9->field_73 = r0
    //     0x95a9d4: stur            w0, [x9, #0x73]
    //     0x95a9d8: ldurb           w16, [x9, #-1]
    //     0x95a9dc: ldurb           w17, [x0, #-1]
    //     0x95a9e0: and             x16, x17, x16, lsr #2
    //     0x95a9e4: tst             x16, HEAP, lsr #32
    //     0x95a9e8: b.eq            #0x95a9f0
    //     0x95a9ec: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95a9f0: StoreField: r9->field_77 = r7
    //     0x95a9f0: stur            w7, [x9, #0x77]
    // 0x95a9f4: ldr             d1, [fp, #0xc0]
    // 0x95a9f8: StoreField: r9->field_7b = d1
    //     0x95a9f8: stur            d1, [x9, #0x7b]
    // 0x95a9fc: ldr             x0, [fp, #0xc8]
    // 0x95aa00: StoreField: r9->field_87 = r0
    //     0x95aa00: stur            w0, [x9, #0x87]
    //     0x95aa04: ldurb           w16, [x9, #-1]
    //     0x95aa08: ldurb           w17, [x0, #-1]
    //     0x95aa0c: and             x16, x17, x16, lsr #2
    //     0x95aa10: tst             x16, HEAP, lsr #32
    //     0x95aa14: b.eq            #0x95aa1c
    //     0x95aa18: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95aa1c: ldr             x0, [fp, #0xd0]
    // 0x95aa20: StoreField: r9->field_8b = r0
    //     0x95aa20: stur            w0, [x9, #0x8b]
    //     0x95aa24: ldurb           w16, [x9, #-1]
    //     0x95aa28: ldurb           w17, [x0, #-1]
    //     0x95aa2c: and             x16, x17, x16, lsr #2
    //     0x95aa30: tst             x16, HEAP, lsr #32
    //     0x95aa34: b.eq            #0x95aa3c
    //     0x95aa38: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95aa3c: ldr             x0, [fp, #0x70]
    // 0x95aa40: StoreField: r9->field_8f = r0
    //     0x95aa40: stur            w0, [x9, #0x8f]
    // 0x95aa44: StoreField: r9->field_93 = r3
    //     0x95aa44: stur            w3, [x9, #0x93]
    // 0x95aa48: StoreField: r9->field_97 = r2
    //     0x95aa48: stur            w2, [x9, #0x97]
    // 0x95aa4c: ldr             x0, [fp, #0xb0]
    // 0x95aa50: StoreField: r9->field_9b = r0
    //     0x95aa50: stur            w0, [x9, #0x9b]
    // 0x95aa54: ldr             x0, [fp, #0x18]
    // 0x95aa58: StoreField: r9->field_9f = r0
    //     0x95aa58: stur            w0, [x9, #0x9f]
    //     0x95aa5c: ldurb           w16, [x9, #-1]
    //     0x95aa60: ldurb           w17, [x0, #-1]
    //     0x95aa64: and             x16, x17, x16, lsr #2
    //     0x95aa68: tst             x16, HEAP, lsr #32
    //     0x95aa6c: b.eq            #0x95aa74
    //     0x95aa70: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95aa74: ldr             d1, [fp, #0xb8]
    // 0x95aa78: StoreField: r9->field_a3 = d1
    //     0x95aa78: stur            d1, [x9, #0xa3]
    // 0x95aa7c: ldr             x0, [fp, #0x60]
    // 0x95aa80: StoreField: r9->field_ab = r0
    //     0x95aa80: stur            w0, [x9, #0xab]
    //     0x95aa84: ldurb           w16, [x9, #-1]
    //     0x95aa88: ldurb           w17, [x0, #-1]
    //     0x95aa8c: and             x16, x17, x16, lsr #2
    //     0x95aa90: tst             x16, HEAP, lsr #32
    //     0x95aa94: b.eq            #0x95aa9c
    //     0x95aa98: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95aa9c: ldr             x0, [fp, #0x68]
    // 0x95aaa0: StoreField: r9->field_af = r0
    //     0x95aaa0: stur            w0, [x9, #0xaf]
    //     0x95aaa4: ldurb           w16, [x9, #-1]
    //     0x95aaa8: ldurb           w17, [x0, #-1]
    //     0x95aaac: and             x16, x17, x16, lsr #2
    //     0x95aab0: tst             x16, HEAP, lsr #32
    //     0x95aab4: b.eq            #0x95aabc
    //     0x95aab8: bl              #0xc5d7fc  ; WriteBarrierWrappersStub
    // 0x95aabc: StoreField: r9->field_b3 = r1
    //     0x95aabc: stur            w1, [x9, #0xb3]
    // 0x95aac0: ldr             x16, [fp, #0x98]
    // 0x95aac4: str             x16, [SP, #8]
    // 0x95aac8: str             d0, [SP]
    // 0x95aacc: r0 = extractFromInlineSpan()
    //     0x95aacc: bl              #0x6e609c  ; [package:flutter/src/widgets/widget_span.dart] WidgetSpan::extractFromInlineSpan
    // 0x95aad0: ldr             x1, [fp, #0xe0]
    // 0x95aad4: StoreField: r1->field_b = r0
    //     0x95aad4: stur            w0, [x1, #0xb]
    //     0x95aad8: ldurb           w16, [x1, #-1]
    //     0x95aadc: ldurb           w17, [x0, #-1]
    //     0x95aae0: and             x16, x17, x16, lsr #2
    //     0x95aae4: tst             x16, HEAP, lsr #32
    //     0x95aae8: b.eq            #0x95aaf0
    //     0x95aaec: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x95aaf0: ldr             x0, [fp, #0x90]
    // 0x95aaf4: StoreField: r1->field_7 = r0
    //     0x95aaf4: stur            w0, [x1, #7]
    //     0x95aaf8: ldurb           w16, [x1, #-1]
    //     0x95aafc: ldurb           w17, [x0, #-1]
    //     0x95ab00: and             x16, x17, x16, lsr #2
    //     0x95ab04: tst             x16, HEAP, lsr #32
    //     0x95ab08: b.eq            #0x95ab10
    //     0x95ab0c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x95ab10: r0 = Null
    //     0x95ab10: mov             x0, NULL
    // 0x95ab14: LeaveFrame
    //     0x95ab14: mov             SP, fp
    //     0x95ab18: ldp             fp, lr, [SP], #0x10
    // 0x95ab1c: ret
    //     0x95ab1c: ret             
    // 0x95ab20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95ab20: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95ab24: b               #0x95a84c
  }
  _ updateRenderObject(/* No info */) {
    // ** addr: 0xa6a690, size: 0x3b4
    // 0xa6a690: EnterFrame
    //     0xa6a690: stp             fp, lr, [SP, #-0x10]!
    //     0xa6a694: mov             fp, SP
    // 0xa6a698: AllocStack(0x18)
    //     0xa6a698: sub             SP, SP, #0x18
    // 0xa6a69c: CheckStackOverflow
    //     0xa6a69c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa6a6a0: cmp             SP, x16
    //     0xa6a6a4: b.ls            #0xa6aa3c
    // 0xa6a6a8: ldr             x0, [fp, #0x10]
    // 0xa6a6ac: r2 = Null
    //     0xa6a6ac: mov             x2, NULL
    // 0xa6a6b0: r1 = Null
    //     0xa6a6b0: mov             x1, NULL
    // 0xa6a6b4: r4 = 59
    //     0xa6a6b4: movz            x4, #0x3b
    // 0xa6a6b8: branchIfSmi(r0, 0xa6a6c4)
    //     0xa6a6b8: tbz             w0, #0, #0xa6a6c4
    // 0xa6a6bc: r4 = LoadClassIdInstr(r0)
    //     0xa6a6bc: ldur            x4, [x0, #-1]
    //     0xa6a6c0: ubfx            x4, x4, #0xc, #0x14
    // 0xa6a6c4: cmp             x4, #0x811
    // 0xa6a6c8: b.eq            #0xa6a6dc
    // 0xa6a6cc: r8 = RenderEditable
    //     0xa6a6cc: ldr             x8, [PP, #0x5fd8]  ; [pp+0x5fd8] Type: RenderEditable
    // 0xa6a6d0: r3 = Null
    //     0xa6a6d0: add             x3, PP, #0x47, lsl #12  ; [pp+0x473e8] Null
    //     0xa6a6d4: ldr             x3, [x3, #0x3e8]
    // 0xa6a6d8: r0 = DefaultTypeTest()
    //     0xa6a6d8: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xa6a6dc: ldr             x0, [fp, #0x20]
    // 0xa6a6e0: LoadField: r1 = r0->field_f
    //     0xa6a6e0: ldur            w1, [x0, #0xf]
    // 0xa6a6e4: DecompressPointer r1
    //     0xa6a6e4: add             x1, x1, HEAP, lsl #32
    // 0xa6a6e8: ldr             x16, [fp, #0x10]
    // 0xa6a6ec: stp             x1, x16, [SP]
    // 0xa6a6f0: r0 = text=()
    //     0xa6a6f0: bl              #0xa6c0e0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::text=
    // 0xa6a6f4: ldr             x0, [fp, #0x20]
    // 0xa6a6f8: ArrayLoad: r2 = r0[0]  ; List_4
    //     0xa6a6f8: ldur            w2, [x0, #0x17]
    // 0xa6a6fc: DecompressPointer r2
    //     0xa6a6fc: add             x2, x2, HEAP, lsl #32
    // 0xa6a700: ldr             x1, [fp, #0x10]
    // 0xa6a704: stur            x2, [fp, #-8]
    // 0xa6a708: LoadField: r0 = r1->field_83
    //     0xa6a708: ldur            w0, [x1, #0x83]
    // 0xa6a70c: DecompressPointer r0
    //     0xa6a70c: add             x0, x0, HEAP, lsl #32
    // 0xa6a710: r16 = Sentinel
    //     0xa6a710: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa6a714: cmp             w0, w16
    // 0xa6a718: b.ne            #0xa6a724
    // 0xa6a71c: r2 = _caretPainter
    //     0xa6a71c: ldr             x2, [PP, #0x6160]  ; [pp+0x6160] Field <RenderEditable._caretPainter@344245603>: late final (offset: 0x84)
    // 0xa6a720: r0 = InitLateFinalInstanceField()
    //     0xa6a720: bl              #0xc5d018  ; InitLateFinalInstanceFieldStub
    // 0xa6a724: ldur            x16, [fp, #-8]
    // 0xa6a728: stp             x16, x0, [SP]
    // 0xa6a72c: r0 = caretColor=()
    //     0xa6a72c: bl              #0x5d13c8  ; [package:flutter/src/rendering/editable.dart] _CaretPainter::caretColor=
    // 0xa6a730: ldr             x0, [fp, #0x20]
    // 0xa6a734: LoadField: r1 = r0->field_1b
    //     0xa6a734: ldur            w1, [x0, #0x1b]
    // 0xa6a738: DecompressPointer r1
    //     0xa6a738: add             x1, x1, HEAP, lsl #32
    // 0xa6a73c: ldr             x16, [fp, #0x10]
    // 0xa6a740: stp             x1, x16, [SP]
    // 0xa6a744: r0 = startHandleLayerLink=()
    //     0xa6a744: bl              #0xa6c060  ; [package:flutter/src/rendering/editable.dart] RenderEditable::startHandleLayerLink=
    // 0xa6a748: ldr             x0, [fp, #0x20]
    // 0xa6a74c: LoadField: r1 = r0->field_1f
    //     0xa6a74c: ldur            w1, [x0, #0x1f]
    // 0xa6a750: DecompressPointer r1
    //     0xa6a750: add             x1, x1, HEAP, lsl #32
    // 0xa6a754: ldr             x16, [fp, #0x10]
    // 0xa6a758: stp             x1, x16, [SP]
    // 0xa6a75c: r0 = endHandleLayerLink=()
    //     0xa6a75c: bl              #0xa6bfe0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::endHandleLayerLink=
    // 0xa6a760: ldr             x16, [fp, #0x10]
    // 0xa6a764: r30 = Instance_CupertinoDynamicColor
    //     0xa6a764: add             lr, PP, #0x2a, lsl #12  ; [pp+0x2a630] Obj!CupertinoDynamicColor@c3c071
    //     0xa6a768: ldr             lr, [lr, #0x630]
    // 0xa6a76c: stp             lr, x16, [SP]
    // 0xa6a770: r0 = backgroundCursorColor=()
    //     0xa6a770: bl              #0xa6be80  ; [package:flutter/src/rendering/editable.dart] RenderEditable::backgroundCursorColor=
    // 0xa6a774: ldr             x0, [fp, #0x20]
    // 0xa6a778: LoadField: r1 = r0->field_27
    //     0xa6a778: ldur            w1, [x0, #0x27]
    // 0xa6a77c: DecompressPointer r1
    //     0xa6a77c: add             x1, x1, HEAP, lsl #32
    // 0xa6a780: ldr             x16, [fp, #0x10]
    // 0xa6a784: stp             x1, x16, [SP]
    // 0xa6a788: r0 = showCursor=()
    //     0xa6a788: bl              #0xa6bd68  ; [package:flutter/src/rendering/editable.dart] RenderEditable::showCursor=
    // 0xa6a78c: ldr             x16, [fp, #0x10]
    // 0xa6a790: r30 = true
    //     0xa6a790: add             lr, NULL, #0x20  ; true
    // 0xa6a794: stp             lr, x16, [SP]
    // 0xa6a798: r0 = forceLine=()
    //     0xa6a798: bl              #0xa6bd08  ; [package:flutter/src/rendering/editable.dart] RenderEditable::forceLine=
    // 0xa6a79c: ldr             x0, [fp, #0x20]
    // 0xa6a7a0: LoadField: r1 = r0->field_2f
    //     0xa6a7a0: ldur            w1, [x0, #0x2f]
    // 0xa6a7a4: DecompressPointer r1
    //     0xa6a7a4: add             x1, x1, HEAP, lsl #32
    // 0xa6a7a8: ldr             x16, [fp, #0x10]
    // 0xa6a7ac: stp             x1, x16, [SP]
    // 0xa6a7b0: r0 = readOnly=()
    //     0xa6a7b0: bl              #0xa6bca4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::readOnly=
    // 0xa6a7b4: ldr             x0, [fp, #0x20]
    // 0xa6a7b8: LoadField: r1 = r0->field_33
    //     0xa6a7b8: ldur            w1, [x0, #0x33]
    // 0xa6a7bc: DecompressPointer r1
    //     0xa6a7bc: add             x1, x1, HEAP, lsl #32
    // 0xa6a7c0: ldr             x16, [fp, #0x10]
    // 0xa6a7c4: stp             x1, x16, [SP]
    // 0xa6a7c8: r0 = hasFocus=()
    //     0xa6a7c8: bl              #0xa6bc40  ; [package:flutter/src/rendering/editable.dart] RenderEditable::hasFocus=
    // 0xa6a7cc: ldr             x0, [fp, #0x20]
    // 0xa6a7d0: LoadField: r1 = r0->field_37
    //     0xa6a7d0: ldur            x1, [x0, #0x37]
    // 0xa6a7d4: ldr             x16, [fp, #0x10]
    // 0xa6a7d8: stp             x1, x16, [SP]
    // 0xa6a7dc: r0 = maxLines=()
    //     0xa6a7dc: bl              #0xa6bb50  ; [package:flutter/src/rendering/editable.dart] RenderEditable::maxLines=
    // 0xa6a7e0: ldr             x0, [fp, #0x20]
    // 0xa6a7e4: LoadField: r1 = r0->field_3f
    //     0xa6a7e4: ldur            w1, [x0, #0x3f]
    // 0xa6a7e8: DecompressPointer r1
    //     0xa6a7e8: add             x1, x1, HEAP, lsl #32
    // 0xa6a7ec: ldr             x16, [fp, #0x10]
    // 0xa6a7f0: stp             x1, x16, [SP]
    // 0xa6a7f4: r0 = minLines=()
    //     0xa6a7f4: bl              #0xa6baec  ; [package:flutter/src/rendering/editable.dart] RenderEditable::minLines=
    // 0xa6a7f8: ldr             x16, [fp, #0x10]
    // 0xa6a7fc: r30 = false
    //     0xa6a7fc: add             lr, NULL, #0x30  ; false
    // 0xa6a800: stp             lr, x16, [SP]
    // 0xa6a804: r0 = _NativeCodec._()
    //     0xa6a804: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6a808: ldr             x0, [fp, #0x20]
    // 0xa6a80c: LoadField: r1 = r0->field_47
    //     0xa6a80c: ldur            w1, [x0, #0x47]
    // 0xa6a810: DecompressPointer r1
    //     0xa6a810: add             x1, x1, HEAP, lsl #32
    // 0xa6a814: ldr             x16, [fp, #0x10]
    // 0xa6a818: stp             x1, x16, [SP]
    // 0xa6a81c: r0 = strutStyle=()
    //     0xa6a81c: bl              #0xa6ba54  ; [package:flutter/src/rendering/editable.dart] RenderEditable::strutStyle=
    // 0xa6a820: ldr             x0, [fp, #0x20]
    // 0xa6a824: LoadField: r1 = r0->field_4b
    //     0xa6a824: ldur            w1, [x0, #0x4b]
    // 0xa6a828: DecompressPointer r1
    //     0xa6a828: add             x1, x1, HEAP, lsl #32
    // 0xa6a82c: ldr             x16, [fp, #0x10]
    // 0xa6a830: stp             x1, x16, [SP]
    // 0xa6a834: r0 = selectionColor=()
    //     0xa6a834: bl              #0xa6ba0c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionColor=
    // 0xa6a838: ldr             x0, [fp, #0x20]
    // 0xa6a83c: LoadField: d0 = r0->field_4f
    //     0xa6a83c: ldur            d0, [x0, #0x4f]
    // 0xa6a840: ldr             x16, [fp, #0x10]
    // 0xa6a844: str             x16, [SP, #8]
    // 0xa6a848: str             d0, [SP]
    // 0xa6a84c: r0 = textScaleFactor=()
    //     0xa6a84c: bl              #0xa6b994  ; [package:flutter/src/rendering/editable.dart] RenderEditable::textScaleFactor=
    // 0xa6a850: ldr             x0, [fp, #0x20]
    // 0xa6a854: LoadField: r1 = r0->field_57
    //     0xa6a854: ldur            w1, [x0, #0x57]
    // 0xa6a858: DecompressPointer r1
    //     0xa6a858: add             x1, x1, HEAP, lsl #32
    // 0xa6a85c: ldr             x16, [fp, #0x10]
    // 0xa6a860: stp             x1, x16, [SP]
    // 0xa6a864: r0 = textAlign=()
    //     0xa6a864: bl              #0xa6b8f8  ; [package:flutter/src/rendering/editable.dart] RenderEditable::textAlign=
    // 0xa6a868: ldr             x0, [fp, #0x20]
    // 0xa6a86c: LoadField: r1 = r0->field_5b
    //     0xa6a86c: ldur            w1, [x0, #0x5b]
    // 0xa6a870: DecompressPointer r1
    //     0xa6a870: add             x1, x1, HEAP, lsl #32
    // 0xa6a874: ldr             x16, [fp, #0x10]
    // 0xa6a878: stp             x1, x16, [SP]
    // 0xa6a87c: r0 = textDirection=()
    //     0xa6a87c: bl              #0xa6b878  ; [package:flutter/src/rendering/editable.dart] RenderEditable::textDirection=
    // 0xa6a880: ldr             x16, [fp, #0x18]
    // 0xa6a884: str             x16, [SP]
    // 0xa6a888: r0 = maybeLocaleOf()
    //     0xa6a888: bl              #0x876cb0  ; [package:flutter/src/widgets/localizations.dart] Localizations::maybeLocaleOf
    // 0xa6a88c: ldr             x16, [fp, #0x10]
    // 0xa6a890: stp             x0, x16, [SP]
    // 0xa6a894: r0 = locale=()
    //     0xa6a894: bl              #0xa6b7e0  ; [package:flutter/src/rendering/editable.dart] RenderEditable::locale=
    // 0xa6a898: ldr             x0, [fp, #0x20]
    // 0xa6a89c: LoadField: r1 = r0->field_13
    //     0xa6a89c: ldur            w1, [x0, #0x13]
    // 0xa6a8a0: DecompressPointer r1
    //     0xa6a8a0: add             x1, x1, HEAP, lsl #32
    // 0xa6a8a4: LoadField: r2 = r1->field_b
    //     0xa6a8a4: ldur            w2, [x1, #0xb]
    // 0xa6a8a8: DecompressPointer r2
    //     0xa6a8a8: add             x2, x2, HEAP, lsl #32
    // 0xa6a8ac: ldr             x16, [fp, #0x10]
    // 0xa6a8b0: stp             x2, x16, [SP]
    // 0xa6a8b4: r0 = selection=()
    //     0xa6a8b4: bl              #0xa6b734  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selection=
    // 0xa6a8b8: ldr             x0, [fp, #0x20]
    // 0xa6a8bc: LoadField: r1 = r0->field_73
    //     0xa6a8bc: ldur            w1, [x0, #0x73]
    // 0xa6a8c0: DecompressPointer r1
    //     0xa6a8c0: add             x1, x1, HEAP, lsl #32
    // 0xa6a8c4: ldr             x16, [fp, #0x10]
    // 0xa6a8c8: stp             x1, x16, [SP]
    // 0xa6a8cc: r0 = offset=()
    //     0xa6a8cc: bl              #0xa6b628  ; [package:flutter/src/rendering/editable.dart] RenderEditable::offset=
    // 0xa6a8d0: ldr             x1, [fp, #0x10]
    // 0xa6a8d4: r0 = true
    //     0xa6a8d4: add             x0, NULL, #0x20  ; true
    // 0xa6a8d8: StoreField: r1->field_97 = r0
    //     0xa6a8d8: stur            w0, [x1, #0x97]
    // 0xa6a8dc: stp             NULL, x1, [SP]
    // 0xa6a8e0: r0 = _NativeCodec._()
    //     0xa6a8e0: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6a8e4: ldr             x16, [fp, #0x10]
    // 0xa6a8e8: r30 = Instance_TextWidthBasis
    //     0xa6a8e8: add             lr, PP, #0x12, lsl #12  ; [pp+0x128d0] Obj!TextWidthBasis@c43e31
    //     0xa6a8ec: ldr             lr, [lr, #0x8d0]
    // 0xa6a8f0: stp             lr, x16, [SP]
    // 0xa6a8f4: r0 = _NativeCodec._()
    //     0xa6a8f4: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6a8f8: ldr             x16, [fp, #0x10]
    // 0xa6a8fc: r30 = false
    //     0xa6a8fc: add             lr, NULL, #0x30  ; false
    // 0xa6a900: stp             lr, x16, [SP]
    // 0xa6a904: r0 = _NativeCodec._()
    //     0xa6a904: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6a908: ldr             x0, [fp, #0x20]
    // 0xa6a90c: LoadField: d0 = r0->field_7b
    //     0xa6a90c: ldur            d0, [x0, #0x7b]
    // 0xa6a910: ldr             x16, [fp, #0x10]
    // 0xa6a914: str             x16, [SP, #8]
    // 0xa6a918: str             d0, [SP]
    // 0xa6a91c: r0 = cursorWidth=()
    //     0xa6a91c: bl              #0xa6b5c4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorWidth=
    // 0xa6a920: ldr             x16, [fp, #0x10]
    // 0xa6a924: stp             NULL, x16, [SP]
    // 0xa6a928: r0 = _NativeCodec._()
    //     0xa6a928: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6a92c: ldr             x0, [fp, #0x20]
    // 0xa6a930: LoadField: r1 = r0->field_87
    //     0xa6a930: ldur            w1, [x0, #0x87]
    // 0xa6a934: DecompressPointer r1
    //     0xa6a934: add             x1, x1, HEAP, lsl #32
    // 0xa6a938: ldr             x16, [fp, #0x10]
    // 0xa6a93c: stp             x1, x16, [SP]
    // 0xa6a940: r0 = cursorRadius=()
    //     0xa6a940: bl              #0xa6b568  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorRadius=
    // 0xa6a944: ldr             x0, [fp, #0x20]
    // 0xa6a948: LoadField: r1 = r0->field_8b
    //     0xa6a948: ldur            w1, [x0, #0x8b]
    // 0xa6a94c: DecompressPointer r1
    //     0xa6a94c: add             x1, x1, HEAP, lsl #32
    // 0xa6a950: ldr             x16, [fp, #0x10]
    // 0xa6a954: stp             x1, x16, [SP]
    // 0xa6a958: r0 = cursorOffset=()
    //     0xa6a958: bl              #0xa6b484  ; [package:flutter/src/rendering/editable.dart] RenderEditable::cursorOffset=
    // 0xa6a95c: ldr             x16, [fp, #0x10]
    // 0xa6a960: r30 = Instance_BoxHeightStyle
    //     0xa6a960: ldr             lr, [PP, #0x5cf8]  ; [pp+0x5cf8] Obj!BoxHeightStyle@c46cc1
    // 0xa6a964: stp             lr, x16, [SP]
    // 0xa6a968: r0 = selectionHeightStyle=()
    //     0xa6a968: bl              #0xa6b43c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionHeightStyle=
    // 0xa6a96c: ldr             x16, [fp, #0x10]
    // 0xa6a970: r30 = Instance_BoxWidthStyle
    //     0xa6a970: ldr             lr, [PP, #0x5d00]  ; [pp+0x5d00] Obj!BoxWidthStyle@c46ca1
    // 0xa6a974: stp             lr, x16, [SP]
    // 0xa6a978: r0 = selectionWidthStyle=()
    //     0xa6a978: bl              #0xa6b3f4  ; [package:flutter/src/rendering/editable.dart] RenderEditable::selectionWidthStyle=
    // 0xa6a97c: ldr             x0, [fp, #0x20]
    // 0xa6a980: LoadField: r1 = r0->field_9b
    //     0xa6a980: ldur            w1, [x0, #0x9b]
    // 0xa6a984: DecompressPointer r1
    //     0xa6a984: add             x1, x1, HEAP, lsl #32
    // 0xa6a988: ldr             x16, [fp, #0x10]
    // 0xa6a98c: stp             x1, x16, [SP]
    // 0xa6a990: r0 = enableInteractiveSelection=()
    //     0xa6a990: bl              #0xa6b37c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::enableInteractiveSelection=
    // 0xa6a994: ldr             x1, [fp, #0x20]
    // 0xa6a998: LoadField: r0 = r1->field_9f
    //     0xa6a998: ldur            w0, [x1, #0x9f]
    // 0xa6a99c: DecompressPointer r0
    //     0xa6a99c: add             x0, x0, HEAP, lsl #32
    // 0xa6a9a0: ldr             x2, [fp, #0x10]
    // 0xa6a9a4: StoreField: r2->field_ab = r0
    //     0xa6a9a4: stur            w0, [x2, #0xab]
    //     0xa6a9a8: ldurb           w16, [x2, #-1]
    //     0xa6a9ac: ldurb           w17, [x0, #-1]
    //     0xa6a9b0: and             x16, x17, x16, lsr #2
    //     0xa6a9b4: tst             x16, HEAP, lsr #32
    //     0xa6a9b8: b.eq            #0xa6a9c0
    //     0xa6a9bc: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa6a9c0: LoadField: d0 = r1->field_a3
    //     0xa6a9c0: ldur            d0, [x1, #0xa3]
    // 0xa6a9c4: str             x2, [SP, #8]
    // 0xa6a9c8: str             d0, [SP]
    // 0xa6a9cc: r0 = devicePixelRatio=()
    //     0xa6a9cc: bl              #0xa6b318  ; [package:flutter/src/rendering/editable.dart] RenderEditable::devicePixelRatio=
    // 0xa6a9d0: ldr             x0, [fp, #0x20]
    // 0xa6a9d4: LoadField: r1 = r0->field_8f
    //     0xa6a9d4: ldur            w1, [x0, #0x8f]
    // 0xa6a9d8: DecompressPointer r1
    //     0xa6a9d8: add             x1, x1, HEAP, lsl #32
    // 0xa6a9dc: ldr             x16, [fp, #0x10]
    // 0xa6a9e0: stp             x1, x16, [SP]
    // 0xa6a9e4: r0 = paintCursorAboveText=()
    //     0xa6a9e4: bl              #0xa6ac0c  ; [package:flutter/src/rendering/editable.dart] RenderEditable::paintCursorAboveText=
    // 0xa6a9e8: ldr             x0, [fp, #0x20]
    // 0xa6a9ec: LoadField: r1 = r0->field_af
    //     0xa6a9ec: ldur            w1, [x0, #0xaf]
    // 0xa6a9f0: DecompressPointer r1
    //     0xa6a9f0: add             x1, x1, HEAP, lsl #32
    // 0xa6a9f4: ldr             x16, [fp, #0x10]
    // 0xa6a9f8: stp             x1, x16, [SP]
    // 0xa6a9fc: r0 = promptRectColor=()
    //     0xa6a9fc: bl              #0xa6ab28  ; [package:flutter/src/rendering/editable.dart] RenderEditable::promptRectColor=
    // 0xa6aa00: ldr             x16, [fp, #0x10]
    // 0xa6aa04: r30 = Instance_Clip
    //     0xa6aa04: add             lr, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0xa6aa08: ldr             lr, [lr, #0x438]
    // 0xa6aa0c: stp             lr, x16, [SP]
    // 0xa6aa10: r0 = _NativeCodec._()
    //     0xa6aa10: bl              #0xc57104  ; [dart:ui] _NativeCodec::_NativeCodec._
    // 0xa6aa14: ldr             x0, [fp, #0x20]
    // 0xa6aa18: LoadField: r1 = r0->field_ab
    //     0xa6aa18: ldur            w1, [x0, #0xab]
    // 0xa6aa1c: DecompressPointer r1
    //     0xa6aa1c: add             x1, x1, HEAP, lsl #32
    // 0xa6aa20: ldr             x16, [fp, #0x10]
    // 0xa6aa24: stp             x1, x16, [SP]
    // 0xa6aa28: r0 = setPromptRectRange()
    //     0xa6aa28: bl              #0xa6aa44  ; [package:flutter/src/rendering/editable.dart] RenderEditable::setPromptRectRange
    // 0xa6aa2c: r0 = Null
    //     0xa6aa2c: mov             x0, NULL
    // 0xa6aa30: LeaveFrame
    //     0xa6aa30: mov             SP, fp
    //     0xa6aa34: ldp             fp, lr, [SP], #0x10
    // 0xa6aa38: ret
    //     0xa6aa38: ret             
    // 0xa6aa3c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa6aa3c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa6aa40: b               #0xa6a6a8
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0xa77088, size: 0x224
    // 0xa77088: EnterFrame
    //     0xa77088: stp             fp, lr, [SP, #-0x10]!
    //     0xa7708c: mov             fp, SP
    // 0xa77090: AllocStack(0x1b0)
    //     0xa77090: sub             SP, SP, #0x1b0
    // 0xa77094: CheckStackOverflow
    //     0xa77094: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa77098: cmp             SP, x16
    //     0xa7709c: b.ls            #0xa772a4
    // 0xa770a0: ldr             x0, [fp, #0x18]
    // 0xa770a4: LoadField: r1 = r0->field_f
    //     0xa770a4: ldur            w1, [x0, #0xf]
    // 0xa770a8: DecompressPointer r1
    //     0xa770a8: add             x1, x1, HEAP, lsl #32
    // 0xa770ac: stur            x1, [fp, #-0x68]
    // 0xa770b0: ArrayLoad: r2 = r0[0]  ; List_4
    //     0xa770b0: ldur            w2, [x0, #0x17]
    // 0xa770b4: DecompressPointer r2
    //     0xa770b4: add             x2, x2, HEAP, lsl #32
    // 0xa770b8: stur            x2, [fp, #-0x60]
    // 0xa770bc: LoadField: r3 = r0->field_1b
    //     0xa770bc: ldur            w3, [x0, #0x1b]
    // 0xa770c0: DecompressPointer r3
    //     0xa770c0: add             x3, x3, HEAP, lsl #32
    // 0xa770c4: stur            x3, [fp, #-0x58]
    // 0xa770c8: LoadField: r4 = r0->field_1f
    //     0xa770c8: ldur            w4, [x0, #0x1f]
    // 0xa770cc: DecompressPointer r4
    //     0xa770cc: add             x4, x4, HEAP, lsl #32
    // 0xa770d0: stur            x4, [fp, #-0x50]
    // 0xa770d4: LoadField: r5 = r0->field_27
    //     0xa770d4: ldur            w5, [x0, #0x27]
    // 0xa770d8: DecompressPointer r5
    //     0xa770d8: add             x5, x5, HEAP, lsl #32
    // 0xa770dc: stur            x5, [fp, #-0x48]
    // 0xa770e0: LoadField: r6 = r0->field_2f
    //     0xa770e0: ldur            w6, [x0, #0x2f]
    // 0xa770e4: DecompressPointer r6
    //     0xa770e4: add             x6, x6, HEAP, lsl #32
    // 0xa770e8: stur            x6, [fp, #-0x40]
    // 0xa770ec: LoadField: r7 = r0->field_33
    //     0xa770ec: ldur            w7, [x0, #0x33]
    // 0xa770f0: DecompressPointer r7
    //     0xa770f0: add             x7, x7, HEAP, lsl #32
    // 0xa770f4: stur            x7, [fp, #-0x38]
    // 0xa770f8: LoadField: r8 = r0->field_37
    //     0xa770f8: ldur            x8, [x0, #0x37]
    // 0xa770fc: stur            x8, [fp, #-0x30]
    // 0xa77100: LoadField: r9 = r0->field_3f
    //     0xa77100: ldur            w9, [x0, #0x3f]
    // 0xa77104: DecompressPointer r9
    //     0xa77104: add             x9, x9, HEAP, lsl #32
    // 0xa77108: stur            x9, [fp, #-0x28]
    // 0xa7710c: LoadField: r10 = r0->field_47
    //     0xa7710c: ldur            w10, [x0, #0x47]
    // 0xa77110: DecompressPointer r10
    //     0xa77110: add             x10, x10, HEAP, lsl #32
    // 0xa77114: stur            x10, [fp, #-0x20]
    // 0xa77118: LoadField: r11 = r0->field_4b
    //     0xa77118: ldur            w11, [x0, #0x4b]
    // 0xa7711c: DecompressPointer r11
    //     0xa7711c: add             x11, x11, HEAP, lsl #32
    // 0xa77120: stur            x11, [fp, #-0x18]
    // 0xa77124: LoadField: d0 = r0->field_4f
    //     0xa77124: ldur            d0, [x0, #0x4f]
    // 0xa77128: stur            d0, [fp, #-0xc8]
    // 0xa7712c: LoadField: r12 = r0->field_57
    //     0xa7712c: ldur            w12, [x0, #0x57]
    // 0xa77130: DecompressPointer r12
    //     0xa77130: add             x12, x12, HEAP, lsl #32
    // 0xa77134: stur            x12, [fp, #-0x10]
    // 0xa77138: LoadField: r13 = r0->field_5b
    //     0xa77138: ldur            w13, [x0, #0x5b]
    // 0xa7713c: DecompressPointer r13
    //     0xa7713c: add             x13, x13, HEAP, lsl #32
    // 0xa77140: stur            x13, [fp, #-8]
    // 0xa77144: ldr             x16, [fp, #0x10]
    // 0xa77148: str             x16, [SP]
    // 0xa7714c: r0 = maybeLocaleOf()
    //     0xa7714c: bl              #0x876cb0  ; [package:flutter/src/widgets/localizations.dart] Localizations::maybeLocaleOf
    // 0xa77150: mov             x1, x0
    // 0xa77154: ldr             x0, [fp, #0x18]
    // 0xa77158: stur            x1, [fp, #-0xb8]
    // 0xa7715c: LoadField: r2 = r0->field_13
    //     0xa7715c: ldur            w2, [x0, #0x13]
    // 0xa77160: DecompressPointer r2
    //     0xa77160: add             x2, x2, HEAP, lsl #32
    // 0xa77164: LoadField: r3 = r2->field_b
    //     0xa77164: ldur            w3, [x2, #0xb]
    // 0xa77168: DecompressPointer r3
    //     0xa77168: add             x3, x3, HEAP, lsl #32
    // 0xa7716c: stur            x3, [fp, #-0xb0]
    // 0xa77170: LoadField: r2 = r0->field_73
    //     0xa77170: ldur            w2, [x0, #0x73]
    // 0xa77174: DecompressPointer r2
    //     0xa77174: add             x2, x2, HEAP, lsl #32
    // 0xa77178: stur            x2, [fp, #-0xa8]
    // 0xa7717c: LoadField: d0 = r0->field_7b
    //     0xa7717c: ldur            d0, [x0, #0x7b]
    // 0xa77180: stur            d0, [fp, #-0xd8]
    // 0xa77184: LoadField: r4 = r0->field_87
    //     0xa77184: ldur            w4, [x0, #0x87]
    // 0xa77188: DecompressPointer r4
    //     0xa77188: add             x4, x4, HEAP, lsl #32
    // 0xa7718c: stur            x4, [fp, #-0xa0]
    // 0xa77190: LoadField: r5 = r0->field_8b
    //     0xa77190: ldur            w5, [x0, #0x8b]
    // 0xa77194: DecompressPointer r5
    //     0xa77194: add             x5, x5, HEAP, lsl #32
    // 0xa77198: stur            x5, [fp, #-0x98]
    // 0xa7719c: LoadField: r6 = r0->field_8f
    //     0xa7719c: ldur            w6, [x0, #0x8f]
    // 0xa771a0: DecompressPointer r6
    //     0xa771a0: add             x6, x6, HEAP, lsl #32
    // 0xa771a4: stur            x6, [fp, #-0x90]
    // 0xa771a8: LoadField: r7 = r0->field_9b
    //     0xa771a8: ldur            w7, [x0, #0x9b]
    // 0xa771ac: DecompressPointer r7
    //     0xa771ac: add             x7, x7, HEAP, lsl #32
    // 0xa771b0: stur            x7, [fp, #-0x88]
    // 0xa771b4: LoadField: r8 = r0->field_9f
    //     0xa771b4: ldur            w8, [x0, #0x9f]
    // 0xa771b8: DecompressPointer r8
    //     0xa771b8: add             x8, x8, HEAP, lsl #32
    // 0xa771bc: stur            x8, [fp, #-0x80]
    // 0xa771c0: LoadField: d1 = r0->field_a3
    //     0xa771c0: ldur            d1, [x0, #0xa3]
    // 0xa771c4: stur            d1, [fp, #-0xd0]
    // 0xa771c8: LoadField: r9 = r0->field_ab
    //     0xa771c8: ldur            w9, [x0, #0xab]
    // 0xa771cc: DecompressPointer r9
    //     0xa771cc: add             x9, x9, HEAP, lsl #32
    // 0xa771d0: stur            x9, [fp, #-0x78]
    // 0xa771d4: LoadField: r10 = r0->field_af
    //     0xa771d4: ldur            w10, [x0, #0xaf]
    // 0xa771d8: DecompressPointer r10
    //     0xa771d8: add             x10, x10, HEAP, lsl #32
    // 0xa771dc: stur            x10, [fp, #-0x70]
    // 0xa771e0: r0 = RenderEditable()
    //     0xa771e0: bl              #0xa77878  ; AllocateRenderEditableStub -> RenderEditable (size=0x160)
    // 0xa771e4: stur            x0, [fp, #-0xc0]
    // 0xa771e8: ldur            x16, [fp, #-0x60]
    // 0xa771ec: stp             x16, x0, [SP, #0xc8]
    // 0xa771f0: ldur            x16, [fp, #-0x98]
    // 0xa771f4: ldur            lr, [fp, #-0xa0]
    // 0xa771f8: stp             lr, x16, [SP, #0xb8]
    // 0xa771fc: ldur            d0, [fp, #-0xd8]
    // 0xa77200: str             d0, [SP, #0xb0]
    // 0xa77204: ldur            d0, [fp, #-0xd0]
    // 0xa77208: str             d0, [SP, #0xa8]
    // 0xa7720c: ldur            x16, [fp, #-0x88]
    // 0xa77210: ldur            lr, [fp, #-0x50]
    // 0xa77214: stp             lr, x16, [SP, #0x98]
    // 0xa77218: ldur            x16, [fp, #-0x38]
    // 0xa7721c: ldur            lr, [fp, #-0xb8]
    // 0xa77220: stp             lr, x16, [SP, #0x88]
    // 0xa77224: ldur            x1, [fp, #-0x30]
    // 0xa77228: ldur            x16, [fp, #-0x28]
    // 0xa7722c: stp             x16, x1, [SP, #0x78]
    // 0xa77230: ldur            x16, [fp, #-0xa8]
    // 0xa77234: ldur            lr, [fp, #-0x90]
    // 0xa77238: stp             lr, x16, [SP, #0x68]
    // 0xa7723c: ldur            x16, [fp, #-0x70]
    // 0xa77240: ldur            lr, [fp, #-0x78]
    // 0xa77244: stp             lr, x16, [SP, #0x58]
    // 0xa77248: ldur            x16, [fp, #-0x40]
    // 0xa7724c: ldur            lr, [fp, #-0xb0]
    // 0xa77250: stp             lr, x16, [SP, #0x48]
    // 0xa77254: ldur            x16, [fp, #-0x18]
    // 0xa77258: ldur            lr, [fp, #-0x48]
    // 0xa7725c: stp             lr, x16, [SP, #0x38]
    // 0xa77260: ldur            x16, [fp, #-0x58]
    // 0xa77264: ldur            lr, [fp, #-0x20]
    // 0xa77268: stp             lr, x16, [SP, #0x28]
    // 0xa7726c: ldur            x16, [fp, #-0x68]
    // 0xa77270: ldur            lr, [fp, #-0x10]
    // 0xa77274: stp             lr, x16, [SP, #0x18]
    // 0xa77278: ldur            x16, [fp, #-8]
    // 0xa7727c: str             x16, [SP, #0x10]
    // 0xa77280: ldur            d0, [fp, #-0xc8]
    // 0xa77284: str             d0, [SP, #8]
    // 0xa77288: ldur            x16, [fp, #-0x80]
    // 0xa7728c: str             x16, [SP]
    // 0xa77290: r0 = RenderEditable()
    //     0xa77290: bl              #0xa772ac  ; [package:flutter/src/rendering/editable.dart] RenderEditable::RenderEditable
    // 0xa77294: ldur            x0, [fp, #-0xc0]
    // 0xa77298: LeaveFrame
    //     0xa77298: mov             SP, fp
    //     0xa7729c: ldp             fp, lr, [SP], #0x10
    // 0xa772a0: ret
    //     0xa772a0: ret             
    // 0xa772a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa772a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa772a8: b               #0xa770a0
  }
}

// class id: 3721, size: 0x18, field offset: 0x10
//   const constructor, 
class _CompositionCallback extends SingleChildRenderObjectWidget {

  _ updateRenderObject(/* No info */) {
    // ** addr: 0xa65fd0, size: 0x80
    // 0xa65fd0: EnterFrame
    //     0xa65fd0: stp             fp, lr, [SP, #-0x10]!
    //     0xa65fd4: mov             fp, SP
    // 0xa65fd8: AllocStack(0x10)
    //     0xa65fd8: sub             SP, SP, #0x10
    // 0xa65fdc: CheckStackOverflow
    //     0xa65fdc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa65fe0: cmp             SP, x16
    //     0xa65fe4: b.ls            #0xa66048
    // 0xa65fe8: ldr             x0, [fp, #0x10]
    // 0xa65fec: r2 = Null
    //     0xa65fec: mov             x2, NULL
    // 0xa65ff0: r1 = Null
    //     0xa65ff0: mov             x1, NULL
    // 0xa65ff4: r4 = 59
    //     0xa65ff4: movz            x4, #0x3b
    // 0xa65ff8: branchIfSmi(r0, 0xa66004)
    //     0xa65ff8: tbz             w0, #0, #0xa66004
    // 0xa65ffc: r4 = LoadClassIdInstr(r0)
    //     0xa65ffc: ldur            x4, [x0, #-1]
    //     0xa66000: ubfx            x4, x4, #0xc, #0x14
    // 0xa66004: cmp             x4, #0x847
    // 0xa66008: b.eq            #0xa66020
    // 0xa6600c: r8 = _RenderCompositionCallback
    //     0xa6600c: add             x8, PP, #0x47, lsl #12  ; [pp+0x47318] Type: _RenderCompositionCallback
    //     0xa66010: ldr             x8, [x8, #0x318]
    // 0xa66014: r3 = Null
    //     0xa66014: add             x3, PP, #0x47, lsl #12  ; [pp+0x47320] Null
    //     0xa66018: ldr             x3, [x3, #0x320]
    // 0xa6601c: r0 = DefaultTypeTest()
    //     0xa6601c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xa66020: ldr             x0, [fp, #0x20]
    // 0xa66024: LoadField: r1 = r0->field_13
    //     0xa66024: ldur            w1, [x0, #0x13]
    // 0xa66028: DecompressPointer r1
    //     0xa66028: add             x1, x1, HEAP, lsl #32
    // 0xa6602c: ldr             x16, [fp, #0x10]
    // 0xa66030: stp             x1, x16, [SP]
    // 0xa66034: r0 = enabled=()
    //     0xa66034: bl              #0xa66050  ; [package:flutter/src/widgets/editable_text.dart] _RenderCompositionCallback::enabled=
    // 0xa66038: r0 = Null
    //     0xa66038: mov             x0, NULL
    // 0xa6603c: LeaveFrame
    //     0xa6603c: mov             SP, fp
    //     0xa66040: ldp             fp, lr, [SP], #0x10
    // 0xa66044: ret
    //     0xa66044: ret             
    // 0xa66048: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa66048: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa6604c: b               #0xa65fe8
  }
  _ createRenderObject(/* No info */) {
    // ** addr: 0xa74e44, size: 0x7c
    // 0xa74e44: EnterFrame
    //     0xa74e44: stp             fp, lr, [SP, #-0x10]!
    //     0xa74e48: mov             fp, SP
    // 0xa74e4c: AllocStack(0x28)
    //     0xa74e4c: sub             SP, SP, #0x28
    // 0xa74e50: CheckStackOverflow
    //     0xa74e50: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa74e54: cmp             SP, x16
    //     0xa74e58: b.ls            #0xa74eb8
    // 0xa74e5c: ldr             x0, [fp, #0x18]
    // 0xa74e60: LoadField: r1 = r0->field_f
    //     0xa74e60: ldur            w1, [x0, #0xf]
    // 0xa74e64: DecompressPointer r1
    //     0xa74e64: add             x1, x1, HEAP, lsl #32
    // 0xa74e68: stur            x1, [fp, #-0x10]
    // 0xa74e6c: LoadField: r2 = r0->field_13
    //     0xa74e6c: ldur            w2, [x0, #0x13]
    // 0xa74e70: DecompressPointer r2
    //     0xa74e70: add             x2, x2, HEAP, lsl #32
    // 0xa74e74: stur            x2, [fp, #-8]
    // 0xa74e78: r0 = _RenderCompositionCallback()
    //     0xa74e78: bl              #0xa74ec0  ; Allocate_RenderCompositionCallbackStub -> _RenderCompositionCallback (size=0x70)
    // 0xa74e7c: mov             x1, x0
    // 0xa74e80: ldur            x0, [fp, #-0x10]
    // 0xa74e84: stur            x1, [fp, #-0x18]
    // 0xa74e88: StoreField: r1->field_63 = r0
    //     0xa74e88: stur            w0, [x1, #0x63]
    // 0xa74e8c: ldur            x0, [fp, #-8]
    // 0xa74e90: StoreField: r1->field_6b = r0
    //     0xa74e90: stur            w0, [x1, #0x6b]
    // 0xa74e94: str             x1, [SP]
    // 0xa74e98: r0 = RenderObject()
    //     0xa74e98: bl              #0x5b4f80  ; [package:flutter/src/rendering/object.dart] RenderObject::RenderObject
    // 0xa74e9c: ldur            x16, [fp, #-0x18]
    // 0xa74ea0: stp             NULL, x16, [SP]
    // 0xa74ea4: r0 = child=()
    //     0xa74ea4: bl              #0x86bd4c  ; [package:flutter/src/rendering/proxy_box.dart] _RenderProxyBox&RenderBox&RenderObjectWithChildMixin::child=
    // 0xa74ea8: ldur            x0, [fp, #-0x18]
    // 0xa74eac: LeaveFrame
    //     0xa74eac: mov             SP, fp
    //     0xa74eb0: ldp             fp, lr, [SP], #0x10
    // 0xa74eb4: ret
    //     0xa74eb4: ret             
    // 0xa74eb8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa74eb8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa74ebc: b               #0xa74e5c
  }
}

// class id: 4127, size: 0x20, field offset: 0xc
//   const constructor, 
class _ScribbleFocusable extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4d5dc, size: 0x48
    // 0xa4d5dc: EnterFrame
    //     0xa4d5dc: stp             fp, lr, [SP, #-0x10]!
    //     0xa4d5e0: mov             fp, SP
    // 0xa4d5e4: AllocStack(0x10)
    //     0xa4d5e4: sub             SP, SP, #0x10
    // 0xa4d5e8: CheckStackOverflow
    //     0xa4d5e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa4d5ec: cmp             SP, x16
    //     0xa4d5f0: b.ls            #0xa4d61c
    // 0xa4d5f4: r1 = <_ScribbleFocusable>
    //     0xa4d5f4: add             x1, PP, #0x47, lsl #12  ; [pp+0x472e0] TypeArguments: <_ScribbleFocusable>
    //     0xa4d5f8: ldr             x1, [x1, #0x2e0]
    // 0xa4d5fc: r0 = _ScribbleFocusableState()
    //     0xa4d5fc: bl              #0xa4d6d0  ; Allocate_ScribbleFocusableStateStub -> _ScribbleFocusableState (size=0x18)
    // 0xa4d600: stur            x0, [fp, #-8]
    // 0xa4d604: str             x0, [SP]
    // 0xa4d608: r0 = _ScribbleFocusableState()
    //     0xa4d608: bl              #0xa4d624  ; [package:flutter/src/widgets/editable_text.dart] _ScribbleFocusableState::_ScribbleFocusableState
    // 0xa4d60c: ldur            x0, [fp, #-8]
    // 0xa4d610: LeaveFrame
    //     0xa4d610: mov             SP, fp
    //     0xa4d614: ldp             fp, lr, [SP], #0x10
    // 0xa4d618: ret
    //     0xa4d618: ret             
    // 0xa4d61c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa4d61c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa4d620: b               #0xa4d5f4
  }
}

// class id: 4128, size: 0x128, field offset: 0xc
class EditableText extends StatefulWidget {

  static _ getEditableButtonItems(/* No info */) {
    // ** addr: 0x69c8e4, size: 0x438
    // 0x69c8e4: EnterFrame
    //     0x69c8e4: stp             fp, lr, [SP, #-0x10]!
    //     0x69c8e8: mov             fp, SP
    // 0x69c8ec: AllocStack(0x30)
    //     0x69c8ec: sub             SP, SP, #0x30
    // 0x69c8f0: CheckStackOverflow
    //     0x69c8f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x69c8f4: cmp             SP, x16
    //     0x69c8f8: b.ls            #0x69cd00
    // 0x69c8fc: r16 = <ContextMenuButtonItem>
    //     0x69c8fc: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1fed8] TypeArguments: <ContextMenuButtonItem>
    //     0x69c900: ldr             x16, [x16, #0xed8]
    // 0x69c904: stp             xzr, x16, [SP]
    // 0x69c908: r0 = _GrowableList()
    //     0x69c908: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x69c90c: mov             x1, x0
    // 0x69c910: ldr             x0, [fp, #0x18]
    // 0x69c914: stur            x1, [fp, #-8]
    // 0x69c918: cmp             w0, NULL
    // 0x69c91c: b.eq            #0x69c930
    // 0x69c920: ldr             x2, [fp, #0x38]
    // 0x69c924: r16 = Instance_ClipboardStatus
    //     0x69c924: ldr             x16, [PP, #0x5e48]  ; [pp+0x5e48] Obj!ClipboardStatus@c421d1
    // 0x69c928: cmp             w2, w16
    // 0x69c92c: b.eq            #0x69cc30
    // 0x69c930: ldr             x2, [fp, #0x28]
    // 0x69c934: r16 = <ContextMenuButtonItem>
    //     0x69c934: add             x16, PP, #0x1f, lsl #12  ; [pp+0x1fed8] TypeArguments: <ContextMenuButtonItem>
    //     0x69c938: ldr             x16, [x16, #0xed8]
    // 0x69c93c: stp             xzr, x16, [SP]
    // 0x69c940: r0 = _GrowableList()
    //     0x69c940: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x69c944: mov             x1, x0
    // 0x69c948: ldr             x0, [fp, #0x28]
    // 0x69c94c: stur            x1, [fp, #-0x10]
    // 0x69c950: cmp             w0, NULL
    // 0x69c954: b.eq            #0x69ca04
    // 0x69c958: r0 = ContextMenuButtonItem()
    //     0x69c958: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69c95c: mov             x1, x0
    // 0x69c960: ldr             x0, [fp, #0x28]
    // 0x69c964: stur            x1, [fp, #-0x20]
    // 0x69c968: StoreField: r1->field_7 = r0
    //     0x69c968: stur            w0, [x1, #7]
    // 0x69c96c: r0 = Instance_ContextMenuButtonType
    //     0x69c96c: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fee0] Obj!ContextMenuButtonType@c42ed1
    //     0x69c970: ldr             x0, [x0, #0xee0]
    // 0x69c974: StoreField: r1->field_b = r0
    //     0x69c974: stur            w0, [x1, #0xb]
    // 0x69c978: ldur            x0, [fp, #-0x10]
    // 0x69c97c: LoadField: r2 = r0->field_b
    //     0x69c97c: ldur            w2, [x0, #0xb]
    // 0x69c980: DecompressPointer r2
    //     0x69c980: add             x2, x2, HEAP, lsl #32
    // 0x69c984: stur            x2, [fp, #-0x18]
    // 0x69c988: LoadField: r3 = r0->field_f
    //     0x69c988: ldur            w3, [x0, #0xf]
    // 0x69c98c: DecompressPointer r3
    //     0x69c98c: add             x3, x3, HEAP, lsl #32
    // 0x69c990: LoadField: r4 = r3->field_b
    //     0x69c990: ldur            w4, [x3, #0xb]
    // 0x69c994: DecompressPointer r4
    //     0x69c994: add             x4, x4, HEAP, lsl #32
    // 0x69c998: cmp             w2, w4
    // 0x69c99c: b.ne            #0x69c9a8
    // 0x69c9a0: str             x0, [SP]
    // 0x69c9a4: r0 = _growToNextCapacity()
    //     0x69c9a4: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69c9a8: ldur            x2, [fp, #-0x10]
    // 0x69c9ac: ldur            x0, [fp, #-0x18]
    // 0x69c9b0: r3 = LoadInt32Instr(r0)
    //     0x69c9b0: sbfx            x3, x0, #1, #0x1f
    // 0x69c9b4: add             x0, x3, #1
    // 0x69c9b8: lsl             x1, x0, #1
    // 0x69c9bc: StoreField: r2->field_b = r1
    //     0x69c9bc: stur            w1, [x2, #0xb]
    // 0x69c9c0: mov             x1, x3
    // 0x69c9c4: cmp             x1, x0
    // 0x69c9c8: b.hs            #0x69cd08
    // 0x69c9cc: LoadField: r1 = r2->field_f
    //     0x69c9cc: ldur            w1, [x2, #0xf]
    // 0x69c9d0: DecompressPointer r1
    //     0x69c9d0: add             x1, x1, HEAP, lsl #32
    // 0x69c9d4: ldur            x0, [fp, #-0x20]
    // 0x69c9d8: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69c9d8: add             x25, x1, x3, lsl #2
    //     0x69c9dc: add             x25, x25, #0xf
    //     0x69c9e0: str             w0, [x25]
    //     0x69c9e4: tbz             w0, #0, #0x69ca00
    //     0x69c9e8: ldurb           w16, [x1, #-1]
    //     0x69c9ec: ldurb           w17, [x0, #-1]
    //     0x69c9f0: and             x16, x17, x16, lsr #2
    //     0x69c9f4: tst             x16, HEAP, lsr #32
    //     0x69c9f8: b.eq            #0x69ca00
    //     0x69c9fc: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69ca00: b               #0x69ca08
    // 0x69ca04: mov             x2, x1
    // 0x69ca08: ldr             x0, [fp, #0x30]
    // 0x69ca0c: cmp             w0, NULL
    // 0x69ca10: b.eq            #0x69cabc
    // 0x69ca14: r0 = ContextMenuButtonItem()
    //     0x69ca14: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69ca18: mov             x1, x0
    // 0x69ca1c: ldr             x0, [fp, #0x30]
    // 0x69ca20: stur            x1, [fp, #-0x20]
    // 0x69ca24: StoreField: r1->field_7 = r0
    //     0x69ca24: stur            w0, [x1, #7]
    // 0x69ca28: r0 = Instance_ContextMenuButtonType
    //     0x69ca28: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fee8] Obj!ContextMenuButtonType@c42eb1
    //     0x69ca2c: ldr             x0, [x0, #0xee8]
    // 0x69ca30: StoreField: r1->field_b = r0
    //     0x69ca30: stur            w0, [x1, #0xb]
    // 0x69ca34: ldur            x0, [fp, #-0x10]
    // 0x69ca38: LoadField: r2 = r0->field_b
    //     0x69ca38: ldur            w2, [x0, #0xb]
    // 0x69ca3c: DecompressPointer r2
    //     0x69ca3c: add             x2, x2, HEAP, lsl #32
    // 0x69ca40: stur            x2, [fp, #-0x18]
    // 0x69ca44: LoadField: r3 = r0->field_f
    //     0x69ca44: ldur            w3, [x0, #0xf]
    // 0x69ca48: DecompressPointer r3
    //     0x69ca48: add             x3, x3, HEAP, lsl #32
    // 0x69ca4c: LoadField: r4 = r3->field_b
    //     0x69ca4c: ldur            w4, [x3, #0xb]
    // 0x69ca50: DecompressPointer r4
    //     0x69ca50: add             x4, x4, HEAP, lsl #32
    // 0x69ca54: cmp             w2, w4
    // 0x69ca58: b.ne            #0x69ca64
    // 0x69ca5c: str             x0, [SP]
    // 0x69ca60: r0 = _growToNextCapacity()
    //     0x69ca60: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69ca64: ldur            x2, [fp, #-0x10]
    // 0x69ca68: ldur            x0, [fp, #-0x18]
    // 0x69ca6c: r3 = LoadInt32Instr(r0)
    //     0x69ca6c: sbfx            x3, x0, #1, #0x1f
    // 0x69ca70: add             x0, x3, #1
    // 0x69ca74: lsl             x1, x0, #1
    // 0x69ca78: StoreField: r2->field_b = r1
    //     0x69ca78: stur            w1, [x2, #0xb]
    // 0x69ca7c: mov             x1, x3
    // 0x69ca80: cmp             x1, x0
    // 0x69ca84: b.hs            #0x69cd0c
    // 0x69ca88: LoadField: r1 = r2->field_f
    //     0x69ca88: ldur            w1, [x2, #0xf]
    // 0x69ca8c: DecompressPointer r1
    //     0x69ca8c: add             x1, x1, HEAP, lsl #32
    // 0x69ca90: ldur            x0, [fp, #-0x20]
    // 0x69ca94: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69ca94: add             x25, x1, x3, lsl #2
    //     0x69ca98: add             x25, x25, #0xf
    //     0x69ca9c: str             w0, [x25]
    //     0x69caa0: tbz             w0, #0, #0x69cabc
    //     0x69caa4: ldurb           w16, [x1, #-1]
    //     0x69caa8: ldurb           w17, [x0, #-1]
    //     0x69caac: and             x16, x17, x16, lsr #2
    //     0x69cab0: tst             x16, HEAP, lsr #32
    //     0x69cab4: b.eq            #0x69cabc
    //     0x69cab8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69cabc: ldr             x0, [fp, #0x18]
    // 0x69cac0: cmp             w0, NULL
    // 0x69cac4: b.eq            #0x69cb70
    // 0x69cac8: r0 = ContextMenuButtonItem()
    //     0x69cac8: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69cacc: mov             x1, x0
    // 0x69cad0: ldr             x0, [fp, #0x18]
    // 0x69cad4: stur            x1, [fp, #-0x20]
    // 0x69cad8: StoreField: r1->field_7 = r0
    //     0x69cad8: stur            w0, [x1, #7]
    // 0x69cadc: r0 = Instance_ContextMenuButtonType
    //     0x69cadc: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fef0] Obj!ContextMenuButtonType@c42e91
    //     0x69cae0: ldr             x0, [x0, #0xef0]
    // 0x69cae4: StoreField: r1->field_b = r0
    //     0x69cae4: stur            w0, [x1, #0xb]
    // 0x69cae8: ldur            x0, [fp, #-0x10]
    // 0x69caec: LoadField: r2 = r0->field_b
    //     0x69caec: ldur            w2, [x0, #0xb]
    // 0x69caf0: DecompressPointer r2
    //     0x69caf0: add             x2, x2, HEAP, lsl #32
    // 0x69caf4: stur            x2, [fp, #-0x18]
    // 0x69caf8: LoadField: r3 = r0->field_f
    //     0x69caf8: ldur            w3, [x0, #0xf]
    // 0x69cafc: DecompressPointer r3
    //     0x69cafc: add             x3, x3, HEAP, lsl #32
    // 0x69cb00: LoadField: r4 = r3->field_b
    //     0x69cb00: ldur            w4, [x3, #0xb]
    // 0x69cb04: DecompressPointer r4
    //     0x69cb04: add             x4, x4, HEAP, lsl #32
    // 0x69cb08: cmp             w2, w4
    // 0x69cb0c: b.ne            #0x69cb18
    // 0x69cb10: str             x0, [SP]
    // 0x69cb14: r0 = _growToNextCapacity()
    //     0x69cb14: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69cb18: ldur            x2, [fp, #-0x10]
    // 0x69cb1c: ldur            x0, [fp, #-0x18]
    // 0x69cb20: r3 = LoadInt32Instr(r0)
    //     0x69cb20: sbfx            x3, x0, #1, #0x1f
    // 0x69cb24: add             x0, x3, #1
    // 0x69cb28: lsl             x1, x0, #1
    // 0x69cb2c: StoreField: r2->field_b = r1
    //     0x69cb2c: stur            w1, [x2, #0xb]
    // 0x69cb30: mov             x1, x3
    // 0x69cb34: cmp             x1, x0
    // 0x69cb38: b.hs            #0x69cd10
    // 0x69cb3c: LoadField: r1 = r2->field_f
    //     0x69cb3c: ldur            w1, [x2, #0xf]
    // 0x69cb40: DecompressPointer r1
    //     0x69cb40: add             x1, x1, HEAP, lsl #32
    // 0x69cb44: ldur            x0, [fp, #-0x20]
    // 0x69cb48: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69cb48: add             x25, x1, x3, lsl #2
    //     0x69cb4c: add             x25, x25, #0xf
    //     0x69cb50: str             w0, [x25]
    //     0x69cb54: tbz             w0, #0, #0x69cb70
    //     0x69cb58: ldurb           w16, [x1, #-1]
    //     0x69cb5c: ldurb           w17, [x0, #-1]
    //     0x69cb60: and             x16, x17, x16, lsr #2
    //     0x69cb64: tst             x16, HEAP, lsr #32
    //     0x69cb68: b.eq            #0x69cb70
    //     0x69cb6c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69cb70: ldr             x0, [fp, #0x10]
    // 0x69cb74: cmp             w0, NULL
    // 0x69cb78: b.eq            #0x69cc24
    // 0x69cb7c: r0 = ContextMenuButtonItem()
    //     0x69cb7c: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69cb80: mov             x1, x0
    // 0x69cb84: ldr             x0, [fp, #0x10]
    // 0x69cb88: stur            x1, [fp, #-0x20]
    // 0x69cb8c: StoreField: r1->field_7 = r0
    //     0x69cb8c: stur            w0, [x1, #7]
    // 0x69cb90: r0 = Instance_ContextMenuButtonType
    //     0x69cb90: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1fef8] Obj!ContextMenuButtonType@c42e71
    //     0x69cb94: ldr             x0, [x0, #0xef8]
    // 0x69cb98: StoreField: r1->field_b = r0
    //     0x69cb98: stur            w0, [x1, #0xb]
    // 0x69cb9c: ldur            x0, [fp, #-0x10]
    // 0x69cba0: LoadField: r2 = r0->field_b
    //     0x69cba0: ldur            w2, [x0, #0xb]
    // 0x69cba4: DecompressPointer r2
    //     0x69cba4: add             x2, x2, HEAP, lsl #32
    // 0x69cba8: stur            x2, [fp, #-0x18]
    // 0x69cbac: LoadField: r3 = r0->field_f
    //     0x69cbac: ldur            w3, [x0, #0xf]
    // 0x69cbb0: DecompressPointer r3
    //     0x69cbb0: add             x3, x3, HEAP, lsl #32
    // 0x69cbb4: LoadField: r4 = r3->field_b
    //     0x69cbb4: ldur            w4, [x3, #0xb]
    // 0x69cbb8: DecompressPointer r4
    //     0x69cbb8: add             x4, x4, HEAP, lsl #32
    // 0x69cbbc: cmp             w2, w4
    // 0x69cbc0: b.ne            #0x69cbcc
    // 0x69cbc4: str             x0, [SP]
    // 0x69cbc8: r0 = _growToNextCapacity()
    //     0x69cbc8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69cbcc: ldur            x2, [fp, #-0x10]
    // 0x69cbd0: ldur            x0, [fp, #-0x18]
    // 0x69cbd4: r3 = LoadInt32Instr(r0)
    //     0x69cbd4: sbfx            x3, x0, #1, #0x1f
    // 0x69cbd8: add             x0, x3, #1
    // 0x69cbdc: lsl             x1, x0, #1
    // 0x69cbe0: StoreField: r2->field_b = r1
    //     0x69cbe0: stur            w1, [x2, #0xb]
    // 0x69cbe4: mov             x1, x3
    // 0x69cbe8: cmp             x1, x0
    // 0x69cbec: b.hs            #0x69cd14
    // 0x69cbf0: LoadField: r1 = r2->field_f
    //     0x69cbf0: ldur            w1, [x2, #0xf]
    // 0x69cbf4: DecompressPointer r1
    //     0x69cbf4: add             x1, x1, HEAP, lsl #32
    // 0x69cbf8: ldur            x0, [fp, #-0x20]
    // 0x69cbfc: ArrayStore: r1[r3] = r0  ; List_4
    //     0x69cbfc: add             x25, x1, x3, lsl #2
    //     0x69cc00: add             x25, x25, #0xf
    //     0x69cc04: str             w0, [x25]
    //     0x69cc08: tbz             w0, #0, #0x69cc24
    //     0x69cc0c: ldurb           w16, [x1, #-1]
    //     0x69cc10: ldurb           w17, [x0, #-1]
    //     0x69cc14: and             x16, x17, x16, lsr #2
    //     0x69cc18: tst             x16, HEAP, lsr #32
    //     0x69cc1c: b.eq            #0x69cc24
    //     0x69cc20: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69cc24: ldur            x16, [fp, #-8]
    // 0x69cc28: stp             x2, x16, [SP]
    // 0x69cc2c: r0 = addAll()
    //     0x69cc2c: bl              #0x5295f8  ; [dart:core] _GrowableList::addAll
    // 0x69cc30: ldr             x0, [fp, #0x20]
    // 0x69cc34: cmp             w0, NULL
    // 0x69cc38: b.eq            #0x69ccec
    // 0x69cc3c: ldur            x1, [fp, #-8]
    // 0x69cc40: r0 = ContextMenuButtonItem()
    //     0x69cc40: bl              #0x69cd1c  ; AllocateContextMenuButtonItemStub -> ContextMenuButtonItem (size=0x14)
    // 0x69cc44: mov             x1, x0
    // 0x69cc48: ldr             x0, [fp, #0x20]
    // 0x69cc4c: stur            x1, [fp, #-0x18]
    // 0x69cc50: StoreField: r1->field_7 = r0
    //     0x69cc50: stur            w0, [x1, #7]
    // 0x69cc54: r0 = Instance_ContextMenuButtonType
    //     0x69cc54: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1ff00] Obj!ContextMenuButtonType@c42e51
    //     0x69cc58: ldr             x0, [x0, #0xf00]
    // 0x69cc5c: StoreField: r1->field_b = r0
    //     0x69cc5c: stur            w0, [x1, #0xb]
    // 0x69cc60: ldur            x0, [fp, #-8]
    // 0x69cc64: LoadField: r2 = r0->field_b
    //     0x69cc64: ldur            w2, [x0, #0xb]
    // 0x69cc68: DecompressPointer r2
    //     0x69cc68: add             x2, x2, HEAP, lsl #32
    // 0x69cc6c: stur            x2, [fp, #-0x10]
    // 0x69cc70: LoadField: r3 = r0->field_f
    //     0x69cc70: ldur            w3, [x0, #0xf]
    // 0x69cc74: DecompressPointer r3
    //     0x69cc74: add             x3, x3, HEAP, lsl #32
    // 0x69cc78: LoadField: r4 = r3->field_b
    //     0x69cc78: ldur            w4, [x3, #0xb]
    // 0x69cc7c: DecompressPointer r4
    //     0x69cc7c: add             x4, x4, HEAP, lsl #32
    // 0x69cc80: cmp             w2, w4
    // 0x69cc84: b.ne            #0x69cc90
    // 0x69cc88: str             x0, [SP]
    // 0x69cc8c: r0 = _growToNextCapacity()
    //     0x69cc8c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x69cc90: ldur            x2, [fp, #-8]
    // 0x69cc94: ldur            x3, [fp, #-0x10]
    // 0x69cc98: r4 = LoadInt32Instr(r3)
    //     0x69cc98: sbfx            x4, x3, #1, #0x1f
    // 0x69cc9c: add             x0, x4, #1
    // 0x69cca0: lsl             x3, x0, #1
    // 0x69cca4: StoreField: r2->field_b = r3
    //     0x69cca4: stur            w3, [x2, #0xb]
    // 0x69cca8: mov             x1, x4
    // 0x69ccac: cmp             x1, x0
    // 0x69ccb0: b.hs            #0x69cd18
    // 0x69ccb4: LoadField: r1 = r2->field_f
    //     0x69ccb4: ldur            w1, [x2, #0xf]
    // 0x69ccb8: DecompressPointer r1
    //     0x69ccb8: add             x1, x1, HEAP, lsl #32
    // 0x69ccbc: ldur            x0, [fp, #-0x18]
    // 0x69ccc0: ArrayStore: r1[r4] = r0  ; List_4
    //     0x69ccc0: add             x25, x1, x4, lsl #2
    //     0x69ccc4: add             x25, x25, #0xf
    //     0x69ccc8: str             w0, [x25]
    //     0x69cccc: tbz             w0, #0, #0x69cce8
    //     0x69ccd0: ldurb           w16, [x1, #-1]
    //     0x69ccd4: ldurb           w17, [x0, #-1]
    //     0x69ccd8: and             x16, x17, x16, lsr #2
    //     0x69ccdc: tst             x16, HEAP, lsr #32
    //     0x69cce0: b.eq            #0x69cce8
    //     0x69cce4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x69cce8: b               #0x69ccf0
    // 0x69ccec: ldur            x2, [fp, #-8]
    // 0x69ccf0: mov             x0, x2
    // 0x69ccf4: LeaveFrame
    //     0x69ccf4: mov             SP, fp
    //     0x69ccf8: ldp             fp, lr, [SP], #0x10
    // 0x69ccfc: ret
    //     0x69ccfc: ret             
    // 0x69cd00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x69cd00: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x69cd04: b               #0x69c8fc
    // 0x69cd08: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69cd08: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69cd0c: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69cd0c: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69cd10: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69cd10: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69cd14: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69cd14: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x69cd18: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x69cd18: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ EditableText(/* No info */) {
    // ** addr: 0x951f5c, size: 0x564
    // 0x951f5c: EnterFrame
    //     0x951f5c: stp             fp, lr, [SP, #-0x10]!
    //     0x951f60: mov             fp, SP
    // 0x951f64: AllocStack(0x20)
    //     0x951f64: sub             SP, SP, #0x20
    // 0x951f68: r20 = "•"
    //     0x951f68: add             x20, PP, #0x1f, lsl #12  ; [pp+0x1fde0] "•"
    //     0x951f6c: ldr             x20, [x20, #0xde0]
    // 0x951f70: r19 = false
    //     0x951f70: add             x19, NULL, #0x30  ; false
    // 0x951f74: r14 = true
    //     0x951f74: add             x14, NULL, #0x20  ; true
    // 0x951f78: r13 = Instance_CupertinoDynamicColor
    //     0x951f78: add             x13, PP, #0x2a, lsl #12  ; [pp+0x2a630] Obj!CupertinoDynamicColor@c3c071
    //     0x951f7c: ldr             x13, [x13, #0x630]
    // 0x951f80: r12 = Instance_TextWidthBasis
    //     0x951f80: add             x12, PP, #0x12, lsl #12  ; [pp+0x128d0] Obj!TextWidthBasis@c43e31
    //     0x951f84: ldr             x12, [x12, #0x8d0]
    // 0x951f88: r11 = Instance_TextCapitalization
    //     0x951f88: ldr             x11, [PP, #0x6748]  ; [pp+0x6748] Obj!TextCapitalization@c43111
    // 0x951f8c: r10 = Instance__DeferringMouseCursor
    //     0x951f8c: ldr             x10, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x951f90: r9 = Instance_BoxHeightStyle
    //     0x951f90: ldr             x9, [PP, #0x5cf8]  ; [pp+0x5cf8] Obj!BoxHeightStyle@c46cc1
    // 0x951f94: r8 = Instance_BoxWidthStyle
    //     0x951f94: ldr             x8, [PP, #0x5d00]  ; [pp+0x5d00] Obj!BoxWidthStyle@c46ca1
    // 0x951f98: r7 = Instance_EdgeInsets
    //     0x951f98: ldr             x7, [PP, #0x6510]  ; [pp+0x6510] Obj!EdgeInsets@c2db31
    // 0x951f9c: r6 = Instance_DragStartBehavior
    //     0x951f9c: ldr             x6, [PP, #0x6218]  ; [pp+0x6218] Obj!DragStartBehavior@c44d91
    // 0x951fa0: r5 = const []
    //     0x951fa0: ldr             x5, [PP, #0x6740]  ; [pp+0x6740] List<String>(0)
    // 0x951fa4: r4 = Instance_Clip
    //     0x951fa4: add             x4, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x951fa8: ldr             x4, [x4, #0x438]
    // 0x951fac: r3 = "editable"
    //     0x951fac: add             x3, PP, #0x34, lsl #12  ; [pp+0x34b00] "editable"
    //     0x951fb0: ldr             x3, [x3, #0xb00]
    // 0x951fb4: r2 = Instance_SpellCheckConfiguration
    //     0x951fb4: add             x2, PP, #0x34, lsl #12  ; [pp+0x34b08] Obj!SpellCheckConfiguration@c2c061
    //     0x951fb8: ldr             x2, [x2, #0xb08]
    // 0x951fbc: r1 = Instance_SmartDashesType
    //     0x951fbc: ldr             x1, [PP, #0x6750]  ; [pp+0x6750] Obj!SmartDashesType@c432f1
    // 0x951fc0: CheckStackOverflow
    //     0x951fc0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x951fc4: cmp             SP, x16
    //     0x951fc8: b.ls            #0x9524b8
    // 0x951fcc: ldr             x0, [fp, #0xf0]
    // 0x951fd0: ldr             x23, [fp, #0x118]
    // 0x951fd4: StoreField: r23->field_b = r0
    //     0x951fd4: stur            w0, [x23, #0xb]
    //     0x951fd8: ldurb           w16, [x23, #-1]
    //     0x951fdc: ldurb           w17, [x0, #-1]
    //     0x951fe0: and             x16, x17, x16, lsr #2
    //     0x951fe4: tst             x16, HEAP, lsr #32
    //     0x951fe8: b.eq            #0x951ff0
    //     0x951fec: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x951ff0: ldr             x0, [fp, #0xc0]
    // 0x951ff4: StoreField: r23->field_f = r0
    //     0x951ff4: stur            w0, [x23, #0xf]
    //     0x951ff8: ldurb           w16, [x23, #-1]
    //     0x951ffc: ldurb           w17, [x0, #-1]
    //     0x952000: and             x16, x17, x16, lsr #2
    //     0x952004: tst             x16, HEAP, lsr #32
    //     0x952008: b.eq            #0x952010
    //     0x95200c: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952010: ldr             x24, [fp, #0x50]
    // 0x952014: StoreField: r23->field_23 = r24
    //     0x952014: stur            w24, [x23, #0x23]
    // 0x952018: StoreField: r23->field_13 = r20
    //     0x952018: stur            w20, [x23, #0x13]
    // 0x95201c: ArrayStore: r23[0] = r19  ; List_4
    //     0x95201c: stur            w19, [x23, #0x17]
    // 0x952020: StoreField: r23->field_37 = r14
    //     0x952020: stur            w14, [x23, #0x37]
    // 0x952024: StoreField: r23->field_43 = r14
    //     0x952024: stur            w14, [x23, #0x43]
    // 0x952028: ldr             x0, [fp, #0x20]
    // 0x95202c: StoreField: r23->field_47 = r0
    //     0x95202c: stur            w0, [x23, #0x47]
    //     0x952030: ldurb           w16, [x23, #-1]
    //     0x952034: ldurb           w17, [x0, #-1]
    //     0x952038: and             x16, x17, x16, lsr #2
    //     0x95203c: tst             x16, HEAP, lsr #32
    //     0x952040: b.eq            #0x952048
    //     0x952044: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952048: ldr             x0, [fp, #0xe8]
    // 0x95204c: StoreField: r23->field_67 = r0
    //     0x95204c: stur            w0, [x23, #0x67]
    //     0x952050: ldurb           w16, [x23, #-1]
    //     0x952054: ldurb           w17, [x0, #-1]
    //     0x952058: and             x16, x17, x16, lsr #2
    //     0x95205c: tst             x16, HEAP, lsr #32
    //     0x952060: b.eq            #0x952068
    //     0x952064: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952068: StoreField: r23->field_6f = r13
    //     0x952068: stur            w13, [x23, #0x6f]
    // 0x95206c: ldr             x0, [fp, #0x18]
    // 0x952070: StoreField: r23->field_53 = r0
    //     0x952070: stur            w0, [x23, #0x53]
    //     0x952074: ldurb           w16, [x23, #-1]
    //     0x952078: ldurb           w17, [x0, #-1]
    //     0x95207c: and             x16, x17, x16, lsr #2
    //     0x952080: tst             x16, HEAP, lsr #32
    //     0x952084: b.eq            #0x95208c
    //     0x952088: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95208c: ldr             x13, [fp, #0x90]
    // 0x952090: StoreField: r23->field_73 = r13
    //     0x952090: stur            x13, [x23, #0x73]
    // 0x952094: ldr             x0, [fp, #0x88]
    // 0x952098: StoreField: r23->field_7b = r0
    //     0x952098: stur            w0, [x23, #0x7b]
    // 0x95209c: StoreField: r23->field_7f = r19
    //     0x95209c: stur            w19, [x23, #0x7f]
    // 0x9520a0: StoreField: r23->field_27 = r14
    //     0x9520a0: stur            w14, [x23, #0x27]
    // 0x9520a4: StoreField: r23->field_1f = r12
    //     0x9520a4: stur            w12, [x23, #0x1f]
    // 0x9520a8: ldr             x0, [fp, #0x100]
    // 0x9520ac: StoreField: r23->field_83 = r0
    //     0x9520ac: stur            w0, [x23, #0x83]
    // 0x9520b0: ldr             x0, [fp, #0x30]
    // 0x9520b4: StoreField: r23->field_2f = r0
    //     0x9520b4: stur            w0, [x23, #0x2f]
    // 0x9520b8: ldr             x0, [fp, #0x40]
    // 0x9520bc: StoreField: r23->field_87 = r0
    //     0x9520bc: stur            w0, [x23, #0x87]
    //     0x9520c0: ldurb           w16, [x23, #-1]
    //     0x9520c4: ldurb           w17, [x0, #-1]
    //     0x9520c8: and             x16, x17, x16, lsr #2
    //     0x9520cc: tst             x16, HEAP, lsr #32
    //     0x9520d0: b.eq            #0x9520d8
    //     0x9520d4: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9520d8: ldr             x0, [fp, #0x38]
    // 0x9520dc: StoreField: r23->field_8b = r0
    //     0x9520dc: stur            w0, [x23, #0x8b]
    //     0x9520e0: ldurb           w16, [x23, #-1]
    //     0x9520e4: ldurb           w17, [x0, #-1]
    //     0x9520e8: and             x16, x17, x16, lsr #2
    //     0x9520ec: tst             x16, HEAP, lsr #32
    //     0x9520f0: b.eq            #0x9520f8
    //     0x9520f4: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9520f8: ldr             x0, [fp, #0x10]
    // 0x9520fc: StoreField: r23->field_93 = r0
    //     0x9520fc: stur            w0, [x23, #0x93]
    //     0x952100: ldurb           w16, [x23, #-1]
    //     0x952104: ldurb           w17, [x0, #-1]
    //     0x952108: and             x16, x17, x16, lsr #2
    //     0x95210c: tst             x16, HEAP, lsr #32
    //     0x952110: b.eq            #0x952118
    //     0x952114: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952118: StoreField: r23->field_5b = r11
    //     0x952118: stur            w11, [x23, #0x5b]
    // 0x95211c: ldr             x0, [fp, #0x80]
    // 0x952120: StoreField: r23->field_97 = r0
    //     0x952120: stur            w0, [x23, #0x97]
    //     0x952124: ldurb           w16, [x23, #-1]
    //     0x952128: ldurb           w17, [x0, #-1]
    //     0x95212c: and             x16, x17, x16, lsr #2
    //     0x952130: tst             x16, HEAP, lsr #32
    //     0x952134: b.eq            #0x95213c
    //     0x952138: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95213c: ldr             x0, [fp, #0x78]
    // 0x952140: StoreField: r23->field_9b = r0
    //     0x952140: stur            w0, [x23, #0x9b]
    //     0x952144: ldurb           w16, [x23, #-1]
    //     0x952148: ldurb           w17, [x0, #-1]
    //     0x95214c: and             x16, x17, x16, lsr #2
    //     0x952150: tst             x16, HEAP, lsr #32
    //     0x952154: b.eq            #0x95215c
    //     0x952158: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95215c: ldr             x0, [fp, #0x60]
    // 0x952160: StoreField: r23->field_9f = r0
    //     0x952160: stur            w0, [x23, #0x9f]
    //     0x952164: ldurb           w16, [x23, #-1]
    //     0x952168: ldurb           w17, [x0, #-1]
    //     0x95216c: and             x16, x17, x16, lsr #2
    //     0x952170: tst             x16, HEAP, lsr #32
    //     0x952174: b.eq            #0x95217c
    //     0x952178: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95217c: ldr             x0, [fp, #0x70]
    // 0x952180: StoreField: r23->field_a7 = r0
    //     0x952180: stur            w0, [x23, #0xa7]
    //     0x952184: ldurb           w16, [x23, #-1]
    //     0x952188: ldurb           w17, [x0, #-1]
    //     0x95218c: and             x16, x17, x16, lsr #2
    //     0x952190: tst             x16, HEAP, lsr #32
    //     0x952194: b.eq            #0x95219c
    //     0x952198: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95219c: ldr             x0, [fp, #0x68]
    // 0x9521a0: StoreField: r23->field_ab = r0
    //     0x9521a0: stur            w0, [x23, #0xab]
    //     0x9521a4: ldurb           w16, [x23, #-1]
    //     0x9521a8: ldurb           w17, [x0, #-1]
    //     0x9521ac: and             x16, x17, x16, lsr #2
    //     0x9521b0: tst             x16, HEAP, lsr #32
    //     0x9521b4: b.eq            #0x9521bc
    //     0x9521b8: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9521bc: StoreField: r23->field_b7 = r10
    //     0x9521bc: stur            w10, [x23, #0xb7]
    // 0x9521c0: StoreField: r23->field_bb = r14
    //     0x9521c0: stur            w14, [x23, #0xbb]
    // 0x9521c4: ldr             d0, [fp, #0xc8]
    // 0x9521c8: StoreField: r23->field_bf = d0
    //     0x9521c8: stur            d0, [x23, #0xbf]
    // 0x9521cc: ldr             x0, [fp, #0xd0]
    // 0x9521d0: StoreField: r23->field_cb = r0
    //     0x9521d0: stur            w0, [x23, #0xcb]
    //     0x9521d4: ldurb           w16, [x23, #-1]
    //     0x9521d8: ldurb           w17, [x0, #-1]
    //     0x9521dc: and             x16, x17, x16, lsr #2
    //     0x9521e0: tst             x16, HEAP, lsr #32
    //     0x9521e4: b.eq            #0x9521ec
    //     0x9521e8: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9521ec: ldr             x0, [fp, #0xd8]
    // 0x9521f0: StoreField: r23->field_cf = r0
    //     0x9521f0: stur            w0, [x23, #0xcf]
    // 0x9521f4: ldr             x0, [fp, #0xe0]
    // 0x9521f8: StoreField: r23->field_d3 = r0
    //     0x9521f8: stur            w0, [x23, #0xd3]
    //     0x9521fc: ldurb           w16, [x23, #-1]
    //     0x952200: ldurb           w17, [x0, #-1]
    //     0x952204: and             x16, x17, x16, lsr #2
    //     0x952208: tst             x16, HEAP, lsr #32
    //     0x95220c: b.eq            #0x952214
    //     0x952210: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952214: ldr             x0, [fp, #0x58]
    // 0x952218: StoreField: r23->field_d7 = r0
    //     0x952218: stur            w0, [x23, #0xd7]
    // 0x95221c: StoreField: r23->field_db = r9
    //     0x95221c: stur            w9, [x23, #0xdb]
    // 0x952220: StoreField: r23->field_df = r8
    //     0x952220: stur            w8, [x23, #0xdf]
    // 0x952224: StoreField: r23->field_e7 = r7
    //     0x952224: stur            w7, [x23, #0xe7]
    // 0x952228: ldr             x0, [fp, #0xa8]
    // 0x95222c: StoreField: r23->field_e3 = r0
    //     0x95222c: stur            w0, [x23, #0xe3]
    //     0x952230: ldurb           w16, [x23, #-1]
    //     0x952234: ldurb           w17, [x0, #-1]
    //     0x952238: and             x16, x17, x16, lsr #2
    //     0x95223c: tst             x16, HEAP, lsr #32
    //     0x952240: b.eq            #0x952248
    //     0x952244: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952248: StoreField: r23->field_ef = r6
    //     0x952248: stur            w6, [x23, #0xef]
    // 0x95224c: ldr             x0, [fp, #0x48]
    // 0x952250: StoreField: r23->field_f3 = r0
    //     0x952250: stur            w0, [x23, #0xf3]
    //     0x952254: ldurb           w16, [x23, #-1]
    //     0x952258: ldurb           w17, [x0, #-1]
    //     0x95225c: and             x16, x17, x16, lsr #2
    //     0x952260: tst             x16, HEAP, lsr #32
    //     0x952264: b.eq            #0x95226c
    //     0x952268: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95226c: ldr             x0, [fp, #0x110]
    // 0x952270: StoreField: r23->field_6b = r0
    //     0x952270: stur            w0, [x23, #0x6b]
    //     0x952274: ldurb           w16, [x23, #-1]
    //     0x952278: ldurb           w17, [x0, #-1]
    //     0x95227c: and             x16, x17, x16, lsr #2
    //     0x952280: tst             x16, HEAP, lsr #32
    //     0x952284: b.eq            #0x95228c
    //     0x952288: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x95228c: StoreField: r23->field_ff = r5
    //     0x95228c: stur            w5, [x23, #0xff]
    // 0x952290: ldr             x0, [fp, #0x108]
    // 0x952294: r17 = 259
    //     0x952294: movz            x17, #0x103
    // 0x952298: str             w0, [x23, x17]
    // 0x95229c: WriteBarrierInstr(obj = r23, val = r0)
    //     0x95229c: ldurb           w16, [x23, #-1]
    //     0x9522a0: ldurb           w17, [x0, #-1]
    //     0x9522a4: and             x16, x17, x16, lsr #2
    //     0x9522a8: tst             x16, HEAP, lsr #32
    //     0x9522ac: b.eq            #0x9522b4
    //     0x9522b0: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9522b4: add             x16, x23, #0x107
    // 0x9522b8: str             w4, [x16]
    // 0x9522bc: add             x16, x23, #0x10b
    // 0x9522c0: str             w3, [x16]
    // 0x9522c4: StoreField: r23->field_fb = r14
    //     0x9522c4: stur            w14, [x23, #0xfb]
    // 0x9522c8: add             x16, x23, #0x113
    // 0x9522cc: str             w14, [x16]
    // 0x9522d0: ldr             x0, [fp, #0xf8]
    // 0x9522d4: r17 = 283
    //     0x9522d4: movz            x17, #0x11b
    // 0x9522d8: str             w0, [x23, x17]
    // 0x9522dc: WriteBarrierInstr(obj = r23, val = r0)
    //     0x9522dc: ldurb           w16, [x23, #-1]
    //     0x9522e0: ldurb           w17, [x0, #-1]
    //     0x9522e4: and             x16, x17, x16, lsr #2
    //     0x9522e8: tst             x16, HEAP, lsr #32
    //     0x9522ec: b.eq            #0x9522f4
    //     0x9522f0: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9522f4: add             x16, x23, #0x11f
    // 0x9522f8: str             w2, [x16]
    // 0x9522fc: ldr             x0, [fp, #0x98]
    // 0x952300: r17 = 291
    //     0x952300: movz            x17, #0x123
    // 0x952304: str             w0, [x23, x17]
    // 0x952308: WriteBarrierInstr(obj = r23, val = r0)
    //     0x952308: ldurb           w16, [x23, #-1]
    //     0x95230c: ldurb           w17, [x0, #-1]
    //     0x952310: and             x16, x17, x16, lsr #2
    //     0x952314: tst             x16, HEAP, lsr #32
    //     0x952318: b.eq            #0x952320
    //     0x95231c: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952320: StoreField: r23->field_3b = r1
    //     0x952320: stur            w1, [x23, #0x3b]
    // 0x952324: ldr             x0, [fp, #0x28]
    // 0x952328: StoreField: r23->field_3f = r0
    //     0x952328: stur            w0, [x23, #0x3f]
    //     0x95232c: ldurb           w16, [x23, #-1]
    //     0x952330: ldurb           w17, [x0, #-1]
    //     0x952334: and             x16, x17, x16, lsr #2
    //     0x952338: tst             x16, HEAP, lsr #32
    //     0x95233c: b.eq            #0x952344
    //     0x952340: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x952344: StoreField: r23->field_eb = r14
    //     0x952344: stur            w14, [x23, #0xeb]
    // 0x952348: ldr             x0, [fp, #0x38]
    // 0x95234c: r1 = LoadClassIdInstr(r0)
    //     0x95234c: ldur            x1, [x0, #-1]
    //     0x952350: ubfx            x1, x1, #0xc, #0x14
    // 0x952354: lsl             x1, x1, #1
    // 0x952358: r0 = LoadInt32Instr(r1)
    //     0x952358: sbfx            x0, x1, #1, #0x1f
    // 0x95235c: r17 = 4411
    //     0x95235c: movz            x17, #0x113b
    // 0x952360: cmp             x0, x17
    // 0x952364: b.lt            #0x952380
    // 0x952368: r17 = 4421
    //     0x952368: movz            x17, #0x1145
    // 0x95236c: cmp             x0, x17
    // 0x952370: b.gt            #0x952380
    // 0x952374: r0 = Instance_ToolbarOptions
    //     0x952374: add             x0, PP, #0x1f, lsl #12  ; [pp+0x1ff08] Obj!ToolbarOptions@c2c871
    //     0x952378: ldr             x0, [x0, #0xf08]
    // 0x95237c: b               #0x952398
    // 0x952380: tbnz            w24, #4, #0x952390
    // 0x952384: r0 = Instance_ToolbarOptions
    //     0x952384: add             x0, PP, #0x34, lsl #12  ; [pp+0x34b10] Obj!ToolbarOptions@c2c8b1
    //     0x952388: ldr             x0, [x0, #0xb10]
    // 0x95238c: b               #0x952398
    // 0x952390: r0 = Instance_ToolbarOptions
    //     0x952390: add             x0, PP, #0x34, lsl #12  ; [pp+0x34b18] Obj!ToolbarOptions@c2c891
    //     0x952394: ldr             x0, [x0, #0xb18]
    // 0x952398: StoreField: r23->field_2b = r0
    //     0x952398: stur            w0, [x23, #0x2b]
    //     0x95239c: ldurb           w16, [x23, #-1]
    //     0x9523a0: ldurb           w17, [x0, #-1]
    //     0x9523a4: and             x16, x17, x16, lsr #2
    //     0x9523a8: tst             x16, HEAP, lsr #32
    //     0x9523ac: b.eq            #0x9523b4
    //     0x9523b0: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9523b4: ldr             x0, [fp, #0xa0]
    // 0x9523b8: StoreField: r23->field_8f = r0
    //     0x9523b8: stur            w0, [x23, #0x8f]
    //     0x9523bc: ldurb           w16, [x23, #-1]
    //     0x9523c0: ldurb           w17, [x0, #-1]
    //     0x9523c4: and             x16, x17, x16, lsr #2
    //     0x9523c8: tst             x16, HEAP, lsr #32
    //     0x9523cc: b.eq            #0x9523d4
    //     0x9523d0: bl              #0xc5d8fc  ; WriteBarrierWrappersStub
    // 0x9523d4: cmp             x13, #1
    // 0x9523d8: b.ne            #0x952454
    // 0x9523dc: r0 = InitLateStaticField(0xad8) // [package:flutter/src/services/text_formatter.dart] FilteringTextInputFormatter::singleLineFormatter
    //     0x9523dc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x9523e0: ldr             x0, [x0, #0x15b0]
    //     0x9523e4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x9523e8: cmp             w0, w16
    //     0x9523ec: b.ne            #0x9523fc
    //     0x9523f0: add             x2, PP, #0x34, lsl #12  ; [pp+0x34b20] Field <FilteringTextInputFormatter.singleLineFormatter>: static late final (offset: 0xad8)
    //     0x9523f4: ldr             x2, [x2, #0xb20]
    //     0x9523f8: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x9523fc: r1 = Null
    //     0x9523fc: mov             x1, NULL
    // 0x952400: r2 = 2
    //     0x952400: movz            x2, #0x2
    // 0x952404: stur            x0, [fp, #-8]
    // 0x952408: r0 = AllocateArray()
    //     0x952408: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x95240c: mov             x2, x0
    // 0x952410: ldur            x0, [fp, #-8]
    // 0x952414: stur            x2, [fp, #-0x10]
    // 0x952418: StoreField: r2->field_f = r0
    //     0x952418: stur            w0, [x2, #0xf]
    // 0x95241c: r1 = <TextInputFormatter>
    //     0x95241c: add             x1, PP, #0x23, lsl #12  ; [pp+0x23d20] TypeArguments: <TextInputFormatter>
    //     0x952420: ldr             x1, [x1, #0xd20]
    // 0x952424: r0 = AllocateGrowableArray()
    //     0x952424: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x952428: mov             x1, x0
    // 0x95242c: ldur            x0, [fp, #-0x10]
    // 0x952430: stur            x1, [fp, #-8]
    // 0x952434: StoreField: r1->field_f = r0
    //     0x952434: stur            w0, [x1, #0xf]
    // 0x952438: r0 = 2
    //     0x952438: movz            x0, #0x2
    // 0x95243c: StoreField: r1->field_b = r0
    //     0x95243c: stur            w0, [x1, #0xb]
    // 0x952440: ldr             x16, [fp, #0xb8]
    // 0x952444: stp             x16, x1, [SP]
    // 0x952448: r0 = addAll()
    //     0x952448: bl              #0x5295f8  ; [dart:core] _GrowableList::addAll
    // 0x95244c: ldur            x0, [fp, #-8]
    // 0x952450: b               #0x95245c
    // 0x952454: ldr             x1, [fp, #0xb8]
    // 0x952458: mov             x0, x1
    // 0x95245c: ldr             x1, [fp, #0x118]
    // 0x952460: ldr             x2, [fp, #0x50]
    // 0x952464: StoreField: r1->field_b3 = r0
    //     0x952464: stur            w0, [x1, #0xb3]
    //     0x952468: ldurb           w16, [x1, #-1]
    //     0x95246c: ldurb           w17, [x0, #-1]
    //     0x952470: and             x16, x17, x16, lsr #2
    //     0x952474: tst             x16, HEAP, lsr #32
    //     0x952478: b.eq            #0x952480
    //     0x95247c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x952480: eor             x3, x2, #0x10
    // 0x952484: StoreField: r1->field_33 = r3
    //     0x952484: stur            w3, [x1, #0x33]
    // 0x952488: ldr             x0, [fp, #0xb0]
    // 0x95248c: StoreField: r1->field_7 = r0
    //     0x95248c: stur            w0, [x1, #7]
    //     0x952490: ldurb           w16, [x1, #-1]
    //     0x952494: ldurb           w17, [x0, #-1]
    //     0x952498: and             x16, x17, x16, lsr #2
    //     0x95249c: tst             x16, HEAP, lsr #32
    //     0x9524a0: b.eq            #0x9524a8
    //     0x9524a4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x9524a8: r0 = Null
    //     0x9524a8: mov             x0, NULL
    // 0x9524ac: LeaveFrame
    //     0x9524ac: mov             SP, fp
    //     0x9524b0: ldp             fp, lr, [SP], #0x10
    // 0x9524b4: ret
    //     0x9524b4: ret             
    // 0x9524b8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x9524b8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x9524bc: b               #0x951fcc
  }
  _ createState(/* No info */) {
    // ** addr: 0xa4d304, size: 0x48
    // 0xa4d304: EnterFrame
    //     0xa4d304: stp             fp, lr, [SP, #-0x10]!
    //     0xa4d308: mov             fp, SP
    // 0xa4d30c: AllocStack(0x10)
    //     0xa4d30c: sub             SP, SP, #0x10
    // 0xa4d310: CheckStackOverflow
    //     0xa4d310: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa4d314: cmp             SP, x16
    //     0xa4d318: b.ls            #0xa4d344
    // 0xa4d31c: r1 = <EditableText>
    //     0xa4d31c: add             x1, PP, #0x39, lsl #12  ; [pp+0x39d90] TypeArguments: <EditableText>
    //     0xa4d320: ldr             x1, [x1, #0xd90]
    // 0xa4d324: r0 = EditableTextState()
    //     0xa4d324: bl              #0xa4d5d0  ; AllocateEditableTextStateStub -> EditableTextState (size=0xcc)
    // 0xa4d328: stur            x0, [fp, #-8]
    // 0xa4d32c: str             x0, [SP]
    // 0xa4d330: r0 = EditableTextState()
    //     0xa4d330: bl              #0xa4d34c  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::EditableTextState
    // 0xa4d334: ldur            x0, [fp, #-8]
    // 0xa4d338: LeaveFrame
    //     0xa4d338: mov             SP, fp
    //     0xa4d33c: ldp             fp, lr, [SP], #0x10
    // 0xa4d340: ret
    //     0xa4d340: ret             
    // 0xa4d344: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa4d344: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa4d348: b               #0xa4d31c
  }
}

// class id: 4471, size: 0x20, field offset: 0xc
class _DiscreteKeyFrameSimulation extends Simulation {

  _ isDone(/* No info */) {
    // ** addr: 0xb98a00, size: 0x24
    // 0xb98a00: d0 = 1.000000
    //     0xb98a00: fmov            d0, #1.00000000
    // 0xb98a04: ldr             d1, [SP]
    // 0xb98a08: fcmp            d1, d0
    // 0xb98a0c: b.vs            #0xb98a14
    // 0xb98a10: b.ge            #0xb98a1c
    // 0xb98a14: r0 = false
    //     0xb98a14: add             x0, NULL, #0x30  ; false
    // 0xb98a18: b               #0xb98a20
    // 0xb98a1c: r0 = true
    //     0xb98a1c: add             x0, NULL, #0x20  ; true
    // 0xb98a20: ret
    //     0xb98a20: ret             
  }
  dynamic dx(dynamic) {
    // ** addr: 0xb98f40, size: 0x18
    // 0xb98f40: r4 = 0
    //     0xb98f40: movz            x4, #0
    // 0xb98f44: r1 = Function 'dx':.
    //     0xb98f44: add             x17, PP, #0x39, lsl #12  ; [pp+0x39da8] AnonymousClosure: (0xba07cc), of [package:flutter/src/rendering/viewport.dart] RenderViewportBase<X0 bound ContainerParentDataMixin>
    //     0xb98f48: ldr             x1, [x17, #0xda8]
    // 0xb98f4c: r24 = BuildNonGenericMethodExtractorStub
    //     0xb98f4c: ldr             x24, [PP, #0x74c0]  ; [pp+0x74c0] Stub: BuildNonGenericMethodExtractor (0xc5f7bc)
    // 0xb98f50: ArrayLoad: r0 = r24[0]  ; List_8
    //     0xb98f50: ldur            x0, [x24, #0x17]
    // 0xb98f54: br              x0
  }
  _ x(/* No info */) {
    // ** addr: 0xbb0cb8, size: 0xf0
    // 0xbb0cb8: EnterFrame
    //     0xbb0cb8: stp             fp, lr, [SP, #-0x10]!
    //     0xbb0cbc: mov             fp, SP
    // 0xbb0cc0: r2 = const [Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame', Instance of '_KeyFrame']
    //     0xbb0cc0: ldr             x2, [PP, #0x60f8]  ; [pp+0x60f8] List<_KeyFrame>(11)
    // 0xbb0cc4: ldr             x3, [fp, #0x18]
    // 0xbb0cc8: ArrayLoad: r4 = r3[0]  ; List_8
    //     0xbb0cc8: ldur            x4, [x3, #0x17]
    // 0xbb0ccc: mov             x1, x4
    // 0xbb0cd0: r0 = 11
    //     0xbb0cd0: movz            x0, #0xb
    // 0xbb0cd4: cmp             x1, x0
    // 0xbb0cd8: b.hs            #0xbb0d94
    // 0xbb0cdc: ArrayLoad: r5 = r2[r4]  ; Unknown_4
    //     0xbb0cdc: add             x16, x2, x4, lsl #2
    //     0xbb0ce0: ldur            w5, [x16, #0xf]
    // 0xbb0ce4: DecompressPointer r5
    //     0xbb0ce4: add             x5, x5, HEAP, lsl #32
    // 0xbb0ce8: LoadField: d1 = r5->field_7
    //     0xbb0ce8: ldur            d1, [x5, #7]
    // 0xbb0cec: ldr             x5, [fp, #0x10]
    // 0xbb0cf0: LoadField: d2 = r5->field_7
    //     0xbb0cf0: ldur            d2, [x5, #7]
    // 0xbb0cf4: fcmp            d1, d2
    // 0xbb0cf8: b.vs            #0xbb0d08
    // 0xbb0cfc: b.le            #0xbb0d08
    // 0xbb0d00: r5 = 0
    //     0xbb0d00: movz            x5, #0
    // 0xbb0d04: b               #0xbb0d10
    // 0xbb0d08: mov             x5, x4
    // 0xbb0d0c: r4 = 11
    //     0xbb0d0c: movz            x4, #0xb
    // 0xbb0d10: sub             x6, x4, #1
    // 0xbb0d14: mov             x4, x5
    // 0xbb0d18: CheckStackOverflow
    //     0xbb0d18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbb0d1c: cmp             SP, x16
    //     0xbb0d20: b.ls            #0xbb0d98
    // 0xbb0d24: cmp             x4, x6
    // 0xbb0d28: b.ge            #0xbb0d64
    // 0xbb0d2c: add             x5, x4, #1
    // 0xbb0d30: mov             x1, x5
    // 0xbb0d34: r0 = 11
    //     0xbb0d34: movz            x0, #0xb
    // 0xbb0d38: cmp             x1, x0
    // 0xbb0d3c: b.hs            #0xbb0da0
    // 0xbb0d40: ArrayLoad: r7 = r2[r5]  ; Unknown_4
    //     0xbb0d40: add             x16, x2, x5, lsl #2
    //     0xbb0d44: ldur            w7, [x16, #0xf]
    // 0xbb0d48: DecompressPointer r7
    //     0xbb0d48: add             x7, x7, HEAP, lsl #32
    // 0xbb0d4c: LoadField: d1 = r7->field_7
    //     0xbb0d4c: ldur            d1, [x7, #7]
    // 0xbb0d50: fcmp            d2, d1
    // 0xbb0d54: b.vs            #0xbb0d5c
    // 0xbb0d58: b.lt            #0xbb0d64
    // 0xbb0d5c: mov             x4, x5
    // 0xbb0d60: b               #0xbb0d18
    // 0xbb0d64: ArrayStore: r3[0] = r4  ; List_8
    //     0xbb0d64: stur            x4, [x3, #0x17]
    // 0xbb0d68: mov             x1, x4
    // 0xbb0d6c: r0 = 11
    //     0xbb0d6c: movz            x0, #0xb
    // 0xbb0d70: cmp             x1, x0
    // 0xbb0d74: b.hs            #0xbb0da4
    // 0xbb0d78: ArrayLoad: r0 = r2[r4]  ; Unknown_4
    //     0xbb0d78: add             x16, x2, x4, lsl #2
    //     0xbb0d7c: ldur            w0, [x16, #0xf]
    // 0xbb0d80: DecompressPointer r0
    //     0xbb0d80: add             x0, x0, HEAP, lsl #32
    // 0xbb0d84: LoadField: d0 = r0->field_f
    //     0xbb0d84: ldur            d0, [x0, #0xf]
    // 0xbb0d88: LeaveFrame
    //     0xbb0d88: mov             SP, fp
    //     0xbb0d8c: ldp             fp, lr, [SP], #0x10
    // 0xbb0d90: ret
    //     0xbb0d90: ret             
    // 0xbb0d94: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xbb0d94: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0xbb0d98: r0 = StackOverflowSharedWithFPURegs()
    //     0xbb0d98: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xbb0d9c: b               #0xbb0d24
    // 0xbb0da0: r0 = RangeErrorSharedWithFPURegs()
    //     0xbb0da0: bl              #0xc5f360  ; RangeErrorSharedWithFPURegsStub
    // 0xbb0da4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0xbb0da4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
}

// class id: 4814, size: 0x2c, field offset: 0x2c
class TextEditingController extends ValueNotifier<dynamic> {

  get _ selection(/* No info */) {
    // ** addr: 0x5c7504, size: 0x18
    // 0x5c7504: ldr             x1, [SP]
    // 0x5c7508: LoadField: r2 = r1->field_27
    //     0x5c7508: ldur            w2, [x1, #0x27]
    // 0x5c750c: DecompressPointer r2
    //     0x5c750c: add             x2, x2, HEAP, lsl #32
    // 0x5c7510: LoadField: r0 = r2->field_b
    //     0x5c7510: ldur            w0, [x2, #0xb]
    // 0x5c7514: DecompressPointer r0
    //     0x5c7514: add             x0, x0, HEAP, lsl #32
    // 0x5c7518: ret
    //     0x5c7518: ret             
  }
  set _ selection=(/* No info */) {
    // ** addr: 0x5dc0b8, size: 0xf4
    // 0x5dc0b8: EnterFrame
    //     0x5dc0b8: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc0bc: mov             fp, SP
    // 0x5dc0c0: AllocStack(0x18)
    //     0x5dc0c0: sub             SP, SP, #0x18
    // 0x5dc0c4: CheckStackOverflow
    //     0x5dc0c4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dc0c8: cmp             SP, x16
    //     0x5dc0cc: b.ls            #0x5dc1a4
    // 0x5dc0d0: ldr             x16, [fp, #0x18]
    // 0x5dc0d4: ldr             lr, [fp, #0x10]
    // 0x5dc0d8: stp             lr, x16, [SP]
    // 0x5dc0dc: r0 = isSelectionWithinTextBounds()
    //     0x5dc0dc: bl              #0x5dc1fc  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::isSelectionWithinTextBounds
    // 0x5dc0e0: tbnz            w0, #4, #0x5dc16c
    // 0x5dc0e4: ldr             x1, [fp, #0x10]
    // 0x5dc0e8: LoadField: r0 = r1->field_7
    //     0x5dc0e8: ldur            x0, [x1, #7]
    // 0x5dc0ec: LoadField: r2 = r1->field_f
    //     0x5dc0ec: ldur            x2, [x1, #0xf]
    // 0x5dc0f0: cmp             x0, x2
    // 0x5dc0f4: b.ne            #0x5dc12c
    // 0x5dc0f8: ldr             x16, [fp, #0x18]
    // 0x5dc0fc: stp             x1, x16, [SP]
    // 0x5dc100: r0 = _isSelectionWithinComposingRange()
    //     0x5dc100: bl              #0x5dc1ac  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::_isSelectionWithinComposingRange
    // 0x5dc104: tbnz            w0, #4, #0x5dc124
    // 0x5dc108: ldr             x0, [fp, #0x18]
    // 0x5dc10c: LoadField: r1 = r0->field_27
    //     0x5dc10c: ldur            w1, [x0, #0x27]
    // 0x5dc110: DecompressPointer r1
    //     0x5dc110: add             x1, x1, HEAP, lsl #32
    // 0x5dc114: LoadField: r2 = r1->field_f
    //     0x5dc114: ldur            w2, [x1, #0xf]
    // 0x5dc118: DecompressPointer r2
    //     0x5dc118: add             x2, x2, HEAP, lsl #32
    // 0x5dc11c: mov             x1, x2
    // 0x5dc120: b               #0x5dc134
    // 0x5dc124: ldr             x0, [fp, #0x18]
    // 0x5dc128: b               #0x5dc130
    // 0x5dc12c: ldr             x0, [fp, #0x18]
    // 0x5dc130: r1 = Instance_TextRange
    //     0x5dc130: ldr             x1, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0x5dc134: LoadField: r2 = r0->field_27
    //     0x5dc134: ldur            w2, [x0, #0x27]
    // 0x5dc138: DecompressPointer r2
    //     0x5dc138: add             x2, x2, HEAP, lsl #32
    // 0x5dc13c: ldr             x16, [fp, #0x10]
    // 0x5dc140: stp             x16, x2, [SP, #8]
    // 0x5dc144: str             x1, [SP]
    // 0x5dc148: r4 = const [0, 0x3, 0x3, 0x1, composing, 0x2, selection, 0x1, null]
    //     0x5dc148: ldr             x4, [PP, #0x6778]  ; [pp+0x6778] List(9) [0, 0x3, 0x3, 0x1, "composing", 0x2, "selection", 0x1, Null]
    // 0x5dc14c: r0 = copyWith()
    //     0x5dc14c: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x5dc150: ldr             x16, [fp, #0x18]
    // 0x5dc154: stp             x0, x16, [SP]
    // 0x5dc158: r0 = value=()
    //     0x5dc158: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x5dc15c: r0 = Null
    //     0x5dc15c: mov             x0, NULL
    // 0x5dc160: LeaveFrame
    //     0x5dc160: mov             SP, fp
    //     0x5dc164: ldp             fp, lr, [SP], #0x10
    // 0x5dc168: ret
    //     0x5dc168: ret             
    // 0x5dc16c: ldr             x0, [fp, #0x10]
    // 0x5dc170: r1 = Null
    //     0x5dc170: mov             x1, NULL
    // 0x5dc174: r2 = 4
    //     0x5dc174: movz            x2, #0x4
    // 0x5dc178: r0 = AllocateArray()
    //     0x5dc178: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x5dc17c: r17 = "invalid text selection: "
    //     0x5dc17c: ldr             x17, [PP, #0x6780]  ; [pp+0x6780] "invalid text selection: "
    // 0x5dc180: StoreField: r0->field_f = r17
    //     0x5dc180: stur            w17, [x0, #0xf]
    // 0x5dc184: ldr             x1, [fp, #0x10]
    // 0x5dc188: StoreField: r0->field_13 = r1
    //     0x5dc188: stur            w1, [x0, #0x13]
    // 0x5dc18c: str             x0, [SP]
    // 0x5dc190: r0 = _interpolate()
    //     0x5dc190: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x5dc194: stp             x0, NULL, [SP]
    // 0x5dc198: r0 = FlutterError()
    //     0x5dc198: bl              #0x5be9cc  ; [package:flutter/src/foundation/assertions.dart] FlutterError::FlutterError
    // 0x5dc19c: r0 = Throw()
    //     0x5dc19c: bl              #0xc5d2b8  ; ThrowStub
    // 0x5dc1a0: brk             #0
    // 0x5dc1a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dc1a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dc1a8: b               #0x5dc0d0
  }
  _ _isSelectionWithinComposingRange(/* No info */) {
    // ** addr: 0x5dc1ac, size: 0x50
    // 0x5dc1ac: ldr             x1, [SP]
    // 0x5dc1b0: LoadField: r2 = r1->field_7
    //     0x5dc1b0: ldur            x2, [x1, #7]
    // 0x5dc1b4: ldr             x3, [SP, #8]
    // 0x5dc1b8: LoadField: r4 = r3->field_27
    //     0x5dc1b8: ldur            w4, [x3, #0x27]
    // 0x5dc1bc: DecompressPointer r4
    //     0x5dc1bc: add             x4, x4, HEAP, lsl #32
    // 0x5dc1c0: LoadField: r3 = r4->field_f
    //     0x5dc1c0: ldur            w3, [x4, #0xf]
    // 0x5dc1c4: DecompressPointer r3
    //     0x5dc1c4: add             x3, x3, HEAP, lsl #32
    // 0x5dc1c8: LoadField: r4 = r3->field_7
    //     0x5dc1c8: ldur            x4, [x3, #7]
    // 0x5dc1cc: cmp             x2, x4
    // 0x5dc1d0: b.lt            #0x5dc1f4
    // 0x5dc1d4: LoadField: r2 = r1->field_f
    //     0x5dc1d4: ldur            x2, [x1, #0xf]
    // 0x5dc1d8: LoadField: r1 = r3->field_f
    //     0x5dc1d8: ldur            x1, [x3, #0xf]
    // 0x5dc1dc: cmp             x2, x1
    // 0x5dc1e0: r16 = true
    //     0x5dc1e0: add             x16, NULL, #0x20  ; true
    // 0x5dc1e4: r17 = false
    //     0x5dc1e4: add             x17, NULL, #0x30  ; false
    // 0x5dc1e8: csel            x3, x16, x17, le
    // 0x5dc1ec: mov             x0, x3
    // 0x5dc1f0: b               #0x5dc1f8
    // 0x5dc1f4: r0 = false
    //     0x5dc1f4: add             x0, NULL, #0x30  ; false
    // 0x5dc1f8: ret
    //     0x5dc1f8: ret             
  }
  _ isSelectionWithinTextBounds(/* No info */) {
    // ** addr: 0x5dc1fc, size: 0x98
    // 0x5dc1fc: EnterFrame
    //     0x5dc1fc: stp             fp, lr, [SP, #-0x10]!
    //     0x5dc200: mov             fp, SP
    // 0x5dc204: AllocStack(0x10)
    //     0x5dc204: sub             SP, SP, #0x10
    // 0x5dc208: CheckStackOverflow
    //     0x5dc208: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5dc20c: cmp             SP, x16
    //     0x5dc210: b.ls            #0x5dc28c
    // 0x5dc214: ldr             x0, [fp, #0x10]
    // 0x5dc218: LoadField: r1 = r0->field_7
    //     0x5dc218: ldur            x1, [x0, #7]
    // 0x5dc21c: ldr             x2, [fp, #0x18]
    // 0x5dc220: LoadField: r3 = r2->field_27
    //     0x5dc220: ldur            w3, [x2, #0x27]
    // 0x5dc224: DecompressPointer r3
    //     0x5dc224: add             x3, x3, HEAP, lsl #32
    // 0x5dc228: LoadField: r4 = r3->field_7
    //     0x5dc228: ldur            w4, [x3, #7]
    // 0x5dc22c: DecompressPointer r4
    //     0x5dc22c: add             x4, x4, HEAP, lsl #32
    // 0x5dc230: LoadField: r3 = r4->field_7
    //     0x5dc230: ldur            w3, [x4, #7]
    // 0x5dc234: DecompressPointer r3
    //     0x5dc234: add             x3, x3, HEAP, lsl #32
    // 0x5dc238: r4 = LoadInt32Instr(r3)
    //     0x5dc238: sbfx            x4, x3, #1, #0x1f
    // 0x5dc23c: cmp             x1, x4
    // 0x5dc240: b.gt            #0x5dc27c
    // 0x5dc244: LoadField: r1 = r0->field_f
    //     0x5dc244: ldur            x1, [x0, #0xf]
    // 0x5dc248: stur            x1, [fp, #-8]
    // 0x5dc24c: str             x2, [SP]
    // 0x5dc250: r0 = text()
    //     0x5dc250: bl              #0x5dc294  ; [package:flutter/src/widgets/editable_text.dart] TextEditingController::text
    // 0x5dc254: LoadField: r1 = r0->field_7
    //     0x5dc254: ldur            w1, [x0, #7]
    // 0x5dc258: DecompressPointer r1
    //     0x5dc258: add             x1, x1, HEAP, lsl #32
    // 0x5dc25c: r2 = LoadInt32Instr(r1)
    //     0x5dc25c: sbfx            x2, x1, #1, #0x1f
    // 0x5dc260: ldur            x1, [fp, #-8]
    // 0x5dc264: cmp             x1, x2
    // 0x5dc268: r16 = true
    //     0x5dc268: add             x16, NULL, #0x20  ; true
    // 0x5dc26c: r17 = false
    //     0x5dc26c: add             x17, NULL, #0x30  ; false
    // 0x5dc270: csel            x3, x16, x17, le
    // 0x5dc274: mov             x0, x3
    // 0x5dc278: b               #0x5dc280
    // 0x5dc27c: r0 = false
    //     0x5dc27c: add             x0, NULL, #0x30  ; false
    // 0x5dc280: LeaveFrame
    //     0x5dc280: mov             SP, fp
    //     0x5dc284: ldp             fp, lr, [SP], #0x10
    // 0x5dc288: ret
    //     0x5dc288: ret             
    // 0x5dc28c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5dc28c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5dc290: b               #0x5dc214
  }
  get _ text(/* No info */) {
    // ** addr: 0x5dc294, size: 0x18
    // 0x5dc294: ldr             x1, [SP]
    // 0x5dc298: LoadField: r2 = r1->field_27
    //     0x5dc298: ldur            w2, [x1, #0x27]
    // 0x5dc29c: DecompressPointer r2
    //     0x5dc29c: add             x2, x2, HEAP, lsl #32
    // 0x5dc2a0: LoadField: r0 = r2->field_7
    //     0x5dc2a0: ldur            w0, [x2, #7]
    // 0x5dc2a4: DecompressPointer r0
    //     0x5dc2a4: add             x0, x0, HEAP, lsl #32
    // 0x5dc2a8: ret
    //     0x5dc2a8: ret             
  }
  _ clearComposing(/* No info */) {
    // ** addr: 0x5e20e4, size: 0x58
    // 0x5e20e4: EnterFrame
    //     0x5e20e4: stp             fp, lr, [SP, #-0x10]!
    //     0x5e20e8: mov             fp, SP
    // 0x5e20ec: AllocStack(0x10)
    //     0x5e20ec: sub             SP, SP, #0x10
    // 0x5e20f0: CheckStackOverflow
    //     0x5e20f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5e20f4: cmp             SP, x16
    //     0x5e20f8: b.ls            #0x5e2134
    // 0x5e20fc: ldr             x0, [fp, #0x10]
    // 0x5e2100: LoadField: r1 = r0->field_27
    //     0x5e2100: ldur            w1, [x0, #0x27]
    // 0x5e2104: DecompressPointer r1
    //     0x5e2104: add             x1, x1, HEAP, lsl #32
    // 0x5e2108: r16 = Instance_TextRange
    //     0x5e2108: ldr             x16, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0x5e210c: stp             x16, x1, [SP]
    // 0x5e2110: r4 = const [0, 0x2, 0x2, 0x1, composing, 0x1, null]
    //     0x5e2110: ldr             x4, [PP, #0x6ac8]  ; [pp+0x6ac8] List(7) [0, 0x2, 0x2, 0x1, "composing", 0x1, Null]
    // 0x5e2114: r0 = copyWith()
    //     0x5e2114: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x5e2118: ldr             x16, [fp, #0x10]
    // 0x5e211c: stp             x0, x16, [SP]
    // 0x5e2120: r0 = value=()
    //     0x5e2120: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x5e2124: r0 = Null
    //     0x5e2124: mov             x0, NULL
    // 0x5e2128: LeaveFrame
    //     0x5e2128: mov             SP, fp
    //     0x5e212c: ldp             fp, lr, [SP], #0x10
    // 0x5e2130: ret
    //     0x5e2130: ret             
    // 0x5e2134: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5e2134: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5e2138: b               #0x5e20fc
  }
  _ clear(/* No info */) {
    // ** addr: 0x6ec030, size: 0x44
    // 0x6ec030: EnterFrame
    //     0x6ec030: stp             fp, lr, [SP, #-0x10]!
    //     0x6ec034: mov             fp, SP
    // 0x6ec038: AllocStack(0x10)
    //     0x6ec038: sub             SP, SP, #0x10
    // 0x6ec03c: CheckStackOverflow
    //     0x6ec03c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6ec040: cmp             SP, x16
    //     0x6ec044: b.ls            #0x6ec06c
    // 0x6ec048: ldr             x16, [fp, #0x10]
    // 0x6ec04c: r30 = Instance_TextEditingValue
    //     0x6ec04c: add             lr, PP, #0x1f, lsl #12  ; [pp+0x1ff30] Obj!TextEditingValue@c2c8d1
    //     0x6ec050: ldr             lr, [lr, #0xf30]
    // 0x6ec054: stp             lr, x16, [SP]
    // 0x6ec058: r0 = value=()
    //     0x6ec058: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x6ec05c: r0 = Null
    //     0x6ec05c: mov             x0, NULL
    // 0x6ec060: LeaveFrame
    //     0x6ec060: mov             SP, fp
    //     0x6ec064: ldp             fp, lr, [SP], #0x10
    // 0x6ec068: ret
    //     0x6ec068: ret             
    // 0x6ec06c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6ec06c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6ec070: b               #0x6ec048
  }
  set _ text=(/* No info */) {
    // ** addr: 0x6fd1bc, size: 0x6c
    // 0x6fd1bc: EnterFrame
    //     0x6fd1bc: stp             fp, lr, [SP, #-0x10]!
    //     0x6fd1c0: mov             fp, SP
    // 0x6fd1c4: AllocStack(0x20)
    //     0x6fd1c4: sub             SP, SP, #0x20
    // 0x6fd1c8: CheckStackOverflow
    //     0x6fd1c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6fd1cc: cmp             SP, x16
    //     0x6fd1d0: b.ls            #0x6fd220
    // 0x6fd1d4: ldr             x0, [fp, #0x18]
    // 0x6fd1d8: LoadField: r1 = r0->field_27
    //     0x6fd1d8: ldur            w1, [x0, #0x27]
    // 0x6fd1dc: DecompressPointer r1
    //     0x6fd1dc: add             x1, x1, HEAP, lsl #32
    // 0x6fd1e0: ldr             x16, [fp, #0x10]
    // 0x6fd1e4: stp             x16, x1, [SP, #0x10]
    // 0x6fd1e8: r16 = Instance_TextSelection
    //     0x6fd1e8: add             x16, PP, #0xe, lsl #12  ; [pp+0xe5d8] Obj!TextSelection@c39ef1
    //     0x6fd1ec: ldr             x16, [x16, #0x5d8]
    // 0x6fd1f0: r30 = Instance_TextRange
    //     0x6fd1f0: ldr             lr, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0x6fd1f4: stp             lr, x16, [SP]
    // 0x6fd1f8: r4 = const [0, 0x4, 0x4, 0x1, composing, 0x3, selection, 0x2, text, 0x1, null]
    //     0x6fd1f8: add             x4, PP, #0x20, lsl #12  ; [pp+0x207e8] List(11) [0, 0x4, 0x4, 0x1, "composing", 0x3, "selection", 0x2, "text", 0x1, Null]
    //     0x6fd1fc: ldr             x4, [x4, #0x7e8]
    // 0x6fd200: r0 = copyWith()
    //     0x6fd200: bl              #0x5d722c  ; [package:flutter/src/services/text_input.dart] TextEditingValue::copyWith
    // 0x6fd204: ldr             x16, [fp, #0x18]
    // 0x6fd208: stp             x0, x16, [SP]
    // 0x6fd20c: r0 = value=()
    //     0x6fd20c: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0x6fd210: r0 = Null
    //     0x6fd210: mov             x0, NULL
    // 0x6fd214: LeaveFrame
    //     0x6fd214: mov             SP, fp
    //     0x6fd218: ldp             fp, lr, [SP], #0x10
    // 0x6fd21c: ret
    //     0x6fd21c: ret             
    // 0x6fd220: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6fd220: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6fd224: b               #0x6fd1d4
  }
  _ TextEditingController(/* No info */) {
    // ** addr: 0x731c34, size: 0x130
    // 0x731c34: EnterFrame
    //     0x731c34: stp             fp, lr, [SP, #-0x10]!
    //     0x731c38: mov             fp, SP
    // 0x731c3c: AllocStack(0x10)
    //     0x731c3c: sub             SP, SP, #0x10
    // 0x731c40: SetupParameters(TextEditingController this /* r3, fp-0x10 */, {dynamic text = Null /* r0, fp-0x8 */})
    //     0x731c40: mov             x0, x4
    //     0x731c44: ldur            w1, [x0, #0x13]
    //     0x731c48: add             x1, x1, HEAP, lsl #32
    //     0x731c4c: sub             x2, x1, #2
    //     0x731c50: add             x3, fp, w2, sxtw #2
    //     0x731c54: ldr             x3, [x3, #0x10]
    //     0x731c58: stur            x3, [fp, #-0x10]
    //     0x731c5c: ldur            w2, [x0, #0x1f]
    //     0x731c60: add             x2, x2, HEAP, lsl #32
    //     0x731c64: ldr             x16, [PP, #0x65c8]  ; [pp+0x65c8] "text"
    //     0x731c68: cmp             w2, w16
    //     0x731c6c: b.ne            #0x731c8c
    //     0x731c70: ldur            w2, [x0, #0x23]
    //     0x731c74: add             x2, x2, HEAP, lsl #32
    //     0x731c78: sub             w0, w1, w2
    //     0x731c7c: add             x1, fp, w0, sxtw #2
    //     0x731c80: ldr             x1, [x1, #8]
    //     0x731c84: mov             x0, x1
    //     0x731c88: b               #0x731c90
    //     0x731c8c: mov             x0, NULL
    //     0x731c90: stur            x0, [fp, #-8]
    // 0x731c94: CheckStackOverflow
    //     0x731c94: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x731c98: cmp             SP, x16
    //     0x731c9c: b.ls            #0x731d5c
    // 0x731ca0: cmp             w0, NULL
    // 0x731ca4: b.ne            #0x731cb8
    // 0x731ca8: mov             x1, x3
    // 0x731cac: r0 = Instance_TextEditingValue
    //     0x731cac: add             x0, PP, #0xe, lsl #12  ; [pp+0xe5d0] Obj!TextEditingValue@c2c8f1
    //     0x731cb0: ldr             x0, [x0, #0x5d0]
    // 0x731cb4: b               #0x731ce4
    // 0x731cb8: r0 = TextEditingValue()
    //     0x731cb8: bl              #0x5d73a4  ; AllocateTextEditingValueStub -> TextEditingValue (size=0x14)
    // 0x731cbc: mov             x1, x0
    // 0x731cc0: ldur            x0, [fp, #-8]
    // 0x731cc4: StoreField: r1->field_7 = r0
    //     0x731cc4: stur            w0, [x1, #7]
    // 0x731cc8: r0 = Instance_TextSelection
    //     0x731cc8: add             x0, PP, #0xe, lsl #12  ; [pp+0xe5d8] Obj!TextSelection@c39ef1
    //     0x731ccc: ldr             x0, [x0, #0x5d8]
    // 0x731cd0: StoreField: r1->field_b = r0
    //     0x731cd0: stur            w0, [x1, #0xb]
    // 0x731cd4: r0 = Instance_TextRange
    //     0x731cd4: ldr             x0, [PP, #0x6770]  ; [pp+0x6770] Obj!TextRange@c39ea1
    // 0x731cd8: StoreField: r1->field_f = r0
    //     0x731cd8: stur            w0, [x1, #0xf]
    // 0x731cdc: mov             x0, x1
    // 0x731ce0: ldur            x1, [fp, #-0x10]
    // 0x731ce4: r2 = 0
    //     0x731ce4: movz            x2, #0
    // 0x731ce8: StoreField: r1->field_27 = r0
    //     0x731ce8: stur            w0, [x1, #0x27]
    //     0x731cec: ldurb           w16, [x1, #-1]
    //     0x731cf0: ldurb           w17, [x0, #-1]
    //     0x731cf4: and             x16, x17, x16, lsr #2
    //     0x731cf8: tst             x16, HEAP, lsr #32
    //     0x731cfc: b.eq            #0x731d04
    //     0x731d00: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x731d04: StoreField: r1->field_7 = r2
    //     0x731d04: stur            x2, [x1, #7]
    // 0x731d08: StoreField: r1->field_13 = r2
    //     0x731d08: stur            x2, [x1, #0x13]
    // 0x731d0c: StoreField: r1->field_1b = r2
    //     0x731d0c: stur            x2, [x1, #0x1b]
    // 0x731d10: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0x731d10: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x731d14: ldr             x0, [x0, #0x1478]
    //     0x731d18: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x731d1c: cmp             w0, w16
    //     0x731d20: b.ne            #0x731d2c
    //     0x731d24: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0x731d28: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x731d2c: ldur            x1, [fp, #-0x10]
    // 0x731d30: StoreField: r1->field_f = r0
    //     0x731d30: stur            w0, [x1, #0xf]
    //     0x731d34: ldurb           w16, [x1, #-1]
    //     0x731d38: ldurb           w17, [x0, #-1]
    //     0x731d3c: and             x16, x17, x16, lsr #2
    //     0x731d40: tst             x16, HEAP, lsr #32
    //     0x731d44: b.eq            #0x731d4c
    //     0x731d48: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x731d4c: r0 = Null
    //     0x731d4c: mov             x0, NULL
    // 0x731d50: LeaveFrame
    //     0x731d50: mov             SP, fp
    //     0x731d54: ldp             fp, lr, [SP], #0x10
    // 0x731d58: ret
    //     0x731d58: ret             
    // 0x731d5c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x731d5c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x731d60: b               #0x731ca0
  }
  _ buildTextSpan(/* No info */) {
    // ** addr: 0x95b310, size: 0x200
    // 0x95b310: EnterFrame
    //     0x95b310: stp             fp, lr, [SP, #-0x10]!
    //     0x95b314: mov             fp, SP
    // 0x95b318: AllocStack(0x30)
    //     0x95b318: sub             SP, SP, #0x30
    // 0x95b31c: CheckStackOverflow
    //     0x95b31c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x95b320: cmp             SP, x16
    //     0x95b324: b.ls            #0x95b508
    // 0x95b328: ldr             x0, [fp, #0x20]
    // 0x95b32c: LoadField: r1 = r0->field_27
    //     0x95b32c: ldur            w1, [x0, #0x27]
    // 0x95b330: DecompressPointer r1
    //     0x95b330: add             x1, x1, HEAP, lsl #32
    // 0x95b334: str             x1, [SP]
    // 0x95b338: r0 = isComposingRangeValid()
    //     0x95b338: bl              #0x95b5b0  ; [package:flutter/src/services/text_input.dart] TextEditingValue::isComposingRangeValid
    // 0x95b33c: tbnz            w0, #4, #0x95b34c
    // 0x95b340: ldr             x0, [fp, #0x10]
    // 0x95b344: eor             x1, x0, #0x10
    // 0x95b348: tbnz            w1, #4, #0x95b398
    // 0x95b34c: ldr             x0, [fp, #0x20]
    // 0x95b350: ldr             x1, [fp, #0x18]
    // 0x95b354: LoadField: r2 = r0->field_27
    //     0x95b354: ldur            w2, [x0, #0x27]
    // 0x95b358: DecompressPointer r2
    //     0x95b358: add             x2, x2, HEAP, lsl #32
    // 0x95b35c: LoadField: r0 = r2->field_7
    //     0x95b35c: ldur            w0, [x2, #7]
    // 0x95b360: DecompressPointer r0
    //     0x95b360: add             x0, x0, HEAP, lsl #32
    // 0x95b364: stur            x0, [fp, #-8]
    // 0x95b368: r0 = TextSpan()
    //     0x95b368: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b36c: mov             x1, x0
    // 0x95b370: ldur            x0, [fp, #-8]
    // 0x95b374: StoreField: r1->field_b = r0
    //     0x95b374: stur            w0, [x1, #0xb]
    // 0x95b378: r2 = Instance__DeferringMouseCursor
    //     0x95b378: ldr             x2, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b37c: ArrayStore: r1[0] = r2  ; List_4
    //     0x95b37c: stur            w2, [x1, #0x17]
    // 0x95b380: ldr             x3, [fp, #0x18]
    // 0x95b384: StoreField: r1->field_7 = r3
    //     0x95b384: stur            w3, [x1, #7]
    // 0x95b388: mov             x0, x1
    // 0x95b38c: LeaveFrame
    //     0x95b38c: mov             SP, fp
    //     0x95b390: ldp             fp, lr, [SP], #0x10
    // 0x95b394: ret
    //     0x95b394: ret             
    // 0x95b398: ldr             x0, [fp, #0x20]
    // 0x95b39c: ldr             x3, [fp, #0x18]
    // 0x95b3a0: r2 = Instance__DeferringMouseCursor
    //     0x95b3a0: ldr             x2, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b3a4: r16 = Instance_TextStyle
    //     0x95b3a4: add             x16, PP, #0x41, lsl #12  ; [pp+0x41230] Obj!TextStyle@c36161
    //     0x95b3a8: ldr             x16, [x16, #0x230]
    // 0x95b3ac: stp             x16, x3, [SP]
    // 0x95b3b0: r0 = merge()
    //     0x95b3b0: bl              #0x60ca2c  ; [package:flutter/src/painting/text_style.dart] TextStyle::merge
    // 0x95b3b4: mov             x1, x0
    // 0x95b3b8: ldr             x0, [fp, #0x20]
    // 0x95b3bc: stur            x1, [fp, #-8]
    // 0x95b3c0: LoadField: r2 = r0->field_27
    //     0x95b3c0: ldur            w2, [x0, #0x27]
    // 0x95b3c4: DecompressPointer r2
    //     0x95b3c4: add             x2, x2, HEAP, lsl #32
    // 0x95b3c8: LoadField: r3 = r2->field_f
    //     0x95b3c8: ldur            w3, [x2, #0xf]
    // 0x95b3cc: DecompressPointer r3
    //     0x95b3cc: add             x3, x3, HEAP, lsl #32
    // 0x95b3d0: LoadField: r4 = r2->field_7
    //     0x95b3d0: ldur            w4, [x2, #7]
    // 0x95b3d4: DecompressPointer r4
    //     0x95b3d4: add             x4, x4, HEAP, lsl #32
    // 0x95b3d8: stp             x4, x3, [SP]
    // 0x95b3dc: r0 = textBefore()
    //     0x95b3dc: bl              #0x95b554  ; [dart:ui] TextRange::textBefore
    // 0x95b3e0: stur            x0, [fp, #-0x10]
    // 0x95b3e4: r0 = TextSpan()
    //     0x95b3e4: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b3e8: mov             x1, x0
    // 0x95b3ec: ldur            x0, [fp, #-0x10]
    // 0x95b3f0: stur            x1, [fp, #-0x18]
    // 0x95b3f4: StoreField: r1->field_b = r0
    //     0x95b3f4: stur            w0, [x1, #0xb]
    // 0x95b3f8: r0 = Instance__DeferringMouseCursor
    //     0x95b3f8: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b3fc: ArrayStore: r1[0] = r0  ; List_4
    //     0x95b3fc: stur            w0, [x1, #0x17]
    // 0x95b400: ldr             x2, [fp, #0x20]
    // 0x95b404: LoadField: r3 = r2->field_27
    //     0x95b404: ldur            w3, [x2, #0x27]
    // 0x95b408: DecompressPointer r3
    //     0x95b408: add             x3, x3, HEAP, lsl #32
    // 0x95b40c: LoadField: r4 = r3->field_f
    //     0x95b40c: ldur            w4, [x3, #0xf]
    // 0x95b410: DecompressPointer r4
    //     0x95b410: add             x4, x4, HEAP, lsl #32
    // 0x95b414: LoadField: r5 = r3->field_7
    //     0x95b414: ldur            w5, [x3, #7]
    // 0x95b418: DecompressPointer r5
    //     0x95b418: add             x5, x5, HEAP, lsl #32
    // 0x95b41c: stp             x5, x4, [SP]
    // 0x95b420: r0 = textInside()
    //     0x95b420: bl              #0x5cc3d0  ; [dart:ui] TextRange::textInside
    // 0x95b424: stur            x0, [fp, #-0x10]
    // 0x95b428: r0 = TextSpan()
    //     0x95b428: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b42c: mov             x1, x0
    // 0x95b430: ldur            x0, [fp, #-0x10]
    // 0x95b434: stur            x1, [fp, #-0x20]
    // 0x95b438: StoreField: r1->field_b = r0
    //     0x95b438: stur            w0, [x1, #0xb]
    // 0x95b43c: r0 = Instance__DeferringMouseCursor
    //     0x95b43c: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b440: ArrayStore: r1[0] = r0  ; List_4
    //     0x95b440: stur            w0, [x1, #0x17]
    // 0x95b444: ldur            x2, [fp, #-8]
    // 0x95b448: StoreField: r1->field_7 = r2
    //     0x95b448: stur            w2, [x1, #7]
    // 0x95b44c: ldr             x2, [fp, #0x20]
    // 0x95b450: LoadField: r3 = r2->field_27
    //     0x95b450: ldur            w3, [x2, #0x27]
    // 0x95b454: DecompressPointer r3
    //     0x95b454: add             x3, x3, HEAP, lsl #32
    // 0x95b458: LoadField: r2 = r3->field_f
    //     0x95b458: ldur            w2, [x3, #0xf]
    // 0x95b45c: DecompressPointer r2
    //     0x95b45c: add             x2, x2, HEAP, lsl #32
    // 0x95b460: LoadField: r4 = r3->field_7
    //     0x95b460: ldur            w4, [x3, #7]
    // 0x95b464: DecompressPointer r4
    //     0x95b464: add             x4, x4, HEAP, lsl #32
    // 0x95b468: stp             x4, x2, [SP]
    // 0x95b46c: r0 = textAfter()
    //     0x95b46c: bl              #0x95b510  ; [dart:ui] TextRange::textAfter
    // 0x95b470: stur            x0, [fp, #-8]
    // 0x95b474: r0 = TextSpan()
    //     0x95b474: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b478: mov             x3, x0
    // 0x95b47c: ldur            x0, [fp, #-8]
    // 0x95b480: stur            x3, [fp, #-0x10]
    // 0x95b484: StoreField: r3->field_b = r0
    //     0x95b484: stur            w0, [x3, #0xb]
    // 0x95b488: r0 = Instance__DeferringMouseCursor
    //     0x95b488: ldr             x0, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b48c: ArrayStore: r3[0] = r0  ; List_4
    //     0x95b48c: stur            w0, [x3, #0x17]
    // 0x95b490: r1 = Null
    //     0x95b490: mov             x1, NULL
    // 0x95b494: r2 = 6
    //     0x95b494: movz            x2, #0x6
    // 0x95b498: r0 = AllocateArray()
    //     0x95b498: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x95b49c: mov             x2, x0
    // 0x95b4a0: ldur            x0, [fp, #-0x18]
    // 0x95b4a4: stur            x2, [fp, #-8]
    // 0x95b4a8: StoreField: r2->field_f = r0
    //     0x95b4a8: stur            w0, [x2, #0xf]
    // 0x95b4ac: ldur            x0, [fp, #-0x20]
    // 0x95b4b0: StoreField: r2->field_13 = r0
    //     0x95b4b0: stur            w0, [x2, #0x13]
    // 0x95b4b4: ldur            x0, [fp, #-0x10]
    // 0x95b4b8: ArrayStore: r2[0] = r0  ; List_4
    //     0x95b4b8: stur            w0, [x2, #0x17]
    // 0x95b4bc: r1 = <TextSpan>
    //     0x95b4bc: add             x1, PP, #0x41, lsl #12  ; [pp+0x41238] TypeArguments: <TextSpan>
    //     0x95b4c0: ldr             x1, [x1, #0x238]
    // 0x95b4c4: r0 = AllocateGrowableArray()
    //     0x95b4c4: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x95b4c8: mov             x1, x0
    // 0x95b4cc: ldur            x0, [fp, #-8]
    // 0x95b4d0: stur            x1, [fp, #-0x10]
    // 0x95b4d4: StoreField: r1->field_f = r0
    //     0x95b4d4: stur            w0, [x1, #0xf]
    // 0x95b4d8: r0 = 6
    //     0x95b4d8: movz            x0, #0x6
    // 0x95b4dc: StoreField: r1->field_b = r0
    //     0x95b4dc: stur            w0, [x1, #0xb]
    // 0x95b4e0: r0 = TextSpan()
    //     0x95b4e0: bl              #0x66e59c  ; AllocateTextSpanStub -> TextSpan (size=0x30)
    // 0x95b4e4: ldur            x1, [fp, #-0x10]
    // 0x95b4e8: StoreField: r0->field_f = r1
    //     0x95b4e8: stur            w1, [x0, #0xf]
    // 0x95b4ec: r1 = Instance__DeferringMouseCursor
    //     0x95b4ec: ldr             x1, [PP, #0x3340]  ; [pp+0x3340] Obj!_DeferringMouseCursor@c36ef1
    // 0x95b4f0: ArrayStore: r0[0] = r1  ; List_4
    //     0x95b4f0: stur            w1, [x0, #0x17]
    // 0x95b4f4: ldr             x1, [fp, #0x18]
    // 0x95b4f8: StoreField: r0->field_7 = r1
    //     0x95b4f8: stur            w1, [x0, #7]
    // 0x95b4fc: LeaveFrame
    //     0x95b4fc: mov             SP, fp
    //     0x95b500: ldp             fp, lr, [SP], #0x10
    // 0x95b504: ret
    //     0x95b504: ret             
    // 0x95b508: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x95b508: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x95b50c: b               #0x95b328
  }
}
