// lib: easy_refresh, url: package:easy_refresh/easy_refresh.dart

// class id: 1049081, size: 0x8
class :: {

  static _ _ScrollMetricsExtension.isNestedOuter(/* No info */) {
    // ** addr: 0x684b94, size: 0x88
    // 0x684b94: EnterFrame
    //     0x684b94: stp             fp, lr, [SP, #-0x10]!
    //     0x684b98: mov             fp, SP
    // 0x684b9c: AllocStack(0x10)
    //     0x684b9c: sub             SP, SP, #0x10
    // 0x684ba0: CheckStackOverflow
    //     0x684ba0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x684ba4: cmp             SP, x16
    //     0x684ba8: b.ls            #0x684c14
    // 0x684bac: ldr             x0, [fp, #0x10]
    // 0x684bb0: r1 = LoadClassIdInstr(r0)
    //     0x684bb0: ldur            x1, [x0, #-1]
    //     0x684bb4: ubfx            x1, x1, #0xc, #0x14
    // 0x684bb8: lsl             x1, x1, #1
    // 0x684bbc: r2 = LoadInt32Instr(r1)
    //     0x684bbc: sbfx            x2, x1, #1, #0x1f
    // 0x684bc0: r17 = 4788
    //     0x684bc0: movz            x17, #0x12b4
    // 0x684bc4: cmp             x2, x17
    // 0x684bc8: b.lt            #0x684c04
    // 0x684bcc: r17 = 4792
    //     0x684bcc: movz            x17, #0x12b8
    // 0x684bd0: cmp             x2, x17
    // 0x684bd4: b.gt            #0x684c04
    // 0x684bd8: LoadField: r1 = r0->field_2f
    //     0x684bd8: ldur            w1, [x0, #0x2f]
    // 0x684bdc: DecompressPointer r1
    //     0x684bdc: add             x1, x1, HEAP, lsl #32
    // 0x684be0: r0 = LoadClassIdInstr(r1)
    //     0x684be0: ldur            x0, [x1, #-1]
    //     0x684be4: ubfx            x0, x0, #0xc, #0x14
    // 0x684be8: r16 = "outer"
    //     0x684be8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d208] "outer"
    //     0x684bec: ldr             x16, [x16, #0x208]
    // 0x684bf0: stp             x16, x1, [SP]
    // 0x684bf4: mov             lr, x0
    // 0x684bf8: ldr             lr, [x21, lr, lsl #3]
    // 0x684bfc: blr             lr
    // 0x684c00: b               #0x684c08
    // 0x684c04: r0 = false
    //     0x684c04: add             x0, NULL, #0x30  ; false
    // 0x684c08: LeaveFrame
    //     0x684c08: mov             SP, fp
    //     0x684c0c: ldp             fp, lr, [SP], #0x10
    // 0x684c10: ret
    //     0x684c10: ret             
    // 0x684c14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684c14: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684c18: b               #0x684bac
  }
  static _ _ScrollMetricsExtension.isNestedInner(/* No info */) {
    // ** addr: 0x68503c, size: 0x88
    // 0x68503c: EnterFrame
    //     0x68503c: stp             fp, lr, [SP, #-0x10]!
    //     0x685040: mov             fp, SP
    // 0x685044: AllocStack(0x10)
    //     0x685044: sub             SP, SP, #0x10
    // 0x685048: CheckStackOverflow
    //     0x685048: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x68504c: cmp             SP, x16
    //     0x685050: b.ls            #0x6850bc
    // 0x685054: ldr             x0, [fp, #0x10]
    // 0x685058: r1 = LoadClassIdInstr(r0)
    //     0x685058: ldur            x1, [x0, #-1]
    //     0x68505c: ubfx            x1, x1, #0xc, #0x14
    // 0x685060: lsl             x1, x1, #1
    // 0x685064: r2 = LoadInt32Instr(r1)
    //     0x685064: sbfx            x2, x1, #1, #0x1f
    // 0x685068: r17 = 4788
    //     0x685068: movz            x17, #0x12b4
    // 0x68506c: cmp             x2, x17
    // 0x685070: b.lt            #0x6850ac
    // 0x685074: r17 = 4792
    //     0x685074: movz            x17, #0x12b8
    // 0x685078: cmp             x2, x17
    // 0x68507c: b.gt            #0x6850ac
    // 0x685080: LoadField: r1 = r0->field_2f
    //     0x685080: ldur            w1, [x0, #0x2f]
    // 0x685084: DecompressPointer r1
    //     0x685084: add             x1, x1, HEAP, lsl #32
    // 0x685088: r0 = LoadClassIdInstr(r1)
    //     0x685088: ldur            x0, [x1, #-1]
    //     0x68508c: ubfx            x0, x0, #0xc, #0x14
    // 0x685090: r16 = "inner"
    //     0x685090: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d210] "inner"
    //     0x685094: ldr             x16, [x16, #0x210]
    // 0x685098: stp             x16, x1, [SP]
    // 0x68509c: mov             lr, x0
    // 0x6850a0: ldr             lr, [x21, lr, lsl #3]
    // 0x6850a4: blr             lr
    // 0x6850a8: b               #0x6850b0
    // 0x6850ac: r0 = false
    //     0x6850ac: add             x0, NULL, #0x30  ; false
    // 0x6850b0: LeaveFrame
    //     0x6850b0: mov             SP, fp
    //     0x6850b4: ldp             fp, lr, [SP], #0x10
    // 0x6850b8: ret
    //     0x6850b8: ret             
    // 0x6850bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6850bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6850c0: b               #0x685054
  }
  [closure] static double kCupertinoHorizontalFrictionFactor(dynamic, double) {
    // ** addr: 0xc627c8, size: 0x16c
    // 0xc627c8: EnterFrame
    //     0xc627c8: stp             fp, lr, [SP, #-0x10]!
    //     0xc627cc: mov             fp, SP
    // 0xc627d0: AllocStack(0x18)
    //     0xc627d0: sub             SP, SP, #0x18
    // 0xc627d4: SetupParameters()
    //     0xc627d4: fmov            d0, #1.00000000
    // 0xc627d4: d0 = 1.000000
    // 0xc627d8: CheckStackOverflow
    //     0xc627d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc627dc: cmp             SP, x16
    //     0xc627e0: b.ls            #0xc6291c
    // 0xc627e4: ldr             x0, [fp, #0x10]
    // 0xc627e8: LoadField: d1 = r0->field_7
    //     0xc627e8: ldur            d1, [x0, #7]
    // 0xc627ec: fsub            d2, d0, d1
    // 0xc627f0: stur            d2, [fp, #-8]
    // 0xc627f4: r16 = 4
    //     0xc627f4: movz            x16, #0x4
    // 0xc627f8: stp             x16, NULL, [SP]
    // 0xc627fc: r0 = _Double.fromInteger()
    //     0xc627fc: bl              #0x5093ec  ; [dart:core] _Double::_Double.fromInteger
    // 0xc62800: LoadField: d1 = r0->field_7
    //     0xc62800: ldur            d1, [x0, #7]
    // 0xc62804: ldur            d0, [fp, #-8]
    // 0xc62808: d30 = 0.000000
    //     0xc62808: fmov            d30, d0
    // 0xc6280c: d0 = 1.000000
    //     0xc6280c: fmov            d0, #1.00000000
    // 0xc62810: fcmp            d1, #0.0
    // 0xc62814: b.vs            #0xc62858
    // 0xc62818: b.eq            #0xc628dc
    // 0xc6281c: fcmp            d1, d0
    // 0xc62820: b.eq            #0xc62848
    // 0xc62824: d31 = 2.000000
    //     0xc62824: fmov            d31, #2.00000000
    // 0xc62828: fcmp            d1, d31
    // 0xc6282c: b.eq            #0xc62850
    // 0xc62830: d31 = 3.000000
    //     0xc62830: fmov            d31, #3.00000000
    // 0xc62834: fcmp            d1, d31
    // 0xc62838: b.ne            #0xc62858
    // 0xc6283c: fmul            d0, d30, d30
    // 0xc62840: fmul            d0, d0, d30
    // 0xc62844: b               #0xc628dc
    // 0xc62848: d0 = 0.000000
    //     0xc62848: fmov            d0, d30
    // 0xc6284c: b               #0xc628dc
    // 0xc62850: fmul            d0, d30, d30
    // 0xc62854: b               #0xc628dc
    // 0xc62858: fcmp            d30, d0
    // 0xc6285c: b.vs            #0xc6286c
    // 0xc62860: b.eq            #0xc628dc
    // 0xc62864: fcmp            d30, d1
    // 0xc62868: b.vc            #0xc62874
    // 0xc6286c: d0 = nan
    //     0xc6286c: ldr             d0, [PP, #0x2a38]  ; [pp+0x2a38] IMM: double(nan) from 0x7ff8000000000000
    // 0xc62870: b               #0xc628dc
    // 0xc62874: d0 = -inf
    //     0xc62874: ldr             d0, [PP, #0xd90]  ; [pp+0xd90] IMM: double(-inf) from 0xfff0000000000000
    // 0xc62878: fcmp            d30, d0
    // 0xc6287c: b.eq            #0xc628a4
    // 0xc62880: d0 = 0.500000
    //     0xc62880: fmov            d0, #0.50000000
    // 0xc62884: fcmp            d1, d0
    // 0xc62888: b.ne            #0xc628a4
    // 0xc6288c: fcmp            d30, #0.0
    // 0xc62890: b.eq            #0xc6289c
    // 0xc62894: fsqrt           d0, d30
    // 0xc62898: b               #0xc628dc
    // 0xc6289c: d0 = 0.000000
    //     0xc6289c: eor             v0.16b, v0.16b, v0.16b
    // 0xc628a0: b               #0xc628dc
    // 0xc628a4: d0 = 0.000000
    //     0xc628a4: fmov            d0, d30
    // 0xc628a8: stp             fp, lr, [SP, #-0x10]!
    // 0xc628ac: mov             fp, SP
    // 0xc628b0: CallRuntime_LibcPow(double, double) -> double
    //     0xc628b0: and             SP, SP, #0xfffffffffffffff0
    //     0xc628b4: mov             sp, SP
    //     0xc628b8: ldr             x16, [THR, #0x4f8]  ; THR::LibcPow
    //     0xc628bc: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xc628c0: blr             x16
    //     0xc628c4: movz            x16, #0x8
    //     0xc628c8: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xc628cc: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xc628d0: sub             sp, x16, #1, lsl #12
    //     0xc628d4: mov             SP, fp
    //     0xc628d8: ldp             fp, lr, [SP], #0x10
    // 0xc628dc: mov             v1.16b, v0.16b
    // 0xc628e0: d0 = 0.520000
    //     0xc628e0: ldr             d0, [PP, #0x2a40]  ; [pp+0x2a40] IMM: double(0.52) from 0x3fe0a3d70a3d70a4
    // 0xc628e4: fmul            d2, d0, d1
    // 0xc628e8: r0 = inline_Allocate_Double()
    //     0xc628e8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc628ec: add             x0, x0, #0x10
    //     0xc628f0: cmp             x1, x0
    //     0xc628f4: b.ls            #0xc62924
    //     0xc628f8: str             x0, [THR, #0x50]  ; THR::top
    //     0xc628fc: sub             x0, x0, #0xf
    //     0xc62900: movz            x1, #0xd148
    //     0xc62904: movk            x1, #0x3, lsl #16
    //     0xc62908: stur            x1, [x0, #-1]
    // 0xc6290c: StoreField: r0->field_7 = d2
    //     0xc6290c: stur            d2, [x0, #7]
    // 0xc62910: LeaveFrame
    //     0xc62910: mov             SP, fp
    //     0xc62914: ldp             fp, lr, [SP], #0x10
    // 0xc62918: ret
    //     0xc62918: ret             
    // 0xc6291c: r0 = StackOverflowSharedWithFPURegs()
    //     0xc6291c: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xc62920: b               #0xc627e4
    // 0xc62924: SaveReg d2
    //     0xc62924: str             q2, [SP, #-0x10]!
    // 0xc62928: r0 = AllocateDouble()
    //     0xc62928: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc6292c: RestoreReg d2
    //     0xc6292c: ldr             q2, [SP], #0x10
    // 0xc62930: b               #0xc6290c
  }
  [closure] static double kCupertinoFrictionFactor(dynamic, double) {
    // ** addr: 0xc62934, size: 0x16c
    // 0xc62934: EnterFrame
    //     0xc62934: stp             fp, lr, [SP, #-0x10]!
    //     0xc62938: mov             fp, SP
    // 0xc6293c: AllocStack(0x18)
    //     0xc6293c: sub             SP, SP, #0x18
    // 0xc62940: SetupParameters()
    //     0xc62940: fmov            d0, #1.00000000
    // 0xc62940: d0 = 1.000000
    // 0xc62944: CheckStackOverflow
    //     0xc62944: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc62948: cmp             SP, x16
    //     0xc6294c: b.ls            #0xc62a88
    // 0xc62950: ldr             x0, [fp, #0x10]
    // 0xc62954: LoadField: d1 = r0->field_7
    //     0xc62954: ldur            d1, [x0, #7]
    // 0xc62958: fsub            d2, d0, d1
    // 0xc6295c: stur            d2, [fp, #-8]
    // 0xc62960: r16 = 4
    //     0xc62960: movz            x16, #0x4
    // 0xc62964: stp             x16, NULL, [SP]
    // 0xc62968: r0 = _Double.fromInteger()
    //     0xc62968: bl              #0x5093ec  ; [dart:core] _Double::_Double.fromInteger
    // 0xc6296c: LoadField: d1 = r0->field_7
    //     0xc6296c: ldur            d1, [x0, #7]
    // 0xc62970: ldur            d0, [fp, #-8]
    // 0xc62974: d30 = 0.000000
    //     0xc62974: fmov            d30, d0
    // 0xc62978: d0 = 1.000000
    //     0xc62978: fmov            d0, #1.00000000
    // 0xc6297c: fcmp            d1, #0.0
    // 0xc62980: b.vs            #0xc629c4
    // 0xc62984: b.eq            #0xc62a48
    // 0xc62988: fcmp            d1, d0
    // 0xc6298c: b.eq            #0xc629b4
    // 0xc62990: d31 = 2.000000
    //     0xc62990: fmov            d31, #2.00000000
    // 0xc62994: fcmp            d1, d31
    // 0xc62998: b.eq            #0xc629bc
    // 0xc6299c: d31 = 3.000000
    //     0xc6299c: fmov            d31, #3.00000000
    // 0xc629a0: fcmp            d1, d31
    // 0xc629a4: b.ne            #0xc629c4
    // 0xc629a8: fmul            d0, d30, d30
    // 0xc629ac: fmul            d0, d0, d30
    // 0xc629b0: b               #0xc62a48
    // 0xc629b4: d0 = 0.000000
    //     0xc629b4: fmov            d0, d30
    // 0xc629b8: b               #0xc62a48
    // 0xc629bc: fmul            d0, d30, d30
    // 0xc629c0: b               #0xc62a48
    // 0xc629c4: fcmp            d30, d0
    // 0xc629c8: b.vs            #0xc629d8
    // 0xc629cc: b.eq            #0xc62a48
    // 0xc629d0: fcmp            d30, d1
    // 0xc629d4: b.vc            #0xc629e0
    // 0xc629d8: d0 = nan
    //     0xc629d8: ldr             d0, [PP, #0x2a38]  ; [pp+0x2a38] IMM: double(nan) from 0x7ff8000000000000
    // 0xc629dc: b               #0xc62a48
    // 0xc629e0: d0 = -inf
    //     0xc629e0: ldr             d0, [PP, #0xd90]  ; [pp+0xd90] IMM: double(-inf) from 0xfff0000000000000
    // 0xc629e4: fcmp            d30, d0
    // 0xc629e8: b.eq            #0xc62a10
    // 0xc629ec: d0 = 0.500000
    //     0xc629ec: fmov            d0, #0.50000000
    // 0xc629f0: fcmp            d1, d0
    // 0xc629f4: b.ne            #0xc62a10
    // 0xc629f8: fcmp            d30, #0.0
    // 0xc629fc: b.eq            #0xc62a08
    // 0xc62a00: fsqrt           d0, d30
    // 0xc62a04: b               #0xc62a48
    // 0xc62a08: d0 = 0.000000
    //     0xc62a08: eor             v0.16b, v0.16b, v0.16b
    // 0xc62a0c: b               #0xc62a48
    // 0xc62a10: d0 = 0.000000
    //     0xc62a10: fmov            d0, d30
    // 0xc62a14: stp             fp, lr, [SP, #-0x10]!
    // 0xc62a18: mov             fp, SP
    // 0xc62a1c: CallRuntime_LibcPow(double, double) -> double
    //     0xc62a1c: and             SP, SP, #0xfffffffffffffff0
    //     0xc62a20: mov             sp, SP
    //     0xc62a24: ldr             x16, [THR, #0x4f8]  ; THR::LibcPow
    //     0xc62a28: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xc62a2c: blr             x16
    //     0xc62a30: movz            x16, #0x8
    //     0xc62a34: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xc62a38: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xc62a3c: sub             sp, x16, #1, lsl #12
    //     0xc62a40: mov             SP, fp
    //     0xc62a44: ldp             fp, lr, [SP], #0x10
    // 0xc62a48: mov             v1.16b, v0.16b
    // 0xc62a4c: d0 = 0.250000
    //     0xc62a4c: fmov            d0, #0.25000000
    // 0xc62a50: fmul            d2, d0, d1
    // 0xc62a54: r0 = inline_Allocate_Double()
    //     0xc62a54: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc62a58: add             x0, x0, #0x10
    //     0xc62a5c: cmp             x1, x0
    //     0xc62a60: b.ls            #0xc62a90
    //     0xc62a64: str             x0, [THR, #0x50]  ; THR::top
    //     0xc62a68: sub             x0, x0, #0xf
    //     0xc62a6c: movz            x1, #0xd148
    //     0xc62a70: movk            x1, #0x3, lsl #16
    //     0xc62a74: stur            x1, [x0, #-1]
    // 0xc62a78: StoreField: r0->field_7 = d2
    //     0xc62a78: stur            d2, [x0, #7]
    // 0xc62a7c: LeaveFrame
    //     0xc62a7c: mov             SP, fp
    //     0xc62a80: ldp             fp, lr, [SP], #0x10
    // 0xc62a84: ret
    //     0xc62a84: ret             
    // 0xc62a88: r0 = StackOverflowSharedWithFPURegs()
    //     0xc62a88: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xc62a8c: b               #0xc62950
    // 0xc62a90: SaveReg d2
    //     0xc62a90: str             q2, [SP, #-0x10]!
    // 0xc62a94: r0 = AllocateDouble()
    //     0xc62a94: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc62a98: RestoreReg d2
    //     0xc62a98: ldr             q2, [SP], #0x10
    // 0xc62a9c: b               #0xc62a78
  }
}

// class id: 1680, size: 0x2c, field offset: 0x10
class _ERScrollPhysics extends BouncingScrollPhysics {

  late final ValueNotifier<_BallisticSimulationCreationState> _headerSimulationCreationState; // offset: 0x20
  late final ValueNotifier<_BallisticSimulationCreationState> _footerSimulationCreationState; // offset: 0x24

  _ _ERScrollPhysics(/* No info */) {
    // ** addr: 0xa1d054, size: 0x32c
    // 0xa1d054: EnterFrame
    //     0xa1d054: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d058: mov             fp, SP
    // 0xa1d05c: AllocStack(0x40)
    //     0xa1d05c: sub             SP, SP, #0x40
    // 0xa1d060: SetupParameters(_ERScrollPhysics this /* r3, fp-0x18 */, dynamic _ /* r4, fp-0x10 */, dynamic _ /* r5 */, dynamic _ /* r6 */, {dynamic parent = Instance_AlwaysScrollableScrollPhysics /* r2 */})
    //     0xa1d060: mov             x0, x4
    //     0xa1d064: ldur            w1, [x0, #0x13]
    //     0xa1d068: add             x1, x1, HEAP, lsl #32
    //     0xa1d06c: sub             x2, x1, #8
    //     0xa1d070: add             x3, fp, w2, sxtw #2
    //     0xa1d074: ldr             x3, [x3, #0x28]
    //     0xa1d078: stur            x3, [fp, #-0x18]
    //     0xa1d07c: add             x4, fp, w2, sxtw #2
    //     0xa1d080: ldr             x4, [x4, #0x20]
    //     0xa1d084: stur            x4, [fp, #-0x10]
    //     0xa1d088: add             x5, fp, w2, sxtw #2
    //     0xa1d08c: ldr             x5, [x5, #0x18]
    //     0xa1d090: add             x6, fp, w2, sxtw #2
    //     0xa1d094: ldr             x6, [x6, #0x10]
    //     0xa1d098: ldur            w2, [x0, #0x1f]
    //     0xa1d09c: add             x2, x2, HEAP, lsl #32
    //     0xa1d0a0: ldr             x16, [PP, #0x3480]  ; [pp+0x3480] "parent"
    //     0xa1d0a4: cmp             w2, w16
    //     0xa1d0a8: b.ne            #0xa1d0c8
    //     0xa1d0ac: ldur            w2, [x0, #0x23]
    //     0xa1d0b0: add             x2, x2, HEAP, lsl #32
    //     0xa1d0b4: sub             w0, w1, w2
    //     0xa1d0b8: add             x1, fp, w0, sxtw #2
    //     0xa1d0bc: ldr             x1, [x1, #8]
    //     0xa1d0c0: mov             x2, x1
    //     0xa1d0c4: b               #0xa1d0d0
    //     0xa1d0c8: add             x2, PP, #0x12, lsl #12  ; [pp+0x125b0] Obj!AlwaysScrollableScrollPhysics@c2c0e1
    //     0xa1d0cc: ldr             x2, [x2, #0x5b0]
    //     0xa1d0d0: ldr             x0, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1d0d4: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a100] Obj!ScrollDecelerationRate@c423d1
    //     0xa1d0d8: ldr             x1, [x1, #0x100]
    // 0xa1d0d0: r0 = Sentinel
    // 0xa1d0d4: r1 = Instance_ScrollDecelerationRate
    // 0xa1d0dc: CheckStackOverflow
    //     0xa1d0dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d0e0: cmp             SP, x16
    //     0xa1d0e4: b.ls            #0xa1d378
    // 0xa1d0e8: StoreField: r3->field_1f = r0
    //     0xa1d0e8: stur            w0, [x3, #0x1f]
    // 0xa1d0ec: StoreField: r3->field_23 = r0
    //     0xa1d0ec: stur            w0, [x3, #0x23]
    // 0xa1d0f0: mov             x0, x6
    // 0xa1d0f4: StoreField: r3->field_f = r0
    //     0xa1d0f4: stur            w0, [x3, #0xf]
    //     0xa1d0f8: ldurb           w16, [x3, #-1]
    //     0xa1d0fc: ldurb           w17, [x0, #-1]
    //     0xa1d100: and             x16, x17, x16, lsr #2
    //     0xa1d104: tst             x16, HEAP, lsr #32
    //     0xa1d108: b.eq            #0xa1d110
    //     0xa1d10c: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xa1d110: mov             x0, x5
    // 0xa1d114: StoreField: r3->field_13 = r0
    //     0xa1d114: stur            w0, [x3, #0x13]
    //     0xa1d118: ldurb           w16, [x3, #-1]
    //     0xa1d11c: ldurb           w17, [x0, #-1]
    //     0xa1d120: and             x16, x17, x16, lsr #2
    //     0xa1d124: tst             x16, HEAP, lsr #32
    //     0xa1d128: b.eq            #0xa1d130
    //     0xa1d12c: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xa1d130: mov             x0, x4
    // 0xa1d134: ArrayStore: r3[0] = r0  ; List_4
    //     0xa1d134: stur            w0, [x3, #0x17]
    //     0xa1d138: ldurb           w16, [x3, #-1]
    //     0xa1d13c: ldurb           w17, [x0, #-1]
    //     0xa1d140: and             x16, x17, x16, lsr #2
    //     0xa1d144: tst             x16, HEAP, lsr #32
    //     0xa1d148: b.eq            #0xa1d150
    //     0xa1d14c: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xa1d150: StoreField: r3->field_b = r1
    //     0xa1d150: stur            w1, [x3, #0xb]
    // 0xa1d154: mov             x0, x2
    // 0xa1d158: StoreField: r3->field_7 = r0
    //     0xa1d158: stur            w0, [x3, #7]
    //     0xa1d15c: ldurb           w16, [x3, #-1]
    //     0xa1d160: ldurb           w17, [x0, #-1]
    //     0xa1d164: and             x16, x17, x16, lsr #2
    //     0xa1d168: tst             x16, HEAP, lsr #32
    //     0xa1d16c: b.eq            #0xa1d174
    //     0xa1d170: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xa1d174: LoadField: r0 = r5->field_63
    //     0xa1d174: ldur            w0, [x5, #0x63]
    // 0xa1d178: DecompressPointer r0
    //     0xa1d178: add             x0, x0, HEAP, lsl #32
    // 0xa1d17c: stur            x0, [fp, #-8]
    // 0xa1d180: LoadField: d0 = r5->field_4b
    //     0xa1d180: ldur            d0, [x5, #0x4b]
    // 0xa1d184: stur            d0, [fp, #-0x30]
    // 0xa1d188: LoadField: r1 = r5->field_23
    //     0xa1d188: ldur            w1, [x5, #0x23]
    // 0xa1d18c: DecompressPointer r1
    //     0xa1d18c: add             x1, x1, HEAP, lsl #32
    // 0xa1d190: LoadField: d1 = r1->field_7
    //     0xa1d190: ldur            d1, [x1, #7]
    // 0xa1d194: stur            d1, [fp, #-0x28]
    // 0xa1d198: str             x5, [SP]
    // 0xa1d19c: r0 = safeOffset()
    //     0xa1d19c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xa1d1a0: mov             v1.16b, v0.16b
    // 0xa1d1a4: ldur            d0, [fp, #-0x28]
    // 0xa1d1a8: fadd            d2, d0, d1
    // 0xa1d1ac: stur            d2, [fp, #-0x38]
    // 0xa1d1b0: r0 = _BallisticSimulationCreationState()
    //     0xa1d1b0: bl              #0xa1d380  ; Allocate_BallisticSimulationCreationStateStub -> _BallisticSimulationCreationState (size=0x1c)
    // 0xa1d1b4: mov             x2, x0
    // 0xa1d1b8: ldur            x0, [fp, #-8]
    // 0xa1d1bc: stur            x2, [fp, #-0x20]
    // 0xa1d1c0: StoreField: r2->field_7 = r0
    //     0xa1d1c0: stur            w0, [x2, #7]
    // 0xa1d1c4: ldur            d0, [fp, #-0x30]
    // 0xa1d1c8: StoreField: r2->field_b = d0
    //     0xa1d1c8: stur            d0, [x2, #0xb]
    // 0xa1d1cc: ldur            d0, [fp, #-0x38]
    // 0xa1d1d0: StoreField: r2->field_13 = d0
    //     0xa1d1d0: stur            d0, [x2, #0x13]
    // 0xa1d1d4: r1 = <_BallisticSimulationCreationState>
    //     0xa1d1d4: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a108] TypeArguments: <_BallisticSimulationCreationState>
    //     0xa1d1d8: ldr             x1, [x1, #0x108]
    // 0xa1d1dc: r0 = ValueNotifier()
    //     0xa1d1dc: bl              #0x5b4170  ; AllocateValueNotifierStub -> ValueNotifier<X0> (size=0x2c)
    // 0xa1d1e0: mov             x1, x0
    // 0xa1d1e4: ldur            x0, [fp, #-0x20]
    // 0xa1d1e8: stur            x1, [fp, #-8]
    // 0xa1d1ec: StoreField: r1->field_27 = r0
    //     0xa1d1ec: stur            w0, [x1, #0x27]
    // 0xa1d1f0: r0 = 0
    //     0xa1d1f0: movz            x0, #0
    // 0xa1d1f4: StoreField: r1->field_7 = r0
    //     0xa1d1f4: stur            x0, [x1, #7]
    // 0xa1d1f8: StoreField: r1->field_13 = r0
    //     0xa1d1f8: stur            x0, [x1, #0x13]
    // 0xa1d1fc: StoreField: r1->field_1b = r0
    //     0xa1d1fc: stur            x0, [x1, #0x1b]
    // 0xa1d200: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0xa1d200: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1d204: ldr             x0, [x0, #0x1478]
    //     0xa1d208: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1d20c: cmp             w0, w16
    //     0xa1d210: b.ne            #0xa1d21c
    //     0xa1d214: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0xa1d218: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa1d21c: mov             x1, x0
    // 0xa1d220: ldur            x0, [fp, #-8]
    // 0xa1d224: stur            x1, [fp, #-0x20]
    // 0xa1d228: StoreField: r0->field_f = r1
    //     0xa1d228: stur            w1, [x0, #0xf]
    // 0xa1d22c: ldur            x2, [fp, #-0x18]
    // 0xa1d230: LoadField: r3 = r2->field_1f
    //     0xa1d230: ldur            w3, [x2, #0x1f]
    // 0xa1d234: DecompressPointer r3
    //     0xa1d234: add             x3, x3, HEAP, lsl #32
    // 0xa1d238: r16 = Sentinel
    //     0xa1d238: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa1d23c: cmp             w3, w16
    // 0xa1d240: b.eq            #0xa1d25c
    // 0xa1d244: r16 = "_headerSimulationCreationState@765089737"
    //     0xa1d244: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a110] "_headerSimulationCreationState@765089737"
    //     0xa1d248: ldr             x16, [x16, #0x110]
    // 0xa1d24c: str             x16, [SP]
    // 0xa1d250: r0 = _throwFieldAlreadyInitialized()
    //     0xa1d250: bl              #0x4f06cc  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0xa1d254: ldur            x2, [fp, #-0x18]
    // 0xa1d258: ldur            x1, [fp, #-0x20]
    // 0xa1d25c: ldur            x3, [fp, #-0x10]
    // 0xa1d260: ldur            x0, [fp, #-8]
    // 0xa1d264: StoreField: r2->field_1f = r0
    //     0xa1d264: stur            w0, [x2, #0x1f]
    //     0xa1d268: ldurb           w16, [x2, #-1]
    //     0xa1d26c: ldurb           w17, [x0, #-1]
    //     0xa1d270: and             x16, x17, x16, lsr #2
    //     0xa1d274: tst             x16, HEAP, lsr #32
    //     0xa1d278: b.eq            #0xa1d280
    //     0xa1d27c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa1d280: LoadField: r0 = r3->field_63
    //     0xa1d280: ldur            w0, [x3, #0x63]
    // 0xa1d284: DecompressPointer r0
    //     0xa1d284: add             x0, x0, HEAP, lsl #32
    // 0xa1d288: stur            x0, [fp, #-8]
    // 0xa1d28c: LoadField: d0 = r3->field_4b
    //     0xa1d28c: ldur            d0, [x3, #0x4b]
    // 0xa1d290: stur            d0, [fp, #-0x30]
    // 0xa1d294: LoadField: r4 = r3->field_23
    //     0xa1d294: ldur            w4, [x3, #0x23]
    // 0xa1d298: DecompressPointer r4
    //     0xa1d298: add             x4, x4, HEAP, lsl #32
    // 0xa1d29c: LoadField: d1 = r4->field_7
    //     0xa1d29c: ldur            d1, [x4, #7]
    // 0xa1d2a0: stur            d1, [fp, #-0x28]
    // 0xa1d2a4: str             x3, [SP]
    // 0xa1d2a8: r0 = safeOffset()
    //     0xa1d2a8: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xa1d2ac: mov             v1.16b, v0.16b
    // 0xa1d2b0: ldur            d0, [fp, #-0x28]
    // 0xa1d2b4: fadd            d2, d0, d1
    // 0xa1d2b8: stur            d2, [fp, #-0x38]
    // 0xa1d2bc: r0 = _BallisticSimulationCreationState()
    //     0xa1d2bc: bl              #0xa1d380  ; Allocate_BallisticSimulationCreationStateStub -> _BallisticSimulationCreationState (size=0x1c)
    // 0xa1d2c0: mov             x2, x0
    // 0xa1d2c4: ldur            x0, [fp, #-8]
    // 0xa1d2c8: stur            x2, [fp, #-0x10]
    // 0xa1d2cc: StoreField: r2->field_7 = r0
    //     0xa1d2cc: stur            w0, [x2, #7]
    // 0xa1d2d0: ldur            d0, [fp, #-0x30]
    // 0xa1d2d4: StoreField: r2->field_b = d0
    //     0xa1d2d4: stur            d0, [x2, #0xb]
    // 0xa1d2d8: ldur            d0, [fp, #-0x38]
    // 0xa1d2dc: StoreField: r2->field_13 = d0
    //     0xa1d2dc: stur            d0, [x2, #0x13]
    // 0xa1d2e0: r1 = <_BallisticSimulationCreationState>
    //     0xa1d2e0: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a108] TypeArguments: <_BallisticSimulationCreationState>
    //     0xa1d2e4: ldr             x1, [x1, #0x108]
    // 0xa1d2e8: r0 = ValueNotifier()
    //     0xa1d2e8: bl              #0x5b4170  ; AllocateValueNotifierStub -> ValueNotifier<X0> (size=0x2c)
    // 0xa1d2ec: mov             x1, x0
    // 0xa1d2f0: ldur            x0, [fp, #-0x10]
    // 0xa1d2f4: stur            x1, [fp, #-8]
    // 0xa1d2f8: StoreField: r1->field_27 = r0
    //     0xa1d2f8: stur            w0, [x1, #0x27]
    // 0xa1d2fc: r0 = 0
    //     0xa1d2fc: movz            x0, #0
    // 0xa1d300: StoreField: r1->field_7 = r0
    //     0xa1d300: stur            x0, [x1, #7]
    // 0xa1d304: StoreField: r1->field_13 = r0
    //     0xa1d304: stur            x0, [x1, #0x13]
    // 0xa1d308: StoreField: r1->field_1b = r0
    //     0xa1d308: stur            x0, [x1, #0x1b]
    // 0xa1d30c: ldur            x0, [fp, #-0x20]
    // 0xa1d310: StoreField: r1->field_f = r0
    //     0xa1d310: stur            w0, [x1, #0xf]
    // 0xa1d314: ldur            x0, [fp, #-0x18]
    // 0xa1d318: LoadField: r2 = r0->field_23
    //     0xa1d318: ldur            w2, [x0, #0x23]
    // 0xa1d31c: DecompressPointer r2
    //     0xa1d31c: add             x2, x2, HEAP, lsl #32
    // 0xa1d320: r16 = Sentinel
    //     0xa1d320: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa1d324: cmp             w2, w16
    // 0xa1d328: b.ne            #0xa1d334
    // 0xa1d32c: mov             x1, x0
    // 0xa1d330: b               #0xa1d348
    // 0xa1d334: r16 = "_footerSimulationCreationState@765089737"
    //     0xa1d334: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a118] "_footerSimulationCreationState@765089737"
    //     0xa1d338: ldr             x16, [x16, #0x118]
    // 0xa1d33c: str             x16, [SP]
    // 0xa1d340: r0 = _throwFieldAlreadyInitialized()
    //     0xa1d340: bl              #0x4f06cc  ; [dart:_internal] LateError::_throwFieldAlreadyInitialized
    // 0xa1d344: ldur            x1, [fp, #-0x18]
    // 0xa1d348: ldur            x0, [fp, #-8]
    // 0xa1d34c: StoreField: r1->field_23 = r0
    //     0xa1d34c: stur            w0, [x1, #0x23]
    //     0xa1d350: ldurb           w16, [x1, #-1]
    //     0xa1d354: ldurb           w17, [x0, #-1]
    //     0xa1d358: and             x16, x17, x16, lsr #2
    //     0xa1d35c: tst             x16, HEAP, lsr #32
    //     0xa1d360: b.eq            #0xa1d368
    //     0xa1d364: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d368: r0 = Null
    //     0xa1d368: mov             x0, NULL
    // 0xa1d36c: LeaveFrame
    //     0xa1d36c: mov             SP, fp
    //     0xa1d370: ldp             fp, lr, [SP], #0x10
    // 0xa1d374: ret
    //     0xa1d374: ret             
    // 0xa1d378: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d378: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d37c: b               #0xa1d0e8
  }
  get _ spring(/* No info */) {
    // ** addr: 0xb18398, size: 0x6c
    // 0xb18398: EnterFrame
    //     0xb18398: stp             fp, lr, [SP, #-0x10]!
    //     0xb1839c: mov             fp, SP
    // 0xb183a0: AllocStack(0x8)
    //     0xb183a0: sub             SP, SP, #8
    // 0xb183a4: d0 = 0.000000
    //     0xb183a4: eor             v0.16b, v0.16b, v0.16b
    // 0xb183a8: CheckStackOverflow
    //     0xb183a8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb183ac: cmp             SP, x16
    //     0xb183b0: b.ls            #0xb183fc
    // 0xb183b4: ldr             x0, [fp, #0x10]
    // 0xb183b8: LoadField: r1 = r0->field_13
    //     0xb183b8: ldur            w1, [x0, #0x13]
    // 0xb183bc: DecompressPointer r1
    //     0xb183bc: add             x1, x1, HEAP, lsl #32
    // 0xb183c0: LoadField: d1 = r1->field_4b
    //     0xb183c0: ldur            d1, [x1, #0x4b]
    // 0xb183c4: fcmp            d1, d0
    // 0xb183c8: b.vs            #0xb183d0
    // 0xb183cc: b.gt            #0xb183d0
    // 0xb183d0: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xb183d0: ldur            w1, [x0, #0x17]
    // 0xb183d4: DecompressPointer r1
    //     0xb183d4: add             x1, x1, HEAP, lsl #32
    // 0xb183d8: str             x1, [SP]
    // 0xb183dc: r0 = outOfRange()
    //     0xb183dc: bl              #0xb18404  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::outOfRange
    // 0xb183e0: tbz             w0, #4, #0xb183e4
    // 0xb183e4: ldr             x16, [fp, #0x10]
    // 0xb183e8: str             x16, [SP]
    // 0xb183ec: r0 = spring()
    //     0xb183ec: bl              #0xb1842c  ; [package:flutter/src/widgets/scroll_physics.dart] BouncingScrollPhysics::spring
    // 0xb183f0: LeaveFrame
    //     0xb183f0: mov             SP, fp
    //     0xb183f4: ldp             fp, lr, [SP], #0x10
    // 0xb183f8: ret
    //     0xb183f8: ret             
    // 0xb183fc: r0 = StackOverflowSharedWithFPURegs()
    //     0xb183fc: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xb18400: b               #0xb183b4
  }
  _ applyTo(/* No info */) {
    // ** addr: 0xb4dd94, size: 0xa0
    // 0xb4dd94: EnterFrame
    //     0xb4dd94: stp             fp, lr, [SP, #-0x10]!
    //     0xb4dd98: mov             fp, SP
    // 0xb4dd9c: AllocStack(0x50)
    //     0xb4dd9c: sub             SP, SP, #0x50
    // 0xb4dda0: CheckStackOverflow
    //     0xb4dda0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb4dda4: cmp             SP, x16
    //     0xb4dda8: b.ls            #0xb4de2c
    // 0xb4ddac: ldr             x16, [fp, #0x18]
    // 0xb4ddb0: ldr             lr, [fp, #0x10]
    // 0xb4ddb4: stp             lr, x16, [SP]
    // 0xb4ddb8: r0 = buildParent()
    //     0xb4ddb8: bl              #0xb4dd10  ; [package:flutter/src/widgets/scroll_physics.dart] ScrollPhysics::buildParent
    // 0xb4ddbc: mov             x1, x0
    // 0xb4ddc0: ldr             x0, [fp, #0x18]
    // 0xb4ddc4: stur            x1, [fp, #-0x20]
    // 0xb4ddc8: LoadField: r2 = r0->field_f
    //     0xb4ddc8: ldur            w2, [x0, #0xf]
    // 0xb4ddcc: DecompressPointer r2
    //     0xb4ddcc: add             x2, x2, HEAP, lsl #32
    // 0xb4ddd0: stur            x2, [fp, #-0x18]
    // 0xb4ddd4: LoadField: r3 = r0->field_13
    //     0xb4ddd4: ldur            w3, [x0, #0x13]
    // 0xb4ddd8: DecompressPointer r3
    //     0xb4ddd8: add             x3, x3, HEAP, lsl #32
    // 0xb4dddc: stur            x3, [fp, #-0x10]
    // 0xb4dde0: ArrayLoad: r4 = r0[0]  ; List_4
    //     0xb4dde0: ldur            w4, [x0, #0x17]
    // 0xb4dde4: DecompressPointer r4
    //     0xb4dde4: add             x4, x4, HEAP, lsl #32
    // 0xb4dde8: stur            x4, [fp, #-8]
    // 0xb4ddec: r0 = _ERScrollPhysics()
    //     0xb4ddec: bl              #0xa1d3b0  ; Allocate_ERScrollPhysicsStub -> _ERScrollPhysics (size=0x2c)
    // 0xb4ddf0: stur            x0, [fp, #-0x28]
    // 0xb4ddf4: ldur            x16, [fp, #-8]
    // 0xb4ddf8: stp             x16, x0, [SP, #0x18]
    // 0xb4ddfc: ldur            x16, [fp, #-0x10]
    // 0xb4de00: ldur            lr, [fp, #-0x18]
    // 0xb4de04: stp             lr, x16, [SP, #8]
    // 0xb4de08: ldur            x16, [fp, #-0x20]
    // 0xb4de0c: str             x16, [SP]
    // 0xb4de10: r4 = const [0, 0x5, 0x5, 0x4, parent, 0x4, null]
    //     0xb4de10: add             x4, PP, #0x31, lsl #12  ; [pp+0x31718] List(7) [0, 0x5, 0x5, 0x4, "parent", 0x4, Null]
    //     0xb4de14: ldr             x4, [x4, #0x718]
    // 0xb4de18: r0 = _ERScrollPhysics()
    //     0xb4de18: bl              #0xa1d054  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_ERScrollPhysics
    // 0xb4de1c: ldur            x0, [fp, #-0x28]
    // 0xb4de20: LeaveFrame
    //     0xb4de20: mov             SP, fp
    //     0xb4de24: ldp             fp, lr, [SP], #0x10
    // 0xb4de28: ret
    //     0xb4de28: ret             
    // 0xb4de2c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb4de2c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb4de30: b               #0xb4ddac
  }
  _ applyPhysicsToUserOffset(/* No info */) {
    // ** addr: 0xc2d258, size: 0x66c
    // 0xc2d258: EnterFrame
    //     0xc2d258: stp             fp, lr, [SP, #-0x10]!
    //     0xc2d25c: mov             fp, SP
    // 0xc2d260: AllocStack(0x38)
    //     0xc2d260: sub             SP, SP, #0x38
    // 0xc2d264: CheckStackOverflow
    //     0xc2d264: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc2d268: cmp             SP, x16
    //     0xc2d26c: b.ls            #0xc2d850
    // 0xc2d270: ldr             x0, [fp, #0x20]
    // 0xc2d274: LoadField: r1 = r0->field_f
    //     0xc2d274: ldur            w1, [x0, #0xf]
    // 0xc2d278: DecompressPointer r1
    //     0xc2d278: add             x1, x1, HEAP, lsl #32
    // 0xc2d27c: r16 = true
    //     0xc2d27c: add             x16, NULL, #0x20  ; true
    // 0xc2d280: stp             x16, x1, [SP]
    // 0xc2d284: r0 = value=()
    //     0xc2d284: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0xc2d288: ldr             x16, [fp, #0x18]
    // 0xc2d28c: str             x16, [SP]
    // 0xc2d290: r0 = outOfRange()
    //     0xc2d290: bl              #0xb9b6ac  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::outOfRange
    // 0xc2d294: tbnz            w0, #4, #0xc2d83c
    // 0xc2d298: ldr             x0, [fp, #0x20]
    // 0xc2d29c: ldr             x1, [fp, #0x18]
    // 0xc2d2a0: LoadField: r2 = r1->field_43
    //     0xc2d2a0: ldur            w2, [x1, #0x43]
    // 0xc2d2a4: DecompressPointer r2
    //     0xc2d2a4: add             x2, x2, HEAP, lsl #32
    // 0xc2d2a8: cmp             w2, NULL
    // 0xc2d2ac: b.eq            #0xc2d858
    // 0xc2d2b0: LoadField: r3 = r1->field_33
    //     0xc2d2b0: ldur            w3, [x1, #0x33]
    // 0xc2d2b4: DecompressPointer r3
    //     0xc2d2b4: add             x3, x3, HEAP, lsl #32
    // 0xc2d2b8: cmp             w3, NULL
    // 0xc2d2bc: b.eq            #0xc2d85c
    // 0xc2d2c0: LoadField: r4 = r1->field_37
    //     0xc2d2c0: ldur            w4, [x1, #0x37]
    // 0xc2d2c4: DecompressPointer r4
    //     0xc2d2c4: add             x4, x4, HEAP, lsl #32
    // 0xc2d2c8: cmp             w4, NULL
    // 0xc2d2cc: b.eq            #0xc2d860
    // 0xc2d2d0: LoadField: r5 = r0->field_13
    //     0xc2d2d0: ldur            w5, [x0, #0x13]
    // 0xc2d2d4: DecompressPointer r5
    //     0xc2d2d4: add             x5, x5, HEAP, lsl #32
    // 0xc2d2d8: stur            x5, [fp, #-8]
    // 0xc2d2dc: LoadField: r6 = r5->field_63
    //     0xc2d2dc: ldur            w6, [x5, #0x63]
    // 0xc2d2e0: DecompressPointer r6
    //     0xc2d2e0: add             x6, x6, HEAP, lsl #32
    // 0xc2d2e4: r16 = Instance_IndicatorMode
    //     0xc2d2e4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0xc2d2e8: ldr             x16, [x16, #0x1e8]
    // 0xc2d2ec: cmp             w6, w16
    // 0xc2d2f0: b.eq            #0xc2d304
    // 0xc2d2f4: r16 = Instance_IndicatorMode
    //     0xc2d2f4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e0] Obj!IndicatorMode@c45351
    //     0xc2d2f8: ldr             x16, [x16, #0x1e0]
    // 0xc2d2fc: cmp             w6, w16
    // 0xc2d300: b.ne            #0xc2d35c
    // 0xc2d304: str             x5, [SP]
    // 0xc2d308: r0 = viewportDimension()
    //     0xc2d308: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc2d30c: stur            d0, [fp, #-0x20]
    // 0xc2d310: ldur            x16, [fp, #-8]
    // 0xc2d314: str             x16, [SP]
    // 0xc2d318: r0 = viewportDimension()
    //     0xc2d318: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc2d31c: ldr             x0, [fp, #0x18]
    // 0xc2d320: LoadField: r1 = r0->field_43
    //     0xc2d320: ldur            w1, [x0, #0x43]
    // 0xc2d324: DecompressPointer r1
    //     0xc2d324: add             x1, x1, HEAP, lsl #32
    // 0xc2d328: cmp             w1, NULL
    // 0xc2d32c: b.eq            #0xc2d864
    // 0xc2d330: LoadField: d1 = r1->field_7
    //     0xc2d330: ldur            d1, [x1, #7]
    // 0xc2d334: fadd            d2, d0, d1
    // 0xc2d338: ldur            d0, [fp, #-0x20]
    // 0xc2d33c: fadd            d1, d0, d2
    // 0xc2d340: stur            d1, [fp, #-0x28]
    // 0xc2d344: ldur            x16, [fp, #-8]
    // 0xc2d348: str             x16, [SP]
    // 0xc2d34c: r0 = viewportDimension()
    //     0xc2d34c: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc2d350: ldur            d2, [fp, #-0x28]
    // 0xc2d354: d1 = 0.000000
    //     0xc2d354: eor             v1.16b, v1.16b, v1.16b
    // 0xc2d358: b               #0xc2d374
    // 0xc2d35c: LoadField: d0 = r2->field_7
    //     0xc2d35c: ldur            d0, [x2, #7]
    // 0xc2d360: LoadField: d1 = r3->field_7
    //     0xc2d360: ldur            d1, [x3, #7]
    // 0xc2d364: LoadField: d2 = r4->field_7
    //     0xc2d364: ldur            d2, [x4, #7]
    // 0xc2d368: mov             v31.16b, v2.16b
    // 0xc2d36c: mov             v2.16b, v0.16b
    // 0xc2d370: mov             v0.16b, v31.16b
    // 0xc2d374: ldr             x0, [fp, #0x20]
    // 0xc2d378: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xc2d378: ldur            w1, [x0, #0x17]
    // 0xc2d37c: DecompressPointer r1
    //     0xc2d37c: add             x1, x1, HEAP, lsl #32
    // 0xc2d380: stur            x1, [fp, #-0x18]
    // 0xc2d384: LoadField: r2 = r1->field_63
    //     0xc2d384: ldur            w2, [x1, #0x63]
    // 0xc2d388: DecompressPointer r2
    //     0xc2d388: add             x2, x2, HEAP, lsl #32
    // 0xc2d38c: r16 = Instance_IndicatorMode
    //     0xc2d38c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0xc2d390: ldr             x16, [x16, #0x1e8]
    // 0xc2d394: cmp             w2, w16
    // 0xc2d398: b.eq            #0xc2d3ac
    // 0xc2d39c: r16 = Instance_IndicatorMode
    //     0xc2d39c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e0] Obj!IndicatorMode@c45351
    //     0xc2d3a0: ldr             x16, [x16, #0x1e0]
    // 0xc2d3a4: cmp             w2, w16
    // 0xc2d3a8: b.ne            #0xc2d414
    // 0xc2d3ac: ldr             x2, [fp, #0x18]
    // 0xc2d3b0: LoadField: r3 = r2->field_43
    //     0xc2d3b0: ldur            w3, [x2, #0x43]
    // 0xc2d3b4: DecompressPointer r3
    //     0xc2d3b4: add             x3, x3, HEAP, lsl #32
    // 0xc2d3b8: stur            x3, [fp, #-0x10]
    // 0xc2d3bc: cmp             w3, NULL
    // 0xc2d3c0: b.eq            #0xc2d868
    // 0xc2d3c4: str             x1, [SP]
    // 0xc2d3c8: r0 = viewportDimension()
    //     0xc2d3c8: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc2d3cc: ldur            x0, [fp, #-0x10]
    // 0xc2d3d0: LoadField: d1 = r0->field_7
    //     0xc2d3d0: ldur            d1, [x0, #7]
    // 0xc2d3d4: fsub            d2, d1, d0
    // 0xc2d3d8: ldr             x0, [fp, #0x18]
    // 0xc2d3dc: LoadField: r1 = r0->field_37
    //     0xc2d3dc: ldur            w1, [x0, #0x37]
    // 0xc2d3e0: DecompressPointer r1
    //     0xc2d3e0: add             x1, x1, HEAP, lsl #32
    // 0xc2d3e4: cmp             w1, NULL
    // 0xc2d3e8: b.eq            #0xc2d86c
    // 0xc2d3ec: LoadField: d0 = r1->field_7
    //     0xc2d3ec: ldur            d0, [x1, #7]
    // 0xc2d3f0: fsub            d1, d2, d0
    // 0xc2d3f4: stur            d1, [fp, #-0x20]
    // 0xc2d3f8: ldur            x16, [fp, #-0x18]
    // 0xc2d3fc: str             x16, [SP]
    // 0xc2d400: r0 = viewportDimension()
    //     0xc2d400: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc2d404: ldur            d3, [fp, #-0x20]
    // 0xc2d408: mov             v1.16b, v0.16b
    // 0xc2d40c: d2 = 0.000000
    //     0xc2d40c: eor             v2.16b, v2.16b, v2.16b
    // 0xc2d410: b               #0xc2d420
    // 0xc2d414: mov             v3.16b, v2.16b
    // 0xc2d418: mov             v2.16b, v1.16b
    // 0xc2d41c: mov             v1.16b, v0.16b
    // 0xc2d420: d0 = 0.000000
    //     0xc2d420: eor             v0.16b, v0.16b, v0.16b
    // 0xc2d424: fsub            d4, d2, d3
    // 0xc2d428: fcmp            d4, d0
    // 0xc2d42c: b.vs            #0xc2d43c
    // 0xc2d430: b.le            #0xc2d43c
    // 0xc2d434: mov             v2.16b, v4.16b
    // 0xc2d438: b               #0xc2d468
    // 0xc2d43c: fcmp            d4, d0
    // 0xc2d440: b.vs            #0xc2d450
    // 0xc2d444: b.ge            #0xc2d450
    // 0xc2d448: d2 = 0.000000
    //     0xc2d448: eor             v2.16b, v2.16b, v2.16b
    // 0xc2d44c: b               #0xc2d468
    // 0xc2d450: fcmp            d4, d0
    // 0xc2d454: b.vs            #0xc2d464
    // 0xc2d458: b.ne            #0xc2d464
    // 0xc2d45c: fadd            d2, d4, d0
    // 0xc2d460: b               #0xc2d468
    // 0xc2d464: mov             v2.16b, v4.16b
    // 0xc2d468: fsub            d4, d3, d1
    // 0xc2d46c: fcmp            d4, d0
    // 0xc2d470: b.vs            #0xc2d480
    // 0xc2d474: b.le            #0xc2d480
    // 0xc2d478: mov             v1.16b, v4.16b
    // 0xc2d47c: b               #0xc2d4ac
    // 0xc2d480: fcmp            d4, d0
    // 0xc2d484: b.vs            #0xc2d494
    // 0xc2d488: b.ge            #0xc2d494
    // 0xc2d48c: d1 = 0.000000
    //     0xc2d48c: eor             v1.16b, v1.16b, v1.16b
    // 0xc2d490: b               #0xc2d4ac
    // 0xc2d494: fcmp            d4, d0
    // 0xc2d498: b.vs            #0xc2d4a8
    // 0xc2d49c: b.ne            #0xc2d4a8
    // 0xc2d4a0: fadd            d1, d4, d0
    // 0xc2d4a4: b               #0xc2d4ac
    // 0xc2d4a8: mov             v1.16b, v4.16b
    // 0xc2d4ac: fcmp            d2, d1
    // 0xc2d4b0: b.vs            #0xc2d4c0
    // 0xc2d4b4: b.le            #0xc2d4c0
    // 0xc2d4b8: mov             v3.16b, v2.16b
    // 0xc2d4bc: b               #0xc2d4fc
    // 0xc2d4c0: fcmp            d2, d1
    // 0xc2d4c4: b.vs            #0xc2d4d4
    // 0xc2d4c8: b.ge            #0xc2d4d4
    // 0xc2d4cc: mov             v3.16b, v1.16b
    // 0xc2d4d0: b               #0xc2d4fc
    // 0xc2d4d4: fcmp            d2, d0
    // 0xc2d4d8: b.vs            #0xc2d4e8
    // 0xc2d4dc: b.ne            #0xc2d4e8
    // 0xc2d4e0: fadd            d3, d2, d1
    // 0xc2d4e4: b               #0xc2d4fc
    // 0xc2d4e8: fcmp            d1, d1
    // 0xc2d4ec: b.vc            #0xc2d4f8
    // 0xc2d4f0: mov             v3.16b, v1.16b
    // 0xc2d4f4: b               #0xc2d4fc
    // 0xc2d4f8: mov             v3.16b, v2.16b
    // 0xc2d4fc: stur            d3, [fp, #-0x20]
    // 0xc2d500: fcmp            d2, d0
    // 0xc2d504: b.vs            #0xc2d524
    // 0xc2d508: b.le            #0xc2d524
    // 0xc2d50c: ldr             d2, [fp, #0x10]
    // 0xc2d510: fcmp            d2, d0
    // 0xc2d514: b.vs            #0xc2d528
    // 0xc2d518: b.ge            #0xc2d528
    // 0xc2d51c: r1 = true
    //     0xc2d51c: add             x1, NULL, #0x20  ; true
    // 0xc2d520: b               #0xc2d558
    // 0xc2d524: ldr             d2, [fp, #0x10]
    // 0xc2d528: fcmp            d1, d0
    // 0xc2d52c: b.vs            #0xc2d554
    // 0xc2d530: b.le            #0xc2d554
    // 0xc2d534: fcmp            d2, d0
    // 0xc2d538: b.vs            #0xc2d540
    // 0xc2d53c: b.gt            #0xc2d548
    // 0xc2d540: r0 = false
    //     0xc2d540: add             x0, NULL, #0x30  ; false
    // 0xc2d544: b               #0xc2d54c
    // 0xc2d548: r0 = true
    //     0xc2d548: add             x0, NULL, #0x20  ; true
    // 0xc2d54c: mov             x1, x0
    // 0xc2d550: b               #0xc2d558
    // 0xc2d554: r1 = false
    //     0xc2d554: add             x1, NULL, #0x30  ; false
    // 0xc2d558: ldr             x0, [fp, #0x18]
    // 0xc2d55c: stur            x1, [fp, #-0x18]
    // 0xc2d560: LoadField: r2 = r0->field_47
    //     0xc2d560: ldur            w2, [x0, #0x47]
    // 0xc2d564: DecompressPointer r2
    //     0xc2d564: add             x2, x2, HEAP, lsl #32
    // 0xc2d568: stur            x2, [fp, #-0x10]
    // 0xc2d56c: cmp             w2, NULL
    // 0xc2d570: b.eq            #0xc2d870
    // 0xc2d574: str             x0, [SP]
    // 0xc2d578: r0 = _ScrollMetricsExtension.isNestedInner()
    //     0xc2d578: bl              #0x68503c  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedInner
    // 0xc2d57c: tbnz            w0, #4, #0xc2d694
    // 0xc2d580: ldur            x0, [fp, #-8]
    // 0xc2d584: LoadField: r1 = r0->field_87
    //     0xc2d584: ldur            w1, [x0, #0x87]
    // 0xc2d588: DecompressPointer r1
    //     0xc2d588: add             x1, x1, HEAP, lsl #32
    // 0xc2d58c: cmp             w1, NULL
    // 0xc2d590: b.eq            #0xc2d59c
    // 0xc2d594: LoadField: d0 = r1->field_7
    //     0xc2d594: ldur            d0, [x1, #7]
    // 0xc2d598: b               #0xc2d69c
    // 0xc2d59c: ldr             x16, [fp, #0x18]
    // 0xc2d5a0: str             x16, [SP]
    // 0xc2d5a4: r0 = axis()
    //     0xc2d5a4: bl              #0xb2709c  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::axis
    // 0xc2d5a8: r16 = Instance_Axis
    //     0xc2d5a8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0xc2d5ac: cmp             w0, w16
    // 0xc2d5b0: b.ne            #0xc2d618
    // 0xc2d5b4: ldur            x0, [fp, #-8]
    // 0xc2d5b8: LoadField: r1 = r0->field_27
    //     0xc2d5b8: ldur            w1, [x0, #0x27]
    // 0xc2d5bc: DecompressPointer r1
    //     0xc2d5bc: add             x1, x1, HEAP, lsl #32
    // 0xc2d5c0: LoadField: r0 = r1->field_f
    //     0xc2d5c0: ldur            w0, [x1, #0xf]
    // 0xc2d5c4: DecompressPointer r0
    //     0xc2d5c4: add             x0, x0, HEAP, lsl #32
    // 0xc2d5c8: cmp             w0, NULL
    // 0xc2d5cc: b.eq            #0xc2d874
    // 0xc2d5d0: str             x0, [SP]
    // 0xc2d5d4: r0 = size()
    //     0xc2d5d4: bl              #0x684fcc  ; [package:flutter/src/widgets/framework.dart] Element::size
    // 0xc2d5d8: cmp             w0, NULL
    // 0xc2d5dc: b.ne            #0xc2d5e8
    // 0xc2d5e0: r0 = Null
    //     0xc2d5e0: mov             x0, NULL
    // 0xc2d5e4: b               #0xc2d678
    // 0xc2d5e8: LoadField: d0 = r0->field_f
    //     0xc2d5e8: ldur            d0, [x0, #0xf]
    // 0xc2d5ec: r0 = inline_Allocate_Double()
    //     0xc2d5ec: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc2d5f0: add             x0, x0, #0x10
    //     0xc2d5f4: cmp             x1, x0
    //     0xc2d5f8: b.ls            #0xc2d878
    //     0xc2d5fc: str             x0, [THR, #0x50]  ; THR::top
    //     0xc2d600: sub             x0, x0, #0xf
    //     0xc2d604: movz            x1, #0xd148
    //     0xc2d608: movk            x1, #0x3, lsl #16
    //     0xc2d60c: stur            x1, [x0, #-1]
    // 0xc2d610: StoreField: r0->field_7 = d0
    //     0xc2d610: stur            d0, [x0, #7]
    // 0xc2d614: b               #0xc2d678
    // 0xc2d618: ldur            x0, [fp, #-8]
    // 0xc2d61c: LoadField: r1 = r0->field_27
    //     0xc2d61c: ldur            w1, [x0, #0x27]
    // 0xc2d620: DecompressPointer r1
    //     0xc2d620: add             x1, x1, HEAP, lsl #32
    // 0xc2d624: LoadField: r0 = r1->field_f
    //     0xc2d624: ldur            w0, [x1, #0xf]
    // 0xc2d628: DecompressPointer r0
    //     0xc2d628: add             x0, x0, HEAP, lsl #32
    // 0xc2d62c: cmp             w0, NULL
    // 0xc2d630: b.eq            #0xc2d888
    // 0xc2d634: str             x0, [SP]
    // 0xc2d638: r0 = size()
    //     0xc2d638: bl              #0x684fcc  ; [package:flutter/src/widgets/framework.dart] Element::size
    // 0xc2d63c: cmp             w0, NULL
    // 0xc2d640: b.ne            #0xc2d64c
    // 0xc2d644: r0 = Null
    //     0xc2d644: mov             x0, NULL
    // 0xc2d648: b               #0xc2d678
    // 0xc2d64c: LoadField: d0 = r0->field_7
    //     0xc2d64c: ldur            d0, [x0, #7]
    // 0xc2d650: r0 = inline_Allocate_Double()
    //     0xc2d650: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc2d654: add             x0, x0, #0x10
    //     0xc2d658: cmp             x1, x0
    //     0xc2d65c: b.ls            #0xc2d88c
    //     0xc2d660: str             x0, [THR, #0x50]  ; THR::top
    //     0xc2d664: sub             x0, x0, #0xf
    //     0xc2d668: movz            x1, #0xd148
    //     0xc2d66c: movk            x1, #0x3, lsl #16
    //     0xc2d670: stur            x1, [x0, #-1]
    // 0xc2d674: StoreField: r0->field_7 = d0
    //     0xc2d674: stur            d0, [x0, #7]
    // 0xc2d678: cmp             w0, NULL
    // 0xc2d67c: b.ne            #0xc2d68c
    // 0xc2d680: ldur            x0, [fp, #-0x10]
    // 0xc2d684: LoadField: d0 = r0->field_7
    //     0xc2d684: ldur            d0, [x0, #7]
    // 0xc2d688: b               #0xc2d69c
    // 0xc2d68c: LoadField: d0 = r0->field_7
    //     0xc2d68c: ldur            d0, [x0, #7]
    // 0xc2d690: b               #0xc2d69c
    // 0xc2d694: ldur            x0, [fp, #-0x10]
    // 0xc2d698: LoadField: d0 = r0->field_7
    //     0xc2d698: ldur            d0, [x0, #7]
    // 0xc2d69c: ldur            x0, [fp, #-0x18]
    // 0xc2d6a0: tbnz            w0, #4, #0xc2d728
    // 0xc2d6a4: ldr             d2, [fp, #0x10]
    // 0xc2d6a8: d1 = 0.000000
    //     0xc2d6a8: eor             v1.16b, v1.16b, v1.16b
    // 0xc2d6ac: fcmp            d2, d1
    // 0xc2d6b0: b.vs            #0xc2d6c0
    // 0xc2d6b4: b.ne            #0xc2d6c0
    // 0xc2d6b8: d4 = 0.000000
    //     0xc2d6b8: eor             v4.16b, v4.16b, v4.16b
    // 0xc2d6bc: b               #0xc2d6dc
    // 0xc2d6c0: fcmp            d2, d1
    // 0xc2d6c4: b.vs            #0xc2d6d4
    // 0xc2d6c8: b.ge            #0xc2d6d4
    // 0xc2d6cc: fneg            d3, d2
    // 0xc2d6d0: b               #0xc2d6d8
    // 0xc2d6d4: mov             v3.16b, v2.16b
    // 0xc2d6d8: mov             v4.16b, v3.16b
    // 0xc2d6dc: ldur            d3, [fp, #-0x20]
    // 0xc2d6e0: fsub            d5, d3, d4
    // 0xc2d6e4: fdiv            d4, d5, d0
    // 0xc2d6e8: r0 = inline_Allocate_Double()
    //     0xc2d6e8: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc2d6ec: add             x0, x0, #0x10
    //     0xc2d6f0: cmp             x1, x0
    //     0xc2d6f4: b.ls            #0xc2d89c
    //     0xc2d6f8: str             x0, [THR, #0x50]  ; THR::top
    //     0xc2d6fc: sub             x0, x0, #0xf
    //     0xc2d700: movz            x1, #0xd148
    //     0xc2d704: movk            x1, #0x3, lsl #16
    //     0xc2d708: stur            x1, [x0, #-1]
    // 0xc2d70c: StoreField: r0->field_7 = d4
    //     0xc2d70c: stur            d4, [x0, #7]
    // 0xc2d710: ldr             x16, [fp, #0x20]
    // 0xc2d714: stp             x0, x16, [SP]
    // 0xc2d718: r0 = frictionFactor()
    //     0xc2d718: bl              #0xc2d8c4  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::frictionFactor
    // 0xc2d71c: LoadField: d0 = r0->field_7
    //     0xc2d71c: ldur            d0, [x0, #7]
    // 0xc2d720: mov             v3.16b, v0.16b
    // 0xc2d724: b               #0xc2d76c
    // 0xc2d728: ldur            d1, [fp, #-0x20]
    // 0xc2d72c: fdiv            d2, d1, d0
    // 0xc2d730: r0 = inline_Allocate_Double()
    //     0xc2d730: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0xc2d734: add             x0, x0, #0x10
    //     0xc2d738: cmp             x1, x0
    //     0xc2d73c: b.ls            #0xc2d8b4
    //     0xc2d740: str             x0, [THR, #0x50]  ; THR::top
    //     0xc2d744: sub             x0, x0, #0xf
    //     0xc2d748: movz            x1, #0xd148
    //     0xc2d74c: movk            x1, #0x3, lsl #16
    //     0xc2d750: stur            x1, [x0, #-1]
    // 0xc2d754: StoreField: r0->field_7 = d2
    //     0xc2d754: stur            d2, [x0, #7]
    // 0xc2d758: ldr             x16, [fp, #0x20]
    // 0xc2d75c: stp             x0, x16, [SP]
    // 0xc2d760: r0 = frictionFactor()
    //     0xc2d760: bl              #0xc2d8c4  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::frictionFactor
    // 0xc2d764: LoadField: d1 = r0->field_7
    //     0xc2d764: ldur            d1, [x0, #7]
    // 0xc2d768: mov             v3.16b, v1.16b
    // 0xc2d76c: ldr             d2, [fp, #0x10]
    // 0xc2d770: d1 = 0.000000
    //     0xc2d770: eor             v1.16b, v1.16b, v1.16b
    // 0xc2d774: fcmp            d2, d1
    // 0xc2d778: b.vs            #0xc2d788
    // 0xc2d77c: b.le            #0xc2d788
    // 0xc2d780: d4 = 1.000000
    //     0xc2d780: fmov            d4, #1.00000000
    // 0xc2d784: b               #0xc2d7a8
    // 0xc2d788: fcmp            d2, d1
    // 0xc2d78c: b.vs            #0xc2d7a4
    // 0xc2d790: b.ge            #0xc2d7a4
    // 0xc2d794: d4 = 1.000000
    //     0xc2d794: fmov            d4, #1.00000000
    // 0xc2d798: fneg            d5, d4
    // 0xc2d79c: mov             v4.16b, v5.16b
    // 0xc2d7a0: b               #0xc2d7a8
    // 0xc2d7a4: mov             v4.16b, v2.16b
    // 0xc2d7a8: fcmp            d2, d1
    // 0xc2d7ac: b.vs            #0xc2d7bc
    // 0xc2d7b0: b.ne            #0xc2d7bc
    // 0xc2d7b4: d6 = 0.000000
    //     0xc2d7b4: eor             v6.16b, v6.16b, v6.16b
    // 0xc2d7b8: b               #0xc2d7d8
    // 0xc2d7bc: fcmp            d2, d1
    // 0xc2d7c0: b.vs            #0xc2d7d0
    // 0xc2d7c4: b.ge            #0xc2d7d0
    // 0xc2d7c8: fneg            d5, d2
    // 0xc2d7cc: b               #0xc2d7d4
    // 0xc2d7d0: mov             v5.16b, v2.16b
    // 0xc2d7d4: mov             v6.16b, v5.16b
    // 0xc2d7d8: ldur            d5, [fp, #-0x20]
    // 0xc2d7dc: fcmp            d5, d1
    // 0xc2d7e0: b.vs            #0xc2d81c
    // 0xc2d7e4: b.le            #0xc2d81c
    // 0xc2d7e8: fdiv            d7, d5, d3
    // 0xc2d7ec: fcmp            d6, d7
    // 0xc2d7f0: b.vs            #0xc2d804
    // 0xc2d7f4: b.ge            #0xc2d804
    // 0xc2d7f8: fmul            d8, d6, d3
    // 0xc2d7fc: mov             v1.16b, v8.16b
    // 0xc2d800: b               #0xc2d82c
    // 0xc2d804: fadd            d3, d1, d5
    // 0xc2d808: fsub            d1, d6, d7
    // 0xc2d80c: mov             v31.16b, v3.16b
    // 0xc2d810: mov             v3.16b, v1.16b
    // 0xc2d814: mov             v1.16b, v31.16b
    // 0xc2d818: b               #0xc2d824
    // 0xc2d81c: mov             v3.16b, v6.16b
    // 0xc2d820: d1 = 0.000000
    //     0xc2d820: eor             v1.16b, v1.16b, v1.16b
    // 0xc2d824: fadd            d5, d1, d3
    // 0xc2d828: mov             v1.16b, v5.16b
    // 0xc2d82c: fmul            d0, d4, d1
    // 0xc2d830: LeaveFrame
    //     0xc2d830: mov             SP, fp
    //     0xc2d834: ldp             fp, lr, [SP], #0x10
    // 0xc2d838: ret
    //     0xc2d838: ret             
    // 0xc2d83c: ldr             d2, [fp, #0x10]
    // 0xc2d840: mov             v0.16b, v2.16b
    // 0xc2d844: LeaveFrame
    //     0xc2d844: mov             SP, fp
    //     0xc2d848: ldp             fp, lr, [SP], #0x10
    // 0xc2d84c: ret
    //     0xc2d84c: ret             
    // 0xc2d850: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc2d850: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc2d854: b               #0xc2d270
    // 0xc2d858: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d858: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d85c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d85c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d860: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d860: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d864: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2d864: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2d868: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d868: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d86c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2d86c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2d870: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2d870: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2d874: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d874: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d878: SaveReg d0
    //     0xc2d878: str             q0, [SP, #-0x10]!
    // 0xc2d87c: r0 = AllocateDouble()
    //     0xc2d87c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc2d880: RestoreReg d0
    //     0xc2d880: ldr             q0, [SP], #0x10
    // 0xc2d884: b               #0xc2d610
    // 0xc2d888: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2d888: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2d88c: SaveReg d0
    //     0xc2d88c: str             q0, [SP, #-0x10]!
    // 0xc2d890: r0 = AllocateDouble()
    //     0xc2d890: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc2d894: RestoreReg d0
    //     0xc2d894: ldr             q0, [SP], #0x10
    // 0xc2d898: b               #0xc2d674
    // 0xc2d89c: stp             q3, q4, [SP, #-0x20]!
    // 0xc2d8a0: stp             q1, q2, [SP, #-0x20]!
    // 0xc2d8a4: r0 = AllocateDouble()
    //     0xc2d8a4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc2d8a8: ldp             q1, q2, [SP], #0x20
    // 0xc2d8ac: ldp             q3, q4, [SP], #0x20
    // 0xc2d8b0: b               #0xc2d70c
    // 0xc2d8b4: stp             q1, q2, [SP, #-0x20]!
    // 0xc2d8b8: r0 = AllocateDouble()
    //     0xc2d8b8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0xc2d8bc: ldp             q1, q2, [SP], #0x20
    // 0xc2d8c0: b               #0xc2d754
  }
  _ frictionFactor(/* No info */) {
    // ** addr: 0xc2d8c4, size: 0x1d4
    // 0xc2d8c4: EnterFrame
    //     0xc2d8c4: stp             fp, lr, [SP, #-0x10]!
    //     0xc2d8c8: mov             fp, SP
    // 0xc2d8cc: AllocStack(0x10)
    //     0xc2d8cc: sub             SP, SP, #0x10
    // 0xc2d8d0: CheckStackOverflow
    //     0xc2d8d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc2d8d4: cmp             SP, x16
    //     0xc2d8d8: b.ls            #0xc2da88
    // 0xc2d8dc: ldr             x0, [fp, #0x18]
    // 0xc2d8e0: LoadField: r1 = r0->field_13
    //     0xc2d8e0: ldur            w1, [x0, #0x13]
    // 0xc2d8e4: DecompressPointer r1
    //     0xc2d8e4: add             x1, x1, HEAP, lsl #32
    // 0xc2d8e8: LoadField: r2 = r1->field_3f
    //     0xc2d8e8: ldur            w2, [x1, #0x3f]
    // 0xc2d8ec: DecompressPointer r2
    //     0xc2d8ec: add             x2, x2, HEAP, lsl #32
    // 0xc2d8f0: r16 = Instance_Axis
    //     0xc2d8f0: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0xc2d8f4: cmp             w2, w16
    // 0xc2d8f8: b.ne            #0xc2d92c
    // 0xc2d8fc: LoadField: r3 = r1->field_23
    //     0xc2d8fc: ldur            w3, [x1, #0x23]
    // 0xc2d900: DecompressPointer r3
    //     0xc2d900: add             x3, x3, HEAP, lsl #32
    // 0xc2d904: LoadField: r4 = r3->field_33
    //     0xc2d904: ldur            w4, [x3, #0x33]
    // 0xc2d908: DecompressPointer r4
    //     0xc2d908: add             x4, x4, HEAP, lsl #32
    // 0xc2d90c: cmp             w4, NULL
    // 0xc2d910: b.ne            #0xc2d944
    // 0xc2d914: LoadField: r4 = r3->field_2f
    //     0xc2d914: ldur            w4, [x3, #0x2f]
    // 0xc2d918: DecompressPointer r4
    //     0xc2d918: add             x4, x4, HEAP, lsl #32
    // 0xc2d91c: cmp             w4, NULL
    // 0xc2d920: b.ne            #0xc2d944
    // 0xc2d924: d0 = 0.000000
    //     0xc2d924: eor             v0.16b, v0.16b, v0.16b
    // 0xc2d928: b               #0xc2d998
    // 0xc2d92c: LoadField: r3 = r1->field_23
    //     0xc2d92c: ldur            w3, [x1, #0x23]
    // 0xc2d930: DecompressPointer r3
    //     0xc2d930: add             x3, x3, HEAP, lsl #32
    // 0xc2d934: LoadField: r4 = r3->field_2f
    //     0xc2d934: ldur            w4, [x3, #0x2f]
    // 0xc2d938: DecompressPointer r4
    //     0xc2d938: add             x4, x4, HEAP, lsl #32
    // 0xc2d93c: cmp             w4, NULL
    // 0xc2d940: b.eq            #0xc2d994
    // 0xc2d944: d0 = 0.000000
    //     0xc2d944: eor             v0.16b, v0.16b, v0.16b
    // 0xc2d948: LoadField: d1 = r1->field_4b
    //     0xc2d948: ldur            d1, [x1, #0x4b]
    // 0xc2d94c: fcmp            d1, d0
    // 0xc2d950: b.vs            #0xc2d998
    // 0xc2d954: b.le            #0xc2d998
    // 0xc2d958: r16 = Instance_Axis
    //     0xc2d958: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0xc2d95c: cmp             w2, w16
    // 0xc2d960: b.ne            #0xc2d980
    // 0xc2d964: LoadField: r0 = r3->field_33
    //     0xc2d964: ldur            w0, [x3, #0x33]
    // 0xc2d968: DecompressPointer r0
    //     0xc2d968: add             x0, x0, HEAP, lsl #32
    // 0xc2d96c: cmp             w0, NULL
    // 0xc2d970: b.ne            #0xc2d988
    // 0xc2d974: LoadField: r0 = r3->field_2f
    //     0xc2d974: ldur            w0, [x3, #0x2f]
    // 0xc2d978: DecompressPointer r0
    //     0xc2d978: add             x0, x0, HEAP, lsl #32
    // 0xc2d97c: b               #0xc2d988
    // 0xc2d980: LoadField: r0 = r3->field_2f
    //     0xc2d980: ldur            w0, [x3, #0x2f]
    // 0xc2d984: DecompressPointer r0
    //     0xc2d984: add             x0, x0, HEAP, lsl #32
    // 0xc2d988: cmp             w0, NULL
    // 0xc2d98c: b.eq            #0xc2da90
    // 0xc2d990: b               #0xc2da68
    // 0xc2d994: d0 = 0.000000
    //     0xc2d994: eor             v0.16b, v0.16b, v0.16b
    // 0xc2d998: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xc2d998: ldur            w1, [x0, #0x17]
    // 0xc2d99c: DecompressPointer r1
    //     0xc2d99c: add             x1, x1, HEAP, lsl #32
    // 0xc2d9a0: LoadField: r2 = r1->field_3f
    //     0xc2d9a0: ldur            w2, [x1, #0x3f]
    // 0xc2d9a4: DecompressPointer r2
    //     0xc2d9a4: add             x2, x2, HEAP, lsl #32
    // 0xc2d9a8: r16 = Instance_Axis
    //     0xc2d9a8: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0xc2d9ac: cmp             w2, w16
    // 0xc2d9b0: b.ne            #0xc2d9e0
    // 0xc2d9b4: LoadField: r3 = r1->field_23
    //     0xc2d9b4: ldur            w3, [x1, #0x23]
    // 0xc2d9b8: DecompressPointer r3
    //     0xc2d9b8: add             x3, x3, HEAP, lsl #32
    // 0xc2d9bc: LoadField: r4 = r3->field_33
    //     0xc2d9bc: ldur            w4, [x3, #0x33]
    // 0xc2d9c0: DecompressPointer r4
    //     0xc2d9c0: add             x4, x4, HEAP, lsl #32
    // 0xc2d9c4: cmp             w4, NULL
    // 0xc2d9c8: b.ne            #0xc2d9f8
    // 0xc2d9cc: LoadField: r4 = r3->field_2f
    //     0xc2d9cc: ldur            w4, [x3, #0x2f]
    // 0xc2d9d0: DecompressPointer r4
    //     0xc2d9d0: add             x4, x4, HEAP, lsl #32
    // 0xc2d9d4: cmp             w4, NULL
    // 0xc2d9d8: b.eq            #0xc2da44
    // 0xc2d9dc: b               #0xc2d9f8
    // 0xc2d9e0: LoadField: r3 = r1->field_23
    //     0xc2d9e0: ldur            w3, [x1, #0x23]
    // 0xc2d9e4: DecompressPointer r3
    //     0xc2d9e4: add             x3, x3, HEAP, lsl #32
    // 0xc2d9e8: LoadField: r4 = r3->field_2f
    //     0xc2d9e8: ldur            w4, [x3, #0x2f]
    // 0xc2d9ec: DecompressPointer r4
    //     0xc2d9ec: add             x4, x4, HEAP, lsl #32
    // 0xc2d9f0: cmp             w4, NULL
    // 0xc2d9f4: b.eq            #0xc2da44
    // 0xc2d9f8: LoadField: d1 = r1->field_4b
    //     0xc2d9f8: ldur            d1, [x1, #0x4b]
    // 0xc2d9fc: fcmp            d1, d0
    // 0xc2da00: b.vs            #0xc2da44
    // 0xc2da04: b.le            #0xc2da44
    // 0xc2da08: r16 = Instance_Axis
    //     0xc2da08: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0xc2da0c: cmp             w2, w16
    // 0xc2da10: b.ne            #0xc2da30
    // 0xc2da14: LoadField: r0 = r3->field_33
    //     0xc2da14: ldur            w0, [x3, #0x33]
    // 0xc2da18: DecompressPointer r0
    //     0xc2da18: add             x0, x0, HEAP, lsl #32
    // 0xc2da1c: cmp             w0, NULL
    // 0xc2da20: b.ne            #0xc2da38
    // 0xc2da24: LoadField: r0 = r3->field_2f
    //     0xc2da24: ldur            w0, [x3, #0x2f]
    // 0xc2da28: DecompressPointer r0
    //     0xc2da28: add             x0, x0, HEAP, lsl #32
    // 0xc2da2c: b               #0xc2da38
    // 0xc2da30: LoadField: r0 = r3->field_2f
    //     0xc2da30: ldur            w0, [x3, #0x2f]
    // 0xc2da34: DecompressPointer r0
    //     0xc2da34: add             x0, x0, HEAP, lsl #32
    // 0xc2da38: cmp             w0, NULL
    // 0xc2da3c: b.eq            #0xc2da94
    // 0xc2da40: b               #0xc2da68
    // 0xc2da44: r1 = 1
    //     0xc2da44: movz            x1, #0x1
    // 0xc2da48: r0 = AllocateContext()
    //     0xc2da48: bl              #0xc5def4  ; AllocateContextStub
    // 0xc2da4c: mov             x1, x0
    // 0xc2da50: ldr             x0, [fp, #0x18]
    // 0xc2da54: StoreField: r1->field_f = r0
    //     0xc2da54: stur            w0, [x1, #0xf]
    // 0xc2da58: mov             x2, x1
    // 0xc2da5c: r1 = Function 'frictionFactor':.
    //     0xc2da5c: add             x1, PP, #0x40, lsl #12  ; [pp+0x40120] AnonymousClosure: (0xc2da98), of [package:flutter/src/widgets/scroll_physics.dart] BouncingScrollPhysics
    //     0xc2da60: ldr             x1, [x1, #0x120]
    // 0xc2da64: r0 = AllocateClosure()
    //     0xc2da64: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xc2da68: ldr             x16, [fp, #0x10]
    // 0xc2da6c: stp             x16, x0, [SP]
    // 0xc2da70: ClosureCall
    //     0xc2da70: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0xc2da74: ldur            x2, [x0, #0x1f]
    //     0xc2da78: blr             x2
    // 0xc2da7c: LeaveFrame
    //     0xc2da7c: mov             SP, fp
    //     0xc2da80: ldp             fp, lr, [SP], #0x10
    // 0xc2da84: ret
    //     0xc2da84: ret             
    // 0xc2da88: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc2da88: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc2da8c: b               #0xc2d8dc
    // 0xc2da90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2da90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2da94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2da94: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ applyBoundaryConditions(/* No info */) {
    // ** addr: 0xc2ee24, size: 0x105c
    // 0xc2ee24: EnterFrame
    //     0xc2ee24: stp             fp, lr, [SP, #-0x10]!
    //     0xc2ee28: mov             fp, SP
    // 0xc2ee2c: AllocStack(0x58)
    //     0xc2ee2c: sub             SP, SP, #0x58
    // 0xc2ee30: CheckStackOverflow
    //     0xc2ee30: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc2ee34: cmp             SP, x16
    //     0xc2ee38: b.ls            #0xc2fe0c
    // 0xc2ee3c: ldr             x0, [fp, #0x20]
    // 0xc2ee40: LoadField: r1 = r0->field_13
    //     0xc2ee40: ldur            w1, [x0, #0x13]
    // 0xc2ee44: DecompressPointer r1
    //     0xc2ee44: add             x1, x1, HEAP, lsl #32
    // 0xc2ee48: stur            x1, [fp, #-0x10]
    // 0xc2ee4c: LoadField: r2 = r1->field_3f
    //     0xc2ee4c: ldur            w2, [x1, #0x3f]
    // 0xc2ee50: DecompressPointer r2
    //     0xc2ee50: add             x2, x2, HEAP, lsl #32
    // 0xc2ee54: stur            x2, [fp, #-8]
    // 0xc2ee58: ldr             x16, [fp, #0x18]
    // 0xc2ee5c: str             x16, [SP]
    // 0xc2ee60: r0 = axis()
    //     0xc2ee60: bl              #0xb2709c  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::axis
    // 0xc2ee64: mov             x1, x0
    // 0xc2ee68: ldur            x0, [fp, #-8]
    // 0xc2ee6c: cmp             w0, w1
    // 0xc2ee70: b.ne            #0xc2eeb0
    // 0xc2ee74: ldr             x2, [fp, #0x18]
    // 0xc2ee78: ldur            x1, [fp, #-0x10]
    // 0xc2ee7c: LoadField: r3 = r1->field_43
    //     0xc2ee7c: ldur            w3, [x1, #0x43]
    // 0xc2ee80: DecompressPointer r3
    //     0xc2ee80: add             x3, x3, HEAP, lsl #32
    // 0xc2ee84: stur            x3, [fp, #-8]
    // 0xc2ee88: r0 = LoadClassIdInstr(r2)
    //     0xc2ee88: ldur            x0, [x2, #-1]
    //     0xc2ee8c: ubfx            x0, x0, #0xc, #0x14
    // 0xc2ee90: str             x2, [SP]
    // 0xc2ee94: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc2ee94: sub             lr, x0, #0x89d
    //     0xc2ee98: ldr             lr, [x21, lr, lsl #3]
    //     0xc2ee9c: blr             lr
    // 0xc2eea0: mov             x1, x0
    // 0xc2eea4: ldur            x0, [fp, #-8]
    // 0xc2eea8: cmp             w0, w1
    // 0xc2eeac: b.eq            #0xc2ef20
    // 0xc2eeb0: ldr             x1, [fp, #0x18]
    // 0xc2eeb4: ldur            x0, [fp, #-0x10]
    // 0xc2eeb8: str             x1, [SP]
    // 0xc2eebc: r0 = axis()
    //     0xc2eebc: bl              #0xb2709c  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::axis
    // 0xc2eec0: ldur            x1, [fp, #-0x10]
    // 0xc2eec4: StoreField: r1->field_3f = r0
    //     0xc2eec4: stur            w0, [x1, #0x3f]
    //     0xc2eec8: ldurb           w16, [x1, #-1]
    //     0xc2eecc: ldurb           w17, [x0, #-1]
    //     0xc2eed0: and             x16, x17, x16, lsr #2
    //     0xc2eed4: tst             x16, HEAP, lsr #32
    //     0xc2eed8: b.eq            #0xc2eee0
    //     0xc2eedc: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xc2eee0: ldr             x2, [fp, #0x18]
    // 0xc2eee4: r0 = LoadClassIdInstr(r2)
    //     0xc2eee4: ldur            x0, [x2, #-1]
    //     0xc2eee8: ubfx            x0, x0, #0xc, #0x14
    // 0xc2eeec: str             x2, [SP]
    // 0xc2eef0: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc2eef0: sub             lr, x0, #0x89d
    //     0xc2eef4: ldr             lr, [x21, lr, lsl #3]
    //     0xc2eef8: blr             lr
    // 0xc2eefc: ldur            x1, [fp, #-0x10]
    // 0xc2ef00: StoreField: r1->field_43 = r0
    //     0xc2ef00: stur            w0, [x1, #0x43]
    //     0xc2ef04: ldurb           w16, [x1, #-1]
    //     0xc2ef08: ldurb           w17, [x0, #-1]
    //     0xc2ef0c: and             x16, x17, x16, lsr #2
    //     0xc2ef10: tst             x16, HEAP, lsr #32
    //     0xc2ef14: b.eq            #0xc2ef1c
    //     0xc2ef18: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xc2ef1c: b               #0xc2ef24
    // 0xc2ef20: ldur            x1, [fp, #-0x10]
    // 0xc2ef24: ldr             x0, [fp, #0x20]
    // 0xc2ef28: ArrayLoad: r2 = r0[0]  ; List_4
    //     0xc2ef28: ldur            w2, [x0, #0x17]
    // 0xc2ef2c: DecompressPointer r2
    //     0xc2ef2c: add             x2, x2, HEAP, lsl #32
    // 0xc2ef30: stur            x2, [fp, #-0x18]
    // 0xc2ef34: LoadField: r3 = r2->field_3f
    //     0xc2ef34: ldur            w3, [x2, #0x3f]
    // 0xc2ef38: DecompressPointer r3
    //     0xc2ef38: add             x3, x3, HEAP, lsl #32
    // 0xc2ef3c: stur            x3, [fp, #-8]
    // 0xc2ef40: ldr             x16, [fp, #0x18]
    // 0xc2ef44: str             x16, [SP]
    // 0xc2ef48: r0 = axis()
    //     0xc2ef48: bl              #0xb2709c  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::axis
    // 0xc2ef4c: mov             x1, x0
    // 0xc2ef50: ldur            x0, [fp, #-8]
    // 0xc2ef54: cmp             w0, w1
    // 0xc2ef58: b.ne            #0xc2ef98
    // 0xc2ef5c: ldr             x2, [fp, #0x18]
    // 0xc2ef60: ldur            x1, [fp, #-0x18]
    // 0xc2ef64: LoadField: r3 = r1->field_43
    //     0xc2ef64: ldur            w3, [x1, #0x43]
    // 0xc2ef68: DecompressPointer r3
    //     0xc2ef68: add             x3, x3, HEAP, lsl #32
    // 0xc2ef6c: stur            x3, [fp, #-8]
    // 0xc2ef70: r0 = LoadClassIdInstr(r2)
    //     0xc2ef70: ldur            x0, [x2, #-1]
    //     0xc2ef74: ubfx            x0, x0, #0xc, #0x14
    // 0xc2ef78: str             x2, [SP]
    // 0xc2ef7c: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc2ef7c: sub             lr, x0, #0x89d
    //     0xc2ef80: ldr             lr, [x21, lr, lsl #3]
    //     0xc2ef84: blr             lr
    // 0xc2ef88: mov             x1, x0
    // 0xc2ef8c: ldur            x0, [fp, #-8]
    // 0xc2ef90: cmp             w0, w1
    // 0xc2ef94: b.eq            #0xc2f008
    // 0xc2ef98: ldr             x1, [fp, #0x18]
    // 0xc2ef9c: ldur            x0, [fp, #-0x18]
    // 0xc2efa0: str             x1, [SP]
    // 0xc2efa4: r0 = axis()
    //     0xc2efa4: bl              #0xb2709c  ; [package:flutter/src/widgets/scroll_position.dart] _ScrollPosition&ViewportOffset&ScrollMetrics::axis
    // 0xc2efa8: ldur            x1, [fp, #-0x18]
    // 0xc2efac: StoreField: r1->field_3f = r0
    //     0xc2efac: stur            w0, [x1, #0x3f]
    //     0xc2efb0: ldurb           w16, [x1, #-1]
    //     0xc2efb4: ldurb           w17, [x0, #-1]
    //     0xc2efb8: and             x16, x17, x16, lsr #2
    //     0xc2efbc: tst             x16, HEAP, lsr #32
    //     0xc2efc0: b.eq            #0xc2efc8
    //     0xc2efc4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xc2efc8: ldr             x2, [fp, #0x18]
    // 0xc2efcc: r0 = LoadClassIdInstr(r2)
    //     0xc2efcc: ldur            x0, [x2, #-1]
    //     0xc2efd0: ubfx            x0, x0, #0xc, #0x14
    // 0xc2efd4: str             x2, [SP]
    // 0xc2efd8: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc2efd8: sub             lr, x0, #0x89d
    //     0xc2efdc: ldr             lr, [x21, lr, lsl #3]
    //     0xc2efe0: blr             lr
    // 0xc2efe4: ldur            x1, [fp, #-0x18]
    // 0xc2efe8: StoreField: r1->field_43 = r0
    //     0xc2efe8: stur            w0, [x1, #0x43]
    //     0xc2efec: ldurb           w16, [x1, #-1]
    //     0xc2eff0: ldurb           w17, [x0, #-1]
    //     0xc2eff4: and             x16, x17, x16, lsr #2
    //     0xc2eff8: tst             x16, HEAP, lsr #32
    //     0xc2effc: b.eq            #0xc2f004
    //     0xc2f000: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xc2f004: b               #0xc2f00c
    // 0xc2f008: ldur            x1, [fp, #-0x18]
    // 0xc2f00c: d0 = inf
    //     0xc2f00c: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f010: fcmp            d0, d0
    // 0xc2f014: b.vs            #0xc2f01c
    // 0xc2f018: b.eq            #0xc2f024
    // 0xc2f01c: r0 = false
    //     0xc2f01c: add             x0, NULL, #0x30  ; false
    // 0xc2f020: b               #0xc2f028
    // 0xc2f024: r0 = true
    //     0xc2f024: add             x0, NULL, #0x20  ; true
    // 0xc2f028: stur            x0, [fp, #-8]
    // 0xc2f02c: tbnz            w0, #4, #0xc2f038
    // 0xc2f030: d1 = inf
    //     0xc2f030: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f034: b               #0xc2f054
    // 0xc2f038: ldur            x16, [fp, #-0x10]
    // 0xc2f03c: str             x16, [SP]
    // 0xc2f040: r0 = safeOffset()
    //     0xc2f040: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f044: mov             v1.16b, v0.16b
    // 0xc2f048: d0 = inf
    //     0xc2f048: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f04c: fadd            d2, d0, d1
    // 0xc2f050: mov             v1.16b, v2.16b
    // 0xc2f054: fcmp            d1, d0
    // 0xc2f058: b.eq            #0xc2f150
    // 0xc2f05c: ldur            x0, [fp, #-8]
    // 0xc2f060: tbnz            w0, #4, #0xc2f06c
    // 0xc2f064: d2 = inf
    //     0xc2f064: ldr             d2, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f068: b               #0xc2f084
    // 0xc2f06c: ldur            x16, [fp, #-0x10]
    // 0xc2f070: str             x16, [SP]
    // 0xc2f074: r0 = safeOffset()
    //     0xc2f074: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f078: mov             v1.16b, v0.16b
    // 0xc2f07c: d0 = inf
    //     0xc2f07c: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f080: fadd            d2, d0, d1
    // 0xc2f084: ldr             d1, [fp, #0x10]
    // 0xc2f088: fneg            d3, d2
    // 0xc2f08c: fcmp            d1, d3
    // 0xc2f090: b.vs            #0xc2f144
    // 0xc2f094: b.ge            #0xc2f144
    // 0xc2f098: ldur            x0, [fp, #-8]
    // 0xc2f09c: tbnz            w0, #4, #0xc2f0a8
    // 0xc2f0a0: d2 = inf
    //     0xc2f0a0: ldr             d2, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f0a4: b               #0xc2f0c8
    // 0xc2f0a8: ldur            x16, [fp, #-0x10]
    // 0xc2f0ac: str             x16, [SP]
    // 0xc2f0b0: r0 = safeOffset()
    //     0xc2f0b0: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f0b4: mov             v1.16b, v0.16b
    // 0xc2f0b8: d0 = inf
    //     0xc2f0b8: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f0bc: fadd            d2, d0, d1
    // 0xc2f0c0: ldr             d1, [fp, #0x10]
    // 0xc2f0c4: ldur            x0, [fp, #-8]
    // 0xc2f0c8: fneg            d3, d2
    // 0xc2f0cc: ldr             x16, [fp, #0x20]
    // 0xc2f0d0: ldr             lr, [fp, #0x18]
    // 0xc2f0d4: stp             lr, x16, [SP, #0x10]
    // 0xc2f0d8: str             d3, [SP, #8]
    // 0xc2f0dc: str             d1, [SP]
    // 0xc2f0e0: r0 = _updateIndicatorOffset()
    //     0xc2f0e0: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f0e4: ldur            x0, [fp, #-8]
    // 0xc2f0e8: tbnz            w0, #4, #0xc2f0f4
    // 0xc2f0ec: d0 = inf
    //     0xc2f0ec: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f0f0: b               #0xc2f110
    // 0xc2f0f4: ldur            x16, [fp, #-0x10]
    // 0xc2f0f8: str             x16, [SP]
    // 0xc2f0fc: r0 = safeOffset()
    //     0xc2f0fc: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f100: mov             v1.16b, v0.16b
    // 0xc2f104: d0 = inf
    //     0xc2f104: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f108: fadd            d2, d0, d1
    // 0xc2f10c: mov             v0.16b, v2.16b
    // 0xc2f110: ldr             x1, [fp, #0x18]
    // 0xc2f114: ldr             d1, [fp, #0x10]
    // 0xc2f118: fadd            d2, d1, d0
    // 0xc2f11c: LoadField: r0 = r1->field_33
    //     0xc2f11c: ldur            w0, [x1, #0x33]
    // 0xc2f120: DecompressPointer r0
    //     0xc2f120: add             x0, x0, HEAP, lsl #32
    // 0xc2f124: cmp             w0, NULL
    // 0xc2f128: b.eq            #0xc2fe14
    // 0xc2f12c: LoadField: d0 = r0->field_7
    //     0xc2f12c: ldur            d0, [x0, #7]
    // 0xc2f130: fsub            d1, d2, d0
    // 0xc2f134: mov             v0.16b, v1.16b
    // 0xc2f138: LeaveFrame
    //     0xc2f138: mov             SP, fp
    //     0xc2f13c: ldp             fp, lr, [SP], #0x10
    // 0xc2f140: ret
    //     0xc2f140: ret             
    // 0xc2f144: ldr             x1, [fp, #0x18]
    // 0xc2f148: ldur            x0, [fp, #-8]
    // 0xc2f14c: b               #0xc2f15c
    // 0xc2f150: ldr             x1, [fp, #0x18]
    // 0xc2f154: ldr             d1, [fp, #0x10]
    // 0xc2f158: ldur            x0, [fp, #-8]
    // 0xc2f15c: ldur            x2, [fp, #-0x10]
    // 0xc2f160: LoadField: r3 = r2->field_23
    //     0xc2f160: ldur            w3, [x2, #0x23]
    // 0xc2f164: DecompressPointer r3
    //     0xc2f164: add             x3, x3, HEAP, lsl #32
    // 0xc2f168: LoadField: r4 = r3->field_3b
    //     0xc2f168: ldur            w4, [x3, #0x3b]
    // 0xc2f16c: DecompressPointer r4
    //     0xc2f16c: add             x4, x4, HEAP, lsl #32
    // 0xc2f170: tbnz            w4, #4, #0xc2f17c
    // 0xc2f174: ldr             x5, [fp, #0x20]
    // 0xc2f178: b               #0xc2f274
    // 0xc2f17c: LoadField: r5 = r2->field_63
    //     0xc2f17c: ldur            w5, [x2, #0x63]
    // 0xc2f180: DecompressPointer r5
    //     0xc2f180: add             x5, x5, HEAP, lsl #32
    // 0xc2f184: r16 = Instance_IndicatorMode
    //     0xc2f184: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc2f188: ldr             x16, [x16, #0x158]
    // 0xc2f18c: cmp             w5, w16
    // 0xc2f190: b.eq            #0xc2f1a4
    // 0xc2f194: r16 = Instance_IndicatorMode
    //     0xc2f194: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc2f198: ldr             x16, [x16, #0x160]
    // 0xc2f19c: cmp             w5, w16
    // 0xc2f1a0: b.ne            #0xc2f1ac
    // 0xc2f1a4: ldr             x5, [fp, #0x20]
    // 0xc2f1a8: b               #0xc2f274
    // 0xc2f1ac: r16 = Instance_IndicatorMode
    //     0xc2f1ac: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc2f1b0: ldr             x16, [x16, #0x1b8]
    // 0xc2f1b4: cmp             w5, w16
    // 0xc2f1b8: b.eq            #0xc2f270
    // 0xc2f1bc: LoadField: r5 = r1->field_33
    //     0xc2f1bc: ldur            w5, [x1, #0x33]
    // 0xc2f1c0: DecompressPointer r5
    //     0xc2f1c0: add             x5, x5, HEAP, lsl #32
    // 0xc2f1c4: cmp             w5, NULL
    // 0xc2f1c8: b.eq            #0xc2fe18
    // 0xc2f1cc: LoadField: d2 = r5->field_7
    //     0xc2f1cc: ldur            d2, [x5, #7]
    // 0xc2f1d0: fcmp            d1, d2
    // 0xc2f1d4: b.vs            #0xc2f268
    // 0xc2f1d8: b.ge            #0xc2f268
    // 0xc2f1dc: LoadField: r5 = r1->field_43
    //     0xc2f1dc: ldur            w5, [x1, #0x43]
    // 0xc2f1e0: DecompressPointer r5
    //     0xc2f1e0: add             x5, x5, HEAP, lsl #32
    // 0xc2f1e4: cmp             w5, NULL
    // 0xc2f1e8: b.eq            #0xc2fe1c
    // 0xc2f1ec: LoadField: d3 = r5->field_7
    //     0xc2f1ec: ldur            d3, [x5, #7]
    // 0xc2f1f0: fcmp            d2, d3
    // 0xc2f1f4: b.vs            #0xc2f204
    // 0xc2f1f8: b.ge            #0xc2f204
    // 0xc2f1fc: ldr             x5, [fp, #0x20]
    // 0xc2f200: b               #0xc2f228
    // 0xc2f204: ldr             x5, [fp, #0x20]
    // 0xc2f208: LoadField: r6 = r5->field_f
    //     0xc2f208: ldur            w6, [x5, #0xf]
    // 0xc2f20c: DecompressPointer r6
    //     0xc2f20c: add             x6, x6, HEAP, lsl #32
    // 0xc2f210: LoadField: r7 = r6->field_27
    //     0xc2f210: ldur            w7, [x6, #0x27]
    // 0xc2f214: DecompressPointer r7
    //     0xc2f214: add             x7, x7, HEAP, lsl #32
    // 0xc2f218: tbz             w7, #4, #0xc2f274
    // 0xc2f21c: fcmp            d2, d3
    // 0xc2f220: b.vs            #0xc2f274
    // 0xc2f224: b.ne            #0xc2f274
    // 0xc2f228: stp             x1, x5, [SP, #0x10]
    // 0xc2f22c: str             xzr, [SP, #8]
    // 0xc2f230: str             d1, [SP]
    // 0xc2f234: r0 = _updateIndicatorOffset()
    //     0xc2f234: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f238: ldr             x1, [fp, #0x18]
    // 0xc2f23c: LoadField: r0 = r1->field_33
    //     0xc2f23c: ldur            w0, [x1, #0x33]
    // 0xc2f240: DecompressPointer r0
    //     0xc2f240: add             x0, x0, HEAP, lsl #32
    // 0xc2f244: cmp             w0, NULL
    // 0xc2f248: b.eq            #0xc2fe20
    // 0xc2f24c: LoadField: d0 = r0->field_7
    //     0xc2f24c: ldur            d0, [x0, #7]
    // 0xc2f250: ldr             d1, [fp, #0x10]
    // 0xc2f254: fsub            d2, d1, d0
    // 0xc2f258: mov             v0.16b, v2.16b
    // 0xc2f25c: LeaveFrame
    //     0xc2f25c: mov             SP, fp
    //     0xc2f260: ldp             fp, lr, [SP], #0x10
    // 0xc2f264: ret
    //     0xc2f264: ret             
    // 0xc2f268: ldr             x5, [fp, #0x20]
    // 0xc2f26c: b               #0xc2f274
    // 0xc2f270: ldr             x5, [fp, #0x20]
    // 0xc2f274: LoadField: r6 = r3->field_3f
    //     0xc2f274: ldur            w6, [x3, #0x3f]
    // 0xc2f278: DecompressPointer r6
    //     0xc2f278: add             x6, x6, HEAP, lsl #32
    // 0xc2f27c: tbnz            w6, #4, #0xc2f2ac
    // 0xc2f280: tbz             w4, #4, #0xc2f530
    // 0xc2f284: LoadField: r3 = r2->field_63
    //     0xc2f284: ldur            w3, [x2, #0x63]
    // 0xc2f288: DecompressPointer r3
    //     0xc2f288: add             x3, x3, HEAP, lsl #32
    // 0xc2f28c: r16 = Instance_IndicatorMode
    //     0xc2f28c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc2f290: ldr             x16, [x16, #0x158]
    // 0xc2f294: cmp             w3, w16
    // 0xc2f298: b.eq            #0xc2f2ac
    // 0xc2f29c: r16 = Instance_IndicatorMode
    //     0xc2f29c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc2f2a0: ldr             x16, [x16, #0x160]
    // 0xc2f2a4: cmp             w3, w16
    // 0xc2f2a8: b.ne            #0xc2f524
    // 0xc2f2ac: str             x2, [SP]
    // 0xc2f2b0: r0 = _canProcess()
    //     0xc2f2b0: bl              #0x684a4c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_canProcess
    // 0xc2f2b4: tbnz            w0, #4, #0xc2f2c0
    // 0xc2f2b8: ldur            x0, [fp, #-0x10]
    // 0xc2f2bc: b               #0xc2f2f4
    // 0xc2f2c0: ldur            x0, [fp, #-0x10]
    // 0xc2f2c4: LoadField: r1 = r0->field_7f
    //     0xc2f2c4: ldur            w1, [x0, #0x7f]
    // 0xc2f2c8: DecompressPointer r1
    //     0xc2f2c8: add             x1, x1, HEAP, lsl #32
    // 0xc2f2cc: r16 = Instance_IndicatorResult
    //     0xc2f2cc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0xc2f2d0: ldr             x16, [x16, #0x1c0]
    // 0xc2f2d4: cmp             w1, w16
    // 0xc2f2d8: b.ne            #0xc2f518
    // 0xc2f2dc: LoadField: r1 = r0->field_63
    //     0xc2f2dc: ldur            w1, [x0, #0x63]
    // 0xc2f2e0: DecompressPointer r1
    //     0xc2f2e0: add             x1, x1, HEAP, lsl #32
    // 0xc2f2e4: r16 = Instance_IndicatorMode
    //     0xc2f2e4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xc2f2e8: ldr             x16, [x16, #0x1a0]
    // 0xc2f2ec: cmp             w1, w16
    // 0xc2f2f0: b.ne            #0xc2f50c
    // 0xc2f2f4: ldr             x1, [fp, #0x18]
    // 0xc2f2f8: ldr             d0, [fp, #0x10]
    // 0xc2f2fc: LoadField: r2 = r0->field_23
    //     0xc2f2fc: ldur            w2, [x0, #0x23]
    // 0xc2f300: DecompressPointer r2
    //     0xc2f300: add             x2, x2, HEAP, lsl #32
    // 0xc2f304: LoadField: d1 = r2->field_7
    //     0xc2f304: ldur            d1, [x2, #7]
    // 0xc2f308: stur            d1, [fp, #-0x30]
    // 0xc2f30c: str             x0, [SP]
    // 0xc2f310: r0 = safeOffset()
    //     0xc2f310: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f314: mov             v1.16b, v0.16b
    // 0xc2f318: ldur            d0, [fp, #-0x30]
    // 0xc2f31c: fadd            d2, d0, d1
    // 0xc2f320: ldr             d0, [fp, #0x10]
    // 0xc2f324: fadd            d1, d0, d2
    // 0xc2f328: ldr             x0, [fp, #0x18]
    // 0xc2f32c: LoadField: r1 = r0->field_33
    //     0xc2f32c: ldur            w1, [x0, #0x33]
    // 0xc2f330: DecompressPointer r1
    //     0xc2f330: add             x1, x1, HEAP, lsl #32
    // 0xc2f334: cmp             w1, NULL
    // 0xc2f338: b.eq            #0xc2fe24
    // 0xc2f33c: LoadField: d2 = r1->field_7
    //     0xc2f33c: ldur            d2, [x1, #7]
    // 0xc2f340: stur            d2, [fp, #-0x38]
    // 0xc2f344: fcmp            d1, d2
    // 0xc2f348: b.vs            #0xc2f500
    // 0xc2f34c: b.ge            #0xc2f500
    // 0xc2f350: ldur            x1, [fp, #-0x10]
    // 0xc2f354: LoadField: r2 = r0->field_43
    //     0xc2f354: ldur            w2, [x0, #0x43]
    // 0xc2f358: DecompressPointer r2
    //     0xc2f358: add             x2, x2, HEAP, lsl #32
    // 0xc2f35c: stur            x2, [fp, #-0x20]
    // 0xc2f360: cmp             w2, NULL
    // 0xc2f364: b.eq            #0xc2fe28
    // 0xc2f368: LoadField: r3 = r1->field_23
    //     0xc2f368: ldur            w3, [x1, #0x23]
    // 0xc2f36c: DecompressPointer r3
    //     0xc2f36c: add             x3, x3, HEAP, lsl #32
    // 0xc2f370: LoadField: d1 = r3->field_7
    //     0xc2f370: ldur            d1, [x3, #7]
    // 0xc2f374: stur            d1, [fp, #-0x30]
    // 0xc2f378: str             x1, [SP]
    // 0xc2f37c: r0 = safeOffset()
    //     0xc2f37c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f380: mov             v1.16b, v0.16b
    // 0xc2f384: ldur            d0, [fp, #-0x30]
    // 0xc2f388: fadd            d2, d0, d1
    // 0xc2f38c: ldur            x0, [fp, #-0x20]
    // 0xc2f390: LoadField: d0 = r0->field_7
    //     0xc2f390: ldur            d0, [x0, #7]
    // 0xc2f394: fadd            d1, d0, d2
    // 0xc2f398: ldur            d0, [fp, #-0x38]
    // 0xc2f39c: fcmp            d0, d1
    // 0xc2f3a0: b.vs            #0xc2f3a8
    // 0xc2f3a4: b.lt            #0xc2f434
    // 0xc2f3a8: ldr             x0, [fp, #0x20]
    // 0xc2f3ac: LoadField: r1 = r0->field_f
    //     0xc2f3ac: ldur            w1, [x0, #0xf]
    // 0xc2f3b0: DecompressPointer r1
    //     0xc2f3b0: add             x1, x1, HEAP, lsl #32
    // 0xc2f3b4: LoadField: r2 = r1->field_27
    //     0xc2f3b4: ldur            w2, [x1, #0x27]
    // 0xc2f3b8: DecompressPointer r2
    //     0xc2f3b8: add             x2, x2, HEAP, lsl #32
    // 0xc2f3bc: tbz             w2, #4, #0xc2f4f0
    // 0xc2f3c0: ldr             x1, [fp, #0x18]
    // 0xc2f3c4: ldur            x2, [fp, #-0x10]
    // 0xc2f3c8: LoadField: r3 = r1->field_33
    //     0xc2f3c8: ldur            w3, [x1, #0x33]
    // 0xc2f3cc: DecompressPointer r3
    //     0xc2f3cc: add             x3, x3, HEAP, lsl #32
    // 0xc2f3d0: stur            x3, [fp, #-0x28]
    // 0xc2f3d4: cmp             w3, NULL
    // 0xc2f3d8: b.eq            #0xc2fe2c
    // 0xc2f3dc: LoadField: r4 = r1->field_43
    //     0xc2f3dc: ldur            w4, [x1, #0x43]
    // 0xc2f3e0: DecompressPointer r4
    //     0xc2f3e0: add             x4, x4, HEAP, lsl #32
    // 0xc2f3e4: stur            x4, [fp, #-0x20]
    // 0xc2f3e8: cmp             w4, NULL
    // 0xc2f3ec: b.eq            #0xc2fe30
    // 0xc2f3f0: LoadField: r5 = r2->field_23
    //     0xc2f3f0: ldur            w5, [x2, #0x23]
    // 0xc2f3f4: DecompressPointer r5
    //     0xc2f3f4: add             x5, x5, HEAP, lsl #32
    // 0xc2f3f8: LoadField: d0 = r5->field_7
    //     0xc2f3f8: ldur            d0, [x5, #7]
    // 0xc2f3fc: stur            d0, [fp, #-0x30]
    // 0xc2f400: str             x2, [SP]
    // 0xc2f404: r0 = safeOffset()
    //     0xc2f404: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f408: mov             v1.16b, v0.16b
    // 0xc2f40c: ldur            d0, [fp, #-0x30]
    // 0xc2f410: fadd            d2, d0, d1
    // 0xc2f414: ldur            x0, [fp, #-0x20]
    // 0xc2f418: LoadField: d0 = r0->field_7
    //     0xc2f418: ldur            d0, [x0, #7]
    // 0xc2f41c: fadd            d1, d0, d2
    // 0xc2f420: ldur            x0, [fp, #-0x28]
    // 0xc2f424: LoadField: d0 = r0->field_7
    //     0xc2f424: ldur            d0, [x0, #7]
    // 0xc2f428: fcmp            d0, d1
    // 0xc2f42c: b.vs            #0xc2f4e0
    // 0xc2f430: b.ne            #0xc2f4e0
    // 0xc2f434: ldr             x0, [fp, #0x18]
    // 0xc2f438: ldr             d0, [fp, #0x10]
    // 0xc2f43c: ldur            x1, [fp, #-0x10]
    // 0xc2f440: LoadField: r2 = r1->field_23
    //     0xc2f440: ldur            w2, [x1, #0x23]
    // 0xc2f444: DecompressPointer r2
    //     0xc2f444: add             x2, x2, HEAP, lsl #32
    // 0xc2f448: LoadField: d1 = r2->field_7
    //     0xc2f448: ldur            d1, [x2, #7]
    // 0xc2f44c: stur            d1, [fp, #-0x30]
    // 0xc2f450: str             x1, [SP]
    // 0xc2f454: r0 = safeOffset()
    //     0xc2f454: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f458: mov             v1.16b, v0.16b
    // 0xc2f45c: ldur            d0, [fp, #-0x30]
    // 0xc2f460: fadd            d2, d0, d1
    // 0xc2f464: fneg            d0, d2
    // 0xc2f468: ldr             x16, [fp, #0x20]
    // 0xc2f46c: ldr             lr, [fp, #0x18]
    // 0xc2f470: stp             lr, x16, [SP, #0x10]
    // 0xc2f474: str             d0, [SP, #8]
    // 0xc2f478: ldr             d0, [fp, #0x10]
    // 0xc2f47c: str             d0, [SP]
    // 0xc2f480: r0 = _updateIndicatorOffset()
    //     0xc2f480: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f484: ldur            x0, [fp, #-0x10]
    // 0xc2f488: LoadField: r1 = r0->field_23
    //     0xc2f488: ldur            w1, [x0, #0x23]
    // 0xc2f48c: DecompressPointer r1
    //     0xc2f48c: add             x1, x1, HEAP, lsl #32
    // 0xc2f490: LoadField: d0 = r1->field_7
    //     0xc2f490: ldur            d0, [x1, #7]
    // 0xc2f494: stur            d0, [fp, #-0x30]
    // 0xc2f498: str             x0, [SP]
    // 0xc2f49c: r0 = safeOffset()
    //     0xc2f49c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f4a0: mov             v1.16b, v0.16b
    // 0xc2f4a4: ldur            d0, [fp, #-0x30]
    // 0xc2f4a8: fadd            d2, d0, d1
    // 0xc2f4ac: ldr             d0, [fp, #0x10]
    // 0xc2f4b0: fadd            d1, d0, d2
    // 0xc2f4b4: ldr             x1, [fp, #0x18]
    // 0xc2f4b8: LoadField: r0 = r1->field_33
    //     0xc2f4b8: ldur            w0, [x1, #0x33]
    // 0xc2f4bc: DecompressPointer r0
    //     0xc2f4bc: add             x0, x0, HEAP, lsl #32
    // 0xc2f4c0: cmp             w0, NULL
    // 0xc2f4c4: b.eq            #0xc2fe34
    // 0xc2f4c8: LoadField: d0 = r0->field_7
    //     0xc2f4c8: ldur            d0, [x0, #7]
    // 0xc2f4cc: fsub            d2, d1, d0
    // 0xc2f4d0: mov             v0.16b, v2.16b
    // 0xc2f4d4: LeaveFrame
    //     0xc2f4d4: mov             SP, fp
    //     0xc2f4d8: ldp             fp, lr, [SP], #0x10
    // 0xc2f4dc: ret
    //     0xc2f4dc: ret             
    // 0xc2f4e0: ldr             x1, [fp, #0x18]
    // 0xc2f4e4: ldr             d0, [fp, #0x10]
    // 0xc2f4e8: ldur            x0, [fp, #-0x10]
    // 0xc2f4ec: b               #0xc2f538
    // 0xc2f4f0: ldr             x1, [fp, #0x18]
    // 0xc2f4f4: ldr             d0, [fp, #0x10]
    // 0xc2f4f8: ldur            x0, [fp, #-0x10]
    // 0xc2f4fc: b               #0xc2f538
    // 0xc2f500: mov             x1, x0
    // 0xc2f504: ldur            x0, [fp, #-0x10]
    // 0xc2f508: b               #0xc2f538
    // 0xc2f50c: ldr             x1, [fp, #0x18]
    // 0xc2f510: ldr             d0, [fp, #0x10]
    // 0xc2f514: b               #0xc2f538
    // 0xc2f518: ldr             x1, [fp, #0x18]
    // 0xc2f51c: ldr             d0, [fp, #0x10]
    // 0xc2f520: b               #0xc2f538
    // 0xc2f524: mov             v0.16b, v1.16b
    // 0xc2f528: mov             x0, x2
    // 0xc2f52c: b               #0xc2f538
    // 0xc2f530: mov             v0.16b, v1.16b
    // 0xc2f534: mov             x0, x2
    // 0xc2f538: d1 = 0.000000
    //     0xc2f538: eor             v1.16b, v1.16b, v1.16b
    // 0xc2f53c: LoadField: d2 = r0->field_6b
    //     0xc2f53c: ldur            d2, [x0, #0x6b]
    // 0xc2f540: fcmp            d2, d1
    // 0xc2f544: b.vs            #0xc2f674
    // 0xc2f548: b.le            #0xc2f674
    // 0xc2f54c: LoadField: r2 = r0->field_63
    //     0xc2f54c: ldur            w2, [x0, #0x63]
    // 0xc2f550: DecompressPointer r2
    //     0xc2f550: add             x2, x2, HEAP, lsl #32
    // 0xc2f554: r16 = Instance_IndicatorMode
    //     0xc2f554: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc2f558: ldr             x16, [x16, #0x1b8]
    // 0xc2f55c: cmp             w2, w16
    // 0xc2f560: b.ne            #0xc2f66c
    // 0xc2f564: LoadField: r2 = r0->field_23
    //     0xc2f564: ldur            w2, [x0, #0x23]
    // 0xc2f568: DecompressPointer r2
    //     0xc2f568: add             x2, x2, HEAP, lsl #32
    // 0xc2f56c: LoadField: r3 = r2->field_2b
    //     0xc2f56c: ldur            w3, [x2, #0x2b]
    // 0xc2f570: DecompressPointer r3
    //     0xc2f570: add             x3, x3, HEAP, lsl #32
    // 0xc2f574: tbz             w3, #4, #0xc2f664
    // 0xc2f578: fneg            d2, d0
    // 0xc2f57c: stur            d2, [fp, #-0x38]
    // 0xc2f580: LoadField: d3 = r2->field_7
    //     0xc2f580: ldur            d3, [x2, #7]
    // 0xc2f584: stur            d3, [fp, #-0x30]
    // 0xc2f588: str             x0, [SP]
    // 0xc2f58c: r0 = safeOffset()
    //     0xc2f58c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f590: mov             v1.16b, v0.16b
    // 0xc2f594: ldur            d0, [fp, #-0x30]
    // 0xc2f598: fadd            d2, d0, d1
    // 0xc2f59c: ldur            d0, [fp, #-0x38]
    // 0xc2f5a0: fcmp            d0, d2
    // 0xc2f5a4: b.vs            #0xc2f658
    // 0xc2f5a8: b.ge            #0xc2f658
    // 0xc2f5ac: ldr             x1, [fp, #0x18]
    // 0xc2f5b0: ldr             d0, [fp, #0x10]
    // 0xc2f5b4: ldur            x0, [fp, #-0x10]
    // 0xc2f5b8: LoadField: r2 = r0->field_23
    //     0xc2f5b8: ldur            w2, [x0, #0x23]
    // 0xc2f5bc: DecompressPointer r2
    //     0xc2f5bc: add             x2, x2, HEAP, lsl #32
    // 0xc2f5c0: LoadField: d1 = r2->field_7
    //     0xc2f5c0: ldur            d1, [x2, #7]
    // 0xc2f5c4: stur            d1, [fp, #-0x30]
    // 0xc2f5c8: str             x0, [SP]
    // 0xc2f5cc: r0 = safeOffset()
    //     0xc2f5cc: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f5d0: mov             v1.16b, v0.16b
    // 0xc2f5d4: ldur            d0, [fp, #-0x30]
    // 0xc2f5d8: fadd            d2, d0, d1
    // 0xc2f5dc: fneg            d0, d2
    // 0xc2f5e0: ldr             x16, [fp, #0x20]
    // 0xc2f5e4: ldr             lr, [fp, #0x18]
    // 0xc2f5e8: stp             lr, x16, [SP, #0x10]
    // 0xc2f5ec: str             d0, [SP, #8]
    // 0xc2f5f0: ldr             d0, [fp, #0x10]
    // 0xc2f5f4: str             d0, [SP]
    // 0xc2f5f8: r0 = _updateIndicatorOffset()
    //     0xc2f5f8: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f5fc: ldur            x0, [fp, #-0x10]
    // 0xc2f600: LoadField: r1 = r0->field_23
    //     0xc2f600: ldur            w1, [x0, #0x23]
    // 0xc2f604: DecompressPointer r1
    //     0xc2f604: add             x1, x1, HEAP, lsl #32
    // 0xc2f608: LoadField: d0 = r1->field_7
    //     0xc2f608: ldur            d0, [x1, #7]
    // 0xc2f60c: stur            d0, [fp, #-0x30]
    // 0xc2f610: str             x0, [SP]
    // 0xc2f614: r0 = safeOffset()
    //     0xc2f614: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f618: mov             v1.16b, v0.16b
    // 0xc2f61c: ldur            d0, [fp, #-0x30]
    // 0xc2f620: fadd            d2, d0, d1
    // 0xc2f624: ldr             d0, [fp, #0x10]
    // 0xc2f628: fadd            d1, d2, d0
    // 0xc2f62c: ldr             x0, [fp, #0x18]
    // 0xc2f630: LoadField: r1 = r0->field_33
    //     0xc2f630: ldur            w1, [x0, #0x33]
    // 0xc2f634: DecompressPointer r1
    //     0xc2f634: add             x1, x1, HEAP, lsl #32
    // 0xc2f638: cmp             w1, NULL
    // 0xc2f63c: b.eq            #0xc2fe38
    // 0xc2f640: LoadField: d0 = r1->field_7
    //     0xc2f640: ldur            d0, [x1, #7]
    // 0xc2f644: fsub            d2, d1, d0
    // 0xc2f648: mov             v0.16b, v2.16b
    // 0xc2f64c: LeaveFrame
    //     0xc2f64c: mov             SP, fp
    //     0xc2f650: ldp             fp, lr, [SP], #0x10
    // 0xc2f654: ret
    //     0xc2f654: ret             
    // 0xc2f658: ldr             x0, [fp, #0x18]
    // 0xc2f65c: ldr             d0, [fp, #0x10]
    // 0xc2f660: b               #0xc2f678
    // 0xc2f664: mov             x0, x1
    // 0xc2f668: b               #0xc2f678
    // 0xc2f66c: mov             x0, x1
    // 0xc2f670: b               #0xc2f678
    // 0xc2f674: mov             x0, x1
    // 0xc2f678: ldur            x1, [fp, #-8]
    // 0xc2f67c: tbnz            w1, #4, #0xc2f68c
    // 0xc2f680: d1 = inf
    //     0xc2f680: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f684: d0 = inf
    //     0xc2f684: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f688: b               #0xc2f6a8
    // 0xc2f68c: ldur            x16, [fp, #-0x18]
    // 0xc2f690: str             x16, [SP]
    // 0xc2f694: r0 = safeOffset()
    //     0xc2f694: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f698: mov             v1.16b, v0.16b
    // 0xc2f69c: d0 = inf
    //     0xc2f69c: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f6a0: fadd            d2, d0, d1
    // 0xc2f6a4: mov             v1.16b, v2.16b
    // 0xc2f6a8: fcmp            d1, d0
    // 0xc2f6ac: b.eq            #0xc2f7f0
    // 0xc2f6b0: ldr             x0, [fp, #0x18]
    // 0xc2f6b4: ldur            x1, [fp, #-8]
    // 0xc2f6b8: LoadField: r2 = r0->field_37
    //     0xc2f6b8: ldur            w2, [x0, #0x37]
    // 0xc2f6bc: DecompressPointer r2
    //     0xc2f6bc: add             x2, x2, HEAP, lsl #32
    // 0xc2f6c0: stur            x2, [fp, #-0x10]
    // 0xc2f6c4: cmp             w2, NULL
    // 0xc2f6c8: b.eq            #0xc2fe3c
    // 0xc2f6cc: tbnz            w1, #4, #0xc2f6dc
    // 0xc2f6d0: mov             x0, x2
    // 0xc2f6d4: d2 = inf
    //     0xc2f6d4: ldr             d2, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f6d8: b               #0xc2f6f8
    // 0xc2f6dc: ldur            x16, [fp, #-0x18]
    // 0xc2f6e0: str             x16, [SP]
    // 0xc2f6e4: r0 = safeOffset()
    //     0xc2f6e4: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f6e8: mov             v1.16b, v0.16b
    // 0xc2f6ec: d0 = inf
    //     0xc2f6ec: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f6f0: fadd            d2, d0, d1
    // 0xc2f6f4: ldur            x0, [fp, #-0x10]
    // 0xc2f6f8: ldr             d1, [fp, #0x10]
    // 0xc2f6fc: fsub            d3, d1, d2
    // 0xc2f700: LoadField: d2 = r0->field_7
    //     0xc2f700: ldur            d2, [x0, #7]
    // 0xc2f704: fcmp            d2, d3
    // 0xc2f708: b.vs            #0xc2f7e4
    // 0xc2f70c: b.ge            #0xc2f7e4
    // 0xc2f710: ldr             x0, [fp, #0x18]
    // 0xc2f714: ldur            x1, [fp, #-8]
    // 0xc2f718: LoadField: r2 = r0->field_37
    //     0xc2f718: ldur            w2, [x0, #0x37]
    // 0xc2f71c: DecompressPointer r2
    //     0xc2f71c: add             x2, x2, HEAP, lsl #32
    // 0xc2f720: stur            x2, [fp, #-0x10]
    // 0xc2f724: cmp             w2, NULL
    // 0xc2f728: b.eq            #0xc2fe40
    // 0xc2f72c: tbnz            w1, #4, #0xc2f740
    // 0xc2f730: mov             x0, x1
    // 0xc2f734: mov             x1, x2
    // 0xc2f738: d2 = inf
    //     0xc2f738: ldr             d2, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f73c: b               #0xc2f764
    // 0xc2f740: ldur            x16, [fp, #-0x18]
    // 0xc2f744: str             x16, [SP]
    // 0xc2f748: r0 = safeOffset()
    //     0xc2f748: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f74c: mov             v1.16b, v0.16b
    // 0xc2f750: d0 = inf
    //     0xc2f750: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f754: fadd            d2, d0, d1
    // 0xc2f758: ldr             d1, [fp, #0x10]
    // 0xc2f75c: ldur            x1, [fp, #-0x10]
    // 0xc2f760: ldur            x0, [fp, #-8]
    // 0xc2f764: LoadField: d3 = r1->field_7
    //     0xc2f764: ldur            d3, [x1, #7]
    // 0xc2f768: fadd            d4, d3, d2
    // 0xc2f76c: ldr             x16, [fp, #0x20]
    // 0xc2f770: ldr             lr, [fp, #0x18]
    // 0xc2f774: stp             lr, x16, [SP, #0x10]
    // 0xc2f778: str             d4, [SP, #8]
    // 0xc2f77c: str             d1, [SP]
    // 0xc2f780: r0 = _updateIndicatorOffset()
    //     0xc2f780: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f784: ldur            x0, [fp, #-8]
    // 0xc2f788: tbnz            w0, #4, #0xc2f794
    // 0xc2f78c: d1 = inf
    //     0xc2f78c: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f790: b               #0xc2f7b0
    // 0xc2f794: ldur            x16, [fp, #-0x18]
    // 0xc2f798: str             x16, [SP]
    // 0xc2f79c: r0 = safeOffset()
    //     0xc2f79c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2f7a0: mov             v1.16b, v0.16b
    // 0xc2f7a4: d0 = inf
    //     0xc2f7a4: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2f7a8: fadd            d2, d0, d1
    // 0xc2f7ac: mov             v1.16b, v2.16b
    // 0xc2f7b0: ldr             x0, [fp, #0x18]
    // 0xc2f7b4: ldr             d0, [fp, #0x10]
    // 0xc2f7b8: fsub            d2, d0, d1
    // 0xc2f7bc: LoadField: r1 = r0->field_37
    //     0xc2f7bc: ldur            w1, [x0, #0x37]
    // 0xc2f7c0: DecompressPointer r1
    //     0xc2f7c0: add             x1, x1, HEAP, lsl #32
    // 0xc2f7c4: cmp             w1, NULL
    // 0xc2f7c8: b.eq            #0xc2fe44
    // 0xc2f7cc: LoadField: d0 = r1->field_7
    //     0xc2f7cc: ldur            d0, [x1, #7]
    // 0xc2f7d0: fsub            d1, d2, d0
    // 0xc2f7d4: mov             v0.16b, v1.16b
    // 0xc2f7d8: LeaveFrame
    //     0xc2f7d8: mov             SP, fp
    //     0xc2f7dc: ldp             fp, lr, [SP], #0x10
    // 0xc2f7e0: ret
    //     0xc2f7e0: ret             
    // 0xc2f7e4: ldr             x0, [fp, #0x18]
    // 0xc2f7e8: mov             v0.16b, v1.16b
    // 0xc2f7ec: b               #0xc2f7f8
    // 0xc2f7f0: ldr             x0, [fp, #0x18]
    // 0xc2f7f4: ldr             d0, [fp, #0x10]
    // 0xc2f7f8: ldur            x1, [fp, #-0x18]
    // 0xc2f7fc: LoadField: r2 = r1->field_23
    //     0xc2f7fc: ldur            w2, [x1, #0x23]
    // 0xc2f800: DecompressPointer r2
    //     0xc2f800: add             x2, x2, HEAP, lsl #32
    // 0xc2f804: LoadField: r3 = r2->field_3b
    //     0xc2f804: ldur            w3, [x2, #0x3b]
    // 0xc2f808: DecompressPointer r3
    //     0xc2f808: add             x3, x3, HEAP, lsl #32
    // 0xc2f80c: tbnz            w3, #4, #0xc2f81c
    // 0xc2f810: ldr             x4, [fp, #0x20]
    // 0xc2f814: mov             v1.16b, v0.16b
    // 0xc2f818: b               #0xc2f92c
    // 0xc2f81c: LoadField: r4 = r1->field_63
    //     0xc2f81c: ldur            w4, [x1, #0x63]
    // 0xc2f820: DecompressPointer r4
    //     0xc2f820: add             x4, x4, HEAP, lsl #32
    // 0xc2f824: r16 = Instance_IndicatorMode
    //     0xc2f824: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc2f828: ldr             x16, [x16, #0x158]
    // 0xc2f82c: cmp             w4, w16
    // 0xc2f830: b.eq            #0xc2f844
    // 0xc2f834: r16 = Instance_IndicatorMode
    //     0xc2f834: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc2f838: ldr             x16, [x16, #0x160]
    // 0xc2f83c: cmp             w4, w16
    // 0xc2f840: b.ne            #0xc2f850
    // 0xc2f844: ldr             x4, [fp, #0x20]
    // 0xc2f848: mov             v1.16b, v0.16b
    // 0xc2f84c: b               #0xc2f92c
    // 0xc2f850: r16 = Instance_IndicatorMode
    //     0xc2f850: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc2f854: ldr             x16, [x16, #0x1b8]
    // 0xc2f858: cmp             w4, w16
    // 0xc2f85c: b.eq            #0xc2f924
    // 0xc2f860: LoadField: r4 = r0->field_43
    //     0xc2f860: ldur            w4, [x0, #0x43]
    // 0xc2f864: DecompressPointer r4
    //     0xc2f864: add             x4, x4, HEAP, lsl #32
    // 0xc2f868: cmp             w4, NULL
    // 0xc2f86c: b.eq            #0xc2fe48
    // 0xc2f870: LoadField: r5 = r0->field_37
    //     0xc2f870: ldur            w5, [x0, #0x37]
    // 0xc2f874: DecompressPointer r5
    //     0xc2f874: add             x5, x5, HEAP, lsl #32
    // 0xc2f878: cmp             w5, NULL
    // 0xc2f87c: b.eq            #0xc2fe4c
    // 0xc2f880: LoadField: d1 = r4->field_7
    //     0xc2f880: ldur            d1, [x4, #7]
    // 0xc2f884: LoadField: d2 = r5->field_7
    //     0xc2f884: ldur            d2, [x5, #7]
    // 0xc2f888: fcmp            d1, d2
    // 0xc2f88c: b.vs            #0xc2f89c
    // 0xc2f890: b.ge            #0xc2f89c
    // 0xc2f894: ldr             x4, [fp, #0x20]
    // 0xc2f898: b               #0xc2f8c0
    // 0xc2f89c: ldr             x4, [fp, #0x20]
    // 0xc2f8a0: LoadField: r5 = r4->field_f
    //     0xc2f8a0: ldur            w5, [x4, #0xf]
    // 0xc2f8a4: DecompressPointer r5
    //     0xc2f8a4: add             x5, x5, HEAP, lsl #32
    // 0xc2f8a8: LoadField: r6 = r5->field_27
    //     0xc2f8a8: ldur            w6, [x5, #0x27]
    // 0xc2f8ac: DecompressPointer r6
    //     0xc2f8ac: add             x6, x6, HEAP, lsl #32
    // 0xc2f8b0: tbz             w6, #4, #0xc2f91c
    // 0xc2f8b4: fcmp            d1, d2
    // 0xc2f8b8: b.vs            #0xc2f914
    // 0xc2f8bc: b.ne            #0xc2f914
    // 0xc2f8c0: fcmp            d2, d0
    // 0xc2f8c4: b.vs            #0xc2f90c
    // 0xc2f8c8: b.ge            #0xc2f90c
    // 0xc2f8cc: stp             x0, x4, [SP, #0x10]
    // 0xc2f8d0: str             d2, [SP, #8]
    // 0xc2f8d4: str             d0, [SP]
    // 0xc2f8d8: r0 = _updateIndicatorOffset()
    //     0xc2f8d8: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2f8dc: ldr             x0, [fp, #0x18]
    // 0xc2f8e0: LoadField: r1 = r0->field_37
    //     0xc2f8e0: ldur            w1, [x0, #0x37]
    // 0xc2f8e4: DecompressPointer r1
    //     0xc2f8e4: add             x1, x1, HEAP, lsl #32
    // 0xc2f8e8: cmp             w1, NULL
    // 0xc2f8ec: b.eq            #0xc2fe50
    // 0xc2f8f0: LoadField: d0 = r1->field_7
    //     0xc2f8f0: ldur            d0, [x1, #7]
    // 0xc2f8f4: ldr             d1, [fp, #0x10]
    // 0xc2f8f8: fsub            d2, d1, d0
    // 0xc2f8fc: mov             v0.16b, v2.16b
    // 0xc2f900: LeaveFrame
    //     0xc2f900: mov             SP, fp
    //     0xc2f904: ldp             fp, lr, [SP], #0x10
    // 0xc2f908: ret
    //     0xc2f908: ret             
    // 0xc2f90c: mov             v1.16b, v0.16b
    // 0xc2f910: b               #0xc2f92c
    // 0xc2f914: mov             v1.16b, v0.16b
    // 0xc2f918: b               #0xc2f92c
    // 0xc2f91c: mov             v1.16b, v0.16b
    // 0xc2f920: b               #0xc2f92c
    // 0xc2f924: ldr             x4, [fp, #0x20]
    // 0xc2f928: mov             v1.16b, v0.16b
    // 0xc2f92c: LoadField: r5 = r2->field_37
    //     0xc2f92c: ldur            w5, [x2, #0x37]
    // 0xc2f930: DecompressPointer r5
    //     0xc2f930: add             x5, x5, HEAP, lsl #32
    // 0xc2f934: cmp             w5, NULL
    // 0xc2f938: b.eq            #0xc2f984
    // 0xc2f93c: LoadField: r5 = r0->field_37
    //     0xc2f93c: ldur            w5, [x0, #0x37]
    // 0xc2f940: DecompressPointer r5
    //     0xc2f940: add             x5, x5, HEAP, lsl #32
    // 0xc2f944: cmp             w5, NULL
    // 0xc2f948: b.eq            #0xc2fe54
    // 0xc2f94c: LoadField: r6 = r0->field_33
    //     0xc2f94c: ldur            w6, [x0, #0x33]
    // 0xc2f950: DecompressPointer r6
    //     0xc2f950: add             x6, x6, HEAP, lsl #32
    // 0xc2f954: cmp             w6, NULL
    // 0xc2f958: b.eq            #0xc2fe58
    // 0xc2f95c: LoadField: d0 = r5->field_7
    //     0xc2f95c: ldur            d0, [x5, #7]
    // 0xc2f960: LoadField: d2 = r6->field_7
    //     0xc2f960: ldur            d2, [x6, #7]
    // 0xc2f964: fcmp            d0, d2
    // 0xc2f968: b.vs            #0xc2f984
    // 0xc2f96c: b.gt            #0xc2f984
    // 0xc2f970: mov             x16, x1
    // 0xc2f974: mov             x1, x0
    // 0xc2f978: mov             x0, x16
    // 0xc2f97c: mov             v0.16b, v1.16b
    // 0xc2f980: b               #0xc2fc7c
    // 0xc2f984: LoadField: r5 = r2->field_3f
    //     0xc2f984: ldur            w5, [x2, #0x3f]
    // 0xc2f988: DecompressPointer r5
    //     0xc2f988: add             x5, x5, HEAP, lsl #32
    // 0xc2f98c: tbnz            w5, #4, #0xc2f9bc
    // 0xc2f990: tbz             w3, #4, #0xc2fc6c
    // 0xc2f994: LoadField: r2 = r1->field_63
    //     0xc2f994: ldur            w2, [x1, #0x63]
    // 0xc2f998: DecompressPointer r2
    //     0xc2f998: add             x2, x2, HEAP, lsl #32
    // 0xc2f99c: r16 = Instance_IndicatorMode
    //     0xc2f99c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc2f9a0: ldr             x16, [x16, #0x158]
    // 0xc2f9a4: cmp             w2, w16
    // 0xc2f9a8: b.eq            #0xc2f9bc
    // 0xc2f9ac: r16 = Instance_IndicatorMode
    //     0xc2f9ac: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc2f9b0: ldr             x16, [x16, #0x160]
    // 0xc2f9b4: cmp             w2, w16
    // 0xc2f9b8: b.ne            #0xc2fc58
    // 0xc2f9bc: str             x1, [SP]
    // 0xc2f9c0: r0 = _canProcess()
    //     0xc2f9c0: bl              #0x684a4c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_canProcess
    // 0xc2f9c4: tbnz            w0, #4, #0xc2f9d0
    // 0xc2f9c8: ldur            x0, [fp, #-0x18]
    // 0xc2f9cc: b               #0xc2fa04
    // 0xc2f9d0: ldur            x0, [fp, #-0x18]
    // 0xc2f9d4: LoadField: r1 = r0->field_7f
    //     0xc2f9d4: ldur            w1, [x0, #0x7f]
    // 0xc2f9d8: DecompressPointer r1
    //     0xc2f9d8: add             x1, x1, HEAP, lsl #32
    // 0xc2f9dc: r16 = Instance_IndicatorResult
    //     0xc2f9dc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0xc2f9e0: ldr             x16, [x16, #0x1c0]
    // 0xc2f9e4: cmp             w1, w16
    // 0xc2f9e8: b.ne            #0xc2fc4c
    // 0xc2f9ec: LoadField: r1 = r0->field_63
    //     0xc2f9ec: ldur            w1, [x0, #0x63]
    // 0xc2f9f0: DecompressPointer r1
    //     0xc2f9f0: add             x1, x1, HEAP, lsl #32
    // 0xc2f9f4: r16 = Instance_IndicatorMode
    //     0xc2f9f4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xc2f9f8: ldr             x16, [x16, #0x1a0]
    // 0xc2f9fc: cmp             w1, w16
    // 0xc2fa00: b.ne            #0xc2fc40
    // 0xc2fa04: ldr             x1, [fp, #0x18]
    // 0xc2fa08: LoadField: r2 = r1->field_43
    //     0xc2fa08: ldur            w2, [x1, #0x43]
    // 0xc2fa0c: DecompressPointer r2
    //     0xc2fa0c: add             x2, x2, HEAP, lsl #32
    // 0xc2fa10: stur            x2, [fp, #-8]
    // 0xc2fa14: cmp             w2, NULL
    // 0xc2fa18: b.eq            #0xc2fe5c
    // 0xc2fa1c: LoadField: r3 = r0->field_23
    //     0xc2fa1c: ldur            w3, [x0, #0x23]
    // 0xc2fa20: DecompressPointer r3
    //     0xc2fa20: add             x3, x3, HEAP, lsl #32
    // 0xc2fa24: LoadField: d0 = r3->field_7
    //     0xc2fa24: ldur            d0, [x3, #7]
    // 0xc2fa28: stur            d0, [fp, #-0x30]
    // 0xc2fa2c: str             x0, [SP]
    // 0xc2fa30: r0 = safeOffset()
    //     0xc2fa30: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fa34: mov             v1.16b, v0.16b
    // 0xc2fa38: ldur            d0, [fp, #-0x30]
    // 0xc2fa3c: fadd            d2, d0, d1
    // 0xc2fa40: ldur            x0, [fp, #-8]
    // 0xc2fa44: LoadField: d0 = r0->field_7
    //     0xc2fa44: ldur            d0, [x0, #7]
    // 0xc2fa48: fsub            d1, d0, d2
    // 0xc2fa4c: ldr             x0, [fp, #0x18]
    // 0xc2fa50: LoadField: r1 = r0->field_37
    //     0xc2fa50: ldur            w1, [x0, #0x37]
    // 0xc2fa54: DecompressPointer r1
    //     0xc2fa54: add             x1, x1, HEAP, lsl #32
    // 0xc2fa58: cmp             w1, NULL
    // 0xc2fa5c: b.eq            #0xc2fe60
    // 0xc2fa60: LoadField: d0 = r1->field_7
    //     0xc2fa60: ldur            d0, [x1, #7]
    // 0xc2fa64: fcmp            d1, d0
    // 0xc2fa68: b.vs            #0xc2fa7c
    // 0xc2fa6c: b.ge            #0xc2fa7c
    // 0xc2fa70: LoadField: d0 = r1->field_7
    //     0xc2fa70: ldur            d0, [x1, #7]
    // 0xc2fa74: mov             v1.16b, v0.16b
    // 0xc2fa78: b               #0xc2fb08
    // 0xc2fa7c: ldr             x1, [fp, #0x20]
    // 0xc2fa80: LoadField: r2 = r1->field_f
    //     0xc2fa80: ldur            w2, [x1, #0xf]
    // 0xc2fa84: DecompressPointer r2
    //     0xc2fa84: add             x2, x2, HEAP, lsl #32
    // 0xc2fa88: LoadField: r3 = r2->field_27
    //     0xc2fa88: ldur            w3, [x2, #0x27]
    // 0xc2fa8c: DecompressPointer r3
    //     0xc2fa8c: add             x3, x3, HEAP, lsl #32
    // 0xc2fa90: tbz             w3, #4, #0xc2fc30
    // 0xc2fa94: ldur            x2, [fp, #-0x18]
    // 0xc2fa98: LoadField: r3 = r0->field_43
    //     0xc2fa98: ldur            w3, [x0, #0x43]
    // 0xc2fa9c: DecompressPointer r3
    //     0xc2fa9c: add             x3, x3, HEAP, lsl #32
    // 0xc2faa0: stur            x3, [fp, #-8]
    // 0xc2faa4: cmp             w3, NULL
    // 0xc2faa8: b.eq            #0xc2fe64
    // 0xc2faac: LoadField: r4 = r2->field_23
    //     0xc2faac: ldur            w4, [x2, #0x23]
    // 0xc2fab0: DecompressPointer r4
    //     0xc2fab0: add             x4, x4, HEAP, lsl #32
    // 0xc2fab4: LoadField: d0 = r4->field_7
    //     0xc2fab4: ldur            d0, [x4, #7]
    // 0xc2fab8: stur            d0, [fp, #-0x30]
    // 0xc2fabc: str             x2, [SP]
    // 0xc2fac0: r0 = safeOffset()
    //     0xc2fac0: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fac4: mov             v1.16b, v0.16b
    // 0xc2fac8: ldur            d0, [fp, #-0x30]
    // 0xc2facc: fadd            d2, d0, d1
    // 0xc2fad0: ldur            x0, [fp, #-8]
    // 0xc2fad4: LoadField: d0 = r0->field_7
    //     0xc2fad4: ldur            d0, [x0, #7]
    // 0xc2fad8: fsub            d1, d0, d2
    // 0xc2fadc: ldr             x0, [fp, #0x18]
    // 0xc2fae0: LoadField: r1 = r0->field_37
    //     0xc2fae0: ldur            w1, [x0, #0x37]
    // 0xc2fae4: DecompressPointer r1
    //     0xc2fae4: add             x1, x1, HEAP, lsl #32
    // 0xc2fae8: cmp             w1, NULL
    // 0xc2faec: b.eq            #0xc2fe68
    // 0xc2faf0: LoadField: d0 = r1->field_7
    //     0xc2faf0: ldur            d0, [x1, #7]
    // 0xc2faf4: fcmp            d1, d0
    // 0xc2faf8: b.vs            #0xc2fc20
    // 0xc2fafc: b.ne            #0xc2fc20
    // 0xc2fb00: LoadField: d0 = r1->field_7
    //     0xc2fb00: ldur            d0, [x1, #7]
    // 0xc2fb04: mov             v1.16b, v0.16b
    // 0xc2fb08: ldr             d0, [fp, #0x10]
    // 0xc2fb0c: ldur            x1, [fp, #-0x18]
    // 0xc2fb10: stur            d1, [fp, #-0x38]
    // 0xc2fb14: LoadField: r2 = r1->field_23
    //     0xc2fb14: ldur            w2, [x1, #0x23]
    // 0xc2fb18: DecompressPointer r2
    //     0xc2fb18: add             x2, x2, HEAP, lsl #32
    // 0xc2fb1c: LoadField: d2 = r2->field_7
    //     0xc2fb1c: ldur            d2, [x2, #7]
    // 0xc2fb20: stur            d2, [fp, #-0x30]
    // 0xc2fb24: str             x1, [SP]
    // 0xc2fb28: r0 = safeOffset()
    //     0xc2fb28: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fb2c: mov             v1.16b, v0.16b
    // 0xc2fb30: ldur            d0, [fp, #-0x30]
    // 0xc2fb34: fadd            d2, d0, d1
    // 0xc2fb38: ldr             d0, [fp, #0x10]
    // 0xc2fb3c: fsub            d1, d0, d2
    // 0xc2fb40: ldur            d2, [fp, #-0x38]
    // 0xc2fb44: fcmp            d2, d1
    // 0xc2fb48: b.vs            #0xc2fc14
    // 0xc2fb4c: b.ge            #0xc2fc14
    // 0xc2fb50: ldr             x0, [fp, #0x18]
    // 0xc2fb54: ldur            x1, [fp, #-0x18]
    // 0xc2fb58: LoadField: r2 = r0->field_37
    //     0xc2fb58: ldur            w2, [x0, #0x37]
    // 0xc2fb5c: DecompressPointer r2
    //     0xc2fb5c: add             x2, x2, HEAP, lsl #32
    // 0xc2fb60: stur            x2, [fp, #-8]
    // 0xc2fb64: cmp             w2, NULL
    // 0xc2fb68: b.eq            #0xc2fe6c
    // 0xc2fb6c: LoadField: r3 = r1->field_23
    //     0xc2fb6c: ldur            w3, [x1, #0x23]
    // 0xc2fb70: DecompressPointer r3
    //     0xc2fb70: add             x3, x3, HEAP, lsl #32
    // 0xc2fb74: LoadField: d1 = r3->field_7
    //     0xc2fb74: ldur            d1, [x3, #7]
    // 0xc2fb78: stur            d1, [fp, #-0x30]
    // 0xc2fb7c: str             x1, [SP]
    // 0xc2fb80: r0 = safeOffset()
    //     0xc2fb80: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fb84: mov             v1.16b, v0.16b
    // 0xc2fb88: ldur            d0, [fp, #-0x30]
    // 0xc2fb8c: fadd            d2, d0, d1
    // 0xc2fb90: ldur            x0, [fp, #-8]
    // 0xc2fb94: LoadField: d0 = r0->field_7
    //     0xc2fb94: ldur            d0, [x0, #7]
    // 0xc2fb98: fadd            d1, d0, d2
    // 0xc2fb9c: ldr             x16, [fp, #0x20]
    // 0xc2fba0: ldr             lr, [fp, #0x18]
    // 0xc2fba4: stp             lr, x16, [SP, #0x10]
    // 0xc2fba8: str             d1, [SP, #8]
    // 0xc2fbac: ldr             d0, [fp, #0x10]
    // 0xc2fbb0: str             d0, [SP]
    // 0xc2fbb4: r0 = _updateIndicatorOffset()
    //     0xc2fbb4: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2fbb8: ldur            x0, [fp, #-0x18]
    // 0xc2fbbc: LoadField: r1 = r0->field_23
    //     0xc2fbbc: ldur            w1, [x0, #0x23]
    // 0xc2fbc0: DecompressPointer r1
    //     0xc2fbc0: add             x1, x1, HEAP, lsl #32
    // 0xc2fbc4: LoadField: d0 = r1->field_7
    //     0xc2fbc4: ldur            d0, [x1, #7]
    // 0xc2fbc8: stur            d0, [fp, #-0x30]
    // 0xc2fbcc: str             x0, [SP]
    // 0xc2fbd0: r0 = safeOffset()
    //     0xc2fbd0: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fbd4: mov             v1.16b, v0.16b
    // 0xc2fbd8: ldur            d0, [fp, #-0x30]
    // 0xc2fbdc: fadd            d2, d0, d1
    // 0xc2fbe0: ldr             d0, [fp, #0x10]
    // 0xc2fbe4: fsub            d1, d0, d2
    // 0xc2fbe8: ldr             x1, [fp, #0x18]
    // 0xc2fbec: LoadField: r0 = r1->field_37
    //     0xc2fbec: ldur            w0, [x1, #0x37]
    // 0xc2fbf0: DecompressPointer r0
    //     0xc2fbf0: add             x0, x0, HEAP, lsl #32
    // 0xc2fbf4: cmp             w0, NULL
    // 0xc2fbf8: b.eq            #0xc2fe70
    // 0xc2fbfc: LoadField: d0 = r0->field_7
    //     0xc2fbfc: ldur            d0, [x0, #7]
    // 0xc2fc00: fsub            d2, d1, d0
    // 0xc2fc04: mov             v0.16b, v2.16b
    // 0xc2fc08: LeaveFrame
    //     0xc2fc08: mov             SP, fp
    //     0xc2fc0c: ldp             fp, lr, [SP], #0x10
    // 0xc2fc10: ret
    //     0xc2fc10: ret             
    // 0xc2fc14: ldr             x1, [fp, #0x18]
    // 0xc2fc18: ldur            x0, [fp, #-0x18]
    // 0xc2fc1c: b               #0xc2fc7c
    // 0xc2fc20: mov             x1, x0
    // 0xc2fc24: ldr             d0, [fp, #0x10]
    // 0xc2fc28: ldur            x0, [fp, #-0x18]
    // 0xc2fc2c: b               #0xc2fc7c
    // 0xc2fc30: mov             x1, x0
    // 0xc2fc34: ldr             d0, [fp, #0x10]
    // 0xc2fc38: ldur            x0, [fp, #-0x18]
    // 0xc2fc3c: b               #0xc2fc7c
    // 0xc2fc40: ldr             x1, [fp, #0x18]
    // 0xc2fc44: ldr             d0, [fp, #0x10]
    // 0xc2fc48: b               #0xc2fc7c
    // 0xc2fc4c: ldr             x1, [fp, #0x18]
    // 0xc2fc50: ldr             d0, [fp, #0x10]
    // 0xc2fc54: b               #0xc2fc7c
    // 0xc2fc58: mov             x16, x1
    // 0xc2fc5c: mov             x1, x0
    // 0xc2fc60: mov             x0, x16
    // 0xc2fc64: mov             v0.16b, v1.16b
    // 0xc2fc68: b               #0xc2fc7c
    // 0xc2fc6c: mov             x16, x1
    // 0xc2fc70: mov             x1, x0
    // 0xc2fc74: mov             x0, x16
    // 0xc2fc78: mov             v0.16b, v1.16b
    // 0xc2fc7c: d1 = 0.000000
    //     0xc2fc7c: eor             v1.16b, v1.16b, v1.16b
    // 0xc2fc80: LoadField: d2 = r0->field_6b
    //     0xc2fc80: ldur            d2, [x0, #0x6b]
    // 0xc2fc84: fcmp            d2, d1
    // 0xc2fc88: b.vs            #0xc2fde4
    // 0xc2fc8c: b.le            #0xc2fde4
    // 0xc2fc90: LoadField: r2 = r0->field_63
    //     0xc2fc90: ldur            w2, [x0, #0x63]
    // 0xc2fc94: DecompressPointer r2
    //     0xc2fc94: add             x2, x2, HEAP, lsl #32
    // 0xc2fc98: r16 = Instance_IndicatorMode
    //     0xc2fc98: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc2fc9c: ldr             x16, [x16, #0x1b8]
    // 0xc2fca0: cmp             w2, w16
    // 0xc2fca4: b.ne            #0xc2fddc
    // 0xc2fca8: LoadField: r2 = r0->field_23
    //     0xc2fca8: ldur            w2, [x0, #0x23]
    // 0xc2fcac: DecompressPointer r2
    //     0xc2fcac: add             x2, x2, HEAP, lsl #32
    // 0xc2fcb0: LoadField: r3 = r2->field_2b
    //     0xc2fcb0: ldur            w3, [x2, #0x2b]
    // 0xc2fcb4: DecompressPointer r3
    //     0xc2fcb4: add             x3, x3, HEAP, lsl #32
    // 0xc2fcb8: tbz             w3, #4, #0xc2fdd4
    // 0xc2fcbc: LoadField: r3 = r1->field_37
    //     0xc2fcbc: ldur            w3, [x1, #0x37]
    // 0xc2fcc0: DecompressPointer r3
    //     0xc2fcc0: add             x3, x3, HEAP, lsl #32
    // 0xc2fcc4: stur            x3, [fp, #-8]
    // 0xc2fcc8: cmp             w3, NULL
    // 0xc2fccc: b.eq            #0xc2fe74
    // 0xc2fcd0: LoadField: d2 = r2->field_7
    //     0xc2fcd0: ldur            d2, [x2, #7]
    // 0xc2fcd4: stur            d2, [fp, #-0x30]
    // 0xc2fcd8: str             x0, [SP]
    // 0xc2fcdc: r0 = safeOffset()
    //     0xc2fcdc: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fce0: mov             v1.16b, v0.16b
    // 0xc2fce4: ldur            d0, [fp, #-0x30]
    // 0xc2fce8: fadd            d2, d0, d1
    // 0xc2fcec: ldur            x0, [fp, #-8]
    // 0xc2fcf0: LoadField: d0 = r0->field_7
    //     0xc2fcf0: ldur            d0, [x0, #7]
    // 0xc2fcf4: fadd            d1, d0, d2
    // 0xc2fcf8: ldr             d0, [fp, #0x10]
    // 0xc2fcfc: fcmp            d0, d1
    // 0xc2fd00: b.vs            #0xc2fdcc
    // 0xc2fd04: b.ge            #0xc2fdcc
    // 0xc2fd08: ldr             x1, [fp, #0x18]
    // 0xc2fd0c: ldur            x0, [fp, #-0x18]
    // 0xc2fd10: LoadField: r2 = r1->field_37
    //     0xc2fd10: ldur            w2, [x1, #0x37]
    // 0xc2fd14: DecompressPointer r2
    //     0xc2fd14: add             x2, x2, HEAP, lsl #32
    // 0xc2fd18: stur            x2, [fp, #-8]
    // 0xc2fd1c: cmp             w2, NULL
    // 0xc2fd20: b.eq            #0xc2fe78
    // 0xc2fd24: LoadField: r3 = r0->field_23
    //     0xc2fd24: ldur            w3, [x0, #0x23]
    // 0xc2fd28: DecompressPointer r3
    //     0xc2fd28: add             x3, x3, HEAP, lsl #32
    // 0xc2fd2c: LoadField: d1 = r3->field_7
    //     0xc2fd2c: ldur            d1, [x3, #7]
    // 0xc2fd30: stur            d1, [fp, #-0x30]
    // 0xc2fd34: str             x0, [SP]
    // 0xc2fd38: r0 = safeOffset()
    //     0xc2fd38: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fd3c: mov             v1.16b, v0.16b
    // 0xc2fd40: ldur            d0, [fp, #-0x30]
    // 0xc2fd44: fadd            d2, d0, d1
    // 0xc2fd48: ldur            x0, [fp, #-8]
    // 0xc2fd4c: LoadField: d0 = r0->field_7
    //     0xc2fd4c: ldur            d0, [x0, #7]
    // 0xc2fd50: fadd            d1, d0, d2
    // 0xc2fd54: ldr             x16, [fp, #0x20]
    // 0xc2fd58: ldr             lr, [fp, #0x18]
    // 0xc2fd5c: stp             lr, x16, [SP, #0x10]
    // 0xc2fd60: str             d1, [SP, #8]
    // 0xc2fd64: ldr             d0, [fp, #0x10]
    // 0xc2fd68: str             d0, [SP]
    // 0xc2fd6c: r0 = _updateIndicatorOffset()
    //     0xc2fd6c: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2fd70: ldur            x0, [fp, #-0x18]
    // 0xc2fd74: LoadField: r1 = r0->field_23
    //     0xc2fd74: ldur            w1, [x0, #0x23]
    // 0xc2fd78: DecompressPointer r1
    //     0xc2fd78: add             x1, x1, HEAP, lsl #32
    // 0xc2fd7c: LoadField: d0 = r1->field_7
    //     0xc2fd7c: ldur            d0, [x1, #7]
    // 0xc2fd80: stur            d0, [fp, #-0x30]
    // 0xc2fd84: str             x0, [SP]
    // 0xc2fd88: r0 = safeOffset()
    //     0xc2fd88: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2fd8c: mov             v1.16b, v0.16b
    // 0xc2fd90: ldur            d0, [fp, #-0x30]
    // 0xc2fd94: fadd            d2, d0, d1
    // 0xc2fd98: ldr             d0, [fp, #0x10]
    // 0xc2fd9c: fsub            d1, d0, d2
    // 0xc2fda0: ldr             x0, [fp, #0x18]
    // 0xc2fda4: LoadField: r1 = r0->field_37
    //     0xc2fda4: ldur            w1, [x0, #0x37]
    // 0xc2fda8: DecompressPointer r1
    //     0xc2fda8: add             x1, x1, HEAP, lsl #32
    // 0xc2fdac: cmp             w1, NULL
    // 0xc2fdb0: b.eq            #0xc2fe7c
    // 0xc2fdb4: LoadField: d0 = r1->field_7
    //     0xc2fdb4: ldur            d0, [x1, #7]
    // 0xc2fdb8: fsub            d2, d1, d0
    // 0xc2fdbc: mov             v0.16b, v2.16b
    // 0xc2fdc0: LeaveFrame
    //     0xc2fdc0: mov             SP, fp
    //     0xc2fdc4: ldp             fp, lr, [SP], #0x10
    // 0xc2fdc8: ret
    //     0xc2fdc8: ret             
    // 0xc2fdcc: ldr             x0, [fp, #0x18]
    // 0xc2fdd0: b               #0xc2fde8
    // 0xc2fdd4: mov             x0, x1
    // 0xc2fdd8: b               #0xc2fde8
    // 0xc2fddc: mov             x0, x1
    // 0xc2fde0: b               #0xc2fde8
    // 0xc2fde4: mov             x0, x1
    // 0xc2fde8: ldr             x16, [fp, #0x20]
    // 0xc2fdec: stp             x0, x16, [SP, #0x10]
    // 0xc2fdf0: str             d0, [SP, #8]
    // 0xc2fdf4: str             d0, [SP]
    // 0xc2fdf8: r0 = _updateIndicatorOffset()
    //     0xc2fdf8: bl              #0xc2fedc  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_updateIndicatorOffset
    // 0xc2fdfc: d0 = 0.000000
    //     0xc2fdfc: eor             v0.16b, v0.16b, v0.16b
    // 0xc2fe00: LeaveFrame
    //     0xc2fe00: mov             SP, fp
    //     0xc2fe04: ldp             fp, lr, [SP], #0x10
    // 0xc2fe08: ret
    //     0xc2fe08: ret             
    // 0xc2fe0c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc2fe0c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc2fe10: b               #0xc2ee3c
    // 0xc2fe14: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe14: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe18: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe18: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe1c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe1c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe20: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe24: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe24: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe28: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe28: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe2c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe30: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe30: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe34: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe34: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe38: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe38: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe3c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe3c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe40: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe40: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe44: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe44: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe48: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe48: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe4c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe4c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe50: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe50: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe54: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe54: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe58: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe58: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe5c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe5c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe60: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe60: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe64: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc2fe64: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc2fe68: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe68: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe6c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe6c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe70: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe70: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe74: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe74: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe78: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe78: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0xc2fe7c: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fe7c: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  _ _updateIndicatorOffset(/* No info */) {
    // ** addr: 0xc2fedc, size: 0x11c
    // 0xc2fedc: EnterFrame
    //     0xc2fedc: stp             fp, lr, [SP, #-0x10]!
    //     0xc2fee0: mov             fp, SP
    // 0xc2fee4: AllocStack(0x20)
    //     0xc2fee4: sub             SP, SP, #0x20
    // 0xc2fee8: CheckStackOverflow
    //     0xc2fee8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc2feec: cmp             SP, x16
    //     0xc2fef0: b.ls            #0xc2ffec
    // 0xc2fef4: ldr             x16, [fp, #0x20]
    // 0xc2fef8: str             x16, [SP]
    // 0xc2fefc: r0 = _ScrollMetricsExtension.isNestedOuter()
    //     0xc2fefc: bl              #0x684b94  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedOuter
    // 0xc2ff00: tbnz            w0, #4, #0xc2ff8c
    // 0xc2ff04: ldr             x0, [fp, #0x28]
    // 0xc2ff08: d0 = 0.000000
    //     0xc2ff08: eor             v0.16b, v0.16b, v0.16b
    // 0xc2ff0c: LoadField: r1 = r0->field_13
    //     0xc2ff0c: ldur            w1, [x0, #0x13]
    // 0xc2ff10: DecompressPointer r1
    //     0xc2ff10: add             x1, x1, HEAP, lsl #32
    // 0xc2ff14: LoadField: d1 = r1->field_4b
    //     0xc2ff14: ldur            d1, [x1, #0x4b]
    // 0xc2ff18: fcmp            d1, d0
    // 0xc2ff1c: b.vs            #0xc2ff84
    // 0xc2ff20: b.le            #0xc2ff84
    // 0xc2ff24: ldr             x2, [fp, #0x20]
    // 0xc2ff28: ldr             d0, [fp, #0x10]
    // 0xc2ff2c: LoadField: r3 = r2->field_33
    //     0xc2ff2c: ldur            w3, [x2, #0x33]
    // 0xc2ff30: DecompressPointer r3
    //     0xc2ff30: add             x3, x3, HEAP, lsl #32
    // 0xc2ff34: cmp             w3, NULL
    // 0xc2ff38: b.eq            #0xc2fff4
    // 0xc2ff3c: LoadField: d1 = r3->field_7
    //     0xc2ff3c: ldur            d1, [x3, #7]
    // 0xc2ff40: fcmp            d0, d1
    // 0xc2ff44: b.vs            #0xc2ff94
    // 0xc2ff48: b.le            #0xc2ff94
    // 0xc2ff4c: LoadField: r3 = r1->field_63
    //     0xc2ff4c: ldur            w3, [x1, #0x63]
    // 0xc2ff50: DecompressPointer r3
    //     0xc2ff50: add             x3, x3, HEAP, lsl #32
    // 0xc2ff54: r16 = Instance_IndicatorMode
    //     0xc2ff54: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc2ff58: ldr             x16, [x16, #0x158]
    // 0xc2ff5c: cmp             w3, w16
    // 0xc2ff60: b.eq            #0xc2ff94
    // 0xc2ff64: r16 = Instance_IndicatorMode
    //     0xc2ff64: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc2ff68: ldr             x16, [x16, #0x160]
    // 0xc2ff6c: cmp             w3, w16
    // 0xc2ff70: b.eq            #0xc2ff94
    // 0xc2ff74: r0 = Null
    //     0xc2ff74: mov             x0, NULL
    // 0xc2ff78: LeaveFrame
    //     0xc2ff78: mov             SP, fp
    //     0xc2ff7c: ldp             fp, lr, [SP], #0x10
    // 0xc2ff80: ret
    //     0xc2ff80: ret             
    // 0xc2ff84: ldr             x2, [fp, #0x20]
    // 0xc2ff88: b               #0xc2ff94
    // 0xc2ff8c: ldr             x0, [fp, #0x28]
    // 0xc2ff90: ldr             x2, [fp, #0x20]
    // 0xc2ff94: ldr             d0, [fp, #0x18]
    // 0xc2ff98: LoadField: r1 = r0->field_13
    //     0xc2ff98: ldur            w1, [x0, #0x13]
    // 0xc2ff9c: DecompressPointer r1
    //     0xc2ff9c: add             x1, x1, HEAP, lsl #32
    // 0xc2ffa0: stp             x2, x1, [SP, #0x10]
    // 0xc2ffa4: str             d0, [SP, #8]
    // 0xc2ffa8: r16 = false
    //     0xc2ffa8: add             x16, NULL, #0x30  ; false
    // 0xc2ffac: str             x16, [SP]
    // 0xc2ffb0: r0 = _updateOffset()
    //     0xc2ffb0: bl              #0x683954  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset
    // 0xc2ffb4: ldr             x0, [fp, #0x28]
    // 0xc2ffb8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xc2ffb8: ldur            w1, [x0, #0x17]
    // 0xc2ffbc: DecompressPointer r1
    //     0xc2ffbc: add             x1, x1, HEAP, lsl #32
    // 0xc2ffc0: ldr             x16, [fp, #0x20]
    // 0xc2ffc4: stp             x16, x1, [SP, #0x10]
    // 0xc2ffc8: ldr             d0, [fp, #0x18]
    // 0xc2ffcc: str             d0, [SP, #8]
    // 0xc2ffd0: r16 = false
    //     0xc2ffd0: add             x16, NULL, #0x30  ; false
    // 0xc2ffd4: str             x16, [SP]
    // 0xc2ffd8: r0 = _updateOffset()
    //     0xc2ffd8: bl              #0x683954  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset
    // 0xc2ffdc: r0 = Null
    //     0xc2ffdc: mov             x0, NULL
    // 0xc2ffe0: LeaveFrame
    //     0xc2ffe0: mov             SP, fp
    //     0xc2ffe4: ldp             fp, lr, [SP], #0x10
    // 0xc2ffe8: ret
    //     0xc2ffe8: ret             
    // 0xc2ffec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc2ffec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc2fff0: b               #0xc2fef4
    // 0xc2fff4: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc2fff4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  _ createBallisticSimulation(/* No info */) {
    // ** addr: 0xc3091c, size: 0x76c
    // 0xc3091c: EnterFrame
    //     0xc3091c: stp             fp, lr, [SP, #-0x10]!
    //     0xc30920: mov             fp, SP
    // 0xc30924: AllocStack(0xb8)
    //     0xc30924: sub             SP, SP, #0xb8
    // 0xc30928: CheckStackOverflow
    //     0xc30928: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc3092c: cmp             SP, x16
    //     0xc30930: b.ls            #0xc31050
    // 0xc30934: ldr             x16, [fp, #0x20]
    // 0xc30938: ldr             lr, [fp, #0x18]
    // 0xc3093c: stp             lr, x16, [SP]
    // 0xc30940: r0 = getTolerance()
    //     0xc30940: bl              #0xc32438  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::getTolerance
    // 0xc30944: mov             x1, x0
    // 0xc30948: ldr             x0, [fp, #0x20]
    // 0xc3094c: stur            x1, [fp, #-0x10]
    // 0xc30950: LoadField: r2 = r0->field_f
    //     0xc30950: ldur            w2, [x0, #0xf]
    // 0xc30954: DecompressPointer r2
    //     0xc30954: add             x2, x2, HEAP, lsl #32
    // 0xc30958: LoadField: r3 = r2->field_27
    //     0xc30958: ldur            w3, [x2, #0x27]
    // 0xc3095c: DecompressPointer r3
    //     0xc3095c: add             x3, x3, HEAP, lsl #32
    // 0xc30960: stur            x3, [fp, #-8]
    // 0xc30964: r16 = false
    //     0xc30964: add             x16, NULL, #0x30  ; false
    // 0xc30968: stp             x16, x2, [SP]
    // 0xc3096c: r0 = value=()
    //     0xc3096c: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0xc30970: ldr             x1, [fp, #0x20]
    // 0xc30974: LoadField: r2 = r1->field_13
    //     0xc30974: ldur            w2, [x1, #0x13]
    // 0xc30978: DecompressPointer r2
    //     0xc30978: add             x2, x2, HEAP, lsl #32
    // 0xc3097c: stur            x2, [fp, #-0x18]
    // 0xc30980: LoadField: r0 = r2->field_57
    //     0xc30980: ldur            w0, [x2, #0x57]
    // 0xc30984: DecompressPointer r0
    //     0xc30984: add             x0, x0, HEAP, lsl #32
    // 0xc30988: cmp             w0, NULL
    // 0xc3098c: b.ne            #0xc309b4
    // 0xc30990: ldr             x3, [fp, #0x18]
    // 0xc30994: r0 = LoadClassIdInstr(r3)
    //     0xc30994: ldur            x0, [x3, #-1]
    //     0xc30998: ubfx            x0, x0, #0xc, #0x14
    // 0xc3099c: str             x3, [SP]
    // 0xc309a0: r0 = GDT[cid_x0 + -0xe6f]()
    //     0xc309a0: sub             lr, x0, #0xe6f
    //     0xc309a4: ldr             lr, [x21, lr, lsl #3]
    //     0xc309a8: blr             lr
    // 0xc309ac: mov             v1.16b, v0.16b
    // 0xc309b0: b               #0xc309bc
    // 0xc309b4: LoadField: d0 = r0->field_7
    //     0xc309b4: ldur            d0, [x0, #7]
    // 0xc309b8: mov             v1.16b, v0.16b
    // 0xc309bc: ldr             x0, [fp, #0x20]
    // 0xc309c0: ldr             d0, [fp, #0x10]
    // 0xc309c4: ldur            x1, [fp, #-0x18]
    // 0xc309c8: stur            d1, [fp, #-0x60]
    // 0xc309cc: ldr             x16, [fp, #0x18]
    // 0xc309d0: stp             x16, x1, [SP, #8]
    // 0xc309d4: str             d0, [SP]
    // 0xc309d8: r0 = _updateBySimulation()
    //     0xc309d8: bl              #0xc32294  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateBySimulation
    // 0xc309dc: ldr             x0, [fp, #0x20]
    // 0xc309e0: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xc309e0: ldur            w1, [x0, #0x17]
    // 0xc309e4: DecompressPointer r1
    //     0xc309e4: add             x1, x1, HEAP, lsl #32
    // 0xc309e8: stur            x1, [fp, #-0x20]
    // 0xc309ec: ldr             x16, [fp, #0x18]
    // 0xc309f0: stp             x16, x1, [SP, #8]
    // 0xc309f4: ldr             d0, [fp, #0x10]
    // 0xc309f8: str             d0, [SP]
    // 0xc309fc: r0 = _updateBySimulation()
    //     0xc309fc: bl              #0xc32294  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateBySimulation
    // 0xc30a00: ldur            x0, [fp, #-0x18]
    // 0xc30a04: LoadField: r1 = r0->field_63
    //     0xc30a04: ldur            w1, [x0, #0x63]
    // 0xc30a08: DecompressPointer r1
    //     0xc30a08: add             x1, x1, HEAP, lsl #32
    // 0xc30a0c: stur            x1, [fp, #-0x28]
    // 0xc30a10: LoadField: d0 = r0->field_4b
    //     0xc30a10: ldur            d0, [x0, #0x4b]
    // 0xc30a14: ldur            x2, [fp, #-0x20]
    // 0xc30a18: stur            d0, [fp, #-0x70]
    // 0xc30a1c: LoadField: r3 = r2->field_23
    //     0xc30a1c: ldur            w3, [x2, #0x23]
    // 0xc30a20: DecompressPointer r3
    //     0xc30a20: add             x3, x3, HEAP, lsl #32
    // 0xc30a24: LoadField: d1 = r3->field_7
    //     0xc30a24: ldur            d1, [x3, #7]
    // 0xc30a28: stur            d1, [fp, #-0x68]
    // 0xc30a2c: str             x2, [SP]
    // 0xc30a30: r0 = safeOffset()
    //     0xc30a30: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc30a34: mov             v1.16b, v0.16b
    // 0xc30a38: ldur            d0, [fp, #-0x68]
    // 0xc30a3c: fadd            d2, d0, d1
    // 0xc30a40: stur            d2, [fp, #-0x78]
    // 0xc30a44: r0 = _BallisticSimulationCreationState()
    //     0xc30a44: bl              #0xa1d380  ; Allocate_BallisticSimulationCreationStateStub -> _BallisticSimulationCreationState (size=0x1c)
    // 0xc30a48: mov             x1, x0
    // 0xc30a4c: ldur            x0, [fp, #-0x28]
    // 0xc30a50: stur            x1, [fp, #-0x38]
    // 0xc30a54: StoreField: r1->field_7 = r0
    //     0xc30a54: stur            w0, [x1, #7]
    // 0xc30a58: ldur            d0, [fp, #-0x70]
    // 0xc30a5c: StoreField: r1->field_b = d0
    //     0xc30a5c: stur            d0, [x1, #0xb]
    // 0xc30a60: ldur            d1, [fp, #-0x78]
    // 0xc30a64: StoreField: r1->field_13 = d1
    //     0xc30a64: stur            d1, [x1, #0x13]
    // 0xc30a68: ldur            x2, [fp, #-0x20]
    // 0xc30a6c: LoadField: r3 = r2->field_63
    //     0xc30a6c: ldur            w3, [x2, #0x63]
    // 0xc30a70: DecompressPointer r3
    //     0xc30a70: add             x3, x3, HEAP, lsl #32
    // 0xc30a74: stur            x3, [fp, #-0x30]
    // 0xc30a78: LoadField: d1 = r2->field_4b
    //     0xc30a78: ldur            d1, [x2, #0x4b]
    // 0xc30a7c: stur            d1, [fp, #-0x78]
    // 0xc30a80: LoadField: r4 = r2->field_23
    //     0xc30a80: ldur            w4, [x2, #0x23]
    // 0xc30a84: DecompressPointer r4
    //     0xc30a84: add             x4, x4, HEAP, lsl #32
    // 0xc30a88: LoadField: d2 = r4->field_7
    //     0xc30a88: ldur            d2, [x4, #7]
    // 0xc30a8c: stur            d2, [fp, #-0x68]
    // 0xc30a90: str             x2, [SP]
    // 0xc30a94: r0 = safeOffset()
    //     0xc30a94: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc30a98: mov             v1.16b, v0.16b
    // 0xc30a9c: ldur            d0, [fp, #-0x68]
    // 0xc30aa0: fadd            d2, d0, d1
    // 0xc30aa4: stur            d2, [fp, #-0x80]
    // 0xc30aa8: r0 = _BallisticSimulationCreationState()
    //     0xc30aa8: bl              #0xa1d380  ; Allocate_BallisticSimulationCreationStateStub -> _BallisticSimulationCreationState (size=0x1c)
    // 0xc30aac: mov             x2, x0
    // 0xc30ab0: ldur            x1, [fp, #-0x30]
    // 0xc30ab4: stur            x2, [fp, #-0x58]
    // 0xc30ab8: StoreField: r2->field_7 = r1
    //     0xc30ab8: stur            w1, [x2, #7]
    // 0xc30abc: ldur            d0, [fp, #-0x78]
    // 0xc30ac0: StoreField: r2->field_b = d0
    //     0xc30ac0: stur            d0, [x2, #0xb]
    // 0xc30ac4: ldur            d1, [fp, #-0x80]
    // 0xc30ac8: StoreField: r2->field_13 = d1
    //     0xc30ac8: stur            d1, [x2, #0x13]
    // 0xc30acc: ldur            x3, [fp, #-0x18]
    // 0xc30ad0: LoadField: r0 = r3->field_63
    //     0xc30ad0: ldur            w0, [x3, #0x63]
    // 0xc30ad4: DecompressPointer r0
    //     0xc30ad4: add             x0, x0, HEAP, lsl #32
    // 0xc30ad8: r16 = Instance_IndicatorMode
    //     0xc30ad8: add             x16, PP, #0x31, lsl #12  ; [pp+0x316d0] Obj!IndicatorMode@c45471
    //     0xc30adc: ldr             x16, [x16, #0x6d0]
    // 0xc30ae0: cmp             w0, w16
    // 0xc30ae4: b.ne            #0xc30af0
    // 0xc30ae8: r5 = true
    //     0xc30ae8: add             x5, NULL, #0x20  ; true
    // 0xc30aec: b               #0xc30b0c
    // 0xc30af0: r16 = Instance_IndicatorMode
    //     0xc30af0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0xc30af4: ldr             x16, [x16, #0x1e8]
    // 0xc30af8: cmp             w0, w16
    // 0xc30afc: r16 = true
    //     0xc30afc: add             x16, NULL, #0x20  ; true
    // 0xc30b00: r17 = false
    //     0xc30b00: add             x17, NULL, #0x30  ; false
    // 0xc30b04: csel            x4, x16, x17, eq
    // 0xc30b08: mov             x5, x4
    // 0xc30b0c: ldur            x4, [fp, #-0x20]
    // 0xc30b10: stur            x5, [fp, #-0x50]
    // 0xc30b14: LoadField: r0 = r4->field_63
    //     0xc30b14: ldur            w0, [x4, #0x63]
    // 0xc30b18: DecompressPointer r0
    //     0xc30b18: add             x0, x0, HEAP, lsl #32
    // 0xc30b1c: r16 = Instance_IndicatorMode
    //     0xc30b1c: add             x16, PP, #0x31, lsl #12  ; [pp+0x316d0] Obj!IndicatorMode@c45471
    //     0xc30b20: ldr             x16, [x16, #0x6d0]
    // 0xc30b24: cmp             w0, w16
    // 0xc30b28: b.ne            #0xc30b34
    // 0xc30b2c: r6 = true
    //     0xc30b2c: add             x6, NULL, #0x20  ; true
    // 0xc30b30: b               #0xc30b4c
    // 0xc30b34: r16 = Instance_IndicatorMode
    //     0xc30b34: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0xc30b38: ldr             x16, [x16, #0x1e8]
    // 0xc30b3c: cmp             w0, w16
    // 0xc30b40: r16 = true
    //     0xc30b40: add             x16, NULL, #0x20  ; true
    // 0xc30b44: r17 = false
    //     0xc30b44: add             x17, NULL, #0x30  ; false
    // 0xc30b48: csel            x6, x16, x17, eq
    // 0xc30b4c: stur            x6, [fp, #-0x48]
    // 0xc30b50: tbnz            w5, #4, #0xc30b5c
    // 0xc30b54: r7 = true
    //     0xc30b54: add             x7, NULL, #0x20  ; true
    // 0xc30b58: b               #0xc30b60
    // 0xc30b5c: mov             x7, x6
    // 0xc30b60: ldr             d1, [fp, #0x10]
    // 0xc30b64: d2 = 0.000000
    //     0xc30b64: eor             v2.16b, v2.16b, v2.16b
    // 0xc30b68: stur            x7, [fp, #-0x40]
    // 0xc30b6c: fcmp            d1, d2
    // 0xc30b70: b.vs            #0xc30b80
    // 0xc30b74: b.ne            #0xc30b80
    // 0xc30b78: d3 = 0.000000
    //     0xc30b78: eor             v3.16b, v3.16b, v3.16b
    // 0xc30b7c: b               #0xc30b98
    // 0xc30b80: fcmp            d1, d2
    // 0xc30b84: b.vs            #0xc30b94
    // 0xc30b88: b.ge            #0xc30b94
    // 0xc30b8c: fneg            d3, d1
    // 0xc30b90: b               #0xc30b98
    // 0xc30b94: mov             v3.16b, v1.16b
    // 0xc30b98: ldur            x8, [fp, #-0x10]
    // 0xc30b9c: ArrayLoad: d4 = r8[0]  ; List_8
    //     0xc30b9c: ldur            d4, [x8, #0x17]
    // 0xc30ba0: fcmp            d3, d4
    // 0xc30ba4: b.vs            #0xc30bbc
    // 0xc30ba8: b.lt            #0xc30bbc
    // 0xc30bac: ldr             x2, [fp, #0x20]
    // 0xc30bb0: mov             x0, x7
    // 0xc30bb4: mov             v0.16b, v2.16b
    // 0xc30bb8: b               #0xc30d54
    // 0xc30bbc: ldr             x9, [fp, #0x18]
    // 0xc30bc0: ldur            d3, [fp, #-0x60]
    // 0xc30bc4: r0 = LoadClassIdInstr(r9)
    //     0xc30bc4: ldur            x0, [x9, #-1]
    //     0xc30bc8: ubfx            x0, x0, #0xc, #0x14
    // 0xc30bcc: str             x9, [SP]
    // 0xc30bd0: r0 = GDT[cid_x0 + -0xe6f]()
    //     0xc30bd0: sub             lr, x0, #0xe6f
    //     0xc30bd4: ldr             lr, [x21, lr, lsl #3]
    //     0xc30bd8: blr             lr
    // 0xc30bdc: mov             v1.16b, v0.16b
    // 0xc30be0: ldur            d0, [fp, #-0x60]
    // 0xc30be4: fcmp            d0, d1
    // 0xc30be8: b.eq            #0xc30c28
    // 0xc30bec: ldr             x1, [fp, #0x18]
    // 0xc30bf0: r0 = LoadClassIdInstr(r1)
    //     0xc30bf0: ldur            x0, [x1, #-1]
    //     0xc30bf4: ubfx            x0, x0, #0xc, #0x14
    // 0xc30bf8: str             x1, [SP]
    // 0xc30bfc: r0 = GDT[cid_x0 + -0xe6f]()
    //     0xc30bfc: sub             lr, x0, #0xe6f
    //     0xc30c00: ldr             lr, [x21, lr, lsl #3]
    //     0xc30c04: blr             lr
    // 0xc30c08: mov             v1.16b, v0.16b
    // 0xc30c0c: d0 = 0.000000
    //     0xc30c0c: eor             v0.16b, v0.16b, v0.16b
    // 0xc30c10: fcmp            d1, d0
    // 0xc30c14: b.eq            #0xc30c2c
    // 0xc30c18: ldr             x2, [fp, #0x20]
    // 0xc30c1c: ldr             d1, [fp, #0x10]
    // 0xc30c20: ldur            x0, [fp, #-0x40]
    // 0xc30c24: b               #0xc30d54
    // 0xc30c28: d0 = 0.000000
    //     0xc30c28: eor             v0.16b, v0.16b, v0.16b
    // 0xc30c2c: ldr             x1, [fp, #0x18]
    // 0xc30c30: r0 = LoadClassIdInstr(r1)
    //     0xc30c30: ldur            x0, [x1, #-1]
    //     0xc30c34: ubfx            x0, x0, #0xc, #0x14
    // 0xc30c38: str             x1, [SP]
    // 0xc30c3c: r0 = GDT[cid_x0 + 0x780]()
    //     0xc30c3c: add             lr, x0, #0x780
    //     0xc30c40: ldr             lr, [x21, lr, lsl #3]
    //     0xc30c44: blr             lr
    // 0xc30c48: tbnz            w0, #4, #0xc30c58
    // 0xc30c4c: ldur            x0, [fp, #-0x40]
    // 0xc30c50: ldur            x1, [fp, #-8]
    // 0xc30c54: b               #0xc30c68
    // 0xc30c58: ldur            x0, [fp, #-0x40]
    // 0xc30c5c: tbnz            w0, #4, #0xc30ff0
    // 0xc30c60: ldur            x1, [fp, #-8]
    // 0xc30c64: tbnz            w1, #4, #0xc30ff0
    // 0xc30c68: tbnz            w1, #4, #0xc30c7c
    // 0xc30c6c: ldr             x2, [fp, #0x20]
    // 0xc30c70: ldr             d1, [fp, #0x10]
    // 0xc30c74: d0 = 0.000000
    //     0xc30c74: eor             v0.16b, v0.16b, v0.16b
    // 0xc30c78: b               #0xc30d54
    // 0xc30c7c: ldr             x2, [fp, #0x20]
    // 0xc30c80: ldur            x1, [fp, #-0x28]
    // 0xc30c84: LoadField: r3 = r2->field_1f
    //     0xc30c84: ldur            w3, [x2, #0x1f]
    // 0xc30c88: DecompressPointer r3
    //     0xc30c88: add             x3, x3, HEAP, lsl #32
    // 0xc30c8c: r16 = Sentinel
    //     0xc30c8c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc30c90: cmp             w3, w16
    // 0xc30c94: b.eq            #0xc31058
    // 0xc30c98: LoadField: r4 = r3->field_27
    //     0xc30c98: ldur            w4, [x3, #0x27]
    // 0xc30c9c: DecompressPointer r4
    //     0xc30c9c: add             x4, x4, HEAP, lsl #32
    // 0xc30ca0: LoadField: r3 = r4->field_7
    //     0xc30ca0: ldur            w3, [x4, #7]
    // 0xc30ca4: DecompressPointer r3
    //     0xc30ca4: add             x3, x3, HEAP, lsl #32
    // 0xc30ca8: cmp             w3, w1
    // 0xc30cac: b.ne            #0xc30ce0
    // 0xc30cb0: ldur            d0, [fp, #-0x70]
    // 0xc30cb4: LoadField: d1 = r4->field_b
    //     0xc30cb4: ldur            d1, [x4, #0xb]
    // 0xc30cb8: fcmp            d1, d0
    // 0xc30cbc: b.ne            #0xc30ce0
    // 0xc30cc0: r16 = Instance_IndicatorMode
    //     0xc30cc0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc30cc4: ldr             x16, [x16, #0x1b8]
    // 0xc30cc8: cmp             w1, w16
    // 0xc30ccc: b.ne            #0xc30cec
    // 0xc30cd0: LoadField: d1 = r4->field_13
    //     0xc30cd0: ldur            d1, [x4, #0x13]
    // 0xc30cd4: fcmp            d0, d1
    // 0xc30cd8: b.vs            #0xc30cec
    // 0xc30cdc: b.lt            #0xc30cec
    // 0xc30ce0: ldr             d1, [fp, #0x10]
    // 0xc30ce4: d0 = 0.000000
    //     0xc30ce4: eor             v0.16b, v0.16b, v0.16b
    // 0xc30ce8: b               #0xc30d54
    // 0xc30cec: ldur            x1, [fp, #-0x30]
    // 0xc30cf0: LoadField: r3 = r2->field_23
    //     0xc30cf0: ldur            w3, [x2, #0x23]
    // 0xc30cf4: DecompressPointer r3
    //     0xc30cf4: add             x3, x3, HEAP, lsl #32
    // 0xc30cf8: r16 = Sentinel
    //     0xc30cf8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc30cfc: cmp             w3, w16
    // 0xc30d00: b.eq            #0xc31064
    // 0xc30d04: LoadField: r4 = r3->field_27
    //     0xc30d04: ldur            w4, [x3, #0x27]
    // 0xc30d08: DecompressPointer r4
    //     0xc30d08: add             x4, x4, HEAP, lsl #32
    // 0xc30d0c: LoadField: r3 = r4->field_7
    //     0xc30d0c: ldur            w3, [x4, #7]
    // 0xc30d10: DecompressPointer r3
    //     0xc30d10: add             x3, x3, HEAP, lsl #32
    // 0xc30d14: cmp             w3, w1
    // 0xc30d18: b.ne            #0xc30d4c
    // 0xc30d1c: ldur            d0, [fp, #-0x78]
    // 0xc30d20: LoadField: d1 = r4->field_b
    //     0xc30d20: ldur            d1, [x4, #0xb]
    // 0xc30d24: fcmp            d1, d0
    // 0xc30d28: b.ne            #0xc30d4c
    // 0xc30d2c: r16 = Instance_IndicatorMode
    //     0xc30d2c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc30d30: ldr             x16, [x16, #0x1b8]
    // 0xc30d34: cmp             w1, w16
    // 0xc30d38: b.ne            #0xc30ff0
    // 0xc30d3c: LoadField: d1 = r4->field_13
    //     0xc30d3c: ldur            d1, [x4, #0x13]
    // 0xc30d40: fcmp            d0, d1
    // 0xc30d44: b.vs            #0xc30ff0
    // 0xc30d48: b.lt            #0xc30ff0
    // 0xc30d4c: ldr             d1, [fp, #0x10]
    // 0xc30d50: d0 = 0.000000
    //     0xc30d50: eor             v0.16b, v0.16b, v0.16b
    // 0xc30d54: fcmp            d1, d0
    // 0xc30d58: b.vs            #0xc30db8
    // 0xc30d5c: b.ge            #0xc30db8
    // 0xc30d60: ldur            x16, [fp, #-0x18]
    // 0xc30d64: str             x16, [SP]
    // 0xc30d68: r0 = actualMaxOverOffset()
    //     0xc30d68: bl              #0xc2fe80  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::actualMaxOverOffset
    // 0xc30d6c: mov             v1.16b, v0.16b
    // 0xc30d70: d0 = inf
    //     0xc30d70: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc30d74: fcmp            d1, d0
    // 0xc30d78: b.eq            #0xc30db8
    // 0xc30d7c: ldur            x0, [fp, #-0x18]
    // 0xc30d80: d1 = 0.000000
    //     0xc30d80: eor             v1.16b, v1.16b, v1.16b
    // 0xc30d84: LoadField: d2 = r0->field_4b
    //     0xc30d84: ldur            d2, [x0, #0x4b]
    // 0xc30d88: stur            d2, [fp, #-0x60]
    // 0xc30d8c: fcmp            d2, d1
    // 0xc30d90: b.eq            #0xc30db8
    // 0xc30d94: str             x0, [SP]
    // 0xc30d98: r0 = actualMaxOverOffset()
    //     0xc30d98: bl              #0xc2fe80  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::actualMaxOverOffset
    // 0xc30d9c: mov             v1.16b, v0.16b
    // 0xc30da0: ldur            d0, [fp, #-0x60]
    // 0xc30da4: fcmp            d0, d1
    // 0xc30da8: b.vs            #0xc30db8
    // 0xc30dac: b.lt            #0xc30db8
    // 0xc30db0: d0 = 0.000000
    //     0xc30db0: eor             v0.16b, v0.16b, v0.16b
    // 0xc30db4: b               #0xc30e28
    // 0xc30db8: ldr             d1, [fp, #0x10]
    // 0xc30dbc: d0 = 0.000000
    //     0xc30dbc: eor             v0.16b, v0.16b, v0.16b
    // 0xc30dc0: fcmp            d1, d0
    // 0xc30dc4: b.vs            #0xc30e24
    // 0xc30dc8: b.le            #0xc30e24
    // 0xc30dcc: ldur            x16, [fp, #-0x20]
    // 0xc30dd0: str             x16, [SP]
    // 0xc30dd4: r0 = actualMaxOverOffset()
    //     0xc30dd4: bl              #0xc2fe80  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::actualMaxOverOffset
    // 0xc30dd8: mov             v1.16b, v0.16b
    // 0xc30ddc: d0 = inf
    //     0xc30ddc: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc30de0: fcmp            d1, d0
    // 0xc30de4: b.eq            #0xc30e24
    // 0xc30de8: ldur            x0, [fp, #-0x20]
    // 0xc30dec: d0 = 0.000000
    //     0xc30dec: eor             v0.16b, v0.16b, v0.16b
    // 0xc30df0: LoadField: d1 = r0->field_4b
    //     0xc30df0: ldur            d1, [x0, #0x4b]
    // 0xc30df4: stur            d1, [fp, #-0x60]
    // 0xc30df8: fcmp            d1, d0
    // 0xc30dfc: b.eq            #0xc30e24
    // 0xc30e00: str             x0, [SP]
    // 0xc30e04: r0 = actualMaxOverOffset()
    //     0xc30e04: bl              #0xc2fe80  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::actualMaxOverOffset
    // 0xc30e08: mov             v1.16b, v0.16b
    // 0xc30e0c: ldur            d0, [fp, #-0x60]
    // 0xc30e10: fcmp            d0, d1
    // 0xc30e14: b.vs            #0xc30e24
    // 0xc30e18: b.lt            #0xc30e24
    // 0xc30e1c: d0 = 0.000000
    //     0xc30e1c: eor             v0.16b, v0.16b, v0.16b
    // 0xc30e20: b               #0xc30e28
    // 0xc30e24: ldr             d0, [fp, #0x10]
    // 0xc30e28: ldur            x0, [fp, #-0x40]
    // 0xc30e2c: stur            d0, [fp, #-0x68]
    // 0xc30e30: tbnz            w0, #4, #0xc30ef0
    // 0xc30e34: ldur            x0, [fp, #-0x50]
    // 0xc30e38: tbnz            w0, #4, #0xc30e90
    // 0xc30e3c: ldur            x0, [fp, #-0x18]
    // 0xc30e40: LoadField: d1 = r0->field_4b
    //     0xc30e40: ldur            d1, [x0, #0x4b]
    // 0xc30e44: stur            d1, [fp, #-0x60]
    // 0xc30e48: str             x0, [SP]
    // 0xc30e4c: r0 = viewportDimension()
    //     0xc30e4c: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc30e50: mov             v1.16b, v0.16b
    // 0xc30e54: ldur            d0, [fp, #-0x60]
    // 0xc30e58: fcmp            d0, d1
    // 0xc30e5c: b.vs            #0xc30e6c
    // 0xc30e60: b.ne            #0xc30e6c
    // 0xc30e64: d0 = 0.000000
    //     0xc30e64: eor             v0.16b, v0.16b, v0.16b
    // 0xc30e68: b               #0xc30ef0
    // 0xc30e6c: ldur            d0, [fp, #-0x68]
    // 0xc30e70: d1 = 3000.000000
    //     0xc30e70: add             x17, PP, #0x2a, lsl #12  ; [pp+0x2a0d8] IMM: double(3000) from 0x40a7700000000000
    //     0xc30e74: ldr             d1, [x17, #0xd8]
    // 0xc30e78: fneg            d2, d1
    // 0xc30e7c: fcmp            d0, d2
    // 0xc30e80: b.vs            #0xc30ef0
    // 0xc30e84: b.le            #0xc30ef0
    // 0xc30e88: mov             v0.16b, v2.16b
    // 0xc30e8c: b               #0xc30ef0
    // 0xc30e90: ldur            x0, [fp, #-0x48]
    // 0xc30e94: d1 = 3000.000000
    //     0xc30e94: add             x17, PP, #0x2a, lsl #12  ; [pp+0x2a0d8] IMM: double(3000) from 0x40a7700000000000
    //     0xc30e98: ldr             d1, [x17, #0xd8]
    // 0xc30e9c: tbnz            w0, #4, #0xc30ef0
    // 0xc30ea0: ldur            x0, [fp, #-0x20]
    // 0xc30ea4: LoadField: d2 = r0->field_4b
    //     0xc30ea4: ldur            d2, [x0, #0x4b]
    // 0xc30ea8: stur            d2, [fp, #-0x60]
    // 0xc30eac: str             x0, [SP]
    // 0xc30eb0: r0 = viewportDimension()
    //     0xc30eb0: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc30eb4: mov             v1.16b, v0.16b
    // 0xc30eb8: ldur            d0, [fp, #-0x60]
    // 0xc30ebc: fcmp            d0, d1
    // 0xc30ec0: b.vs            #0xc30ed0
    // 0xc30ec4: b.ne            #0xc30ed0
    // 0xc30ec8: d0 = 0.000000
    //     0xc30ec8: eor             v0.16b, v0.16b, v0.16b
    // 0xc30ecc: b               #0xc30ef0
    // 0xc30ed0: ldur            d0, [fp, #-0x68]
    // 0xc30ed4: d1 = 3000.000000
    //     0xc30ed4: add             x17, PP, #0x2a, lsl #12  ; [pp+0x2a0d8] IMM: double(3000) from 0x40a7700000000000
    //     0xc30ed8: ldr             d1, [x17, #0xd8]
    // 0xc30edc: fcmp            d0, d1
    // 0xc30ee0: b.vs            #0xc30ef0
    // 0xc30ee4: b.ge            #0xc30ef0
    // 0xc30ee8: d0 = 3000.000000
    //     0xc30ee8: add             x17, PP, #0x2a, lsl #12  ; [pp+0x2a0d8] IMM: double(3000) from 0x40a7700000000000
    //     0xc30eec: ldr             d0, [x17, #0xd8]
    // 0xc30ef0: ldr             x0, [fp, #0x18]
    // 0xc30ef4: stur            d0, [fp, #-0x60]
    // 0xc30ef8: ldr             x16, [fp, #0x20]
    // 0xc30efc: str             x16, [SP]
    // 0xc30f00: r0 = spring()
    //     0xc30f00: bl              #0xb18398  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::spring
    // 0xc30f04: mov             x2, x0
    // 0xc30f08: ldr             x1, [fp, #0x18]
    // 0xc30f0c: stur            x2, [fp, #-8]
    // 0xc30f10: r0 = LoadClassIdInstr(r1)
    //     0xc30f10: ldur            x0, [x1, #-1]
    //     0xc30f14: ubfx            x0, x0, #0xc, #0x14
    // 0xc30f18: str             x1, [SP]
    // 0xc30f1c: r0 = GDT[cid_x0 + -0xfef]()
    //     0xc30f1c: sub             lr, x0, #0xfef
    //     0xc30f20: ldr             lr, [x21, lr, lsl #3]
    //     0xc30f24: blr             lr
    // 0xc30f28: ldr             x1, [fp, #0x18]
    // 0xc30f2c: stur            d0, [fp, #-0x68]
    // 0xc30f30: r0 = LoadClassIdInstr(r1)
    //     0xc30f30: ldur            x0, [x1, #-1]
    //     0xc30f34: ubfx            x0, x0, #0xc, #0x14
    // 0xc30f38: str             x1, [SP]
    // 0xc30f3c: r0 = GDT[cid_x0 + -0x8a5]()
    //     0xc30f3c: sub             lr, x0, #0x8a5
    //     0xc30f40: ldr             lr, [x21, lr, lsl #3]
    //     0xc30f44: blr             lr
    // 0xc30f48: stur            d0, [fp, #-0x70]
    // 0xc30f4c: ldur            x16, [fp, #-0x18]
    // 0xc30f50: str             x16, [SP]
    // 0xc30f54: r0 = overExtent()
    //     0xc30f54: bl              #0xc320ac  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::overExtent
    // 0xc30f58: mov             v1.16b, v0.16b
    // 0xc30f5c: ldur            d0, [fp, #-0x70]
    // 0xc30f60: fsub            d2, d0, d1
    // 0xc30f64: ldr             x0, [fp, #0x18]
    // 0xc30f68: stur            d2, [fp, #-0x78]
    // 0xc30f6c: r1 = LoadClassIdInstr(r0)
    //     0xc30f6c: ldur            x1, [x0, #-1]
    //     0xc30f70: ubfx            x1, x1, #0xc, #0x14
    // 0xc30f74: str             x0, [SP]
    // 0xc30f78: mov             x0, x1
    // 0xc30f7c: r0 = GDT[cid_x0 + -0xe6f]()
    //     0xc30f7c: sub             lr, x0, #0xe6f
    //     0xc30f80: ldr             lr, [x21, lr, lsl #3]
    //     0xc30f84: blr             lr
    // 0xc30f88: stur            d0, [fp, #-0x70]
    // 0xc30f8c: ldur            x16, [fp, #-0x20]
    // 0xc30f90: str             x16, [SP]
    // 0xc30f94: r0 = overExtent()
    //     0xc30f94: bl              #0xc31fcc  ; [package:easy_refresh/easy_refresh.dart] FooterNotifier::overExtent
    // 0xc30f98: mov             v1.16b, v0.16b
    // 0xc30f9c: ldur            d0, [fp, #-0x70]
    // 0xc30fa0: fadd            d2, d0, d1
    // 0xc30fa4: stur            d2, [fp, #-0x80]
    // 0xc30fa8: r0 = BouncingScrollSimulation()
    //     0xc30fa8: bl              #0xc31fc0  ; AllocateBouncingScrollSimulationStub -> BouncingScrollSimulation (size=0x34)
    // 0xc30fac: stur            x0, [fp, #-0x18]
    // 0xc30fb0: str             x0, [SP, #0x30]
    // 0xc30fb4: ldur            d0, [fp, #-0x78]
    // 0xc30fb8: str             d0, [SP, #0x28]
    // 0xc30fbc: ldur            d0, [fp, #-0x68]
    // 0xc30fc0: str             d0, [SP, #0x20]
    // 0xc30fc4: ldur            x16, [fp, #-8]
    // 0xc30fc8: ldur            lr, [fp, #-0x10]
    // 0xc30fcc: stp             lr, x16, [SP, #0x10]
    // 0xc30fd0: ldur            d0, [fp, #-0x80]
    // 0xc30fd4: str             d0, [SP, #8]
    // 0xc30fd8: ldur            d0, [fp, #-0x60]
    // 0xc30fdc: str             d0, [SP]
    // 0xc30fe0: r4 = const [0, 0x7, 0x7, 0x7, null]
    //     0xc30fe0: ldr             x4, [PP, #0x1038]  ; [pp+0x1038] List(5) [0, 0x7, 0x7, 0x7, Null]
    // 0xc30fe4: r0 = BouncingScrollSimulation()
    //     0xc30fe4: bl              #0xc31088  ; [package:flutter/src/widgets/scroll_simulation.dart] BouncingScrollSimulation::BouncingScrollSimulation
    // 0xc30fe8: ldur            x1, [fp, #-0x18]
    // 0xc30fec: b               #0xc30ff4
    // 0xc30ff0: r1 = Null
    //     0xc30ff0: mov             x1, NULL
    // 0xc30ff4: ldr             x0, [fp, #0x20]
    // 0xc30ff8: stur            x1, [fp, #-8]
    // 0xc30ffc: LoadField: r2 = r0->field_1f
    //     0xc30ffc: ldur            w2, [x0, #0x1f]
    // 0xc31000: DecompressPointer r2
    //     0xc31000: add             x2, x2, HEAP, lsl #32
    // 0xc31004: r16 = Sentinel
    //     0xc31004: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc31008: cmp             w2, w16
    // 0xc3100c: b.eq            #0xc31070
    // 0xc31010: ldur            x16, [fp, #-0x38]
    // 0xc31014: stp             x16, x2, [SP]
    // 0xc31018: r0 = value=()
    //     0xc31018: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0xc3101c: ldr             x0, [fp, #0x20]
    // 0xc31020: LoadField: r1 = r0->field_23
    //     0xc31020: ldur            w1, [x0, #0x23]
    // 0xc31024: DecompressPointer r1
    //     0xc31024: add             x1, x1, HEAP, lsl #32
    // 0xc31028: r16 = Sentinel
    //     0xc31028: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xc3102c: cmp             w1, w16
    // 0xc31030: b.eq            #0xc3107c
    // 0xc31034: ldur            x16, [fp, #-0x58]
    // 0xc31038: stp             x16, x1, [SP]
    // 0xc3103c: r0 = value=()
    //     0xc3103c: bl              #0x5b5c30  ; [package:flutter/src/foundation/change_notifier.dart] ValueNotifier::value=
    // 0xc31040: ldur            x0, [fp, #-8]
    // 0xc31044: LeaveFrame
    //     0xc31044: mov             SP, fp
    //     0xc31048: ldp             fp, lr, [SP], #0x10
    // 0xc3104c: ret
    //     0xc3104c: ret             
    // 0xc31050: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc31050: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc31054: b               #0xc30934
    // 0xc31058: r9 = _headerSimulationCreationState
    //     0xc31058: add             x9, PP, #0x31, lsl #12  ; [pp+0x316d8] Field <_ERScrollPhysics@765089737._headerSimulationCreationState@765089737>: late final (offset: 0x20)
    //     0xc3105c: ldr             x9, [x9, #0x6d8]
    // 0xc31060: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xc31060: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xc31064: r9 = _footerSimulationCreationState
    //     0xc31064: add             x9, PP, #0x31, lsl #12  ; [pp+0x316e0] Field <_ERScrollPhysics@765089737._footerSimulationCreationState@765089737>: late final (offset: 0x24)
    //     0xc31068: ldr             x9, [x9, #0x6e0]
    // 0xc3106c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xc3106c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xc31070: r9 = _headerSimulationCreationState
    //     0xc31070: add             x9, PP, #0x31, lsl #12  ; [pp+0x316d8] Field <_ERScrollPhysics@765089737._headerSimulationCreationState@765089737>: late final (offset: 0x20)
    //     0xc31074: ldr             x9, [x9, #0x6d8]
    // 0xc31078: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xc31078: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xc3107c: r9 = _footerSimulationCreationState
    //     0xc3107c: add             x9, PP, #0x31, lsl #12  ; [pp+0x316e0] Field <_ERScrollPhysics@765089737._footerSimulationCreationState@765089737>: late final (offset: 0x24)
    //     0xc31080: ldr             x9, [x9, #0x6e0]
    // 0xc31084: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xc31084: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ getTolerance(/* No info */) {
    // ** addr: 0xc32438, size: 0x58
    // 0xc32438: EnterFrame
    //     0xc32438: stp             fp, lr, [SP, #-0x10]!
    //     0xc3243c: mov             fp, SP
    // 0xc32440: AllocStack(0x40)
    //     0xc32440: sub             SP, SP, #0x40
    // 0xc32444: CheckStackOverflow
    //     0xc32444: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc32448: cmp             SP, x16
    //     0xc3244c: b.ls            #0xc32488
    // 0xc32450: ldr             x16, [fp, #0x18]
    // 0xc32454: ldr             lr, [fp, #0x10]
    // 0xc32458: stp             lr, x16, [SP]
    // 0xc3245c: r0 = toleranceFor()
    //     0xc3245c: bl              #0xbc30c8  ; [package:flutter/src/widgets/scroll_physics.dart] ScrollPhysics::toleranceFor
    // 0xc32460: LeaveFrame
    //     0xc32460: mov             SP, fp
    //     0xc32464: ldp             fp, lr, [SP], #0x10
    // 0xc32468: ret
    //     0xc32468: ret             
    // 0xc3246c: sub             SP, fp, #0x40
    // 0xc32470: ldr             x16, [fp, #0x18]
    // 0xc32474: str             x16, [SP]
    // 0xc32478: r0 = tolerance()
    //     0xc32478: bl              #0xc32490  ; [package:flutter/src/widgets/scroll_physics.dart] ScrollPhysics::tolerance
    // 0xc3247c: LeaveFrame
    //     0xc3247c: mov             SP, fp
    //     0xc32480: ldp             fp, lr, [SP], #0x10
    // 0xc32484: ret
    //     0xc32484: ret             
    // 0xc32488: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc32488: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc3248c: b               #0xc32450
  }
}

// class id: 3263, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __CupertinoActivityIndicatorState&State&SingleTickerProviderStateMixin extends State<dynamic>
     with SingleTickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x553c90, size: 0x94
    // 0x553c90: EnterFrame
    //     0x553c90: stp             fp, lr, [SP, #-0x10]!
    //     0x553c94: mov             fp, SP
    // 0x553c98: AllocStack(0x8)
    //     0x553c98: sub             SP, SP, #8
    // 0x553c9c: CheckStackOverflow
    //     0x553c9c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553ca0: cmp             SP, x16
    //     0x553ca4: b.ls            #0x553d18
    // 0x553ca8: r0 = Ticker()
    //     0x553ca8: bl              #0x54ed48  ; AllocateTickerStub -> Ticker (size=0x1c)
    // 0x553cac: mov             x1, x0
    // 0x553cb0: r0 = false
    //     0x553cb0: add             x0, NULL, #0x30  ; false
    // 0x553cb4: StoreField: r1->field_b = r0
    //     0x553cb4: stur            w0, [x1, #0xb]
    // 0x553cb8: ldr             x0, [fp, #0x10]
    // 0x553cbc: StoreField: r1->field_13 = r0
    //     0x553cbc: stur            w0, [x1, #0x13]
    // 0x553cc0: mov             x0, x1
    // 0x553cc4: ldr             x1, [fp, #0x18]
    // 0x553cc8: StoreField: r1->field_13 = r0
    //     0x553cc8: stur            w0, [x1, #0x13]
    //     0x553ccc: ldurb           w16, [x1, #-1]
    //     0x553cd0: ldurb           w17, [x0, #-1]
    //     0x553cd4: and             x16, x17, x16, lsr #2
    //     0x553cd8: tst             x16, HEAP, lsr #32
    //     0x553cdc: b.eq            #0x553ce4
    //     0x553ce0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553ce4: str             x1, [SP]
    // 0x553ce8: r0 = _updateTickerModeNotifier()
    //     0x553ce8: bl              #0x553d48  ; [package:easy_refresh/easy_refresh.dart] __CupertinoActivityIndicatorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x553cec: ldr             x16, [fp, #0x18]
    // 0x553cf0: str             x16, [SP]
    // 0x553cf4: r0 = _updateTicker()
    //     0x553cf4: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x553cf8: ldr             x1, [fp, #0x18]
    // 0x553cfc: LoadField: r0 = r1->field_13
    //     0x553cfc: ldur            w0, [x1, #0x13]
    // 0x553d00: DecompressPointer r0
    //     0x553d00: add             x0, x0, HEAP, lsl #32
    // 0x553d04: cmp             w0, NULL
    // 0x553d08: b.eq            #0x553d20
    // 0x553d0c: LeaveFrame
    //     0x553d0c: mov             SP, fp
    //     0x553d10: ldp             fp, lr, [SP], #0x10
    // 0x553d14: ret
    //     0x553d14: ret             
    // 0x553d18: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553d18: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553d1c: b               #0x553ca8
    // 0x553d20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553d20: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x553d48, size: 0x148
    // 0x553d48: EnterFrame
    //     0x553d48: stp             fp, lr, [SP, #-0x10]!
    //     0x553d4c: mov             fp, SP
    // 0x553d50: AllocStack(0x20)
    //     0x553d50: sub             SP, SP, #0x20
    // 0x553d54: CheckStackOverflow
    //     0x553d54: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553d58: cmp             SP, x16
    //     0x553d5c: b.ls            #0x553e84
    // 0x553d60: ldr             x0, [fp, #0x10]
    // 0x553d64: LoadField: r1 = r0->field_f
    //     0x553d64: ldur            w1, [x0, #0xf]
    // 0x553d68: DecompressPointer r1
    //     0x553d68: add             x1, x1, HEAP, lsl #32
    // 0x553d6c: cmp             w1, NULL
    // 0x553d70: b.eq            #0x553e8c
    // 0x553d74: str             x1, [SP]
    // 0x553d78: r0 = getNotifier()
    //     0x553d78: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x553d7c: mov             x1, x0
    // 0x553d80: ldr             x0, [fp, #0x10]
    // 0x553d84: stur            x1, [fp, #-0x10]
    // 0x553d88: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x553d88: ldur            w2, [x0, #0x17]
    // 0x553d8c: DecompressPointer r2
    //     0x553d8c: add             x2, x2, HEAP, lsl #32
    // 0x553d90: stur            x2, [fp, #-8]
    // 0x553d94: cmp             w1, w2
    // 0x553d98: b.ne            #0x553dac
    // 0x553d9c: r0 = Null
    //     0x553d9c: mov             x0, NULL
    // 0x553da0: LeaveFrame
    //     0x553da0: mov             SP, fp
    //     0x553da4: ldp             fp, lr, [SP], #0x10
    // 0x553da8: ret
    //     0x553da8: ret             
    // 0x553dac: cmp             w2, NULL
    // 0x553db0: b.eq            #0x553e08
    // 0x553db4: r1 = 1
    //     0x553db4: movz            x1, #0x1
    // 0x553db8: r0 = AllocateContext()
    //     0x553db8: bl              #0xc5def4  ; AllocateContextStub
    // 0x553dbc: mov             x1, x0
    // 0x553dc0: ldr             x0, [fp, #0x10]
    // 0x553dc4: StoreField: r1->field_f = r0
    //     0x553dc4: stur            w0, [x1, #0xf]
    // 0x553dc8: mov             x2, x1
    // 0x553dcc: r1 = Function '_updateTicker@328311458':.
    //     0x553dcc: add             x1, PP, #0x4b, lsl #12  ; [pp+0x4be50] AnonymousClosure: (0x553e90), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x553dd0: ldr             x1, [x1, #0xe50]
    // 0x553dd4: r0 = AllocateClosure()
    //     0x553dd4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x553dd8: mov             x1, x0
    // 0x553ddc: ldur            x0, [fp, #-8]
    // 0x553de0: r2 = LoadClassIdInstr(r0)
    //     0x553de0: ldur            x2, [x0, #-1]
    //     0x553de4: ubfx            x2, x2, #0xc, #0x14
    // 0x553de8: stp             x1, x0, [SP]
    // 0x553dec: mov             x0, x2
    // 0x553df0: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x553df0: movz            x17, #0xc9d0
    //     0x553df4: add             lr, x0, x17
    //     0x553df8: ldr             lr, [x21, lr, lsl #3]
    //     0x553dfc: blr             lr
    // 0x553e00: ldr             x0, [fp, #0x10]
    // 0x553e04: ldur            x1, [fp, #-0x10]
    // 0x553e08: r1 = 1
    //     0x553e08: movz            x1, #0x1
    // 0x553e0c: r0 = AllocateContext()
    //     0x553e0c: bl              #0xc5def4  ; AllocateContextStub
    // 0x553e10: mov             x1, x0
    // 0x553e14: ldr             x0, [fp, #0x10]
    // 0x553e18: StoreField: r1->field_f = r0
    //     0x553e18: stur            w0, [x1, #0xf]
    // 0x553e1c: mov             x2, x1
    // 0x553e20: r1 = Function '_updateTicker@328311458':.
    //     0x553e20: add             x1, PP, #0x4b, lsl #12  ; [pp+0x4be50] AnonymousClosure: (0x553e90), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x553e24: ldr             x1, [x1, #0xe50]
    // 0x553e28: r0 = AllocateClosure()
    //     0x553e28: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x553e2c: ldur            x1, [fp, #-0x10]
    // 0x553e30: r2 = LoadClassIdInstr(r1)
    //     0x553e30: ldur            x2, [x1, #-1]
    //     0x553e34: ubfx            x2, x2, #0xc, #0x14
    // 0x553e38: stp             x0, x1, [SP]
    // 0x553e3c: mov             x0, x2
    // 0x553e40: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x553e40: movz            x17, #0xcefc
    //     0x553e44: add             lr, x0, x17
    //     0x553e48: ldr             lr, [x21, lr, lsl #3]
    //     0x553e4c: blr             lr
    // 0x553e50: ldur            x0, [fp, #-0x10]
    // 0x553e54: ldr             x1, [fp, #0x10]
    // 0x553e58: ArrayStore: r1[0] = r0  ; List_4
    //     0x553e58: stur            w0, [x1, #0x17]
    //     0x553e5c: ldurb           w16, [x1, #-1]
    //     0x553e60: ldurb           w17, [x0, #-1]
    //     0x553e64: and             x16, x17, x16, lsr #2
    //     0x553e68: tst             x16, HEAP, lsr #32
    //     0x553e6c: b.eq            #0x553e74
    //     0x553e70: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553e74: r0 = Null
    //     0x553e74: mov             x0, NULL
    // 0x553e78: LeaveFrame
    //     0x553e78: mov             SP, fp
    //     0x553e7c: ldp             fp, lr, [SP], #0x10
    // 0x553e80: ret
    //     0x553e80: ret             
    // 0x553e84: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553e84: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553e88: b               #0x553d60
    // 0x553e8c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553e8c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTicker(dynamic) {
    // ** addr: 0x553e90, size: 0x48
    // 0x553e90: EnterFrame
    //     0x553e90: stp             fp, lr, [SP, #-0x10]!
    //     0x553e94: mov             fp, SP
    // 0x553e98: AllocStack(0x8)
    //     0x553e98: sub             SP, SP, #8
    // 0x553e9c: SetupParameters()
    //     0x553e9c: ldr             x0, [fp, #0x10]
    //     0x553ea0: ldur            w1, [x0, #0x17]
    //     0x553ea4: add             x1, x1, HEAP, lsl #32
    // 0x553ea8: CheckStackOverflow
    //     0x553ea8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553eac: cmp             SP, x16
    //     0x553eb0: b.ls            #0x553ed0
    // 0x553eb4: LoadField: r0 = r1->field_f
    //     0x553eb4: ldur            w0, [x1, #0xf]
    // 0x553eb8: DecompressPointer r0
    //     0x553eb8: add             x0, x0, HEAP, lsl #32
    // 0x553ebc: str             x0, [SP]
    // 0x553ec0: r0 = _updateTicker()
    //     0x553ec0: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x553ec4: LeaveFrame
    //     0x553ec4: mov             SP, fp
    //     0x553ec8: ldp             fp, lr, [SP], #0x10
    // 0x553ecc: ret
    //     0x553ecc: ret             
    // 0x553ed0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553ed0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553ed4: b               #0x553eb4
  }
  _ activate(/* No info */) {
    // ** addr: 0x8c9e00, size: 0x48
    // 0x8c9e00: EnterFrame
    //     0x8c9e00: stp             fp, lr, [SP, #-0x10]!
    //     0x8c9e04: mov             fp, SP
    // 0x8c9e08: AllocStack(0x8)
    //     0x8c9e08: sub             SP, SP, #8
    // 0x8c9e0c: CheckStackOverflow
    //     0x8c9e0c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c9e10: cmp             SP, x16
    //     0x8c9e14: b.ls            #0x8c9e40
    // 0x8c9e18: ldr             x16, [fp, #0x10]
    // 0x8c9e1c: str             x16, [SP]
    // 0x8c9e20: r0 = _updateTickerModeNotifier()
    //     0x8c9e20: bl              #0x553d48  ; [package:easy_refresh/easy_refresh.dart] __CupertinoActivityIndicatorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8c9e24: ldr             x16, [fp, #0x10]
    // 0x8c9e28: str             x16, [SP]
    // 0x8c9e2c: r0 = _updateTicker()
    //     0x8c9e2c: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x8c9e30: r0 = Null
    //     0x8c9e30: mov             x0, NULL
    // 0x8c9e34: LeaveFrame
    //     0x8c9e34: mov             SP, fp
    //     0x8c9e38: ldp             fp, lr, [SP], #0x10
    // 0x8c9e3c: ret
    //     0x8c9e3c: ret             
    // 0x8c9e40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c9e40: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c9e44: b               #0x8c9e18
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa55808, size: 0xa4
    // 0xa55808: EnterFrame
    //     0xa55808: stp             fp, lr, [SP, #-0x10]!
    //     0xa5580c: mov             fp, SP
    // 0xa55810: AllocStack(0x18)
    //     0xa55810: sub             SP, SP, #0x18
    // 0xa55814: CheckStackOverflow
    //     0xa55814: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa55818: cmp             SP, x16
    //     0xa5581c: b.ls            #0xa558a4
    // 0xa55820: ldr             x0, [fp, #0x10]
    // 0xa55824: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa55824: ldur            w1, [x0, #0x17]
    // 0xa55828: DecompressPointer r1
    //     0xa55828: add             x1, x1, HEAP, lsl #32
    // 0xa5582c: stur            x1, [fp, #-8]
    // 0xa55830: cmp             w1, NULL
    // 0xa55834: b.ne            #0xa55840
    // 0xa55838: mov             x1, x0
    // 0xa5583c: b               #0xa55890
    // 0xa55840: r1 = 1
    //     0xa55840: movz            x1, #0x1
    // 0xa55844: r0 = AllocateContext()
    //     0xa55844: bl              #0xc5def4  ; AllocateContextStub
    // 0xa55848: mov             x1, x0
    // 0xa5584c: ldr             x0, [fp, #0x10]
    // 0xa55850: StoreField: r1->field_f = r0
    //     0xa55850: stur            w0, [x1, #0xf]
    // 0xa55854: mov             x2, x1
    // 0xa55858: r1 = Function '_updateTicker@328311458':.
    //     0xa55858: add             x1, PP, #0x4b, lsl #12  ; [pp+0x4be50] AnonymousClosure: (0x553e90), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0xa5585c: ldr             x1, [x1, #0xe50]
    // 0xa55860: r0 = AllocateClosure()
    //     0xa55860: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa55864: mov             x1, x0
    // 0xa55868: ldur            x0, [fp, #-8]
    // 0xa5586c: r2 = LoadClassIdInstr(r0)
    //     0xa5586c: ldur            x2, [x0, #-1]
    //     0xa55870: ubfx            x2, x2, #0xc, #0x14
    // 0xa55874: stp             x1, x0, [SP]
    // 0xa55878: mov             x0, x2
    // 0xa5587c: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa5587c: movz            x17, #0xc9d0
    //     0xa55880: add             lr, x0, x17
    //     0xa55884: ldr             lr, [x21, lr, lsl #3]
    //     0xa55888: blr             lr
    // 0xa5588c: ldr             x1, [fp, #0x10]
    // 0xa55890: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa55890: stur            NULL, [x1, #0x17]
    // 0xa55894: r0 = Null
    //     0xa55894: mov             x0, NULL
    // 0xa55898: LeaveFrame
    //     0xa55898: mov             SP, fp
    //     0xa5589c: ldp             fp, lr, [SP], #0x10
    // 0xa558a0: ret
    //     0xa558a0: ret             
    // 0xa558a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa558a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa558a8: b               #0xa55820
  }
}

// class id: 3264, size: 0x20, field offset: 0x1c
class _CupertinoActivityIndicatorState extends __CupertinoActivityIndicatorState&State&SingleTickerProviderStateMixin {

  late AnimationController _controller; // offset: 0x1c

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8a9ef4, size: 0x13c
    // 0x8a9ef4: EnterFrame
    //     0x8a9ef4: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9ef8: mov             fp, SP
    // 0x8a9efc: AllocStack(0x8)
    //     0x8a9efc: sub             SP, SP, #8
    // 0x8a9f00: CheckStackOverflow
    //     0x8a9f00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a9f04: cmp             SP, x16
    //     0x8a9f08: b.ls            #0x8aa00c
    // 0x8a9f0c: ldr             x0, [fp, #0x10]
    // 0x8a9f10: r2 = Null
    //     0x8a9f10: mov             x2, NULL
    // 0x8a9f14: r1 = Null
    //     0x8a9f14: mov             x1, NULL
    // 0x8a9f18: r4 = 59
    //     0x8a9f18: movz            x4, #0x3b
    // 0x8a9f1c: branchIfSmi(r0, 0x8a9f28)
    //     0x8a9f1c: tbz             w0, #0, #0x8a9f28
    // 0x8a9f20: r4 = LoadClassIdInstr(r0)
    //     0x8a9f20: ldur            x4, [x0, #-1]
    //     0x8a9f24: ubfx            x4, x4, #0xc, #0x14
    // 0x8a9f28: r17 = 4225
    //     0x8a9f28: movz            x17, #0x1081
    // 0x8a9f2c: cmp             x4, x17
    // 0x8a9f30: b.eq            #0x8a9f48
    // 0x8a9f34: r8 = _CupertinoActivityIndicator
    //     0x8a9f34: add             x8, PP, #0x4b, lsl #12  ; [pp+0x4be60] Type: _CupertinoActivityIndicator
    //     0x8a9f38: ldr             x8, [x8, #0xe60]
    // 0x8a9f3c: r3 = Null
    //     0x8a9f3c: add             x3, PP, #0x4b, lsl #12  ; [pp+0x4be68] Null
    //     0x8a9f40: ldr             x3, [x3, #0xe68]
    // 0x8a9f44: r0 = _CupertinoActivityIndicator()
    //     0x8a9f44: bl              #0x553d24  ; IsType__CupertinoActivityIndicator_Stub
    // 0x8a9f48: ldr             x3, [fp, #0x18]
    // 0x8a9f4c: LoadField: r2 = r3->field_7
    //     0x8a9f4c: ldur            w2, [x3, #7]
    // 0x8a9f50: DecompressPointer r2
    //     0x8a9f50: add             x2, x2, HEAP, lsl #32
    // 0x8a9f54: ldr             x0, [fp, #0x10]
    // 0x8a9f58: r1 = Null
    //     0x8a9f58: mov             x1, NULL
    // 0x8a9f5c: cmp             w2, NULL
    // 0x8a9f60: b.eq            #0x8a9f84
    // 0x8a9f64: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8a9f64: ldur            w4, [x2, #0x17]
    // 0x8a9f68: DecompressPointer r4
    //     0x8a9f68: add             x4, x4, HEAP, lsl #32
    // 0x8a9f6c: r8 = X0 bound StatefulWidget
    //     0x8a9f6c: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8a9f70: ldr             x8, [x8, #0x290]
    // 0x8a9f74: LoadField: r9 = r4->field_7
    //     0x8a9f74: ldur            x9, [x4, #7]
    // 0x8a9f78: r3 = Null
    //     0x8a9f78: add             x3, PP, #0x4b, lsl #12  ; [pp+0x4be78] Null
    //     0x8a9f7c: ldr             x3, [x3, #0xe78]
    // 0x8a9f80: blr             x9
    // 0x8a9f84: ldr             x0, [fp, #0x18]
    // 0x8a9f88: LoadField: r1 = r0->field_b
    //     0x8a9f88: ldur            w1, [x0, #0xb]
    // 0x8a9f8c: DecompressPointer r1
    //     0x8a9f8c: add             x1, x1, HEAP, lsl #32
    // 0x8a9f90: cmp             w1, NULL
    // 0x8a9f94: b.eq            #0x8aa014
    // 0x8a9f98: LoadField: r2 = r1->field_f
    //     0x8a9f98: ldur            w2, [x1, #0xf]
    // 0x8a9f9c: DecompressPointer r2
    //     0x8a9f9c: add             x2, x2, HEAP, lsl #32
    // 0x8a9fa0: ldr             x1, [fp, #0x10]
    // 0x8a9fa4: LoadField: r3 = r1->field_f
    //     0x8a9fa4: ldur            w3, [x1, #0xf]
    // 0x8a9fa8: DecompressPointer r3
    //     0x8a9fa8: add             x3, x3, HEAP, lsl #32
    // 0x8a9fac: cmp             w2, w3
    // 0x8a9fb0: b.eq            #0x8a9ffc
    // 0x8a9fb4: tbnz            w2, #4, #0x8a9fdc
    // 0x8a9fb8: LoadField: r1 = r0->field_1b
    //     0x8a9fb8: ldur            w1, [x0, #0x1b]
    // 0x8a9fbc: DecompressPointer r1
    //     0x8a9fbc: add             x1, x1, HEAP, lsl #32
    // 0x8a9fc0: r16 = Sentinel
    //     0x8a9fc0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9fc4: cmp             w1, w16
    // 0x8a9fc8: b.eq            #0x8aa018
    // 0x8a9fcc: str             x1, [SP]
    // 0x8a9fd0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8a9fd0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8a9fd4: r0 = repeat()
    //     0x8a9fd4: bl              #0x8aa030  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::repeat
    // 0x8a9fd8: b               #0x8a9ffc
    // 0x8a9fdc: LoadField: r1 = r0->field_1b
    //     0x8a9fdc: ldur            w1, [x0, #0x1b]
    // 0x8a9fe0: DecompressPointer r1
    //     0x8a9fe0: add             x1, x1, HEAP, lsl #32
    // 0x8a9fe4: r16 = Sentinel
    //     0x8a9fe4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9fe8: cmp             w1, w16
    // 0x8a9fec: b.eq            #0x8aa024
    // 0x8a9ff0: str             x1, [SP]
    // 0x8a9ff4: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x8a9ff4: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x8a9ff8: r0 = stop()
    //     0x8a9ff8: bl              #0x5dc364  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::stop
    // 0x8a9ffc: r0 = Null
    //     0x8a9ffc: mov             x0, NULL
    // 0x8aa000: LeaveFrame
    //     0x8aa000: mov             SP, fp
    //     0x8aa004: ldp             fp, lr, [SP], #0x10
    // 0x8aa008: ret
    //     0x8aa008: ret             
    // 0x8aa00c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8aa00c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8aa010: b               #0x8a9f0c
    // 0x8aa014: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8aa014: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8aa018: r9 = _controller
    //     0x8aa018: add             x9, PP, #0x4b, lsl #12  ; [pp+0x4be58] Field <_CupertinoActivityIndicatorState@765089737._controller@765089737>: late (offset: 0x1c)
    //     0x8aa01c: ldr             x9, [x9, #0xe58]
    // 0x8aa020: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8aa020: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8aa024: r9 = _controller
    //     0x8aa024: add             x9, PP, #0x4b, lsl #12  ; [pp+0x4be58] Field <_CupertinoActivityIndicatorState@765089737._controller@765089737>: late (offset: 0x1c)
    //     0x8aa028: ldr             x9, [x9, #0xe58]
    // 0x8aa02c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8aa02c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x9202d4, size: 0x170
    // 0x9202d4: EnterFrame
    //     0x9202d4: stp             fp, lr, [SP, #-0x10]!
    //     0x9202d8: mov             fp, SP
    // 0x9202dc: AllocStack(0x58)
    //     0x9202dc: sub             SP, SP, #0x58
    // 0x9202e0: d0 = 2.000000
    //     0x9202e0: fmov            d0, #2.00000000
    // 0x9202e4: CheckStackOverflow
    //     0x9202e4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x9202e8: cmp             SP, x16
    //     0x9202ec: b.ls            #0x920410
    // 0x9202f0: ldr             x0, [fp, #0x18]
    // 0x9202f4: LoadField: r1 = r0->field_b
    //     0x9202f4: ldur            w1, [x0, #0xb]
    // 0x9202f8: DecompressPointer r1
    //     0x9202f8: add             x1, x1, HEAP, lsl #32
    // 0x9202fc: cmp             w1, NULL
    // 0x920300: b.eq            #0x920418
    // 0x920304: LoadField: d1 = r1->field_13
    //     0x920304: ldur            d1, [x1, #0x13]
    // 0x920308: fmul            d2, d1, d0
    // 0x92030c: stur            d2, [fp, #-0x20]
    // 0x920310: LoadField: r1 = r0->field_1b
    //     0x920310: ldur            w1, [x0, #0x1b]
    // 0x920314: DecompressPointer r1
    //     0x920314: add             x1, x1, HEAP, lsl #32
    // 0x920318: r16 = Sentinel
    //     0x920318: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x92031c: cmp             w1, w16
    // 0x920320: b.eq            #0x92041c
    // 0x920324: stur            x1, [fp, #-8]
    // 0x920328: r16 = Instance_CupertinoDynamicColor
    //     0x920328: add             x16, PP, #0x32, lsl #12  ; [pp+0x320b8] Obj!CupertinoDynamicColor@c3c171
    //     0x92032c: ldr             x16, [x16, #0xb8]
    // 0x920330: ldr             lr, [fp, #0x10]
    // 0x920334: stp             lr, x16, [SP]
    // 0x920338: r0 = resolveFrom()
    //     0x920338: bl              #0x7678dc  ; [package:flutter/src/cupertino/colors.dart] CupertinoDynamicColor::resolveFrom
    // 0x92033c: mov             x1, x0
    // 0x920340: ldr             x0, [fp, #0x18]
    // 0x920344: stur            x1, [fp, #-0x10]
    // 0x920348: LoadField: r2 = r0->field_b
    //     0x920348: ldur            w2, [x0, #0xb]
    // 0x92034c: DecompressPointer r2
    //     0x92034c: add             x2, x2, HEAP, lsl #32
    // 0x920350: cmp             w2, NULL
    // 0x920354: b.eq            #0x920428
    // 0x920358: LoadField: d0 = r2->field_13
    //     0x920358: ldur            d0, [x2, #0x13]
    // 0x92035c: stur            d0, [fp, #-0x30]
    // 0x920360: LoadField: d1 = r2->field_1b
    //     0x920360: ldur            d1, [x2, #0x1b]
    // 0x920364: stur            d1, [fp, #-0x28]
    // 0x920368: r0 = _CupertinoActivityIndicatorPainter()
    //     0x920368: bl              #0x92055c  ; Allocate_CupertinoActivityIndicatorPainterStub -> _CupertinoActivityIndicatorPainter (size=0x20)
    // 0x92036c: stur            x0, [fp, #-0x18]
    // 0x920370: ldur            x16, [fp, #-0x10]
    // 0x920374: stp             x16, x0, [SP, #0x18]
    // 0x920378: ldur            x16, [fp, #-8]
    // 0x92037c: str             x16, [SP, #0x10]
    // 0x920380: ldur            d0, [fp, #-0x28]
    // 0x920384: str             d0, [SP, #8]
    // 0x920388: ldur            d0, [fp, #-0x30]
    // 0x92038c: str             d0, [SP]
    // 0x920390: r0 = _CupertinoActivityIndicatorPainter()
    //     0x920390: bl              #0x920444  ; [package:easy_refresh/easy_refresh.dart] _CupertinoActivityIndicatorPainter::_CupertinoActivityIndicatorPainter
    // 0x920394: r0 = CustomPaint()
    //     0x920394: bl              #0x920094  ; AllocateCustomPaintStub -> CustomPaint (size=0x24)
    // 0x920398: mov             x1, x0
    // 0x92039c: ldur            x0, [fp, #-0x18]
    // 0x9203a0: stur            x1, [fp, #-0x10]
    // 0x9203a4: StoreField: r1->field_f = r0
    //     0x9203a4: stur            w0, [x1, #0xf]
    // 0x9203a8: r0 = Instance_Size
    //     0x9203a8: ldr             x0, [PP, #0x4228]  ; [pp+0x4228] Obj!Size@c3c8d1
    // 0x9203ac: ArrayStore: r1[0] = r0  ; List_4
    //     0x9203ac: stur            w0, [x1, #0x17]
    // 0x9203b0: r0 = false
    //     0x9203b0: add             x0, NULL, #0x30  ; false
    // 0x9203b4: StoreField: r1->field_1b = r0
    //     0x9203b4: stur            w0, [x1, #0x1b]
    // 0x9203b8: StoreField: r1->field_1f = r0
    //     0x9203b8: stur            w0, [x1, #0x1f]
    // 0x9203bc: ldur            d0, [fp, #-0x20]
    // 0x9203c0: r0 = inline_Allocate_Double()
    //     0x9203c0: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x9203c4: add             x0, x0, #0x10
    //     0x9203c8: cmp             x2, x0
    //     0x9203cc: b.ls            #0x92042c
    //     0x9203d0: str             x0, [THR, #0x50]  ; THR::top
    //     0x9203d4: sub             x0, x0, #0xf
    //     0x9203d8: movz            x2, #0xd148
    //     0x9203dc: movk            x2, #0x3, lsl #16
    //     0x9203e0: stur            x2, [x0, #-1]
    // 0x9203e4: StoreField: r0->field_7 = d0
    //     0x9203e4: stur            d0, [x0, #7]
    // 0x9203e8: stur            x0, [fp, #-8]
    // 0x9203ec: r0 = SizedBox()
    //     0x9203ec: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x9203f0: ldur            x1, [fp, #-8]
    // 0x9203f4: StoreField: r0->field_f = r1
    //     0x9203f4: stur            w1, [x0, #0xf]
    // 0x9203f8: StoreField: r0->field_13 = r1
    //     0x9203f8: stur            w1, [x0, #0x13]
    // 0x9203fc: ldur            x1, [fp, #-0x10]
    // 0x920400: StoreField: r0->field_b = r1
    //     0x920400: stur            w1, [x0, #0xb]
    // 0x920404: LeaveFrame
    //     0x920404: mov             SP, fp
    //     0x920408: ldp             fp, lr, [SP], #0x10
    // 0x92040c: ret
    //     0x92040c: ret             
    // 0x920410: r0 = StackOverflowSharedWithFPURegs()
    //     0x920410: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0x920414: b               #0x9202f0
    // 0x920418: r0 = NullCastErrorSharedWithFPURegs()
    //     0x920418: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x92041c: r9 = _controller
    //     0x92041c: add             x9, PP, #0x4b, lsl #12  ; [pp+0x4be58] Field <_CupertinoActivityIndicatorState@765089737._controller@765089737>: late (offset: 0x1c)
    //     0x920420: ldr             x9, [x9, #0xe58]
    // 0x920424: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x920424: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
    // 0x920428: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x920428: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x92042c: SaveReg d0
    //     0x92042c: str             q0, [SP, #-0x10]!
    // 0x920430: SaveReg r1
    //     0x920430: str             x1, [SP, #-8]!
    // 0x920434: r0 = AllocateDouble()
    //     0x920434: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x920438: RestoreReg r1
    //     0x920438: ldr             x1, [SP], #8
    // 0x92043c: RestoreReg d0
    //     0x92043c: ldr             q0, [SP], #0x10
    // 0x920440: b               #0x9203e4
  }
  _ initState(/* No info */) {
    // ** addr: 0xa1db68, size: 0xac
    // 0xa1db68: EnterFrame
    //     0xa1db68: stp             fp, lr, [SP, #-0x10]!
    //     0xa1db6c: mov             fp, SP
    // 0xa1db70: AllocStack(0x20)
    //     0xa1db70: sub             SP, SP, #0x20
    // 0xa1db74: CheckStackOverflow
    //     0xa1db74: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1db78: cmp             SP, x16
    //     0xa1db7c: b.ls            #0xa1dc08
    // 0xa1db80: r1 = <double>
    //     0xa1db80: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa1db84: r0 = AnimationController()
    //     0xa1db84: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa1db88: stur            x0, [fp, #-8]
    // 0xa1db8c: ldr             x16, [fp, #0x10]
    // 0xa1db90: stp             x16, x0, [SP, #8]
    // 0xa1db94: r16 = Instance_Duration
    //     0xa1db94: ldr             x16, [PP, #0x2fc8]  ; [pp+0x2fc8] Obj!Duration@c47cb1
    // 0xa1db98: str             x16, [SP]
    // 0xa1db9c: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0xa1db9c: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0xa1dba0: ldr             x4, [x4, #0x4e0]
    // 0xa1dba4: r0 = AnimationController()
    //     0xa1dba4: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa1dba8: ldur            x0, [fp, #-8]
    // 0xa1dbac: ldr             x1, [fp, #0x10]
    // 0xa1dbb0: StoreField: r1->field_1b = r0
    //     0xa1dbb0: stur            w0, [x1, #0x1b]
    //     0xa1dbb4: ldurb           w16, [x1, #-1]
    //     0xa1dbb8: ldurb           w17, [x0, #-1]
    //     0xa1dbbc: and             x16, x17, x16, lsr #2
    //     0xa1dbc0: tst             x16, HEAP, lsr #32
    //     0xa1dbc4: b.eq            #0xa1dbcc
    //     0xa1dbc8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1dbcc: LoadField: r0 = r1->field_b
    //     0xa1dbcc: ldur            w0, [x1, #0xb]
    // 0xa1dbd0: DecompressPointer r0
    //     0xa1dbd0: add             x0, x0, HEAP, lsl #32
    // 0xa1dbd4: cmp             w0, NULL
    // 0xa1dbd8: b.eq            #0xa1dc10
    // 0xa1dbdc: LoadField: r1 = r0->field_f
    //     0xa1dbdc: ldur            w1, [x0, #0xf]
    // 0xa1dbe0: DecompressPointer r1
    //     0xa1dbe0: add             x1, x1, HEAP, lsl #32
    // 0xa1dbe4: tbnz            w1, #4, #0xa1dbf8
    // 0xa1dbe8: ldur            x16, [fp, #-8]
    // 0xa1dbec: str             x16, [SP]
    // 0xa1dbf0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0xa1dbf0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0xa1dbf4: r0 = repeat()
    //     0xa1dbf4: bl              #0x8aa030  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::repeat
    // 0xa1dbf8: r0 = Null
    //     0xa1dbf8: mov             x0, NULL
    // 0xa1dbfc: LeaveFrame
    //     0xa1dbfc: mov             SP, fp
    //     0xa1dc00: ldp             fp, lr, [SP], #0x10
    // 0xa1dc04: ret
    //     0xa1dc04: ret             
    // 0xa1dc08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1dc08: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1dc0c: b               #0xa1db80
    // 0xa1dc10: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1dc10: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa557a0, size: 0x68
    // 0xa557a0: EnterFrame
    //     0xa557a0: stp             fp, lr, [SP, #-0x10]!
    //     0xa557a4: mov             fp, SP
    // 0xa557a8: AllocStack(0x8)
    //     0xa557a8: sub             SP, SP, #8
    // 0xa557ac: CheckStackOverflow
    //     0xa557ac: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa557b0: cmp             SP, x16
    //     0xa557b4: b.ls            #0xa557f4
    // 0xa557b8: ldr             x0, [fp, #0x10]
    // 0xa557bc: LoadField: r1 = r0->field_1b
    //     0xa557bc: ldur            w1, [x0, #0x1b]
    // 0xa557c0: DecompressPointer r1
    //     0xa557c0: add             x1, x1, HEAP, lsl #32
    // 0xa557c4: r16 = Sentinel
    //     0xa557c4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa557c8: cmp             w1, w16
    // 0xa557cc: b.eq            #0xa557fc
    // 0xa557d0: str             x1, [SP]
    // 0xa557d4: r0 = dispose()
    //     0xa557d4: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa557d8: ldr             x16, [fp, #0x10]
    // 0xa557dc: str             x16, [SP]
    // 0xa557e0: r0 = dispose()
    //     0xa557e0: bl              #0xa55808  ; [package:easy_refresh/easy_refresh.dart] __CupertinoActivityIndicatorState&State&SingleTickerProviderStateMixin::dispose
    // 0xa557e4: r0 = Null
    //     0xa557e4: mov             x0, NULL
    // 0xa557e8: LeaveFrame
    //     0xa557e8: mov             SP, fp
    //     0xa557ec: ldp             fp, lr, [SP], #0x10
    // 0xa557f0: ret
    //     0xa557f0: ret             
    // 0xa557f4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa557f4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa557f8: b               #0xa557b8
    // 0xa557fc: r9 = _controller
    //     0xa557fc: add             x9, PP, #0x4b, lsl #12  ; [pp+0x4be58] Field <_CupertinoActivityIndicatorState@765089737._controller@765089737>: late (offset: 0x1c)
    //     0xa55800: ldr             x9, [x9, #0xe58]
    // 0xa55804: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa55804: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3265, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __CupertinoIndicatorState&State&SingleTickerProviderStateMixin extends State<dynamic>
     with SingleTickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x553834, size: 0x94
    // 0x553834: EnterFrame
    //     0x553834: stp             fp, lr, [SP, #-0x10]!
    //     0x553838: mov             fp, SP
    // 0x55383c: AllocStack(0x8)
    //     0x55383c: sub             SP, SP, #8
    // 0x553840: CheckStackOverflow
    //     0x553840: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553844: cmp             SP, x16
    //     0x553848: b.ls            #0x5538bc
    // 0x55384c: r0 = Ticker()
    //     0x55384c: bl              #0x54ed48  ; AllocateTickerStub -> Ticker (size=0x1c)
    // 0x553850: mov             x1, x0
    // 0x553854: r0 = false
    //     0x553854: add             x0, NULL, #0x30  ; false
    // 0x553858: StoreField: r1->field_b = r0
    //     0x553858: stur            w0, [x1, #0xb]
    // 0x55385c: ldr             x0, [fp, #0x10]
    // 0x553860: StoreField: r1->field_13 = r0
    //     0x553860: stur            w0, [x1, #0x13]
    // 0x553864: mov             x0, x1
    // 0x553868: ldr             x1, [fp, #0x18]
    // 0x55386c: StoreField: r1->field_13 = r0
    //     0x55386c: stur            w0, [x1, #0x13]
    //     0x553870: ldurb           w16, [x1, #-1]
    //     0x553874: ldurb           w17, [x0, #-1]
    //     0x553878: and             x16, x17, x16, lsr #2
    //     0x55387c: tst             x16, HEAP, lsr #32
    //     0x553880: b.eq            #0x553888
    //     0x553884: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553888: str             x1, [SP]
    // 0x55388c: r0 = _updateTickerModeNotifier()
    //     0x55388c: bl              #0x5539dc  ; [package:easy_refresh/easy_refresh.dart] __CupertinoIndicatorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x553890: ldr             x16, [fp, #0x18]
    // 0x553894: str             x16, [SP]
    // 0x553898: r0 = _updateTicker()
    //     0x553898: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x55389c: ldr             x1, [fp, #0x18]
    // 0x5538a0: LoadField: r0 = r1->field_13
    //     0x5538a0: ldur            w0, [x1, #0x13]
    // 0x5538a4: DecompressPointer r0
    //     0x5538a4: add             x0, x0, HEAP, lsl #32
    // 0x5538a8: cmp             w0, NULL
    // 0x5538ac: b.eq            #0x5538c4
    // 0x5538b0: LeaveFrame
    //     0x5538b0: mov             SP, fp
    //     0x5538b4: ldp             fp, lr, [SP], #0x10
    // 0x5538b8: ret
    //     0x5538b8: ret             
    // 0x5538bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5538bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5538c0: b               #0x55384c
    // 0x5538c4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x5538c4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x5539dc, size: 0x148
    // 0x5539dc: EnterFrame
    //     0x5539dc: stp             fp, lr, [SP, #-0x10]!
    //     0x5539e0: mov             fp, SP
    // 0x5539e4: AllocStack(0x20)
    //     0x5539e4: sub             SP, SP, #0x20
    // 0x5539e8: CheckStackOverflow
    //     0x5539e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5539ec: cmp             SP, x16
    //     0x5539f0: b.ls            #0x553b18
    // 0x5539f4: ldr             x0, [fp, #0x10]
    // 0x5539f8: LoadField: r1 = r0->field_f
    //     0x5539f8: ldur            w1, [x0, #0xf]
    // 0x5539fc: DecompressPointer r1
    //     0x5539fc: add             x1, x1, HEAP, lsl #32
    // 0x553a00: cmp             w1, NULL
    // 0x553a04: b.eq            #0x553b20
    // 0x553a08: str             x1, [SP]
    // 0x553a0c: r0 = getNotifier()
    //     0x553a0c: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x553a10: mov             x1, x0
    // 0x553a14: ldr             x0, [fp, #0x10]
    // 0x553a18: stur            x1, [fp, #-0x10]
    // 0x553a1c: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x553a1c: ldur            w2, [x0, #0x17]
    // 0x553a20: DecompressPointer r2
    //     0x553a20: add             x2, x2, HEAP, lsl #32
    // 0x553a24: stur            x2, [fp, #-8]
    // 0x553a28: cmp             w1, w2
    // 0x553a2c: b.ne            #0x553a40
    // 0x553a30: r0 = Null
    //     0x553a30: mov             x0, NULL
    // 0x553a34: LeaveFrame
    //     0x553a34: mov             SP, fp
    //     0x553a38: ldp             fp, lr, [SP], #0x10
    // 0x553a3c: ret
    //     0x553a3c: ret             
    // 0x553a40: cmp             w2, NULL
    // 0x553a44: b.eq            #0x553a9c
    // 0x553a48: r1 = 1
    //     0x553a48: movz            x1, #0x1
    // 0x553a4c: r0 = AllocateContext()
    //     0x553a4c: bl              #0xc5def4  ; AllocateContextStub
    // 0x553a50: mov             x1, x0
    // 0x553a54: ldr             x0, [fp, #0x10]
    // 0x553a58: StoreField: r1->field_f = r0
    //     0x553a58: stur            w0, [x1, #0xf]
    // 0x553a5c: mov             x2, x1
    // 0x553a60: r1 = Function '_updateTicker@328311458':.
    //     0x553a60: add             x1, PP, #0x40, lsl #12  ; [pp+0x40118] AnonymousClosure: (0x553b24), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x553a64: ldr             x1, [x1, #0x118]
    // 0x553a68: r0 = AllocateClosure()
    //     0x553a68: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x553a6c: mov             x1, x0
    // 0x553a70: ldur            x0, [fp, #-8]
    // 0x553a74: r2 = LoadClassIdInstr(r0)
    //     0x553a74: ldur            x2, [x0, #-1]
    //     0x553a78: ubfx            x2, x2, #0xc, #0x14
    // 0x553a7c: stp             x1, x0, [SP]
    // 0x553a80: mov             x0, x2
    // 0x553a84: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x553a84: movz            x17, #0xc9d0
    //     0x553a88: add             lr, x0, x17
    //     0x553a8c: ldr             lr, [x21, lr, lsl #3]
    //     0x553a90: blr             lr
    // 0x553a94: ldr             x0, [fp, #0x10]
    // 0x553a98: ldur            x1, [fp, #-0x10]
    // 0x553a9c: r1 = 1
    //     0x553a9c: movz            x1, #0x1
    // 0x553aa0: r0 = AllocateContext()
    //     0x553aa0: bl              #0xc5def4  ; AllocateContextStub
    // 0x553aa4: mov             x1, x0
    // 0x553aa8: ldr             x0, [fp, #0x10]
    // 0x553aac: StoreField: r1->field_f = r0
    //     0x553aac: stur            w0, [x1, #0xf]
    // 0x553ab0: mov             x2, x1
    // 0x553ab4: r1 = Function '_updateTicker@328311458':.
    //     0x553ab4: add             x1, PP, #0x40, lsl #12  ; [pp+0x40118] AnonymousClosure: (0x553b24), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0x553ab8: ldr             x1, [x1, #0x118]
    // 0x553abc: r0 = AllocateClosure()
    //     0x553abc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x553ac0: ldur            x1, [fp, #-0x10]
    // 0x553ac4: r2 = LoadClassIdInstr(r1)
    //     0x553ac4: ldur            x2, [x1, #-1]
    //     0x553ac8: ubfx            x2, x2, #0xc, #0x14
    // 0x553acc: stp             x0, x1, [SP]
    // 0x553ad0: mov             x0, x2
    // 0x553ad4: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x553ad4: movz            x17, #0xcefc
    //     0x553ad8: add             lr, x0, x17
    //     0x553adc: ldr             lr, [x21, lr, lsl #3]
    //     0x553ae0: blr             lr
    // 0x553ae4: ldur            x0, [fp, #-0x10]
    // 0x553ae8: ldr             x1, [fp, #0x10]
    // 0x553aec: ArrayStore: r1[0] = r0  ; List_4
    //     0x553aec: stur            w0, [x1, #0x17]
    //     0x553af0: ldurb           w16, [x1, #-1]
    //     0x553af4: ldurb           w17, [x0, #-1]
    //     0x553af8: and             x16, x17, x16, lsr #2
    //     0x553afc: tst             x16, HEAP, lsr #32
    //     0x553b00: b.eq            #0x553b08
    //     0x553b04: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553b08: r0 = Null
    //     0x553b08: mov             x0, NULL
    // 0x553b0c: LeaveFrame
    //     0x553b0c: mov             SP, fp
    //     0x553b10: ldp             fp, lr, [SP], #0x10
    // 0x553b14: ret
    //     0x553b14: ret             
    // 0x553b18: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553b18: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553b1c: b               #0x5539f4
    // 0x553b20: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553b20: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTicker(dynamic) {
    // ** addr: 0x553b24, size: 0x48
    // 0x553b24: EnterFrame
    //     0x553b24: stp             fp, lr, [SP, #-0x10]!
    //     0x553b28: mov             fp, SP
    // 0x553b2c: AllocStack(0x8)
    //     0x553b2c: sub             SP, SP, #8
    // 0x553b30: SetupParameters()
    //     0x553b30: ldr             x0, [fp, #0x10]
    //     0x553b34: ldur            w1, [x0, #0x17]
    //     0x553b38: add             x1, x1, HEAP, lsl #32
    // 0x553b3c: CheckStackOverflow
    //     0x553b3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553b40: cmp             SP, x16
    //     0x553b44: b.ls            #0x553b64
    // 0x553b48: LoadField: r0 = r1->field_f
    //     0x553b48: ldur            w0, [x1, #0xf]
    // 0x553b4c: DecompressPointer r0
    //     0x553b4c: add             x0, x0, HEAP, lsl #32
    // 0x553b50: str             x0, [SP]
    // 0x553b54: r0 = _updateTicker()
    //     0x553b54: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x553b58: LeaveFrame
    //     0x553b58: mov             SP, fp
    //     0x553b5c: ldp             fp, lr, [SP], #0x10
    // 0x553b60: ret
    //     0x553b60: ret             
    // 0x553b64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553b64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553b68: b               #0x553b48
  }
  _ activate(/* No info */) {
    // ** addr: 0x8c9db8, size: 0x48
    // 0x8c9db8: EnterFrame
    //     0x8c9db8: stp             fp, lr, [SP, #-0x10]!
    //     0x8c9dbc: mov             fp, SP
    // 0x8c9dc0: AllocStack(0x8)
    //     0x8c9dc0: sub             SP, SP, #8
    // 0x8c9dc4: CheckStackOverflow
    //     0x8c9dc4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c9dc8: cmp             SP, x16
    //     0x8c9dcc: b.ls            #0x8c9df8
    // 0x8c9dd0: ldr             x16, [fp, #0x10]
    // 0x8c9dd4: str             x16, [SP]
    // 0x8c9dd8: r0 = _updateTickerModeNotifier()
    //     0x8c9dd8: bl              #0x5539dc  ; [package:easy_refresh/easy_refresh.dart] __CupertinoIndicatorState&State&SingleTickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8c9ddc: ldr             x16, [fp, #0x10]
    // 0x8c9de0: str             x16, [SP]
    // 0x8c9de4: r0 = _updateTicker()
    //     0x8c9de4: bl              #0x5538ec  ; [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker
    // 0x8c9de8: r0 = Null
    //     0x8c9de8: mov             x0, NULL
    // 0x8c9dec: LeaveFrame
    //     0x8c9dec: mov             SP, fp
    //     0x8c9df0: ldp             fp, lr, [SP], #0x10
    // 0x8c9df4: ret
    //     0x8c9df4: ret             
    // 0x8c9df8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c9df8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c9dfc: b               #0x8c9dd0
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa556b4, size: 0xa4
    // 0xa556b4: EnterFrame
    //     0xa556b4: stp             fp, lr, [SP, #-0x10]!
    //     0xa556b8: mov             fp, SP
    // 0xa556bc: AllocStack(0x18)
    //     0xa556bc: sub             SP, SP, #0x18
    // 0xa556c0: CheckStackOverflow
    //     0xa556c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa556c4: cmp             SP, x16
    //     0xa556c8: b.ls            #0xa55750
    // 0xa556cc: ldr             x0, [fp, #0x10]
    // 0xa556d0: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa556d0: ldur            w1, [x0, #0x17]
    // 0xa556d4: DecompressPointer r1
    //     0xa556d4: add             x1, x1, HEAP, lsl #32
    // 0xa556d8: stur            x1, [fp, #-8]
    // 0xa556dc: cmp             w1, NULL
    // 0xa556e0: b.ne            #0xa556ec
    // 0xa556e4: mov             x1, x0
    // 0xa556e8: b               #0xa5573c
    // 0xa556ec: r1 = 1
    //     0xa556ec: movz            x1, #0x1
    // 0xa556f0: r0 = AllocateContext()
    //     0xa556f0: bl              #0xc5def4  ; AllocateContextStub
    // 0xa556f4: mov             x1, x0
    // 0xa556f8: ldr             x0, [fp, #0x10]
    // 0xa556fc: StoreField: r1->field_f = r0
    //     0xa556fc: stur            w0, [x1, #0xf]
    // 0xa55700: mov             x2, x1
    // 0xa55704: r1 = Function '_updateTicker@328311458':.
    //     0xa55704: add             x1, PP, #0x40, lsl #12  ; [pp+0x40118] AnonymousClosure: (0x553b24), in [package:flutter/src/material/input_decorator.dart] __HelperErrorState&State&SingleTickerProviderStateMixin::_updateTicker (0x5538ec)
    //     0xa55708: ldr             x1, [x1, #0x118]
    // 0xa5570c: r0 = AllocateClosure()
    //     0xa5570c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa55710: mov             x1, x0
    // 0xa55714: ldur            x0, [fp, #-8]
    // 0xa55718: r2 = LoadClassIdInstr(r0)
    //     0xa55718: ldur            x2, [x0, #-1]
    //     0xa5571c: ubfx            x2, x2, #0xc, #0x14
    // 0xa55720: stp             x1, x0, [SP]
    // 0xa55724: mov             x0, x2
    // 0xa55728: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa55728: movz            x17, #0xc9d0
    //     0xa5572c: add             lr, x0, x17
    //     0xa55730: ldr             lr, [x21, lr, lsl #3]
    //     0xa55734: blr             lr
    // 0xa55738: ldr             x1, [fp, #0x10]
    // 0xa5573c: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa5573c: stur            NULL, [x1, #0x17]
    // 0xa55740: r0 = Null
    //     0xa55740: mov             x0, NULL
    // 0xa55744: LeaveFrame
    //     0xa55744: mov             SP, fp
    //     0xa55748: ldp             fp, lr, [SP], #0x10
    // 0xa5574c: ret
    //     0xa5574c: ret             
    // 0xa55750: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa55750: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa55754: b               #0xa556cc
  }
}

// class id: 3266, size: 0x20, field offset: 0x1c
class _CupertinoIndicatorState extends __CupertinoIndicatorState&State&SingleTickerProviderStateMixin {

  late AnimationController _waterDropHiddenController; // offset: 0x1c

  get _ _actualTriggerOffset(/* No info */) {
    // ** addr: 0x91f298, size: 0x38
    // 0x91f298: EnterFrame
    //     0x91f298: stp             fp, lr, [SP, #-0x10]!
    //     0x91f29c: mov             fp, SP
    // 0x91f2a0: ldr             x0, [fp, #0x10]
    // 0x91f2a4: LoadField: r1 = r0->field_b
    //     0x91f2a4: ldur            w1, [x0, #0xb]
    // 0x91f2a8: DecompressPointer r1
    //     0x91f2a8: add             x1, x1, HEAP, lsl #32
    // 0x91f2ac: cmp             w1, NULL
    // 0x91f2b0: b.eq            #0x91f2cc
    // 0x91f2b4: LoadField: r0 = r1->field_b
    //     0x91f2b4: ldur            w0, [x1, #0xb]
    // 0x91f2b8: DecompressPointer r0
    //     0x91f2b8: add             x0, x0, HEAP, lsl #32
    // 0x91f2bc: LoadField: d0 = r0->field_37
    //     0x91f2bc: ldur            d0, [x0, #0x37]
    // 0x91f2c0: LeaveFrame
    //     0x91f2c0: mov             SP, fp
    //     0x91f2c4: ldp             fp, lr, [SP], #0x10
    // 0x91f2c8: ret
    //     0x91f2c8: ret             
    // 0x91f2cc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f2cc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _mode(/* No info */) {
    // ** addr: 0x91f30c, size: 0x3c
    // 0x91f30c: EnterFrame
    //     0x91f30c: stp             fp, lr, [SP, #-0x10]!
    //     0x91f310: mov             fp, SP
    // 0x91f314: ldr             x1, [fp, #0x10]
    // 0x91f318: LoadField: r2 = r1->field_b
    //     0x91f318: ldur            w2, [x1, #0xb]
    // 0x91f31c: DecompressPointer r2
    //     0x91f31c: add             x2, x2, HEAP, lsl #32
    // 0x91f320: cmp             w2, NULL
    // 0x91f324: b.eq            #0x91f344
    // 0x91f328: LoadField: r1 = r2->field_b
    //     0x91f328: ldur            w1, [x2, #0xb]
    // 0x91f32c: DecompressPointer r1
    //     0x91f32c: add             x1, x1, HEAP, lsl #32
    // 0x91f330: LoadField: r0 = r1->field_f
    //     0x91f330: ldur            w0, [x1, #0xf]
    // 0x91f334: DecompressPointer r0
    //     0x91f334: add             x0, x0, HEAP, lsl #32
    // 0x91f338: LeaveFrame
    //     0x91f338: mov             SP, fp
    //     0x91f33c: ldp             fp, lr, [SP], #0x10
    // 0x91f340: ret
    //     0x91f340: ret             
    // 0x91f344: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f344: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _offset(/* No info */) {
    // ** addr: 0x91f348, size: 0x38
    // 0x91f348: EnterFrame
    //     0x91f348: stp             fp, lr, [SP, #-0x10]!
    //     0x91f34c: mov             fp, SP
    // 0x91f350: ldr             x0, [fp, #0x10]
    // 0x91f354: LoadField: r1 = r0->field_b
    //     0x91f354: ldur            w1, [x0, #0xb]
    // 0x91f358: DecompressPointer r1
    //     0x91f358: add             x1, x1, HEAP, lsl #32
    // 0x91f35c: cmp             w1, NULL
    // 0x91f360: b.eq            #0x91f37c
    // 0x91f364: LoadField: r0 = r1->field_b
    //     0x91f364: ldur            w0, [x1, #0xb]
    // 0x91f368: DecompressPointer r0
    //     0x91f368: add             x0, x0, HEAP, lsl #32
    // 0x91f36c: ArrayLoad: d0 = r0[0]  ; List_8
    //     0x91f36c: ldur            d0, [x0, #0x17]
    // 0x91f370: LeaveFrame
    //     0x91f370: mov             SP, fp
    //     0x91f374: ldp             fp, lr, [SP], #0x10
    // 0x91f378: ret
    //     0x91f378: ret             
    // 0x91f37c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f37c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x91f380, size: 0x714
    // 0x91f380: EnterFrame
    //     0x91f380: stp             fp, lr, [SP, #-0x10]!
    //     0x91f384: mov             fp, SP
    // 0x91f388: AllocStack(0x70)
    //     0x91f388: sub             SP, SP, #0x70
    // 0x91f38c: CheckStackOverflow
    //     0x91f38c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91f390: cmp             SP, x16
    //     0x91f394: b.ls            #0x91f9d0
    // 0x91f398: ldr             x0, [fp, #0x18]
    // 0x91f39c: LoadField: r1 = r0->field_b
    //     0x91f39c: ldur            w1, [x0, #0xb]
    // 0x91f3a0: DecompressPointer r1
    //     0x91f3a0: add             x1, x1, HEAP, lsl #32
    // 0x91f3a4: cmp             w1, NULL
    // 0x91f3a8: b.eq            #0x91f9d8
    // 0x91f3ac: LoadField: r2 = r1->field_b
    //     0x91f3ac: ldur            w2, [x1, #0xb]
    // 0x91f3b0: DecompressPointer r2
    //     0x91f3b0: add             x2, x2, HEAP, lsl #32
    // 0x91f3b4: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x91f3b4: ldur            d0, [x2, #0x17]
    // 0x91f3b8: stur            d0, [fp, #-0x40]
    // 0x91f3bc: LoadField: r1 = r2->field_7
    //     0x91f3bc: ldur            w1, [x2, #7]
    // 0x91f3c0: DecompressPointer r1
    //     0x91f3c0: add             x1, x1, HEAP, lsl #32
    // 0x91f3c4: LoadField: r3 = r1->field_37
    //     0x91f3c4: ldur            w3, [x1, #0x37]
    // 0x91f3c8: DecompressPointer r3
    //     0x91f3c8: add             x3, x3, HEAP, lsl #32
    // 0x91f3cc: cmp             w3, NULL
    // 0x91f3d0: b.eq            #0x91f474
    // 0x91f3d4: LoadField: r3 = r1->field_43
    //     0x91f3d4: ldur            w3, [x1, #0x43]
    // 0x91f3d8: DecompressPointer r3
    //     0x91f3d8: add             x3, x3, HEAP, lsl #32
    // 0x91f3dc: r16 = Instance_IndicatorPosition
    //     0x91f3dc: add             x16, PP, #0x40, lsl #12  ; [pp+0x400a8] Obj!IndicatorPosition@c45291
    //     0x91f3e0: ldr             x16, [x16, #0xa8]
    // 0x91f3e4: cmp             w3, w16
    // 0x91f3e8: b.ne            #0x91f46c
    // 0x91f3ec: str             x0, [SP]
    // 0x91f3f0: r0 = _mode()
    //     0x91f3f0: bl              #0x91f30c  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_mode
    // 0x91f3f4: r16 = Instance_IndicatorMode
    //     0x91f3f4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x91f3f8: ldr             x16, [x16, #0x1a0]
    // 0x91f3fc: cmp             w0, w16
    // 0x91f400: b.eq            #0x91f40c
    // 0x91f404: ldr             x0, [fp, #0x18]
    // 0x91f408: b               #0x91f440
    // 0x91f40c: ldr             x0, [fp, #0x18]
    // 0x91f410: LoadField: r1 = r0->field_b
    //     0x91f410: ldur            w1, [x0, #0xb]
    // 0x91f414: DecompressPointer r1
    //     0x91f414: add             x1, x1, HEAP, lsl #32
    // 0x91f418: cmp             w1, NULL
    // 0x91f41c: b.eq            #0x91f9dc
    // 0x91f420: LoadField: r2 = r1->field_b
    //     0x91f420: ldur            w2, [x1, #0xb]
    // 0x91f424: DecompressPointer r2
    //     0x91f424: add             x2, x2, HEAP, lsl #32
    // 0x91f428: LoadField: r1 = r2->field_13
    //     0x91f428: ldur            w1, [x2, #0x13]
    // 0x91f42c: DecompressPointer r1
    //     0x91f42c: add             x1, x1, HEAP, lsl #32
    // 0x91f430: r16 = Instance_IndicatorResult
    //     0x91f430: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x91f434: ldr             x16, [x16, #0x1c0]
    // 0x91f438: cmp             w1, w16
    // 0x91f43c: b.ne            #0x91f464
    // 0x91f440: LoadField: r1 = r0->field_b
    //     0x91f440: ldur            w1, [x0, #0xb]
    // 0x91f444: DecompressPointer r1
    //     0x91f444: add             x1, x1, HEAP, lsl #32
    // 0x91f448: cmp             w1, NULL
    // 0x91f44c: b.eq            #0x91f9e0
    // 0x91f450: LoadField: r2 = r1->field_b
    //     0x91f450: ldur            w2, [x1, #0xb]
    // 0x91f454: DecompressPointer r2
    //     0x91f454: add             x2, x2, HEAP, lsl #32
    // 0x91f458: LoadField: d0 = r2->field_37
    //     0x91f458: ldur            d0, [x2, #0x37]
    // 0x91f45c: mov             x1, x2
    // 0x91f460: b               #0x91f47c
    // 0x91f464: mov             x1, x2
    // 0x91f468: b               #0x91f478
    // 0x91f46c: mov             x1, x2
    // 0x91f470: b               #0x91f478
    // 0x91f474: mov             x1, x2
    // 0x91f478: ldur            d0, [fp, #-0x40]
    // 0x91f47c: LoadField: r2 = r1->field_27
    //     0x91f47c: ldur            w2, [x1, #0x27]
    // 0x91f480: DecompressPointer r2
    //     0x91f480: add             x2, x2, HEAP, lsl #32
    // 0x91f484: r16 = Instance_Axis
    //     0x91f484: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f488: cmp             w2, w16
    // 0x91f48c: b.ne            #0x91f498
    // 0x91f490: mov             v1.16b, v0.16b
    // 0x91f494: b               #0x91f49c
    // 0x91f498: d1 = inf
    //     0x91f498: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f49c: stur            d1, [fp, #-0x40]
    // 0x91f4a0: r16 = Instance_Axis
    //     0x91f4a0: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f4a4: cmp             w2, w16
    // 0x91f4a8: b.ne            #0x91f4b0
    // 0x91f4ac: d0 = inf
    //     0x91f4ac: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f4b0: r1 = inline_Allocate_Double()
    //     0x91f4b0: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x91f4b4: add             x1, x1, #0x10
    //     0x91f4b8: cmp             x2, x1
    //     0x91f4bc: b.ls            #0x91f9e4
    //     0x91f4c0: str             x1, [THR, #0x50]  ; THR::top
    //     0x91f4c4: sub             x1, x1, #0xf
    //     0x91f4c8: movz            x2, #0xd148
    //     0x91f4cc: movk            x2, #0x3, lsl #16
    //     0x91f4d0: stur            x2, [x1, #-1]
    // 0x91f4d4: StoreField: r1->field_7 = d0
    //     0x91f4d4: stur            d0, [x1, #7]
    // 0x91f4d8: stur            x1, [fp, #-8]
    // 0x91f4dc: r0 = SizedBox()
    //     0x91f4dc: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91f4e0: mov             x3, x0
    // 0x91f4e4: ldur            x0, [fp, #-8]
    // 0x91f4e8: stur            x3, [fp, #-0x10]
    // 0x91f4ec: StoreField: r3->field_f = r0
    //     0x91f4ec: stur            w0, [x3, #0xf]
    // 0x91f4f0: ldur            d0, [fp, #-0x40]
    // 0x91f4f4: r0 = inline_Allocate_Double()
    //     0x91f4f4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91f4f8: add             x0, x0, #0x10
    //     0x91f4fc: cmp             x1, x0
    //     0x91f500: b.ls            #0x91fa00
    //     0x91f504: str             x0, [THR, #0x50]  ; THR::top
    //     0x91f508: sub             x0, x0, #0xf
    //     0x91f50c: movz            x1, #0xd148
    //     0x91f510: movk            x1, #0x3, lsl #16
    //     0x91f514: stur            x1, [x0, #-1]
    // 0x91f518: StoreField: r0->field_7 = d0
    //     0x91f518: stur            d0, [x0, #7]
    // 0x91f51c: StoreField: r3->field_13 = r0
    //     0x91f51c: stur            w0, [x3, #0x13]
    // 0x91f520: r1 = Null
    //     0x91f520: mov             x1, NULL
    // 0x91f524: r2 = 2
    //     0x91f524: movz            x2, #0x2
    // 0x91f528: r0 = AllocateArray()
    //     0x91f528: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x91f52c: mov             x2, x0
    // 0x91f530: ldur            x0, [fp, #-0x10]
    // 0x91f534: stur            x2, [fp, #-8]
    // 0x91f538: StoreField: r2->field_f = r0
    //     0x91f538: stur            w0, [x2, #0xf]
    // 0x91f53c: r1 = <Widget>
    //     0x91f53c: add             x1, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91f540: ldr             x1, [x1, #0x410]
    // 0x91f544: r0 = AllocateGrowableArray()
    //     0x91f544: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x91f548: mov             x1, x0
    // 0x91f54c: ldur            x0, [fp, #-8]
    // 0x91f550: stur            x1, [fp, #-0x10]
    // 0x91f554: StoreField: r1->field_f = r0
    //     0x91f554: stur            w0, [x1, #0xf]
    // 0x91f558: r0 = 2
    //     0x91f558: movz            x0, #0x2
    // 0x91f55c: StoreField: r1->field_b = r0
    //     0x91f55c: stur            w0, [x1, #0xb]
    // 0x91f560: ldr             x16, [fp, #0x18]
    // 0x91f564: str             x16, [SP]
    // 0x91f568: r0 = _useWaterDrop()
    //     0x91f568: bl              #0x920280  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_useWaterDrop
    // 0x91f56c: tbnz            w0, #4, #0x91f774
    // 0x91f570: ldr             x0, [fp, #0x18]
    // 0x91f574: LoadField: r1 = r0->field_b
    //     0x91f574: ldur            w1, [x0, #0xb]
    // 0x91f578: DecompressPointer r1
    //     0x91f578: add             x1, x1, HEAP, lsl #32
    // 0x91f57c: cmp             w1, NULL
    // 0x91f580: b.eq            #0x91fa18
    // 0x91f584: LoadField: r2 = r1->field_b
    //     0x91f584: ldur            w2, [x1, #0xb]
    // 0x91f588: DecompressPointer r2
    //     0x91f588: add             x2, x2, HEAP, lsl #32
    // 0x91f58c: LoadField: r1 = r2->field_27
    //     0x91f58c: ldur            w1, [x2, #0x27]
    // 0x91f590: DecompressPointer r1
    //     0x91f590: add             x1, x1, HEAP, lsl #32
    // 0x91f594: r16 = Instance_Axis
    //     0x91f594: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f598: cmp             w1, w16
    // 0x91f59c: b.ne            #0x91f5a8
    // 0x91f5a0: r3 = 0.000000
    //     0x91f5a0: ldr             x3, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f5a4: b               #0x91f5ac
    // 0x91f5a8: r3 = Null
    //     0x91f5a8: mov             x3, NULL
    // 0x91f5ac: stur            x3, [fp, #-0x18]
    // 0x91f5b0: r16 = Instance_Axis
    //     0x91f5b0: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f5b4: cmp             w1, w16
    // 0x91f5b8: b.ne            #0x91f5c4
    // 0x91f5bc: r4 = Null
    //     0x91f5bc: mov             x4, NULL
    // 0x91f5c0: b               #0x91f5c8
    // 0x91f5c4: r4 = 0.000000
    //     0x91f5c4: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f5c8: stur            x4, [fp, #-8]
    // 0x91f5cc: r16 = Instance_Axis
    //     0x91f5cc: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f5d0: cmp             w1, w16
    // 0x91f5d4: b.ne            #0x91f5e0
    // 0x91f5d8: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x91f5d8: ldur            d0, [x2, #0x17]
    // 0x91f5dc: b               #0x91f5e4
    // 0x91f5e0: d0 = inf
    //     0x91f5e0: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f5e4: stur            d0, [fp, #-0x40]
    // 0x91f5e8: r16 = Instance_Axis
    //     0x91f5e8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f5ec: cmp             w1, w16
    // 0x91f5f0: b.ne            #0x91f604
    // 0x91f5f4: mov             x0, x3
    // 0x91f5f8: mov             x1, x4
    // 0x91f5fc: d1 = inf
    //     0x91f5fc: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f600: b               #0x91f61c
    // 0x91f604: str             x0, [SP]
    // 0x91f608: r0 = _offset()
    //     0x91f608: bl              #0x91f348  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_offset
    // 0x91f60c: mov             v1.16b, v0.16b
    // 0x91f610: ldur            x0, [fp, #-0x18]
    // 0x91f614: ldur            x1, [fp, #-8]
    // 0x91f618: ldur            d0, [fp, #-0x40]
    // 0x91f61c: ldur            x2, [fp, #-0x10]
    // 0x91f620: stur            d1, [fp, #-0x48]
    // 0x91f624: ldr             x16, [fp, #0x18]
    // 0x91f628: str             x16, [SP]
    // 0x91f62c: r0 = _buildWaterDrop()
    //     0x91f62c: bl              #0x91ff30  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_buildWaterDrop
    // 0x91f630: ldur            d0, [fp, #-0x48]
    // 0x91f634: stur            x0, [fp, #-0x28]
    // 0x91f638: r1 = inline_Allocate_Double()
    //     0x91f638: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x91f63c: add             x1, x1, #0x10
    //     0x91f640: cmp             x2, x1
    //     0x91f644: b.ls            #0x91fa1c
    //     0x91f648: str             x1, [THR, #0x50]  ; THR::top
    //     0x91f64c: sub             x1, x1, #0xf
    //     0x91f650: movz            x2, #0xd148
    //     0x91f654: movk            x2, #0x3, lsl #16
    //     0x91f658: stur            x2, [x1, #-1]
    // 0x91f65c: StoreField: r1->field_7 = d0
    //     0x91f65c: stur            d0, [x1, #7]
    // 0x91f660: stur            x1, [fp, #-0x20]
    // 0x91f664: r0 = SizedBox()
    //     0x91f664: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91f668: mov             x2, x0
    // 0x91f66c: ldur            x0, [fp, #-0x20]
    // 0x91f670: stur            x2, [fp, #-0x30]
    // 0x91f674: StoreField: r2->field_f = r0
    //     0x91f674: stur            w0, [x2, #0xf]
    // 0x91f678: ldur            d0, [fp, #-0x40]
    // 0x91f67c: r0 = inline_Allocate_Double()
    //     0x91f67c: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91f680: add             x0, x0, #0x10
    //     0x91f684: cmp             x1, x0
    //     0x91f688: b.ls            #0x91fa38
    //     0x91f68c: str             x0, [THR, #0x50]  ; THR::top
    //     0x91f690: sub             x0, x0, #0xf
    //     0x91f694: movz            x1, #0xd148
    //     0x91f698: movk            x1, #0x3, lsl #16
    //     0x91f69c: stur            x1, [x0, #-1]
    // 0x91f6a0: StoreField: r0->field_7 = d0
    //     0x91f6a0: stur            d0, [x0, #7]
    // 0x91f6a4: StoreField: r2->field_13 = r0
    //     0x91f6a4: stur            w0, [x2, #0x13]
    // 0x91f6a8: ldur            x0, [fp, #-0x28]
    // 0x91f6ac: StoreField: r2->field_b = r0
    //     0x91f6ac: stur            w0, [x2, #0xb]
    // 0x91f6b0: r1 = <StackParentData>
    //     0x91f6b0: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91f6b4: ldr             x1, [x1, #0x2b8]
    // 0x91f6b8: r0 = Positioned()
    //     0x91f6b8: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91f6bc: mov             x1, x0
    // 0x91f6c0: r0 = 0.000000
    //     0x91f6c0: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f6c4: stur            x1, [fp, #-0x20]
    // 0x91f6c8: StoreField: r1->field_13 = r0
    //     0x91f6c8: stur            w0, [x1, #0x13]
    // 0x91f6cc: ArrayStore: r1[0] = r0  ; List_4
    //     0x91f6cc: stur            w0, [x1, #0x17]
    // 0x91f6d0: ldur            x2, [fp, #-0x18]
    // 0x91f6d4: StoreField: r1->field_1b = r2
    //     0x91f6d4: stur            w2, [x1, #0x1b]
    // 0x91f6d8: ldur            x2, [fp, #-8]
    // 0x91f6dc: StoreField: r1->field_1f = r2
    //     0x91f6dc: stur            w2, [x1, #0x1f]
    // 0x91f6e0: ldur            x2, [fp, #-0x30]
    // 0x91f6e4: StoreField: r1->field_b = r2
    //     0x91f6e4: stur            w2, [x1, #0xb]
    // 0x91f6e8: ldur            x2, [fp, #-0x10]
    // 0x91f6ec: LoadField: r3 = r2->field_b
    //     0x91f6ec: ldur            w3, [x2, #0xb]
    // 0x91f6f0: DecompressPointer r3
    //     0x91f6f0: add             x3, x3, HEAP, lsl #32
    // 0x91f6f4: stur            x3, [fp, #-8]
    // 0x91f6f8: LoadField: r4 = r2->field_f
    //     0x91f6f8: ldur            w4, [x2, #0xf]
    // 0x91f6fc: DecompressPointer r4
    //     0x91f6fc: add             x4, x4, HEAP, lsl #32
    // 0x91f700: LoadField: r5 = r4->field_b
    //     0x91f700: ldur            w5, [x4, #0xb]
    // 0x91f704: DecompressPointer r5
    //     0x91f704: add             x5, x5, HEAP, lsl #32
    // 0x91f708: cmp             w3, w5
    // 0x91f70c: b.ne            #0x91f718
    // 0x91f710: str             x2, [SP]
    // 0x91f714: r0 = _growToNextCapacity()
    //     0x91f714: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91f718: ldur            x0, [fp, #-8]
    // 0x91f71c: ldur            x2, [fp, #-0x10]
    // 0x91f720: r3 = LoadInt32Instr(r0)
    //     0x91f720: sbfx            x3, x0, #1, #0x1f
    // 0x91f724: add             x0, x3, #1
    // 0x91f728: lsl             x1, x0, #1
    // 0x91f72c: StoreField: r2->field_b = r1
    //     0x91f72c: stur            w1, [x2, #0xb]
    // 0x91f730: mov             x1, x3
    // 0x91f734: cmp             x1, x0
    // 0x91f738: b.hs            #0x91fa50
    // 0x91f73c: LoadField: r1 = r2->field_f
    //     0x91f73c: ldur            w1, [x2, #0xf]
    // 0x91f740: DecompressPointer r1
    //     0x91f740: add             x1, x1, HEAP, lsl #32
    // 0x91f744: ldur            x0, [fp, #-0x20]
    // 0x91f748: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91f748: add             x25, x1, x3, lsl #2
    //     0x91f74c: add             x25, x25, #0xf
    //     0x91f750: str             w0, [x25]
    //     0x91f754: tbz             w0, #0, #0x91f770
    //     0x91f758: ldurb           w16, [x1, #-1]
    //     0x91f75c: ldurb           w17, [x0, #-1]
    //     0x91f760: and             x16, x17, x16, lsr #2
    //     0x91f764: tst             x16, HEAP, lsr #32
    //     0x91f768: b.eq            #0x91f770
    //     0x91f76c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91f770: b               #0x91f778
    // 0x91f774: ldur            x2, [fp, #-0x10]
    // 0x91f778: ldr             x0, [fp, #0x18]
    // 0x91f77c: LoadField: r1 = r0->field_b
    //     0x91f77c: ldur            w1, [x0, #0xb]
    // 0x91f780: DecompressPointer r1
    //     0x91f780: add             x1, x1, HEAP, lsl #32
    // 0x91f784: cmp             w1, NULL
    // 0x91f788: b.eq            #0x91fa54
    // 0x91f78c: LoadField: r3 = r1->field_b
    //     0x91f78c: ldur            w3, [x1, #0xb]
    // 0x91f790: DecompressPointer r3
    //     0x91f790: add             x3, x3, HEAP, lsl #32
    // 0x91f794: LoadField: r1 = r3->field_27
    //     0x91f794: ldur            w1, [x3, #0x27]
    // 0x91f798: DecompressPointer r1
    //     0x91f798: add             x1, x1, HEAP, lsl #32
    // 0x91f79c: r16 = Instance_Axis
    //     0x91f79c: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f7a0: cmp             w1, w16
    // 0x91f7a4: b.ne            #0x91f7b0
    // 0x91f7a8: r4 = 0.000000
    //     0x91f7a8: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f7ac: b               #0x91f7b4
    // 0x91f7b0: r4 = Null
    //     0x91f7b0: mov             x4, NULL
    // 0x91f7b4: stur            x4, [fp, #-0x18]
    // 0x91f7b8: r16 = Instance_Axis
    //     0x91f7b8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f7bc: cmp             w1, w16
    // 0x91f7c0: b.ne            #0x91f7cc
    // 0x91f7c4: r5 = Null
    //     0x91f7c4: mov             x5, NULL
    // 0x91f7c8: b               #0x91f7d0
    // 0x91f7cc: r5 = 0.000000
    //     0x91f7cc: ldr             x5, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f7d0: stur            x5, [fp, #-8]
    // 0x91f7d4: r16 = Instance_Axis
    //     0x91f7d4: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f7d8: cmp             w1, w16
    // 0x91f7dc: b.ne            #0x91f7e8
    // 0x91f7e0: LoadField: d0 = r3->field_37
    //     0x91f7e0: ldur            d0, [x3, #0x37]
    // 0x91f7e4: b               #0x91f7ec
    // 0x91f7e8: d0 = inf
    //     0x91f7e8: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f7ec: stur            d0, [fp, #-0x40]
    // 0x91f7f0: str             x0, [SP]
    // 0x91f7f4: r0 = _value()
    //     0x91f7f4: bl              #0x5e4034  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_value
    // 0x91f7f8: r16 = Instance_Axis
    //     0x91f7f8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f7fc: cmp             w0, w16
    // 0x91f800: b.ne            #0x91f80c
    // 0x91f804: d1 = inf
    //     0x91f804: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91f808: b               #0x91f81c
    // 0x91f80c: ldr             x16, [fp, #0x18]
    // 0x91f810: str             x16, [SP]
    // 0x91f814: r0 = _actualTriggerOffset()
    //     0x91f814: bl              #0x91f298  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_actualTriggerOffset
    // 0x91f818: mov             v1.16b, v0.16b
    // 0x91f81c: ldur            x1, [fp, #-0x18]
    // 0x91f820: ldur            x2, [fp, #-8]
    // 0x91f824: ldur            d0, [fp, #-0x40]
    // 0x91f828: ldur            x0, [fp, #-0x10]
    // 0x91f82c: stur            d1, [fp, #-0x48]
    // 0x91f830: ldr             x16, [fp, #0x18]
    // 0x91f834: str             x16, [SP]
    // 0x91f838: r0 = _buildIndicator()
    //     0x91f838: bl              #0x91fa94  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_buildIndicator
    // 0x91f83c: ldur            d0, [fp, #-0x40]
    // 0x91f840: stur            x0, [fp, #-0x30]
    // 0x91f844: r1 = inline_Allocate_Double()
    //     0x91f844: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x91f848: add             x1, x1, #0x10
    //     0x91f84c: cmp             x2, x1
    //     0x91f850: b.ls            #0x91fa58
    //     0x91f854: str             x1, [THR, #0x50]  ; THR::top
    //     0x91f858: sub             x1, x1, #0xf
    //     0x91f85c: movz            x2, #0xd148
    //     0x91f860: movk            x2, #0x3, lsl #16
    //     0x91f864: stur            x2, [x1, #-1]
    // 0x91f868: StoreField: r1->field_7 = d0
    //     0x91f868: stur            d0, [x1, #7]
    // 0x91f86c: ldur            d0, [fp, #-0x48]
    // 0x91f870: stur            x1, [fp, #-0x28]
    // 0x91f874: r2 = inline_Allocate_Double()
    //     0x91f874: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x91f878: add             x2, x2, #0x10
    //     0x91f87c: cmp             x3, x2
    //     0x91f880: b.ls            #0x91fa74
    //     0x91f884: str             x2, [THR, #0x50]  ; THR::top
    //     0x91f888: sub             x2, x2, #0xf
    //     0x91f88c: movz            x3, #0xd148
    //     0x91f890: movk            x3, #0x3, lsl #16
    //     0x91f894: stur            x3, [x2, #-1]
    // 0x91f898: StoreField: r2->field_7 = d0
    //     0x91f898: stur            d0, [x2, #7]
    // 0x91f89c: stur            x2, [fp, #-0x20]
    // 0x91f8a0: r0 = Container()
    //     0x91f8a0: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91f8a4: stur            x0, [fp, #-0x38]
    // 0x91f8a8: r16 = Instance_Alignment
    //     0x91f8a8: add             x16, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91f8ac: ldr             x16, [x16, #0x358]
    // 0x91f8b0: stp             x16, x0, [SP, #0x18]
    // 0x91f8b4: ldur            x16, [fp, #-0x28]
    // 0x91f8b8: ldur            lr, [fp, #-0x20]
    // 0x91f8bc: stp             lr, x16, [SP, #8]
    // 0x91f8c0: ldur            x16, [fp, #-0x30]
    // 0x91f8c4: str             x16, [SP]
    // 0x91f8c8: r4 = const [0, 0x5, 0x5, 0x1, alignment, 0x1, child, 0x4, height, 0x2, width, 0x3, null]
    //     0x91f8c8: add             x4, PP, #0x37, lsl #12  ; [pp+0x37560] List(13) [0, 0x5, 0x5, 0x1, "alignment", 0x1, "child", 0x4, "height", 0x2, "width", 0x3, Null]
    //     0x91f8cc: ldr             x4, [x4, #0x560]
    // 0x91f8d0: r0 = Container()
    //     0x91f8d0: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91f8d4: r1 = <StackParentData>
    //     0x91f8d4: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91f8d8: ldr             x1, [x1, #0x2b8]
    // 0x91f8dc: r0 = Positioned()
    //     0x91f8dc: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91f8e0: mov             x1, x0
    // 0x91f8e4: r0 = 0.000000
    //     0x91f8e4: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91f8e8: stur            x1, [fp, #-0x20]
    // 0x91f8ec: StoreField: r1->field_13 = r0
    //     0x91f8ec: stur            w0, [x1, #0x13]
    // 0x91f8f0: ArrayStore: r1[0] = r0  ; List_4
    //     0x91f8f0: stur            w0, [x1, #0x17]
    // 0x91f8f4: ldur            x0, [fp, #-0x18]
    // 0x91f8f8: StoreField: r1->field_1b = r0
    //     0x91f8f8: stur            w0, [x1, #0x1b]
    // 0x91f8fc: ldur            x0, [fp, #-8]
    // 0x91f900: StoreField: r1->field_1f = r0
    //     0x91f900: stur            w0, [x1, #0x1f]
    // 0x91f904: ldur            x0, [fp, #-0x38]
    // 0x91f908: StoreField: r1->field_b = r0
    //     0x91f908: stur            w0, [x1, #0xb]
    // 0x91f90c: ldur            x0, [fp, #-0x10]
    // 0x91f910: LoadField: r2 = r0->field_b
    //     0x91f910: ldur            w2, [x0, #0xb]
    // 0x91f914: DecompressPointer r2
    //     0x91f914: add             x2, x2, HEAP, lsl #32
    // 0x91f918: stur            x2, [fp, #-8]
    // 0x91f91c: LoadField: r3 = r0->field_f
    //     0x91f91c: ldur            w3, [x0, #0xf]
    // 0x91f920: DecompressPointer r3
    //     0x91f920: add             x3, x3, HEAP, lsl #32
    // 0x91f924: LoadField: r4 = r3->field_b
    //     0x91f924: ldur            w4, [x3, #0xb]
    // 0x91f928: DecompressPointer r4
    //     0x91f928: add             x4, x4, HEAP, lsl #32
    // 0x91f92c: cmp             w2, w4
    // 0x91f930: b.ne            #0x91f93c
    // 0x91f934: str             x0, [SP]
    // 0x91f938: r0 = _growToNextCapacity()
    //     0x91f938: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91f93c: ldur            x0, [fp, #-8]
    // 0x91f940: ldur            x2, [fp, #-0x10]
    // 0x91f944: r3 = LoadInt32Instr(r0)
    //     0x91f944: sbfx            x3, x0, #1, #0x1f
    // 0x91f948: add             x0, x3, #1
    // 0x91f94c: lsl             x1, x0, #1
    // 0x91f950: StoreField: r2->field_b = r1
    //     0x91f950: stur            w1, [x2, #0xb]
    // 0x91f954: mov             x1, x3
    // 0x91f958: cmp             x1, x0
    // 0x91f95c: b.hs            #0x91fa90
    // 0x91f960: LoadField: r1 = r2->field_f
    //     0x91f960: ldur            w1, [x2, #0xf]
    // 0x91f964: DecompressPointer r1
    //     0x91f964: add             x1, x1, HEAP, lsl #32
    // 0x91f968: ldur            x0, [fp, #-0x20]
    // 0x91f96c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91f96c: add             x25, x1, x3, lsl #2
    //     0x91f970: add             x25, x25, #0xf
    //     0x91f974: str             w0, [x25]
    //     0x91f978: tbz             w0, #0, #0x91f994
    //     0x91f97c: ldurb           w16, [x1, #-1]
    //     0x91f980: ldurb           w17, [x0, #-1]
    //     0x91f984: and             x16, x17, x16, lsr #2
    //     0x91f988: tst             x16, HEAP, lsr #32
    //     0x91f98c: b.eq            #0x91f994
    //     0x91f990: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91f994: r0 = Stack()
    //     0x91f994: bl              #0x66ad20  ; AllocateStackStub -> Stack (size=0x20)
    // 0x91f998: r1 = Instance_Alignment
    //     0x91f998: add             x1, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91f99c: ldr             x1, [x1, #0x358]
    // 0x91f9a0: StoreField: r0->field_f = r1
    //     0x91f9a0: stur            w1, [x0, #0xf]
    // 0x91f9a4: r1 = Instance_StackFit
    //     0x91f9a4: add             x1, PP, #0x12, lsl #12  ; [pp+0x12240] Obj!StackFit@c438d1
    //     0x91f9a8: ldr             x1, [x1, #0x240]
    // 0x91f9ac: ArrayStore: r0[0] = r1  ; List_4
    //     0x91f9ac: stur            w1, [x0, #0x17]
    // 0x91f9b0: r1 = Instance_Clip
    //     0x91f9b0: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x91f9b4: ldr             x1, [x1, #0x438]
    // 0x91f9b8: StoreField: r0->field_1b = r1
    //     0x91f9b8: stur            w1, [x0, #0x1b]
    // 0x91f9bc: ldur            x1, [fp, #-0x10]
    // 0x91f9c0: StoreField: r0->field_b = r1
    //     0x91f9c0: stur            w1, [x0, #0xb]
    // 0x91f9c4: LeaveFrame
    //     0x91f9c4: mov             SP, fp
    //     0x91f9c8: ldp             fp, lr, [SP], #0x10
    // 0x91f9cc: ret
    //     0x91f9cc: ret             
    // 0x91f9d0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91f9d0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91f9d4: b               #0x91f398
    // 0x91f9d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f9d8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f9dc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f9dc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f9e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f9e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f9e4: stp             q0, q1, [SP, #-0x20]!
    // 0x91f9e8: SaveReg r0
    //     0x91f9e8: str             x0, [SP, #-8]!
    // 0x91f9ec: r0 = AllocateDouble()
    //     0x91f9ec: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91f9f0: mov             x1, x0
    // 0x91f9f4: RestoreReg r0
    //     0x91f9f4: ldr             x0, [SP], #8
    // 0x91f9f8: ldp             q0, q1, [SP], #0x20
    // 0x91f9fc: b               #0x91f4d4
    // 0x91fa00: SaveReg d0
    //     0x91fa00: str             q0, [SP, #-0x10]!
    // 0x91fa04: SaveReg r3
    //     0x91fa04: str             x3, [SP, #-8]!
    // 0x91fa08: r0 = AllocateDouble()
    //     0x91fa08: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fa0c: RestoreReg r3
    //     0x91fa0c: ldr             x3, [SP], #8
    // 0x91fa10: RestoreReg d0
    //     0x91fa10: ldr             q0, [SP], #0x10
    // 0x91fa14: b               #0x91f518
    // 0x91fa18: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fa18: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91fa1c: SaveReg d0
    //     0x91fa1c: str             q0, [SP, #-0x10]!
    // 0x91fa20: SaveReg r0
    //     0x91fa20: str             x0, [SP, #-8]!
    // 0x91fa24: r0 = AllocateDouble()
    //     0x91fa24: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fa28: mov             x1, x0
    // 0x91fa2c: RestoreReg r0
    //     0x91fa2c: ldr             x0, [SP], #8
    // 0x91fa30: RestoreReg d0
    //     0x91fa30: ldr             q0, [SP], #0x10
    // 0x91fa34: b               #0x91f65c
    // 0x91fa38: SaveReg d0
    //     0x91fa38: str             q0, [SP, #-0x10]!
    // 0x91fa3c: SaveReg r2
    //     0x91fa3c: str             x2, [SP, #-8]!
    // 0x91fa40: r0 = AllocateDouble()
    //     0x91fa40: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fa44: RestoreReg r2
    //     0x91fa44: ldr             x2, [SP], #8
    // 0x91fa48: RestoreReg d0
    //     0x91fa48: ldr             q0, [SP], #0x10
    // 0x91fa4c: b               #0x91f6a0
    // 0x91fa50: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91fa50: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91fa54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fa54: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91fa58: SaveReg d0
    //     0x91fa58: str             q0, [SP, #-0x10]!
    // 0x91fa5c: SaveReg r0
    //     0x91fa5c: str             x0, [SP, #-8]!
    // 0x91fa60: r0 = AllocateDouble()
    //     0x91fa60: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fa64: mov             x1, x0
    // 0x91fa68: RestoreReg r0
    //     0x91fa68: ldr             x0, [SP], #8
    // 0x91fa6c: RestoreReg d0
    //     0x91fa6c: ldr             q0, [SP], #0x10
    // 0x91fa70: b               #0x91f868
    // 0x91fa74: SaveReg d0
    //     0x91fa74: str             q0, [SP, #-0x10]!
    // 0x91fa78: stp             x0, x1, [SP, #-0x10]!
    // 0x91fa7c: r0 = AllocateDouble()
    //     0x91fa7c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fa80: mov             x2, x0
    // 0x91fa84: ldp             x0, x1, [SP], #0x10
    // 0x91fa88: RestoreReg d0
    //     0x91fa88: ldr             q0, [SP], #0x10
    // 0x91fa8c: b               #0x91f898
    // 0x91fa90: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91fa90: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ _buildIndicator(/* No info */) {
    // ** addr: 0x91fa94, size: 0x388
    // 0x91fa94: EnterFrame
    //     0x91fa94: stp             fp, lr, [SP, #-0x10]!
    //     0x91fa98: mov             fp, SP
    // 0x91fa9c: AllocStack(0x50)
    //     0x91fa9c: sub             SP, SP, #0x50
    // 0x91faa0: CheckStackOverflow
    //     0x91faa0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91faa4: cmp             SP, x16
    //     0x91faa8: b.ls            #0x91fde8
    // 0x91faac: ldr             x0, [fp, #0x10]
    // 0x91fab0: LoadField: r1 = r0->field_b
    //     0x91fab0: ldur            w1, [x0, #0xb]
    // 0x91fab4: DecompressPointer r1
    //     0x91fab4: add             x1, x1, HEAP, lsl #32
    // 0x91fab8: cmp             w1, NULL
    // 0x91fabc: b.eq            #0x91fdf0
    // 0x91fac0: LoadField: r2 = r1->field_b
    //     0x91fac0: ldur            w2, [x1, #0xb]
    // 0x91fac4: DecompressPointer r2
    //     0x91fac4: add             x2, x2, HEAP, lsl #32
    // 0x91fac8: ArrayLoad: d0 = r2[0]  ; List_8
    //     0x91fac8: ldur            d0, [x2, #0x17]
    // 0x91facc: LoadField: d1 = r2->field_37
    //     0x91facc: ldur            d1, [x2, #0x37]
    // 0x91fad0: fdiv            d2, d0, d1
    // 0x91fad4: r1 = inline_Allocate_Double()
    //     0x91fad4: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x91fad8: add             x1, x1, #0x10
    //     0x91fadc: cmp             x2, x1
    //     0x91fae0: b.ls            #0x91fdf4
    //     0x91fae4: str             x1, [THR, #0x50]  ; THR::top
    //     0x91fae8: sub             x1, x1, #0xf
    //     0x91faec: movz            x2, #0xd148
    //     0x91faf0: movk            x2, #0x3, lsl #16
    //     0x91faf4: stur            x2, [x1, #-1]
    // 0x91faf8: StoreField: r1->field_7 = d2
    //     0x91faf8: stur            d2, [x1, #7]
    // 0x91fafc: r16 = 0.010000
    //     0x91fafc: add             x16, PP, #0x40, lsl #12  ; [pp+0x400b0] 0.01
    //     0x91fb00: ldr             x16, [x16, #0xb0]
    // 0x91fb04: stp             x16, x1, [SP, #8]
    // 0x91fb08: r16 = 0.990000
    //     0x91fb08: add             x16, PP, #0x40, lsl #12  ; [pp+0x400b8] 0.99
    //     0x91fb0c: ldr             x16, [x16, #0xb8]
    // 0x91fb10: str             x16, [SP]
    // 0x91fb14: r0 = clamp()
    //     0x91fb14: bl              #0x7e2010  ; [dart:core] _Double::clamp
    // 0x91fb18: mov             x1, x0
    // 0x91fb1c: ldr             x0, [fp, #0x10]
    // 0x91fb20: stur            x1, [fp, #-0x28]
    // 0x91fb24: LoadField: r2 = r0->field_b
    //     0x91fb24: ldur            w2, [x0, #0xb]
    // 0x91fb28: DecompressPointer r2
    //     0x91fb28: add             x2, x2, HEAP, lsl #32
    // 0x91fb2c: stur            x2, [fp, #-0x20]
    // 0x91fb30: cmp             w2, NULL
    // 0x91fb34: b.eq            #0x91fe10
    // 0x91fb38: LoadField: r3 = r2->field_b
    //     0x91fb38: ldur            w3, [x2, #0xb]
    // 0x91fb3c: DecompressPointer r3
    //     0x91fb3c: add             x3, x3, HEAP, lsl #32
    // 0x91fb40: LoadField: r4 = r3->field_f
    //     0x91fb40: ldur            w4, [x3, #0xf]
    // 0x91fb44: DecompressPointer r4
    //     0x91fb44: add             x4, x4, HEAP, lsl #32
    // 0x91fb48: LoadField: r5 = r4->field_7
    //     0x91fb48: ldur            x5, [x4, #7]
    // 0x91fb4c: cmp             x5, #3
    // 0x91fb50: b.gt            #0x91fc4c
    // 0x91fb54: cmp             x5, #2
    // 0x91fb58: b.gt            #0x91fc40
    // 0x91fb5c: cmp             x5, #1
    // 0x91fb60: b.gt            #0x91fb70
    // 0x91fb64: lsl             x3, x5, #1
    // 0x91fb68: cmp             w3, #2
    // 0x91fb6c: b.ne            #0x91fd3c
    // 0x91fb70: LoadField: d0 = r1->field_7
    //     0x91fb70: ldur            d0, [x1, #7]
    // 0x91fb74: stur            d0, [fp, #-0x30]
    // 0x91fb78: r16 = Instance_Interval
    //     0x91fb78: add             x16, PP, #0x40, lsl #12  ; [pp+0x400c0] Obj!Interval@c390d1
    //     0x91fb7c: ldr             x16, [x16, #0xc0]
    // 0x91fb80: str             x16, [SP, #8]
    // 0x91fb84: str             d0, [SP]
    // 0x91fb88: r0 = transform()
    //     0x91fb88: bl              #0xb9a798  ; [package:flutter/src/animation/curves.dart] Curve::transform
    // 0x91fb8c: mov             x1, x0
    // 0x91fb90: ldr             x0, [fp, #0x10]
    // 0x91fb94: stur            x1, [fp, #-0x10]
    // 0x91fb98: LoadField: r2 = r0->field_b
    //     0x91fb98: ldur            w2, [x0, #0xb]
    // 0x91fb9c: DecompressPointer r2
    //     0x91fb9c: add             x2, x2, HEAP, lsl #32
    // 0x91fba0: stur            x2, [fp, #-8]
    // 0x91fba4: cmp             w2, NULL
    // 0x91fba8: b.eq            #0x91fe14
    // 0x91fbac: LoadField: r0 = r2->field_b
    //     0x91fbac: ldur            w0, [x2, #0xb]
    // 0x91fbb0: DecompressPointer r0
    //     0x91fbb0: add             x0, x0, HEAP, lsl #32
    // 0x91fbb4: LoadField: r3 = r0->field_7
    //     0x91fbb4: ldur            w3, [x0, #7]
    // 0x91fbb8: DecompressPointer r3
    //     0x91fbb8: add             x3, x3, HEAP, lsl #32
    // 0x91fbbc: LoadField: r0 = r3->field_37
    //     0x91fbbc: ldur            w0, [x3, #0x37]
    // 0x91fbc0: DecompressPointer r0
    //     0x91fbc0: add             x0, x0, HEAP, lsl #32
    // 0x91fbc4: cmp             w0, NULL
    // 0x91fbc8: b.ne            #0x91fbd4
    // 0x91fbcc: d1 = 10.000000
    //     0x91fbcc: fmov            d1, #10.00000000
    // 0x91fbd0: b               #0x91fbd8
    // 0x91fbd4: d1 = 14.000000
    //     0x91fbd4: fmov            d1, #14.00000000
    // 0x91fbd8: ldur            d0, [fp, #-0x30]
    // 0x91fbdc: stur            d1, [fp, #-0x38]
    // 0x91fbe0: r0 = _CupertinoActivityIndicator()
    //     0x91fbe0: bl              #0x91fe80  ; Allocate_CupertinoActivityIndicatorStub -> _CupertinoActivityIndicator (size=0x24)
    // 0x91fbe4: ldur            d0, [fp, #-0x38]
    // 0x91fbe8: stur            x0, [fp, #-0x18]
    // 0x91fbec: StoreField: r0->field_13 = d0
    //     0x91fbec: stur            d0, [x0, #0x13]
    // 0x91fbf0: ldur            d0, [fp, #-0x30]
    // 0x91fbf4: StoreField: r0->field_1b = d0
    //     0x91fbf4: stur            d0, [x0, #0x1b]
    // 0x91fbf8: r1 = false
    //     0x91fbf8: add             x1, NULL, #0x30  ; false
    // 0x91fbfc: StoreField: r0->field_f = r1
    //     0x91fbfc: stur            w1, [x0, #0xf]
    // 0x91fc00: ldur            x2, [fp, #-0x10]
    // 0x91fc04: LoadField: d0 = r2->field_7
    //     0x91fc04: ldur            d0, [x2, #7]
    // 0x91fc08: stur            d0, [fp, #-0x30]
    // 0x91fc0c: r0 = Opacity()
    //     0x91fc0c: bl              #0x91fe74  ; AllocateOpacityStub -> Opacity (size=0x1c)
    // 0x91fc10: ldur            d0, [fp, #-0x30]
    // 0x91fc14: StoreField: r0->field_f = d0
    //     0x91fc14: stur            d0, [x0, #0xf]
    // 0x91fc18: r1 = false
    //     0x91fc18: add             x1, NULL, #0x30  ; false
    // 0x91fc1c: ArrayStore: r0[0] = r1  ; List_4
    //     0x91fc1c: stur            w1, [x0, #0x17]
    // 0x91fc20: ldur            x1, [fp, #-0x18]
    // 0x91fc24: StoreField: r0->field_b = r1
    //     0x91fc24: stur            w1, [x0, #0xb]
    // 0x91fc28: r4 = Instance_ValueKey
    //     0x91fc28: add             x4, PP, #0x40, lsl #12  ; [pp+0x400c8] Obj!ValueKey<String>@c2fd01
    //     0x91fc2c: ldr             x4, [x4, #0xc8]
    // 0x91fc30: StoreField: r0->field_7 = r4
    //     0x91fc30: stur            w4, [x0, #7]
    // 0x91fc34: mov             x1, x0
    // 0x91fc38: ldur            x0, [fp, #-8]
    // 0x91fc3c: b               #0x91fd48
    // 0x91fc40: r4 = Instance_ValueKey
    //     0x91fc40: add             x4, PP, #0x40, lsl #12  ; [pp+0x400c8] Obj!ValueKey<String>@c2fd01
    //     0x91fc44: ldr             x4, [x4, #0xc8]
    // 0x91fc48: b               #0x91fc5c
    // 0x91fc4c: r4 = Instance_ValueKey
    //     0x91fc4c: add             x4, PP, #0x40, lsl #12  ; [pp+0x400c8] Obj!ValueKey<String>@c2fd01
    //     0x91fc50: ldr             x4, [x4, #0xc8]
    // 0x91fc54: cmp             x5, #5
    // 0x91fc58: b.gt            #0x91fcb8
    // 0x91fc5c: LoadField: r0 = r3->field_7
    //     0x91fc5c: ldur            w0, [x3, #7]
    // 0x91fc60: DecompressPointer r0
    //     0x91fc60: add             x0, x0, HEAP, lsl #32
    // 0x91fc64: LoadField: r1 = r0->field_37
    //     0x91fc64: ldur            w1, [x0, #0x37]
    // 0x91fc68: DecompressPointer r1
    //     0x91fc68: add             x1, x1, HEAP, lsl #32
    // 0x91fc6c: cmp             w1, NULL
    // 0x91fc70: b.ne            #0x91fc7c
    // 0x91fc74: d0 = 10.000000
    //     0x91fc74: fmov            d0, #10.00000000
    // 0x91fc78: b               #0x91fc80
    // 0x91fc7c: d0 = 14.000000
    //     0x91fc7c: fmov            d0, #14.00000000
    // 0x91fc80: stur            d0, [fp, #-0x30]
    // 0x91fc84: r0 = _CupertinoActivityIndicator()
    //     0x91fc84: bl              #0x91fe80  ; Allocate_CupertinoActivityIndicatorStub -> _CupertinoActivityIndicator (size=0x24)
    // 0x91fc88: r2 = true
    //     0x91fc88: add             x2, NULL, #0x20  ; true
    // 0x91fc8c: StoreField: r0->field_f = r2
    //     0x91fc8c: stur            w2, [x0, #0xf]
    // 0x91fc90: ldur            d0, [fp, #-0x30]
    // 0x91fc94: StoreField: r0->field_13 = d0
    //     0x91fc94: stur            d0, [x0, #0x13]
    // 0x91fc98: d0 = 1.000000
    //     0x91fc98: fmov            d0, #1.00000000
    // 0x91fc9c: StoreField: r0->field_1b = d0
    //     0x91fc9c: stur            d0, [x0, #0x1b]
    // 0x91fca0: r3 = Instance_ValueKey
    //     0x91fca0: add             x3, PP, #0x40, lsl #12  ; [pp+0x400c8] Obj!ValueKey<String>@c2fd01
    //     0x91fca4: ldr             x3, [x3, #0xc8]
    // 0x91fca8: StoreField: r0->field_7 = r3
    //     0x91fca8: stur            w3, [x0, #7]
    // 0x91fcac: mov             x1, x0
    // 0x91fcb0: ldur            x0, [fp, #-0x20]
    // 0x91fcb4: b               #0x91fd48
    // 0x91fcb8: mov             x3, x4
    // 0x91fcbc: r2 = true
    //     0x91fcbc: add             x2, NULL, #0x20  ; true
    // 0x91fcc0: d0 = 1.000000
    //     0x91fcc0: fmov            d0, #1.00000000
    // 0x91fcc4: cmp             x5, #0xa
    // 0x91fcc8: b.lt            #0x91fd3c
    // 0x91fccc: lsl             x4, x5, #1
    // 0x91fcd0: cmp             w4, #0x14
    // 0x91fcd4: b.ne            #0x91fd3c
    // 0x91fcd8: str             x0, [SP]
    // 0x91fcdc: r0 = _radius()
    //     0x91fcdc: bl              #0x91fe1c  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_radius
    // 0x91fce0: ldur            x0, [fp, #-0x28]
    // 0x91fce4: LoadField: d1 = r0->field_7
    //     0x91fce4: ldur            d1, [x0, #7]
    // 0x91fce8: fmul            d2, d0, d1
    // 0x91fcec: ldr             x0, [fp, #0x10]
    // 0x91fcf0: stur            d2, [fp, #-0x30]
    // 0x91fcf4: LoadField: r1 = r0->field_b
    //     0x91fcf4: ldur            w1, [x0, #0xb]
    // 0x91fcf8: DecompressPointer r1
    //     0x91fcf8: add             x1, x1, HEAP, lsl #32
    // 0x91fcfc: stur            x1, [fp, #-8]
    // 0x91fd00: cmp             w1, NULL
    // 0x91fd04: b.eq            #0x91fe18
    // 0x91fd08: r0 = _CupertinoActivityIndicator()
    //     0x91fd08: bl              #0x91fe80  ; Allocate_CupertinoActivityIndicatorStub -> _CupertinoActivityIndicator (size=0x24)
    // 0x91fd0c: mov             x1, x0
    // 0x91fd10: r0 = true
    //     0x91fd10: add             x0, NULL, #0x20  ; true
    // 0x91fd14: StoreField: r1->field_f = r0
    //     0x91fd14: stur            w0, [x1, #0xf]
    // 0x91fd18: ldur            d0, [fp, #-0x30]
    // 0x91fd1c: StoreField: r1->field_13 = d0
    //     0x91fd1c: stur            d0, [x1, #0x13]
    // 0x91fd20: d0 = 1.000000
    //     0x91fd20: fmov            d0, #1.00000000
    // 0x91fd24: StoreField: r1->field_1b = d0
    //     0x91fd24: stur            d0, [x1, #0x1b]
    // 0x91fd28: r0 = Instance_ValueKey
    //     0x91fd28: add             x0, PP, #0x40, lsl #12  ; [pp+0x400c8] Obj!ValueKey<String>@c2fd01
    //     0x91fd2c: ldr             x0, [x0, #0xc8]
    // 0x91fd30: StoreField: r1->field_7 = r0
    //     0x91fd30: stur            w0, [x1, #7]
    // 0x91fd34: ldur            x0, [fp, #-8]
    // 0x91fd38: b               #0x91fd48
    // 0x91fd3c: ldur            x0, [fp, #-0x20]
    // 0x91fd40: r1 = Instance_SizedBox
    //     0x91fd40: add             x1, PP, #0x40, lsl #12  ; [pp+0x400d0] Obj!SizedBox@c37d11
    //     0x91fd44: ldr             x1, [x1, #0xd0]
    // 0x91fd48: LoadField: r2 = r0->field_b
    //     0x91fd48: ldur            w2, [x0, #0xb]
    // 0x91fd4c: DecompressPointer r2
    //     0x91fd4c: add             x2, x2, HEAP, lsl #32
    // 0x91fd50: LoadField: r0 = r2->field_13
    //     0x91fd50: ldur            w0, [x2, #0x13]
    // 0x91fd54: DecompressPointer r0
    //     0x91fd54: add             x0, x0, HEAP, lsl #32
    // 0x91fd58: r16 = Instance_IndicatorResult
    //     0x91fd58: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x91fd5c: ldr             x16, [x16, #0x1c0]
    // 0x91fd60: cmp             w0, w16
    // 0x91fd64: b.ne            #0x91fd90
    // 0x91fd68: r0 = Icon()
    //     0x91fd68: bl              #0x66e590  ; AllocateIconStub -> Icon (size=0x34)
    // 0x91fd6c: mov             x1, x0
    // 0x91fd70: r0 = Instance_IconData
    //     0x91fd70: add             x0, PP, #0x40, lsl #12  ; [pp+0x400d8] Obj!IconData@c2c611
    //     0x91fd74: ldr             x0, [x0, #0xd8]
    // 0x91fd78: StoreField: r1->field_b = r0
    //     0x91fd78: stur            w0, [x1, #0xb]
    // 0x91fd7c: r0 = Instance_ValueKey
    //     0x91fd7c: add             x0, PP, #0x40, lsl #12  ; [pp+0x400e0] Obj!ValueKey<String>@c2fcf1
    //     0x91fd80: ldr             x0, [x0, #0xe0]
    // 0x91fd84: StoreField: r1->field_7 = r0
    //     0x91fd84: stur            w0, [x1, #7]
    // 0x91fd88: mov             x0, x1
    // 0x91fd8c: b               #0x91fd94
    // 0x91fd90: mov             x0, x1
    // 0x91fd94: stur            x0, [fp, #-8]
    // 0x91fd98: r0 = AnimatedSwitcher()
    //     0x91fd98: bl              #0x91e068  ; AllocateAnimatedSwitcherStub -> AnimatedSwitcher (size=0x28)
    // 0x91fd9c: ldur            x1, [fp, #-8]
    // 0x91fda0: StoreField: r0->field_b = r1
    //     0x91fda0: stur            w1, [x0, #0xb]
    // 0x91fda4: r1 = Instance_Duration
    //     0x91fda4: add             x1, PP, #0xf, lsl #12  ; [pp+0xf010] Obj!Duration@c47d21
    //     0x91fda8: ldr             x1, [x1, #0x10]
    // 0x91fdac: StoreField: r0->field_f = r1
    //     0x91fdac: stur            w1, [x0, #0xf]
    // 0x91fdb0: r1 = Instance_Duration
    //     0x91fdb0: ldr             x1, [PP, #0x6530]  ; [pp+0x6530] Obj!Duration@c47d01
    // 0x91fdb4: StoreField: r0->field_13 = r1
    //     0x91fdb4: stur            w1, [x0, #0x13]
    // 0x91fdb8: r1 = Instance__Linear
    //     0x91fdb8: ldr             x1, [PP, #0x5ff8]  ; [pp+0x5ff8] Obj!_Linear@c394b1
    // 0x91fdbc: ArrayStore: r0[0] = r1  ; List_4
    //     0x91fdbc: stur            w1, [x0, #0x17]
    // 0x91fdc0: StoreField: r0->field_1b = r1
    //     0x91fdc0: stur            w1, [x0, #0x1b]
    // 0x91fdc4: r1 = Closure: (Widget, Animation<double>) => Widget from Function 'defaultTransitionBuilder': static.
    //     0x91fdc4: add             x1, PP, #0x40, lsl #12  ; [pp+0x400e8] Closure: (Widget, Animation<double>) => Widget from Function 'defaultTransitionBuilder': static. (0x222f3eefe8c)
    //     0x91fdc8: ldr             x1, [x1, #0xe8]
    // 0x91fdcc: StoreField: r0->field_1f = r1
    //     0x91fdcc: stur            w1, [x0, #0x1f]
    // 0x91fdd0: r1 = Closure: (Widget?, List<Widget>) => Widget from Function 'defaultLayoutBuilder': static.
    //     0x91fdd0: add             x1, PP, #0x40, lsl #12  ; [pp+0x400f0] Closure: (Widget?, List<Widget>) => Widget from Function 'defaultLayoutBuilder': static. (0x222f3eee2c0)
    //     0x91fdd4: ldr             x1, [x1, #0xf0]
    // 0x91fdd8: StoreField: r0->field_23 = r1
    //     0x91fdd8: stur            w1, [x0, #0x23]
    // 0x91fddc: LeaveFrame
    //     0x91fddc: mov             SP, fp
    //     0x91fde0: ldp             fp, lr, [SP], #0x10
    // 0x91fde4: ret
    //     0x91fde4: ret             
    // 0x91fde8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91fde8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91fdec: b               #0x91faac
    // 0x91fdf0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fdf0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91fdf4: SaveReg d2
    //     0x91fdf4: str             q2, [SP, #-0x10]!
    // 0x91fdf8: SaveReg r0
    //     0x91fdf8: str             x0, [SP, #-8]!
    // 0x91fdfc: r0 = AllocateDouble()
    //     0x91fdfc: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91fe00: mov             x1, x0
    // 0x91fe04: RestoreReg r0
    //     0x91fe04: ldr             x0, [SP], #8
    // 0x91fe08: RestoreReg d2
    //     0x91fe08: ldr             q2, [SP], #0x10
    // 0x91fe0c: b               #0x91faf8
    // 0x91fe10: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fe10: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91fe14: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fe14: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91fe18: r0 = NullCastErrorSharedWithFPURegs()
    //     0x91fe18: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  get _ _radius(/* No info */) {
    // ** addr: 0x91fe1c, size: 0x58
    // 0x91fe1c: EnterFrame
    //     0x91fe1c: stp             fp, lr, [SP, #-0x10]!
    //     0x91fe20: mov             fp, SP
    // 0x91fe24: ldr             x0, [fp, #0x10]
    // 0x91fe28: LoadField: r1 = r0->field_b
    //     0x91fe28: ldur            w1, [x0, #0xb]
    // 0x91fe2c: DecompressPointer r1
    //     0x91fe2c: add             x1, x1, HEAP, lsl #32
    // 0x91fe30: cmp             w1, NULL
    // 0x91fe34: b.eq            #0x91fe70
    // 0x91fe38: LoadField: r0 = r1->field_b
    //     0x91fe38: ldur            w0, [x1, #0xb]
    // 0x91fe3c: DecompressPointer r0
    //     0x91fe3c: add             x0, x0, HEAP, lsl #32
    // 0x91fe40: LoadField: r1 = r0->field_7
    //     0x91fe40: ldur            w1, [x0, #7]
    // 0x91fe44: DecompressPointer r1
    //     0x91fe44: add             x1, x1, HEAP, lsl #32
    // 0x91fe48: LoadField: r0 = r1->field_37
    //     0x91fe48: ldur            w0, [x1, #0x37]
    // 0x91fe4c: DecompressPointer r0
    //     0x91fe4c: add             x0, x0, HEAP, lsl #32
    // 0x91fe50: cmp             w0, NULL
    // 0x91fe54: b.ne            #0x91fe60
    // 0x91fe58: d0 = 10.000000
    //     0x91fe58: fmov            d0, #10.00000000
    // 0x91fe5c: b               #0x91fe64
    // 0x91fe60: d0 = 14.000000
    //     0x91fe60: fmov            d0, #14.00000000
    // 0x91fe64: LeaveFrame
    //     0x91fe64: mov             SP, fp
    //     0x91fe68: ldp             fp, lr, [SP], #0x10
    // 0x91fe6c: ret
    //     0x91fe6c: ret             
    // 0x91fe70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91fe70: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildWaterDrop(/* No info */) {
    // ** addr: 0x91ff30, size: 0x164
    // 0x91ff30: EnterFrame
    //     0x91ff30: stp             fp, lr, [SP, #-0x10]!
    //     0x91ff34: mov             fp, SP
    // 0x91ff38: AllocStack(0x38)
    //     0x91ff38: sub             SP, SP, #0x38
    // 0x91ff3c: CheckStackOverflow
    //     0x91ff3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91ff40: cmp             SP, x16
    //     0x91ff44: b.ls            #0x920078
    // 0x91ff48: r1 = 2
    //     0x91ff48: movz            x1, #0x2
    // 0x91ff4c: r0 = AllocateContext()
    //     0x91ff4c: bl              #0xc5def4  ; AllocateContextStub
    // 0x91ff50: mov             x1, x0
    // 0x91ff54: ldr             x0, [fp, #0x10]
    // 0x91ff58: stur            x1, [fp, #-0x10]
    // 0x91ff5c: StoreField: r1->field_f = r0
    //     0x91ff5c: stur            w0, [x1, #0xf]
    // 0x91ff60: LoadField: r2 = r0->field_b
    //     0x91ff60: ldur            w2, [x0, #0xb]
    // 0x91ff64: DecompressPointer r2
    //     0x91ff64: add             x2, x2, HEAP, lsl #32
    // 0x91ff68: cmp             w2, NULL
    // 0x91ff6c: b.eq            #0x920080
    // 0x91ff70: LoadField: r3 = r2->field_b
    //     0x91ff70: ldur            w3, [x2, #0xb]
    // 0x91ff74: DecompressPointer r3
    //     0x91ff74: add             x3, x3, HEAP, lsl #32
    // 0x91ff78: LoadField: r2 = r3->field_27
    //     0x91ff78: ldur            w2, [x3, #0x27]
    // 0x91ff7c: DecompressPointer r2
    //     0x91ff7c: add             x2, x2, HEAP, lsl #32
    // 0x91ff80: stur            x2, [fp, #-8]
    // 0x91ff84: ArrayLoad: d0 = r3[0]  ; List_8
    //     0x91ff84: ldur            d0, [x3, #0x17]
    // 0x91ff88: stur            d0, [fp, #-0x30]
    // 0x91ff8c: LoadField: d1 = r3->field_37
    //     0x91ff8c: ldur            d1, [x3, #0x37]
    // 0x91ff90: stur            d1, [fp, #-0x28]
    // 0x91ff94: LoadField: r3 = r0->field_f
    //     0x91ff94: ldur            w3, [x0, #0xf]
    // 0x91ff98: DecompressPointer r3
    //     0x91ff98: add             x3, x3, HEAP, lsl #32
    // 0x91ff9c: cmp             w3, NULL
    // 0x91ffa0: b.eq            #0x920084
    // 0x91ffa4: str             x3, [SP]
    // 0x91ffa8: r0 = of()
    //     0x91ffa8: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x91ffac: LoadField: r1 = r0->field_7f
    //     0x91ffac: ldur            w1, [x0, #0x7f]
    // 0x91ffb0: DecompressPointer r1
    //     0x91ffb0: add             x1, x1, HEAP, lsl #32
    // 0x91ffb4: stur            x1, [fp, #-0x18]
    // 0x91ffb8: r0 = _WaterDropPainter()
    //     0x91ffb8: bl              #0x9200a0  ; Allocate_WaterDropPainterStub -> _WaterDropPainter (size=0x24)
    // 0x91ffbc: mov             x1, x0
    // 0x91ffc0: ldur            x0, [fp, #-8]
    // 0x91ffc4: stur            x1, [fp, #-0x20]
    // 0x91ffc8: StoreField: r1->field_b = r0
    //     0x91ffc8: stur            w0, [x1, #0xb]
    // 0x91ffcc: ldur            x0, [fp, #-0x18]
    // 0x91ffd0: StoreField: r1->field_f = r0
    //     0x91ffd0: stur            w0, [x1, #0xf]
    // 0x91ffd4: ldur            d0, [fp, #-0x30]
    // 0x91ffd8: StoreField: r1->field_13 = d0
    //     0x91ffd8: stur            d0, [x1, #0x13]
    // 0x91ffdc: ldur            d0, [fp, #-0x28]
    // 0x91ffe0: StoreField: r1->field_1b = d0
    //     0x91ffe0: stur            d0, [x1, #0x1b]
    // 0x91ffe4: r0 = CustomPaint()
    //     0x91ffe4: bl              #0x920094  ; AllocateCustomPaintStub -> CustomPaint (size=0x24)
    // 0x91ffe8: mov             x1, x0
    // 0x91ffec: ldur            x0, [fp, #-0x20]
    // 0x91fff0: StoreField: r1->field_f = r0
    //     0x91fff0: stur            w0, [x1, #0xf]
    // 0x91fff4: r0 = Instance_Size
    //     0x91fff4: ldr             x0, [PP, #0x4228]  ; [pp+0x4228] Obj!Size@c3c8d1
    // 0x91fff8: ArrayStore: r1[0] = r0  ; List_4
    //     0x91fff8: stur            w0, [x1, #0x17]
    // 0x91fffc: r0 = false
    //     0x91fffc: add             x0, NULL, #0x30  ; false
    // 0x920000: StoreField: r1->field_1b = r0
    //     0x920000: stur            w0, [x1, #0x1b]
    // 0x920004: StoreField: r1->field_1f = r0
    //     0x920004: stur            w0, [x1, #0x1f]
    // 0x920008: mov             x0, x1
    // 0x92000c: ldur            x2, [fp, #-0x10]
    // 0x920010: StoreField: r2->field_13 = r0
    //     0x920010: stur            w0, [x2, #0x13]
    //     0x920014: ldurb           w16, [x2, #-1]
    //     0x920018: ldurb           w17, [x0, #-1]
    //     0x92001c: and             x16, x17, x16, lsr #2
    //     0x920020: tst             x16, HEAP, lsr #32
    //     0x920024: b.eq            #0x92002c
    //     0x920028: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x92002c: ldr             x0, [fp, #0x10]
    // 0x920030: LoadField: r3 = r0->field_1b
    //     0x920030: ldur            w3, [x0, #0x1b]
    // 0x920034: DecompressPointer r3
    //     0x920034: add             x3, x3, HEAP, lsl #32
    // 0x920038: r16 = Sentinel
    //     0x920038: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x92003c: cmp             w3, w16
    // 0x920040: b.eq            #0x920088
    // 0x920044: stur            x3, [fp, #-8]
    // 0x920048: r1 = Function '<anonymous closure>':.
    //     0x920048: add             x1, PP, #0x40, lsl #12  ; [pp+0x40100] AnonymousClosure: (0x9200ac), in [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_buildWaterDrop (0x91ff30)
    //     0x92004c: ldr             x1, [x1, #0x100]
    // 0x920050: r0 = AllocateClosure()
    //     0x920050: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x920054: stur            x0, [fp, #-0x10]
    // 0x920058: r0 = AnimatedBuilder()
    //     0x920058: bl              #0x62a7f4  ; AllocateAnimatedBuilderStub -> AnimatedBuilder (size=0x18)
    // 0x92005c: ldur            x1, [fp, #-0x10]
    // 0x920060: StoreField: r0->field_f = r1
    //     0x920060: stur            w1, [x0, #0xf]
    // 0x920064: ldur            x1, [fp, #-8]
    // 0x920068: StoreField: r0->field_b = r1
    //     0x920068: stur            w1, [x0, #0xb]
    // 0x92006c: LeaveFrame
    //     0x92006c: mov             SP, fp
    //     0x920070: ldp             fp, lr, [SP], #0x10
    // 0x920074: ret
    //     0x920074: ret             
    // 0x920078: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x920078: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x92007c: b               #0x91ff48
    // 0x920080: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x920080: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x920084: r0 = NullCastErrorSharedWithFPURegs()
    //     0x920084: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x920088: r9 = _waterDropHiddenController
    //     0x920088: add             x9, PP, #0x40, lsl #12  ; [pp+0x40108] Field <_CupertinoIndicatorState@765089737._waterDropHiddenController@765089737>: late (offset: 0x1c)
    //     0x92008c: ldr             x9, [x9, #0x108]
    // 0x920090: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x920090: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] Opacity <anonymous closure>(dynamic, BuildContext, Widget?) {
    // ** addr: 0x9200ac, size: 0x1d4
    // 0x9200ac: EnterFrame
    //     0x9200ac: stp             fp, lr, [SP, #-0x10]!
    //     0x9200b0: mov             fp, SP
    // 0x9200b4: AllocStack(0x30)
    //     0x9200b4: sub             SP, SP, #0x30
    // 0x9200b8: SetupParameters()
    //     0x9200b8: ldr             x0, [fp, #0x20]
    //     0x9200bc: ldur            w1, [x0, #0x17]
    //     0x9200c0: add             x1, x1, HEAP, lsl #32
    //     0x9200c4: stur            x1, [fp, #-8]
    // 0x9200c8: CheckStackOverflow
    //     0x9200c8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x9200cc: cmp             SP, x16
    //     0x9200d0: b.ls            #0x920248
    // 0x9200d4: LoadField: r0 = r1->field_f
    //     0x9200d4: ldur            w0, [x1, #0xf]
    // 0x9200d8: DecompressPointer r0
    //     0x9200d8: add             x0, x0, HEAP, lsl #32
    // 0x9200dc: LoadField: r2 = r0->field_b
    //     0x9200dc: ldur            w2, [x0, #0xb]
    // 0x9200e0: DecompressPointer r2
    //     0x9200e0: add             x2, x2, HEAP, lsl #32
    // 0x9200e4: cmp             w2, NULL
    // 0x9200e8: b.eq            #0x920250
    // 0x9200ec: LoadField: r3 = r2->field_b
    //     0x9200ec: ldur            w3, [x2, #0xb]
    // 0x9200f0: DecompressPointer r3
    //     0x9200f0: add             x3, x3, HEAP, lsl #32
    // 0x9200f4: LoadField: r2 = r3->field_f
    //     0x9200f4: ldur            w2, [x3, #0xf]
    // 0x9200f8: DecompressPointer r2
    //     0x9200f8: add             x2, x2, HEAP, lsl #32
    // 0x9200fc: r16 = Instance_IndicatorMode
    //     0x9200fc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c8] Obj!IndicatorMode@c45391
    //     0x920100: ldr             x16, [x16, #0x1c8]
    // 0x920104: cmp             w2, w16
    // 0x920108: b.ne            #0x920174
    // 0x92010c: ArrayLoad: d0 = r3[0]  ; List_8
    //     0x92010c: ldur            d0, [x3, #0x17]
    // 0x920110: LoadField: d1 = r3->field_37
    //     0x920110: ldur            d1, [x3, #0x37]
    // 0x920114: fdiv            d2, d0, d1
    // 0x920118: r0 = inline_Allocate_Double()
    //     0x920118: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x92011c: add             x0, x0, #0x10
    //     0x920120: cmp             x2, x0
    //     0x920124: b.ls            #0x920254
    //     0x920128: str             x0, [THR, #0x50]  ; THR::top
    //     0x92012c: sub             x0, x0, #0xf
    //     0x920130: movz            x2, #0xd148
    //     0x920134: movk            x2, #0x3, lsl #16
    //     0x920138: stur            x2, [x0, #-1]
    // 0x92013c: StoreField: r0->field_7 = d2
    //     0x92013c: stur            d2, [x0, #7]
    // 0x920140: r16 = 0.000000
    //     0x920140: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x920144: stp             x16, x0, [SP, #8]
    // 0x920148: r16 = 1.000000
    //     0x920148: ldr             x16, [PP, #0x5c50]  ; [pp+0x5c50] 1
    // 0x92014c: str             x16, [SP]
    // 0x920150: r0 = clamp()
    //     0x920150: bl              #0x7e2010  ; [dart:core] _Double::clamp
    // 0x920154: LoadField: d0 = r0->field_7
    //     0x920154: ldur            d0, [x0, #7]
    // 0x920158: r16 = Instance_Interval
    //     0x920158: add             x16, PP, #0x40, lsl #12  ; [pp+0x400c0] Obj!Interval@c390d1
    //     0x92015c: ldr             x16, [x16, #0xc0]
    // 0x920160: str             x16, [SP, #8]
    // 0x920164: str             d0, [SP]
    // 0x920168: r0 = transform()
    //     0x920168: bl              #0xb9a798  ; [package:flutter/src/animation/curves.dart] Curve::transform
    // 0x92016c: LoadField: d0 = r0->field_7
    //     0x92016c: ldur            d0, [x0, #7]
    // 0x920170: b               #0x92020c
    // 0x920174: r16 = Instance_IndicatorMode
    //     0x920174: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x920178: ldr             x16, [x16, #0x1d0]
    // 0x92017c: cmp             w2, w16
    // 0x920180: b.ne            #0x92018c
    // 0x920184: d0 = 1.000000
    //     0x920184: fmov            d0, #1.00000000
    // 0x920188: b               #0x92020c
    // 0x92018c: r16 = Instance_IndicatorMode
    //     0x92018c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x920190: ldr             x16, [x16, #0x1b8]
    // 0x920194: cmp             w2, w16
    // 0x920198: b.eq            #0x9201cc
    // 0x92019c: r16 = Instance_IndicatorMode
    //     0x92019c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x9201a0: ldr             x16, [x16, #0x158]
    // 0x9201a4: cmp             w2, w16
    // 0x9201a8: b.eq            #0x9201cc
    // 0x9201ac: r16 = Instance_IndicatorMode
    //     0x9201ac: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x9201b0: ldr             x16, [x16, #0x160]
    // 0x9201b4: cmp             w2, w16
    // 0x9201b8: b.eq            #0x9201cc
    // 0x9201bc: r16 = Instance_IndicatorMode
    //     0x9201bc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x9201c0: ldr             x16, [x16, #0x190]
    // 0x9201c4: cmp             w2, w16
    // 0x9201c8: b.ne            #0x920208
    // 0x9201cc: d0 = 1.000000
    //     0x9201cc: fmov            d0, #1.00000000
    // 0x9201d0: LoadField: r1 = r0->field_1b
    //     0x9201d0: ldur            w1, [x0, #0x1b]
    // 0x9201d4: DecompressPointer r1
    //     0x9201d4: add             x1, x1, HEAP, lsl #32
    // 0x9201d8: r16 = Sentinel
    //     0x9201d8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9201dc: cmp             w1, w16
    // 0x9201e0: b.eq            #0x92026c
    // 0x9201e4: LoadField: r0 = r1->field_37
    //     0x9201e4: ldur            w0, [x1, #0x37]
    // 0x9201e8: DecompressPointer r0
    //     0x9201e8: add             x0, x0, HEAP, lsl #32
    // 0x9201ec: r16 = Sentinel
    //     0x9201ec: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x9201f0: cmp             w0, w16
    // 0x9201f4: b.eq            #0x920278
    // 0x9201f8: LoadField: d1 = r0->field_7
    //     0x9201f8: ldur            d1, [x0, #7]
    // 0x9201fc: fsub            d2, d0, d1
    // 0x920200: mov             v0.16b, v2.16b
    // 0x920204: b               #0x92020c
    // 0x920208: d0 = 0.000000
    //     0x920208: eor             v0.16b, v0.16b, v0.16b
    // 0x92020c: ldur            x0, [fp, #-8]
    // 0x920210: stur            d0, [fp, #-0x18]
    // 0x920214: LoadField: r1 = r0->field_13
    //     0x920214: ldur            w1, [x0, #0x13]
    // 0x920218: DecompressPointer r1
    //     0x920218: add             x1, x1, HEAP, lsl #32
    // 0x92021c: stur            x1, [fp, #-0x10]
    // 0x920220: r0 = Opacity()
    //     0x920220: bl              #0x91fe74  ; AllocateOpacityStub -> Opacity (size=0x1c)
    // 0x920224: ldur            d0, [fp, #-0x18]
    // 0x920228: StoreField: r0->field_f = d0
    //     0x920228: stur            d0, [x0, #0xf]
    // 0x92022c: r1 = false
    //     0x92022c: add             x1, NULL, #0x30  ; false
    // 0x920230: ArrayStore: r0[0] = r1  ; List_4
    //     0x920230: stur            w1, [x0, #0x17]
    // 0x920234: ldur            x1, [fp, #-0x10]
    // 0x920238: StoreField: r0->field_b = r1
    //     0x920238: stur            w1, [x0, #0xb]
    // 0x92023c: LeaveFrame
    //     0x92023c: mov             SP, fp
    //     0x920240: ldp             fp, lr, [SP], #0x10
    // 0x920244: ret
    //     0x920244: ret             
    // 0x920248: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x920248: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x92024c: b               #0x9200d4
    // 0x920250: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x920250: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x920254: SaveReg d2
    //     0x920254: str             q2, [SP, #-0x10]!
    // 0x920258: SaveReg r1
    //     0x920258: str             x1, [SP, #-8]!
    // 0x92025c: r0 = AllocateDouble()
    //     0x92025c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x920260: RestoreReg r1
    //     0x920260: ldr             x1, [SP], #8
    // 0x920264: RestoreReg d2
    //     0x920264: ldr             q2, [SP], #0x10
    // 0x920268: b               #0x92013c
    // 0x92026c: r9 = _waterDropHiddenController
    //     0x92026c: add             x9, PP, #0x40, lsl #12  ; [pp+0x40108] Field <_CupertinoIndicatorState@765089737._waterDropHiddenController@765089737>: late (offset: 0x1c)
    //     0x920270: ldr             x9, [x9, #0x108]
    // 0x920274: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x920274: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
    // 0x920278: r9 = _value
    //     0x920278: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x92027c: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x92027c: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
  }
  get _ _useWaterDrop(/* No info */) {
    // ** addr: 0x920280, size: 0x54
    // 0x920280: EnterFrame
    //     0x920280: stp             fp, lr, [SP, #-0x10]!
    //     0x920284: mov             fp, SP
    // 0x920288: ldr             x1, [fp, #0x10]
    // 0x92028c: LoadField: r2 = r1->field_b
    //     0x92028c: ldur            w2, [x1, #0xb]
    // 0x920290: DecompressPointer r2
    //     0x920290: add             x2, x2, HEAP, lsl #32
    // 0x920294: cmp             w2, NULL
    // 0x920298: b.eq            #0x9202d0
    // 0x92029c: LoadField: r1 = r2->field_b
    //     0x92029c: ldur            w1, [x2, #0xb]
    // 0x9202a0: DecompressPointer r1
    //     0x9202a0: add             x1, x1, HEAP, lsl #32
    // 0x9202a4: LoadField: r2 = r1->field_7
    //     0x9202a4: ldur            w2, [x1, #7]
    // 0x9202a8: DecompressPointer r2
    //     0x9202a8: add             x2, x2, HEAP, lsl #32
    // 0x9202ac: LoadField: r1 = r2->field_37
    //     0x9202ac: ldur            w1, [x2, #0x37]
    // 0x9202b0: DecompressPointer r1
    //     0x9202b0: add             x1, x1, HEAP, lsl #32
    // 0x9202b4: cmp             w1, NULL
    // 0x9202b8: r16 = true
    //     0x9202b8: add             x16, NULL, #0x20  ; true
    // 0x9202bc: r17 = false
    //     0x9202bc: add             x17, NULL, #0x30  ; false
    // 0x9202c0: csel            x0, x16, x17, eq
    // 0x9202c4: LeaveFrame
    //     0x9202c4: mov             SP, fp
    //     0x9202c8: ldp             fp, lr, [SP], #0x10
    // 0x9202cc: ret
    //     0x9202cc: ret             
    // 0x9202d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x9202d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa1d958, size: 0xd8
    // 0xa1d958: EnterFrame
    //     0xa1d958: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d95c: mov             fp, SP
    // 0xa1d960: AllocStack(0x20)
    //     0xa1d960: sub             SP, SP, #0x20
    // 0xa1d964: CheckStackOverflow
    //     0xa1d964: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d968: cmp             SP, x16
    //     0xa1d96c: b.ls            #0xa1da24
    // 0xa1d970: r1 = <double>
    //     0xa1d970: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa1d974: r0 = AnimationController()
    //     0xa1d974: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa1d978: stur            x0, [fp, #-8]
    // 0xa1d97c: ldr             x16, [fp, #0x10]
    // 0xa1d980: stp             x16, x0, [SP, #8]
    // 0xa1d984: r16 = Instance_Duration
    //     0xa1d984: add             x16, PP, #0x22, lsl #12  ; [pp+0x220e0] Obj!Duration@c47e91
    //     0xa1d988: ldr             x16, [x16, #0xe0]
    // 0xa1d98c: str             x16, [SP]
    // 0xa1d990: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0xa1d990: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0xa1d994: ldr             x4, [x4, #0x4e0]
    // 0xa1d998: r0 = AnimationController()
    //     0xa1d998: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa1d99c: ldur            x0, [fp, #-8]
    // 0xa1d9a0: ldr             x1, [fp, #0x10]
    // 0xa1d9a4: StoreField: r1->field_1b = r0
    //     0xa1d9a4: stur            w0, [x1, #0x1b]
    //     0xa1d9a8: ldurb           w16, [x1, #-1]
    //     0xa1d9ac: ldurb           w17, [x0, #-1]
    //     0xa1d9b0: and             x16, x17, x16, lsr #2
    //     0xa1d9b4: tst             x16, HEAP, lsr #32
    //     0xa1d9b8: b.eq            #0xa1d9c0
    //     0xa1d9bc: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d9c0: LoadField: r0 = r1->field_b
    //     0xa1d9c0: ldur            w0, [x1, #0xb]
    // 0xa1d9c4: DecompressPointer r0
    //     0xa1d9c4: add             x0, x0, HEAP, lsl #32
    // 0xa1d9c8: cmp             w0, NULL
    // 0xa1d9cc: b.eq            #0xa1da2c
    // 0xa1d9d0: LoadField: r2 = r0->field_b
    //     0xa1d9d0: ldur            w2, [x0, #0xb]
    // 0xa1d9d4: DecompressPointer r2
    //     0xa1d9d4: add             x2, x2, HEAP, lsl #32
    // 0xa1d9d8: LoadField: r0 = r2->field_b
    //     0xa1d9d8: ldur            w0, [x2, #0xb]
    // 0xa1d9dc: DecompressPointer r0
    //     0xa1d9dc: add             x0, x0, HEAP, lsl #32
    // 0xa1d9e0: stur            x0, [fp, #-8]
    // 0xa1d9e4: r1 = 1
    //     0xa1d9e4: movz            x1, #0x1
    // 0xa1d9e8: r0 = AllocateContext()
    //     0xa1d9e8: bl              #0xc5def4  ; AllocateContextStub
    // 0xa1d9ec: mov             x1, x0
    // 0xa1d9f0: ldr             x0, [fp, #0x10]
    // 0xa1d9f4: StoreField: r1->field_f = r0
    //     0xa1d9f4: stur            w0, [x1, #0xf]
    // 0xa1d9f8: mov             x2, x1
    // 0xa1d9fc: r1 = Function '_onModeChange@765089737':.
    //     0xa1d9fc: add             x1, PP, #0x40, lsl #12  ; [pp+0x40110] AnonymousClosure: (0xa1da78), in [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_onModeChange (0xa1dacc)
    //     0xa1da00: ldr             x1, [x1, #0x110]
    // 0xa1da04: r0 = AllocateClosure()
    //     0xa1da04: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1da08: ldur            x16, [fp, #-8]
    // 0xa1da0c: stp             x0, x16, [SP]
    // 0xa1da10: r0 = addModeChangeListener()
    //     0xa1da10: bl              #0xa1da30  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::addModeChangeListener
    // 0xa1da14: r0 = Null
    //     0xa1da14: mov             x0, NULL
    // 0xa1da18: LeaveFrame
    //     0xa1da18: mov             SP, fp
    //     0xa1da1c: ldp             fp, lr, [SP], #0x10
    // 0xa1da20: ret
    //     0xa1da20: ret             
    // 0xa1da24: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1da24: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1da28: b               #0xa1d970
    // 0xa1da2c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1da2c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _onModeChange(dynamic, IndicatorMode, double) {
    // ** addr: 0xa1da78, size: 0x54
    // 0xa1da78: EnterFrame
    //     0xa1da78: stp             fp, lr, [SP, #-0x10]!
    //     0xa1da7c: mov             fp, SP
    // 0xa1da80: AllocStack(0x18)
    //     0xa1da80: sub             SP, SP, #0x18
    // 0xa1da84: SetupParameters()
    //     0xa1da84: ldr             x0, [fp, #0x20]
    //     0xa1da88: ldur            w1, [x0, #0x17]
    //     0xa1da8c: add             x1, x1, HEAP, lsl #32
    // 0xa1da90: CheckStackOverflow
    //     0xa1da90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1da94: cmp             SP, x16
    //     0xa1da98: b.ls            #0xa1dac4
    // 0xa1da9c: LoadField: r0 = r1->field_f
    //     0xa1da9c: ldur            w0, [x1, #0xf]
    // 0xa1daa0: DecompressPointer r0
    //     0xa1daa0: add             x0, x0, HEAP, lsl #32
    // 0xa1daa4: ldr             x16, [fp, #0x18]
    // 0xa1daa8: stp             x16, x0, [SP, #8]
    // 0xa1daac: ldr             x16, [fp, #0x10]
    // 0xa1dab0: str             x16, [SP]
    // 0xa1dab4: r0 = _onModeChange()
    //     0xa1dab4: bl              #0xa1dacc  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_onModeChange
    // 0xa1dab8: LeaveFrame
    //     0xa1dab8: mov             SP, fp
    //     0xa1dabc: ldp             fp, lr, [SP], #0x10
    // 0xa1dac0: ret
    //     0xa1dac0: ret             
    // 0xa1dac4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1dac4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1dac8: b               #0xa1da9c
  }
  _ _onModeChange(/* No info */) {
    // ** addr: 0xa1dacc, size: 0x9c
    // 0xa1dacc: EnterFrame
    //     0xa1dacc: stp             fp, lr, [SP, #-0x10]!
    //     0xa1dad0: mov             fp, SP
    // 0xa1dad4: AllocStack(0x10)
    //     0xa1dad4: sub             SP, SP, #0x10
    // 0xa1dad8: CheckStackOverflow
    //     0xa1dad8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1dadc: cmp             SP, x16
    //     0xa1dae0: b.ls            #0xa1db54
    // 0xa1dae4: ldr             x0, [fp, #0x18]
    // 0xa1dae8: r16 = Instance_IndicatorMode
    //     0xa1dae8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xa1daec: ldr             x16, [x16, #0x1b8]
    // 0xa1daf0: cmp             w0, w16
    // 0xa1daf4: b.ne            #0xa1db44
    // 0xa1daf8: ldr             x0, [fp, #0x20]
    // 0xa1dafc: LoadField: r1 = r0->field_1b
    //     0xa1dafc: ldur            w1, [x0, #0x1b]
    // 0xa1db00: DecompressPointer r1
    //     0xa1db00: add             x1, x1, HEAP, lsl #32
    // 0xa1db04: r16 = Sentinel
    //     0xa1db04: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa1db08: cmp             w1, w16
    // 0xa1db0c: b.eq            #0xa1db5c
    // 0xa1db10: LoadField: r0 = r1->field_2f
    //     0xa1db10: ldur            w0, [x1, #0x2f]
    // 0xa1db14: DecompressPointer r0
    //     0xa1db14: add             x0, x0, HEAP, lsl #32
    // 0xa1db18: cmp             w0, NULL
    // 0xa1db1c: b.eq            #0xa1db30
    // 0xa1db20: LoadField: r2 = r0->field_7
    //     0xa1db20: ldur            w2, [x0, #7]
    // 0xa1db24: DecompressPointer r2
    //     0xa1db24: add             x2, x2, HEAP, lsl #32
    // 0xa1db28: cmp             w2, NULL
    // 0xa1db2c: b.ne            #0xa1db44
    // 0xa1db30: r16 = 0.000000
    //     0xa1db30: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0xa1db34: stp             x16, x1, [SP]
    // 0xa1db38: r4 = const [0, 0x2, 0x2, 0x1, from, 0x1, null]
    //     0xa1db38: add             x4, PP, #0x16, lsl #12  ; [pp+0x16d98] List(7) [0, 0x2, 0x2, 0x1, "from", 0x1, Null]
    //     0xa1db3c: ldr             x4, [x4, #0xd98]
    // 0xa1db40: r0 = forward()
    //     0xa1db40: bl              #0x5d86fc  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::forward
    // 0xa1db44: r0 = Null
    //     0xa1db44: mov             x0, NULL
    // 0xa1db48: LeaveFrame
    //     0xa1db48: mov             SP, fp
    //     0xa1db4c: ldp             fp, lr, [SP], #0x10
    // 0xa1db50: ret
    //     0xa1db50: ret             
    // 0xa1db54: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1db54: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1db58: b               #0xa1dae4
    // 0xa1db5c: r9 = _waterDropHiddenController
    //     0xa1db5c: add             x9, PP, #0x40, lsl #12  ; [pp+0x40108] Field <_CupertinoIndicatorState@765089737._waterDropHiddenController@765089737>: late (offset: 0x1c)
    //     0xa1db60: ldr             x9, [x9, #0x108]
    // 0xa1db64: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa1db64: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa555f0, size: 0xc4
    // 0xa555f0: EnterFrame
    //     0xa555f0: stp             fp, lr, [SP, #-0x10]!
    //     0xa555f4: mov             fp, SP
    // 0xa555f8: AllocStack(0x18)
    //     0xa555f8: sub             SP, SP, #0x18
    // 0xa555fc: CheckStackOverflow
    //     0xa555fc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa55600: cmp             SP, x16
    //     0xa55604: b.ls            #0xa5569c
    // 0xa55608: ldr             x0, [fp, #0x10]
    // 0xa5560c: LoadField: r1 = r0->field_b
    //     0xa5560c: ldur            w1, [x0, #0xb]
    // 0xa55610: DecompressPointer r1
    //     0xa55610: add             x1, x1, HEAP, lsl #32
    // 0xa55614: cmp             w1, NULL
    // 0xa55618: b.eq            #0xa556a4
    // 0xa5561c: LoadField: r2 = r1->field_b
    //     0xa5561c: ldur            w2, [x1, #0xb]
    // 0xa55620: DecompressPointer r2
    //     0xa55620: add             x2, x2, HEAP, lsl #32
    // 0xa55624: LoadField: r1 = r2->field_b
    //     0xa55624: ldur            w1, [x2, #0xb]
    // 0xa55628: DecompressPointer r1
    //     0xa55628: add             x1, x1, HEAP, lsl #32
    // 0xa5562c: stur            x1, [fp, #-8]
    // 0xa55630: r1 = 1
    //     0xa55630: movz            x1, #0x1
    // 0xa55634: r0 = AllocateContext()
    //     0xa55634: bl              #0xc5def4  ; AllocateContextStub
    // 0xa55638: mov             x1, x0
    // 0xa5563c: ldr             x0, [fp, #0x10]
    // 0xa55640: StoreField: r1->field_f = r0
    //     0xa55640: stur            w0, [x1, #0xf]
    // 0xa55644: mov             x2, x1
    // 0xa55648: r1 = Function '_onModeChange@765089737':.
    //     0xa55648: add             x1, PP, #0x40, lsl #12  ; [pp+0x40110] AnonymousClosure: (0xa1da78), in [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_onModeChange (0xa1dacc)
    //     0xa5564c: ldr             x1, [x1, #0x110]
    // 0xa55650: r0 = AllocateClosure()
    //     0xa55650: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa55654: ldur            x16, [fp, #-8]
    // 0xa55658: stp             x0, x16, [SP]
    // 0xa5565c: r0 = removeModeChangeListener()
    //     0xa5565c: bl              #0xa55758  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::removeModeChangeListener
    // 0xa55660: ldr             x0, [fp, #0x10]
    // 0xa55664: LoadField: r1 = r0->field_1b
    //     0xa55664: ldur            w1, [x0, #0x1b]
    // 0xa55668: DecompressPointer r1
    //     0xa55668: add             x1, x1, HEAP, lsl #32
    // 0xa5566c: r16 = Sentinel
    //     0xa5566c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa55670: cmp             w1, w16
    // 0xa55674: b.eq            #0xa556a8
    // 0xa55678: str             x1, [SP]
    // 0xa5567c: r0 = dispose()
    //     0xa5567c: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa55680: ldr             x16, [fp, #0x10]
    // 0xa55684: str             x16, [SP]
    // 0xa55688: r0 = dispose()
    //     0xa55688: bl              #0xa556b4  ; [package:easy_refresh/easy_refresh.dart] __CupertinoIndicatorState&State&SingleTickerProviderStateMixin::dispose
    // 0xa5568c: r0 = Null
    //     0xa5568c: mov             x0, NULL
    // 0xa55690: LeaveFrame
    //     0xa55690: mov             SP, fp
    //     0xa55694: ldp             fp, lr, [SP], #0x10
    // 0xa55698: ret
    //     0xa55698: ret             
    // 0xa5569c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa5569c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa556a0: b               #0xa55608
    // 0xa556a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa556a4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa556a8: r9 = _waterDropHiddenController
    //     0xa556a8: add             x9, PP, #0x40, lsl #12  ; [pp+0x40108] Field <_CupertinoIndicatorState@765089737._waterDropHiddenController@765089737>: late (offset: 0x1c)
    //     0xa556ac: ldr             x9, [x9, #0x108]
    // 0xa556b0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa556b0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3267, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __ClassicIndicatorState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ createTicker(/* No info */) {
    // ** addr: 0x552f8c, size: 0x184
    // 0x552f8c: EnterFrame
    //     0x552f8c: stp             fp, lr, [SP, #-0x10]!
    //     0x552f90: mov             fp, SP
    // 0x552f94: AllocStack(0x20)
    //     0x552f94: sub             SP, SP, #0x20
    // 0x552f98: CheckStackOverflow
    //     0x552f98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x552f9c: cmp             SP, x16
    //     0x552fa0: b.ls            #0x553100
    // 0x552fa4: ldr             x0, [fp, #0x18]
    // 0x552fa8: ArrayLoad: r1 = r0[0]  ; List_4
    //     0x552fa8: ldur            w1, [x0, #0x17]
    // 0x552fac: DecompressPointer r1
    //     0x552fac: add             x1, x1, HEAP, lsl #32
    // 0x552fb0: cmp             w1, NULL
    // 0x552fb4: b.ne            #0x552fc0
    // 0x552fb8: str             x0, [SP]
    // 0x552fbc: r0 = _updateTickerModeNotifier()
    //     0x552fbc: bl              #0x553134  ; [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x552fc0: ldr             x0, [fp, #0x18]
    // 0x552fc4: LoadField: r1 = r0->field_13
    //     0x552fc4: ldur            w1, [x0, #0x13]
    // 0x552fc8: DecompressPointer r1
    //     0x552fc8: add             x1, x1, HEAP, lsl #32
    // 0x552fcc: cmp             w1, NULL
    // 0x552fd0: b.ne            #0x553068
    // 0x552fd4: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0x552fd4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x552fd8: ldr             x0, [x0, #0x528]
    //     0x552fdc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x552fe0: cmp             w0, w16
    //     0x552fe4: b.ne            #0x552ff0
    //     0x552fe8: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0x552fec: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x552ff0: r1 = <_WidgetTicker>
    //     0x552ff0: add             x1, PP, #0x22, lsl #12  ; [pp+0x222e8] TypeArguments: <_WidgetTicker>
    //     0x552ff4: ldr             x1, [x1, #0x2e8]
    // 0x552ff8: stur            x0, [fp, #-8]
    // 0x552ffc: r0 = _Set()
    //     0x552ffc: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0x553000: mov             x1, x0
    // 0x553004: ldur            x0, [fp, #-8]
    // 0x553008: stur            x1, [fp, #-0x10]
    // 0x55300c: StoreField: r1->field_1b = r0
    //     0x55300c: stur            w0, [x1, #0x1b]
    // 0x553010: StoreField: r1->field_b = rZR
    //     0x553010: stur            wzr, [x1, #0xb]
    // 0x553014: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0x553014: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x553018: ldr             x0, [x0, #0x530]
    //     0x55301c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x553020: cmp             w0, w16
    //     0x553024: b.ne            #0x553030
    //     0x553028: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0x55302c: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0x553030: mov             x1, x0
    // 0x553034: ldur            x0, [fp, #-0x10]
    // 0x553038: StoreField: r0->field_f = r1
    //     0x553038: stur            w1, [x0, #0xf]
    // 0x55303c: StoreField: r0->field_13 = rZR
    //     0x55303c: stur            wzr, [x0, #0x13]
    // 0x553040: ArrayStore: r0[0] = rZR  ; List_4
    //     0x553040: stur            wzr, [x0, #0x17]
    // 0x553044: ldr             x1, [fp, #0x18]
    // 0x553048: StoreField: r1->field_13 = r0
    //     0x553048: stur            w0, [x1, #0x13]
    //     0x55304c: ldurb           w16, [x1, #-1]
    //     0x553050: ldurb           w17, [x0, #-1]
    //     0x553054: and             x16, x17, x16, lsr #2
    //     0x553058: tst             x16, HEAP, lsr #32
    //     0x55305c: b.eq            #0x553064
    //     0x553060: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553064: b               #0x55306c
    // 0x553068: mov             x1, x0
    // 0x55306c: ldr             x0, [fp, #0x10]
    // 0x553070: r0 = _WidgetTicker()
    //     0x553070: bl              #0x54b590  ; Allocate_WidgetTickerStub -> _WidgetTicker (size=0x20)
    // 0x553074: mov             x2, x0
    // 0x553078: ldr             x1, [fp, #0x18]
    // 0x55307c: stur            x2, [fp, #-8]
    // 0x553080: StoreField: r2->field_1b = r1
    //     0x553080: stur            w1, [x2, #0x1b]
    // 0x553084: r0 = false
    //     0x553084: add             x0, NULL, #0x30  ; false
    // 0x553088: StoreField: r2->field_b = r0
    //     0x553088: stur            w0, [x2, #0xb]
    // 0x55308c: ldr             x0, [fp, #0x10]
    // 0x553090: StoreField: r2->field_13 = r0
    //     0x553090: stur            w0, [x2, #0x13]
    // 0x553094: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x553094: ldur            w0, [x1, #0x17]
    // 0x553098: DecompressPointer r0
    //     0x553098: add             x0, x0, HEAP, lsl #32
    // 0x55309c: cmp             w0, NULL
    // 0x5530a0: b.eq            #0x553108
    // 0x5530a4: r3 = LoadClassIdInstr(r0)
    //     0x5530a4: ldur            x3, [x0, #-1]
    //     0x5530a8: ubfx            x3, x3, #0xc, #0x14
    // 0x5530ac: str             x0, [SP]
    // 0x5530b0: mov             x0, x3
    // 0x5530b4: r0 = GDT[cid_x0 + 0x801]()
    //     0x5530b4: add             lr, x0, #0x801
    //     0x5530b8: ldr             lr, [x21, lr, lsl #3]
    //     0x5530bc: blr             lr
    // 0x5530c0: eor             x1, x0, #0x10
    // 0x5530c4: ldur            x16, [fp, #-8]
    // 0x5530c8: stp             x1, x16, [SP]
    // 0x5530cc: r0 = muted=()
    //     0x5530cc: bl              #0x54a1d8  ; [package:flutter/src/scheduler/ticker.dart] Ticker::muted=
    // 0x5530d0: ldr             x0, [fp, #0x18]
    // 0x5530d4: LoadField: r1 = r0->field_13
    //     0x5530d4: ldur            w1, [x0, #0x13]
    // 0x5530d8: DecompressPointer r1
    //     0x5530d8: add             x1, x1, HEAP, lsl #32
    // 0x5530dc: cmp             w1, NULL
    // 0x5530e0: b.eq            #0x55310c
    // 0x5530e4: ldur            x16, [fp, #-8]
    // 0x5530e8: stp             x16, x1, [SP]
    // 0x5530ec: r0 = add()
    //     0x5530ec: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0x5530f0: ldur            x0, [fp, #-8]
    // 0x5530f4: LeaveFrame
    //     0x5530f4: mov             SP, fp
    //     0x5530f8: ldp             fp, lr, [SP], #0x10
    // 0x5530fc: ret
    //     0x5530fc: ret             
    // 0x553100: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553100: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553104: b               #0x552fa4
    // 0x553108: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553108: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x55310c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55310c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x553134, size: 0x148
    // 0x553134: EnterFrame
    //     0x553134: stp             fp, lr, [SP, #-0x10]!
    //     0x553138: mov             fp, SP
    // 0x55313c: AllocStack(0x20)
    //     0x55313c: sub             SP, SP, #0x20
    // 0x553140: CheckStackOverflow
    //     0x553140: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553144: cmp             SP, x16
    //     0x553148: b.ls            #0x553270
    // 0x55314c: ldr             x0, [fp, #0x10]
    // 0x553150: LoadField: r1 = r0->field_f
    //     0x553150: ldur            w1, [x0, #0xf]
    // 0x553154: DecompressPointer r1
    //     0x553154: add             x1, x1, HEAP, lsl #32
    // 0x553158: cmp             w1, NULL
    // 0x55315c: b.eq            #0x553278
    // 0x553160: str             x1, [SP]
    // 0x553164: r0 = getNotifier()
    //     0x553164: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x553168: mov             x1, x0
    // 0x55316c: ldr             x0, [fp, #0x10]
    // 0x553170: stur            x1, [fp, #-0x10]
    // 0x553174: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x553174: ldur            w2, [x0, #0x17]
    // 0x553178: DecompressPointer r2
    //     0x553178: add             x2, x2, HEAP, lsl #32
    // 0x55317c: stur            x2, [fp, #-8]
    // 0x553180: cmp             w1, w2
    // 0x553184: b.ne            #0x553198
    // 0x553188: r0 = Null
    //     0x553188: mov             x0, NULL
    // 0x55318c: LeaveFrame
    //     0x55318c: mov             SP, fp
    //     0x553190: ldp             fp, lr, [SP], #0x10
    // 0x553194: ret
    //     0x553194: ret             
    // 0x553198: cmp             w2, NULL
    // 0x55319c: b.eq            #0x5531f4
    // 0x5531a0: r1 = 1
    //     0x5531a0: movz            x1, #0x1
    // 0x5531a4: r0 = AllocateContext()
    //     0x5531a4: bl              #0xc5def4  ; AllocateContextStub
    // 0x5531a8: mov             x1, x0
    // 0x5531ac: ldr             x0, [fp, #0x10]
    // 0x5531b0: StoreField: r1->field_f = r0
    //     0x5531b0: stur            w0, [x1, #0xf]
    // 0x5531b4: mov             x2, x1
    // 0x5531b8: r1 = Function '_updateTickers@328311458':.
    //     0x5531b8: add             x1, PP, #0x40, lsl #12  ; [pp+0x40210] AnonymousClosure: (0x55327c), in [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickers (0x5532c4)
    //     0x5531bc: ldr             x1, [x1, #0x210]
    // 0x5531c0: r0 = AllocateClosure()
    //     0x5531c0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x5531c4: mov             x1, x0
    // 0x5531c8: ldur            x0, [fp, #-8]
    // 0x5531cc: r2 = LoadClassIdInstr(r0)
    //     0x5531cc: ldur            x2, [x0, #-1]
    //     0x5531d0: ubfx            x2, x2, #0xc, #0x14
    // 0x5531d4: stp             x1, x0, [SP]
    // 0x5531d8: mov             x0, x2
    // 0x5531dc: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x5531dc: movz            x17, #0xc9d0
    //     0x5531e0: add             lr, x0, x17
    //     0x5531e4: ldr             lr, [x21, lr, lsl #3]
    //     0x5531e8: blr             lr
    // 0x5531ec: ldr             x0, [fp, #0x10]
    // 0x5531f0: ldur            x1, [fp, #-0x10]
    // 0x5531f4: r1 = 1
    //     0x5531f4: movz            x1, #0x1
    // 0x5531f8: r0 = AllocateContext()
    //     0x5531f8: bl              #0xc5def4  ; AllocateContextStub
    // 0x5531fc: mov             x1, x0
    // 0x553200: ldr             x0, [fp, #0x10]
    // 0x553204: StoreField: r1->field_f = r0
    //     0x553204: stur            w0, [x1, #0xf]
    // 0x553208: mov             x2, x1
    // 0x55320c: r1 = Function '_updateTickers@328311458':.
    //     0x55320c: add             x1, PP, #0x40, lsl #12  ; [pp+0x40210] AnonymousClosure: (0x55327c), in [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickers (0x5532c4)
    //     0x553210: ldr             x1, [x1, #0x210]
    // 0x553214: r0 = AllocateClosure()
    //     0x553214: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x553218: ldur            x1, [fp, #-0x10]
    // 0x55321c: r2 = LoadClassIdInstr(r1)
    //     0x55321c: ldur            x2, [x1, #-1]
    //     0x553220: ubfx            x2, x2, #0xc, #0x14
    // 0x553224: stp             x0, x1, [SP]
    // 0x553228: mov             x0, x2
    // 0x55322c: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x55322c: movz            x17, #0xcefc
    //     0x553230: add             lr, x0, x17
    //     0x553234: ldr             lr, [x21, lr, lsl #3]
    //     0x553238: blr             lr
    // 0x55323c: ldur            x0, [fp, #-0x10]
    // 0x553240: ldr             x1, [fp, #0x10]
    // 0x553244: ArrayStore: r1[0] = r0  ; List_4
    //     0x553244: stur            w0, [x1, #0x17]
    //     0x553248: ldurb           w16, [x1, #-1]
    //     0x55324c: ldurb           w17, [x0, #-1]
    //     0x553250: and             x16, x17, x16, lsr #2
    //     0x553254: tst             x16, HEAP, lsr #32
    //     0x553258: b.eq            #0x553260
    //     0x55325c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x553260: r0 = Null
    //     0x553260: mov             x0, NULL
    // 0x553264: LeaveFrame
    //     0x553264: mov             SP, fp
    //     0x553268: ldp             fp, lr, [SP], #0x10
    // 0x55326c: ret
    //     0x55326c: ret             
    // 0x553270: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553270: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553274: b               #0x55314c
    // 0x553278: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553278: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] void _updateTickers(dynamic) {
    // ** addr: 0x55327c, size: 0x48
    // 0x55327c: EnterFrame
    //     0x55327c: stp             fp, lr, [SP, #-0x10]!
    //     0x553280: mov             fp, SP
    // 0x553284: AllocStack(0x8)
    //     0x553284: sub             SP, SP, #8
    // 0x553288: SetupParameters()
    //     0x553288: ldr             x0, [fp, #0x10]
    //     0x55328c: ldur            w1, [x0, #0x17]
    //     0x553290: add             x1, x1, HEAP, lsl #32
    // 0x553294: CheckStackOverflow
    //     0x553294: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553298: cmp             SP, x16
    //     0x55329c: b.ls            #0x5532bc
    // 0x5532a0: LoadField: r0 = r1->field_f
    //     0x5532a0: ldur            w0, [x1, #0xf]
    // 0x5532a4: DecompressPointer r0
    //     0x5532a4: add             x0, x0, HEAP, lsl #32
    // 0x5532a8: str             x0, [SP]
    // 0x5532ac: r0 = _updateTickers()
    //     0x5532ac: bl              #0x5532c4  ; [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickers
    // 0x5532b0: LeaveFrame
    //     0x5532b0: mov             SP, fp
    //     0x5532b4: ldp             fp, lr, [SP], #0x10
    // 0x5532b8: ret
    //     0x5532b8: ret             
    // 0x5532bc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x5532bc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x5532c0: b               #0x5532a0
  }
  _ _updateTickers(/* No info */) {
    // ** addr: 0x5532c4, size: 0x168
    // 0x5532c4: EnterFrame
    //     0x5532c4: stp             fp, lr, [SP, #-0x10]!
    //     0x5532c8: mov             fp, SP
    // 0x5532cc: AllocStack(0x28)
    //     0x5532cc: sub             SP, SP, #0x28
    // 0x5532d0: CheckStackOverflow
    //     0x5532d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x5532d4: cmp             SP, x16
    //     0x5532d8: b.ls            #0x553414
    // 0x5532dc: ldr             x1, [fp, #0x10]
    // 0x5532e0: LoadField: r0 = r1->field_13
    //     0x5532e0: ldur            w0, [x1, #0x13]
    // 0x5532e4: DecompressPointer r0
    //     0x5532e4: add             x0, x0, HEAP, lsl #32
    // 0x5532e8: cmp             w0, NULL
    // 0x5532ec: b.eq            #0x553404
    // 0x5532f0: ArrayLoad: r0 = r1[0]  ; List_4
    //     0x5532f0: ldur            w0, [x1, #0x17]
    // 0x5532f4: DecompressPointer r0
    //     0x5532f4: add             x0, x0, HEAP, lsl #32
    // 0x5532f8: cmp             w0, NULL
    // 0x5532fc: b.eq            #0x55341c
    // 0x553300: r2 = LoadClassIdInstr(r0)
    //     0x553300: ldur            x2, [x0, #-1]
    //     0x553304: ubfx            x2, x2, #0xc, #0x14
    // 0x553308: str             x0, [SP]
    // 0x55330c: mov             x0, x2
    // 0x553310: r0 = GDT[cid_x0 + 0x801]()
    //     0x553310: add             lr, x0, #0x801
    //     0x553314: ldr             lr, [x21, lr, lsl #3]
    //     0x553318: blr             lr
    // 0x55331c: eor             x1, x0, #0x10
    // 0x553320: ldr             x0, [fp, #0x10]
    // 0x553324: stur            x1, [fp, #-8]
    // 0x553328: LoadField: r2 = r0->field_13
    //     0x553328: ldur            w2, [x0, #0x13]
    // 0x55332c: DecompressPointer r2
    //     0x55332c: add             x2, x2, HEAP, lsl #32
    // 0x553330: cmp             w2, NULL
    // 0x553334: b.eq            #0x553420
    // 0x553338: str             x2, [SP]
    // 0x55333c: r0 = iterator()
    //     0x55333c: bl              #0x5aab8c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x553340: stur            x0, [fp, #-0x18]
    // 0x553344: LoadField: r2 = r0->field_7
    //     0x553344: ldur            w2, [x0, #7]
    // 0x553348: DecompressPointer r2
    //     0x553348: add             x2, x2, HEAP, lsl #32
    // 0x55334c: stur            x2, [fp, #-0x10]
    // 0x553350: ldur            x1, [fp, #-8]
    // 0x553354: CheckStackOverflow
    //     0x553354: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x553358: cmp             SP, x16
    //     0x55335c: b.ls            #0x553424
    // 0x553360: str             x0, [SP]
    // 0x553364: r0 = moveNext()
    //     0x553364: bl              #0xb9b4b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x553368: tbnz            w0, #4, #0x553404
    // 0x55336c: ldur            x3, [fp, #-0x18]
    // 0x553370: LoadField: r4 = r3->field_33
    //     0x553370: ldur            w4, [x3, #0x33]
    // 0x553374: DecompressPointer r4
    //     0x553374: add             x4, x4, HEAP, lsl #32
    // 0x553378: stur            x4, [fp, #-0x20]
    // 0x55337c: cmp             w4, NULL
    // 0x553380: b.ne            #0x5533b4
    // 0x553384: mov             x0, x4
    // 0x553388: ldur            x2, [fp, #-0x10]
    // 0x55338c: r1 = Null
    //     0x55338c: mov             x1, NULL
    // 0x553390: cmp             w2, NULL
    // 0x553394: b.eq            #0x5533b4
    // 0x553398: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x553398: ldur            w4, [x2, #0x17]
    // 0x55339c: DecompressPointer r4
    //     0x55339c: add             x4, x4, HEAP, lsl #32
    // 0x5533a0: r8 = X0
    //     0x5533a0: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x5533a4: LoadField: r9 = r4->field_7
    //     0x5533a4: ldur            x9, [x4, #7]
    // 0x5533a8: r3 = Null
    //     0x5533a8: add             x3, PP, #0x40, lsl #12  ; [pp+0x40200] Null
    //     0x5533ac: ldr             x3, [x3, #0x200]
    // 0x5533b0: blr             x9
    // 0x5533b4: ldur            x1, [fp, #-8]
    // 0x5533b8: ldur            x0, [fp, #-0x20]
    // 0x5533bc: LoadField: r2 = r0->field_b
    //     0x5533bc: ldur            w2, [x0, #0xb]
    // 0x5533c0: DecompressPointer r2
    //     0x5533c0: add             x2, x2, HEAP, lsl #32
    // 0x5533c4: cmp             w1, w2
    // 0x5533c8: b.eq            #0x5533f8
    // 0x5533cc: StoreField: r0->field_b = r1
    //     0x5533cc: stur            w1, [x0, #0xb]
    // 0x5533d0: tbnz            w1, #4, #0x5533e0
    // 0x5533d4: str             x0, [SP]
    // 0x5533d8: r0 = unscheduleTick()
    //     0x5533d8: bl              #0x54b4a4  ; [package:flutter/src/scheduler/ticker.dart] Ticker::unscheduleTick
    // 0x5533dc: b               #0x5533f8
    // 0x5533e0: str             x0, [SP]
    // 0x5533e4: r0 = shouldScheduleTick()
    //     0x5533e4: bl              #0x54b45c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::shouldScheduleTick
    // 0x5533e8: tbnz            w0, #4, #0x5533f8
    // 0x5533ec: ldur            x16, [fp, #-0x20]
    // 0x5533f0: str             x16, [SP]
    // 0x5533f4: r0 = scheduleTick()
    //     0x5533f4: bl              #0x54a25c  ; [package:flutter/src/scheduler/ticker.dart] Ticker::scheduleTick
    // 0x5533f8: ldur            x0, [fp, #-0x18]
    // 0x5533fc: ldur            x2, [fp, #-0x10]
    // 0x553400: b               #0x553350
    // 0x553404: r0 = Null
    //     0x553404: mov             x0, NULL
    // 0x553408: LeaveFrame
    //     0x553408: mov             SP, fp
    //     0x55340c: ldp             fp, lr, [SP], #0x10
    // 0x553410: ret
    //     0x553410: ret             
    // 0x553414: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553414: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553418: b               #0x5532dc
    // 0x55341c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x55341c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x553420: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x553420: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x553424: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x553424: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x553428: b               #0x553360
  }
  _ activate(/* No info */) {
    // ** addr: 0x8c9d70, size: 0x48
    // 0x8c9d70: EnterFrame
    //     0x8c9d70: stp             fp, lr, [SP, #-0x10]!
    //     0x8c9d74: mov             fp, SP
    // 0x8c9d78: AllocStack(0x8)
    //     0x8c9d78: sub             SP, SP, #8
    // 0x8c9d7c: CheckStackOverflow
    //     0x8c9d7c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c9d80: cmp             SP, x16
    //     0x8c9d84: b.ls            #0x8c9db0
    // 0x8c9d88: ldr             x16, [fp, #0x10]
    // 0x8c9d8c: str             x16, [SP]
    // 0x8c9d90: r0 = _updateTickerModeNotifier()
    //     0x8c9d90: bl              #0x553134  ; [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8c9d94: ldr             x16, [fp, #0x10]
    // 0x8c9d98: str             x16, [SP]
    // 0x8c9d9c: r0 = _updateTickers()
    //     0x8c9d9c: bl              #0x5532c4  ; [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickers
    // 0x8c9da0: r0 = Null
    //     0x8c9da0: mov             x0, NULL
    // 0x8c9da4: LeaveFrame
    //     0x8c9da4: mov             SP, fp
    //     0x8c9da8: ldp             fp, lr, [SP], #0x10
    // 0x8c9dac: ret
    //     0x8c9dac: ret             
    // 0x8c9db0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c9db0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c9db4: b               #0x8c9d88
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa5554c, size: 0xa4
    // 0xa5554c: EnterFrame
    //     0xa5554c: stp             fp, lr, [SP, #-0x10]!
    //     0xa55550: mov             fp, SP
    // 0xa55554: AllocStack(0x18)
    //     0xa55554: sub             SP, SP, #0x18
    // 0xa55558: CheckStackOverflow
    //     0xa55558: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa5555c: cmp             SP, x16
    //     0xa55560: b.ls            #0xa555e8
    // 0xa55564: ldr             x0, [fp, #0x10]
    // 0xa55568: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa55568: ldur            w1, [x0, #0x17]
    // 0xa5556c: DecompressPointer r1
    //     0xa5556c: add             x1, x1, HEAP, lsl #32
    // 0xa55570: stur            x1, [fp, #-8]
    // 0xa55574: cmp             w1, NULL
    // 0xa55578: b.ne            #0xa55584
    // 0xa5557c: mov             x1, x0
    // 0xa55580: b               #0xa555d4
    // 0xa55584: r1 = 1
    //     0xa55584: movz            x1, #0x1
    // 0xa55588: r0 = AllocateContext()
    //     0xa55588: bl              #0xc5def4  ; AllocateContextStub
    // 0xa5558c: mov             x1, x0
    // 0xa55590: ldr             x0, [fp, #0x10]
    // 0xa55594: StoreField: r1->field_f = r0
    //     0xa55594: stur            w0, [x1, #0xf]
    // 0xa55598: mov             x2, x1
    // 0xa5559c: r1 = Function '_updateTickers@328311458':.
    //     0xa5559c: add             x1, PP, #0x40, lsl #12  ; [pp+0x40210] AnonymousClosure: (0x55327c), in [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::_updateTickers (0x5532c4)
    //     0xa555a0: ldr             x1, [x1, #0x210]
    // 0xa555a4: r0 = AllocateClosure()
    //     0xa555a4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa555a8: mov             x1, x0
    // 0xa555ac: ldur            x0, [fp, #-8]
    // 0xa555b0: r2 = LoadClassIdInstr(r0)
    //     0xa555b0: ldur            x2, [x0, #-1]
    //     0xa555b4: ubfx            x2, x2, #0xc, #0x14
    // 0xa555b8: stp             x1, x0, [SP]
    // 0xa555bc: mov             x0, x2
    // 0xa555c0: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa555c0: movz            x17, #0xc9d0
    //     0xa555c4: add             lr, x0, x17
    //     0xa555c8: ldr             lr, [x21, lr, lsl #3]
    //     0xa555cc: blr             lr
    // 0xa555d0: ldr             x1, [fp, #0x10]
    // 0xa555d4: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa555d4: stur            NULL, [x1, #0x17]
    // 0xa555d8: r0 = Null
    //     0xa555d8: mov             x0, NULL
    // 0xa555dc: LeaveFrame
    //     0xa555dc: mov             SP, fp
    //     0xa555e0: ldp             fp, lr, [SP], #0x10
    // 0xa555e4: ret
    //     0xa555e4: ret             
    // 0xa555e8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa555e8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa555ec: b               #0xa55564
  }
}

// class id: 3268, size: 0x28, field offset: 0x1c
class _ClassicIndicatorState extends __ClassicIndicatorState&State&TickerProviderStateMixin {

  late AnimationController _iconAnimationController; // offset: 0x24
  late GlobalKey<State<StatefulWidget>> _iconAnimatedSwitcherKey; // offset: 0x1c
  late DateTime _updateTime; // offset: 0x20

  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8a9c30, size: 0x2c4
    // 0x8a9c30: EnterFrame
    //     0x8a9c30: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9c34: mov             fp, SP
    // 0x8a9c38: AllocStack(0x20)
    //     0x8a9c38: sub             SP, SP, #0x20
    // 0x8a9c3c: CheckStackOverflow
    //     0x8a9c3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a9c40: cmp             SP, x16
    //     0x8a9c44: b.ls            #0x8a9ec0
    // 0x8a9c48: ldr             x0, [fp, #0x10]
    // 0x8a9c4c: r2 = Null
    //     0x8a9c4c: mov             x2, NULL
    // 0x8a9c50: r1 = Null
    //     0x8a9c50: mov             x1, NULL
    // 0x8a9c54: r4 = 59
    //     0x8a9c54: movz            x4, #0x3b
    // 0x8a9c58: branchIfSmi(r0, 0x8a9c64)
    //     0x8a9c58: tbz             w0, #0, #0x8a9c64
    // 0x8a9c5c: r4 = LoadClassIdInstr(r0)
    //     0x8a9c5c: ldur            x4, [x0, #-1]
    //     0x8a9c60: ubfx            x4, x4, #0xc, #0x14
    // 0x8a9c64: r17 = 4227
    //     0x8a9c64: movz            x17, #0x1083
    // 0x8a9c68: cmp             x4, x17
    // 0x8a9c6c: b.eq            #0x8a9c84
    // 0x8a9c70: r8 = _ClassicIndicator
    //     0x8a9c70: add             x8, PP, #0x40, lsl #12  ; [pp+0x401c0] Type: _ClassicIndicator
    //     0x8a9c74: ldr             x8, [x8, #0x1c0]
    // 0x8a9c78: r3 = Null
    //     0x8a9c78: add             x3, PP, #0x40, lsl #12  ; [pp+0x401c8] Null
    //     0x8a9c7c: ldr             x3, [x3, #0x1c8]
    // 0x8a9c80: r0 = _ClassicIndicator()
    //     0x8a9c80: bl              #0x553110  ; IsType__ClassicIndicator_Stub
    // 0x8a9c84: ldr             x3, [fp, #0x18]
    // 0x8a9c88: LoadField: r2 = r3->field_7
    //     0x8a9c88: ldur            w2, [x3, #7]
    // 0x8a9c8c: DecompressPointer r2
    //     0x8a9c8c: add             x2, x2, HEAP, lsl #32
    // 0x8a9c90: ldr             x0, [fp, #0x10]
    // 0x8a9c94: r1 = Null
    //     0x8a9c94: mov             x1, NULL
    // 0x8a9c98: cmp             w2, NULL
    // 0x8a9c9c: b.eq            #0x8a9cc0
    // 0x8a9ca0: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8a9ca0: ldur            w4, [x2, #0x17]
    // 0x8a9ca4: DecompressPointer r4
    //     0x8a9ca4: add             x4, x4, HEAP, lsl #32
    // 0x8a9ca8: r8 = X0 bound StatefulWidget
    //     0x8a9ca8: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8a9cac: ldr             x8, [x8, #0x290]
    // 0x8a9cb0: LoadField: r9 = r4->field_7
    //     0x8a9cb0: ldur            x9, [x4, #7]
    // 0x8a9cb4: r3 = Null
    //     0x8a9cb4: add             x3, PP, #0x40, lsl #12  ; [pp+0x401d8] Null
    //     0x8a9cb8: ldr             x3, [x3, #0x1d8]
    // 0x8a9cbc: blr             x9
    // 0x8a9cc0: ldr             x0, [fp, #0x18]
    // 0x8a9cc4: LoadField: r1 = r0->field_b
    //     0x8a9cc4: ldur            w1, [x0, #0xb]
    // 0x8a9cc8: DecompressPointer r1
    //     0x8a9cc8: add             x1, x1, HEAP, lsl #32
    // 0x8a9ccc: cmp             w1, NULL
    // 0x8a9cd0: b.eq            #0x8a9ec8
    // 0x8a9cd4: LoadField: r2 = r1->field_b
    //     0x8a9cd4: ldur            w2, [x1, #0xb]
    // 0x8a9cd8: DecompressPointer r2
    //     0x8a9cd8: add             x2, x2, HEAP, lsl #32
    // 0x8a9cdc: LoadField: r1 = r2->field_f
    //     0x8a9cdc: ldur            w1, [x2, #0xf]
    // 0x8a9ce0: DecompressPointer r1
    //     0x8a9ce0: add             x1, x1, HEAP, lsl #32
    // 0x8a9ce4: r16 = Instance_IndicatorMode
    //     0x8a9ce4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x8a9ce8: ldr             x16, [x16, #0x160]
    // 0x8a9cec: cmp             w1, w16
    // 0x8a9cf0: b.ne            #0x8a9d70
    // 0x8a9cf4: ldr             x1, [fp, #0x10]
    // 0x8a9cf8: LoadField: r2 = r1->field_b
    //     0x8a9cf8: ldur            w2, [x1, #0xb]
    // 0x8a9cfc: DecompressPointer r2
    //     0x8a9cfc: add             x2, x2, HEAP, lsl #32
    // 0x8a9d00: LoadField: r3 = r2->field_f
    //     0x8a9d00: ldur            w3, [x2, #0xf]
    // 0x8a9d04: DecompressPointer r3
    //     0x8a9d04: add             x3, x3, HEAP, lsl #32
    // 0x8a9d08: r16 = Instance_IndicatorMode
    //     0x8a9d08: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x8a9d0c: ldr             x16, [x16, #0x160]
    // 0x8a9d10: cmp             w3, w16
    // 0x8a9d14: b.eq            #0x8a9d68
    // 0x8a9d18: r0 = DateTime()
    //     0x8a9d18: bl              #0x4f3e54  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0x8a9d1c: mov             x1, x0
    // 0x8a9d20: r0 = false
    //     0x8a9d20: add             x0, NULL, #0x30  ; false
    // 0x8a9d24: stur            x1, [fp, #-8]
    // 0x8a9d28: StoreField: r1->field_13 = r0
    //     0x8a9d28: stur            w0, [x1, #0x13]
    // 0x8a9d2c: r0 = _getCurrentMicros()
    //     0x8a9d2c: bl              #0x51ab44  ; [dart:core] DateTime::_getCurrentMicros
    // 0x8a9d30: r1 = LoadInt32Instr(r0)
    //     0x8a9d30: sbfx            x1, x0, #1, #0x1f
    //     0x8a9d34: tbz             w0, #0, #0x8a9d3c
    //     0x8a9d38: ldur            x1, [x0, #7]
    // 0x8a9d3c: ldur            x0, [fp, #-8]
    // 0x8a9d40: StoreField: r0->field_b = r1
    //     0x8a9d40: stur            x1, [x0, #0xb]
    // 0x8a9d44: ldr             x1, [fp, #0x18]
    // 0x8a9d48: StoreField: r1->field_1f = r0
    //     0x8a9d48: stur            w0, [x1, #0x1f]
    //     0x8a9d4c: ldurb           w16, [x1, #-1]
    //     0x8a9d50: ldurb           w17, [x0, #-1]
    //     0x8a9d54: and             x16, x17, x16, lsr #2
    //     0x8a9d58: tst             x16, HEAP, lsr #32
    //     0x8a9d5c: b.eq            #0x8a9d64
    //     0x8a9d60: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8a9d64: b               #0x8a9d74
    // 0x8a9d68: mov             x1, x0
    // 0x8a9d6c: b               #0x8a9d74
    // 0x8a9d70: mov             x1, x0
    // 0x8a9d74: LoadField: r0 = r1->field_b
    //     0x8a9d74: ldur            w0, [x1, #0xb]
    // 0x8a9d78: DecompressPointer r0
    //     0x8a9d78: add             x0, x0, HEAP, lsl #32
    // 0x8a9d7c: cmp             w0, NULL
    // 0x8a9d80: b.eq            #0x8a9ecc
    // 0x8a9d84: LoadField: r2 = r0->field_b
    //     0x8a9d84: ldur            w2, [x0, #0xb]
    // 0x8a9d88: DecompressPointer r2
    //     0x8a9d88: add             x2, x2, HEAP, lsl #32
    // 0x8a9d8c: LoadField: r0 = r2->field_f
    //     0x8a9d8c: ldur            w0, [x2, #0xf]
    // 0x8a9d90: DecompressPointer r0
    //     0x8a9d90: add             x0, x0, HEAP, lsl #32
    // 0x8a9d94: r16 = Instance_IndicatorMode
    //     0x8a9d94: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x8a9d98: ldr             x16, [x16, #0x1d0]
    // 0x8a9d9c: cmp             w0, w16
    // 0x8a9da0: b.ne            #0x8a9e04
    // 0x8a9da4: ldr             x2, [fp, #0x10]
    // 0x8a9da8: LoadField: r3 = r2->field_b
    //     0x8a9da8: ldur            w3, [x2, #0xb]
    // 0x8a9dac: DecompressPointer r3
    //     0x8a9dac: add             x3, x3, HEAP, lsl #32
    // 0x8a9db0: LoadField: r4 = r3->field_f
    //     0x8a9db0: ldur            w4, [x3, #0xf]
    // 0x8a9db4: DecompressPointer r4
    //     0x8a9db4: add             x4, x4, HEAP, lsl #32
    // 0x8a9db8: r16 = Instance_IndicatorMode
    //     0x8a9db8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c8] Obj!IndicatorMode@c45391
    //     0x8a9dbc: ldr             x16, [x16, #0x1c8]
    // 0x8a9dc0: cmp             w4, w16
    // 0x8a9dc4: b.ne            #0x8a9e08
    // 0x8a9dc8: d0 = 1.000000
    //     0x8a9dc8: fmov            d0, #1.00000000
    // 0x8a9dcc: LoadField: r0 = r1->field_23
    //     0x8a9dcc: ldur            w0, [x1, #0x23]
    // 0x8a9dd0: DecompressPointer r0
    //     0x8a9dd0: add             x0, x0, HEAP, lsl #32
    // 0x8a9dd4: r16 = Sentinel
    //     0x8a9dd4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9dd8: cmp             w0, w16
    // 0x8a9ddc: b.eq            #0x8a9ed0
    // 0x8a9de0: str             x0, [SP, #0x10]
    // 0x8a9de4: str             d0, [SP, #8]
    // 0x8a9de8: r16 = Instance_Duration
    //     0x8a9de8: add             x16, PP, #0xf, lsl #12  ; [pp+0xf018] Obj!Duration@c47cd1
    //     0x8a9dec: ldr             x16, [x16, #0x18]
    // 0x8a9df0: str             x16, [SP]
    // 0x8a9df4: r4 = const [0, 0x3, 0x3, 0x2, duration, 0x2, null]
    //     0x8a9df4: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4e0] List(7) [0, 0x3, 0x3, 0x2, "duration", 0x2, Null]
    //     0x8a9df8: ldr             x4, [x4, #0x4e0]
    // 0x8a9dfc: r0 = animateTo()
    //     0x8a9dfc: bl              #0x5cdd9c  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateTo
    // 0x8a9e00: b               #0x8a9eb0
    // 0x8a9e04: ldr             x2, [fp, #0x10]
    // 0x8a9e08: r16 = Instance_IndicatorMode
    //     0x8a9e08: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c8] Obj!IndicatorMode@c45391
    //     0x8a9e0c: ldr             x16, [x16, #0x1c8]
    // 0x8a9e10: cmp             w0, w16
    // 0x8a9e14: b.ne            #0x8a9e64
    // 0x8a9e18: LoadField: r3 = r2->field_b
    //     0x8a9e18: ldur            w3, [x2, #0xb]
    // 0x8a9e1c: DecompressPointer r3
    //     0x8a9e1c: add             x3, x3, HEAP, lsl #32
    // 0x8a9e20: LoadField: r4 = r3->field_f
    //     0x8a9e20: ldur            w4, [x3, #0xf]
    // 0x8a9e24: DecompressPointer r4
    //     0x8a9e24: add             x4, x4, HEAP, lsl #32
    // 0x8a9e28: r16 = Instance_IndicatorMode
    //     0x8a9e28: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x8a9e2c: ldr             x16, [x16, #0x1d0]
    // 0x8a9e30: cmp             w4, w16
    // 0x8a9e34: b.ne            #0x8a9e64
    // 0x8a9e38: LoadField: r0 = r1->field_23
    //     0x8a9e38: ldur            w0, [x1, #0x23]
    // 0x8a9e3c: DecompressPointer r0
    //     0x8a9e3c: add             x0, x0, HEAP, lsl #32
    // 0x8a9e40: r16 = Sentinel
    //     0x8a9e40: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9e44: cmp             w0, w16
    // 0x8a9e48: b.eq            #0x8a9edc
    // 0x8a9e4c: r16 = Instance_Duration
    //     0x8a9e4c: add             x16, PP, #0xf, lsl #12  ; [pp+0xf018] Obj!Duration@c47cd1
    //     0x8a9e50: ldr             x16, [x16, #0x18]
    // 0x8a9e54: stp             x16, x0, [SP]
    // 0x8a9e58: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x8a9e58: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x8a9e5c: r0 = animateBack()
    //     0x8a9e5c: bl              #0x87f784  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::animateBack
    // 0x8a9e60: b               #0x8a9eb0
    // 0x8a9e64: r16 = Instance_IndicatorMode
    //     0x8a9e64: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x8a9e68: ldr             x16, [x16, #0x158]
    // 0x8a9e6c: cmp             w0, w16
    // 0x8a9e70: b.ne            #0x8a9eb0
    // 0x8a9e74: LoadField: r0 = r2->field_b
    //     0x8a9e74: ldur            w0, [x2, #0xb]
    // 0x8a9e78: DecompressPointer r0
    //     0x8a9e78: add             x0, x0, HEAP, lsl #32
    // 0x8a9e7c: LoadField: r2 = r0->field_f
    //     0x8a9e7c: ldur            w2, [x0, #0xf]
    // 0x8a9e80: DecompressPointer r2
    //     0x8a9e80: add             x2, x2, HEAP, lsl #32
    // 0x8a9e84: r16 = Instance_IndicatorMode
    //     0x8a9e84: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x8a9e88: ldr             x16, [x16, #0x158]
    // 0x8a9e8c: cmp             w2, w16
    // 0x8a9e90: b.eq            #0x8a9eb0
    // 0x8a9e94: LoadField: r0 = r1->field_23
    //     0x8a9e94: ldur            w0, [x1, #0x23]
    // 0x8a9e98: DecompressPointer r0
    //     0x8a9e98: add             x0, x0, HEAP, lsl #32
    // 0x8a9e9c: r16 = Sentinel
    //     0x8a9e9c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9ea0: cmp             w0, w16
    // 0x8a9ea4: b.eq            #0x8a9ee8
    // 0x8a9ea8: str             x0, [SP]
    // 0x8a9eac: r0 = reset()
    //     0x8a9eac: bl              #0x6672a4  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::reset
    // 0x8a9eb0: r0 = Null
    //     0x8a9eb0: mov             x0, NULL
    // 0x8a9eb4: LeaveFrame
    //     0x8a9eb4: mov             SP, fp
    //     0x8a9eb8: ldp             fp, lr, [SP], #0x10
    // 0x8a9ebc: ret
    //     0x8a9ebc: ret             
    // 0x8a9ec0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9ec0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9ec4: b               #0x8a9c48
    // 0x8a9ec8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9ec8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a9ecc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9ecc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a9ed0: r9 = _iconAnimationController
    //     0x8a9ed0: add             x9, PP, #0x40, lsl #12  ; [pp+0x40198] Field <_ClassicIndicatorState@765089737._iconAnimationController@765089737>: late (offset: 0x24)
    //     0x8a9ed4: ldr             x9, [x9, #0x198]
    // 0x8a9ed8: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x8a9ed8: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
    // 0x8a9edc: r9 = _iconAnimationController
    //     0x8a9edc: add             x9, PP, #0x40, lsl #12  ; [pp+0x40198] Field <_ClassicIndicatorState@765089737._iconAnimationController@765089737>: late (offset: 0x24)
    //     0x8a9ee0: ldr             x9, [x9, #0x198]
    // 0x8a9ee4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8a9ee4: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8a9ee8: r9 = _iconAnimationController
    //     0x8a9ee8: add             x9, PP, #0x40, lsl #12  ; [pp+0x40198] Field <_ClassicIndicatorState@765089737._iconAnimationController@765089737>: late (offset: 0x24)
    //     0x8a9eec: ldr             x9, [x9, #0x198]
    // 0x8a9ef0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8a9ef0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x91cf7c, size: 0x228
    // 0x91cf7c: EnterFrame
    //     0x91cf7c: stp             fp, lr, [SP, #-0x10]!
    //     0x91cf80: mov             fp, SP
    // 0x91cf84: AllocStack(0x58)
    //     0x91cf84: sub             SP, SP, #0x58
    // 0x91cf88: CheckStackOverflow
    //     0x91cf88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91cf8c: cmp             SP, x16
    //     0x91cf90: b.ls            #0x91d15c
    // 0x91cf94: ldr             x16, [fp, #0x18]
    // 0x91cf98: str             x16, [SP]
    // 0x91cf9c: r0 = _offset()
    //     0x91cf9c: bl              #0x91f348  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_offset
    // 0x91cfa0: ldr             x0, [fp, #0x18]
    // 0x91cfa4: stur            d0, [fp, #-0x28]
    // 0x91cfa8: LoadField: r1 = r0->field_b
    //     0x91cfa8: ldur            w1, [x0, #0xb]
    // 0x91cfac: DecompressPointer r1
    //     0x91cfac: add             x1, x1, HEAP, lsl #32
    // 0x91cfb0: cmp             w1, NULL
    // 0x91cfb4: b.eq            #0x91d164
    // 0x91cfb8: LoadField: r2 = r1->field_b
    //     0x91cfb8: ldur            w2, [x1, #0xb]
    // 0x91cfbc: DecompressPointer r2
    //     0x91cfbc: add             x2, x2, HEAP, lsl #32
    // 0x91cfc0: LoadField: r1 = r2->field_7
    //     0x91cfc0: ldur            w1, [x2, #7]
    // 0x91cfc4: DecompressPointer r1
    //     0x91cfc4: add             x1, x1, HEAP, lsl #32
    // 0x91cfc8: LoadField: r2 = r1->field_37
    //     0x91cfc8: ldur            w2, [x1, #0x37]
    // 0x91cfcc: DecompressPointer r2
    //     0x91cfcc: add             x2, x2, HEAP, lsl #32
    // 0x91cfd0: cmp             w2, NULL
    // 0x91cfd4: b.eq            #0x91d034
    // 0x91cfd8: LoadField: r2 = r1->field_43
    //     0x91cfd8: ldur            w2, [x1, #0x43]
    // 0x91cfdc: DecompressPointer r2
    //     0x91cfdc: add             x2, x2, HEAP, lsl #32
    // 0x91cfe0: r16 = Instance_IndicatorPosition
    //     0x91cfe0: add             x16, PP, #0x40, lsl #12  ; [pp+0x400a8] Obj!IndicatorPosition@c45291
    //     0x91cfe4: ldr             x16, [x16, #0xa8]
    // 0x91cfe8: cmp             w2, w16
    // 0x91cfec: b.ne            #0x91d034
    // 0x91cff0: str             x0, [SP]
    // 0x91cff4: r0 = _mode()
    //     0x91cff4: bl              #0x91f30c  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_mode
    // 0x91cff8: r16 = Instance_IndicatorMode
    //     0x91cff8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x91cffc: ldr             x16, [x16, #0x1a0]
    // 0x91d000: cmp             w0, w16
    // 0x91d004: b.ne            #0x91d024
    // 0x91d008: ldr             x16, [fp, #0x18]
    // 0x91d00c: str             x16, [SP]
    // 0x91d010: r0 = _result()
    //     0x91d010: bl              #0x91f2d0  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_result
    // 0x91d014: r16 = Instance_IndicatorResult
    //     0x91d014: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x91d018: ldr             x16, [x16, #0x1c0]
    // 0x91d01c: cmp             w0, w16
    // 0x91d020: b.ne            #0x91d034
    // 0x91d024: ldr             x16, [fp, #0x18]
    // 0x91d028: str             x16, [SP]
    // 0x91d02c: r0 = _actualTriggerOffset()
    //     0x91d02c: bl              #0x91f298  ; [package:easy_refresh/easy_refresh.dart] _CupertinoIndicatorState::_actualTriggerOffset
    // 0x91d030: b               #0x91d038
    // 0x91d034: ldur            d0, [fp, #-0x28]
    // 0x91d038: ldr             x0, [fp, #0x18]
    // 0x91d03c: LoadField: r1 = r0->field_b
    //     0x91d03c: ldur            w1, [x0, #0xb]
    // 0x91d040: DecompressPointer r1
    //     0x91d040: add             x1, x1, HEAP, lsl #32
    // 0x91d044: cmp             w1, NULL
    // 0x91d048: b.eq            #0x91d168
    // 0x91d04c: LoadField: r2 = r1->field_b
    //     0x91d04c: ldur            w2, [x1, #0xb]
    // 0x91d050: DecompressPointer r2
    //     0x91d050: add             x2, x2, HEAP, lsl #32
    // 0x91d054: LoadField: r1 = r2->field_27
    //     0x91d054: ldur            w1, [x2, #0x27]
    // 0x91d058: DecompressPointer r1
    //     0x91d058: add             x1, x1, HEAP, lsl #32
    // 0x91d05c: r16 = Instance_Axis
    //     0x91d05c: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91d060: cmp             w1, w16
    // 0x91d064: b.ne            #0x91d070
    // 0x91d068: d1 = inf
    //     0x91d068: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91d06c: b               #0x91d074
    // 0x91d070: mov             v1.16b, v0.16b
    // 0x91d074: stur            d1, [fp, #-0x30]
    // 0x91d078: r16 = Instance_Axis
    //     0x91d078: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91d07c: cmp             w1, w16
    // 0x91d080: b.ne            #0x91d088
    // 0x91d084: d0 = inf
    //     0x91d084: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x91d088: stur            d0, [fp, #-0x28]
    // 0x91d08c: str             x0, [SP]
    // 0x91d090: r0 = _value()
    //     0x91d090: bl              #0x5e4034  ; [package:flutter/src/widgets/editable_text.dart] EditableTextState::_value
    // 0x91d094: r16 = Instance_Axis
    //     0x91d094: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91d098: cmp             w0, w16
    // 0x91d09c: b.ne            #0x91d0b0
    // 0x91d0a0: ldr             x16, [fp, #0x18]
    // 0x91d0a4: str             x16, [SP]
    // 0x91d0a8: r0 = _buildVerticalWidget()
    //     0x91d0a8: bl              #0x91e940  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildVerticalWidget
    // 0x91d0ac: b               #0x91d0bc
    // 0x91d0b0: ldr             x16, [fp, #0x18]
    // 0x91d0b4: str             x16, [SP]
    // 0x91d0b8: r0 = _buildHorizontalWidget()
    //     0x91d0b8: bl              #0x91d1a4  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildHorizontalWidget
    // 0x91d0bc: ldur            d0, [fp, #-0x30]
    // 0x91d0c0: ldur            d1, [fp, #-0x28]
    // 0x91d0c4: stur            x0, [fp, #-0x18]
    // 0x91d0c8: r1 = inline_Allocate_Double()
    //     0x91d0c8: ldp             x1, x2, [THR, #0x50]  ; THR::top
    //     0x91d0cc: add             x1, x1, #0x10
    //     0x91d0d0: cmp             x2, x1
    //     0x91d0d4: b.ls            #0x91d16c
    //     0x91d0d8: str             x1, [THR, #0x50]  ; THR::top
    //     0x91d0dc: sub             x1, x1, #0xf
    //     0x91d0e0: movz            x2, #0xd148
    //     0x91d0e4: movk            x2, #0x3, lsl #16
    //     0x91d0e8: stur            x2, [x1, #-1]
    // 0x91d0ec: StoreField: r1->field_7 = d0
    //     0x91d0ec: stur            d0, [x1, #7]
    // 0x91d0f0: stur            x1, [fp, #-0x10]
    // 0x91d0f4: r2 = inline_Allocate_Double()
    //     0x91d0f4: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x91d0f8: add             x2, x2, #0x10
    //     0x91d0fc: cmp             x3, x2
    //     0x91d100: b.ls            #0x91d188
    //     0x91d104: str             x2, [THR, #0x50]  ; THR::top
    //     0x91d108: sub             x2, x2, #0xf
    //     0x91d10c: movz            x3, #0xd148
    //     0x91d110: movk            x3, #0x3, lsl #16
    //     0x91d114: stur            x3, [x2, #-1]
    // 0x91d118: StoreField: r2->field_7 = d1
    //     0x91d118: stur            d1, [x2, #7]
    // 0x91d11c: stur            x2, [fp, #-8]
    // 0x91d120: r0 = Container()
    //     0x91d120: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91d124: stur            x0, [fp, #-0x20]
    // 0x91d128: stp             NULL, x0, [SP, #0x18]
    // 0x91d12c: ldur            x16, [fp, #-0x10]
    // 0x91d130: ldur            lr, [fp, #-8]
    // 0x91d134: stp             lr, x16, [SP, #8]
    // 0x91d138: ldur            x16, [fp, #-0x18]
    // 0x91d13c: str             x16, [SP]
    // 0x91d140: r4 = const [0, 0x5, 0x5, 0x1, child, 0x4, color, 0x1, height, 0x3, width, 0x2, null]
    //     0x91d140: add             x4, PP, #0x40, lsl #12  ; [pp+0x40130] List(13) [0, 0x5, 0x5, 0x1, "child", 0x4, "color", 0x1, "height", 0x3, "width", 0x2, Null]
    //     0x91d144: ldr             x4, [x4, #0x130]
    // 0x91d148: r0 = Container()
    //     0x91d148: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91d14c: ldur            x0, [fp, #-0x20]
    // 0x91d150: LeaveFrame
    //     0x91d150: mov             SP, fp
    //     0x91d154: ldp             fp, lr, [SP], #0x10
    // 0x91d158: ret
    //     0x91d158: ret             
    // 0x91d15c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91d15c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91d160: b               #0x91cf94
    // 0x91d164: r0 = NullCastErrorSharedWithFPURegs()
    //     0x91d164: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x91d168: r0 = NullCastErrorSharedWithFPURegs()
    //     0x91d168: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x91d16c: stp             q0, q1, [SP, #-0x20]!
    // 0x91d170: SaveReg r0
    //     0x91d170: str             x0, [SP, #-8]!
    // 0x91d174: r0 = AllocateDouble()
    //     0x91d174: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d178: mov             x1, x0
    // 0x91d17c: RestoreReg r0
    //     0x91d17c: ldr             x0, [SP], #8
    // 0x91d180: ldp             q0, q1, [SP], #0x20
    // 0x91d184: b               #0x91d0ec
    // 0x91d188: SaveReg d1
    //     0x91d188: str             q1, [SP, #-0x10]!
    // 0x91d18c: stp             x0, x1, [SP, #-0x10]!
    // 0x91d190: r0 = AllocateDouble()
    //     0x91d190: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d194: mov             x2, x0
    // 0x91d198: ldp             x0, x1, [SP], #0x10
    // 0x91d19c: RestoreReg d1
    //     0x91d19c: ldr             q1, [SP], #0x10
    // 0x91d1a0: b               #0x91d118
  }
  _ _buildHorizontalWidget(/* No info */) {
    // ** addr: 0x91d1a4, size: 0x578
    // 0x91d1a4: EnterFrame
    //     0x91d1a4: stp             fp, lr, [SP, #-0x10]!
    //     0x91d1a8: mov             fp, SP
    // 0x91d1ac: AllocStack(0x48)
    //     0x91d1ac: sub             SP, SP, #0x48
    // 0x91d1b0: CheckStackOverflow
    //     0x91d1b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91d1b4: cmp             SP, x16
    //     0x91d1b8: b.ls            #0x91d670
    // 0x91d1bc: ldr             x0, [fp, #0x10]
    // 0x91d1c0: LoadField: r1 = r0->field_b
    //     0x91d1c0: ldur            w1, [x0, #0xb]
    // 0x91d1c4: DecompressPointer r1
    //     0x91d1c4: add             x1, x1, HEAP, lsl #32
    // 0x91d1c8: cmp             w1, NULL
    // 0x91d1cc: b.eq            #0x91d678
    // 0x91d1d0: r16 = <Widget>
    //     0x91d1d0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91d1d4: ldr             x16, [x16, #0x410]
    // 0x91d1d8: stp             xzr, x16, [SP]
    // 0x91d1dc: r0 = _GrowableList()
    //     0x91d1dc: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x91d1e0: mov             x1, x0
    // 0x91d1e4: ldr             x0, [fp, #0x10]
    // 0x91d1e8: stur            x1, [fp, #-0x18]
    // 0x91d1ec: LoadField: r2 = r0->field_b
    //     0x91d1ec: ldur            w2, [x0, #0xb]
    // 0x91d1f0: DecompressPointer r2
    //     0x91d1f0: add             x2, x2, HEAP, lsl #32
    // 0x91d1f4: cmp             w2, NULL
    // 0x91d1f8: b.eq            #0x91d67c
    // 0x91d1fc: LoadField: r3 = r2->field_f
    //     0x91d1fc: ldur            w3, [x2, #0xf]
    // 0x91d200: DecompressPointer r3
    //     0x91d200: add             x3, x3, HEAP, lsl #32
    // 0x91d204: r16 = Instance_MainAxisAlignment
    //     0x91d204: add             x16, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91d208: ldr             x16, [x16, #0xb10]
    // 0x91d20c: cmp             w3, w16
    // 0x91d210: b.ne            #0x91d448
    // 0x91d214: LoadField: r3 = r2->field_b
    //     0x91d214: ldur            w3, [x2, #0xb]
    // 0x91d218: DecompressPointer r3
    //     0x91d218: add             x3, x3, HEAP, lsl #32
    // 0x91d21c: ArrayLoad: d0 = r3[0]  ; List_8
    //     0x91d21c: ldur            d0, [x3, #0x17]
    // 0x91d220: LoadField: d1 = r3->field_37
    //     0x91d220: ldur            d1, [x3, #0x37]
    // 0x91d224: fcmp            d0, d1
    // 0x91d228: b.vs            #0x91d270
    // 0x91d22c: b.ge            #0x91d270
    // 0x91d230: fsub            d2, d1, d0
    // 0x91d234: LoadField: r4 = r2->field_53
    //     0x91d234: ldur            w4, [x2, #0x53]
    // 0x91d238: DecompressPointer r4
    //     0x91d238: add             x4, x4, HEAP, lsl #32
    // 0x91d23c: tbnz            w4, #4, #0x91d24c
    // 0x91d240: LoadField: d3 = r3->field_1f
    //     0x91d240: ldur            d3, [x3, #0x1f]
    // 0x91d244: mov             v4.16b, v3.16b
    // 0x91d248: b               #0x91d254
    // 0x91d24c: LoadField: d3 = r3->field_1f
    //     0x91d24c: ldur            d3, [x3, #0x1f]
    // 0x91d250: fneg            d4, d3
    // 0x91d254: d3 = 2.000000
    //     0x91d254: fmov            d3, #2.00000000
    // 0x91d258: fadd            d5, d2, d4
    // 0x91d25c: fneg            d2, d5
    // 0x91d260: fdiv            d4, d2, d3
    // 0x91d264: mov             v2.16b, v4.16b
    // 0x91d268: mov             x2, x4
    // 0x91d26c: b               #0x91d28c
    // 0x91d270: LoadField: r4 = r2->field_53
    //     0x91d270: ldur            w4, [x2, #0x53]
    // 0x91d274: DecompressPointer r4
    //     0x91d274: add             x4, x4, HEAP, lsl #32
    // 0x91d278: tbz             w4, #4, #0x91d284
    // 0x91d27c: LoadField: d2 = r3->field_1f
    //     0x91d27c: ldur            d2, [x3, #0x1f]
    // 0x91d280: b               #0x91d288
    // 0x91d284: d2 = 0.000000
    //     0x91d284: eor             v2.16b, v2.16b, v2.16b
    // 0x91d288: mov             x2, x4
    // 0x91d28c: stur            d2, [fp, #-0x38]
    // 0x91d290: fcmp            d0, d1
    // 0x91d294: b.vs            #0x91d2a4
    // 0x91d298: b.ge            #0x91d2a4
    // 0x91d29c: r2 = Null
    //     0x91d29c: mov             x2, NULL
    // 0x91d2a0: b               #0x91d2dc
    // 0x91d2a4: tbnz            w2, #4, #0x91d2b0
    // 0x91d2a8: LoadField: d3 = r3->field_1f
    //     0x91d2a8: ldur            d3, [x3, #0x1f]
    // 0x91d2ac: b               #0x91d2b4
    // 0x91d2b0: d3 = 0.000000
    //     0x91d2b0: eor             v3.16b, v3.16b, v3.16b
    // 0x91d2b4: r2 = inline_Allocate_Double()
    //     0x91d2b4: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x91d2b8: add             x2, x2, #0x10
    //     0x91d2bc: cmp             x3, x2
    //     0x91d2c0: b.ls            #0x91d680
    //     0x91d2c4: str             x2, [THR, #0x50]  ; THR::top
    //     0x91d2c8: sub             x2, x2, #0xf
    //     0x91d2cc: movz            x3, #0xd148
    //     0x91d2d0: movk            x3, #0x3, lsl #16
    //     0x91d2d4: stur            x3, [x2, #-1]
    // 0x91d2d8: StoreField: r2->field_7 = d3
    //     0x91d2d8: stur            d3, [x2, #7]
    // 0x91d2dc: stur            x2, [fp, #-0x10]
    // 0x91d2e0: fcmp            d0, d1
    // 0x91d2e4: b.vs            #0x91d318
    // 0x91d2e8: b.ge            #0x91d318
    // 0x91d2ec: r3 = inline_Allocate_Double()
    //     0x91d2ec: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x91d2f0: add             x3, x3, #0x10
    //     0x91d2f4: cmp             x4, x3
    //     0x91d2f8: b.ls            #0x91d6a4
    //     0x91d2fc: str             x3, [THR, #0x50]  ; THR::top
    //     0x91d300: sub             x3, x3, #0xf
    //     0x91d304: movz            x4, #0xd148
    //     0x91d308: movk            x4, #0x3, lsl #16
    //     0x91d30c: stur            x4, [x3, #-1]
    // 0x91d310: StoreField: r3->field_7 = d1
    //     0x91d310: stur            d1, [x3, #7]
    // 0x91d314: b               #0x91d31c
    // 0x91d318: r3 = Null
    //     0x91d318: mov             x3, NULL
    // 0x91d31c: stur            x3, [fp, #-8]
    // 0x91d320: str             x0, [SP]
    // 0x91d324: r0 = _buildHorizontalBody()
    //     0x91d324: bl              #0x91d788  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildHorizontalBody
    // 0x91d328: stur            x0, [fp, #-0x20]
    // 0x91d32c: r0 = Center()
    //     0x91d32c: bl              #0x622a8c  ; AllocateCenterStub -> Center (size=0x1c)
    // 0x91d330: mov             x2, x0
    // 0x91d334: r0 = Instance_Alignment
    //     0x91d334: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91d338: ldr             x0, [x0, #0x358]
    // 0x91d33c: stur            x2, [fp, #-0x28]
    // 0x91d340: StoreField: r2->field_f = r0
    //     0x91d340: stur            w0, [x2, #0xf]
    // 0x91d344: ldur            x0, [fp, #-0x20]
    // 0x91d348: StoreField: r2->field_b = r0
    //     0x91d348: stur            w0, [x2, #0xb]
    // 0x91d34c: ldur            d0, [fp, #-0x38]
    // 0x91d350: r0 = inline_Allocate_Double()
    //     0x91d350: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91d354: add             x0, x0, #0x10
    //     0x91d358: cmp             x1, x0
    //     0x91d35c: b.ls            #0x91d6c8
    //     0x91d360: str             x0, [THR, #0x50]  ; THR::top
    //     0x91d364: sub             x0, x0, #0xf
    //     0x91d368: movz            x1, #0xd148
    //     0x91d36c: movk            x1, #0x3, lsl #16
    //     0x91d370: stur            x1, [x0, #-1]
    // 0x91d374: StoreField: r0->field_7 = d0
    //     0x91d374: stur            d0, [x0, #7]
    // 0x91d378: stur            x0, [fp, #-0x20]
    // 0x91d37c: r1 = <StackParentData>
    //     0x91d37c: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91d380: ldr             x1, [x1, #0x2b8]
    // 0x91d384: r0 = Positioned()
    //     0x91d384: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91d388: mov             x1, x0
    // 0x91d38c: ldur            x0, [fp, #-0x20]
    // 0x91d390: stur            x1, [fp, #-0x30]
    // 0x91d394: StoreField: r1->field_13 = r0
    //     0x91d394: stur            w0, [x1, #0x13]
    // 0x91d398: r0 = 0.000000
    //     0x91d398: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91d39c: ArrayStore: r1[0] = r0  ; List_4
    //     0x91d39c: stur            w0, [x1, #0x17]
    // 0x91d3a0: ldur            x2, [fp, #-0x10]
    // 0x91d3a4: StoreField: r1->field_1b = r2
    //     0x91d3a4: stur            w2, [x1, #0x1b]
    // 0x91d3a8: StoreField: r1->field_1f = r0
    //     0x91d3a8: stur            w0, [x1, #0x1f]
    // 0x91d3ac: ldur            x2, [fp, #-8]
    // 0x91d3b0: StoreField: r1->field_23 = r2
    //     0x91d3b0: stur            w2, [x1, #0x23]
    // 0x91d3b4: ldur            x2, [fp, #-0x28]
    // 0x91d3b8: StoreField: r1->field_b = r2
    //     0x91d3b8: stur            w2, [x1, #0xb]
    // 0x91d3bc: ldur            x2, [fp, #-0x18]
    // 0x91d3c0: LoadField: r3 = r2->field_b
    //     0x91d3c0: ldur            w3, [x2, #0xb]
    // 0x91d3c4: DecompressPointer r3
    //     0x91d3c4: add             x3, x3, HEAP, lsl #32
    // 0x91d3c8: stur            x3, [fp, #-8]
    // 0x91d3cc: LoadField: r4 = r2->field_f
    //     0x91d3cc: ldur            w4, [x2, #0xf]
    // 0x91d3d0: DecompressPointer r4
    //     0x91d3d0: add             x4, x4, HEAP, lsl #32
    // 0x91d3d4: LoadField: r5 = r4->field_b
    //     0x91d3d4: ldur            w5, [x4, #0xb]
    // 0x91d3d8: DecompressPointer r5
    //     0x91d3d8: add             x5, x5, HEAP, lsl #32
    // 0x91d3dc: cmp             w3, w5
    // 0x91d3e0: b.ne            #0x91d3ec
    // 0x91d3e4: str             x2, [SP]
    // 0x91d3e8: r0 = _growToNextCapacity()
    //     0x91d3e8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91d3ec: ldur            x2, [fp, #-0x18]
    // 0x91d3f0: ldur            x0, [fp, #-8]
    // 0x91d3f4: r3 = LoadInt32Instr(r0)
    //     0x91d3f4: sbfx            x3, x0, #1, #0x1f
    // 0x91d3f8: add             x0, x3, #1
    // 0x91d3fc: lsl             x1, x0, #1
    // 0x91d400: StoreField: r2->field_b = r1
    //     0x91d400: stur            w1, [x2, #0xb]
    // 0x91d404: mov             x1, x3
    // 0x91d408: cmp             x1, x0
    // 0x91d40c: b.hs            #0x91d6e0
    // 0x91d410: LoadField: r1 = r2->field_f
    //     0x91d410: ldur            w1, [x2, #0xf]
    // 0x91d414: DecompressPointer r1
    //     0x91d414: add             x1, x1, HEAP, lsl #32
    // 0x91d418: ldur            x0, [fp, #-0x30]
    // 0x91d41c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91d41c: add             x25, x1, x3, lsl #2
    //     0x91d420: add             x25, x25, #0xf
    //     0x91d424: str             w0, [x25]
    //     0x91d428: tbz             w0, #0, #0x91d444
    //     0x91d42c: ldurb           w16, [x1, #-1]
    //     0x91d430: ldurb           w17, [x0, #-1]
    //     0x91d434: and             x16, x17, x16, lsr #2
    //     0x91d438: tst             x16, HEAP, lsr #32
    //     0x91d43c: b.eq            #0x91d444
    //     0x91d440: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91d444: b               #0x91d44c
    // 0x91d448: mov             x2, x1
    // 0x91d44c: ldr             x0, [fp, #0x10]
    // 0x91d450: LoadField: r1 = r0->field_b
    //     0x91d450: ldur            w1, [x0, #0xb]
    // 0x91d454: DecompressPointer r1
    //     0x91d454: add             x1, x1, HEAP, lsl #32
    // 0x91d458: cmp             w1, NULL
    // 0x91d45c: b.eq            #0x91d6e4
    // 0x91d460: LoadField: r3 = r1->field_f
    //     0x91d460: ldur            w3, [x1, #0xf]
    // 0x91d464: DecompressPointer r3
    //     0x91d464: add             x3, x3, HEAP, lsl #32
    // 0x91d468: r16 = Instance_MainAxisAlignment
    //     0x91d468: add             x16, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91d46c: ldr             x16, [x16, #0xb10]
    // 0x91d470: cmp             w3, w16
    // 0x91d474: b.eq            #0x91d634
    // 0x91d478: r16 = Instance_MainAxisAlignment
    //     0x91d478: add             x16, PP, #0x10, lsl #12  ; [pp+0x10418] Obj!MainAxisAlignment@c43bd1
    //     0x91d47c: ldr             x16, [x16, #0x418]
    // 0x91d480: cmp             w3, w16
    // 0x91d484: b.ne            #0x91d4d4
    // 0x91d488: LoadField: r3 = r1->field_53
    //     0x91d488: ldur            w3, [x1, #0x53]
    // 0x91d48c: DecompressPointer r3
    //     0x91d48c: add             x3, x3, HEAP, lsl #32
    // 0x91d490: tbz             w3, #4, #0x91d4a4
    // 0x91d494: LoadField: r3 = r1->field_b
    //     0x91d494: ldur            w3, [x1, #0xb]
    // 0x91d498: DecompressPointer r3
    //     0x91d498: add             x3, x3, HEAP, lsl #32
    // 0x91d49c: LoadField: d0 = r3->field_1f
    //     0x91d49c: ldur            d0, [x3, #0x1f]
    // 0x91d4a0: b               #0x91d4a8
    // 0x91d4a4: d0 = 0.000000
    //     0x91d4a4: eor             v0.16b, v0.16b, v0.16b
    // 0x91d4a8: r1 = inline_Allocate_Double()
    //     0x91d4a8: ldp             x1, x3, [THR, #0x50]  ; THR::top
    //     0x91d4ac: add             x1, x1, #0x10
    //     0x91d4b0: cmp             x3, x1
    //     0x91d4b4: b.ls            #0x91d6e8
    //     0x91d4b8: str             x1, [THR, #0x50]  ; THR::top
    //     0x91d4bc: sub             x1, x1, #0xf
    //     0x91d4c0: movz            x3, #0xd148
    //     0x91d4c4: movk            x3, #0x3, lsl #16
    //     0x91d4c8: stur            x3, [x1, #-1]
    // 0x91d4cc: StoreField: r1->field_7 = d0
    //     0x91d4cc: stur            d0, [x1, #7]
    // 0x91d4d0: b               #0x91d4d8
    // 0x91d4d4: r1 = Null
    //     0x91d4d4: mov             x1, NULL
    // 0x91d4d8: stur            x1, [fp, #-8]
    // 0x91d4dc: str             x0, [SP]
    // 0x91d4e0: r0 = onChanged()
    //     0x91d4e0: bl              #0x91d754  ; [package:flutter/src/material/checkbox.dart] _CheckboxState::onChanged
    // 0x91d4e4: r16 = Instance_MainAxisAlignment
    //     0x91d4e4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d290] Obj!MainAxisAlignment@c43bf1
    //     0x91d4e8: ldr             x16, [x16, #0x290]
    // 0x91d4ec: cmp             w0, w16
    // 0x91d4f0: b.ne            #0x91d554
    // 0x91d4f4: ldr             x0, [fp, #0x10]
    // 0x91d4f8: LoadField: r1 = r0->field_b
    //     0x91d4f8: ldur            w1, [x0, #0xb]
    // 0x91d4fc: DecompressPointer r1
    //     0x91d4fc: add             x1, x1, HEAP, lsl #32
    // 0x91d500: cmp             w1, NULL
    // 0x91d504: b.eq            #0x91d704
    // 0x91d508: LoadField: r2 = r1->field_53
    //     0x91d508: ldur            w2, [x1, #0x53]
    // 0x91d50c: DecompressPointer r2
    //     0x91d50c: add             x2, x2, HEAP, lsl #32
    // 0x91d510: tbnz            w2, #4, #0x91d520
    // 0x91d514: str             x0, [SP]
    // 0x91d518: r0 = _safeOffset()
    //     0x91d518: bl              #0x91d71c  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_safeOffset
    // 0x91d51c: b               #0x91d524
    // 0x91d520: d0 = 0.000000
    //     0x91d520: eor             v0.16b, v0.16b, v0.16b
    // 0x91d524: r0 = inline_Allocate_Double()
    //     0x91d524: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91d528: add             x0, x0, #0x10
    //     0x91d52c: cmp             x1, x0
    //     0x91d530: b.ls            #0x91d708
    //     0x91d534: str             x0, [THR, #0x50]  ; THR::top
    //     0x91d538: sub             x0, x0, #0xf
    //     0x91d53c: movz            x1, #0xd148
    //     0x91d540: movk            x1, #0x3, lsl #16
    //     0x91d544: stur            x1, [x0, #-1]
    // 0x91d548: StoreField: r0->field_7 = d0
    //     0x91d548: stur            d0, [x0, #7]
    // 0x91d54c: mov             x2, x0
    // 0x91d550: b               #0x91d558
    // 0x91d554: r2 = Null
    //     0x91d554: mov             x2, NULL
    // 0x91d558: ldur            x0, [fp, #-0x18]
    // 0x91d55c: ldur            x1, [fp, #-8]
    // 0x91d560: stur            x2, [fp, #-0x10]
    // 0x91d564: ldr             x16, [fp, #0x10]
    // 0x91d568: str             x16, [SP]
    // 0x91d56c: r0 = _buildHorizontalBody()
    //     0x91d56c: bl              #0x91d788  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildHorizontalBody
    // 0x91d570: r1 = <StackParentData>
    //     0x91d570: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91d574: ldr             x1, [x1, #0x2b8]
    // 0x91d578: stur            x0, [fp, #-0x20]
    // 0x91d57c: r0 = Positioned()
    //     0x91d57c: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91d580: mov             x1, x0
    // 0x91d584: ldur            x0, [fp, #-8]
    // 0x91d588: stur            x1, [fp, #-0x28]
    // 0x91d58c: StoreField: r1->field_13 = r0
    //     0x91d58c: stur            w0, [x1, #0x13]
    // 0x91d590: r0 = 0.000000
    //     0x91d590: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91d594: ArrayStore: r1[0] = r0  ; List_4
    //     0x91d594: stur            w0, [x1, #0x17]
    // 0x91d598: ldur            x2, [fp, #-0x10]
    // 0x91d59c: StoreField: r1->field_1b = r2
    //     0x91d59c: stur            w2, [x1, #0x1b]
    // 0x91d5a0: StoreField: r1->field_1f = r0
    //     0x91d5a0: stur            w0, [x1, #0x1f]
    // 0x91d5a4: ldur            x0, [fp, #-0x20]
    // 0x91d5a8: StoreField: r1->field_b = r0
    //     0x91d5a8: stur            w0, [x1, #0xb]
    // 0x91d5ac: ldur            x0, [fp, #-0x18]
    // 0x91d5b0: LoadField: r2 = r0->field_b
    //     0x91d5b0: ldur            w2, [x0, #0xb]
    // 0x91d5b4: DecompressPointer r2
    //     0x91d5b4: add             x2, x2, HEAP, lsl #32
    // 0x91d5b8: stur            x2, [fp, #-8]
    // 0x91d5bc: LoadField: r3 = r0->field_f
    //     0x91d5bc: ldur            w3, [x0, #0xf]
    // 0x91d5c0: DecompressPointer r3
    //     0x91d5c0: add             x3, x3, HEAP, lsl #32
    // 0x91d5c4: LoadField: r4 = r3->field_b
    //     0x91d5c4: ldur            w4, [x3, #0xb]
    // 0x91d5c8: DecompressPointer r4
    //     0x91d5c8: add             x4, x4, HEAP, lsl #32
    // 0x91d5cc: cmp             w2, w4
    // 0x91d5d0: b.ne            #0x91d5dc
    // 0x91d5d4: str             x0, [SP]
    // 0x91d5d8: r0 = _growToNextCapacity()
    //     0x91d5d8: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91d5dc: ldur            x2, [fp, #-0x18]
    // 0x91d5e0: ldur            x0, [fp, #-8]
    // 0x91d5e4: r3 = LoadInt32Instr(r0)
    //     0x91d5e4: sbfx            x3, x0, #1, #0x1f
    // 0x91d5e8: add             x0, x3, #1
    // 0x91d5ec: lsl             x1, x0, #1
    // 0x91d5f0: StoreField: r2->field_b = r1
    //     0x91d5f0: stur            w1, [x2, #0xb]
    // 0x91d5f4: mov             x1, x3
    // 0x91d5f8: cmp             x1, x0
    // 0x91d5fc: b.hs            #0x91d718
    // 0x91d600: LoadField: r1 = r2->field_f
    //     0x91d600: ldur            w1, [x2, #0xf]
    // 0x91d604: DecompressPointer r1
    //     0x91d604: add             x1, x1, HEAP, lsl #32
    // 0x91d608: ldur            x0, [fp, #-0x28]
    // 0x91d60c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91d60c: add             x25, x1, x3, lsl #2
    //     0x91d610: add             x25, x25, #0xf
    //     0x91d614: str             w0, [x25]
    //     0x91d618: tbz             w0, #0, #0x91d634
    //     0x91d61c: ldurb           w16, [x1, #-1]
    //     0x91d620: ldurb           w17, [x0, #-1]
    //     0x91d624: and             x16, x17, x16, lsr #2
    //     0x91d628: tst             x16, HEAP, lsr #32
    //     0x91d62c: b.eq            #0x91d634
    //     0x91d630: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91d634: r0 = Stack()
    //     0x91d634: bl              #0x66ad20  ; AllocateStackStub -> Stack (size=0x20)
    // 0x91d638: r1 = Instance_AlignmentDirectional
    //     0x91d638: add             x1, PP, #0x12, lsl #12  ; [pp+0x12238] Obj!AlignmentDirectional@c2f3a1
    //     0x91d63c: ldr             x1, [x1, #0x238]
    // 0x91d640: StoreField: r0->field_f = r1
    //     0x91d640: stur            w1, [x0, #0xf]
    // 0x91d644: r1 = Instance_StackFit
    //     0x91d644: add             x1, PP, #0x12, lsl #12  ; [pp+0x12240] Obj!StackFit@c438d1
    //     0x91d648: ldr             x1, [x1, #0x240]
    // 0x91d64c: ArrayStore: r0[0] = r1  ; List_4
    //     0x91d64c: stur            w1, [x0, #0x17]
    // 0x91d650: r1 = Instance_Clip
    //     0x91d650: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x91d654: ldr             x1, [x1, #0x438]
    // 0x91d658: StoreField: r0->field_1b = r1
    //     0x91d658: stur            w1, [x0, #0x1b]
    // 0x91d65c: ldur            x1, [fp, #-0x18]
    // 0x91d660: StoreField: r0->field_b = r1
    //     0x91d660: stur            w1, [x0, #0xb]
    // 0x91d664: LeaveFrame
    //     0x91d664: mov             SP, fp
    //     0x91d668: ldp             fp, lr, [SP], #0x10
    // 0x91d66c: ret
    //     0x91d66c: ret             
    // 0x91d670: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91d670: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91d674: b               #0x91d1bc
    // 0x91d678: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91d678: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91d67c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91d67c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91d680: stp             q2, q3, [SP, #-0x20]!
    // 0x91d684: stp             q0, q1, [SP, #-0x20]!
    // 0x91d688: stp             x0, x1, [SP, #-0x10]!
    // 0x91d68c: r0 = AllocateDouble()
    //     0x91d68c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d690: mov             x2, x0
    // 0x91d694: ldp             x0, x1, [SP], #0x10
    // 0x91d698: ldp             q0, q1, [SP], #0x20
    // 0x91d69c: ldp             q2, q3, [SP], #0x20
    // 0x91d6a0: b               #0x91d2d8
    // 0x91d6a4: stp             q1, q2, [SP, #-0x20]!
    // 0x91d6a8: stp             x1, x2, [SP, #-0x10]!
    // 0x91d6ac: SaveReg r0
    //     0x91d6ac: str             x0, [SP, #-8]!
    // 0x91d6b0: r0 = AllocateDouble()
    //     0x91d6b0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d6b4: mov             x3, x0
    // 0x91d6b8: RestoreReg r0
    //     0x91d6b8: ldr             x0, [SP], #8
    // 0x91d6bc: ldp             x1, x2, [SP], #0x10
    // 0x91d6c0: ldp             q1, q2, [SP], #0x20
    // 0x91d6c4: b               #0x91d310
    // 0x91d6c8: SaveReg d0
    //     0x91d6c8: str             q0, [SP, #-0x10]!
    // 0x91d6cc: SaveReg r2
    //     0x91d6cc: str             x2, [SP, #-8]!
    // 0x91d6d0: r0 = AllocateDouble()
    //     0x91d6d0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d6d4: RestoreReg r2
    //     0x91d6d4: ldr             x2, [SP], #8
    // 0x91d6d8: RestoreReg d0
    //     0x91d6d8: ldr             q0, [SP], #0x10
    // 0x91d6dc: b               #0x91d374
    // 0x91d6e0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91d6e0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91d6e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91d6e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91d6e8: SaveReg d0
    //     0x91d6e8: str             q0, [SP, #-0x10]!
    // 0x91d6ec: stp             x0, x2, [SP, #-0x10]!
    // 0x91d6f0: r0 = AllocateDouble()
    //     0x91d6f0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d6f4: mov             x1, x0
    // 0x91d6f8: ldp             x0, x2, [SP], #0x10
    // 0x91d6fc: RestoreReg d0
    //     0x91d6fc: ldr             q0, [SP], #0x10
    // 0x91d700: b               #0x91d4cc
    // 0x91d704: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91d704: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91d708: SaveReg d0
    //     0x91d708: str             q0, [SP, #-0x10]!
    // 0x91d70c: r0 = AllocateDouble()
    //     0x91d70c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91d710: RestoreReg d0
    //     0x91d710: ldr             q0, [SP], #0x10
    // 0x91d714: b               #0x91d548
    // 0x91d718: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91d718: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  get _ _safeOffset(/* No info */) {
    // ** addr: 0x91d71c, size: 0x38
    // 0x91d71c: EnterFrame
    //     0x91d71c: stp             fp, lr, [SP, #-0x10]!
    //     0x91d720: mov             fp, SP
    // 0x91d724: ldr             x0, [fp, #0x10]
    // 0x91d728: LoadField: r1 = r0->field_b
    //     0x91d728: ldur            w1, [x0, #0xb]
    // 0x91d72c: DecompressPointer r1
    //     0x91d72c: add             x1, x1, HEAP, lsl #32
    // 0x91d730: cmp             w1, NULL
    // 0x91d734: b.eq            #0x91d750
    // 0x91d738: LoadField: r0 = r1->field_b
    //     0x91d738: ldur            w0, [x1, #0xb]
    // 0x91d73c: DecompressPointer r0
    //     0x91d73c: add             x0, x0, HEAP, lsl #32
    // 0x91d740: LoadField: d0 = r0->field_1f
    //     0x91d740: ldur            d0, [x0, #0x1f]
    // 0x91d744: LeaveFrame
    //     0x91d744: mov             SP, fp
    //     0x91d748: ldp             fp, lr, [SP], #0x10
    // 0x91d74c: ret
    //     0x91d74c: ret             
    // 0x91d750: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91d750: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildHorizontalBody(/* No info */) {
    // ** addr: 0x91d788, size: 0x46c
    // 0x91d788: EnterFrame
    //     0x91d788: stp             fp, lr, [SP, #-0x10]!
    //     0x91d78c: mov             fp, SP
    // 0x91d790: AllocStack(0x50)
    //     0x91d790: sub             SP, SP, #0x50
    // 0x91d794: CheckStackOverflow
    //     0x91d794: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91d798: cmp             SP, x16
    //     0x91d79c: b.ls            #0x91dbbc
    // 0x91d7a0: ldr             x16, [fp, #0x10]
    // 0x91d7a4: str             x16, [SP]
    // 0x91d7a8: r0 = _triggerOffset()
    //     0x91d7a8: bl              #0x91e900  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_triggerOffset
    // 0x91d7ac: stur            d0, [fp, #-0x30]
    // 0x91d7b0: r16 = <Widget>
    //     0x91d7b0: add             x16, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91d7b4: ldr             x16, [x16, #0x410]
    // 0x91d7b8: stp             xzr, x16, [SP]
    // 0x91d7bc: r0 = _GrowableList()
    //     0x91d7bc: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x91d7c0: mov             x1, x0
    // 0x91d7c4: ldr             x0, [fp, #0x10]
    // 0x91d7c8: stur            x1, [fp, #-8]
    // 0x91d7cc: LoadField: r2 = r0->field_b
    //     0x91d7cc: ldur            w2, [x0, #0xb]
    // 0x91d7d0: DecompressPointer r2
    //     0x91d7d0: add             x2, x2, HEAP, lsl #32
    // 0x91d7d4: cmp             w2, NULL
    // 0x91d7d8: b.eq            #0x91dbc4
    // 0x91d7dc: r0 = EdgeInsets()
    //     0x91d7dc: bl              #0x5960b4  ; AllocateEdgeInsetsStub -> EdgeInsets (size=0x28)
    // 0x91d7e0: d0 = 0.000000
    //     0x91d7e0: eor             v0.16b, v0.16b, v0.16b
    // 0x91d7e4: stur            x0, [fp, #-0x10]
    // 0x91d7e8: StoreField: r0->field_7 = d0
    //     0x91d7e8: stur            d0, [x0, #7]
    // 0x91d7ec: StoreField: r0->field_f = d0
    //     0x91d7ec: stur            d0, [x0, #0xf]
    // 0x91d7f0: ArrayStore: r0[0] = d0  ; List_8
    //     0x91d7f0: stur            d0, [x0, #0x17]
    // 0x91d7f4: d0 = 16.000000
    //     0x91d7f4: fmov            d0, #16.00000000
    // 0x91d7f8: StoreField: r0->field_1f = d0
    //     0x91d7f8: stur            d0, [x0, #0x1f]
    // 0x91d7fc: ldr             x16, [fp, #0x10]
    // 0x91d800: str             x16, [SP]
    // 0x91d804: r0 = _buildText()
    //     0x91d804: bl              #0x91e70c  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildText
    // 0x91d808: r1 = Null
    //     0x91d808: mov             x1, NULL
    // 0x91d80c: r2 = 2
    //     0x91d80c: movz            x2, #0x2
    // 0x91d810: stur            x0, [fp, #-0x18]
    // 0x91d814: r0 = AllocateArray()
    //     0x91d814: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x91d818: mov             x2, x0
    // 0x91d81c: ldur            x0, [fp, #-0x18]
    // 0x91d820: stur            x2, [fp, #-0x20]
    // 0x91d824: StoreField: r2->field_f = r0
    //     0x91d824: stur            w0, [x2, #0xf]
    // 0x91d828: r1 = <Widget>
    //     0x91d828: add             x1, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91d82c: ldr             x1, [x1, #0x410]
    // 0x91d830: r0 = AllocateGrowableArray()
    //     0x91d830: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x91d834: mov             x1, x0
    // 0x91d838: ldur            x0, [fp, #-0x20]
    // 0x91d83c: stur            x1, [fp, #-0x18]
    // 0x91d840: StoreField: r1->field_f = r0
    //     0x91d840: stur            w0, [x1, #0xf]
    // 0x91d844: r0 = 2
    //     0x91d844: movz            x0, #0x2
    // 0x91d848: StoreField: r1->field_b = r0
    //     0x91d848: stur            w0, [x1, #0xb]
    // 0x91d84c: ldr             x0, [fp, #0x10]
    // 0x91d850: LoadField: r2 = r0->field_b
    //     0x91d850: ldur            w2, [x0, #0xb]
    // 0x91d854: DecompressPointer r2
    //     0x91d854: add             x2, x2, HEAP, lsl #32
    // 0x91d858: cmp             w2, NULL
    // 0x91d85c: b.eq            #0x91dbc8
    // 0x91d860: str             x0, [SP]
    // 0x91d864: r0 = _buildMessage()
    //     0x91d864: bl              #0x91e41c  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildMessage
    // 0x91d868: mov             x1, x0
    // 0x91d86c: ldur            x0, [fp, #-0x18]
    // 0x91d870: stur            x1, [fp, #-0x28]
    // 0x91d874: LoadField: r2 = r0->field_b
    //     0x91d874: ldur            w2, [x0, #0xb]
    // 0x91d878: DecompressPointer r2
    //     0x91d878: add             x2, x2, HEAP, lsl #32
    // 0x91d87c: stur            x2, [fp, #-0x20]
    // 0x91d880: LoadField: r3 = r0->field_f
    //     0x91d880: ldur            w3, [x0, #0xf]
    // 0x91d884: DecompressPointer r3
    //     0x91d884: add             x3, x3, HEAP, lsl #32
    // 0x91d888: LoadField: r4 = r3->field_b
    //     0x91d888: ldur            w4, [x3, #0xb]
    // 0x91d88c: DecompressPointer r4
    //     0x91d88c: add             x4, x4, HEAP, lsl #32
    // 0x91d890: cmp             w2, w4
    // 0x91d894: b.ne            #0x91d8a0
    // 0x91d898: str             x0, [SP]
    // 0x91d89c: r0 = _growToNextCapacity()
    //     0x91d89c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91d8a0: ldur            x3, [fp, #-8]
    // 0x91d8a4: ldur            x0, [fp, #-0x20]
    // 0x91d8a8: ldur            x2, [fp, #-0x18]
    // 0x91d8ac: r4 = LoadInt32Instr(r0)
    //     0x91d8ac: sbfx            x4, x0, #1, #0x1f
    // 0x91d8b0: add             x0, x4, #1
    // 0x91d8b4: lsl             x1, x0, #1
    // 0x91d8b8: StoreField: r2->field_b = r1
    //     0x91d8b8: stur            w1, [x2, #0xb]
    // 0x91d8bc: mov             x1, x4
    // 0x91d8c0: cmp             x1, x0
    // 0x91d8c4: b.hs            #0x91dbcc
    // 0x91d8c8: LoadField: r1 = r2->field_f
    //     0x91d8c8: ldur            w1, [x2, #0xf]
    // 0x91d8cc: DecompressPointer r1
    //     0x91d8cc: add             x1, x1, HEAP, lsl #32
    // 0x91d8d0: ldur            x0, [fp, #-0x28]
    // 0x91d8d4: ArrayStore: r1[r4] = r0  ; List_4
    //     0x91d8d4: add             x25, x1, x4, lsl #2
    //     0x91d8d8: add             x25, x25, #0xf
    //     0x91d8dc: str             w0, [x25]
    //     0x91d8e0: tbz             w0, #0, #0x91d8fc
    //     0x91d8e4: ldurb           w16, [x1, #-1]
    //     0x91d8e8: ldurb           w17, [x0, #-1]
    //     0x91d8ec: and             x16, x17, x16, lsr #2
    //     0x91d8f0: tst             x16, HEAP, lsr #32
    //     0x91d8f4: b.eq            #0x91d8fc
    //     0x91d8f8: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91d8fc: r0 = Column()
    //     0x91d8fc: bl              #0x629e44  ; AllocateColumnStub -> Column (size=0x30)
    // 0x91d900: mov             x1, x0
    // 0x91d904: r0 = Instance_Axis
    //     0x91d904: ldr             x0, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91d908: stur            x1, [fp, #-0x20]
    // 0x91d90c: StoreField: r1->field_f = r0
    //     0x91d90c: stur            w0, [x1, #0xf]
    // 0x91d910: r2 = Instance_MainAxisAlignment
    //     0x91d910: add             x2, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91d914: ldr             x2, [x2, #0xb10]
    // 0x91d918: StoreField: r1->field_13 = r2
    //     0x91d918: stur            w2, [x1, #0x13]
    // 0x91d91c: r3 = Instance_MainAxisSize
    //     0x91d91c: add             x3, PP, #0x10, lsl #12  ; [pp+0x10420] Obj!MainAxisSize@c43c51
    //     0x91d920: ldr             x3, [x3, #0x420]
    // 0x91d924: ArrayStore: r1[0] = r3  ; List_4
    //     0x91d924: stur            w3, [x1, #0x17]
    // 0x91d928: r4 = Instance_CrossAxisAlignment
    //     0x91d928: add             x4, PP, #0x12, lsl #12  ; [pp+0x12250] Obj!CrossAxisAlignment@c43b71
    //     0x91d92c: ldr             x4, [x4, #0x250]
    // 0x91d930: StoreField: r1->field_1b = r4
    //     0x91d930: stur            w4, [x1, #0x1b]
    // 0x91d934: r4 = Instance_VerticalDirection
    //     0x91d934: add             x4, PP, #0x10, lsl #12  ; [pp+0x10430] Obj!VerticalDirection@c44091
    //     0x91d938: ldr             x4, [x4, #0x430]
    // 0x91d93c: StoreField: r1->field_23 = r4
    //     0x91d93c: stur            w4, [x1, #0x23]
    // 0x91d940: r5 = Instance_Clip
    //     0x91d940: add             x5, PP, #0xe, lsl #12  ; [pp+0xe4a0] Obj!Clip@c47641
    //     0x91d944: ldr             x5, [x5, #0x4a0]
    // 0x91d948: StoreField: r1->field_2b = r5
    //     0x91d948: stur            w5, [x1, #0x2b]
    // 0x91d94c: ldur            x6, [fp, #-0x18]
    // 0x91d950: StoreField: r1->field_b = r6
    //     0x91d950: stur            w6, [x1, #0xb]
    // 0x91d954: r0 = RotatedBox()
    //     0x91d954: bl              #0x91e410  ; AllocateRotatedBoxStub -> RotatedBox (size=0x18)
    // 0x91d958: mov             x1, x0
    // 0x91d95c: r0 = -1
    //     0x91d95c: movn            x0, #0
    // 0x91d960: stur            x1, [fp, #-0x18]
    // 0x91d964: StoreField: r1->field_f = r0
    //     0x91d964: stur            x0, [x1, #0xf]
    // 0x91d968: ldur            x0, [fp, #-0x20]
    // 0x91d96c: StoreField: r1->field_b = r0
    //     0x91d96c: stur            w0, [x1, #0xb]
    // 0x91d970: r0 = Container()
    //     0x91d970: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91d974: stur            x0, [fp, #-0x20]
    // 0x91d978: ldur            x16, [fp, #-0x10]
    // 0x91d97c: stp             x16, x0, [SP, #0x10]
    // 0x91d980: ldur            x16, [fp, #-0x18]
    // 0x91d984: stp             x16, NULL, [SP]
    // 0x91d988: r4 = const [0, 0x4, 0x4, 0x1, child, 0x3, margin, 0x1, width, 0x2, null]
    //     0x91d988: add             x4, PP, #0x1e, lsl #12  ; [pp+0x1e630] List(11) [0, 0x4, 0x4, 0x1, "child", 0x3, "margin", 0x1, "width", 0x2, Null]
    //     0x91d98c: ldr             x4, [x4, #0x630]
    // 0x91d990: r0 = Container()
    //     0x91d990: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91d994: ldur            x0, [fp, #-8]
    // 0x91d998: LoadField: r1 = r0->field_b
    //     0x91d998: ldur            w1, [x0, #0xb]
    // 0x91d99c: DecompressPointer r1
    //     0x91d99c: add             x1, x1, HEAP, lsl #32
    // 0x91d9a0: stur            x1, [fp, #-0x10]
    // 0x91d9a4: LoadField: r2 = r0->field_f
    //     0x91d9a4: ldur            w2, [x0, #0xf]
    // 0x91d9a8: DecompressPointer r2
    //     0x91d9a8: add             x2, x2, HEAP, lsl #32
    // 0x91d9ac: LoadField: r3 = r2->field_b
    //     0x91d9ac: ldur            w3, [x2, #0xb]
    // 0x91d9b0: DecompressPointer r3
    //     0x91d9b0: add             x3, x3, HEAP, lsl #32
    // 0x91d9b4: cmp             w1, w3
    // 0x91d9b8: b.ne            #0x91d9c4
    // 0x91d9bc: str             x0, [SP]
    // 0x91d9c0: r0 = _growToNextCapacity()
    //     0x91d9c0: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91d9c4: ldr             x3, [fp, #0x10]
    // 0x91d9c8: ldur            x2, [fp, #-8]
    // 0x91d9cc: ldur            x0, [fp, #-0x10]
    // 0x91d9d0: r4 = LoadInt32Instr(r0)
    //     0x91d9d0: sbfx            x4, x0, #1, #0x1f
    // 0x91d9d4: add             x0, x4, #1
    // 0x91d9d8: lsl             x1, x0, #1
    // 0x91d9dc: StoreField: r2->field_b = r1
    //     0x91d9dc: stur            w1, [x2, #0xb]
    // 0x91d9e0: mov             x1, x4
    // 0x91d9e4: cmp             x1, x0
    // 0x91d9e8: b.hs            #0x91dbd0
    // 0x91d9ec: LoadField: r1 = r2->field_f
    //     0x91d9ec: ldur            w1, [x2, #0xf]
    // 0x91d9f0: DecompressPointer r1
    //     0x91d9f0: add             x1, x1, HEAP, lsl #32
    // 0x91d9f4: ldur            x0, [fp, #-0x20]
    // 0x91d9f8: ArrayStore: r1[r4] = r0  ; List_4
    //     0x91d9f8: add             x25, x1, x4, lsl #2
    //     0x91d9fc: add             x25, x25, #0xf
    //     0x91da00: str             w0, [x25]
    //     0x91da04: tbz             w0, #0, #0x91da20
    //     0x91da08: ldurb           w16, [x1, #-1]
    //     0x91da0c: ldurb           w17, [x0, #-1]
    //     0x91da10: and             x16, x17, x16, lsr #2
    //     0x91da14: tst             x16, HEAP, lsr #32
    //     0x91da18: b.eq            #0x91da20
    //     0x91da1c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91da20: LoadField: r0 = r3->field_b
    //     0x91da20: ldur            w0, [x3, #0xb]
    // 0x91da24: DecompressPointer r0
    //     0x91da24: add             x0, x0, HEAP, lsl #32
    // 0x91da28: cmp             w0, NULL
    // 0x91da2c: b.eq            #0x91dbd4
    // 0x91da30: str             x3, [SP]
    // 0x91da34: r0 = _buildIcon()
    //     0x91da34: bl              #0x91dbf4  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildIcon
    // 0x91da38: stur            x0, [fp, #-0x10]
    // 0x91da3c: r0 = Container()
    //     0x91da3c: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91da40: stur            x0, [fp, #-0x18]
    // 0x91da44: r16 = Instance_Alignment
    //     0x91da44: add             x16, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91da48: ldr             x16, [x16, #0x358]
    // 0x91da4c: stp             x16, x0, [SP, #0x10]
    // 0x91da50: r16 = 24.000000
    //     0x91da50: add             x16, PP, #0xf, lsl #12  ; [pp+0xf718] 24
    //     0x91da54: ldr             x16, [x16, #0x718]
    // 0x91da58: ldur            lr, [fp, #-0x10]
    // 0x91da5c: stp             lr, x16, [SP]
    // 0x91da60: r4 = const [0, 0x4, 0x4, 0x1, alignment, 0x1, child, 0x3, height, 0x2, null]
    //     0x91da60: add             x4, PP, #0x22, lsl #12  ; [pp+0x22d40] List(11) [0, 0x4, 0x4, 0x1, "alignment", 0x1, "child", 0x3, "height", 0x2, Null]
    //     0x91da64: ldr             x4, [x4, #0xd40]
    // 0x91da68: r0 = Container()
    //     0x91da68: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91da6c: ldur            x0, [fp, #-8]
    // 0x91da70: LoadField: r1 = r0->field_b
    //     0x91da70: ldur            w1, [x0, #0xb]
    // 0x91da74: DecompressPointer r1
    //     0x91da74: add             x1, x1, HEAP, lsl #32
    // 0x91da78: stur            x1, [fp, #-0x10]
    // 0x91da7c: LoadField: r2 = r0->field_f
    //     0x91da7c: ldur            w2, [x0, #0xf]
    // 0x91da80: DecompressPointer r2
    //     0x91da80: add             x2, x2, HEAP, lsl #32
    // 0x91da84: LoadField: r3 = r2->field_b
    //     0x91da84: ldur            w3, [x2, #0xb]
    // 0x91da88: DecompressPointer r3
    //     0x91da88: add             x3, x3, HEAP, lsl #32
    // 0x91da8c: cmp             w1, w3
    // 0x91da90: b.ne            #0x91da9c
    // 0x91da94: str             x0, [SP]
    // 0x91da98: r0 = _growToNextCapacity()
    //     0x91da98: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91da9c: ldur            d0, [fp, #-0x30]
    // 0x91daa0: ldur            x2, [fp, #-8]
    // 0x91daa4: ldur            x0, [fp, #-0x10]
    // 0x91daa8: r3 = LoadInt32Instr(r0)
    //     0x91daa8: sbfx            x3, x0, #1, #0x1f
    // 0x91daac: add             x0, x3, #1
    // 0x91dab0: lsl             x1, x0, #1
    // 0x91dab4: StoreField: r2->field_b = r1
    //     0x91dab4: stur            w1, [x2, #0xb]
    // 0x91dab8: mov             x1, x3
    // 0x91dabc: cmp             x1, x0
    // 0x91dac0: b.hs            #0x91dbd8
    // 0x91dac4: LoadField: r1 = r2->field_f
    //     0x91dac4: ldur            w1, [x2, #0xf]
    // 0x91dac8: DecompressPointer r1
    //     0x91dac8: add             x1, x1, HEAP, lsl #32
    // 0x91dacc: ldur            x0, [fp, #-0x18]
    // 0x91dad0: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91dad0: add             x25, x1, x3, lsl #2
    //     0x91dad4: add             x25, x25, #0xf
    //     0x91dad8: str             w0, [x25]
    //     0x91dadc: tbz             w0, #0, #0x91daf8
    //     0x91dae0: ldurb           w16, [x1, #-1]
    //     0x91dae4: ldurb           w17, [x0, #-1]
    //     0x91dae8: and             x16, x17, x16, lsr #2
    //     0x91daec: tst             x16, HEAP, lsr #32
    //     0x91daf0: b.eq            #0x91daf8
    //     0x91daf4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91daf8: r0 = Column()
    //     0x91daf8: bl              #0x629e44  ; AllocateColumnStub -> Column (size=0x30)
    // 0x91dafc: mov             x1, x0
    // 0x91db00: r0 = Instance_Axis
    //     0x91db00: ldr             x0, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91db04: stur            x1, [fp, #-0x10]
    // 0x91db08: StoreField: r1->field_f = r0
    //     0x91db08: stur            w0, [x1, #0xf]
    // 0x91db0c: r0 = Instance_MainAxisAlignment
    //     0x91db0c: add             x0, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91db10: ldr             x0, [x0, #0xb10]
    // 0x91db14: StoreField: r1->field_13 = r0
    //     0x91db14: stur            w0, [x1, #0x13]
    // 0x91db18: r0 = Instance_MainAxisSize
    //     0x91db18: add             x0, PP, #0x10, lsl #12  ; [pp+0x10420] Obj!MainAxisSize@c43c51
    //     0x91db1c: ldr             x0, [x0, #0x420]
    // 0x91db20: ArrayStore: r1[0] = r0  ; List_4
    //     0x91db20: stur            w0, [x1, #0x17]
    // 0x91db24: r0 = Instance_CrossAxisAlignment
    //     0x91db24: add             x0, PP, #0x10, lsl #12  ; [pp+0x10428] Obj!CrossAxisAlignment@c43b51
    //     0x91db28: ldr             x0, [x0, #0x428]
    // 0x91db2c: StoreField: r1->field_1b = r0
    //     0x91db2c: stur            w0, [x1, #0x1b]
    // 0x91db30: r0 = Instance_VerticalDirection
    //     0x91db30: add             x0, PP, #0x10, lsl #12  ; [pp+0x10430] Obj!VerticalDirection@c44091
    //     0x91db34: ldr             x0, [x0, #0x430]
    // 0x91db38: StoreField: r1->field_23 = r0
    //     0x91db38: stur            w0, [x1, #0x23]
    // 0x91db3c: r0 = Instance_Clip
    //     0x91db3c: add             x0, PP, #0xe, lsl #12  ; [pp+0xe4a0] Obj!Clip@c47641
    //     0x91db40: ldr             x0, [x0, #0x4a0]
    // 0x91db44: StoreField: r1->field_2b = r0
    //     0x91db44: stur            w0, [x1, #0x2b]
    // 0x91db48: ldur            x0, [fp, #-8]
    // 0x91db4c: StoreField: r1->field_b = r0
    //     0x91db4c: stur            w0, [x1, #0xb]
    // 0x91db50: ldur            d0, [fp, #-0x30]
    // 0x91db54: r0 = inline_Allocate_Double()
    //     0x91db54: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x91db58: add             x0, x0, #0x10
    //     0x91db5c: cmp             x2, x0
    //     0x91db60: b.ls            #0x91dbdc
    //     0x91db64: str             x0, [THR, #0x50]  ; THR::top
    //     0x91db68: sub             x0, x0, #0xf
    //     0x91db6c: movz            x2, #0xd148
    //     0x91db70: movk            x2, #0x3, lsl #16
    //     0x91db74: stur            x2, [x0, #-1]
    // 0x91db78: StoreField: r0->field_7 = d0
    //     0x91db78: stur            d0, [x0, #7]
    // 0x91db7c: stur            x0, [fp, #-8]
    // 0x91db80: r0 = Container()
    //     0x91db80: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91db84: stur            x0, [fp, #-0x18]
    // 0x91db88: r16 = Instance_Alignment
    //     0x91db88: add             x16, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91db8c: ldr             x16, [x16, #0x358]
    // 0x91db90: stp             x16, x0, [SP, #0x10]
    // 0x91db94: ldur            x16, [fp, #-8]
    // 0x91db98: ldur            lr, [fp, #-0x10]
    // 0x91db9c: stp             lr, x16, [SP]
    // 0x91dba0: r4 = const [0, 0x4, 0x4, 0x1, alignment, 0x1, child, 0x3, width, 0x2, null]
    //     0x91dba0: add             x4, PP, #0x37, lsl #12  ; [pp+0x37588] List(11) [0, 0x4, 0x4, 0x1, "alignment", 0x1, "child", 0x3, "width", 0x2, Null]
    //     0x91dba4: ldr             x4, [x4, #0x588]
    // 0x91dba8: r0 = Container()
    //     0x91dba8: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91dbac: ldur            x0, [fp, #-0x18]
    // 0x91dbb0: LeaveFrame
    //     0x91dbb0: mov             SP, fp
    //     0x91dbb4: ldp             fp, lr, [SP], #0x10
    // 0x91dbb8: ret
    //     0x91dbb8: ret             
    // 0x91dbbc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91dbbc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91dbc0: b               #0x91d7a0
    // 0x91dbc4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91dbc4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91dbc8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91dbc8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91dbcc: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91dbcc: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91dbd0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91dbd0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91dbd4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91dbd4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91dbd8: r0 = RangeErrorSharedWithFPURegs()
    //     0x91dbd8: bl              #0xc5f360  ; RangeErrorSharedWithFPURegsStub
    // 0x91dbdc: SaveReg d0
    //     0x91dbdc: str             q0, [SP, #-0x10]!
    // 0x91dbe0: SaveReg r1
    //     0x91dbe0: str             x1, [SP, #-8]!
    // 0x91dbe4: r0 = AllocateDouble()
    //     0x91dbe4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91dbe8: RestoreReg r1
    //     0x91dbe8: ldr             x1, [SP], #8
    // 0x91dbec: RestoreReg d0
    //     0x91dbec: ldr             q0, [SP], #0x10
    // 0x91dbf0: b               #0x91db78
  }
  _ _buildIcon(/* No info */) {
    // ** addr: 0x91dbf4, size: 0x474
    // 0x91dbf4: EnterFrame
    //     0x91dbf4: stp             fp, lr, [SP, #-0x10]!
    //     0x91dbf8: mov             fp, SP
    // 0x91dbfc: AllocStack(0x38)
    //     0x91dbfc: sub             SP, SP, #0x38
    // 0x91dc00: CheckStackOverflow
    //     0x91dc00: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91dc04: cmp             SP, x16
    //     0x91dc08: b.ls            #0x91e034
    // 0x91dc0c: ldr             x0, [fp, #0x10]
    // 0x91dc10: LoadField: r1 = r0->field_b
    //     0x91dc10: ldur            w1, [x0, #0xb]
    // 0x91dc14: DecompressPointer r1
    //     0x91dc14: add             x1, x1, HEAP, lsl #32
    // 0x91dc18: cmp             w1, NULL
    // 0x91dc1c: b.eq            #0x91e03c
    // 0x91dc20: LoadField: r1 = r0->field_f
    //     0x91dc20: ldur            w1, [x0, #0xf]
    // 0x91dc24: DecompressPointer r1
    //     0x91dc24: add             x1, x1, HEAP, lsl #32
    // 0x91dc28: cmp             w1, NULL
    // 0x91dc2c: b.eq            #0x91e040
    // 0x91dc30: str             x1, [SP]
    // 0x91dc34: r0 = of()
    //     0x91dc34: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x91dc38: LoadField: r1 = r0->field_87
    //     0x91dc38: ldur            w1, [x0, #0x87]
    // 0x91dc3c: DecompressPointer r1
    //     0x91dc3c: add             x1, x1, HEAP, lsl #32
    // 0x91dc40: ldr             x0, [fp, #0x10]
    // 0x91dc44: stur            x1, [fp, #-8]
    // 0x91dc48: LoadField: r2 = r0->field_b
    //     0x91dc48: ldur            w2, [x0, #0xb]
    // 0x91dc4c: DecompressPointer r2
    //     0x91dc4c: add             x2, x2, HEAP, lsl #32
    // 0x91dc50: cmp             w2, NULL
    // 0x91dc54: b.eq            #0x91e044
    // 0x91dc58: LoadField: r3 = r2->field_b
    //     0x91dc58: ldur            w3, [x2, #0xb]
    // 0x91dc5c: DecompressPointer r3
    //     0x91dc5c: add             x3, x3, HEAP, lsl #32
    // 0x91dc60: LoadField: r4 = r3->field_13
    //     0x91dc60: ldur            w4, [x3, #0x13]
    // 0x91dc64: DecompressPointer r4
    //     0x91dc64: add             x4, x4, HEAP, lsl #32
    // 0x91dc68: r16 = Instance_IndicatorResult
    //     0x91dc68: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x91dc6c: ldr             x16, [x16, #0x1c0]
    // 0x91dc70: cmp             w4, w16
    // 0x91dc74: b.ne            #0x91dc9c
    // 0x91dc78: r0 = SizedBox()
    //     0x91dc78: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91dc7c: mov             x1, x0
    // 0x91dc80: r0 = Instance_Icon
    //     0x91dc80: add             x0, PP, #0x40, lsl #12  ; [pp+0x40138] Obj!Icon@c38181
    //     0x91dc84: ldr             x0, [x0, #0x138]
    // 0x91dc88: StoreField: r1->field_b = r0
    //     0x91dc88: stur            w0, [x1, #0xb]
    // 0x91dc8c: mov             x3, x1
    // 0x91dc90: r2 = Instance_ValueKey
    //     0x91dc90: add             x2, PP, #0x40, lsl #12  ; [pp+0x40140] Obj!ValueKey@c2fce1
    //     0x91dc94: ldr             x2, [x2, #0x140]
    // 0x91dc98: b               #0x91df74
    // 0x91dc9c: LoadField: r0 = r3->field_f
    //     0x91dc9c: ldur            w0, [x3, #0xf]
    // 0x91dca0: DecompressPointer r0
    //     0x91dca0: add             x0, x0, HEAP, lsl #32
    // 0x91dca4: r16 = Instance_IndicatorMode
    //     0x91dca4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x91dca8: ldr             x16, [x16, #0x158]
    // 0x91dcac: cmp             w0, w16
    // 0x91dcb0: b.eq            #0x91dcc4
    // 0x91dcb4: r16 = Instance_IndicatorMode
    //     0x91dcb4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x91dcb8: ldr             x16, [x16, #0x1b8]
    // 0x91dcbc: cmp             w0, w16
    // 0x91dcc0: b.ne            #0x91dd2c
    // 0x91dcc4: ldur            x0, [fp, #-8]
    // 0x91dcc8: LoadField: r1 = r0->field_1b
    //     0x91dcc8: ldur            w1, [x0, #0x1b]
    // 0x91dccc: DecompressPointer r1
    //     0x91dccc: add             x1, x1, HEAP, lsl #32
    // 0x91dcd0: stur            x1, [fp, #-0x10]
    // 0x91dcd4: r0 = CircularProgressIndicator()
    //     0x91dcd4: bl              #0x91e258  ; AllocateCircularProgressIndicatorStub -> CircularProgressIndicator (size=0x3c)
    // 0x91dcd8: d0 = 2.000000
    //     0x91dcd8: fmov            d0, #2.00000000
    // 0x91dcdc: stur            x0, [fp, #-0x18]
    // 0x91dce0: StoreField: r0->field_27 = d0
    //     0x91dce0: stur            d0, [x0, #0x27]
    // 0x91dce4: d0 = 0.000000
    //     0x91dce4: eor             v0.16b, v0.16b, v0.16b
    // 0x91dce8: StoreField: r0->field_2f = d0
    //     0x91dce8: stur            d0, [x0, #0x2f]
    // 0x91dcec: r1 = Instance__ActivityIndicatorType
    //     0x91dcec: add             x1, PP, #0x13, lsl #12  ; [pp+0x13e70] Obj!_ActivityIndicatorType@c445d1
    //     0x91dcf0: ldr             x1, [x1, #0xe70]
    // 0x91dcf4: StoreField: r0->field_23 = r1
    //     0x91dcf4: stur            w1, [x0, #0x23]
    // 0x91dcf8: ldur            x1, [fp, #-0x10]
    // 0x91dcfc: StoreField: r0->field_13 = r1
    //     0x91dcfc: stur            w1, [x0, #0x13]
    // 0x91dd00: r0 = SizedBox()
    //     0x91dd00: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91dd04: mov             x1, x0
    // 0x91dd08: r0 = 20.000000
    //     0x91dd08: add             x0, PP, #0xf, lsl #12  ; [pp+0xf7d0] 20
    //     0x91dd0c: ldr             x0, [x0, #0x7d0]
    // 0x91dd10: StoreField: r1->field_f = r0
    //     0x91dd10: stur            w0, [x1, #0xf]
    // 0x91dd14: StoreField: r1->field_13 = r0
    //     0x91dd14: stur            w0, [x1, #0x13]
    // 0x91dd18: ldur            x0, [fp, #-0x18]
    // 0x91dd1c: StoreField: r1->field_b = r0
    //     0x91dd1c: stur            w0, [x1, #0xb]
    // 0x91dd20: r0 = Instance_ValueKey
    //     0x91dd20: add             x0, PP, #0x40, lsl #12  ; [pp+0x40148] Obj!ValueKey@c2fcd1
    //     0x91dd24: ldr             x0, [x0, #0x148]
    // 0x91dd28: b               #0x91df6c
    // 0x91dd2c: d0 = 2.000000
    //     0x91dd2c: fmov            d0, #2.00000000
    // 0x91dd30: r16 = Instance_IndicatorMode
    //     0x91dd30: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x91dd34: ldr             x16, [x16, #0x160]
    // 0x91dd38: cmp             w0, w16
    // 0x91dd3c: b.eq            #0x91dd50
    // 0x91dd40: r16 = Instance_IndicatorMode
    //     0x91dd40: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x91dd44: ldr             x16, [x16, #0x190]
    // 0x91dd48: cmp             w0, w16
    // 0x91dd4c: b.ne            #0x91de24
    // 0x91dd50: r16 = Instance_IndicatorResult
    //     0x91dd50: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a8] Obj!IndicatorResult@c45311
    //     0x91dd54: ldr             x16, [x16, #0x1a8]
    // 0x91dd58: cmp             w4, w16
    // 0x91dd5c: b.ne            #0x91dd80
    // 0x91dd60: r0 = SizedBox()
    //     0x91dd60: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91dd64: mov             x1, x0
    // 0x91dd68: r0 = Instance_Icon
    //     0x91dd68: add             x0, PP, #0x40, lsl #12  ; [pp+0x40150] Obj!Icon@c38141
    //     0x91dd6c: ldr             x0, [x0, #0x150]
    // 0x91dd70: StoreField: r1->field_b = r0
    //     0x91dd70: stur            w0, [x1, #0xb]
    // 0x91dd74: r0 = Instance_ValueKey
    //     0x91dd74: add             x0, PP, #0x40, lsl #12  ; [pp+0x40158] Obj!ValueKey@c2fcc1
    //     0x91dd78: ldr             x0, [x0, #0x158]
    // 0x91dd7c: b               #0x91df6c
    // 0x91dd80: LoadField: r0 = r3->field_27
    //     0x91dd80: ldur            w0, [x3, #0x27]
    // 0x91dd84: DecompressPointer r0
    //     0x91dd84: add             x0, x0, HEAP, lsl #32
    // 0x91dd88: r16 = Instance_Axis
    //     0x91dd88: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91dd8c: cmp             w0, w16
    // 0x91dd90: b.ne            #0x91dd9c
    // 0x91dd94: d0 = 0.000000
    //     0x91dd94: eor             v0.16b, v0.16b, v0.16b
    // 0x91dd98: b               #0x91ddac
    // 0x91dd9c: d1 = 3.141593
    //     0x91dd9c: ldr             d1, [PP, #0x3e78]  ; [pp+0x3e78] IMM: double(3.141592653589793) from 0x400921fb54442d18
    // 0x91dda0: fneg            d2, d1
    // 0x91dda4: fdiv            d1, d2, d0
    // 0x91dda8: mov             v0.16b, v1.16b
    // 0x91ddac: stur            d0, [fp, #-0x30]
    // 0x91ddb0: r0 = Transform()
    //     0x91ddb0: bl              #0x629e38  ; AllocateTransformStub -> Transform (size=0x24)
    // 0x91ddb4: mov             x1, x0
    // 0x91ddb8: r0 = Instance_Alignment
    //     0x91ddb8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91ddbc: ldr             x0, [x0, #0x358]
    // 0x91ddc0: stur            x1, [fp, #-0x10]
    // 0x91ddc4: ArrayStore: r1[0] = r0  ; List_4
    //     0x91ddc4: stur            w0, [x1, #0x17]
    // 0x91ddc8: r4 = true
    //     0x91ddc8: add             x4, NULL, #0x20  ; true
    // 0x91ddcc: StoreField: r1->field_1b = r4
    //     0x91ddcc: stur            w4, [x1, #0x1b]
    // 0x91ddd0: ldur            d0, [fp, #-0x30]
    // 0x91ddd4: str             d0, [SP]
    // 0x91ddd8: r0 = _computeRotation()
    //     0x91ddd8: bl              #0x91e080  ; [package:flutter/src/widgets/basic.dart] Transform::_computeRotation
    // 0x91dddc: ldur            x1, [fp, #-0x10]
    // 0x91dde0: StoreField: r1->field_f = r0
    //     0x91dde0: stur            w0, [x1, #0xf]
    //     0x91dde4: ldurb           w16, [x1, #-1]
    //     0x91dde8: ldurb           w17, [x0, #-1]
    //     0x91ddec: and             x16, x17, x16, lsr #2
    //     0x91ddf0: tst             x16, HEAP, lsr #32
    //     0x91ddf4: b.eq            #0x91ddfc
    //     0x91ddf8: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x91ddfc: r0 = Instance_Icon
    //     0x91ddfc: add             x0, PP, #0x40, lsl #12  ; [pp+0x40160] Obj!Icon@c38101
    //     0x91de00: ldr             x0, [x0, #0x160]
    // 0x91de04: StoreField: r1->field_b = r0
    //     0x91de04: stur            w0, [x1, #0xb]
    // 0x91de08: r0 = SizedBox()
    //     0x91de08: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91de0c: mov             x1, x0
    // 0x91de10: ldur            x0, [fp, #-0x10]
    // 0x91de14: StoreField: r1->field_b = r0
    //     0x91de14: stur            w0, [x1, #0xb]
    // 0x91de18: r0 = Instance_ValueKey
    //     0x91de18: add             x0, PP, #0x40, lsl #12  ; [pp+0x40168] Obj!ValueKey@c2fcb1
    //     0x91de1c: ldr             x0, [x0, #0x168]
    // 0x91de20: b               #0x91df6c
    // 0x91de24: ldr             x1, [fp, #0x10]
    // 0x91de28: r4 = true
    //     0x91de28: add             x4, NULL, #0x20  ; true
    // 0x91de2c: r0 = Instance_Alignment
    //     0x91de2c: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91de30: ldr             x0, [x0, #0x358]
    // 0x91de34: d1 = 3.141593
    //     0x91de34: ldr             d1, [PP, #0x3e78]  ; [pp+0x3e78] IMM: double(3.141592653589793) from 0x400921fb54442d18
    // 0x91de38: fneg            d0, d1
    // 0x91de3c: LoadField: r5 = r1->field_23
    //     0x91de3c: ldur            w5, [x1, #0x23]
    // 0x91de40: DecompressPointer r5
    //     0x91de40: add             x5, x5, HEAP, lsl #32
    // 0x91de44: r16 = Sentinel
    //     0x91de44: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91de48: cmp             w5, w16
    // 0x91de4c: b.eq            #0x91e048
    // 0x91de50: LoadField: r6 = r5->field_37
    //     0x91de50: ldur            w6, [x5, #0x37]
    // 0x91de54: DecompressPointer r6
    //     0x91de54: add             x6, x6, HEAP, lsl #32
    // 0x91de58: r16 = Sentinel
    //     0x91de58: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91de5c: cmp             w6, w16
    // 0x91de60: b.eq            #0x91e054
    // 0x91de64: LoadField: d1 = r6->field_7
    //     0x91de64: ldur            d1, [x6, #7]
    // 0x91de68: fmul            d2, d0, d1
    // 0x91de6c: stur            d2, [fp, #-0x30]
    // 0x91de70: LoadField: r5 = r2->field_53
    //     0x91de70: ldur            w5, [x2, #0x53]
    // 0x91de74: DecompressPointer r5
    //     0x91de74: add             x5, x5, HEAP, lsl #32
    // 0x91de78: tbnz            w5, #4, #0x91dea8
    // 0x91de7c: LoadField: r2 = r3->field_27
    //     0x91de7c: ldur            w2, [x3, #0x27]
    // 0x91de80: DecompressPointer r2
    //     0x91de80: add             x2, x2, HEAP, lsl #32
    // 0x91de84: r16 = Instance_Axis
    //     0x91de84: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91de88: cmp             w2, w16
    // 0x91de8c: b.ne            #0x91de9c
    // 0x91de90: r2 = Instance_IconData
    //     0x91de90: add             x2, PP, #0x40, lsl #12  ; [pp+0x40170] Obj!IconData@c2c571
    //     0x91de94: ldr             x2, [x2, #0x170]
    // 0x91de98: b               #0x91ded0
    // 0x91de9c: r2 = Instance_IconData
    //     0x91de9c: add             x2, PP, #0x2c, lsl #12  ; [pp+0x2c9b8] Obj!IconData@c2c5f1
    //     0x91dea0: ldr             x2, [x2, #0x9b8]
    // 0x91dea4: b               #0x91ded0
    // 0x91dea8: LoadField: r2 = r3->field_27
    //     0x91dea8: ldur            w2, [x3, #0x27]
    // 0x91deac: DecompressPointer r2
    //     0x91deac: add             x2, x2, HEAP, lsl #32
    // 0x91deb0: r16 = Instance_Axis
    //     0x91deb0: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91deb4: cmp             w2, w16
    // 0x91deb8: b.ne            #0x91dec8
    // 0x91debc: r2 = Instance_IconData
    //     0x91debc: add             x2, PP, #0x40, lsl #12  ; [pp+0x40178] Obj!IconData@c2c551
    //     0x91dec0: ldr             x2, [x2, #0x178]
    // 0x91dec4: b               #0x91ded0
    // 0x91dec8: r2 = Instance_IconData
    //     0x91dec8: add             x2, PP, #0x40, lsl #12  ; [pp+0x40180] Obj!IconData@c2c531
    //     0x91decc: ldr             x2, [x2, #0x180]
    // 0x91ded0: stur            x2, [fp, #-0x10]
    // 0x91ded4: r0 = Icon()
    //     0x91ded4: bl              #0x66e590  ; AllocateIconStub -> Icon (size=0x34)
    // 0x91ded8: mov             x1, x0
    // 0x91dedc: ldur            x0, [fp, #-0x10]
    // 0x91dee0: stur            x1, [fp, #-0x18]
    // 0x91dee4: StoreField: r1->field_b = r0
    //     0x91dee4: stur            w0, [x1, #0xb]
    // 0x91dee8: r0 = Transform()
    //     0x91dee8: bl              #0x629e38  ; AllocateTransformStub -> Transform (size=0x24)
    // 0x91deec: mov             x1, x0
    // 0x91def0: r0 = Instance_Alignment
    //     0x91def0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91def4: ldr             x0, [x0, #0x358]
    // 0x91def8: stur            x1, [fp, #-0x10]
    // 0x91defc: ArrayStore: r1[0] = r0  ; List_4
    //     0x91defc: stur            w0, [x1, #0x17]
    // 0x91df00: r0 = true
    //     0x91df00: add             x0, NULL, #0x20  ; true
    // 0x91df04: StoreField: r1->field_1b = r0
    //     0x91df04: stur            w0, [x1, #0x1b]
    // 0x91df08: ldur            d0, [fp, #-0x30]
    // 0x91df0c: str             d0, [SP]
    // 0x91df10: r0 = _computeRotation()
    //     0x91df10: bl              #0x91e080  ; [package:flutter/src/widgets/basic.dart] Transform::_computeRotation
    // 0x91df14: ldur            x1, [fp, #-0x10]
    // 0x91df18: StoreField: r1->field_f = r0
    //     0x91df18: stur            w0, [x1, #0xf]
    //     0x91df1c: ldurb           w16, [x1, #-1]
    //     0x91df20: ldurb           w17, [x0, #-1]
    //     0x91df24: and             x16, x17, x16, lsr #2
    //     0x91df28: tst             x16, HEAP, lsr #32
    //     0x91df2c: b.eq            #0x91df34
    //     0x91df30: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x91df34: ldur            x0, [fp, #-0x18]
    // 0x91df38: StoreField: r1->field_b = r0
    //     0x91df38: stur            w0, [x1, #0xb]
    //     0x91df3c: ldurb           w16, [x1, #-1]
    //     0x91df40: ldurb           w17, [x0, #-1]
    //     0x91df44: and             x16, x17, x16, lsr #2
    //     0x91df48: tst             x16, HEAP, lsr #32
    //     0x91df4c: b.eq            #0x91df54
    //     0x91df50: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x91df54: r0 = SizedBox()
    //     0x91df54: bl              #0x622a80  ; AllocateSizedBoxStub -> SizedBox (size=0x18)
    // 0x91df58: mov             x1, x0
    // 0x91df5c: ldur            x0, [fp, #-0x10]
    // 0x91df60: StoreField: r1->field_b = r0
    //     0x91df60: stur            w0, [x1, #0xb]
    // 0x91df64: r0 = Instance_ValueKey
    //     0x91df64: add             x0, PP, #0x40, lsl #12  ; [pp+0x40188] Obj!ValueKey@c2fca1
    //     0x91df68: ldr             x0, [x0, #0x188]
    // 0x91df6c: mov             x3, x1
    // 0x91df70: mov             x2, x0
    // 0x91df74: ldr             x0, [fp, #0x10]
    // 0x91df78: ldur            x1, [fp, #-8]
    // 0x91df7c: stur            x3, [fp, #-0x18]
    // 0x91df80: stur            x2, [fp, #-0x20]
    // 0x91df84: LoadField: r4 = r0->field_1b
    //     0x91df84: ldur            w4, [x0, #0x1b]
    // 0x91df88: DecompressPointer r4
    //     0x91df88: add             x4, x4, HEAP, lsl #32
    // 0x91df8c: r16 = Sentinel
    //     0x91df8c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91df90: cmp             w4, w16
    // 0x91df94: b.eq            #0x91e05c
    // 0x91df98: stur            x4, [fp, #-0x10]
    // 0x91df9c: r0 = IconTheme()
    //     0x91df9c: bl              #0x91e074  ; AllocateIconThemeStub -> IconTheme (size=0x14)
    // 0x91dfa0: mov             x1, x0
    // 0x91dfa4: ldur            x0, [fp, #-8]
    // 0x91dfa8: stur            x1, [fp, #-0x28]
    // 0x91dfac: StoreField: r1->field_f = r0
    //     0x91dfac: stur            w0, [x1, #0xf]
    // 0x91dfb0: ldur            x0, [fp, #-0x18]
    // 0x91dfb4: StoreField: r1->field_b = r0
    //     0x91dfb4: stur            w0, [x1, #0xb]
    // 0x91dfb8: ldur            x0, [fp, #-0x20]
    // 0x91dfbc: StoreField: r1->field_7 = r0
    //     0x91dfbc: stur            w0, [x1, #7]
    // 0x91dfc0: r0 = AnimatedSwitcher()
    //     0x91dfc0: bl              #0x91e068  ; AllocateAnimatedSwitcherStub -> AnimatedSwitcher (size=0x28)
    // 0x91dfc4: mov             x3, x0
    // 0x91dfc8: ldur            x0, [fp, #-0x28]
    // 0x91dfcc: stur            x3, [fp, #-8]
    // 0x91dfd0: StoreField: r3->field_b = r0
    //     0x91dfd0: stur            w0, [x3, #0xb]
    // 0x91dfd4: r0 = Instance_Duration
    //     0x91dfd4: add             x0, PP, #0xf, lsl #12  ; [pp+0xf010] Obj!Duration@c47d21
    //     0x91dfd8: ldr             x0, [x0, #0x10]
    // 0x91dfdc: StoreField: r3->field_f = r0
    //     0x91dfdc: stur            w0, [x3, #0xf]
    // 0x91dfe0: r0 = Instance_Duration
    //     0x91dfe0: add             x0, PP, #0xf, lsl #12  ; [pp+0xf018] Obj!Duration@c47cd1
    //     0x91dfe4: ldr             x0, [x0, #0x18]
    // 0x91dfe8: StoreField: r3->field_13 = r0
    //     0x91dfe8: stur            w0, [x3, #0x13]
    // 0x91dfec: r0 = Instance__Linear
    //     0x91dfec: ldr             x0, [PP, #0x5ff8]  ; [pp+0x5ff8] Obj!_Linear@c394b1
    // 0x91dff0: ArrayStore: r3[0] = r0  ; List_4
    //     0x91dff0: stur            w0, [x3, #0x17]
    // 0x91dff4: StoreField: r3->field_1b = r0
    //     0x91dff4: stur            w0, [x3, #0x1b]
    // 0x91dff8: r1 = Function '<anonymous closure>':.
    //     0x91dff8: add             x1, PP, #0x40, lsl #12  ; [pp+0x40190] AnonymousClosure: (0x91e264), in [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildIcon (0x91dbf4)
    //     0x91dffc: ldr             x1, [x1, #0x190]
    // 0x91e000: r2 = Null
    //     0x91e000: mov             x2, NULL
    // 0x91e004: r0 = AllocateClosure()
    //     0x91e004: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x91e008: mov             x1, x0
    // 0x91e00c: ldur            x0, [fp, #-8]
    // 0x91e010: StoreField: r0->field_1f = r1
    //     0x91e010: stur            w1, [x0, #0x1f]
    // 0x91e014: r1 = Closure: (Widget?, List<Widget>) => Widget from Function 'defaultLayoutBuilder': static.
    //     0x91e014: add             x1, PP, #0x40, lsl #12  ; [pp+0x400f0] Closure: (Widget?, List<Widget>) => Widget from Function 'defaultLayoutBuilder': static. (0x222f3eee2c0)
    //     0x91e018: ldr             x1, [x1, #0xf0]
    // 0x91e01c: StoreField: r0->field_23 = r1
    //     0x91e01c: stur            w1, [x0, #0x23]
    // 0x91e020: ldur            x1, [fp, #-0x10]
    // 0x91e024: StoreField: r0->field_7 = r1
    //     0x91e024: stur            w1, [x0, #7]
    // 0x91e028: LeaveFrame
    //     0x91e028: mov             SP, fp
    //     0x91e02c: ldp             fp, lr, [SP], #0x10
    // 0x91e030: ret
    //     0x91e030: ret             
    // 0x91e034: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91e034: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91e038: b               #0x91dc0c
    // 0x91e03c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e03c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e040: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e040: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e044: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e044: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e048: r9 = _iconAnimationController
    //     0x91e048: add             x9, PP, #0x40, lsl #12  ; [pp+0x40198] Field <_ClassicIndicatorState@765089737._iconAnimationController@765089737>: late (offset: 0x24)
    //     0x91e04c: ldr             x9, [x9, #0x198]
    // 0x91e050: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x91e050: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
    // 0x91e054: r9 = _value
    //     0x91e054: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0x91e058: r0 = LateInitializationErrorSharedWithFPURegs()
    //     0x91e058: bl              #0xc5f708  ; LateInitializationErrorSharedWithFPURegsStub
    // 0x91e05c: r9 = _iconAnimatedSwitcherKey
    //     0x91e05c: add             x9, PP, #0x40, lsl #12  ; [pp+0x401a0] Field <_ClassicIndicatorState@765089737._iconAnimatedSwitcherKey@765089737>: late (offset: 0x1c)
    //     0x91e060: ldr             x9, [x9, #0x1a0]
    // 0x91e064: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91e064: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] FadeTransition <anonymous closure>(dynamic, Widget, Animation<double>) {
    // ** addr: 0x91e264, size: 0x5c
    // 0x91e264: EnterFrame
    //     0x91e264: stp             fp, lr, [SP, #-0x10]!
    //     0x91e268: mov             fp, SP
    // 0x91e26c: AllocStack(0x8)
    //     0x91e26c: sub             SP, SP, #8
    // 0x91e270: r0 = ScaleTransition()
    //     0x91e270: bl              #0x61384c  ; AllocateScaleTransitionStub -> ScaleTransition (size=0x1c)
    // 0x91e274: mov             x1, x0
    // 0x91e278: r0 = Instance_Alignment
    //     0x91e278: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91e27c: ldr             x0, [x0, #0x358]
    // 0x91e280: stur            x1, [fp, #-8]
    // 0x91e284: StoreField: r1->field_f = r0
    //     0x91e284: stur            w0, [x1, #0xf]
    // 0x91e288: ldr             x0, [fp, #0x18]
    // 0x91e28c: ArrayStore: r1[0] = r0  ; List_4
    //     0x91e28c: stur            w0, [x1, #0x17]
    // 0x91e290: ldr             x0, [fp, #0x10]
    // 0x91e294: StoreField: r1->field_b = r0
    //     0x91e294: stur            w0, [x1, #0xb]
    // 0x91e298: r0 = FadeTransition()
    //     0x91e298: bl              #0x6112f8  ; AllocateFadeTransitionStub -> FadeTransition (size=0x18)
    // 0x91e29c: ldr             x1, [fp, #0x10]
    // 0x91e2a0: StoreField: r0->field_f = r1
    //     0x91e2a0: stur            w1, [x0, #0xf]
    // 0x91e2a4: r1 = false
    //     0x91e2a4: add             x1, NULL, #0x30  ; false
    // 0x91e2a8: StoreField: r0->field_13 = r1
    //     0x91e2a8: stur            w1, [x0, #0x13]
    // 0x91e2ac: ldur            x1, [fp, #-8]
    // 0x91e2b0: StoreField: r0->field_b = r1
    //     0x91e2b0: stur            w1, [x0, #0xb]
    // 0x91e2b4: LeaveFrame
    //     0x91e2b4: mov             SP, fp
    //     0x91e2b8: ldp             fp, lr, [SP], #0x10
    // 0x91e2bc: ret
    //     0x91e2bc: ret             
  }
  _ _buildMessage(/* No info */) {
    // ** addr: 0x91e41c, size: 0xd0
    // 0x91e41c: EnterFrame
    //     0x91e41c: stp             fp, lr, [SP, #-0x10]!
    //     0x91e420: mov             fp, SP
    // 0x91e424: AllocStack(0x20)
    //     0x91e424: sub             SP, SP, #0x20
    // 0x91e428: CheckStackOverflow
    //     0x91e428: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91e42c: cmp             SP, x16
    //     0x91e430: b.ls            #0x91e4d8
    // 0x91e434: ldr             x0, [fp, #0x10]
    // 0x91e438: LoadField: r1 = r0->field_b
    //     0x91e438: ldur            w1, [x0, #0xb]
    // 0x91e43c: DecompressPointer r1
    //     0x91e43c: add             x1, x1, HEAP, lsl #32
    // 0x91e440: cmp             w1, NULL
    // 0x91e444: b.eq            #0x91e4e0
    // 0x91e448: str             x0, [SP]
    // 0x91e44c: r0 = _messageText()
    //     0x91e44c: bl              #0x91e4ec  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_messageText
    // 0x91e450: mov             x1, x0
    // 0x91e454: ldr             x0, [fp, #0x10]
    // 0x91e458: stur            x1, [fp, #-8]
    // 0x91e45c: LoadField: r2 = r0->field_b
    //     0x91e45c: ldur            w2, [x0, #0xb]
    // 0x91e460: DecompressPointer r2
    //     0x91e460: add             x2, x2, HEAP, lsl #32
    // 0x91e464: cmp             w2, NULL
    // 0x91e468: b.eq            #0x91e4e4
    // 0x91e46c: LoadField: r2 = r0->field_f
    //     0x91e46c: ldur            w2, [x0, #0xf]
    // 0x91e470: DecompressPointer r2
    //     0x91e470: add             x2, x2, HEAP, lsl #32
    // 0x91e474: cmp             w2, NULL
    // 0x91e478: b.eq            #0x91e4e8
    // 0x91e47c: str             x2, [SP]
    // 0x91e480: r0 = of()
    //     0x91e480: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x91e484: LoadField: r1 = r0->field_93
    //     0x91e484: ldur            w1, [x0, #0x93]
    // 0x91e488: DecompressPointer r1
    //     0x91e488: add             x1, x1, HEAP, lsl #32
    // 0x91e48c: LoadField: r0 = r1->field_33
    //     0x91e48c: ldur            w0, [x1, #0x33]
    // 0x91e490: DecompressPointer r0
    //     0x91e490: add             x0, x0, HEAP, lsl #32
    // 0x91e494: stur            x0, [fp, #-0x10]
    // 0x91e498: r0 = Text()
    //     0x91e498: bl              #0x6225d8  ; AllocateTextStub -> Text (size=0x48)
    // 0x91e49c: mov             x1, x0
    // 0x91e4a0: ldur            x0, [fp, #-8]
    // 0x91e4a4: stur            x1, [fp, #-0x18]
    // 0x91e4a8: StoreField: r1->field_b = r0
    //     0x91e4a8: stur            w0, [x1, #0xb]
    // 0x91e4ac: ldur            x0, [fp, #-0x10]
    // 0x91e4b0: StoreField: r1->field_13 = r0
    //     0x91e4b0: stur            w0, [x1, #0x13]
    // 0x91e4b4: r0 = Padding()
    //     0x91e4b4: bl              #0x6105b0  ; AllocatePaddingStub -> Padding (size=0x14)
    // 0x91e4b8: r1 = Instance_EdgeInsets
    //     0x91e4b8: add             x1, PP, #0x40, lsl #12  ; [pp+0x401a8] Obj!EdgeInsets@c2e011
    //     0x91e4bc: ldr             x1, [x1, #0x1a8]
    // 0x91e4c0: StoreField: r0->field_f = r1
    //     0x91e4c0: stur            w1, [x0, #0xf]
    // 0x91e4c4: ldur            x1, [fp, #-0x18]
    // 0x91e4c8: StoreField: r0->field_b = r1
    //     0x91e4c8: stur            w1, [x0, #0xb]
    // 0x91e4cc: LeaveFrame
    //     0x91e4cc: mov             SP, fp
    //     0x91e4d0: ldp             fp, lr, [SP], #0x10
    // 0x91e4d4: ret
    //     0x91e4d4: ret             
    // 0x91e4d8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91e4d8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91e4dc: b               #0x91e434
    // 0x91e4e0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e4e0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e4e4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e4e4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e4e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e4e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _messageText(/* No info */) {
    // ** addr: 0x91e4ec, size: 0x220
    // 0x91e4ec: EnterFrame
    //     0x91e4ec: stp             fp, lr, [SP, #-0x10]!
    //     0x91e4f0: mov             fp, SP
    // 0x91e4f4: AllocStack(0x30)
    //     0x91e4f4: sub             SP, SP, #0x30
    // 0x91e4f8: CheckStackOverflow
    //     0x91e4f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91e4fc: cmp             SP, x16
    //     0x91e500: b.ls            #0x91e6e0
    // 0x91e504: ldr             x0, [fp, #0x10]
    // 0x91e508: LoadField: r1 = r0->field_b
    //     0x91e508: ldur            w1, [x0, #0xb]
    // 0x91e50c: DecompressPointer r1
    //     0x91e50c: add             x1, x1, HEAP, lsl #32
    // 0x91e510: cmp             w1, NULL
    // 0x91e514: b.eq            #0x91e6e8
    // 0x91e518: r16 = "Last updated at %T"
    //     0x91e518: add             x16, PP, #0x31, lsl #12  ; [pp+0x31690] "Last updated at %T"
    //     0x91e51c: ldr             x16, [x16, #0x690]
    // 0x91e520: r30 = "%T"
    //     0x91e520: add             lr, PP, #0x40, lsl #12  ; [pp+0x401b0] "%T"
    //     0x91e524: ldr             lr, [lr, #0x1b0]
    // 0x91e528: stp             lr, x16, [SP]
    // 0x91e52c: r4 = const [0, 0x2, 0x2, 0x2, null]
    //     0x91e52c: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    // 0x91e530: r0 = contains()
    //     0x91e530: bl              #0xc5c11c  ; [dart:core] _OneByteString::contains
    // 0x91e534: tbnz            w0, #4, #0x91e6b8
    // 0x91e538: ldr             x0, [fp, #0x10]
    // 0x91e53c: LoadField: r1 = r0->field_1f
    //     0x91e53c: ldur            w1, [x0, #0x1f]
    // 0x91e540: DecompressPointer r1
    //     0x91e540: add             x1, x1, HEAP, lsl #32
    // 0x91e544: r16 = Sentinel
    //     0x91e544: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91e548: cmp             w1, w16
    // 0x91e54c: b.eq            #0x91e6ec
    // 0x91e550: str             x1, [SP]
    // 0x91e554: r0 = _parts()
    //     0x91e554: bl              #0x4f3238  ; [dart:core] DateTime::_parts
    // 0x91e558: mov             x2, x0
    // 0x91e55c: LoadField: r0 = r2->field_b
    //     0x91e55c: ldur            w0, [x2, #0xb]
    // 0x91e560: DecompressPointer r0
    //     0x91e560: add             x0, x0, HEAP, lsl #32
    // 0x91e564: r1 = LoadInt32Instr(r0)
    //     0x91e564: sbfx            x1, x0, #1, #0x1f
    // 0x91e568: mov             x0, x1
    // 0x91e56c: r1 = 3
    //     0x91e56c: movz            x1, #0x3
    // 0x91e570: cmp             x1, x0
    // 0x91e574: b.hs            #0x91e6f8
    // 0x91e578: LoadField: r0 = r2->field_1b
    //     0x91e578: ldur            w0, [x2, #0x1b]
    // 0x91e57c: DecompressPointer r0
    //     0x91e57c: add             x0, x0, HEAP, lsl #32
    // 0x91e580: r1 = LoadInt32Instr(r0)
    //     0x91e580: sbfx            x1, x0, #1, #0x1f
    //     0x91e584: tbz             w0, #0, #0x91e58c
    //     0x91e588: ldur            x1, [x0, #7]
    // 0x91e58c: cmp             x1, #0xa
    // 0x91e590: b.ge            #0x91e59c
    // 0x91e594: r1 = "0"
    //     0x91e594: ldr             x1, [PP, #0x3470]  ; [pp+0x3470] "0"
    // 0x91e598: b               #0x91e5a0
    // 0x91e59c: r1 = ""
    //     0x91e59c: ldr             x1, [PP, #0x2e8]  ; [pp+0x2e8] ""
    // 0x91e5a0: ldr             x0, [fp, #0x10]
    // 0x91e5a4: stur            x1, [fp, #-8]
    // 0x91e5a8: LoadField: r2 = r0->field_b
    //     0x91e5a8: ldur            w2, [x0, #0xb]
    // 0x91e5ac: DecompressPointer r2
    //     0x91e5ac: add             x2, x2, HEAP, lsl #32
    // 0x91e5b0: cmp             w2, NULL
    // 0x91e5b4: b.eq            #0x91e6fc
    // 0x91e5b8: LoadField: r2 = r0->field_1f
    //     0x91e5b8: ldur            w2, [x0, #0x1f]
    // 0x91e5bc: DecompressPointer r2
    //     0x91e5bc: add             x2, x2, HEAP, lsl #32
    // 0x91e5c0: str             x2, [SP]
    // 0x91e5c4: r0 = _parts()
    //     0x91e5c4: bl              #0x4f3238  ; [dart:core] DateTime::_parts
    // 0x91e5c8: mov             x2, x0
    // 0x91e5cc: LoadField: r0 = r2->field_b
    //     0x91e5cc: ldur            w0, [x2, #0xb]
    // 0x91e5d0: DecompressPointer r0
    //     0x91e5d0: add             x0, x0, HEAP, lsl #32
    // 0x91e5d4: r1 = LoadInt32Instr(r0)
    //     0x91e5d4: sbfx            x1, x0, #1, #0x1f
    // 0x91e5d8: mov             x0, x1
    // 0x91e5dc: r1 = 4
    //     0x91e5dc: movz            x1, #0x4
    // 0x91e5e0: cmp             x1, x0
    // 0x91e5e4: b.hs            #0x91e700
    // 0x91e5e8: LoadField: r0 = r2->field_1f
    //     0x91e5e8: ldur            w0, [x2, #0x1f]
    // 0x91e5ec: DecompressPointer r0
    //     0x91e5ec: add             x0, x0, HEAP, lsl #32
    // 0x91e5f0: stur            x0, [fp, #-0x10]
    // 0x91e5f4: r1 = Null
    //     0x91e5f4: mov             x1, NULL
    // 0x91e5f8: r2 = 8
    //     0x91e5f8: movz            x2, #0x8
    // 0x91e5fc: r0 = AllocateArray()
    //     0x91e5fc: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x91e600: mov             x1, x0
    // 0x91e604: ldur            x0, [fp, #-0x10]
    // 0x91e608: stur            x1, [fp, #-0x18]
    // 0x91e60c: StoreField: r1->field_f = r0
    //     0x91e60c: stur            w0, [x1, #0xf]
    // 0x91e610: r17 = ":"
    //     0x91e610: ldr             x17, [PP, #0x16e8]  ; [pp+0x16e8] ":"
    // 0x91e614: StoreField: r1->field_13 = r17
    //     0x91e614: stur            w17, [x1, #0x13]
    // 0x91e618: ldur            x0, [fp, #-8]
    // 0x91e61c: ArrayStore: r1[0] = r0  ; List_4
    //     0x91e61c: stur            w0, [x1, #0x17]
    // 0x91e620: ldr             x0, [fp, #0x10]
    // 0x91e624: LoadField: r2 = r0->field_1f
    //     0x91e624: ldur            w2, [x0, #0x1f]
    // 0x91e628: DecompressPointer r2
    //     0x91e628: add             x2, x2, HEAP, lsl #32
    // 0x91e62c: str             x2, [SP]
    // 0x91e630: r0 = _parts()
    //     0x91e630: bl              #0x4f3238  ; [dart:core] DateTime::_parts
    // 0x91e634: mov             x2, x0
    // 0x91e638: LoadField: r0 = r2->field_b
    //     0x91e638: ldur            w0, [x2, #0xb]
    // 0x91e63c: DecompressPointer r0
    //     0x91e63c: add             x0, x0, HEAP, lsl #32
    // 0x91e640: r1 = LoadInt32Instr(r0)
    //     0x91e640: sbfx            x1, x0, #1, #0x1f
    // 0x91e644: mov             x0, x1
    // 0x91e648: r1 = 3
    //     0x91e648: movz            x1, #0x3
    // 0x91e64c: cmp             x1, x0
    // 0x91e650: b.hs            #0x91e704
    // 0x91e654: LoadField: r0 = r2->field_1b
    //     0x91e654: ldur            w0, [x2, #0x1b]
    // 0x91e658: DecompressPointer r0
    //     0x91e658: add             x0, x0, HEAP, lsl #32
    // 0x91e65c: ldur            x1, [fp, #-0x18]
    // 0x91e660: ArrayStore: r1[3] = r0  ; List_4
    //     0x91e660: add             x25, x1, #0x1b
    //     0x91e664: str             w0, [x25]
    //     0x91e668: tbz             w0, #0, #0x91e684
    //     0x91e66c: ldurb           w16, [x1, #-1]
    //     0x91e670: ldurb           w17, [x0, #-1]
    //     0x91e674: and             x16, x17, x16, lsr #2
    //     0x91e678: tst             x16, HEAP, lsr #32
    //     0x91e67c: b.eq            #0x91e684
    //     0x91e680: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91e684: ldur            x16, [fp, #-0x18]
    // 0x91e688: str             x16, [SP]
    // 0x91e68c: r0 = _interpolate()
    //     0x91e68c: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0x91e690: r16 = "Last updated at %T"
    //     0x91e690: add             x16, PP, #0x31, lsl #12  ; [pp+0x31690] "Last updated at %T"
    //     0x91e694: ldr             x16, [x16, #0x690]
    // 0x91e698: r30 = "%T"
    //     0x91e698: add             lr, PP, #0x40, lsl #12  ; [pp+0x401b0] "%T"
    //     0x91e69c: ldr             lr, [lr, #0x1b0]
    // 0x91e6a0: stp             lr, x16, [SP, #8]
    // 0x91e6a4: str             x0, [SP]
    // 0x91e6a8: r0 = replaceAll()
    //     0x91e6a8: bl              #0x4d4414  ; [dart:core] _StringBase::replaceAll
    // 0x91e6ac: LeaveFrame
    //     0x91e6ac: mov             SP, fp
    //     0x91e6b0: ldp             fp, lr, [SP], #0x10
    // 0x91e6b4: ret
    //     0x91e6b4: ret             
    // 0x91e6b8: ldr             x0, [fp, #0x10]
    // 0x91e6bc: LoadField: r1 = r0->field_b
    //     0x91e6bc: ldur            w1, [x0, #0xb]
    // 0x91e6c0: DecompressPointer r1
    //     0x91e6c0: add             x1, x1, HEAP, lsl #32
    // 0x91e6c4: cmp             w1, NULL
    // 0x91e6c8: b.eq            #0x91e708
    // 0x91e6cc: r0 = "Last updated at %T"
    //     0x91e6cc: add             x0, PP, #0x31, lsl #12  ; [pp+0x31690] "Last updated at %T"
    //     0x91e6d0: ldr             x0, [x0, #0x690]
    // 0x91e6d4: LeaveFrame
    //     0x91e6d4: mov             SP, fp
    //     0x91e6d8: ldp             fp, lr, [SP], #0x10
    // 0x91e6dc: ret
    //     0x91e6dc: ret             
    // 0x91e6e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91e6e0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91e6e4: b               #0x91e504
    // 0x91e6e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e6e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e6ec: r9 = _updateTime
    //     0x91e6ec: add             x9, PP, #0x40, lsl #12  ; [pp+0x401b8] Field <_ClassicIndicatorState@765089737._updateTime@765089737>: late (offset: 0x20)
    //     0x91e6f0: ldr             x9, [x9, #0x1b8]
    // 0x91e6f4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91e6f4: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91e6f8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91e6f8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91e6fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e6fc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e700: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91e700: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91e704: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91e704: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91e708: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e708: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildText(/* No info */) {
    // ** addr: 0x91e70c, size: 0xb0
    // 0x91e70c: EnterFrame
    //     0x91e70c: stp             fp, lr, [SP, #-0x10]!
    //     0x91e710: mov             fp, SP
    // 0x91e714: AllocStack(0x18)
    //     0x91e714: sub             SP, SP, #0x18
    // 0x91e718: CheckStackOverflow
    //     0x91e718: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91e71c: cmp             SP, x16
    //     0x91e720: b.ls            #0x91e7a8
    // 0x91e724: ldr             x0, [fp, #0x10]
    // 0x91e728: LoadField: r1 = r0->field_b
    //     0x91e728: ldur            w1, [x0, #0xb]
    // 0x91e72c: DecompressPointer r1
    //     0x91e72c: add             x1, x1, HEAP, lsl #32
    // 0x91e730: cmp             w1, NULL
    // 0x91e734: b.eq            #0x91e7b0
    // 0x91e738: str             x0, [SP]
    // 0x91e73c: r0 = _currentText()
    //     0x91e73c: bl              #0x91e7bc  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_currentText
    // 0x91e740: mov             x1, x0
    // 0x91e744: ldr             x0, [fp, #0x10]
    // 0x91e748: stur            x1, [fp, #-8]
    // 0x91e74c: LoadField: r2 = r0->field_b
    //     0x91e74c: ldur            w2, [x0, #0xb]
    // 0x91e750: DecompressPointer r2
    //     0x91e750: add             x2, x2, HEAP, lsl #32
    // 0x91e754: cmp             w2, NULL
    // 0x91e758: b.eq            #0x91e7b4
    // 0x91e75c: LoadField: r2 = r0->field_f
    //     0x91e75c: ldur            w2, [x0, #0xf]
    // 0x91e760: DecompressPointer r2
    //     0x91e760: add             x2, x2, HEAP, lsl #32
    // 0x91e764: cmp             w2, NULL
    // 0x91e768: b.eq            #0x91e7b8
    // 0x91e76c: str             x2, [SP]
    // 0x91e770: r0 = of()
    //     0x91e770: bl              #0x60acc8  ; [package:flutter/src/material/theme.dart] Theme::of
    // 0x91e774: LoadField: r1 = r0->field_93
    //     0x91e774: ldur            w1, [x0, #0x93]
    // 0x91e778: DecompressPointer r1
    //     0x91e778: add             x1, x1, HEAP, lsl #32
    // 0x91e77c: LoadField: r0 = r1->field_23
    //     0x91e77c: ldur            w0, [x1, #0x23]
    // 0x91e780: DecompressPointer r0
    //     0x91e780: add             x0, x0, HEAP, lsl #32
    // 0x91e784: stur            x0, [fp, #-0x10]
    // 0x91e788: r0 = Text()
    //     0x91e788: bl              #0x6225d8  ; AllocateTextStub -> Text (size=0x48)
    // 0x91e78c: ldur            x1, [fp, #-8]
    // 0x91e790: StoreField: r0->field_b = r1
    //     0x91e790: stur            w1, [x0, #0xb]
    // 0x91e794: ldur            x1, [fp, #-0x10]
    // 0x91e798: StoreField: r0->field_13 = r1
    //     0x91e798: stur            w1, [x0, #0x13]
    // 0x91e79c: LeaveFrame
    //     0x91e79c: mov             SP, fp
    //     0x91e7a0: ldp             fp, lr, [SP], #0x10
    // 0x91e7a4: ret
    //     0x91e7a4: ret             
    // 0x91e7a8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91e7a8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91e7ac: b               #0x91e724
    // 0x91e7b0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e7b0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e7b4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e7b4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91e7b8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e7b8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _currentText(/* No info */) {
    // ** addr: 0x91e7bc, size: 0x144
    // 0x91e7bc: EnterFrame
    //     0x91e7bc: stp             fp, lr, [SP, #-0x10]!
    //     0x91e7c0: mov             fp, SP
    // 0x91e7c4: ldr             x1, [fp, #0x10]
    // 0x91e7c8: LoadField: r2 = r1->field_b
    //     0x91e7c8: ldur            w2, [x1, #0xb]
    // 0x91e7cc: DecompressPointer r2
    //     0x91e7cc: add             x2, x2, HEAP, lsl #32
    // 0x91e7d0: cmp             w2, NULL
    // 0x91e7d4: b.eq            #0x91e8fc
    // 0x91e7d8: LoadField: r1 = r2->field_b
    //     0x91e7d8: ldur            w1, [x2, #0xb]
    // 0x91e7dc: DecompressPointer r1
    //     0x91e7dc: add             x1, x1, HEAP, lsl #32
    // 0x91e7e0: LoadField: r3 = r1->field_13
    //     0x91e7e0: ldur            w3, [x1, #0x13]
    // 0x91e7e4: DecompressPointer r3
    //     0x91e7e4: add             x3, x3, HEAP, lsl #32
    // 0x91e7e8: r16 = Instance_IndicatorResult
    //     0x91e7e8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x91e7ec: ldr             x16, [x16, #0x1c0]
    // 0x91e7f0: cmp             w3, w16
    // 0x91e7f4: b.ne            #0x91e80c
    // 0x91e7f8: r0 = "No more"
    //     0x91e7f8: add             x0, PP, #0x31, lsl #12  ; [pp+0x31680] "No more"
    //     0x91e7fc: ldr             x0, [x0, #0x680]
    // 0x91e800: LeaveFrame
    //     0x91e800: mov             SP, fp
    //     0x91e804: ldp             fp, lr, [SP], #0x10
    // 0x91e808: ret
    //     0x91e808: ret             
    // 0x91e80c: LoadField: r4 = r1->field_f
    //     0x91e80c: ldur            w4, [x1, #0xf]
    // 0x91e810: DecompressPointer r4
    //     0x91e810: add             x4, x4, HEAP, lsl #32
    // 0x91e814: LoadField: r1 = r4->field_7
    //     0x91e814: ldur            x1, [x4, #7]
    // 0x91e818: cmp             x1, #3
    // 0x91e81c: b.gt            #0x91e878
    // 0x91e820: cmp             x1, #2
    // 0x91e824: b.gt            #0x91e864
    // 0x91e828: cmp             x1, #1
    // 0x91e82c: b.gt            #0x91e850
    // 0x91e830: lsl             x4, x1, #1
    // 0x91e834: cmp             w4, #2
    // 0x91e838: b.ne            #0x91e8e8
    // 0x91e83c: ArrayLoad: r0 = r2[0]  ; List_4
    //     0x91e83c: ldur            w0, [x2, #0x17]
    // 0x91e840: DecompressPointer r0
    //     0x91e840: add             x0, x0, HEAP, lsl #32
    // 0x91e844: LeaveFrame
    //     0x91e844: mov             SP, fp
    //     0x91e848: ldp             fp, lr, [SP], #0x10
    // 0x91e84c: ret
    //     0x91e84c: ret             
    // 0x91e850: r0 = "Release ready"
    //     0x91e850: add             x0, PP, #0x31, lsl #12  ; [pp+0x31668] "Release ready"
    //     0x91e854: ldr             x0, [x0, #0x668]
    // 0x91e858: LeaveFrame
    //     0x91e858: mov             SP, fp
    //     0x91e85c: ldp             fp, lr, [SP], #0x10
    // 0x91e860: ret
    //     0x91e860: ret             
    // 0x91e864: LoadField: r0 = r2->field_1f
    //     0x91e864: ldur            w0, [x2, #0x1f]
    // 0x91e868: DecompressPointer r0
    //     0x91e868: add             x0, x0, HEAP, lsl #32
    // 0x91e86c: LeaveFrame
    //     0x91e86c: mov             SP, fp
    //     0x91e870: ldp             fp, lr, [SP], #0x10
    // 0x91e874: ret
    //     0x91e874: ret             
    // 0x91e878: cmp             x1, #5
    // 0x91e87c: b.gt            #0x91e89c
    // 0x91e880: cmp             x1, #4
    // 0x91e884: b.gt            #0x91e8b0
    // 0x91e888: LoadField: r0 = r2->field_23
    //     0x91e888: ldur            w0, [x2, #0x23]
    // 0x91e88c: DecompressPointer r0
    //     0x91e88c: add             x0, x0, HEAP, lsl #32
    // 0x91e890: LeaveFrame
    //     0x91e890: mov             SP, fp
    //     0x91e894: ldp             fp, lr, [SP], #0x10
    // 0x91e898: ret
    //     0x91e898: ret             
    // 0x91e89c: cmp             x1, #0xa
    // 0x91e8a0: b.lt            #0x91e8e8
    // 0x91e8a4: lsl             x4, x1, #1
    // 0x91e8a8: cmp             w4, #0x14
    // 0x91e8ac: b.ne            #0x91e8e8
    // 0x91e8b0: r16 = Instance_IndicatorResult
    //     0x91e8b0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a8] Obj!IndicatorResult@c45311
    //     0x91e8b4: ldr             x16, [x16, #0x1a8]
    // 0x91e8b8: cmp             w3, w16
    // 0x91e8bc: b.ne            #0x91e8d4
    // 0x91e8c0: r0 = "Failed"
    //     0x91e8c0: add             x0, PP, #0x31, lsl #12  ; [pp+0x31688] "Failed"
    //     0x91e8c4: ldr             x0, [x0, #0x688]
    // 0x91e8c8: LeaveFrame
    //     0x91e8c8: mov             SP, fp
    //     0x91e8cc: ldp             fp, lr, [SP], #0x10
    // 0x91e8d0: ret
    //     0x91e8d0: ret             
    // 0x91e8d4: r0 = "Succeeded"
    //     0x91e8d4: add             x0, PP, #0x31, lsl #12  ; [pp+0x31678] "Succeeded"
    //     0x91e8d8: ldr             x0, [x0, #0x678]
    // 0x91e8dc: LeaveFrame
    //     0x91e8dc: mov             SP, fp
    //     0x91e8e0: ldp             fp, lr, [SP], #0x10
    // 0x91e8e4: ret
    //     0x91e8e4: ret             
    // 0x91e8e8: ArrayLoad: r0 = r2[0]  ; List_4
    //     0x91e8e8: ldur            w0, [x2, #0x17]
    // 0x91e8ec: DecompressPointer r0
    //     0x91e8ec: add             x0, x0, HEAP, lsl #32
    // 0x91e8f0: LeaveFrame
    //     0x91e8f0: mov             SP, fp
    //     0x91e8f4: ldp             fp, lr, [SP], #0x10
    // 0x91e8f8: ret
    //     0x91e8f8: ret             
    // 0x91e8fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e8fc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _triggerOffset(/* No info */) {
    // ** addr: 0x91e900, size: 0x40
    // 0x91e900: EnterFrame
    //     0x91e900: stp             fp, lr, [SP, #-0x10]!
    //     0x91e904: mov             fp, SP
    // 0x91e908: ldr             x0, [fp, #0x10]
    // 0x91e90c: LoadField: r1 = r0->field_b
    //     0x91e90c: ldur            w1, [x0, #0xb]
    // 0x91e910: DecompressPointer r1
    //     0x91e910: add             x1, x1, HEAP, lsl #32
    // 0x91e914: cmp             w1, NULL
    // 0x91e918: b.eq            #0x91e93c
    // 0x91e91c: LoadField: r0 = r1->field_b
    //     0x91e91c: ldur            w0, [x1, #0xb]
    // 0x91e920: DecompressPointer r0
    //     0x91e920: add             x0, x0, HEAP, lsl #32
    // 0x91e924: LoadField: r1 = r0->field_7
    //     0x91e924: ldur            w1, [x0, #7]
    // 0x91e928: DecompressPointer r1
    //     0x91e928: add             x1, x1, HEAP, lsl #32
    // 0x91e92c: LoadField: d0 = r1->field_7
    //     0x91e92c: ldur            d0, [x1, #7]
    // 0x91e930: LeaveFrame
    //     0x91e930: mov             SP, fp
    //     0x91e934: ldp             fp, lr, [SP], #0x10
    // 0x91e938: ret
    //     0x91e938: ret             
    // 0x91e93c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91e93c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildVerticalWidget(/* No info */) {
    // ** addr: 0x91e940, size: 0x564
    // 0x91e940: EnterFrame
    //     0x91e940: stp             fp, lr, [SP, #-0x10]!
    //     0x91e944: mov             fp, SP
    // 0x91e948: AllocStack(0x40)
    //     0x91e948: sub             SP, SP, #0x40
    // 0x91e94c: CheckStackOverflow
    //     0x91e94c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91e950: cmp             SP, x16
    //     0x91e954: b.ls            #0x91eddc
    // 0x91e958: ldr             x0, [fp, #0x10]
    // 0x91e95c: LoadField: r1 = r0->field_b
    //     0x91e95c: ldur            w1, [x0, #0xb]
    // 0x91e960: DecompressPointer r1
    //     0x91e960: add             x1, x1, HEAP, lsl #32
    // 0x91e964: cmp             w1, NULL
    // 0x91e968: b.eq            #0x91ede4
    // 0x91e96c: r16 = <Widget>
    //     0x91e96c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91e970: ldr             x16, [x16, #0x410]
    // 0x91e974: stp             xzr, x16, [SP]
    // 0x91e978: r0 = _GrowableList()
    //     0x91e978: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x91e97c: mov             x1, x0
    // 0x91e980: ldr             x0, [fp, #0x10]
    // 0x91e984: stur            x1, [fp, #-0x18]
    // 0x91e988: LoadField: r2 = r0->field_b
    //     0x91e988: ldur            w2, [x0, #0xb]
    // 0x91e98c: DecompressPointer r2
    //     0x91e98c: add             x2, x2, HEAP, lsl #32
    // 0x91e990: cmp             w2, NULL
    // 0x91e994: b.eq            #0x91ede8
    // 0x91e998: LoadField: r3 = r2->field_f
    //     0x91e998: ldur            w3, [x2, #0xf]
    // 0x91e99c: DecompressPointer r3
    //     0x91e99c: add             x3, x3, HEAP, lsl #32
    // 0x91e9a0: r16 = Instance_MainAxisAlignment
    //     0x91e9a0: add             x16, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91e9a4: ldr             x16, [x16, #0xb10]
    // 0x91e9a8: cmp             w3, w16
    // 0x91e9ac: b.ne            #0x91ebdc
    // 0x91e9b0: LoadField: r3 = r2->field_b
    //     0x91e9b0: ldur            w3, [x2, #0xb]
    // 0x91e9b4: DecompressPointer r3
    //     0x91e9b4: add             x3, x3, HEAP, lsl #32
    // 0x91e9b8: ArrayLoad: d0 = r3[0]  ; List_8
    //     0x91e9b8: ldur            d0, [x3, #0x17]
    // 0x91e9bc: LoadField: d1 = r3->field_37
    //     0x91e9bc: ldur            d1, [x3, #0x37]
    // 0x91e9c0: fcmp            d0, d1
    // 0x91e9c4: b.vs            #0x91ea0c
    // 0x91e9c8: b.ge            #0x91ea0c
    // 0x91e9cc: fsub            d2, d1, d0
    // 0x91e9d0: LoadField: r4 = r2->field_53
    //     0x91e9d0: ldur            w4, [x2, #0x53]
    // 0x91e9d4: DecompressPointer r4
    //     0x91e9d4: add             x4, x4, HEAP, lsl #32
    // 0x91e9d8: tbnz            w4, #4, #0x91e9e8
    // 0x91e9dc: LoadField: d3 = r3->field_1f
    //     0x91e9dc: ldur            d3, [x3, #0x1f]
    // 0x91e9e0: mov             v4.16b, v3.16b
    // 0x91e9e4: b               #0x91e9f0
    // 0x91e9e8: LoadField: d3 = r3->field_1f
    //     0x91e9e8: ldur            d3, [x3, #0x1f]
    // 0x91e9ec: fneg            d4, d3
    // 0x91e9f0: d3 = 2.000000
    //     0x91e9f0: fmov            d3, #2.00000000
    // 0x91e9f4: fadd            d5, d2, d4
    // 0x91e9f8: fneg            d2, d5
    // 0x91e9fc: fdiv            d4, d2, d3
    // 0x91ea00: mov             v2.16b, v4.16b
    // 0x91ea04: mov             x2, x4
    // 0x91ea08: b               #0x91ea28
    // 0x91ea0c: LoadField: r4 = r2->field_53
    //     0x91ea0c: ldur            w4, [x2, #0x53]
    // 0x91ea10: DecompressPointer r4
    //     0x91ea10: add             x4, x4, HEAP, lsl #32
    // 0x91ea14: tbz             w4, #4, #0x91ea20
    // 0x91ea18: LoadField: d2 = r3->field_1f
    //     0x91ea18: ldur            d2, [x3, #0x1f]
    // 0x91ea1c: b               #0x91ea24
    // 0x91ea20: d2 = 0.000000
    //     0x91ea20: eor             v2.16b, v2.16b, v2.16b
    // 0x91ea24: mov             x2, x4
    // 0x91ea28: stur            d2, [fp, #-0x30]
    // 0x91ea2c: fcmp            d0, d1
    // 0x91ea30: b.vs            #0x91ea40
    // 0x91ea34: b.ge            #0x91ea40
    // 0x91ea38: r2 = Null
    //     0x91ea38: mov             x2, NULL
    // 0x91ea3c: b               #0x91ea78
    // 0x91ea40: tbnz            w2, #4, #0x91ea4c
    // 0x91ea44: LoadField: d3 = r3->field_1f
    //     0x91ea44: ldur            d3, [x3, #0x1f]
    // 0x91ea48: b               #0x91ea50
    // 0x91ea4c: d3 = 0.000000
    //     0x91ea4c: eor             v3.16b, v3.16b, v3.16b
    // 0x91ea50: r2 = inline_Allocate_Double()
    //     0x91ea50: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x91ea54: add             x2, x2, #0x10
    //     0x91ea58: cmp             x3, x2
    //     0x91ea5c: b.ls            #0x91edec
    //     0x91ea60: str             x2, [THR, #0x50]  ; THR::top
    //     0x91ea64: sub             x2, x2, #0xf
    //     0x91ea68: movz            x3, #0xd148
    //     0x91ea6c: movk            x3, #0x3, lsl #16
    //     0x91ea70: stur            x3, [x2, #-1]
    // 0x91ea74: StoreField: r2->field_7 = d3
    //     0x91ea74: stur            d3, [x2, #7]
    // 0x91ea78: stur            x2, [fp, #-0x10]
    // 0x91ea7c: fcmp            d0, d1
    // 0x91ea80: b.vs            #0x91eab4
    // 0x91ea84: b.ge            #0x91eab4
    // 0x91ea88: r3 = inline_Allocate_Double()
    //     0x91ea88: ldp             x3, x4, [THR, #0x50]  ; THR::top
    //     0x91ea8c: add             x3, x3, #0x10
    //     0x91ea90: cmp             x4, x3
    //     0x91ea94: b.ls            #0x91ee10
    //     0x91ea98: str             x3, [THR, #0x50]  ; THR::top
    //     0x91ea9c: sub             x3, x3, #0xf
    //     0x91eaa0: movz            x4, #0xd148
    //     0x91eaa4: movk            x4, #0x3, lsl #16
    //     0x91eaa8: stur            x4, [x3, #-1]
    // 0x91eaac: StoreField: r3->field_7 = d1
    //     0x91eaac: stur            d1, [x3, #7]
    // 0x91eab0: b               #0x91eab8
    // 0x91eab4: r3 = Null
    //     0x91eab4: mov             x3, NULL
    // 0x91eab8: stur            x3, [fp, #-8]
    // 0x91eabc: str             x0, [SP]
    // 0x91eac0: r0 = _buildVerticalBody()
    //     0x91eac0: bl              #0x91eea4  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildVerticalBody
    // 0x91eac4: stur            x0, [fp, #-0x20]
    // 0x91eac8: r0 = Center()
    //     0x91eac8: bl              #0x622a8c  ; AllocateCenterStub -> Center (size=0x1c)
    // 0x91eacc: mov             x2, x0
    // 0x91ead0: r0 = Instance_Alignment
    //     0x91ead0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91ead4: ldr             x0, [x0, #0x358]
    // 0x91ead8: stur            x2, [fp, #-0x28]
    // 0x91eadc: StoreField: r2->field_f = r0
    //     0x91eadc: stur            w0, [x2, #0xf]
    // 0x91eae0: ldur            x0, [fp, #-0x20]
    // 0x91eae4: StoreField: r2->field_b = r0
    //     0x91eae4: stur            w0, [x2, #0xb]
    // 0x91eae8: r1 = <StackParentData>
    //     0x91eae8: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91eaec: ldr             x1, [x1, #0x2b8]
    // 0x91eaf0: r0 = Positioned()
    //     0x91eaf0: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91eaf4: mov             x1, x0
    // 0x91eaf8: r0 = 0.000000
    //     0x91eaf8: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91eafc: stur            x1, [fp, #-0x20]
    // 0x91eb00: StoreField: r1->field_13 = r0
    //     0x91eb00: stur            w0, [x1, #0x13]
    // 0x91eb04: ldur            d0, [fp, #-0x30]
    // 0x91eb08: r2 = inline_Allocate_Double()
    //     0x91eb08: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x91eb0c: add             x2, x2, #0x10
    //     0x91eb10: cmp             x3, x2
    //     0x91eb14: b.ls            #0x91ee34
    //     0x91eb18: str             x2, [THR, #0x50]  ; THR::top
    //     0x91eb1c: sub             x2, x2, #0xf
    //     0x91eb20: movz            x3, #0xd148
    //     0x91eb24: movk            x3, #0x3, lsl #16
    //     0x91eb28: stur            x3, [x2, #-1]
    // 0x91eb2c: StoreField: r2->field_7 = d0
    //     0x91eb2c: stur            d0, [x2, #7]
    // 0x91eb30: ArrayStore: r1[0] = r2  ; List_4
    //     0x91eb30: stur            w2, [x1, #0x17]
    // 0x91eb34: StoreField: r1->field_1b = r0
    //     0x91eb34: stur            w0, [x1, #0x1b]
    // 0x91eb38: ldur            x2, [fp, #-0x10]
    // 0x91eb3c: StoreField: r1->field_1f = r2
    //     0x91eb3c: stur            w2, [x1, #0x1f]
    // 0x91eb40: ldur            x2, [fp, #-8]
    // 0x91eb44: StoreField: r1->field_27 = r2
    //     0x91eb44: stur            w2, [x1, #0x27]
    // 0x91eb48: ldur            x2, [fp, #-0x28]
    // 0x91eb4c: StoreField: r1->field_b = r2
    //     0x91eb4c: stur            w2, [x1, #0xb]
    // 0x91eb50: ldur            x2, [fp, #-0x18]
    // 0x91eb54: LoadField: r3 = r2->field_b
    //     0x91eb54: ldur            w3, [x2, #0xb]
    // 0x91eb58: DecompressPointer r3
    //     0x91eb58: add             x3, x3, HEAP, lsl #32
    // 0x91eb5c: stur            x3, [fp, #-8]
    // 0x91eb60: LoadField: r4 = r2->field_f
    //     0x91eb60: ldur            w4, [x2, #0xf]
    // 0x91eb64: DecompressPointer r4
    //     0x91eb64: add             x4, x4, HEAP, lsl #32
    // 0x91eb68: LoadField: r5 = r4->field_b
    //     0x91eb68: ldur            w5, [x4, #0xb]
    // 0x91eb6c: DecompressPointer r5
    //     0x91eb6c: add             x5, x5, HEAP, lsl #32
    // 0x91eb70: cmp             w3, w5
    // 0x91eb74: b.ne            #0x91eb80
    // 0x91eb78: str             x2, [SP]
    // 0x91eb7c: r0 = _growToNextCapacity()
    //     0x91eb7c: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91eb80: ldur            x2, [fp, #-0x18]
    // 0x91eb84: ldur            x0, [fp, #-8]
    // 0x91eb88: r3 = LoadInt32Instr(r0)
    //     0x91eb88: sbfx            x3, x0, #1, #0x1f
    // 0x91eb8c: add             x0, x3, #1
    // 0x91eb90: lsl             x1, x0, #1
    // 0x91eb94: StoreField: r2->field_b = r1
    //     0x91eb94: stur            w1, [x2, #0xb]
    // 0x91eb98: mov             x1, x3
    // 0x91eb9c: cmp             x1, x0
    // 0x91eba0: b.hs            #0x91ee50
    // 0x91eba4: LoadField: r1 = r2->field_f
    //     0x91eba4: ldur            w1, [x2, #0xf]
    // 0x91eba8: DecompressPointer r1
    //     0x91eba8: add             x1, x1, HEAP, lsl #32
    // 0x91ebac: ldur            x0, [fp, #-0x20]
    // 0x91ebb0: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91ebb0: add             x25, x1, x3, lsl #2
    //     0x91ebb4: add             x25, x25, #0xf
    //     0x91ebb8: str             w0, [x25]
    //     0x91ebbc: tbz             w0, #0, #0x91ebd8
    //     0x91ebc0: ldurb           w16, [x1, #-1]
    //     0x91ebc4: ldurb           w17, [x0, #-1]
    //     0x91ebc8: and             x16, x17, x16, lsr #2
    //     0x91ebcc: tst             x16, HEAP, lsr #32
    //     0x91ebd0: b.eq            #0x91ebd8
    //     0x91ebd4: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91ebd8: b               #0x91ebe0
    // 0x91ebdc: mov             x2, x1
    // 0x91ebe0: ldr             x0, [fp, #0x10]
    // 0x91ebe4: LoadField: r1 = r0->field_b
    //     0x91ebe4: ldur            w1, [x0, #0xb]
    // 0x91ebe8: DecompressPointer r1
    //     0x91ebe8: add             x1, x1, HEAP, lsl #32
    // 0x91ebec: cmp             w1, NULL
    // 0x91ebf0: b.eq            #0x91ee54
    // 0x91ebf4: LoadField: r3 = r1->field_f
    //     0x91ebf4: ldur            w3, [x1, #0xf]
    // 0x91ebf8: DecompressPointer r3
    //     0x91ebf8: add             x3, x3, HEAP, lsl #32
    // 0x91ebfc: r16 = Instance_MainAxisAlignment
    //     0x91ebfc: add             x16, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91ec00: ldr             x16, [x16, #0xb10]
    // 0x91ec04: cmp             w3, w16
    // 0x91ec08: b.eq            #0x91eda0
    // 0x91ec0c: r16 = Instance_MainAxisAlignment
    //     0x91ec0c: add             x16, PP, #0x10, lsl #12  ; [pp+0x10418] Obj!MainAxisAlignment@c43bd1
    //     0x91ec10: ldr             x16, [x16, #0x418]
    // 0x91ec14: cmp             w3, w16
    // 0x91ec18: b.ne            #0x91ec68
    // 0x91ec1c: LoadField: r4 = r1->field_53
    //     0x91ec1c: ldur            w4, [x1, #0x53]
    // 0x91ec20: DecompressPointer r4
    //     0x91ec20: add             x4, x4, HEAP, lsl #32
    // 0x91ec24: tbz             w4, #4, #0x91ec38
    // 0x91ec28: LoadField: r4 = r1->field_b
    //     0x91ec28: ldur            w4, [x1, #0xb]
    // 0x91ec2c: DecompressPointer r4
    //     0x91ec2c: add             x4, x4, HEAP, lsl #32
    // 0x91ec30: LoadField: d0 = r4->field_1f
    //     0x91ec30: ldur            d0, [x4, #0x1f]
    // 0x91ec34: b               #0x91ec3c
    // 0x91ec38: d0 = 0.000000
    //     0x91ec38: eor             v0.16b, v0.16b, v0.16b
    // 0x91ec3c: r4 = inline_Allocate_Double()
    //     0x91ec3c: ldp             x4, x5, [THR, #0x50]  ; THR::top
    //     0x91ec40: add             x4, x4, #0x10
    //     0x91ec44: cmp             x5, x4
    //     0x91ec48: b.ls            #0x91ee58
    //     0x91ec4c: str             x4, [THR, #0x50]  ; THR::top
    //     0x91ec50: sub             x4, x4, #0xf
    //     0x91ec54: movz            x5, #0xd148
    //     0x91ec58: movk            x5, #0x3, lsl #16
    //     0x91ec5c: stur            x5, [x4, #-1]
    // 0x91ec60: StoreField: r4->field_7 = d0
    //     0x91ec60: stur            d0, [x4, #7]
    // 0x91ec64: b               #0x91ec6c
    // 0x91ec68: r4 = Null
    //     0x91ec68: mov             x4, NULL
    // 0x91ec6c: stur            x4, [fp, #-0x10]
    // 0x91ec70: r16 = Instance_MainAxisAlignment
    //     0x91ec70: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d290] Obj!MainAxisAlignment@c43bf1
    //     0x91ec74: ldr             x16, [x16, #0x290]
    // 0x91ec78: cmp             w3, w16
    // 0x91ec7c: b.ne            #0x91eccc
    // 0x91ec80: LoadField: r3 = r1->field_53
    //     0x91ec80: ldur            w3, [x1, #0x53]
    // 0x91ec84: DecompressPointer r3
    //     0x91ec84: add             x3, x3, HEAP, lsl #32
    // 0x91ec88: tbnz            w3, #4, #0x91ec9c
    // 0x91ec8c: LoadField: r3 = r1->field_b
    //     0x91ec8c: ldur            w3, [x1, #0xb]
    // 0x91ec90: DecompressPointer r3
    //     0x91ec90: add             x3, x3, HEAP, lsl #32
    // 0x91ec94: LoadField: d0 = r3->field_1f
    //     0x91ec94: ldur            d0, [x3, #0x1f]
    // 0x91ec98: b               #0x91eca0
    // 0x91ec9c: d0 = 0.000000
    //     0x91ec9c: eor             v0.16b, v0.16b, v0.16b
    // 0x91eca0: r1 = inline_Allocate_Double()
    //     0x91eca0: ldp             x1, x3, [THR, #0x50]  ; THR::top
    //     0x91eca4: add             x1, x1, #0x10
    //     0x91eca8: cmp             x3, x1
    //     0x91ecac: b.ls            #0x91ee7c
    //     0x91ecb0: str             x1, [THR, #0x50]  ; THR::top
    //     0x91ecb4: sub             x1, x1, #0xf
    //     0x91ecb8: movz            x3, #0xd148
    //     0x91ecbc: movk            x3, #0x3, lsl #16
    //     0x91ecc0: stur            x3, [x1, #-1]
    // 0x91ecc4: StoreField: r1->field_7 = d0
    //     0x91ecc4: stur            d0, [x1, #7]
    // 0x91ecc8: b               #0x91ecd0
    // 0x91eccc: r1 = Null
    //     0x91eccc: mov             x1, NULL
    // 0x91ecd0: stur            x1, [fp, #-8]
    // 0x91ecd4: str             x0, [SP]
    // 0x91ecd8: r0 = _buildVerticalBody()
    //     0x91ecd8: bl              #0x91eea4  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildVerticalBody
    // 0x91ecdc: r1 = <StackParentData>
    //     0x91ecdc: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91ece0: ldr             x1, [x1, #0x2b8]
    // 0x91ece4: stur            x0, [fp, #-0x20]
    // 0x91ece8: r0 = Positioned()
    //     0x91ece8: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91ecec: mov             x1, x0
    // 0x91ecf0: r0 = 0.000000
    //     0x91ecf0: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91ecf4: stur            x1, [fp, #-0x28]
    // 0x91ecf8: StoreField: r1->field_13 = r0
    //     0x91ecf8: stur            w0, [x1, #0x13]
    // 0x91ecfc: ldur            x2, [fp, #-0x10]
    // 0x91ed00: ArrayStore: r1[0] = r2  ; List_4
    //     0x91ed00: stur            w2, [x1, #0x17]
    // 0x91ed04: StoreField: r1->field_1b = r0
    //     0x91ed04: stur            w0, [x1, #0x1b]
    // 0x91ed08: ldur            x0, [fp, #-8]
    // 0x91ed0c: StoreField: r1->field_1f = r0
    //     0x91ed0c: stur            w0, [x1, #0x1f]
    // 0x91ed10: ldur            x0, [fp, #-0x20]
    // 0x91ed14: StoreField: r1->field_b = r0
    //     0x91ed14: stur            w0, [x1, #0xb]
    // 0x91ed18: ldur            x0, [fp, #-0x18]
    // 0x91ed1c: LoadField: r2 = r0->field_b
    //     0x91ed1c: ldur            w2, [x0, #0xb]
    // 0x91ed20: DecompressPointer r2
    //     0x91ed20: add             x2, x2, HEAP, lsl #32
    // 0x91ed24: stur            x2, [fp, #-8]
    // 0x91ed28: LoadField: r3 = r0->field_f
    //     0x91ed28: ldur            w3, [x0, #0xf]
    // 0x91ed2c: DecompressPointer r3
    //     0x91ed2c: add             x3, x3, HEAP, lsl #32
    // 0x91ed30: LoadField: r4 = r3->field_b
    //     0x91ed30: ldur            w4, [x3, #0xb]
    // 0x91ed34: DecompressPointer r4
    //     0x91ed34: add             x4, x4, HEAP, lsl #32
    // 0x91ed38: cmp             w2, w4
    // 0x91ed3c: b.ne            #0x91ed48
    // 0x91ed40: str             x0, [SP]
    // 0x91ed44: r0 = _growToNextCapacity()
    //     0x91ed44: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91ed48: ldur            x2, [fp, #-0x18]
    // 0x91ed4c: ldur            x0, [fp, #-8]
    // 0x91ed50: r3 = LoadInt32Instr(r0)
    //     0x91ed50: sbfx            x3, x0, #1, #0x1f
    // 0x91ed54: add             x0, x3, #1
    // 0x91ed58: lsl             x1, x0, #1
    // 0x91ed5c: StoreField: r2->field_b = r1
    //     0x91ed5c: stur            w1, [x2, #0xb]
    // 0x91ed60: mov             x1, x3
    // 0x91ed64: cmp             x1, x0
    // 0x91ed68: b.hs            #0x91eea0
    // 0x91ed6c: LoadField: r1 = r2->field_f
    //     0x91ed6c: ldur            w1, [x2, #0xf]
    // 0x91ed70: DecompressPointer r1
    //     0x91ed70: add             x1, x1, HEAP, lsl #32
    // 0x91ed74: ldur            x0, [fp, #-0x28]
    // 0x91ed78: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91ed78: add             x25, x1, x3, lsl #2
    //     0x91ed7c: add             x25, x25, #0xf
    //     0x91ed80: str             w0, [x25]
    //     0x91ed84: tbz             w0, #0, #0x91eda0
    //     0x91ed88: ldurb           w16, [x1, #-1]
    //     0x91ed8c: ldurb           w17, [x0, #-1]
    //     0x91ed90: and             x16, x17, x16, lsr #2
    //     0x91ed94: tst             x16, HEAP, lsr #32
    //     0x91ed98: b.eq            #0x91eda0
    //     0x91ed9c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91eda0: r0 = Stack()
    //     0x91eda0: bl              #0x66ad20  ; AllocateStackStub -> Stack (size=0x20)
    // 0x91eda4: r1 = Instance_AlignmentDirectional
    //     0x91eda4: add             x1, PP, #0x12, lsl #12  ; [pp+0x12238] Obj!AlignmentDirectional@c2f3a1
    //     0x91eda8: ldr             x1, [x1, #0x238]
    // 0x91edac: StoreField: r0->field_f = r1
    //     0x91edac: stur            w1, [x0, #0xf]
    // 0x91edb0: r1 = Instance_StackFit
    //     0x91edb0: add             x1, PP, #0x12, lsl #12  ; [pp+0x12240] Obj!StackFit@c438d1
    //     0x91edb4: ldr             x1, [x1, #0x240]
    // 0x91edb8: ArrayStore: r0[0] = r1  ; List_4
    //     0x91edb8: stur            w1, [x0, #0x17]
    // 0x91edbc: r1 = Instance_Clip
    //     0x91edbc: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x91edc0: ldr             x1, [x1, #0x438]
    // 0x91edc4: StoreField: r0->field_1b = r1
    //     0x91edc4: stur            w1, [x0, #0x1b]
    // 0x91edc8: ldur            x1, [fp, #-0x18]
    // 0x91edcc: StoreField: r0->field_b = r1
    //     0x91edcc: stur            w1, [x0, #0xb]
    // 0x91edd0: LeaveFrame
    //     0x91edd0: mov             SP, fp
    //     0x91edd4: ldp             fp, lr, [SP], #0x10
    // 0x91edd8: ret
    //     0x91edd8: ret             
    // 0x91eddc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91eddc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91ede0: b               #0x91e958
    // 0x91ede4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ede4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91ede8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ede8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91edec: stp             q2, q3, [SP, #-0x20]!
    // 0x91edf0: stp             q0, q1, [SP, #-0x20]!
    // 0x91edf4: stp             x0, x1, [SP, #-0x10]!
    // 0x91edf8: r0 = AllocateDouble()
    //     0x91edf8: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91edfc: mov             x2, x0
    // 0x91ee00: ldp             x0, x1, [SP], #0x10
    // 0x91ee04: ldp             q0, q1, [SP], #0x20
    // 0x91ee08: ldp             q2, q3, [SP], #0x20
    // 0x91ee0c: b               #0x91ea74
    // 0x91ee10: stp             q1, q2, [SP, #-0x20]!
    // 0x91ee14: stp             x1, x2, [SP, #-0x10]!
    // 0x91ee18: SaveReg r0
    //     0x91ee18: str             x0, [SP, #-8]!
    // 0x91ee1c: r0 = AllocateDouble()
    //     0x91ee1c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91ee20: mov             x3, x0
    // 0x91ee24: RestoreReg r0
    //     0x91ee24: ldr             x0, [SP], #8
    // 0x91ee28: ldp             x1, x2, [SP], #0x10
    // 0x91ee2c: ldp             q1, q2, [SP], #0x20
    // 0x91ee30: b               #0x91eaac
    // 0x91ee34: SaveReg d0
    //     0x91ee34: str             q0, [SP, #-0x10]!
    // 0x91ee38: stp             x0, x1, [SP, #-0x10]!
    // 0x91ee3c: r0 = AllocateDouble()
    //     0x91ee3c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91ee40: mov             x2, x0
    // 0x91ee44: ldp             x0, x1, [SP], #0x10
    // 0x91ee48: RestoreReg d0
    //     0x91ee48: ldr             q0, [SP], #0x10
    // 0x91ee4c: b               #0x91eb2c
    // 0x91ee50: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91ee50: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91ee54: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ee54: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91ee58: SaveReg d0
    //     0x91ee58: str             q0, [SP, #-0x10]!
    // 0x91ee5c: stp             x2, x3, [SP, #-0x10]!
    // 0x91ee60: stp             x0, x1, [SP, #-0x10]!
    // 0x91ee64: r0 = AllocateDouble()
    //     0x91ee64: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91ee68: mov             x4, x0
    // 0x91ee6c: ldp             x0, x1, [SP], #0x10
    // 0x91ee70: ldp             x2, x3, [SP], #0x10
    // 0x91ee74: RestoreReg d0
    //     0x91ee74: ldr             q0, [SP], #0x10
    // 0x91ee78: b               #0x91ec60
    // 0x91ee7c: SaveReg d0
    //     0x91ee7c: str             q0, [SP, #-0x10]!
    // 0x91ee80: stp             x2, x4, [SP, #-0x10]!
    // 0x91ee84: SaveReg r0
    //     0x91ee84: str             x0, [SP, #-8]!
    // 0x91ee88: r0 = AllocateDouble()
    //     0x91ee88: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91ee8c: mov             x1, x0
    // 0x91ee90: RestoreReg r0
    //     0x91ee90: ldr             x0, [SP], #8
    // 0x91ee94: ldp             x2, x4, [SP], #0x10
    // 0x91ee98: RestoreReg d0
    //     0x91ee98: ldr             q0, [SP], #0x10
    // 0x91ee9c: b               #0x91ecc4
    // 0x91eea0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91eea0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  _ _buildVerticalBody(/* No info */) {
    // ** addr: 0x91eea4, size: 0x3f4
    // 0x91eea4: EnterFrame
    //     0x91eea4: stp             fp, lr, [SP, #-0x10]!
    //     0x91eea8: mov             fp, SP
    // 0x91eeac: AllocStack(0x50)
    //     0x91eeac: sub             SP, SP, #0x50
    // 0x91eeb0: CheckStackOverflow
    //     0x91eeb0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91eeb4: cmp             SP, x16
    //     0x91eeb8: b.ls            #0x91f264
    // 0x91eebc: ldr             x0, [fp, #0x10]
    // 0x91eec0: LoadField: r1 = r0->field_b
    //     0x91eec0: ldur            w1, [x0, #0xb]
    // 0x91eec4: DecompressPointer r1
    //     0x91eec4: add             x1, x1, HEAP, lsl #32
    // 0x91eec8: cmp             w1, NULL
    // 0x91eecc: b.eq            #0x91f26c
    // 0x91eed0: LoadField: r2 = r1->field_b
    //     0x91eed0: ldur            w2, [x1, #0xb]
    // 0x91eed4: DecompressPointer r2
    //     0x91eed4: add             x2, x2, HEAP, lsl #32
    // 0x91eed8: LoadField: r1 = r2->field_7
    //     0x91eed8: ldur            w1, [x2, #7]
    // 0x91eedc: DecompressPointer r1
    //     0x91eedc: add             x1, x1, HEAP, lsl #32
    // 0x91eee0: LoadField: d0 = r1->field_7
    //     0x91eee0: ldur            d0, [x1, #7]
    // 0x91eee4: stur            d0, [fp, #-0x30]
    // 0x91eee8: str             x0, [SP]
    // 0x91eeec: r0 = _buildIcon()
    //     0x91eeec: bl              #0x91dbf4  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildIcon
    // 0x91eef0: stur            x0, [fp, #-8]
    // 0x91eef4: r0 = Container()
    //     0x91eef4: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91eef8: stur            x0, [fp, #-0x10]
    // 0x91eefc: r16 = Instance_Alignment
    //     0x91eefc: add             x16, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91ef00: ldr             x16, [x16, #0x358]
    // 0x91ef04: stp             x16, x0, [SP, #0x10]
    // 0x91ef08: r16 = 24.000000
    //     0x91ef08: add             x16, PP, #0xf, lsl #12  ; [pp+0xf718] 24
    //     0x91ef0c: ldr             x16, [x16, #0x718]
    // 0x91ef10: ldur            lr, [fp, #-8]
    // 0x91ef14: stp             lr, x16, [SP]
    // 0x91ef18: r4 = const [0, 0x4, 0x4, 0x1, alignment, 0x1, child, 0x3, width, 0x2, null]
    //     0x91ef18: add             x4, PP, #0x37, lsl #12  ; [pp+0x37588] List(11) [0, 0x4, 0x4, 0x1, "alignment", 0x1, "child", 0x3, "width", 0x2, Null]
    //     0x91ef1c: ldr             x4, [x4, #0x588]
    // 0x91ef20: r0 = Container()
    //     0x91ef20: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91ef24: r1 = Null
    //     0x91ef24: mov             x1, NULL
    // 0x91ef28: r2 = 2
    //     0x91ef28: movz            x2, #0x2
    // 0x91ef2c: r0 = AllocateArray()
    //     0x91ef2c: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x91ef30: mov             x2, x0
    // 0x91ef34: ldur            x0, [fp, #-0x10]
    // 0x91ef38: stur            x2, [fp, #-8]
    // 0x91ef3c: StoreField: r2->field_f = r0
    //     0x91ef3c: stur            w0, [x2, #0xf]
    // 0x91ef40: r1 = <Widget>
    //     0x91ef40: add             x1, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91ef44: ldr             x1, [x1, #0x410]
    // 0x91ef48: r0 = AllocateGrowableArray()
    //     0x91ef48: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x91ef4c: mov             x1, x0
    // 0x91ef50: ldur            x0, [fp, #-8]
    // 0x91ef54: stur            x1, [fp, #-0x10]
    // 0x91ef58: StoreField: r1->field_f = r0
    //     0x91ef58: stur            w0, [x1, #0xf]
    // 0x91ef5c: r2 = 2
    //     0x91ef5c: movz            x2, #0x2
    // 0x91ef60: StoreField: r1->field_b = r2
    //     0x91ef60: stur            w2, [x1, #0xb]
    // 0x91ef64: ldr             x0, [fp, #0x10]
    // 0x91ef68: LoadField: r3 = r0->field_b
    //     0x91ef68: ldur            w3, [x0, #0xb]
    // 0x91ef6c: DecompressPointer r3
    //     0x91ef6c: add             x3, x3, HEAP, lsl #32
    // 0x91ef70: cmp             w3, NULL
    // 0x91ef74: b.eq            #0x91f270
    // 0x91ef78: r0 = EdgeInsets()
    //     0x91ef78: bl              #0x5960b4  ; AllocateEdgeInsetsStub -> EdgeInsets (size=0x28)
    // 0x91ef7c: d0 = 16.000000
    //     0x91ef7c: fmov            d0, #16.00000000
    // 0x91ef80: stur            x0, [fp, #-8]
    // 0x91ef84: StoreField: r0->field_7 = d0
    //     0x91ef84: stur            d0, [x0, #7]
    // 0x91ef88: d0 = 0.000000
    //     0x91ef88: eor             v0.16b, v0.16b, v0.16b
    // 0x91ef8c: StoreField: r0->field_f = d0
    //     0x91ef8c: stur            d0, [x0, #0xf]
    // 0x91ef90: ArrayStore: r0[0] = d0  ; List_8
    //     0x91ef90: stur            d0, [x0, #0x17]
    // 0x91ef94: StoreField: r0->field_1f = d0
    //     0x91ef94: stur            d0, [x0, #0x1f]
    // 0x91ef98: ldr             x16, [fp, #0x10]
    // 0x91ef9c: str             x16, [SP]
    // 0x91efa0: r0 = _buildText()
    //     0x91efa0: bl              #0x91e70c  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildText
    // 0x91efa4: r1 = Null
    //     0x91efa4: mov             x1, NULL
    // 0x91efa8: r2 = 2
    //     0x91efa8: movz            x2, #0x2
    // 0x91efac: stur            x0, [fp, #-0x18]
    // 0x91efb0: r0 = AllocateArray()
    //     0x91efb0: bl              #0xc5eccc  ; AllocateArrayStub
    // 0x91efb4: mov             x2, x0
    // 0x91efb8: ldur            x0, [fp, #-0x18]
    // 0x91efbc: stur            x2, [fp, #-0x20]
    // 0x91efc0: StoreField: r2->field_f = r0
    //     0x91efc0: stur            w0, [x2, #0xf]
    // 0x91efc4: r1 = <Widget>
    //     0x91efc4: add             x1, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91efc8: ldr             x1, [x1, #0x410]
    // 0x91efcc: r0 = AllocateGrowableArray()
    //     0x91efcc: bl              #0xc5deb8  ; AllocateGrowableArrayStub
    // 0x91efd0: mov             x1, x0
    // 0x91efd4: ldur            x0, [fp, #-0x20]
    // 0x91efd8: stur            x1, [fp, #-0x18]
    // 0x91efdc: StoreField: r1->field_f = r0
    //     0x91efdc: stur            w0, [x1, #0xf]
    // 0x91efe0: r0 = 2
    //     0x91efe0: movz            x0, #0x2
    // 0x91efe4: StoreField: r1->field_b = r0
    //     0x91efe4: stur            w0, [x1, #0xb]
    // 0x91efe8: ldr             x0, [fp, #0x10]
    // 0x91efec: LoadField: r2 = r0->field_b
    //     0x91efec: ldur            w2, [x0, #0xb]
    // 0x91eff0: DecompressPointer r2
    //     0x91eff0: add             x2, x2, HEAP, lsl #32
    // 0x91eff4: cmp             w2, NULL
    // 0x91eff8: b.eq            #0x91f274
    // 0x91effc: str             x0, [SP]
    // 0x91f000: r0 = _buildMessage()
    //     0x91f000: bl              #0x91e41c  ; [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::_buildMessage
    // 0x91f004: mov             x1, x0
    // 0x91f008: ldur            x0, [fp, #-0x18]
    // 0x91f00c: stur            x1, [fp, #-0x28]
    // 0x91f010: LoadField: r2 = r0->field_b
    //     0x91f010: ldur            w2, [x0, #0xb]
    // 0x91f014: DecompressPointer r2
    //     0x91f014: add             x2, x2, HEAP, lsl #32
    // 0x91f018: stur            x2, [fp, #-0x20]
    // 0x91f01c: LoadField: r3 = r0->field_f
    //     0x91f01c: ldur            w3, [x0, #0xf]
    // 0x91f020: DecompressPointer r3
    //     0x91f020: add             x3, x3, HEAP, lsl #32
    // 0x91f024: LoadField: r4 = r3->field_b
    //     0x91f024: ldur            w4, [x3, #0xb]
    // 0x91f028: DecompressPointer r4
    //     0x91f028: add             x4, x4, HEAP, lsl #32
    // 0x91f02c: cmp             w2, w4
    // 0x91f030: b.ne            #0x91f03c
    // 0x91f034: str             x0, [SP]
    // 0x91f038: r0 = _growToNextCapacity()
    //     0x91f038: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91f03c: ldur            x0, [fp, #-0x20]
    // 0x91f040: ldur            x2, [fp, #-0x18]
    // 0x91f044: ldur            x3, [fp, #-0x10]
    // 0x91f048: r4 = LoadInt32Instr(r0)
    //     0x91f048: sbfx            x4, x0, #1, #0x1f
    // 0x91f04c: add             x0, x4, #1
    // 0x91f050: lsl             x1, x0, #1
    // 0x91f054: StoreField: r2->field_b = r1
    //     0x91f054: stur            w1, [x2, #0xb]
    // 0x91f058: mov             x1, x4
    // 0x91f05c: cmp             x1, x0
    // 0x91f060: b.hs            #0x91f278
    // 0x91f064: LoadField: r1 = r2->field_f
    //     0x91f064: ldur            w1, [x2, #0xf]
    // 0x91f068: DecompressPointer r1
    //     0x91f068: add             x1, x1, HEAP, lsl #32
    // 0x91f06c: ldur            x0, [fp, #-0x28]
    // 0x91f070: ArrayStore: r1[r4] = r0  ; List_4
    //     0x91f070: add             x25, x1, x4, lsl #2
    //     0x91f074: add             x25, x25, #0xf
    //     0x91f078: str             w0, [x25]
    //     0x91f07c: tbz             w0, #0, #0x91f098
    //     0x91f080: ldurb           w16, [x1, #-1]
    //     0x91f084: ldurb           w17, [x0, #-1]
    //     0x91f088: and             x16, x17, x16, lsr #2
    //     0x91f08c: tst             x16, HEAP, lsr #32
    //     0x91f090: b.eq            #0x91f098
    //     0x91f094: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91f098: r0 = Column()
    //     0x91f098: bl              #0x629e44  ; AllocateColumnStub -> Column (size=0x30)
    // 0x91f09c: mov             x1, x0
    // 0x91f0a0: r0 = Instance_Axis
    //     0x91f0a0: ldr             x0, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91f0a4: stur            x1, [fp, #-0x20]
    // 0x91f0a8: StoreField: r1->field_f = r0
    //     0x91f0a8: stur            w0, [x1, #0xf]
    // 0x91f0ac: r0 = Instance_MainAxisAlignment
    //     0x91f0ac: add             x0, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91f0b0: ldr             x0, [x0, #0xb10]
    // 0x91f0b4: StoreField: r1->field_13 = r0
    //     0x91f0b4: stur            w0, [x1, #0x13]
    // 0x91f0b8: r2 = Instance_MainAxisSize
    //     0x91f0b8: add             x2, PP, #0x10, lsl #12  ; [pp+0x10420] Obj!MainAxisSize@c43c51
    //     0x91f0bc: ldr             x2, [x2, #0x420]
    // 0x91f0c0: ArrayStore: r1[0] = r2  ; List_4
    //     0x91f0c0: stur            w2, [x1, #0x17]
    // 0x91f0c4: r3 = Instance_CrossAxisAlignment
    //     0x91f0c4: add             x3, PP, #0x12, lsl #12  ; [pp+0x12250] Obj!CrossAxisAlignment@c43b71
    //     0x91f0c8: ldr             x3, [x3, #0x250]
    // 0x91f0cc: StoreField: r1->field_1b = r3
    //     0x91f0cc: stur            w3, [x1, #0x1b]
    // 0x91f0d0: r3 = Instance_VerticalDirection
    //     0x91f0d0: add             x3, PP, #0x10, lsl #12  ; [pp+0x10430] Obj!VerticalDirection@c44091
    //     0x91f0d4: ldr             x3, [x3, #0x430]
    // 0x91f0d8: StoreField: r1->field_23 = r3
    //     0x91f0d8: stur            w3, [x1, #0x23]
    // 0x91f0dc: r4 = Instance_Clip
    //     0x91f0dc: add             x4, PP, #0xe, lsl #12  ; [pp+0xe4a0] Obj!Clip@c47641
    //     0x91f0e0: ldr             x4, [x4, #0x4a0]
    // 0x91f0e4: StoreField: r1->field_2b = r4
    //     0x91f0e4: stur            w4, [x1, #0x2b]
    // 0x91f0e8: ldur            x5, [fp, #-0x18]
    // 0x91f0ec: StoreField: r1->field_b = r5
    //     0x91f0ec: stur            w5, [x1, #0xb]
    // 0x91f0f0: r0 = Container()
    //     0x91f0f0: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91f0f4: stur            x0, [fp, #-0x18]
    // 0x91f0f8: ldur            x16, [fp, #-8]
    // 0x91f0fc: stp             x16, x0, [SP, #0x10]
    // 0x91f100: ldur            x16, [fp, #-0x20]
    // 0x91f104: stp             x16, NULL, [SP]
    // 0x91f108: r4 = const [0, 0x4, 0x4, 0x1, child, 0x3, margin, 0x1, width, 0x2, null]
    //     0x91f108: add             x4, PP, #0x1e, lsl #12  ; [pp+0x1e630] List(11) [0, 0x4, 0x4, 0x1, "child", 0x3, "margin", 0x1, "width", 0x2, Null]
    //     0x91f10c: ldr             x4, [x4, #0x630]
    // 0x91f110: r0 = Container()
    //     0x91f110: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91f114: ldur            x0, [fp, #-0x10]
    // 0x91f118: LoadField: r1 = r0->field_b
    //     0x91f118: ldur            w1, [x0, #0xb]
    // 0x91f11c: DecompressPointer r1
    //     0x91f11c: add             x1, x1, HEAP, lsl #32
    // 0x91f120: stur            x1, [fp, #-8]
    // 0x91f124: LoadField: r2 = r0->field_f
    //     0x91f124: ldur            w2, [x0, #0xf]
    // 0x91f128: DecompressPointer r2
    //     0x91f128: add             x2, x2, HEAP, lsl #32
    // 0x91f12c: LoadField: r3 = r2->field_b
    //     0x91f12c: ldur            w3, [x2, #0xb]
    // 0x91f130: DecompressPointer r3
    //     0x91f130: add             x3, x3, HEAP, lsl #32
    // 0x91f134: cmp             w1, w3
    // 0x91f138: b.ne            #0x91f144
    // 0x91f13c: str             x0, [SP]
    // 0x91f140: r0 = _growToNextCapacity()
    //     0x91f140: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91f144: ldur            x0, [fp, #-8]
    // 0x91f148: ldur            d0, [fp, #-0x30]
    // 0x91f14c: ldur            x2, [fp, #-0x10]
    // 0x91f150: r3 = LoadInt32Instr(r0)
    //     0x91f150: sbfx            x3, x0, #1, #0x1f
    // 0x91f154: add             x0, x3, #1
    // 0x91f158: lsl             x1, x0, #1
    // 0x91f15c: StoreField: r2->field_b = r1
    //     0x91f15c: stur            w1, [x2, #0xb]
    // 0x91f160: mov             x1, x3
    // 0x91f164: cmp             x1, x0
    // 0x91f168: b.hs            #0x91f27c
    // 0x91f16c: LoadField: r1 = r2->field_f
    //     0x91f16c: ldur            w1, [x2, #0xf]
    // 0x91f170: DecompressPointer r1
    //     0x91f170: add             x1, x1, HEAP, lsl #32
    // 0x91f174: ldur            x0, [fp, #-0x18]
    // 0x91f178: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91f178: add             x25, x1, x3, lsl #2
    //     0x91f17c: add             x25, x25, #0xf
    //     0x91f180: str             w0, [x25]
    //     0x91f184: tbz             w0, #0, #0x91f1a0
    //     0x91f188: ldurb           w16, [x1, #-1]
    //     0x91f18c: ldurb           w17, [x0, #-1]
    //     0x91f190: and             x16, x17, x16, lsr #2
    //     0x91f194: tst             x16, HEAP, lsr #32
    //     0x91f198: b.eq            #0x91f1a0
    //     0x91f19c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91f1a0: r0 = Row()
    //     0x91f1a0: bl              #0x629e50  ; AllocateRowStub -> Row (size=0x30)
    // 0x91f1a4: mov             x1, x0
    // 0x91f1a8: r0 = Instance_Axis
    //     0x91f1a8: ldr             x0, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91f1ac: stur            x1, [fp, #-0x18]
    // 0x91f1b0: StoreField: r1->field_f = r0
    //     0x91f1b0: stur            w0, [x1, #0xf]
    // 0x91f1b4: r0 = Instance_MainAxisAlignment
    //     0x91f1b4: add             x0, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0x91f1b8: ldr             x0, [x0, #0xb10]
    // 0x91f1bc: StoreField: r1->field_13 = r0
    //     0x91f1bc: stur            w0, [x1, #0x13]
    // 0x91f1c0: r0 = Instance_MainAxisSize
    //     0x91f1c0: add             x0, PP, #0x10, lsl #12  ; [pp+0x10420] Obj!MainAxisSize@c43c51
    //     0x91f1c4: ldr             x0, [x0, #0x420]
    // 0x91f1c8: ArrayStore: r1[0] = r0  ; List_4
    //     0x91f1c8: stur            w0, [x1, #0x17]
    // 0x91f1cc: r0 = Instance_CrossAxisAlignment
    //     0x91f1cc: add             x0, PP, #0x10, lsl #12  ; [pp+0x10428] Obj!CrossAxisAlignment@c43b51
    //     0x91f1d0: ldr             x0, [x0, #0x428]
    // 0x91f1d4: StoreField: r1->field_1b = r0
    //     0x91f1d4: stur            w0, [x1, #0x1b]
    // 0x91f1d8: r0 = Instance_VerticalDirection
    //     0x91f1d8: add             x0, PP, #0x10, lsl #12  ; [pp+0x10430] Obj!VerticalDirection@c44091
    //     0x91f1dc: ldr             x0, [x0, #0x430]
    // 0x91f1e0: StoreField: r1->field_23 = r0
    //     0x91f1e0: stur            w0, [x1, #0x23]
    // 0x91f1e4: r0 = Instance_Clip
    //     0x91f1e4: add             x0, PP, #0xe, lsl #12  ; [pp+0xe4a0] Obj!Clip@c47641
    //     0x91f1e8: ldr             x0, [x0, #0x4a0]
    // 0x91f1ec: StoreField: r1->field_2b = r0
    //     0x91f1ec: stur            w0, [x1, #0x2b]
    // 0x91f1f0: ldur            x0, [fp, #-0x10]
    // 0x91f1f4: StoreField: r1->field_b = r0
    //     0x91f1f4: stur            w0, [x1, #0xb]
    // 0x91f1f8: ldur            d0, [fp, #-0x30]
    // 0x91f1fc: r0 = inline_Allocate_Double()
    //     0x91f1fc: ldp             x0, x2, [THR, #0x50]  ; THR::top
    //     0x91f200: add             x0, x0, #0x10
    //     0x91f204: cmp             x2, x0
    //     0x91f208: b.ls            #0x91f280
    //     0x91f20c: str             x0, [THR, #0x50]  ; THR::top
    //     0x91f210: sub             x0, x0, #0xf
    //     0x91f214: movz            x2, #0xd148
    //     0x91f218: movk            x2, #0x3, lsl #16
    //     0x91f21c: stur            x2, [x0, #-1]
    // 0x91f220: StoreField: r0->field_7 = d0
    //     0x91f220: stur            d0, [x0, #7]
    // 0x91f224: stur            x0, [fp, #-8]
    // 0x91f228: r0 = Container()
    //     0x91f228: bl              #0x623e4c  ; AllocateContainerStub -> Container (size=0x38)
    // 0x91f22c: stur            x0, [fp, #-0x10]
    // 0x91f230: r16 = Instance_Alignment
    //     0x91f230: add             x16, PP, #0x10, lsl #12  ; [pp+0x10358] Obj!Alignment@c2f461
    //     0x91f234: ldr             x16, [x16, #0x358]
    // 0x91f238: stp             x16, x0, [SP, #0x10]
    // 0x91f23c: ldur            x16, [fp, #-8]
    // 0x91f240: ldur            lr, [fp, #-0x18]
    // 0x91f244: stp             lr, x16, [SP]
    // 0x91f248: r4 = const [0, 0x4, 0x4, 0x1, alignment, 0x1, child, 0x3, height, 0x2, null]
    //     0x91f248: add             x4, PP, #0x22, lsl #12  ; [pp+0x22d40] List(11) [0, 0x4, 0x4, 0x1, "alignment", 0x1, "child", 0x3, "height", 0x2, Null]
    //     0x91f24c: ldr             x4, [x4, #0xd40]
    // 0x91f250: r0 = Container()
    //     0x91f250: bl              #0x6236e4  ; [package:flutter/src/widgets/container.dart] Container::Container
    // 0x91f254: ldur            x0, [fp, #-0x10]
    // 0x91f258: LeaveFrame
    //     0x91f258: mov             SP, fp
    //     0x91f25c: ldp             fp, lr, [SP], #0x10
    // 0x91f260: ret
    //     0x91f260: ret             
    // 0x91f264: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91f264: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91f268: b               #0x91eebc
    // 0x91f26c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f26c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f270: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f270: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f274: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f274: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91f278: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91f278: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91f27c: r0 = RangeErrorSharedWithFPURegs()
    //     0x91f27c: bl              #0xc5f360  ; RangeErrorSharedWithFPURegsStub
    // 0x91f280: SaveReg d0
    //     0x91f280: str             q0, [SP, #-0x10]!
    // 0x91f284: SaveReg r1
    //     0x91f284: str             x1, [SP, #-8]!
    // 0x91f288: r0 = AllocateDouble()
    //     0x91f288: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91f28c: RestoreReg r1
    //     0x91f28c: ldr             x1, [SP], #8
    // 0x91f290: RestoreReg d0
    //     0x91f290: ldr             q0, [SP], #0x10
    // 0x91f294: b               #0x91f220
  }
  get _ _result(/* No info */) {
    // ** addr: 0x91f2d0, size: 0x3c
    // 0x91f2d0: EnterFrame
    //     0x91f2d0: stp             fp, lr, [SP, #-0x10]!
    //     0x91f2d4: mov             fp, SP
    // 0x91f2d8: ldr             x1, [fp, #0x10]
    // 0x91f2dc: LoadField: r2 = r1->field_b
    //     0x91f2dc: ldur            w2, [x1, #0xb]
    // 0x91f2e0: DecompressPointer r2
    //     0x91f2e0: add             x2, x2, HEAP, lsl #32
    // 0x91f2e4: cmp             w2, NULL
    // 0x91f2e8: b.eq            #0x91f308
    // 0x91f2ec: LoadField: r1 = r2->field_b
    //     0x91f2ec: ldur            w1, [x2, #0xb]
    // 0x91f2f0: DecompressPointer r1
    //     0x91f2f0: add             x1, x1, HEAP, lsl #32
    // 0x91f2f4: LoadField: r0 = r1->field_13
    //     0x91f2f4: ldur            w0, [x1, #0x13]
    // 0x91f2f8: DecompressPointer r0
    //     0x91f2f8: add             x0, x0, HEAP, lsl #32
    // 0x91f2fc: LeaveFrame
    //     0x91f2fc: mov             SP, fp
    //     0x91f300: ldp             fp, lr, [SP], #0x10
    // 0x91f304: ret
    //     0x91f304: ret             
    // 0x91f308: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91f308: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa1d7cc, size: 0x12c
    // 0xa1d7cc: EnterFrame
    //     0xa1d7cc: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d7d0: mov             fp, SP
    // 0xa1d7d4: AllocStack(0x30)
    //     0xa1d7d4: sub             SP, SP, #0x30
    // 0xa1d7d8: CheckStackOverflow
    //     0xa1d7d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d7dc: cmp             SP, x16
    //     0xa1d7e0: b.ls            #0xa1d8f0
    // 0xa1d7e4: r1 = 1
    //     0xa1d7e4: movz            x1, #0x1
    // 0xa1d7e8: r0 = AllocateContext()
    //     0xa1d7e8: bl              #0xc5def4  ; AllocateContextStub
    // 0xa1d7ec: mov             x2, x0
    // 0xa1d7f0: ldr             x0, [fp, #0x10]
    // 0xa1d7f4: stur            x2, [fp, #-8]
    // 0xa1d7f8: StoreField: r2->field_f = r0
    //     0xa1d7f8: stur            w0, [x2, #0xf]
    // 0xa1d7fc: r1 = <State<StatefulWidget>>
    //     0xa1d7fc: ldr             x1, [PP, #0x34a8]  ; [pp+0x34a8] TypeArguments: <State<StatefulWidget>>
    // 0xa1d800: r0 = LabeledGlobalKey()
    //     0xa1d800: bl              #0x5feb28  ; AllocateLabeledGlobalKeyStub -> LabeledGlobalKey<X0 bound State> (size=0x10)
    // 0xa1d804: ldr             x1, [fp, #0x10]
    // 0xa1d808: StoreField: r1->field_1b = r0
    //     0xa1d808: stur            w0, [x1, #0x1b]
    //     0xa1d80c: ldurb           w16, [x1, #-1]
    //     0xa1d810: ldurb           w17, [x0, #-1]
    //     0xa1d814: and             x16, x17, x16, lsr #2
    //     0xa1d818: tst             x16, HEAP, lsr #32
    //     0xa1d81c: b.eq            #0xa1d824
    //     0xa1d820: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d824: r0 = DateTime()
    //     0xa1d824: bl              #0x4f3e54  ; AllocateDateTimeStub -> DateTime (size=0x18)
    // 0xa1d828: mov             x1, x0
    // 0xa1d82c: r0 = false
    //     0xa1d82c: add             x0, NULL, #0x30  ; false
    // 0xa1d830: stur            x1, [fp, #-0x10]
    // 0xa1d834: StoreField: r1->field_13 = r0
    //     0xa1d834: stur            w0, [x1, #0x13]
    // 0xa1d838: r0 = _getCurrentMicros()
    //     0xa1d838: bl              #0x51ab44  ; [dart:core] DateTime::_getCurrentMicros
    // 0xa1d83c: r1 = LoadInt32Instr(r0)
    //     0xa1d83c: sbfx            x1, x0, #1, #0x1f
    //     0xa1d840: tbz             w0, #0, #0xa1d848
    //     0xa1d844: ldur            x1, [x0, #7]
    // 0xa1d848: ldur            x0, [fp, #-0x10]
    // 0xa1d84c: StoreField: r0->field_b = r1
    //     0xa1d84c: stur            x1, [x0, #0xb]
    // 0xa1d850: ldr             x2, [fp, #0x10]
    // 0xa1d854: StoreField: r2->field_1f = r0
    //     0xa1d854: stur            w0, [x2, #0x1f]
    //     0xa1d858: ldurb           w16, [x2, #-1]
    //     0xa1d85c: ldurb           w17, [x0, #-1]
    //     0xa1d860: and             x16, x17, x16, lsr #2
    //     0xa1d864: tst             x16, HEAP, lsr #32
    //     0xa1d868: b.eq            #0xa1d870
    //     0xa1d86c: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa1d870: r1 = <double>
    //     0xa1d870: ldr             x1, [PP, #0xf90]  ; [pp+0xf90] TypeArguments: <double>
    // 0xa1d874: r0 = AnimationController()
    //     0xa1d874: bl              #0x5b0154  ; AllocateAnimationControllerStub -> AnimationController (size=0x4c)
    // 0xa1d878: stur            x0, [fp, #-0x10]
    // 0xa1d87c: ldr             x16, [fp, #0x10]
    // 0xa1d880: stp             x16, x0, [SP, #0x10]
    // 0xa1d884: r16 = 0.000000
    //     0xa1d884: ldr             x16, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0xa1d888: r30 = Instance_Duration
    //     0xa1d888: add             lr, PP, #0x40, lsl #12  ; [pp+0x401e8] Obj!Duration@c47f11
    //     0xa1d88c: ldr             lr, [lr, #0x1e8]
    // 0xa1d890: stp             lr, x16, [SP]
    // 0xa1d894: r4 = const [0, 0x4, 0x4, 0x2, duration, 0x3, value, 0x2, null]
    //     0xa1d894: add             x4, PP, #0x25, lsl #12  ; [pp+0x25728] List(9) [0, 0x4, 0x4, 0x2, "duration", 0x3, "value", 0x2, Null]
    //     0xa1d898: ldr             x4, [x4, #0x728]
    // 0xa1d89c: r0 = AnimationController()
    //     0xa1d89c: bl              #0x5afc88  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::AnimationController
    // 0xa1d8a0: ldur            x0, [fp, #-0x10]
    // 0xa1d8a4: ldr             x1, [fp, #0x10]
    // 0xa1d8a8: StoreField: r1->field_23 = r0
    //     0xa1d8a8: stur            w0, [x1, #0x23]
    //     0xa1d8ac: ldurb           w16, [x1, #-1]
    //     0xa1d8b0: ldurb           w17, [x0, #-1]
    //     0xa1d8b4: and             x16, x17, x16, lsr #2
    //     0xa1d8b8: tst             x16, HEAP, lsr #32
    //     0xa1d8bc: b.eq            #0xa1d8c4
    //     0xa1d8c0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d8c4: ldur            x2, [fp, #-8]
    // 0xa1d8c8: r1 = Function '<anonymous closure>':.
    //     0xa1d8c8: add             x1, PP, #0x40, lsl #12  ; [pp+0x401f0] AnonymousClosure: (0xa1d8f8), in [package:easy_refresh/easy_refresh.dart] _ClassicIndicatorState::initState (0xa1d7cc)
    //     0xa1d8cc: ldr             x1, [x1, #0x1f0]
    // 0xa1d8d0: r0 = AllocateClosure()
    //     0xa1d8d0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1d8d4: ldur            x16, [fp, #-0x10]
    // 0xa1d8d8: stp             x0, x16, [SP]
    // 0xa1d8dc: r0 = addActionListener()
    //     0xa1d8dc: bl              #0xae8304  ; [package:flutter/src/widgets/actions.dart] Action::addActionListener
    // 0xa1d8e0: r0 = Null
    //     0xa1d8e0: mov             x0, NULL
    // 0xa1d8e4: LeaveFrame
    //     0xa1d8e4: mov             SP, fp
    //     0xa1d8e8: ldp             fp, lr, [SP], #0x10
    // 0xa1d8ec: ret
    //     0xa1d8ec: ret             
    // 0xa1d8f0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d8f0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d8f4: b               #0xa1d7e4
  }
  [closure] void <anonymous closure>(dynamic) {
    // ** addr: 0xa1d8f8, size: 0x60
    // 0xa1d8f8: EnterFrame
    //     0xa1d8f8: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d8fc: mov             fp, SP
    // 0xa1d900: AllocStack(0x18)
    //     0xa1d900: sub             SP, SP, #0x18
    // 0xa1d904: SetupParameters()
    //     0xa1d904: ldr             x0, [fp, #0x10]
    //     0xa1d908: ldur            w1, [x0, #0x17]
    //     0xa1d90c: add             x1, x1, HEAP, lsl #32
    // 0xa1d910: CheckStackOverflow
    //     0xa1d910: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d914: cmp             SP, x16
    //     0xa1d918: b.ls            #0xa1d950
    // 0xa1d91c: LoadField: r0 = r1->field_f
    //     0xa1d91c: ldur            w0, [x1, #0xf]
    // 0xa1d920: DecompressPointer r0
    //     0xa1d920: add             x0, x0, HEAP, lsl #32
    // 0xa1d924: stur            x0, [fp, #-8]
    // 0xa1d928: r1 = Function '<anonymous closure>':.
    //     0xa1d928: add             x1, PP, #0x40, lsl #12  ; [pp+0x401f8] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa1d92c: ldr             x1, [x1, #0x1f8]
    // 0xa1d930: r2 = Null
    //     0xa1d930: mov             x2, NULL
    // 0xa1d934: r0 = AllocateClosure()
    //     0xa1d934: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1d938: ldur            x16, [fp, #-8]
    // 0xa1d93c: stp             x0, x16, [SP]
    // 0xa1d940: r0 = setState()
    //     0xa1d940: bl              #0x5c71b8  ; [package:flutter/src/widgets/framework.dart] State::setState
    // 0xa1d944: LeaveFrame
    //     0xa1d944: mov             SP, fp
    //     0xa1d948: ldp             fp, lr, [SP], #0x10
    // 0xa1d94c: ret
    //     0xa1d94c: ret             
    // 0xa1d950: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d950: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d954: b               #0xa1d91c
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa554e4, size: 0x68
    // 0xa554e4: EnterFrame
    //     0xa554e4: stp             fp, lr, [SP, #-0x10]!
    //     0xa554e8: mov             fp, SP
    // 0xa554ec: AllocStack(0x8)
    //     0xa554ec: sub             SP, SP, #8
    // 0xa554f0: CheckStackOverflow
    //     0xa554f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa554f4: cmp             SP, x16
    //     0xa554f8: b.ls            #0xa55538
    // 0xa554fc: ldr             x16, [fp, #0x10]
    // 0xa55500: str             x16, [SP]
    // 0xa55504: r0 = dispose()
    //     0xa55504: bl              #0xa5554c  ; [package:easy_refresh/easy_refresh.dart] __ClassicIndicatorState&State&TickerProviderStateMixin::dispose
    // 0xa55508: ldr             x0, [fp, #0x10]
    // 0xa5550c: LoadField: r1 = r0->field_23
    //     0xa5550c: ldur            w1, [x0, #0x23]
    // 0xa55510: DecompressPointer r1
    //     0xa55510: add             x1, x1, HEAP, lsl #32
    // 0xa55514: r16 = Sentinel
    //     0xa55514: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa55518: cmp             w1, w16
    // 0xa5551c: b.eq            #0xa55540
    // 0xa55520: str             x1, [SP]
    // 0xa55524: r0 = dispose()
    //     0xa55524: bl              #0x6ddcb0  ; [package:flutter/src/animation/animation_controller.dart] AnimationController::dispose
    // 0xa55528: r0 = Null
    //     0xa55528: mov             x0, NULL
    // 0xa5552c: LeaveFrame
    //     0xa5552c: mov             SP, fp
    //     0xa55530: ldp             fp, lr, [SP], #0x10
    // 0xa55534: ret
    //     0xa55534: ret             
    // 0xa55538: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa55538: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa5553c: b               #0xa554fc
    // 0xa55540: r9 = _iconAnimationController
    //     0xa55540: add             x9, PP, #0x40, lsl #12  ; [pp+0x40198] Field <_ClassicIndicatorState@765089737._iconAnimationController@765089737>: late (offset: 0x24)
    //     0xa55544: ldr             x9, [x9, #0x198]
    // 0xa55548: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa55548: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3269, size: 0x1c, field offset: 0x14
//   transformed mixin,
abstract class __EasyRefreshState&State&TickerProviderStateMixin extends State<dynamic>
     with TickerProviderStateMixin<X0 bound StatefulWidget> {

  _ activate(/* No info */) {
    // ** addr: 0x8c9bec, size: 0x3c
    // 0x8c9bec: EnterFrame
    //     0x8c9bec: stp             fp, lr, [SP, #-0x10]!
    //     0x8c9bf0: mov             fp, SP
    // 0x8c9bf4: AllocStack(0x8)
    //     0x8c9bf4: sub             SP, SP, #8
    // 0x8c9bf8: CheckStackOverflow
    //     0x8c9bf8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c9bfc: cmp             SP, x16
    //     0x8c9c00: b.ls            #0x8c9c20
    // 0x8c9c04: ldr             x16, [fp, #0x10]
    // 0x8c9c08: str             x16, [SP]
    // 0x8c9c0c: r0 = _updateTickerModeNotifier()
    //     0x8c9c0c: bl              #0x8c9c28  ; [package:easy_refresh/easy_refresh.dart] __EasyRefreshState&State&TickerProviderStateMixin::_updateTickerModeNotifier
    // 0x8c9c10: r0 = Null
    //     0x8c9c10: mov             x0, NULL
    // 0x8c9c14: LeaveFrame
    //     0x8c9c14: mov             SP, fp
    //     0x8c9c18: ldp             fp, lr, [SP], #0x10
    // 0x8c9c1c: ret
    //     0x8c9c1c: ret             
    // 0x8c9c20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c9c20: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c9c24: b               #0x8c9c04
  }
  _ _updateTickerModeNotifier(/* No info */) {
    // ** addr: 0x8c9c28, size: 0x148
    // 0x8c9c28: EnterFrame
    //     0x8c9c28: stp             fp, lr, [SP, #-0x10]!
    //     0x8c9c2c: mov             fp, SP
    // 0x8c9c30: AllocStack(0x20)
    //     0x8c9c30: sub             SP, SP, #0x20
    // 0x8c9c34: CheckStackOverflow
    //     0x8c9c34: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8c9c38: cmp             SP, x16
    //     0x8c9c3c: b.ls            #0x8c9d64
    // 0x8c9c40: ldr             x0, [fp, #0x10]
    // 0x8c9c44: LoadField: r1 = r0->field_f
    //     0x8c9c44: ldur            w1, [x0, #0xf]
    // 0x8c9c48: DecompressPointer r1
    //     0x8c9c48: add             x1, x1, HEAP, lsl #32
    // 0x8c9c4c: cmp             w1, NULL
    // 0x8c9c50: b.eq            #0x8c9d6c
    // 0x8c9c54: str             x1, [SP]
    // 0x8c9c58: r0 = getNotifier()
    //     0x8c9c58: bl              #0x54b704  ; [package:flutter/src/widgets/ticker_provider.dart] TickerMode::getNotifier
    // 0x8c9c5c: mov             x1, x0
    // 0x8c9c60: ldr             x0, [fp, #0x10]
    // 0x8c9c64: stur            x1, [fp, #-0x10]
    // 0x8c9c68: ArrayLoad: r2 = r0[0]  ; List_4
    //     0x8c9c68: ldur            w2, [x0, #0x17]
    // 0x8c9c6c: DecompressPointer r2
    //     0x8c9c6c: add             x2, x2, HEAP, lsl #32
    // 0x8c9c70: stur            x2, [fp, #-8]
    // 0x8c9c74: cmp             w1, w2
    // 0x8c9c78: b.ne            #0x8c9c8c
    // 0x8c9c7c: r0 = Null
    //     0x8c9c7c: mov             x0, NULL
    // 0x8c9c80: LeaveFrame
    //     0x8c9c80: mov             SP, fp
    //     0x8c9c84: ldp             fp, lr, [SP], #0x10
    // 0x8c9c88: ret
    //     0x8c9c88: ret             
    // 0x8c9c8c: cmp             w2, NULL
    // 0x8c9c90: b.eq            #0x8c9ce8
    // 0x8c9c94: r1 = 1
    //     0x8c9c94: movz            x1, #0x1
    // 0x8c9c98: r0 = AllocateContext()
    //     0x8c9c98: bl              #0xc5def4  ; AllocateContextStub
    // 0x8c9c9c: mov             x1, x0
    // 0x8c9ca0: ldr             x0, [fp, #0x10]
    // 0x8c9ca4: StoreField: r1->field_f = r0
    //     0x8c9ca4: stur            w0, [x1, #0xf]
    // 0x8c9ca8: mov             x2, x1
    // 0x8c9cac: r1 = Function '_updateTickers@328311458':.
    //     0x8c9cac: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a058] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0x8c9cb0: ldr             x1, [x1, #0x58]
    // 0x8c9cb4: r0 = AllocateClosure()
    //     0x8c9cb4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8c9cb8: mov             x1, x0
    // 0x8c9cbc: ldur            x0, [fp, #-8]
    // 0x8c9cc0: r2 = LoadClassIdInstr(r0)
    //     0x8c9cc0: ldur            x2, [x0, #-1]
    //     0x8c9cc4: ubfx            x2, x2, #0xc, #0x14
    // 0x8c9cc8: stp             x1, x0, [SP]
    // 0x8c9ccc: mov             x0, x2
    // 0x8c9cd0: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0x8c9cd0: movz            x17, #0xc9d0
    //     0x8c9cd4: add             lr, x0, x17
    //     0x8c9cd8: ldr             lr, [x21, lr, lsl #3]
    //     0x8c9cdc: blr             lr
    // 0x8c9ce0: ldr             x0, [fp, #0x10]
    // 0x8c9ce4: ldur            x1, [fp, #-0x10]
    // 0x8c9ce8: r1 = 1
    //     0x8c9ce8: movz            x1, #0x1
    // 0x8c9cec: r0 = AllocateContext()
    //     0x8c9cec: bl              #0xc5def4  ; AllocateContextStub
    // 0x8c9cf0: mov             x1, x0
    // 0x8c9cf4: ldr             x0, [fp, #0x10]
    // 0x8c9cf8: StoreField: r1->field_f = r0
    //     0x8c9cf8: stur            w0, [x1, #0xf]
    // 0x8c9cfc: mov             x2, x1
    // 0x8c9d00: r1 = Function '_updateTickers@328311458':.
    //     0x8c9d00: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a058] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0x8c9d04: ldr             x1, [x1, #0x58]
    // 0x8c9d08: r0 = AllocateClosure()
    //     0x8c9d08: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8c9d0c: ldur            x1, [fp, #-0x10]
    // 0x8c9d10: r2 = LoadClassIdInstr(r1)
    //     0x8c9d10: ldur            x2, [x1, #-1]
    //     0x8c9d14: ubfx            x2, x2, #0xc, #0x14
    // 0x8c9d18: stp             x0, x1, [SP]
    // 0x8c9d1c: mov             x0, x2
    // 0x8c9d20: r0 = GDT[cid_x0 + 0xcefc]()
    //     0x8c9d20: movz            x17, #0xcefc
    //     0x8c9d24: add             lr, x0, x17
    //     0x8c9d28: ldr             lr, [x21, lr, lsl #3]
    //     0x8c9d2c: blr             lr
    // 0x8c9d30: ldur            x0, [fp, #-0x10]
    // 0x8c9d34: ldr             x1, [fp, #0x10]
    // 0x8c9d38: ArrayStore: r1[0] = r0  ; List_4
    //     0x8c9d38: stur            w0, [x1, #0x17]
    //     0x8c9d3c: ldurb           w16, [x1, #-1]
    //     0x8c9d40: ldurb           w17, [x0, #-1]
    //     0x8c9d44: and             x16, x17, x16, lsr #2
    //     0x8c9d48: tst             x16, HEAP, lsr #32
    //     0x8c9d4c: b.eq            #0x8c9d54
    //     0x8c9d50: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x8c9d54: r0 = Null
    //     0x8c9d54: mov             x0, NULL
    // 0x8c9d58: LeaveFrame
    //     0x8c9d58: mov             SP, fp
    //     0x8c9d5c: ldp             fp, lr, [SP], #0x10
    // 0x8c9d60: ret
    //     0x8c9d60: ret             
    // 0x8c9d64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8c9d64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8c9d68: b               #0x8c9c40
    // 0x8c9d6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8c9d6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa55400, size: 0xa4
    // 0xa55400: EnterFrame
    //     0xa55400: stp             fp, lr, [SP, #-0x10]!
    //     0xa55404: mov             fp, SP
    // 0xa55408: AllocStack(0x18)
    //     0xa55408: sub             SP, SP, #0x18
    // 0xa5540c: CheckStackOverflow
    //     0xa5540c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa55410: cmp             SP, x16
    //     0xa55414: b.ls            #0xa5549c
    // 0xa55418: ldr             x0, [fp, #0x10]
    // 0xa5541c: ArrayLoad: r1 = r0[0]  ; List_4
    //     0xa5541c: ldur            w1, [x0, #0x17]
    // 0xa55420: DecompressPointer r1
    //     0xa55420: add             x1, x1, HEAP, lsl #32
    // 0xa55424: stur            x1, [fp, #-8]
    // 0xa55428: cmp             w1, NULL
    // 0xa5542c: b.ne            #0xa55438
    // 0xa55430: mov             x1, x0
    // 0xa55434: b               #0xa55488
    // 0xa55438: r1 = 1
    //     0xa55438: movz            x1, #0x1
    // 0xa5543c: r0 = AllocateContext()
    //     0xa5543c: bl              #0xc5def4  ; AllocateContextStub
    // 0xa55440: mov             x1, x0
    // 0xa55444: ldr             x0, [fp, #0x10]
    // 0xa55448: StoreField: r1->field_f = r0
    //     0xa55448: stur            w0, [x1, #0xf]
    // 0xa5544c: mov             x2, x1
    // 0xa55450: r1 = Function '_updateTickers@328311458':.
    //     0xa55450: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a058] Function: [dart:ui] _NativeCodec::_NativeCodec._ (0xc57104)
    //     0xa55454: ldr             x1, [x1, #0x58]
    // 0xa55458: r0 = AllocateClosure()
    //     0xa55458: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa5545c: mov             x1, x0
    // 0xa55460: ldur            x0, [fp, #-8]
    // 0xa55464: r2 = LoadClassIdInstr(r0)
    //     0xa55464: ldur            x2, [x0, #-1]
    //     0xa55468: ubfx            x2, x2, #0xc, #0x14
    // 0xa5546c: stp             x1, x0, [SP]
    // 0xa55470: mov             x0, x2
    // 0xa55474: r0 = GDT[cid_x0 + 0xc9d0]()
    //     0xa55474: movz            x17, #0xc9d0
    //     0xa55478: add             lr, x0, x17
    //     0xa5547c: ldr             lr, [x21, lr, lsl #3]
    //     0xa55480: blr             lr
    // 0xa55484: ldr             x1, [fp, #0x10]
    // 0xa55488: ArrayStore: r1[0] = rNULL  ; List_4
    //     0xa55488: stur            NULL, [x1, #0x17]
    // 0xa5548c: r0 = Null
    //     0xa5548c: mov             x0, NULL
    // 0xa55490: LeaveFrame
    //     0xa55490: mov             SP, fp
    //     0xa55494: ldp             fp, lr, [SP], #0x10
    // 0xa55498: ret
    //     0xa55498: ret             
    // 0xa5549c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa5549c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa554a0: b               #0xa55418
  }
}

// class id: 3270, size: 0x28, field offset: 0x1c
class _EasyRefreshState extends __EasyRefreshState&State&TickerProviderStateMixin {

  late EasyRefreshData _data; // offset: 0x20
  late _ERScrollPhysics _physics; // offset: 0x1c

  get _ _footerNotifier(/* No info */) {
    // ** addr: 0x6854ac, size: 0x40
    // 0x6854ac: EnterFrame
    //     0x6854ac: stp             fp, lr, [SP, #-0x10]!
    //     0x6854b0: mov             fp, SP
    // 0x6854b4: ldr             x1, [fp, #0x10]
    // 0x6854b8: LoadField: r2 = r1->field_1f
    //     0x6854b8: ldur            w2, [x1, #0x1f]
    // 0x6854bc: DecompressPointer r2
    //     0x6854bc: add             x2, x2, HEAP, lsl #32
    // 0x6854c0: r16 = Sentinel
    //     0x6854c0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x6854c4: cmp             w2, w16
    // 0x6854c8: b.eq            #0x6854e0
    // 0x6854cc: LoadField: r0 = r2->field_b
    //     0x6854cc: ldur            w0, [x2, #0xb]
    // 0x6854d0: DecompressPointer r0
    //     0x6854d0: add             x0, x0, HEAP, lsl #32
    // 0x6854d4: LeaveFrame
    //     0x6854d4: mov             SP, fp
    //     0x6854d8: ldp             fp, lr, [SP], #0x10
    // 0x6854dc: ret
    //     0x6854dc: ret             
    // 0x6854e0: r9 = _data
    //     0x6854e0: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x6854e4: ldr             x9, [x9, #0x240]
    // 0x6854e8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x6854e8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ _headerNotifier(/* No info */) {
    // ** addr: 0x68557c, size: 0x40
    // 0x68557c: EnterFrame
    //     0x68557c: stp             fp, lr, [SP, #-0x10]!
    //     0x685580: mov             fp, SP
    // 0x685584: ldr             x1, [fp, #0x10]
    // 0x685588: LoadField: r2 = r1->field_1f
    //     0x685588: ldur            w2, [x1, #0x1f]
    // 0x68558c: DecompressPointer r2
    //     0x68558c: add             x2, x2, HEAP, lsl #32
    // 0x685590: r16 = Sentinel
    //     0x685590: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x685594: cmp             w2, w16
    // 0x685598: b.eq            #0x6855b0
    // 0x68559c: LoadField: r0 = r2->field_7
    //     0x68559c: ldur            w0, [x2, #7]
    // 0x6855a0: DecompressPointer r0
    //     0x6855a0: add             x0, x0, HEAP, lsl #32
    // 0x6855a4: LeaveFrame
    //     0x6855a4: mov             SP, fp
    //     0x6855a8: ldp             fp, lr, [SP], #0x10
    // 0x6855ac: ret
    //     0x6855ac: ret             
    // 0x6855b0: r9 = _data
    //     0x6855b0: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x6855b4: ldr             x9, [x9, #0x240]
    // 0x6855b8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x6855b8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ didUpdateWidget(/* No info */) {
    // ** addr: 0x8a95b4, size: 0x1f8
    // 0x8a95b4: EnterFrame
    //     0x8a95b4: stp             fp, lr, [SP, #-0x10]!
    //     0x8a95b8: mov             fp, SP
    // 0x8a95bc: AllocStack(0x38)
    //     0x8a95bc: sub             SP, SP, #0x38
    // 0x8a95c0: CheckStackOverflow
    //     0x8a95c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a95c4: cmp             SP, x16
    //     0x8a95c8: b.ls            #0x8a9788
    // 0x8a95cc: ldr             x0, [fp, #0x10]
    // 0x8a95d0: r2 = Null
    //     0x8a95d0: mov             x2, NULL
    // 0x8a95d4: r1 = Null
    //     0x8a95d4: mov             x1, NULL
    // 0x8a95d8: r4 = 59
    //     0x8a95d8: movz            x4, #0x3b
    // 0x8a95dc: branchIfSmi(r0, 0x8a95e8)
    //     0x8a95dc: tbz             w0, #0, #0x8a95e8
    // 0x8a95e0: r4 = LoadClassIdInstr(r0)
    //     0x8a95e0: ldur            x4, [x0, #-1]
    //     0x8a95e4: ubfx            x4, x4, #0xc, #0x14
    // 0x8a95e8: r17 = 4228
    //     0x8a95e8: movz            x17, #0x1084
    // 0x8a95ec: cmp             x4, x17
    // 0x8a95f0: b.eq            #0x8a9608
    // 0x8a95f4: r8 = EasyRefresh
    //     0x8a95f4: add             x8, PP, #0x2a, lsl #12  ; [pp+0x2a0a8] Type: EasyRefresh
    //     0x8a95f8: ldr             x8, [x8, #0xa8]
    // 0x8a95fc: r3 = Null
    //     0x8a95fc: add             x3, PP, #0x2a, lsl #12  ; [pp+0x2a0b0] Null
    //     0x8a9600: ldr             x3, [x3, #0xb0]
    // 0x8a9604: r0 = EasyRefresh()
    //     0x8a9604: bl              #0x683038  ; IsType_EasyRefresh_Stub
    // 0x8a9608: ldr             x3, [fp, #0x18]
    // 0x8a960c: LoadField: r2 = r3->field_7
    //     0x8a960c: ldur            w2, [x3, #7]
    // 0x8a9610: DecompressPointer r2
    //     0x8a9610: add             x2, x2, HEAP, lsl #32
    // 0x8a9614: ldr             x0, [fp, #0x10]
    // 0x8a9618: r1 = Null
    //     0x8a9618: mov             x1, NULL
    // 0x8a961c: cmp             w2, NULL
    // 0x8a9620: b.eq            #0x8a9644
    // 0x8a9624: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x8a9624: ldur            w4, [x2, #0x17]
    // 0x8a9628: DecompressPointer r4
    //     0x8a9628: add             x4, x4, HEAP, lsl #32
    // 0x8a962c: r8 = X0 bound StatefulWidget
    //     0x8a962c: add             x8, PP, #0xb, lsl #12  ; [pp+0xb290] TypeParameter: X0 bound StatefulWidget
    //     0x8a9630: ldr             x8, [x8, #0x290]
    // 0x8a9634: LoadField: r9 = r4->field_7
    //     0x8a9634: ldur            x9, [x4, #7]
    // 0x8a9638: r3 = Null
    //     0x8a9638: add             x3, PP, #0x2a, lsl #12  ; [pp+0x2a0c0] Null
    //     0x8a963c: ldr             x3, [x3, #0xc0]
    // 0x8a9640: blr             x9
    // 0x8a9644: ldr             x0, [fp, #0x18]
    // 0x8a9648: LoadField: r1 = r0->field_1f
    //     0x8a9648: ldur            w1, [x0, #0x1f]
    // 0x8a964c: DecompressPointer r1
    //     0x8a964c: add             x1, x1, HEAP, lsl #32
    // 0x8a9650: r16 = Sentinel
    //     0x8a9650: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9654: cmp             w1, w16
    // 0x8a9658: b.eq            #0x8a9790
    // 0x8a965c: LoadField: r2 = r1->field_7
    //     0x8a965c: ldur            w2, [x1, #7]
    // 0x8a9660: DecompressPointer r2
    //     0x8a9660: add             x2, x2, HEAP, lsl #32
    // 0x8a9664: stur            x2, [fp, #-8]
    // 0x8a9668: str             x0, [SP]
    // 0x8a966c: r0 = _header()
    //     0x8a966c: bl              #0x8a9b80  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_header
    // 0x8a9670: mov             x1, x0
    // 0x8a9674: ldr             x0, [fp, #0x18]
    // 0x8a9678: stur            x1, [fp, #-0x10]
    // 0x8a967c: LoadField: r2 = r0->field_b
    //     0x8a967c: ldur            w2, [x0, #0xb]
    // 0x8a9680: DecompressPointer r2
    //     0x8a9680: add             x2, x2, HEAP, lsl #32
    // 0x8a9684: cmp             w2, NULL
    // 0x8a9688: b.eq            #0x8a979c
    // 0x8a968c: str             x0, [SP]
    // 0x8a9690: r0 = _onRefresh()
    //     0x8a9690: bl              #0x8a9a24  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_onRefresh
    // 0x8a9694: mov             x1, x0
    // 0x8a9698: ldr             x0, [fp, #0x18]
    // 0x8a969c: LoadField: r2 = r0->field_b
    //     0x8a969c: ldur            w2, [x0, #0xb]
    // 0x8a96a0: DecompressPointer r2
    //     0x8a96a0: add             x2, x2, HEAP, lsl #32
    // 0x8a96a4: cmp             w2, NULL
    // 0x8a96a8: b.eq            #0x8a97a0
    // 0x8a96ac: ldur            x16, [fp, #-8]
    // 0x8a96b0: ldur            lr, [fp, #-0x10]
    // 0x8a96b4: stp             lr, x16, [SP, #0x10]
    // 0x8a96b8: r16 = false
    //     0x8a96b8: add             x16, NULL, #0x30  ; false
    // 0x8a96bc: stp             x16, x1, [SP]
    // 0x8a96c0: r0 = _update()
    //     0x8a96c0: bl              #0x8a9994  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_update
    // 0x8a96c4: ldr             x0, [fp, #0x18]
    // 0x8a96c8: LoadField: r1 = r0->field_1f
    //     0x8a96c8: ldur            w1, [x0, #0x1f]
    // 0x8a96cc: DecompressPointer r1
    //     0x8a96cc: add             x1, x1, HEAP, lsl #32
    // 0x8a96d0: LoadField: r2 = r1->field_b
    //     0x8a96d0: ldur            w2, [x1, #0xb]
    // 0x8a96d4: DecompressPointer r2
    //     0x8a96d4: add             x2, x2, HEAP, lsl #32
    // 0x8a96d8: stur            x2, [fp, #-8]
    // 0x8a96dc: str             x0, [SP]
    // 0x8a96e0: r0 = _footer()
    //     0x8a96e0: bl              #0x8a97ec  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_footer
    // 0x8a96e4: mov             x1, x0
    // 0x8a96e8: ldr             x0, [fp, #0x18]
    // 0x8a96ec: stur            x1, [fp, #-0x18]
    // 0x8a96f0: LoadField: r2 = r0->field_b
    //     0x8a96f0: ldur            w2, [x0, #0xb]
    // 0x8a96f4: DecompressPointer r2
    //     0x8a96f4: add             x2, x2, HEAP, lsl #32
    // 0x8a96f8: cmp             w2, NULL
    // 0x8a96fc: b.eq            #0x8a97a4
    // 0x8a9700: LoadField: r3 = r2->field_23
    //     0x8a9700: ldur            w3, [x2, #0x23]
    // 0x8a9704: DecompressPointer r3
    //     0x8a9704: add             x3, x3, HEAP, lsl #32
    // 0x8a9708: stur            x3, [fp, #-0x10]
    // 0x8a970c: str             x0, [SP]
    // 0x8a9710: r0 = _waitLoadResult()
    //     0x8a9710: bl              #0x8a97ac  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_waitLoadResult
    // 0x8a9714: ldur            x16, [fp, #-8]
    // 0x8a9718: ldur            lr, [fp, #-0x18]
    // 0x8a971c: stp             lr, x16, [SP, #0x10]
    // 0x8a9720: ldur            x16, [fp, #-0x10]
    // 0x8a9724: stp             x0, x16, [SP]
    // 0x8a9728: r0 = _update()
    //     0x8a9728: bl              #0x8a9994  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_update
    // 0x8a972c: ldr             x0, [fp, #0x18]
    // 0x8a9730: LoadField: r1 = r0->field_b
    //     0x8a9730: ldur            w1, [x0, #0xb]
    // 0x8a9734: DecompressPointer r1
    //     0x8a9734: add             x1, x1, HEAP, lsl #32
    // 0x8a9738: cmp             w1, NULL
    // 0x8a973c: b.eq            #0x8a97a8
    // 0x8a9740: ldr             x2, [fp, #0x10]
    // 0x8a9744: LoadField: r3 = r2->field_b
    //     0x8a9744: ldur            w3, [x2, #0xb]
    // 0x8a9748: DecompressPointer r3
    //     0x8a9748: add             x3, x3, HEAP, lsl #32
    // 0x8a974c: LoadField: r2 = r1->field_b
    //     0x8a974c: ldur            w2, [x1, #0xb]
    // 0x8a9750: DecompressPointer r2
    //     0x8a9750: add             x2, x2, HEAP, lsl #32
    // 0x8a9754: cmp             w3, w2
    // 0x8a9758: b.eq            #0x8a9778
    // 0x8a975c: StoreField: r2->field_f = r0
    //     0x8a975c: stur            w0, [x2, #0xf]
    //     0x8a9760: ldurb           w16, [x2, #-1]
    //     0x8a9764: ldurb           w17, [x0, #-1]
    //     0x8a9768: and             x16, x17, x16, lsr #2
    //     0x8a976c: tst             x16, HEAP, lsr #32
    //     0x8a9770: b.eq            #0x8a9778
    //     0x8a9774: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x8a9778: r0 = Null
    //     0x8a9778: mov             x0, NULL
    // 0x8a977c: LeaveFrame
    //     0x8a977c: mov             SP, fp
    //     0x8a9780: ldp             fp, lr, [SP], #0x10
    // 0x8a9784: ret
    //     0x8a9784: ret             
    // 0x8a9788: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9788: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a978c: b               #0x8a95cc
    // 0x8a9790: r9 = _data
    //     0x8a9790: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x8a9794: ldr             x9, [x9, #0x240]
    // 0x8a9798: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8a9798: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x8a979c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a979c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a97a0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a97a0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a97a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a97a4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a97a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a97a8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _waitLoadResult(/* No info */) {
    // ** addr: 0x8a97ac, size: 0x40
    // 0x8a97ac: EnterFrame
    //     0x8a97ac: stp             fp, lr, [SP, #-0x10]!
    //     0x8a97b0: mov             fp, SP
    // 0x8a97b4: ldr             x1, [fp, #0x10]
    // 0x8a97b8: LoadField: r2 = r1->field_b
    //     0x8a97b8: ldur            w2, [x1, #0xb]
    // 0x8a97bc: DecompressPointer r2
    //     0x8a97bc: add             x2, x2, HEAP, lsl #32
    // 0x8a97c0: cmp             w2, NULL
    // 0x8a97c4: b.eq            #0x8a97e8
    // 0x8a97c8: LoadField: r1 = r2->field_b
    //     0x8a97c8: ldur            w1, [x2, #0xb]
    // 0x8a97cc: DecompressPointer r1
    //     0x8a97cc: add             x1, x1, HEAP, lsl #32
    // 0x8a97d0: LoadField: r2 = r1->field_b
    //     0x8a97d0: ldur            w2, [x1, #0xb]
    // 0x8a97d4: DecompressPointer r2
    //     0x8a97d4: add             x2, x2, HEAP, lsl #32
    // 0x8a97d8: eor             x0, x2, #0x10
    // 0x8a97dc: LeaveFrame
    //     0x8a97dc: mov             SP, fp
    //     0x8a97e0: ldp             fp, lr, [SP], #0x10
    // 0x8a97e4: ret
    //     0x8a97e4: ret             
    // 0x8a97e8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a97e8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _footer(/* No info */) {
    // ** addr: 0x8a97ec, size: 0x130
    // 0x8a97ec: EnterFrame
    //     0x8a97ec: stp             fp, lr, [SP, #-0x10]!
    //     0x8a97f0: mov             fp, SP
    // 0x8a97f4: AllocStack(0x20)
    //     0x8a97f4: sub             SP, SP, #0x20
    // 0x8a97f8: CheckStackOverflow
    //     0x8a97f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a97fc: cmp             SP, x16
    //     0x8a9800: b.ls            #0x8a9910
    // 0x8a9804: ldr             x0, [fp, #0x10]
    // 0x8a9808: LoadField: r1 = r0->field_b
    //     0x8a9808: ldur            w1, [x0, #0xb]
    // 0x8a980c: DecompressPointer r1
    //     0x8a980c: add             x1, x1, HEAP, lsl #32
    // 0x8a9810: cmp             w1, NULL
    // 0x8a9814: b.eq            #0x8a9918
    // 0x8a9818: LoadField: r0 = r1->field_23
    //     0x8a9818: ldur            w0, [x1, #0x23]
    // 0x8a981c: DecompressPointer r0
    //     0x8a981c: add             x0, x0, HEAP, lsl #32
    // 0x8a9820: cmp             w0, NULL
    // 0x8a9824: b.ne            #0x8a9900
    // 0x8a9828: r0 = InitLateStaticField(0x1338) // [package:easy_refresh/easy_refresh.dart] EasyRefresh::defaultFooterBuilder
    //     0x8a9828: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8a982c: ldr             x0, [x0, #0x2670]
    //     0x8a9830: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x8a9834: cmp             w0, w16
    //     0x8a9838: b.ne            #0x8a9848
    //     0x8a983c: add             x2, PP, #0x2a, lsl #12  ; [pp+0x2a0d0] Field <EasyRefresh.defaultFooterBuilder>: static late (offset: 0x1338)
    //     0x8a9840: ldr             x2, [x2, #0xd0]
    //     0x8a9844: bl              #0xc5d1c4  ; InitLateStaticFieldStub
    // 0x8a9848: str             x0, [SP]
    // 0x8a984c: ClosureCall
    //     0x8a984c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x8a9850: ldur            x2, [x0, #0x1f]
    //     0x8a9854: blr             x2
    // 0x8a9858: LoadField: r1 = r0->field_43
    //     0x8a9858: ldur            w1, [x0, #0x43]
    // 0x8a985c: DecompressPointer r1
    //     0x8a985c: add             x1, x1, HEAP, lsl #32
    // 0x8a9860: stur            x1, [fp, #-0x18]
    // 0x8a9864: LoadField: r2 = r0->field_2f
    //     0x8a9864: ldur            w2, [x0, #0x2f]
    // 0x8a9868: DecompressPointer r2
    //     0x8a9868: add             x2, x2, HEAP, lsl #32
    // 0x8a986c: stur            x2, [fp, #-0x10]
    // 0x8a9870: LoadField: r3 = r0->field_3b
    //     0x8a9870: ldur            w3, [x0, #0x3b]
    // 0x8a9874: DecompressPointer r3
    //     0x8a9874: add             x3, x3, HEAP, lsl #32
    // 0x8a9878: stur            x3, [fp, #-8]
    // 0x8a987c: r0 = NotLoadFooter()
    //     0x8a987c: bl              #0x8a9978  ; AllocateNotLoadFooterStub -> NotLoadFooter (size=0x80)
    // 0x8a9880: d0 = 0.000000
    //     0x8a9880: eor             v0.16b, v0.16b, v0.16b
    // 0x8a9884: StoreField: r0->field_7 = d0
    //     0x8a9884: stur            d0, [x0, #7]
    // 0x8a9888: r1 = false
    //     0x8a9888: add             x1, NULL, #0x30  ; false
    // 0x8a988c: StoreField: r0->field_f = r1
    //     0x8a988c: stur            w1, [x0, #0xf]
    // 0x8a9890: r2 = Instance_Duration
    //     0x8a9890: ldr             x2, [PP, #0x2828]  ; [pp+0x2828] Obj!Duration@c47ca1
    // 0x8a9894: ArrayStore: r0[0] = r2  ; List_4
    //     0x8a9894: stur            w2, [x0, #0x17]
    // 0x8a9898: r2 = true
    //     0x8a9898: add             x2, NULL, #0x20  ; true
    // 0x8a989c: StoreField: r0->field_13 = r2
    //     0x8a989c: stur            w2, [x0, #0x13]
    // 0x8a98a0: StoreField: r0->field_2b = r2
    //     0x8a98a0: stur            w2, [x0, #0x2b]
    // 0x8a98a4: ldur            x3, [fp, #-0x10]
    // 0x8a98a8: StoreField: r0->field_2f = r3
    //     0x8a98a8: stur            w3, [x0, #0x2f]
    // 0x8a98ac: ldur            x3, [fp, #-0x18]
    // 0x8a98b0: StoreField: r0->field_43 = r3
    //     0x8a98b0: stur            w3, [x0, #0x43]
    // 0x8a98b4: StoreField: r0->field_47 = r1
    //     0x8a98b4: stur            w1, [x0, #0x47]
    // 0x8a98b8: d0 = 3000.000000
    //     0x8a98b8: add             x17, PP, #0x2a, lsl #12  ; [pp+0x2a0d8] IMM: double(3000) from 0x40a7700000000000
    //     0x8a98bc: ldr             d0, [x17, #0xd8]
    // 0x8a98c0: StoreField: r0->field_4f = d0
    //     0x8a98c0: stur            d0, [x0, #0x4f]
    // 0x8a98c4: d0 = 70.000000
    //     0x8a98c4: add             x17, PP, #0x1d, lsl #12  ; [pp+0x1d1d8] IMM: double(70) from 0x4051800000000000
    //     0x8a98c8: ldr             d0, [x17, #0x1d8]
    // 0x8a98cc: StoreField: r0->field_5b = d0
    //     0x8a98cc: stur            d0, [x0, #0x5b]
    // 0x8a98d0: StoreField: r0->field_63 = r1
    //     0x8a98d0: stur            w1, [x0, #0x63]
    // 0x8a98d4: StoreField: r0->field_6b = r1
    //     0x8a98d4: stur            w1, [x0, #0x6b]
    // 0x8a98d8: StoreField: r0->field_6f = r1
    //     0x8a98d8: stur            w1, [x0, #0x6f]
    // 0x8a98dc: StoreField: r0->field_73 = r1
    //     0x8a98dc: stur            w1, [x0, #0x73]
    // 0x8a98e0: d0 = inf
    //     0x8a98e0: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0x8a98e4: StoreField: r0->field_77 = d0
    //     0x8a98e4: stur            d0, [x0, #0x77]
    // 0x8a98e8: ldur            x1, [fp, #-8]
    // 0x8a98ec: StoreField: r0->field_3b = r1
    //     0x8a98ec: stur            w1, [x0, #0x3b]
    // 0x8a98f0: StoreField: r0->field_3f = r2
    //     0x8a98f0: stur            w2, [x0, #0x3f]
    // 0x8a98f4: LeaveFrame
    //     0x8a98f4: mov             SP, fp
    //     0x8a98f8: ldp             fp, lr, [SP], #0x10
    // 0x8a98fc: ret
    //     0x8a98fc: ret             
    // 0x8a9900: r0 = _defaultFooter()
    //     0x8a9900: bl              #0x8a991c  ; [package:easy_refresh/easy_refresh.dart] EasyRefresh::_defaultFooter
    // 0x8a9904: LeaveFrame
    //     0x8a9904: mov             SP, fp
    //     0x8a9908: ldp             fp, lr, [SP], #0x10
    // 0x8a990c: ret
    //     0x8a990c: ret             
    // 0x8a9910: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9910: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9914: b               #0x8a9804
    // 0x8a9918: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9918: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ _onRefresh(/* No info */) {
    // ** addr: 0x8a9a24, size: 0x4c
    // 0x8a9a24: EnterFrame
    //     0x8a9a24: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9a28: mov             fp, SP
    // 0x8a9a2c: r1 = 1
    //     0x8a9a2c: movz            x1, #0x1
    // 0x8a9a30: r0 = AllocateContext()
    //     0x8a9a30: bl              #0xc5def4  ; AllocateContextStub
    // 0x8a9a34: mov             x1, x0
    // 0x8a9a38: ldr             x0, [fp, #0x10]
    // 0x8a9a3c: StoreField: r1->field_f = r0
    //     0x8a9a3c: stur            w0, [x1, #0xf]
    // 0x8a9a40: LoadField: r2 = r0->field_b
    //     0x8a9a40: ldur            w2, [x0, #0xb]
    // 0x8a9a44: DecompressPointer r2
    //     0x8a9a44: add             x2, x2, HEAP, lsl #32
    // 0x8a9a48: cmp             w2, NULL
    // 0x8a9a4c: b.eq            #0x8a9a6c
    // 0x8a9a50: mov             x2, x1
    // 0x8a9a54: r1 = Function '<anonymous closure>':.
    //     0x8a9a54: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0e0] AnonymousClosure: (0x8a9a70), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_onRefresh (0x8a9a24)
    //     0x8a9a58: ldr             x1, [x1, #0xe0]
    // 0x8a9a5c: r0 = AllocateClosure()
    //     0x8a9a5c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x8a9a60: LeaveFrame
    //     0x8a9a60: mov             SP, fp
    //     0x8a9a64: ldp             fp, lr, [SP], #0x10
    // 0x8a9a68: ret
    //     0x8a9a68: ret             
    // 0x8a9a6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9a6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] Future<dynamic> <anonymous closure>(dynamic) async {
    // ** addr: 0x8a9a70, size: 0xe0
    // 0x8a9a70: EnterFrame
    //     0x8a9a70: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9a74: mov             fp, SP
    // 0x8a9a78: AllocStack(0x28)
    //     0x8a9a78: sub             SP, SP, #0x28
    // 0x8a9a7c: SetupParameters(_EasyRefreshState this /* r1 */)
    //     0x8a9a7c: stur            NULL, [fp, #-8]
    //     0x8a9a80: movz            x0, #0
    //     0x8a9a84: add             x1, fp, w0, sxtw #2
    //     0x8a9a88: ldr             x1, [x1, #0x10]
    //     0x8a9a8c: ldur            w2, [x1, #0x17]
    //     0x8a9a90: add             x2, x2, HEAP, lsl #32
    //     0x8a9a94: stur            x2, [fp, #-0x10]
    // 0x8a9a98: CheckStackOverflow
    //     0x8a9a98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a9a9c: cmp             SP, x16
    //     0x8a9aa0: b.ls            #0x8a9b34
    // 0x8a9aa4: InitAsync() -> Future
    //     0x8a9aa4: mov             x0, NULL
    //     0x8a9aa8: bl              #0x4dea10  ; InitAsyncStub
    // 0x8a9aac: ldur            x0, [fp, #-0x10]
    // 0x8a9ab0: LoadField: r1 = r0->field_f
    //     0x8a9ab0: ldur            w1, [x0, #0xf]
    // 0x8a9ab4: DecompressPointer r1
    //     0x8a9ab4: add             x1, x1, HEAP, lsl #32
    // 0x8a9ab8: LoadField: r2 = r1->field_b
    //     0x8a9ab8: ldur            w2, [x1, #0xb]
    // 0x8a9abc: DecompressPointer r2
    //     0x8a9abc: add             x2, x2, HEAP, lsl #32
    // 0x8a9ac0: cmp             w2, NULL
    // 0x8a9ac4: b.eq            #0x8a9b3c
    // 0x8a9ac8: LoadField: r1 = r2->field_1f
    //     0x8a9ac8: ldur            w1, [x2, #0x1f]
    // 0x8a9acc: DecompressPointer r1
    //     0x8a9acc: add             x1, x1, HEAP, lsl #32
    // 0x8a9ad0: stp             x1, NULL, [SP]
    // 0x8a9ad4: r0 = Future.sync()
    //     0x8a9ad4: bl              #0x684868  ; [dart:async] Future::Future.sync
    // 0x8a9ad8: mov             x1, x0
    // 0x8a9adc: stur            x1, [fp, #-0x18]
    // 0x8a9ae0: r0 = Await()
    //     0x8a9ae0: bl              #0x4de7e4  ; AwaitStub
    // 0x8a9ae4: mov             x1, x0
    // 0x8a9ae8: ldur            x0, [fp, #-0x10]
    // 0x8a9aec: stur            x1, [fp, #-0x18]
    // 0x8a9af0: LoadField: r2 = r0->field_f
    //     0x8a9af0: ldur            w2, [x0, #0xf]
    // 0x8a9af4: DecompressPointer r2
    //     0x8a9af4: add             x2, x2, HEAP, lsl #32
    // 0x8a9af8: LoadField: r0 = r2->field_b
    //     0x8a9af8: ldur            w0, [x2, #0xb]
    // 0x8a9afc: DecompressPointer r0
    //     0x8a9afc: add             x0, x0, HEAP, lsl #32
    // 0x8a9b00: cmp             w0, NULL
    // 0x8a9b04: b.eq            #0x8a9b40
    // 0x8a9b08: LoadField: r0 = r2->field_1f
    //     0x8a9b08: ldur            w0, [x2, #0x1f]
    // 0x8a9b0c: DecompressPointer r0
    //     0x8a9b0c: add             x0, x0, HEAP, lsl #32
    // 0x8a9b10: r16 = Sentinel
    //     0x8a9b10: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x8a9b14: cmp             w0, w16
    // 0x8a9b18: b.eq            #0x8a9b44
    // 0x8a9b1c: LoadField: r2 = r0->field_b
    //     0x8a9b1c: ldur            w2, [x0, #0xb]
    // 0x8a9b20: DecompressPointer r2
    //     0x8a9b20: add             x2, x2, HEAP, lsl #32
    // 0x8a9b24: str             x2, [SP]
    // 0x8a9b28: r0 = _reset()
    //     0x8a9b28: bl              #0x8a9b50  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_reset
    // 0x8a9b2c: ldur            x0, [fp, #-0x18]
    // 0x8a9b30: r0 = ReturnAsync()
    //     0x8a9b30: b               #0x51a6e4  ; ReturnAsyncStub
    // 0x8a9b34: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9b34: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9b38: b               #0x8a9aa4
    // 0x8a9b3c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9b3c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a9b40: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9b40: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x8a9b44: r9 = _data
    //     0x8a9b44: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x8a9b48: ldr             x9, [x9, #0x240]
    // 0x8a9b4c: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x8a9b4c: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ _header(/* No info */) {
    // ** addr: 0x8a9b80, size: 0x44
    // 0x8a9b80: EnterFrame
    //     0x8a9b80: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9b84: mov             fp, SP
    // 0x8a9b88: CheckStackOverflow
    //     0x8a9b88: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a9b8c: cmp             SP, x16
    //     0x8a9b90: b.ls            #0x8a9bb8
    // 0x8a9b94: ldr             x0, [fp, #0x10]
    // 0x8a9b98: LoadField: r1 = r0->field_b
    //     0x8a9b98: ldur            w1, [x0, #0xb]
    // 0x8a9b9c: DecompressPointer r1
    //     0x8a9b9c: add             x1, x1, HEAP, lsl #32
    // 0x8a9ba0: cmp             w1, NULL
    // 0x8a9ba4: b.eq            #0x8a9bc0
    // 0x8a9ba8: r0 = _defaultHeader()
    //     0x8a9ba8: bl              #0x8a9bc4  ; [package:easy_refresh/easy_refresh.dart] EasyRefresh::_defaultHeader
    // 0x8a9bac: LeaveFrame
    //     0x8a9bac: mov             SP, fp
    //     0x8a9bb0: ldp             fp, lr, [SP], #0x10
    // 0x8a9bb4: ret
    //     0x8a9bb4: ret             
    // 0x8a9bb8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9bb8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9bbc: b               #0x8a9b94
    // 0x8a9bc0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x8a9bc0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ build(/* No info */) {
    // ** addr: 0x91bf48, size: 0x4b8
    // 0x91bf48: EnterFrame
    //     0x91bf48: stp             fp, lr, [SP, #-0x10]!
    //     0x91bf4c: mov             fp, SP
    // 0x91bf50: AllocStack(0x40)
    //     0x91bf50: sub             SP, SP, #0x40
    // 0x91bf54: CheckStackOverflow
    //     0x91bf54: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91bf58: cmp             SP, x16
    //     0x91bf5c: b.ls            #0x91c3d4
    // 0x91bf60: ldr             x16, [fp, #0x18]
    // 0x91bf64: str             x16, [SP]
    // 0x91bf68: r0 = _buildContent()
    //     0x91bf68: bl              #0x91cd5c  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildContent
    // 0x91bf6c: stur            x0, [fp, #-8]
    // 0x91bf70: r16 = <Widget>
    //     0x91bf70: add             x16, PP, #0x10, lsl #12  ; [pp+0x10410] TypeArguments: <Widget>
    //     0x91bf74: ldr             x16, [x16, #0x410]
    // 0x91bf78: stp             xzr, x16, [SP]
    // 0x91bf7c: r0 = _GrowableList()
    //     0x91bf7c: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x91bf80: mov             x1, x0
    // 0x91bf84: ldr             x0, [fp, #0x18]
    // 0x91bf88: stur            x1, [fp, #-0x20]
    // 0x91bf8c: LoadField: r2 = r0->field_1f
    //     0x91bf8c: ldur            w2, [x0, #0x1f]
    // 0x91bf90: DecompressPointer r2
    //     0x91bf90: add             x2, x2, HEAP, lsl #32
    // 0x91bf94: r16 = Sentinel
    //     0x91bf94: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91bf98: cmp             w2, w16
    // 0x91bf9c: b.eq            #0x91c3dc
    // 0x91bfa0: LoadField: r3 = r2->field_7
    //     0x91bfa0: ldur            w3, [x2, #7]
    // 0x91bfa4: DecompressPointer r3
    //     0x91bfa4: add             x3, x3, HEAP, lsl #32
    // 0x91bfa8: LoadField: r4 = r3->field_23
    //     0x91bfa8: ldur            w4, [x3, #0x23]
    // 0x91bfac: DecompressPointer r4
    //     0x91bfac: add             x4, x4, HEAP, lsl #32
    // 0x91bfb0: LoadField: r3 = r4->field_43
    //     0x91bfb0: ldur            w3, [x4, #0x43]
    // 0x91bfb4: DecompressPointer r3
    //     0x91bfb4: add             x3, x3, HEAP, lsl #32
    // 0x91bfb8: stur            x3, [fp, #-0x18]
    // 0x91bfbc: LoadField: r4 = r2->field_b
    //     0x91bfbc: ldur            w4, [x2, #0xb]
    // 0x91bfc0: DecompressPointer r4
    //     0x91bfc0: add             x4, x4, HEAP, lsl #32
    // 0x91bfc4: LoadField: r2 = r4->field_23
    //     0x91bfc4: ldur            w2, [x4, #0x23]
    // 0x91bfc8: DecompressPointer r2
    //     0x91bfc8: add             x2, x2, HEAP, lsl #32
    // 0x91bfcc: LoadField: r4 = r2->field_43
    //     0x91bfcc: ldur            w4, [x2, #0x43]
    // 0x91bfd0: DecompressPointer r4
    //     0x91bfd0: add             x4, x4, HEAP, lsl #32
    // 0x91bfd4: stur            x4, [fp, #-0x10]
    // 0x91bfd8: r16 = Instance_IndicatorPosition
    //     0x91bfd8: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a060] Obj!IndicatorPosition@c45271
    //     0x91bfdc: ldr             x16, [x16, #0x60]
    // 0x91bfe0: cmp             w3, w16
    // 0x91bfe4: b.ne            #0x91c084
    // 0x91bfe8: str             x0, [SP]
    // 0x91bfec: r0 = _buildHeaderView()
    //     0x91bfec: bl              #0x91c9e4  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildHeaderView
    // 0x91bff0: mov             x1, x0
    // 0x91bff4: ldur            x0, [fp, #-0x20]
    // 0x91bff8: stur            x1, [fp, #-0x30]
    // 0x91bffc: LoadField: r2 = r0->field_b
    //     0x91bffc: ldur            w2, [x0, #0xb]
    // 0x91c000: DecompressPointer r2
    //     0x91c000: add             x2, x2, HEAP, lsl #32
    // 0x91c004: stur            x2, [fp, #-0x28]
    // 0x91c008: LoadField: r3 = r0->field_f
    //     0x91c008: ldur            w3, [x0, #0xf]
    // 0x91c00c: DecompressPointer r3
    //     0x91c00c: add             x3, x3, HEAP, lsl #32
    // 0x91c010: LoadField: r4 = r3->field_b
    //     0x91c010: ldur            w4, [x3, #0xb]
    // 0x91c014: DecompressPointer r4
    //     0x91c014: add             x4, x4, HEAP, lsl #32
    // 0x91c018: cmp             w2, w4
    // 0x91c01c: b.ne            #0x91c028
    // 0x91c020: str             x0, [SP]
    // 0x91c024: r0 = _growToNextCapacity()
    //     0x91c024: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91c028: ldur            x2, [fp, #-0x20]
    // 0x91c02c: ldur            x0, [fp, #-0x28]
    // 0x91c030: r3 = LoadInt32Instr(r0)
    //     0x91c030: sbfx            x3, x0, #1, #0x1f
    // 0x91c034: add             x0, x3, #1
    // 0x91c038: lsl             x1, x0, #1
    // 0x91c03c: StoreField: r2->field_b = r1
    //     0x91c03c: stur            w1, [x2, #0xb]
    // 0x91c040: mov             x1, x3
    // 0x91c044: cmp             x1, x0
    // 0x91c048: b.hs            #0x91c3e8
    // 0x91c04c: LoadField: r1 = r2->field_f
    //     0x91c04c: ldur            w1, [x2, #0xf]
    // 0x91c050: DecompressPointer r1
    //     0x91c050: add             x1, x1, HEAP, lsl #32
    // 0x91c054: ldur            x0, [fp, #-0x30]
    // 0x91c058: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91c058: add             x25, x1, x3, lsl #2
    //     0x91c05c: add             x25, x25, #0xf
    //     0x91c060: str             w0, [x25]
    //     0x91c064: tbz             w0, #0, #0x91c080
    //     0x91c068: ldurb           w16, [x1, #-1]
    //     0x91c06c: ldurb           w17, [x0, #-1]
    //     0x91c070: and             x16, x17, x16, lsr #2
    //     0x91c074: tst             x16, HEAP, lsr #32
    //     0x91c078: b.eq            #0x91c080
    //     0x91c07c: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91c080: b               #0x91c088
    // 0x91c084: mov             x2, x1
    // 0x91c088: ldur            x0, [fp, #-0x10]
    // 0x91c08c: r16 = Instance_IndicatorPosition
    //     0x91c08c: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a060] Obj!IndicatorPosition@c45271
    //     0x91c090: ldr             x16, [x16, #0x60]
    // 0x91c094: cmp             w0, w16
    // 0x91c098: b.ne            #0x91c138
    // 0x91c09c: ldr             x16, [fp, #0x18]
    // 0x91c0a0: str             x16, [SP]
    // 0x91c0a4: r0 = _buildFooterView()
    //     0x91c0a4: bl              #0x91c400  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildFooterView
    // 0x91c0a8: mov             x1, x0
    // 0x91c0ac: ldur            x0, [fp, #-0x20]
    // 0x91c0b0: stur            x1, [fp, #-0x30]
    // 0x91c0b4: LoadField: r2 = r0->field_b
    //     0x91c0b4: ldur            w2, [x0, #0xb]
    // 0x91c0b8: DecompressPointer r2
    //     0x91c0b8: add             x2, x2, HEAP, lsl #32
    // 0x91c0bc: stur            x2, [fp, #-0x28]
    // 0x91c0c0: LoadField: r3 = r0->field_f
    //     0x91c0c0: ldur            w3, [x0, #0xf]
    // 0x91c0c4: DecompressPointer r3
    //     0x91c0c4: add             x3, x3, HEAP, lsl #32
    // 0x91c0c8: LoadField: r4 = r3->field_b
    //     0x91c0c8: ldur            w4, [x3, #0xb]
    // 0x91c0cc: DecompressPointer r4
    //     0x91c0cc: add             x4, x4, HEAP, lsl #32
    // 0x91c0d0: cmp             w2, w4
    // 0x91c0d4: b.ne            #0x91c0e0
    // 0x91c0d8: str             x0, [SP]
    // 0x91c0dc: r0 = _growToNextCapacity()
    //     0x91c0dc: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91c0e0: ldur            x2, [fp, #-0x20]
    // 0x91c0e4: ldur            x0, [fp, #-0x28]
    // 0x91c0e8: r3 = LoadInt32Instr(r0)
    //     0x91c0e8: sbfx            x3, x0, #1, #0x1f
    // 0x91c0ec: add             x0, x3, #1
    // 0x91c0f0: lsl             x1, x0, #1
    // 0x91c0f4: StoreField: r2->field_b = r1
    //     0x91c0f4: stur            w1, [x2, #0xb]
    // 0x91c0f8: mov             x1, x3
    // 0x91c0fc: cmp             x1, x0
    // 0x91c100: b.hs            #0x91c3ec
    // 0x91c104: LoadField: r1 = r2->field_f
    //     0x91c104: ldur            w1, [x2, #0xf]
    // 0x91c108: DecompressPointer r1
    //     0x91c108: add             x1, x1, HEAP, lsl #32
    // 0x91c10c: ldur            x0, [fp, #-0x30]
    // 0x91c110: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91c110: add             x25, x1, x3, lsl #2
    //     0x91c114: add             x25, x25, #0xf
    //     0x91c118: str             w0, [x25]
    //     0x91c11c: tbz             w0, #0, #0x91c138
    //     0x91c120: ldurb           w16, [x1, #-1]
    //     0x91c124: ldurb           w17, [x0, #-1]
    //     0x91c128: and             x16, x17, x16, lsr #2
    //     0x91c12c: tst             x16, HEAP, lsr #32
    //     0x91c130: b.eq            #0x91c138
    //     0x91c134: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91c138: LoadField: r0 = r2->field_b
    //     0x91c138: ldur            w0, [x2, #0xb]
    // 0x91c13c: DecompressPointer r0
    //     0x91c13c: add             x0, x0, HEAP, lsl #32
    // 0x91c140: stur            x0, [fp, #-0x28]
    // 0x91c144: LoadField: r1 = r2->field_f
    //     0x91c144: ldur            w1, [x2, #0xf]
    // 0x91c148: DecompressPointer r1
    //     0x91c148: add             x1, x1, HEAP, lsl #32
    // 0x91c14c: LoadField: r3 = r1->field_b
    //     0x91c14c: ldur            w3, [x1, #0xb]
    // 0x91c150: DecompressPointer r3
    //     0x91c150: add             x3, x3, HEAP, lsl #32
    // 0x91c154: cmp             w0, w3
    // 0x91c158: b.ne            #0x91c164
    // 0x91c15c: str             x2, [SP]
    // 0x91c160: r0 = _growToNextCapacity()
    //     0x91c160: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91c164: ldur            x2, [fp, #-0x20]
    // 0x91c168: ldur            x3, [fp, #-0x18]
    // 0x91c16c: ldur            x0, [fp, #-0x28]
    // 0x91c170: r4 = LoadInt32Instr(r0)
    //     0x91c170: sbfx            x4, x0, #1, #0x1f
    // 0x91c174: add             x5, x4, #1
    // 0x91c178: lsl             x0, x5, #1
    // 0x91c17c: StoreField: r2->field_b = r0
    //     0x91c17c: stur            w0, [x2, #0xb]
    // 0x91c180: mov             x0, x5
    // 0x91c184: mov             x1, x4
    // 0x91c188: cmp             x1, x0
    // 0x91c18c: b.hs            #0x91c3f0
    // 0x91c190: LoadField: r1 = r2->field_f
    //     0x91c190: ldur            w1, [x2, #0xf]
    // 0x91c194: DecompressPointer r1
    //     0x91c194: add             x1, x1, HEAP, lsl #32
    // 0x91c198: ldur            x0, [fp, #-8]
    // 0x91c19c: ArrayStore: r1[r4] = r0  ; List_4
    //     0x91c19c: add             x25, x1, x4, lsl #2
    //     0x91c1a0: add             x25, x25, #0xf
    //     0x91c1a4: str             w0, [x25]
    //     0x91c1a8: tbz             w0, #0, #0x91c1c4
    //     0x91c1ac: ldurb           w16, [x1, #-1]
    //     0x91c1b0: ldurb           w17, [x0, #-1]
    //     0x91c1b4: and             x16, x17, x16, lsr #2
    //     0x91c1b8: tst             x16, HEAP, lsr #32
    //     0x91c1bc: b.eq            #0x91c1c4
    //     0x91c1c0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91c1c4: r16 = Instance_IndicatorPosition
    //     0x91c1c4: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a068] Obj!IndicatorPosition@c45251
    //     0x91c1c8: ldr             x16, [x16, #0x68]
    // 0x91c1cc: cmp             w3, w16
    // 0x91c1d0: b.ne            #0x91c27c
    // 0x91c1d4: ldr             x16, [fp, #0x18]
    // 0x91c1d8: str             x16, [SP]
    // 0x91c1dc: r0 = _buildHeaderView()
    //     0x91c1dc: bl              #0x91c9e4  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildHeaderView
    // 0x91c1e0: mov             x1, x0
    // 0x91c1e4: ldur            x0, [fp, #-0x20]
    // 0x91c1e8: stur            x1, [fp, #-0x28]
    // 0x91c1ec: LoadField: r2 = r0->field_b
    //     0x91c1ec: ldur            w2, [x0, #0xb]
    // 0x91c1f0: DecompressPointer r2
    //     0x91c1f0: add             x2, x2, HEAP, lsl #32
    // 0x91c1f4: stur            x2, [fp, #-0x18]
    // 0x91c1f8: LoadField: r3 = r0->field_f
    //     0x91c1f8: ldur            w3, [x0, #0xf]
    // 0x91c1fc: DecompressPointer r3
    //     0x91c1fc: add             x3, x3, HEAP, lsl #32
    // 0x91c200: LoadField: r4 = r3->field_b
    //     0x91c200: ldur            w4, [x3, #0xb]
    // 0x91c204: DecompressPointer r4
    //     0x91c204: add             x4, x4, HEAP, lsl #32
    // 0x91c208: cmp             w2, w4
    // 0x91c20c: b.ne            #0x91c218
    // 0x91c210: str             x0, [SP]
    // 0x91c214: r0 = _growToNextCapacity()
    //     0x91c214: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91c218: ldur            x2, [fp, #-0x20]
    // 0x91c21c: ldur            x0, [fp, #-0x18]
    // 0x91c220: r3 = LoadInt32Instr(r0)
    //     0x91c220: sbfx            x3, x0, #1, #0x1f
    // 0x91c224: add             x4, x3, #1
    // 0x91c228: lsl             x0, x4, #1
    // 0x91c22c: StoreField: r2->field_b = r0
    //     0x91c22c: stur            w0, [x2, #0xb]
    // 0x91c230: mov             x0, x4
    // 0x91c234: mov             x1, x3
    // 0x91c238: cmp             x1, x0
    // 0x91c23c: b.hs            #0x91c3f4
    // 0x91c240: LoadField: r1 = r2->field_f
    //     0x91c240: ldur            w1, [x2, #0xf]
    // 0x91c244: DecompressPointer r1
    //     0x91c244: add             x1, x1, HEAP, lsl #32
    // 0x91c248: ldur            x0, [fp, #-0x28]
    // 0x91c24c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91c24c: add             x25, x1, x3, lsl #2
    //     0x91c250: add             x25, x25, #0xf
    //     0x91c254: str             w0, [x25]
    //     0x91c258: tbz             w0, #0, #0x91c274
    //     0x91c25c: ldurb           w16, [x1, #-1]
    //     0x91c260: ldurb           w17, [x0, #-1]
    //     0x91c264: and             x16, x17, x16, lsr #2
    //     0x91c268: tst             x16, HEAP, lsr #32
    //     0x91c26c: b.eq            #0x91c274
    //     0x91c270: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91c274: mov             x1, x4
    // 0x91c278: b               #0x91c280
    // 0x91c27c: mov             x1, x5
    // 0x91c280: ldur            x0, [fp, #-0x10]
    // 0x91c284: r16 = Instance_IndicatorPosition
    //     0x91c284: add             x16, PP, #0x2a, lsl #12  ; [pp+0x2a068] Obj!IndicatorPosition@c45251
    //     0x91c288: ldr             x16, [x16, #0x68]
    // 0x91c28c: cmp             w0, w16
    // 0x91c290: b.ne            #0x91c33c
    // 0x91c294: ldr             x16, [fp, #0x18]
    // 0x91c298: str             x16, [SP]
    // 0x91c29c: r0 = _buildFooterView()
    //     0x91c29c: bl              #0x91c400  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildFooterView
    // 0x91c2a0: mov             x1, x0
    // 0x91c2a4: ldur            x0, [fp, #-0x20]
    // 0x91c2a8: stur            x1, [fp, #-0x18]
    // 0x91c2ac: LoadField: r2 = r0->field_b
    //     0x91c2ac: ldur            w2, [x0, #0xb]
    // 0x91c2b0: DecompressPointer r2
    //     0x91c2b0: add             x2, x2, HEAP, lsl #32
    // 0x91c2b4: stur            x2, [fp, #-0x10]
    // 0x91c2b8: LoadField: r3 = r0->field_f
    //     0x91c2b8: ldur            w3, [x0, #0xf]
    // 0x91c2bc: DecompressPointer r3
    //     0x91c2bc: add             x3, x3, HEAP, lsl #32
    // 0x91c2c0: LoadField: r4 = r3->field_b
    //     0x91c2c0: ldur            w4, [x3, #0xb]
    // 0x91c2c4: DecompressPointer r4
    //     0x91c2c4: add             x4, x4, HEAP, lsl #32
    // 0x91c2c8: cmp             w2, w4
    // 0x91c2cc: b.ne            #0x91c2d8
    // 0x91c2d0: str             x0, [SP]
    // 0x91c2d4: r0 = _growToNextCapacity()
    //     0x91c2d4: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x91c2d8: ldur            x2, [fp, #-0x20]
    // 0x91c2dc: ldur            x0, [fp, #-0x10]
    // 0x91c2e0: r3 = LoadInt32Instr(r0)
    //     0x91c2e0: sbfx            x3, x0, #1, #0x1f
    // 0x91c2e4: add             x4, x3, #1
    // 0x91c2e8: lsl             x0, x4, #1
    // 0x91c2ec: StoreField: r2->field_b = r0
    //     0x91c2ec: stur            w0, [x2, #0xb]
    // 0x91c2f0: mov             x0, x4
    // 0x91c2f4: mov             x1, x3
    // 0x91c2f8: cmp             x1, x0
    // 0x91c2fc: b.hs            #0x91c3f8
    // 0x91c300: LoadField: r1 = r2->field_f
    //     0x91c300: ldur            w1, [x2, #0xf]
    // 0x91c304: DecompressPointer r1
    //     0x91c304: add             x1, x1, HEAP, lsl #32
    // 0x91c308: ldur            x0, [fp, #-0x18]
    // 0x91c30c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x91c30c: add             x25, x1, x3, lsl #2
    //     0x91c310: add             x25, x25, #0xf
    //     0x91c314: str             w0, [x25]
    //     0x91c318: tbz             w0, #0, #0x91c334
    //     0x91c31c: ldurb           w16, [x1, #-1]
    //     0x91c320: ldurb           w17, [x0, #-1]
    //     0x91c324: and             x16, x17, x16, lsr #2
    //     0x91c328: tst             x16, HEAP, lsr #32
    //     0x91c32c: b.eq            #0x91c334
    //     0x91c330: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x91c334: mov             x0, x4
    // 0x91c338: b               #0x91c340
    // 0x91c33c: mov             x0, x1
    // 0x91c340: lsl             x1, x0, #1
    // 0x91c344: cmp             w1, #2
    // 0x91c348: b.ne            #0x91c364
    // 0x91c34c: str             x2, [SP]
    // 0x91c350: r0 = clear()
    //     0x91c350: bl              #0x549f74  ; [dart:core] _GrowableList::clear
    // 0x91c354: ldur            x0, [fp, #-8]
    // 0x91c358: LeaveFrame
    //     0x91c358: mov             SP, fp
    //     0x91c35c: ldp             fp, lr, [SP], #0x10
    // 0x91c360: ret
    //     0x91c360: ret             
    // 0x91c364: ldr             x0, [fp, #0x18]
    // 0x91c368: LoadField: r1 = r0->field_b
    //     0x91c368: ldur            w1, [x0, #0xb]
    // 0x91c36c: DecompressPointer r1
    //     0x91c36c: add             x1, x1, HEAP, lsl #32
    // 0x91c370: cmp             w1, NULL
    // 0x91c374: b.eq            #0x91c3fc
    // 0x91c378: r0 = Stack()
    //     0x91c378: bl              #0x66ad20  ; AllocateStackStub -> Stack (size=0x20)
    // 0x91c37c: mov             x1, x0
    // 0x91c380: r0 = Instance_AlignmentDirectional
    //     0x91c380: add             x0, PP, #0x12, lsl #12  ; [pp+0x12238] Obj!AlignmentDirectional@c2f3a1
    //     0x91c384: ldr             x0, [x0, #0x238]
    // 0x91c388: stur            x1, [fp, #-8]
    // 0x91c38c: StoreField: r1->field_f = r0
    //     0x91c38c: stur            w0, [x1, #0xf]
    // 0x91c390: r0 = Instance_StackFit
    //     0x91c390: add             x0, PP, #0x12, lsl #12  ; [pp+0x12240] Obj!StackFit@c438d1
    //     0x91c394: ldr             x0, [x0, #0x240]
    // 0x91c398: ArrayStore: r1[0] = r0  ; List_4
    //     0x91c398: stur            w0, [x1, #0x17]
    // 0x91c39c: r0 = Instance_Clip
    //     0x91c39c: add             x0, PP, #0xe, lsl #12  ; [pp+0xe4a0] Obj!Clip@c47641
    //     0x91c3a0: ldr             x0, [x0, #0x4a0]
    // 0x91c3a4: StoreField: r1->field_1b = r0
    //     0x91c3a4: stur            w0, [x1, #0x1b]
    // 0x91c3a8: ldur            x0, [fp, #-0x20]
    // 0x91c3ac: StoreField: r1->field_b = r0
    //     0x91c3ac: stur            w0, [x1, #0xb]
    // 0x91c3b0: r0 = ClipPath()
    //     0x91c3b0: bl              #0x6132b0  ; AllocateClipPathStub -> ClipPath (size=0x18)
    // 0x91c3b4: r1 = Instance_Clip
    //     0x91c3b4: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0x91c3b8: ldr             x1, [x1, #0x438]
    // 0x91c3bc: StoreField: r0->field_13 = r1
    //     0x91c3bc: stur            w1, [x0, #0x13]
    // 0x91c3c0: ldur            x1, [fp, #-8]
    // 0x91c3c4: StoreField: r0->field_b = r1
    //     0x91c3c4: stur            w1, [x0, #0xb]
    // 0x91c3c8: LeaveFrame
    //     0x91c3c8: mov             SP, fp
    //     0x91c3cc: ldp             fp, lr, [SP], #0x10
    // 0x91c3d0: ret
    //     0x91c3d0: ret             
    // 0x91c3d4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c3d4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c3d8: b               #0x91bf60
    // 0x91c3dc: r9 = _data
    //     0x91c3dc: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91c3e0: ldr             x9, [x9, #0x240]
    // 0x91c3e4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91c3e4: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91c3e8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91c3e8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91c3ec: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91c3ec: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91c3f0: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91c3f0: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91c3f4: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91c3f4: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91c3f8: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x91c3f8: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x91c3fc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91c3fc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildFooterView(/* No info */) {
    // ** addr: 0x91c400, size: 0xb0
    // 0x91c400: EnterFrame
    //     0x91c400: stp             fp, lr, [SP, #-0x10]!
    //     0x91c404: mov             fp, SP
    // 0x91c408: AllocStack(0x20)
    //     0x91c408: sub             SP, SP, #0x20
    // 0x91c40c: CheckStackOverflow
    //     0x91c40c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c410: cmp             SP, x16
    //     0x91c414: b.ls            #0x91c49c
    // 0x91c418: r1 = 1
    //     0x91c418: movz            x1, #0x1
    // 0x91c41c: r0 = AllocateContext()
    //     0x91c41c: bl              #0xc5def4  ; AllocateContextStub
    // 0x91c420: mov             x1, x0
    // 0x91c424: ldr             x0, [fp, #0x10]
    // 0x91c428: stur            x1, [fp, #-8]
    // 0x91c42c: StoreField: r1->field_f = r0
    //     0x91c42c: stur            w0, [x1, #0xf]
    // 0x91c430: LoadField: r2 = r0->field_1f
    //     0x91c430: ldur            w2, [x0, #0x1f]
    // 0x91c434: DecompressPointer r2
    //     0x91c434: add             x2, x2, HEAP, lsl #32
    // 0x91c438: r16 = Sentinel
    //     0x91c438: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91c43c: cmp             w2, w16
    // 0x91c440: b.eq            #0x91c4a4
    // 0x91c444: LoadField: r0 = r2->field_b
    //     0x91c444: ldur            w0, [x2, #0xb]
    // 0x91c448: DecompressPointer r0
    //     0x91c448: add             x0, x0, HEAP, lsl #32
    // 0x91c44c: str             x0, [SP]
    // 0x91c450: r0 = listenable()
    //     0x91c450: bl              #0x91c4b0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::listenable
    // 0x91c454: r1 = <IndicatorNotifier>
    //     0x91c454: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a070] TypeArguments: <IndicatorNotifier>
    //     0x91c458: ldr             x1, [x1, #0x70]
    // 0x91c45c: stur            x0, [fp, #-0x10]
    // 0x91c460: r0 = ValueListenableBuilder()
    //     0x91c460: bl              #0x622940  ; AllocateValueListenableBuilderStub -> ValueListenableBuilder<X0> (size=0x1c)
    // 0x91c464: mov             x3, x0
    // 0x91c468: ldur            x0, [fp, #-0x10]
    // 0x91c46c: stur            x3, [fp, #-0x18]
    // 0x91c470: StoreField: r3->field_f = r0
    //     0x91c470: stur            w0, [x3, #0xf]
    // 0x91c474: ldur            x2, [fp, #-8]
    // 0x91c478: r1 = Function '<anonymous closure>':.
    //     0x91c478: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a078] AnonymousClosure: (0x91c514), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildFooterView (0x91c400)
    //     0x91c47c: ldr             x1, [x1, #0x78]
    // 0x91c480: r0 = AllocateClosure()
    //     0x91c480: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x91c484: mov             x1, x0
    // 0x91c488: ldur            x0, [fp, #-0x18]
    // 0x91c48c: StoreField: r0->field_13 = r1
    //     0x91c48c: stur            w1, [x0, #0x13]
    // 0x91c490: LeaveFrame
    //     0x91c490: mov             SP, fp
    //     0x91c494: ldp             fp, lr, [SP], #0x10
    // 0x91c498: ret
    //     0x91c498: ret             
    // 0x91c49c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c49c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c4a0: b               #0x91c418
    // 0x91c4a4: r9 = _data
    //     0x91c4a4: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91c4a8: ldr             x9, [x9, #0x240]
    // 0x91c4ac: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91c4ac: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] Widget <anonymous closure>(dynamic, BuildContext, Object?, Widget?) {
    // ** addr: 0x91c514, size: 0x2c8
    // 0x91c514: EnterFrame
    //     0x91c514: stp             fp, lr, [SP, #-0x10]!
    //     0x91c518: mov             fp, SP
    // 0x91c51c: AllocStack(0x30)
    //     0x91c51c: sub             SP, SP, #0x30
    // 0x91c520: SetupParameters()
    //     0x91c520: ldr             x0, [fp, #0x28]
    //     0x91c524: ldur            w1, [x0, #0x17]
    //     0x91c528: add             x1, x1, HEAP, lsl #32
    //     0x91c52c: stur            x1, [fp, #-0x18]
    // 0x91c530: CheckStackOverflow
    //     0x91c530: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c534: cmp             SP, x16
    //     0x91c538: b.ls            #0x91c794
    // 0x91c53c: LoadField: r0 = r1->field_f
    //     0x91c53c: ldur            w0, [x1, #0xf]
    // 0x91c540: DecompressPointer r0
    //     0x91c540: add             x0, x0, HEAP, lsl #32
    // 0x91c544: LoadField: r2 = r0->field_1f
    //     0x91c544: ldur            w2, [x0, #0x1f]
    // 0x91c548: DecompressPointer r2
    //     0x91c548: add             x2, x2, HEAP, lsl #32
    // 0x91c54c: r16 = Sentinel
    //     0x91c54c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91c550: cmp             w2, w16
    // 0x91c554: b.eq            #0x91c79c
    // 0x91c558: LoadField: r3 = r2->field_7
    //     0x91c558: ldur            w3, [x2, #7]
    // 0x91c55c: DecompressPointer r3
    //     0x91c55c: add             x3, x3, HEAP, lsl #32
    // 0x91c560: LoadField: r2 = r3->field_3f
    //     0x91c560: ldur            w2, [x3, #0x3f]
    // 0x91c564: DecompressPointer r2
    //     0x91c564: add             x2, x2, HEAP, lsl #32
    // 0x91c568: stur            x2, [fp, #-0x10]
    // 0x91c56c: cmp             w2, NULL
    // 0x91c570: b.eq            #0x91c588
    // 0x91c574: LoadField: r4 = r3->field_43
    //     0x91c574: ldur            w4, [x3, #0x43]
    // 0x91c578: DecompressPointer r4
    //     0x91c578: add             x4, x4, HEAP, lsl #32
    // 0x91c57c: stur            x4, [fp, #-8]
    // 0x91c580: cmp             w4, NULL
    // 0x91c584: b.ne            #0x91c59c
    // 0x91c588: r0 = Instance_SizedBox
    //     0x91c588: add             x0, PP, #0x1c, lsl #12  ; [pp+0x1cd50] Obj!SizedBox@c37c31
    //     0x91c58c: ldr             x0, [x0, #0xd50]
    // 0x91c590: LeaveFrame
    //     0x91c590: mov             SP, fp
    //     0x91c594: ldp             fp, lr, [SP], #0x10
    // 0x91c598: ret
    //     0x91c598: ret             
    // 0x91c59c: LoadField: r3 = r0->field_f
    //     0x91c59c: ldur            w3, [x0, #0xf]
    // 0x91c5a0: DecompressPointer r3
    //     0x91c5a0: add             x3, x3, HEAP, lsl #32
    // 0x91c5a4: cmp             w3, NULL
    // 0x91c5a8: b.eq            #0x91c7a8
    // 0x91c5ac: str             x3, [SP]
    // 0x91c5b0: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x91c5b0: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x91c5b4: r0 = _of()
    //     0x91c5b4: bl              #0x608b70  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::_of
    // 0x91c5b8: LoadField: r1 = r0->field_23
    //     0x91c5b8: ldur            w1, [x0, #0x23]
    // 0x91c5bc: DecompressPointer r1
    //     0x91c5bc: add             x1, x1, HEAP, lsl #32
    // 0x91c5c0: ldur            x0, [fp, #-0x18]
    // 0x91c5c4: LoadField: r2 = r0->field_f
    //     0x91c5c4: ldur            w2, [x0, #0xf]
    // 0x91c5c8: DecompressPointer r2
    //     0x91c5c8: add             x2, x2, HEAP, lsl #32
    // 0x91c5cc: LoadField: r0 = r2->field_1f
    //     0x91c5cc: ldur            w0, [x2, #0x1f]
    // 0x91c5d0: DecompressPointer r0
    //     0x91c5d0: add             x0, x0, HEAP, lsl #32
    // 0x91c5d4: r16 = Sentinel
    //     0x91c5d4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91c5d8: cmp             w0, w16
    // 0x91c5dc: b.eq            #0x91c7ac
    // 0x91c5e0: LoadField: r3 = r0->field_b
    //     0x91c5e0: ldur            w3, [x0, #0xb]
    // 0x91c5e4: DecompressPointer r3
    //     0x91c5e4: add             x3, x3, HEAP, lsl #32
    // 0x91c5e8: ldur            x4, [fp, #-0x10]
    // 0x91c5ec: r16 = Instance_Axis
    //     0x91c5ec: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91c5f0: cmp             w4, w16
    // 0x91c5f4: b.ne            #0x91c618
    // 0x91c5f8: ldur            x5, [fp, #-8]
    // 0x91c5fc: r16 = Instance_AxisDirection
    //     0x91c5fc: ldr             x16, [PP, #0x6a88]  ; [pp+0x6a88] Obj!AxisDirection@c44011
    // 0x91c600: cmp             w5, w16
    // 0x91c604: b.ne            #0x91c610
    // 0x91c608: LoadField: d0 = r1->field_1f
    //     0x91c608: ldur            d0, [x1, #0x1f]
    // 0x91c60c: b               #0x91c634
    // 0x91c610: LoadField: d0 = r1->field_f
    //     0x91c610: ldur            d0, [x1, #0xf]
    // 0x91c614: b               #0x91c634
    // 0x91c618: ldur            x5, [fp, #-8]
    // 0x91c61c: r16 = Instance_AxisDirection
    //     0x91c61c: ldr             x16, [PP, #0x6a90]  ; [pp+0x6a90] Obj!AxisDirection@c44051
    // 0x91c620: cmp             w5, w16
    // 0x91c624: b.ne            #0x91c630
    // 0x91c628: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x91c628: ldur            d0, [x1, #0x17]
    // 0x91c62c: b               #0x91c634
    // 0x91c630: LoadField: d0 = r1->field_7
    //     0x91c630: ldur            d0, [x1, #7]
    // 0x91c634: r0 = inline_Allocate_Double()
    //     0x91c634: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91c638: add             x0, x0, #0x10
    //     0x91c63c: cmp             x1, x0
    //     0x91c640: b.ls            #0x91c7b8
    //     0x91c644: str             x0, [THR, #0x50]  ; THR::top
    //     0x91c648: sub             x0, x0, #0xf
    //     0x91c64c: movz            x1, #0xd148
    //     0x91c650: movk            x1, #0x3, lsl #16
    //     0x91c654: stur            x1, [x0, #-1]
    // 0x91c658: StoreField: r0->field_7 = d0
    //     0x91c658: stur            d0, [x0, #7]
    // 0x91c65c: StoreField: r3->field_47 = r0
    //     0x91c65c: stur            w0, [x3, #0x47]
    //     0x91c660: ldurb           w16, [x3, #-1]
    //     0x91c664: ldurb           w17, [x0, #-1]
    //     0x91c668: and             x16, x17, x16, lsr #2
    //     0x91c66c: tst             x16, HEAP, lsr #32
    //     0x91c670: b.eq            #0x91c678
    //     0x91c674: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x91c678: r16 = Instance_Axis
    //     0x91c678: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91c67c: cmp             w4, w16
    // 0x91c680: b.ne            #0x91c6a0
    // 0x91c684: r16 = Instance_AxisDirection
    //     0x91c684: ldr             x16, [PP, #0x6a78]  ; [pp+0x6a78] Obj!AxisDirection@c44031
    // 0x91c688: cmp             w5, w16
    // 0x91c68c: b.ne            #0x91c698
    // 0x91c690: r0 = 0.000000
    //     0x91c690: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c694: b               #0x91c6a4
    // 0x91c698: r0 = Null
    //     0x91c698: mov             x0, NULL
    // 0x91c69c: b               #0x91c6a4
    // 0x91c6a0: r0 = 0.000000
    //     0x91c6a0: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c6a4: stur            x0, [fp, #-0x28]
    // 0x91c6a8: r16 = Instance_Axis
    //     0x91c6a8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91c6ac: cmp             w4, w16
    // 0x91c6b0: b.ne            #0x91c6d0
    // 0x91c6b4: r16 = Instance_AxisDirection
    //     0x91c6b4: ldr             x16, [PP, #0x6a88]  ; [pp+0x6a88] Obj!AxisDirection@c44011
    // 0x91c6b8: cmp             w5, w16
    // 0x91c6bc: b.ne            #0x91c6c8
    // 0x91c6c0: r1 = 0.000000
    //     0x91c6c0: ldr             x1, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c6c4: b               #0x91c6d4
    // 0x91c6c8: r1 = Null
    //     0x91c6c8: mov             x1, NULL
    // 0x91c6cc: b               #0x91c6d4
    // 0x91c6d0: r1 = 0.000000
    //     0x91c6d0: ldr             x1, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c6d4: stur            x1, [fp, #-0x20]
    // 0x91c6d8: r16 = Instance_Axis
    //     0x91c6d8: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91c6dc: cmp             w4, w16
    // 0x91c6e0: b.ne            #0x91c700
    // 0x91c6e4: r16 = Instance_AxisDirection
    //     0x91c6e4: ldr             x16, [PP, #0x6a80]  ; [pp+0x6a80] Obj!AxisDirection@c44071
    // 0x91c6e8: cmp             w5, w16
    // 0x91c6ec: b.ne            #0x91c6f8
    // 0x91c6f0: r6 = 0.000000
    //     0x91c6f0: ldr             x6, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c6f4: b               #0x91c704
    // 0x91c6f8: r6 = Null
    //     0x91c6f8: mov             x6, NULL
    // 0x91c6fc: b               #0x91c704
    // 0x91c700: r6 = 0.000000
    //     0x91c700: ldr             x6, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c704: stur            x6, [fp, #-0x18]
    // 0x91c708: r16 = Instance_Axis
    //     0x91c708: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91c70c: cmp             w4, w16
    // 0x91c710: b.ne            #0x91c730
    // 0x91c714: r16 = Instance_AxisDirection
    //     0x91c714: ldr             x16, [PP, #0x6a90]  ; [pp+0x6a90] Obj!AxisDirection@c44051
    // 0x91c718: cmp             w5, w16
    // 0x91c71c: b.ne            #0x91c728
    // 0x91c720: r4 = 0.000000
    //     0x91c720: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c724: b               #0x91c734
    // 0x91c728: r4 = Null
    //     0x91c728: mov             x4, NULL
    // 0x91c72c: b               #0x91c734
    // 0x91c730: r4 = 0.000000
    //     0x91c730: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91c734: stur            x4, [fp, #-8]
    // 0x91c738: LoadField: r5 = r2->field_f
    //     0x91c738: ldur            w5, [x2, #0xf]
    // 0x91c73c: DecompressPointer r5
    //     0x91c73c: add             x5, x5, HEAP, lsl #32
    // 0x91c740: cmp             w5, NULL
    // 0x91c744: b.eq            #0x91c7d8
    // 0x91c748: str             x3, [SP]
    // 0x91c74c: r0 = _build()
    //     0x91c74c: bl              #0x91c7dc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_build
    // 0x91c750: r1 = <StackParentData>
    //     0x91c750: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91c754: ldr             x1, [x1, #0x2b8]
    // 0x91c758: stur            x0, [fp, #-0x10]
    // 0x91c75c: r0 = Positioned()
    //     0x91c75c: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91c760: ldur            x1, [fp, #-0x18]
    // 0x91c764: StoreField: r0->field_13 = r1
    //     0x91c764: stur            w1, [x0, #0x13]
    // 0x91c768: ldur            x1, [fp, #-0x28]
    // 0x91c76c: ArrayStore: r0[0] = r1  ; List_4
    //     0x91c76c: stur            w1, [x0, #0x17]
    // 0x91c770: ldur            x1, [fp, #-8]
    // 0x91c774: StoreField: r0->field_1b = r1
    //     0x91c774: stur            w1, [x0, #0x1b]
    // 0x91c778: ldur            x1, [fp, #-0x20]
    // 0x91c77c: StoreField: r0->field_1f = r1
    //     0x91c77c: stur            w1, [x0, #0x1f]
    // 0x91c780: ldur            x1, [fp, #-0x10]
    // 0x91c784: StoreField: r0->field_b = r1
    //     0x91c784: stur            w1, [x0, #0xb]
    // 0x91c788: LeaveFrame
    //     0x91c788: mov             SP, fp
    //     0x91c78c: ldp             fp, lr, [SP], #0x10
    // 0x91c790: ret
    //     0x91c790: ret             
    // 0x91c794: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c794: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c798: b               #0x91c53c
    // 0x91c79c: r9 = _data
    //     0x91c79c: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91c7a0: ldr             x9, [x9, #0x240]
    // 0x91c7a4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91c7a4: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91c7a8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91c7a8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91c7ac: r9 = _data
    //     0x91c7ac: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91c7b0: ldr             x9, [x9, #0x240]
    // 0x91c7b4: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91c7b4: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91c7b8: SaveReg d0
    //     0x91c7b8: str             q0, [SP, #-0x10]!
    // 0x91c7bc: stp             x4, x5, [SP, #-0x10]!
    // 0x91c7c0: stp             x2, x3, [SP, #-0x10]!
    // 0x91c7c4: r0 = AllocateDouble()
    //     0x91c7c4: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91c7c8: ldp             x2, x3, [SP], #0x10
    // 0x91c7cc: ldp             x4, x5, [SP], #0x10
    // 0x91c7d0: RestoreReg d0
    //     0x91c7d0: ldr             q0, [SP], #0x10
    // 0x91c7d4: b               #0x91c658
    // 0x91c7d8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91c7d8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildHeaderView(/* No info */) {
    // ** addr: 0x91c9e4, size: 0xb0
    // 0x91c9e4: EnterFrame
    //     0x91c9e4: stp             fp, lr, [SP, #-0x10]!
    //     0x91c9e8: mov             fp, SP
    // 0x91c9ec: AllocStack(0x20)
    //     0x91c9ec: sub             SP, SP, #0x20
    // 0x91c9f0: CheckStackOverflow
    //     0x91c9f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c9f4: cmp             SP, x16
    //     0x91c9f8: b.ls            #0x91ca80
    // 0x91c9fc: r1 = 1
    //     0x91c9fc: movz            x1, #0x1
    // 0x91ca00: r0 = AllocateContext()
    //     0x91ca00: bl              #0xc5def4  ; AllocateContextStub
    // 0x91ca04: mov             x1, x0
    // 0x91ca08: ldr             x0, [fp, #0x10]
    // 0x91ca0c: stur            x1, [fp, #-8]
    // 0x91ca10: StoreField: r1->field_f = r0
    //     0x91ca10: stur            w0, [x1, #0xf]
    // 0x91ca14: LoadField: r2 = r0->field_1f
    //     0x91ca14: ldur            w2, [x0, #0x1f]
    // 0x91ca18: DecompressPointer r2
    //     0x91ca18: add             x2, x2, HEAP, lsl #32
    // 0x91ca1c: r16 = Sentinel
    //     0x91ca1c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91ca20: cmp             w2, w16
    // 0x91ca24: b.eq            #0x91ca88
    // 0x91ca28: LoadField: r0 = r2->field_7
    //     0x91ca28: ldur            w0, [x2, #7]
    // 0x91ca2c: DecompressPointer r0
    //     0x91ca2c: add             x0, x0, HEAP, lsl #32
    // 0x91ca30: str             x0, [SP]
    // 0x91ca34: r0 = listenable()
    //     0x91ca34: bl              #0x91c4b0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::listenable
    // 0x91ca38: r1 = <IndicatorNotifier>
    //     0x91ca38: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a070] TypeArguments: <IndicatorNotifier>
    //     0x91ca3c: ldr             x1, [x1, #0x70]
    // 0x91ca40: stur            x0, [fp, #-0x10]
    // 0x91ca44: r0 = ValueListenableBuilder()
    //     0x91ca44: bl              #0x622940  ; AllocateValueListenableBuilderStub -> ValueListenableBuilder<X0> (size=0x1c)
    // 0x91ca48: mov             x3, x0
    // 0x91ca4c: ldur            x0, [fp, #-0x10]
    // 0x91ca50: stur            x3, [fp, #-0x18]
    // 0x91ca54: StoreField: r3->field_f = r0
    //     0x91ca54: stur            w0, [x3, #0xf]
    // 0x91ca58: ldur            x2, [fp, #-8]
    // 0x91ca5c: r1 = Function '<anonymous closure>':.
    //     0x91ca5c: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a080] AnonymousClosure: (0x91ca94), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_buildHeaderView (0x91c9e4)
    //     0x91ca60: ldr             x1, [x1, #0x80]
    // 0x91ca64: r0 = AllocateClosure()
    //     0x91ca64: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x91ca68: mov             x1, x0
    // 0x91ca6c: ldur            x0, [fp, #-0x18]
    // 0x91ca70: StoreField: r0->field_13 = r1
    //     0x91ca70: stur            w1, [x0, #0x13]
    // 0x91ca74: LeaveFrame
    //     0x91ca74: mov             SP, fp
    //     0x91ca78: ldp             fp, lr, [SP], #0x10
    // 0x91ca7c: ret
    //     0x91ca7c: ret             
    // 0x91ca80: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91ca80: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91ca84: b               #0x91c9fc
    // 0x91ca88: r9 = _data
    //     0x91ca88: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91ca8c: ldr             x9, [x9, #0x240]
    // 0x91ca90: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91ca90: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] Widget <anonymous closure>(dynamic, BuildContext, Object?, Widget?) {
    // ** addr: 0x91ca94, size: 0x2c8
    // 0x91ca94: EnterFrame
    //     0x91ca94: stp             fp, lr, [SP, #-0x10]!
    //     0x91ca98: mov             fp, SP
    // 0x91ca9c: AllocStack(0x30)
    //     0x91ca9c: sub             SP, SP, #0x30
    // 0x91caa0: SetupParameters()
    //     0x91caa0: ldr             x0, [fp, #0x28]
    //     0x91caa4: ldur            w1, [x0, #0x17]
    //     0x91caa8: add             x1, x1, HEAP, lsl #32
    //     0x91caac: stur            x1, [fp, #-0x18]
    // 0x91cab0: CheckStackOverflow
    //     0x91cab0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91cab4: cmp             SP, x16
    //     0x91cab8: b.ls            #0x91cd14
    // 0x91cabc: LoadField: r0 = r1->field_f
    //     0x91cabc: ldur            w0, [x1, #0xf]
    // 0x91cac0: DecompressPointer r0
    //     0x91cac0: add             x0, x0, HEAP, lsl #32
    // 0x91cac4: LoadField: r2 = r0->field_1f
    //     0x91cac4: ldur            w2, [x0, #0x1f]
    // 0x91cac8: DecompressPointer r2
    //     0x91cac8: add             x2, x2, HEAP, lsl #32
    // 0x91cacc: r16 = Sentinel
    //     0x91cacc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91cad0: cmp             w2, w16
    // 0x91cad4: b.eq            #0x91cd1c
    // 0x91cad8: LoadField: r3 = r2->field_7
    //     0x91cad8: ldur            w3, [x2, #7]
    // 0x91cadc: DecompressPointer r3
    //     0x91cadc: add             x3, x3, HEAP, lsl #32
    // 0x91cae0: LoadField: r2 = r3->field_3f
    //     0x91cae0: ldur            w2, [x3, #0x3f]
    // 0x91cae4: DecompressPointer r2
    //     0x91cae4: add             x2, x2, HEAP, lsl #32
    // 0x91cae8: stur            x2, [fp, #-0x10]
    // 0x91caec: cmp             w2, NULL
    // 0x91caf0: b.eq            #0x91cb08
    // 0x91caf4: LoadField: r4 = r3->field_43
    //     0x91caf4: ldur            w4, [x3, #0x43]
    // 0x91caf8: DecompressPointer r4
    //     0x91caf8: add             x4, x4, HEAP, lsl #32
    // 0x91cafc: stur            x4, [fp, #-8]
    // 0x91cb00: cmp             w4, NULL
    // 0x91cb04: b.ne            #0x91cb1c
    // 0x91cb08: r0 = Instance_SizedBox
    //     0x91cb08: add             x0, PP, #0x1c, lsl #12  ; [pp+0x1cd50] Obj!SizedBox@c37c31
    //     0x91cb0c: ldr             x0, [x0, #0xd50]
    // 0x91cb10: LeaveFrame
    //     0x91cb10: mov             SP, fp
    //     0x91cb14: ldp             fp, lr, [SP], #0x10
    // 0x91cb18: ret
    //     0x91cb18: ret             
    // 0x91cb1c: LoadField: r3 = r0->field_f
    //     0x91cb1c: ldur            w3, [x0, #0xf]
    // 0x91cb20: DecompressPointer r3
    //     0x91cb20: add             x3, x3, HEAP, lsl #32
    // 0x91cb24: cmp             w3, NULL
    // 0x91cb28: b.eq            #0x91cd28
    // 0x91cb2c: str             x3, [SP]
    // 0x91cb30: r4 = const [0, 0x1, 0x1, 0x1, null]
    //     0x91cb30: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    // 0x91cb34: r0 = _of()
    //     0x91cb34: bl              #0x608b70  ; [package:flutter/src/widgets/media_query.dart] MediaQuery::_of
    // 0x91cb38: LoadField: r1 = r0->field_23
    //     0x91cb38: ldur            w1, [x0, #0x23]
    // 0x91cb3c: DecompressPointer r1
    //     0x91cb3c: add             x1, x1, HEAP, lsl #32
    // 0x91cb40: ldur            x0, [fp, #-0x18]
    // 0x91cb44: LoadField: r2 = r0->field_f
    //     0x91cb44: ldur            w2, [x0, #0xf]
    // 0x91cb48: DecompressPointer r2
    //     0x91cb48: add             x2, x2, HEAP, lsl #32
    // 0x91cb4c: LoadField: r0 = r2->field_1f
    //     0x91cb4c: ldur            w0, [x2, #0x1f]
    // 0x91cb50: DecompressPointer r0
    //     0x91cb50: add             x0, x0, HEAP, lsl #32
    // 0x91cb54: r16 = Sentinel
    //     0x91cb54: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91cb58: cmp             w0, w16
    // 0x91cb5c: b.eq            #0x91cd2c
    // 0x91cb60: LoadField: r3 = r0->field_7
    //     0x91cb60: ldur            w3, [x0, #7]
    // 0x91cb64: DecompressPointer r3
    //     0x91cb64: add             x3, x3, HEAP, lsl #32
    // 0x91cb68: ldur            x4, [fp, #-0x10]
    // 0x91cb6c: r16 = Instance_Axis
    //     0x91cb6c: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91cb70: cmp             w4, w16
    // 0x91cb74: b.ne            #0x91cb98
    // 0x91cb78: ldur            x5, [fp, #-8]
    // 0x91cb7c: r16 = Instance_AxisDirection
    //     0x91cb7c: ldr             x16, [PP, #0x6a88]  ; [pp+0x6a88] Obj!AxisDirection@c44011
    // 0x91cb80: cmp             w5, w16
    // 0x91cb84: b.ne            #0x91cb90
    // 0x91cb88: LoadField: d0 = r1->field_f
    //     0x91cb88: ldur            d0, [x1, #0xf]
    // 0x91cb8c: b               #0x91cbb4
    // 0x91cb90: LoadField: d0 = r1->field_1f
    //     0x91cb90: ldur            d0, [x1, #0x1f]
    // 0x91cb94: b               #0x91cbb4
    // 0x91cb98: ldur            x5, [fp, #-8]
    // 0x91cb9c: r16 = Instance_AxisDirection
    //     0x91cb9c: ldr             x16, [PP, #0x6a90]  ; [pp+0x6a90] Obj!AxisDirection@c44051
    // 0x91cba0: cmp             w5, w16
    // 0x91cba4: b.ne            #0x91cbb0
    // 0x91cba8: LoadField: d0 = r1->field_7
    //     0x91cba8: ldur            d0, [x1, #7]
    // 0x91cbac: b               #0x91cbb4
    // 0x91cbb0: ArrayLoad: d0 = r1[0]  ; List_8
    //     0x91cbb0: ldur            d0, [x1, #0x17]
    // 0x91cbb4: r0 = inline_Allocate_Double()
    //     0x91cbb4: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x91cbb8: add             x0, x0, #0x10
    //     0x91cbbc: cmp             x1, x0
    //     0x91cbc0: b.ls            #0x91cd38
    //     0x91cbc4: str             x0, [THR, #0x50]  ; THR::top
    //     0x91cbc8: sub             x0, x0, #0xf
    //     0x91cbcc: movz            x1, #0xd148
    //     0x91cbd0: movk            x1, #0x3, lsl #16
    //     0x91cbd4: stur            x1, [x0, #-1]
    // 0x91cbd8: StoreField: r0->field_7 = d0
    //     0x91cbd8: stur            d0, [x0, #7]
    // 0x91cbdc: StoreField: r3->field_47 = r0
    //     0x91cbdc: stur            w0, [x3, #0x47]
    //     0x91cbe0: ldurb           w16, [x3, #-1]
    //     0x91cbe4: ldurb           w17, [x0, #-1]
    //     0x91cbe8: and             x16, x17, x16, lsr #2
    //     0x91cbec: tst             x16, HEAP, lsr #32
    //     0x91cbf0: b.eq            #0x91cbf8
    //     0x91cbf4: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0x91cbf8: r16 = Instance_Axis
    //     0x91cbf8: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91cbfc: cmp             w4, w16
    // 0x91cc00: b.ne            #0x91cc20
    // 0x91cc04: r16 = Instance_AxisDirection
    //     0x91cc04: ldr             x16, [PP, #0x6a88]  ; [pp+0x6a88] Obj!AxisDirection@c44011
    // 0x91cc08: cmp             w5, w16
    // 0x91cc0c: b.ne            #0x91cc18
    // 0x91cc10: r0 = 0.000000
    //     0x91cc10: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc14: b               #0x91cc24
    // 0x91cc18: r0 = Null
    //     0x91cc18: mov             x0, NULL
    // 0x91cc1c: b               #0x91cc24
    // 0x91cc20: r0 = 0.000000
    //     0x91cc20: ldr             x0, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc24: stur            x0, [fp, #-0x28]
    // 0x91cc28: r16 = Instance_Axis
    //     0x91cc28: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x91cc2c: cmp             w4, w16
    // 0x91cc30: b.ne            #0x91cc50
    // 0x91cc34: r16 = Instance_AxisDirection
    //     0x91cc34: ldr             x16, [PP, #0x6a78]  ; [pp+0x6a78] Obj!AxisDirection@c44031
    // 0x91cc38: cmp             w5, w16
    // 0x91cc3c: b.ne            #0x91cc48
    // 0x91cc40: r1 = 0.000000
    //     0x91cc40: ldr             x1, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc44: b               #0x91cc54
    // 0x91cc48: r1 = Null
    //     0x91cc48: mov             x1, NULL
    // 0x91cc4c: b               #0x91cc54
    // 0x91cc50: r1 = 0.000000
    //     0x91cc50: ldr             x1, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc54: stur            x1, [fp, #-0x20]
    // 0x91cc58: r16 = Instance_Axis
    //     0x91cc58: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91cc5c: cmp             w4, w16
    // 0x91cc60: b.ne            #0x91cc80
    // 0x91cc64: r16 = Instance_AxisDirection
    //     0x91cc64: ldr             x16, [PP, #0x6a90]  ; [pp+0x6a90] Obj!AxisDirection@c44051
    // 0x91cc68: cmp             w5, w16
    // 0x91cc6c: b.ne            #0x91cc78
    // 0x91cc70: r6 = 0.000000
    //     0x91cc70: ldr             x6, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc74: b               #0x91cc84
    // 0x91cc78: r6 = Null
    //     0x91cc78: mov             x6, NULL
    // 0x91cc7c: b               #0x91cc84
    // 0x91cc80: r6 = 0.000000
    //     0x91cc80: ldr             x6, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cc84: stur            x6, [fp, #-0x18]
    // 0x91cc88: r16 = Instance_Axis
    //     0x91cc88: ldr             x16, [PP, #0x5d20]  ; [pp+0x5d20] Obj!Axis@c440d1
    // 0x91cc8c: cmp             w4, w16
    // 0x91cc90: b.ne            #0x91ccb0
    // 0x91cc94: r16 = Instance_AxisDirection
    //     0x91cc94: ldr             x16, [PP, #0x6a80]  ; [pp+0x6a80] Obj!AxisDirection@c44071
    // 0x91cc98: cmp             w5, w16
    // 0x91cc9c: b.ne            #0x91cca8
    // 0x91cca0: r4 = 0.000000
    //     0x91cca0: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91cca4: b               #0x91ccb4
    // 0x91cca8: r4 = Null
    //     0x91cca8: mov             x4, NULL
    // 0x91ccac: b               #0x91ccb4
    // 0x91ccb0: r4 = 0.000000
    //     0x91ccb0: ldr             x4, [PP, #0x5c38]  ; [pp+0x5c38] 0
    // 0x91ccb4: stur            x4, [fp, #-8]
    // 0x91ccb8: LoadField: r5 = r2->field_f
    //     0x91ccb8: ldur            w5, [x2, #0xf]
    // 0x91ccbc: DecompressPointer r5
    //     0x91ccbc: add             x5, x5, HEAP, lsl #32
    // 0x91ccc0: cmp             w5, NULL
    // 0x91ccc4: b.eq            #0x91cd58
    // 0x91ccc8: str             x3, [SP]
    // 0x91cccc: r0 = _build()
    //     0x91cccc: bl              #0x91c7dc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_build
    // 0x91ccd0: r1 = <StackParentData>
    //     0x91ccd0: add             x1, PP, #0x1c, lsl #12  ; [pp+0x1c2b8] TypeArguments: <StackParentData>
    //     0x91ccd4: ldr             x1, [x1, #0x2b8]
    // 0x91ccd8: stur            x0, [fp, #-0x10]
    // 0x91ccdc: r0 = Positioned()
    //     0x91ccdc: bl              #0x66ad2c  ; AllocatePositionedStub -> Positioned (size=0x2c)
    // 0x91cce0: ldur            x1, [fp, #-0x18]
    // 0x91cce4: StoreField: r0->field_13 = r1
    //     0x91cce4: stur            w1, [x0, #0x13]
    // 0x91cce8: ldur            x1, [fp, #-0x28]
    // 0x91ccec: ArrayStore: r0[0] = r1  ; List_4
    //     0x91ccec: stur            w1, [x0, #0x17]
    // 0x91ccf0: ldur            x1, [fp, #-8]
    // 0x91ccf4: StoreField: r0->field_1b = r1
    //     0x91ccf4: stur            w1, [x0, #0x1b]
    // 0x91ccf8: ldur            x1, [fp, #-0x20]
    // 0x91ccfc: StoreField: r0->field_1f = r1
    //     0x91ccfc: stur            w1, [x0, #0x1f]
    // 0x91cd00: ldur            x1, [fp, #-0x10]
    // 0x91cd04: StoreField: r0->field_b = r1
    //     0x91cd04: stur            w1, [x0, #0xb]
    // 0x91cd08: LeaveFrame
    //     0x91cd08: mov             SP, fp
    //     0x91cd0c: ldp             fp, lr, [SP], #0x10
    // 0x91cd10: ret
    //     0x91cd10: ret             
    // 0x91cd14: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91cd14: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91cd18: b               #0x91cabc
    // 0x91cd1c: r9 = _data
    //     0x91cd1c: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91cd20: ldr             x9, [x9, #0x240]
    // 0x91cd24: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91cd24: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91cd28: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91cd28: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91cd2c: r9 = _data
    //     0x91cd2c: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91cd30: ldr             x9, [x9, #0x240]
    // 0x91cd34: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91cd34: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91cd38: SaveReg d0
    //     0x91cd38: str             q0, [SP, #-0x10]!
    // 0x91cd3c: stp             x4, x5, [SP, #-0x10]!
    // 0x91cd40: stp             x2, x3, [SP, #-0x10]!
    // 0x91cd44: r0 = AllocateDouble()
    //     0x91cd44: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x91cd48: ldp             x2, x3, [SP], #0x10
    // 0x91cd4c: ldp             x4, x5, [SP], #0x10
    // 0x91cd50: RestoreReg d0
    //     0x91cd50: ldr             q0, [SP], #0x10
    // 0x91cd54: b               #0x91cbd8
    // 0x91cd58: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91cd58: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _buildContent(/* No info */) {
    // ** addr: 0x91cd5c, size: 0x138
    // 0x91cd5c: EnterFrame
    //     0x91cd5c: stp             fp, lr, [SP, #-0x10]!
    //     0x91cd60: mov             fp, SP
    // 0x91cd64: AllocStack(0x30)
    //     0x91cd64: sub             SP, SP, #0x30
    // 0x91cd68: CheckStackOverflow
    //     0x91cd68: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91cd6c: cmp             SP, x16
    //     0x91cd70: b.ls            #0x91ce64
    // 0x91cd74: ldr             x0, [fp, #0x10]
    // 0x91cd78: LoadField: r1 = r0->field_b
    //     0x91cd78: ldur            w1, [x0, #0xb]
    // 0x91cd7c: DecompressPointer r1
    //     0x91cd7c: add             x1, x1, HEAP, lsl #32
    // 0x91cd80: cmp             w1, NULL
    // 0x91cd84: b.eq            #0x91ce6c
    // 0x91cd88: str             x0, [SP]
    // 0x91cd8c: r0 = _scrollBehaviorBuilder()
    //     0x91cd8c: bl              #0x91ceac  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_scrollBehaviorBuilder
    // 0x91cd90: stp             NULL, x0, [SP]
    // 0x91cd94: ClosureCall
    //     0x91cd94: ldr             x4, [PP, #0x198]  ; [pp+0x198] List(5) [0, 0x2, 0x2, 0x2, Null]
    //     0x91cd98: ldur            x2, [x0, #0x1f]
    //     0x91cd9c: blr             x2
    // 0x91cda0: mov             x2, x0
    // 0x91cda4: ldr             x1, [fp, #0x10]
    // 0x91cda8: stur            x2, [fp, #-8]
    // 0x91cdac: LoadField: r0 = r1->field_b
    //     0x91cdac: ldur            w0, [x1, #0xb]
    // 0x91cdb0: DecompressPointer r0
    //     0x91cdb0: add             x0, x0, HEAP, lsl #32
    // 0x91cdb4: cmp             w0, NULL
    // 0x91cdb8: b.eq            #0x91ce70
    // 0x91cdbc: LoadField: r3 = r0->field_1b
    //     0x91cdbc: ldur            w3, [x0, #0x1b]
    // 0x91cdc0: DecompressPointer r3
    //     0x91cdc0: add             x3, x3, HEAP, lsl #32
    // 0x91cdc4: LoadField: r0 = r1->field_f
    //     0x91cdc4: ldur            w0, [x1, #0xf]
    // 0x91cdc8: DecompressPointer r0
    //     0x91cdc8: add             x0, x0, HEAP, lsl #32
    // 0x91cdcc: cmp             w0, NULL
    // 0x91cdd0: b.eq            #0x91ce74
    // 0x91cdd4: LoadField: r4 = r1->field_1b
    //     0x91cdd4: ldur            w4, [x1, #0x1b]
    // 0x91cdd8: DecompressPointer r4
    //     0x91cdd8: add             x4, x4, HEAP, lsl #32
    // 0x91cddc: r16 = Sentinel
    //     0x91cddc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91cde0: cmp             w4, w16
    // 0x91cde4: b.eq            #0x91ce78
    // 0x91cde8: cmp             w3, NULL
    // 0x91cdec: b.eq            #0x91ce84
    // 0x91cdf0: stp             x0, x3, [SP, #8]
    // 0x91cdf4: str             x4, [SP]
    // 0x91cdf8: mov             x0, x3
    // 0x91cdfc: ClosureCall
    //     0x91cdfc: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x91ce00: ldur            x2, [x0, #0x1f]
    //     0x91ce04: blr             x2
    // 0x91ce08: stur            x0, [fp, #-0x10]
    // 0x91ce0c: r0 = ScrollConfiguration()
    //     0x91ce0c: bl              #0x91cea0  ; AllocateScrollConfigurationStub -> ScrollConfiguration (size=0x14)
    // 0x91ce10: mov             x1, x0
    // 0x91ce14: ldur            x0, [fp, #-8]
    // 0x91ce18: stur            x1, [fp, #-0x18]
    // 0x91ce1c: StoreField: r1->field_f = r0
    //     0x91ce1c: stur            w0, [x1, #0xf]
    // 0x91ce20: ldur            x0, [fp, #-0x10]
    // 0x91ce24: StoreField: r1->field_b = r0
    //     0x91ce24: stur            w0, [x1, #0xb]
    // 0x91ce28: ldr             x0, [fp, #0x10]
    // 0x91ce2c: LoadField: r2 = r0->field_1f
    //     0x91ce2c: ldur            w2, [x0, #0x1f]
    // 0x91ce30: DecompressPointer r2
    //     0x91ce30: add             x2, x2, HEAP, lsl #32
    // 0x91ce34: r16 = Sentinel
    //     0x91ce34: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0x91ce38: cmp             w2, w16
    // 0x91ce3c: b.eq            #0x91ce88
    // 0x91ce40: stur            x2, [fp, #-8]
    // 0x91ce44: r0 = _InheritedEasyRefresh()
    //     0x91ce44: bl              #0x91ce94  ; Allocate_InheritedEasyRefreshStub -> _InheritedEasyRefresh (size=0x14)
    // 0x91ce48: ldur            x1, [fp, #-8]
    // 0x91ce4c: StoreField: r0->field_f = r1
    //     0x91ce4c: stur            w1, [x0, #0xf]
    // 0x91ce50: ldur            x1, [fp, #-0x18]
    // 0x91ce54: StoreField: r0->field_b = r1
    //     0x91ce54: stur            w1, [x0, #0xb]
    // 0x91ce58: LeaveFrame
    //     0x91ce58: mov             SP, fp
    //     0x91ce5c: ldp             fp, lr, [SP], #0x10
    // 0x91ce60: ret
    //     0x91ce60: ret             
    // 0x91ce64: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91ce64: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91ce68: b               #0x91cd74
    // 0x91ce6c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ce6c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91ce70: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ce70: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91ce74: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91ce74: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x91ce78: r9 = _physics
    //     0x91ce78: add             x9, PP, #0x2a, lsl #12  ; [pp+0x2a088] Field <_EasyRefreshState@765089737._physics@765089737>: late (offset: 0x1c)
    //     0x91ce7c: ldr             x9, [x9, #0x88]
    // 0x91ce80: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91ce80: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0x91ce84: r0 = NullErrorSharedWithoutFPURegs()
    //     0x91ce84: bl              #0xc5f5e0  ; NullErrorSharedWithoutFPURegsStub
    // 0x91ce88: r9 = _data
    //     0x91ce88: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0x91ce8c: ldr             x9, [x9, #0x240]
    // 0x91ce90: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0x91ce90: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ _scrollBehaviorBuilder(/* No info */) {
    // ** addr: 0x91ceac, size: 0x60
    // 0x91ceac: EnterFrame
    //     0x91ceac: stp             fp, lr, [SP, #-0x10]!
    //     0x91ceb0: mov             fp, SP
    // 0x91ceb4: CheckStackOverflow
    //     0x91ceb4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91ceb8: cmp             SP, x16
    //     0x91cebc: b.ls            #0x91cf00
    // 0x91cec0: ldr             x0, [fp, #0x10]
    // 0x91cec4: LoadField: r1 = r0->field_b
    //     0x91cec4: ldur            w1, [x0, #0xb]
    // 0x91cec8: DecompressPointer r1
    //     0x91cec8: add             x1, x1, HEAP, lsl #32
    // 0x91cecc: cmp             w1, NULL
    // 0x91ced0: b.eq            #0x91cf08
    // 0x91ced4: r0 = InitLateStaticField(0x133c) // [package:easy_refresh/easy_refresh.dart] EasyRefresh::defaultScrollBehaviorBuilder
    //     0x91ced4: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x91ced8: ldr             x0, [x0, #0x2678]
    //     0x91cedc: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x91cee0: cmp             w0, w16
    //     0x91cee4: b.ne            #0x91cef4
    //     0x91cee8: add             x2, PP, #0x2a, lsl #12  ; [pp+0x2a090] Field <EasyRefresh.defaultScrollBehaviorBuilder>: static late (offset: 0x133c)
    //     0x91ceec: ldr             x2, [x2, #0x90]
    //     0x91cef0: bl              #0xc5d1c4  ; InitLateStaticFieldStub
    // 0x91cef4: LeaveFrame
    //     0x91cef4: mov             SP, fp
    //     0x91cef8: ldp             fp, lr, [SP], #0x10
    // 0x91cefc: ret
    //     0x91cefc: ret             
    // 0x91cf00: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91cf00: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91cf04: b               #0x91cec0
    // 0x91cf08: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91cf08: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ initState(/* No info */) {
    // ** addr: 0xa1cd38, size: 0x8c
    // 0xa1cd38: EnterFrame
    //     0xa1cd38: stp             fp, lr, [SP, #-0x10]!
    //     0xa1cd3c: mov             fp, SP
    // 0xa1cd40: AllocStack(0x8)
    //     0xa1cd40: sub             SP, SP, #8
    // 0xa1cd44: CheckStackOverflow
    //     0xa1cd44: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1cd48: cmp             SP, x16
    //     0xa1cd4c: b.ls            #0xa1cdb4
    // 0xa1cd50: ldr             x0, [fp, #0x10]
    // 0xa1cd54: LoadField: r1 = r0->field_b
    //     0xa1cd54: ldur            w1, [x0, #0xb]
    // 0xa1cd58: DecompressPointer r1
    //     0xa1cd58: add             x1, x1, HEAP, lsl #32
    // 0xa1cd5c: cmp             w1, NULL
    // 0xa1cd60: b.eq            #0xa1cdbc
    // 0xa1cd64: str             x0, [SP]
    // 0xa1cd68: r0 = _initData()
    //     0xa1cd68: bl              #0xa1cdc4  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_initData
    // 0xa1cd6c: ldr             x0, [fp, #0x10]
    // 0xa1cd70: LoadField: r1 = r0->field_b
    //     0xa1cd70: ldur            w1, [x0, #0xb]
    // 0xa1cd74: DecompressPointer r1
    //     0xa1cd74: add             x1, x1, HEAP, lsl #32
    // 0xa1cd78: cmp             w1, NULL
    // 0xa1cd7c: b.eq            #0xa1cdc0
    // 0xa1cd80: LoadField: r2 = r1->field_b
    //     0xa1cd80: ldur            w2, [x1, #0xb]
    // 0xa1cd84: DecompressPointer r2
    //     0xa1cd84: add             x2, x2, HEAP, lsl #32
    // 0xa1cd88: StoreField: r2->field_f = r0
    //     0xa1cd88: stur            w0, [x2, #0xf]
    //     0xa1cd8c: ldurb           w16, [x2, #-1]
    //     0xa1cd90: ldurb           w17, [x0, #-1]
    //     0xa1cd94: and             x16, x17, x16, lsr #2
    //     0xa1cd98: tst             x16, HEAP, lsr #32
    //     0xa1cd9c: b.eq            #0xa1cda4
    //     0xa1cda0: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0xa1cda4: r0 = Null
    //     0xa1cda4: mov             x0, NULL
    // 0xa1cda8: LeaveFrame
    //     0xa1cda8: mov             SP, fp
    //     0xa1cdac: ldp             fp, lr, [SP], #0x10
    // 0xa1cdb0: ret
    //     0xa1cdb0: ret             
    // 0xa1cdb4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1cdb4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1cdb8: b               #0xa1cd50
    // 0xa1cdbc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1cdbc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1cdc0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1cdc0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _initData(/* No info */) {
    // ** addr: 0xa1cdc4, size: 0x290
    // 0xa1cdc4: EnterFrame
    //     0xa1cdc4: stp             fp, lr, [SP, #-0x10]!
    //     0xa1cdc8: mov             fp, SP
    // 0xa1cdcc: AllocStack(0x70)
    //     0xa1cdcc: sub             SP, SP, #0x70
    // 0xa1cdd0: CheckStackOverflow
    //     0xa1cdd0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1cdd4: cmp             SP, x16
    //     0xa1cdd8: b.ls            #0xa1d03c
    // 0xa1cddc: r1 = 1
    //     0xa1cddc: movz            x1, #0x1
    // 0xa1cde0: r0 = AllocateContext()
    //     0xa1cde0: bl              #0xc5def4  ; AllocateContextStub
    // 0xa1cde4: mov             x2, x0
    // 0xa1cde8: ldr             x0, [fp, #0x10]
    // 0xa1cdec: stur            x2, [fp, #-8]
    // 0xa1cdf0: StoreField: r2->field_f = r0
    //     0xa1cdf0: stur            w0, [x2, #0xf]
    // 0xa1cdf4: r1 = <bool>
    //     0xa1cdf4: ldr             x1, [PP, #0x3af8]  ; [pp+0x3af8] TypeArguments: <bool>
    // 0xa1cdf8: r0 = ValueNotifier()
    //     0xa1cdf8: bl              #0x5b4170  ; AllocateValueNotifierStub -> ValueNotifier<X0> (size=0x2c)
    // 0xa1cdfc: mov             x1, x0
    // 0xa1ce00: r0 = false
    //     0xa1ce00: add             x0, NULL, #0x30  ; false
    // 0xa1ce04: stur            x1, [fp, #-0x10]
    // 0xa1ce08: StoreField: r1->field_27 = r0
    //     0xa1ce08: stur            w0, [x1, #0x27]
    // 0xa1ce0c: r0 = 0
    //     0xa1ce0c: movz            x0, #0
    // 0xa1ce10: StoreField: r1->field_7 = r0
    //     0xa1ce10: stur            x0, [x1, #7]
    // 0xa1ce14: StoreField: r1->field_13 = r0
    //     0xa1ce14: stur            x0, [x1, #0x13]
    // 0xa1ce18: StoreField: r1->field_1b = r0
    //     0xa1ce18: stur            x0, [x1, #0x1b]
    // 0xa1ce1c: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0xa1ce1c: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1ce20: ldr             x0, [x0, #0x1478]
    //     0xa1ce24: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1ce28: cmp             w0, w16
    //     0xa1ce2c: b.ne            #0xa1ce38
    //     0xa1ce30: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0xa1ce34: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa1ce38: mov             x1, x0
    // 0xa1ce3c: ldur            x0, [fp, #-0x10]
    // 0xa1ce40: StoreField: r0->field_f = r1
    //     0xa1ce40: stur            w1, [x0, #0xf]
    // 0xa1ce44: ldr             x1, [fp, #0x10]
    // 0xa1ce48: LoadField: r2 = r1->field_b
    //     0xa1ce48: ldur            w2, [x1, #0xb]
    // 0xa1ce4c: DecompressPointer r2
    //     0xa1ce4c: add             x2, x2, HEAP, lsl #32
    // 0xa1ce50: cmp             w2, NULL
    // 0xa1ce54: b.eq            #0xa1d044
    // 0xa1ce58: r0 = InitLateStaticField(0x1334) // [package:easy_refresh/easy_refresh.dart] EasyRefresh::defaultHeaderBuilder
    //     0xa1ce58: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1ce5c: ldr             x0, [x0, #0x2668]
    //     0xa1ce60: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1ce64: cmp             w0, w16
    //     0xa1ce68: b.ne            #0xa1ce78
    //     0xa1ce6c: add             x2, PP, #0x2a, lsl #12  ; [pp+0x2a0e8] Field <EasyRefresh.defaultHeaderBuilder>: static late (offset: 0x1334)
    //     0xa1ce70: ldr             x2, [x2, #0xe8]
    //     0xa1ce74: bl              #0xc5d1c4  ; InitLateStaticFieldStub
    // 0xa1ce78: str             x0, [SP]
    // 0xa1ce7c: ClosureCall
    //     0xa1ce7c: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0xa1ce80: ldur            x2, [x0, #0x1f]
    //     0xa1ce84: blr             x2
    // 0xa1ce88: stur            x0, [fp, #-0x18]
    // 0xa1ce8c: r1 = 1
    //     0xa1ce8c: movz            x1, #0x1
    // 0xa1ce90: r0 = AllocateContext()
    //     0xa1ce90: bl              #0xc5def4  ; AllocateContextStub
    // 0xa1ce94: mov             x1, x0
    // 0xa1ce98: ldr             x0, [fp, #0x10]
    // 0xa1ce9c: StoreField: r1->field_f = r0
    //     0xa1ce9c: stur            w0, [x1, #0xf]
    // 0xa1cea0: LoadField: r2 = r0->field_b
    //     0xa1cea0: ldur            w2, [x0, #0xb]
    // 0xa1cea4: DecompressPointer r2
    //     0xa1cea4: add             x2, x2, HEAP, lsl #32
    // 0xa1cea8: cmp             w2, NULL
    // 0xa1ceac: b.eq            #0xa1d048
    // 0xa1ceb0: mov             x2, x1
    // 0xa1ceb4: r1 = Function '<anonymous closure>':.
    //     0xa1ceb4: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0e0] AnonymousClosure: (0x8a9a70), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_onRefresh (0x8a9a24)
    //     0xa1ceb8: ldr             x1, [x1, #0xe0]
    // 0xa1cebc: r0 = AllocateClosure()
    //     0xa1cebc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1cec0: ldur            x2, [fp, #-8]
    // 0xa1cec4: r1 = Function '<anonymous closure>':.
    //     0xa1cec4: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0f0] AnonymousClosure: (0xa1d75c), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_initData (0xa1cdc4)
    //     0xa1cec8: ldr             x1, [x1, #0xf0]
    // 0xa1cecc: stur            x0, [fp, #-0x20]
    // 0xa1ced0: r0 = AllocateClosure()
    //     0xa1ced0: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1ced4: stur            x0, [fp, #-0x28]
    // 0xa1ced8: r0 = HeaderNotifier()
    //     0xa1ced8: bl              #0xa1d6d4  ; AllocateHeaderNotifierStub -> HeaderNotifier (size=0x8c)
    // 0xa1cedc: stur            x0, [fp, #-0x30]
    // 0xa1cee0: ldur            x16, [fp, #-0x18]
    // 0xa1cee4: stp             x16, x0, [SP, #0x20]
    // 0xa1cee8: ldur            x16, [fp, #-0x28]
    // 0xa1ceec: ldur            lr, [fp, #-0x20]
    // 0xa1cef0: stp             lr, x16, [SP, #0x10]
    // 0xa1cef4: ldur            x16, [fp, #-0x10]
    // 0xa1cef8: ldr             lr, [fp, #0x10]
    // 0xa1cefc: stp             lr, x16, [SP]
    // 0xa1cf00: r0 = HeaderNotifier()
    //     0xa1cf00: bl              #0xa1d674  ; [package:easy_refresh/easy_refresh.dart] HeaderNotifier::HeaderNotifier
    // 0xa1cf04: ldr             x16, [fp, #0x10]
    // 0xa1cf08: str             x16, [SP]
    // 0xa1cf0c: r0 = _footer()
    //     0xa1cf0c: bl              #0x8a97ec  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_footer
    // 0xa1cf10: mov             x3, x0
    // 0xa1cf14: ldr             x0, [fp, #0x10]
    // 0xa1cf18: stur            x3, [fp, #-0x28]
    // 0xa1cf1c: LoadField: r1 = r0->field_b
    //     0xa1cf1c: ldur            w1, [x0, #0xb]
    // 0xa1cf20: DecompressPointer r1
    //     0xa1cf20: add             x1, x1, HEAP, lsl #32
    // 0xa1cf24: cmp             w1, NULL
    // 0xa1cf28: b.eq            #0xa1d04c
    // 0xa1cf2c: LoadField: r4 = r1->field_23
    //     0xa1cf2c: ldur            w4, [x1, #0x23]
    // 0xa1cf30: DecompressPointer r4
    //     0xa1cf30: add             x4, x4, HEAP, lsl #32
    // 0xa1cf34: stur            x4, [fp, #-0x20]
    // 0xa1cf38: LoadField: r2 = r1->field_b
    //     0xa1cf38: ldur            w2, [x1, #0xb]
    // 0xa1cf3c: DecompressPointer r2
    //     0xa1cf3c: add             x2, x2, HEAP, lsl #32
    // 0xa1cf40: LoadField: r1 = r2->field_b
    //     0xa1cf40: ldur            w1, [x2, #0xb]
    // 0xa1cf44: DecompressPointer r1
    //     0xa1cf44: add             x1, x1, HEAP, lsl #32
    // 0xa1cf48: eor             x5, x1, #0x10
    // 0xa1cf4c: ldur            x2, [fp, #-8]
    // 0xa1cf50: stur            x5, [fp, #-0x18]
    // 0xa1cf54: r1 = Function '<anonymous closure>':.
    //     0xa1cf54: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0f8] AnonymousClosure: (0xa1d6e0), in [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_initData (0xa1cdc4)
    //     0xa1cf58: ldr             x1, [x1, #0xf8]
    // 0xa1cf5c: r0 = AllocateClosure()
    //     0xa1cf5c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1cf60: stur            x0, [fp, #-8]
    // 0xa1cf64: r0 = FooterNotifier()
    //     0xa1cf64: bl              #0xa1d668  ; AllocateFooterNotifierStub -> FooterNotifier (size=0x8c)
    // 0xa1cf68: stur            x0, [fp, #-0x38]
    // 0xa1cf6c: ldur            x16, [fp, #-0x28]
    // 0xa1cf70: stp             x16, x0, [SP, #0x28]
    // 0xa1cf74: ldur            x16, [fp, #-8]
    // 0xa1cf78: ldur            lr, [fp, #-0x20]
    // 0xa1cf7c: stp             lr, x16, [SP, #0x18]
    // 0xa1cf80: ldur            x16, [fp, #-0x10]
    // 0xa1cf84: ldr             lr, [fp, #0x10]
    // 0xa1cf88: stp             lr, x16, [SP, #8]
    // 0xa1cf8c: ldur            x16, [fp, #-0x18]
    // 0xa1cf90: str             x16, [SP]
    // 0xa1cf94: r0 = IndicatorNotifier()
    //     0xa1cf94: bl              #0xa1d3c8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::IndicatorNotifier
    // 0xa1cf98: r0 = EasyRefreshData()
    //     0xa1cf98: bl              #0xa1d3bc  ; AllocateEasyRefreshDataStub -> EasyRefreshData (size=0x14)
    // 0xa1cf9c: ldur            x1, [fp, #-0x30]
    // 0xa1cfa0: StoreField: r0->field_7 = r1
    //     0xa1cfa0: stur            w1, [x0, #7]
    // 0xa1cfa4: ldur            x2, [fp, #-0x38]
    // 0xa1cfa8: StoreField: r0->field_b = r2
    //     0xa1cfa8: stur            w2, [x0, #0xb]
    // 0xa1cfac: ldur            x3, [fp, #-0x10]
    // 0xa1cfb0: StoreField: r0->field_f = r3
    //     0xa1cfb0: stur            w3, [x0, #0xf]
    // 0xa1cfb4: ldr             x4, [fp, #0x10]
    // 0xa1cfb8: StoreField: r4->field_1f = r0
    //     0xa1cfb8: stur            w0, [x4, #0x1f]
    //     0xa1cfbc: ldurb           w16, [x4, #-1]
    //     0xa1cfc0: ldurb           w17, [x0, #-1]
    //     0xa1cfc4: and             x16, x17, x16, lsr #2
    //     0xa1cfc8: tst             x16, HEAP, lsr #32
    //     0xa1cfcc: b.eq            #0xa1cfd4
    //     0xa1cfd0: bl              #0xc5d75c  ; WriteBarrierWrappersStub
    // 0xa1cfd4: LoadField: r0 = r4->field_b
    //     0xa1cfd4: ldur            w0, [x4, #0xb]
    // 0xa1cfd8: DecompressPointer r0
    //     0xa1cfd8: add             x0, x0, HEAP, lsl #32
    // 0xa1cfdc: cmp             w0, NULL
    // 0xa1cfe0: b.eq            #0xa1d050
    // 0xa1cfe4: r0 = _ERScrollPhysics()
    //     0xa1cfe4: bl              #0xa1d3b0  ; Allocate_ERScrollPhysicsStub -> _ERScrollPhysics (size=0x2c)
    // 0xa1cfe8: stur            x0, [fp, #-8]
    // 0xa1cfec: ldur            x16, [fp, #-0x38]
    // 0xa1cff0: stp             x16, x0, [SP, #0x10]
    // 0xa1cff4: ldur            x16, [fp, #-0x30]
    // 0xa1cff8: ldur            lr, [fp, #-0x10]
    // 0xa1cffc: stp             lr, x16, [SP]
    // 0xa1d000: r4 = const [0, 0x4, 0x4, 0x4, null]
    //     0xa1d000: ldr             x4, [PP, #0x1d8]  ; [pp+0x1d8] List(5) [0, 0x4, 0x4, 0x4, Null]
    // 0xa1d004: r0 = _ERScrollPhysics()
    //     0xa1d004: bl              #0xa1d054  ; [package:easy_refresh/easy_refresh.dart] _ERScrollPhysics::_ERScrollPhysics
    // 0xa1d008: ldur            x0, [fp, #-8]
    // 0xa1d00c: ldr             x1, [fp, #0x10]
    // 0xa1d010: StoreField: r1->field_1b = r0
    //     0xa1d010: stur            w0, [x1, #0x1b]
    //     0xa1d014: ldurb           w16, [x1, #-1]
    //     0xa1d018: ldurb           w17, [x0, #-1]
    //     0xa1d01c: and             x16, x17, x16, lsr #2
    //     0xa1d020: tst             x16, HEAP, lsr #32
    //     0xa1d024: b.eq            #0xa1d02c
    //     0xa1d028: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d02c: r0 = Null
    //     0xa1d02c: mov             x0, NULL
    // 0xa1d030: LeaveFrame
    //     0xa1d030: mov             SP, fp
    //     0xa1d034: ldp             fp, lr, [SP], #0x10
    // 0xa1d038: ret
    //     0xa1d038: ret             
    // 0xa1d03c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d03c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d040: b               #0xa1cddc
    // 0xa1d044: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d044: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1d048: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d048: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1d04c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d04c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1d050: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d050: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  [closure] bool <anonymous closure>(dynamic) {
    // ** addr: 0xa1d6e0, size: 0x7c
    // 0xa1d6e0: EnterFrame
    //     0xa1d6e0: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d6e4: mov             fp, SP
    // 0xa1d6e8: ldr             x1, [fp, #0x10]
    // 0xa1d6ec: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xa1d6ec: ldur            w2, [x1, #0x17]
    // 0xa1d6f0: DecompressPointer r2
    //     0xa1d6f0: add             x2, x2, HEAP, lsl #32
    // 0xa1d6f4: LoadField: r1 = r2->field_f
    //     0xa1d6f4: ldur            w1, [x2, #0xf]
    // 0xa1d6f8: DecompressPointer r1
    //     0xa1d6f8: add             x1, x1, HEAP, lsl #32
    // 0xa1d6fc: LoadField: r2 = r1->field_b
    //     0xa1d6fc: ldur            w2, [x1, #0xb]
    // 0xa1d700: DecompressPointer r2
    //     0xa1d700: add             x2, x2, HEAP, lsl #32
    // 0xa1d704: cmp             w2, NULL
    // 0xa1d708: b.eq            #0xa1d74c
    // 0xa1d70c: LoadField: r2 = r1->field_1f
    //     0xa1d70c: ldur            w2, [x1, #0x1f]
    // 0xa1d710: DecompressPointer r2
    //     0xa1d710: add             x2, x2, HEAP, lsl #32
    // 0xa1d714: r16 = Sentinel
    //     0xa1d714: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa1d718: cmp             w2, w16
    // 0xa1d71c: b.eq            #0xa1d750
    // 0xa1d720: LoadField: r1 = r2->field_7
    //     0xa1d720: ldur            w1, [x2, #7]
    // 0xa1d724: DecompressPointer r1
    //     0xa1d724: add             x1, x1, HEAP, lsl #32
    // 0xa1d728: LoadField: r2 = r1->field_77
    //     0xa1d728: ldur            w2, [x1, #0x77]
    // 0xa1d72c: DecompressPointer r2
    //     0xa1d72c: add             x2, x2, HEAP, lsl #32
    // 0xa1d730: tbz             w2, #4, #0xa1d73c
    // 0xa1d734: r0 = true
    //     0xa1d734: add             x0, NULL, #0x20  ; true
    // 0xa1d738: b               #0xa1d740
    // 0xa1d73c: r0 = false
    //     0xa1d73c: add             x0, NULL, #0x30  ; false
    // 0xa1d740: LeaveFrame
    //     0xa1d740: mov             SP, fp
    //     0xa1d744: ldp             fp, lr, [SP], #0x10
    // 0xa1d748: ret
    //     0xa1d748: ret             
    // 0xa1d74c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d74c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1d750: r9 = _data
    //     0xa1d750: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0xa1d754: ldr             x9, [x9, #0x240]
    // 0xa1d758: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa1d758: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  [closure] bool <anonymous closure>(dynamic) {
    // ** addr: 0xa1d75c, size: 0x70
    // 0xa1d75c: EnterFrame
    //     0xa1d75c: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d760: mov             fp, SP
    // 0xa1d764: ldr             x1, [fp, #0x10]
    // 0xa1d768: ArrayLoad: r2 = r1[0]  ; List_4
    //     0xa1d768: ldur            w2, [x1, #0x17]
    // 0xa1d76c: DecompressPointer r2
    //     0xa1d76c: add             x2, x2, HEAP, lsl #32
    // 0xa1d770: LoadField: r1 = r2->field_f
    //     0xa1d770: ldur            w1, [x2, #0xf]
    // 0xa1d774: DecompressPointer r1
    //     0xa1d774: add             x1, x1, HEAP, lsl #32
    // 0xa1d778: LoadField: r2 = r1->field_b
    //     0xa1d778: ldur            w2, [x1, #0xb]
    // 0xa1d77c: DecompressPointer r2
    //     0xa1d77c: add             x2, x2, HEAP, lsl #32
    // 0xa1d780: cmp             w2, NULL
    // 0xa1d784: b.eq            #0xa1d7bc
    // 0xa1d788: LoadField: r2 = r1->field_1f
    //     0xa1d788: ldur            w2, [x1, #0x1f]
    // 0xa1d78c: DecompressPointer r2
    //     0xa1d78c: add             x2, x2, HEAP, lsl #32
    // 0xa1d790: r16 = Sentinel
    //     0xa1d790: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa1d794: cmp             w2, w16
    // 0xa1d798: b.eq            #0xa1d7c0
    // 0xa1d79c: LoadField: r1 = r2->field_b
    //     0xa1d79c: ldur            w1, [x2, #0xb]
    // 0xa1d7a0: DecompressPointer r1
    //     0xa1d7a0: add             x1, x1, HEAP, lsl #32
    // 0xa1d7a4: LoadField: r2 = r1->field_77
    //     0xa1d7a4: ldur            w2, [x1, #0x77]
    // 0xa1d7a8: DecompressPointer r2
    //     0xa1d7a8: add             x2, x2, HEAP, lsl #32
    // 0xa1d7ac: eor             x0, x2, #0x10
    // 0xa1d7b0: LeaveFrame
    //     0xa1d7b0: mov             SP, fp
    //     0xa1d7b4: ldp             fp, lr, [SP], #0x10
    // 0xa1d7b8: ret
    //     0xa1d7b8: ret             
    // 0xa1d7bc: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xa1d7bc: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xa1d7c0: r9 = _data
    //     0xa1d7c0: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0xa1d7c4: ldr             x9, [x9, #0x240]
    // 0xa1d7c8: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa1d7c8: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa55360, size: 0xa0
    // 0xa55360: EnterFrame
    //     0xa55360: stp             fp, lr, [SP, #-0x10]!
    //     0xa55364: mov             fp, SP
    // 0xa55368: AllocStack(0x8)
    //     0xa55368: sub             SP, SP, #8
    // 0xa5536c: CheckStackOverflow
    //     0xa5536c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa55370: cmp             SP, x16
    //     0xa55374: b.ls            #0xa553ec
    // 0xa55378: ldr             x0, [fp, #0x10]
    // 0xa5537c: LoadField: r1 = r0->field_1f
    //     0xa5537c: ldur            w1, [x0, #0x1f]
    // 0xa55380: DecompressPointer r1
    //     0xa55380: add             x1, x1, HEAP, lsl #32
    // 0xa55384: r16 = Sentinel
    //     0xa55384: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa55388: cmp             w1, w16
    // 0xa5538c: b.eq            #0xa553f4
    // 0xa55390: LoadField: r2 = r1->field_7
    //     0xa55390: ldur            w2, [x1, #7]
    // 0xa55394: DecompressPointer r2
    //     0xa55394: add             x2, x2, HEAP, lsl #32
    // 0xa55398: str             x2, [SP]
    // 0xa5539c: r0 = dispose()
    //     0xa5539c: bl              #0xa3c9f8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::dispose
    // 0xa553a0: ldr             x0, [fp, #0x10]
    // 0xa553a4: LoadField: r1 = r0->field_1f
    //     0xa553a4: ldur            w1, [x0, #0x1f]
    // 0xa553a8: DecompressPointer r1
    //     0xa553a8: add             x1, x1, HEAP, lsl #32
    // 0xa553ac: LoadField: r2 = r1->field_b
    //     0xa553ac: ldur            w2, [x1, #0xb]
    // 0xa553b0: DecompressPointer r2
    //     0xa553b0: add             x2, x2, HEAP, lsl #32
    // 0xa553b4: str             x2, [SP]
    // 0xa553b8: r0 = dispose()
    //     0xa553b8: bl              #0xa3c9f8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::dispose
    // 0xa553bc: ldr             x16, [fp, #0x10]
    // 0xa553c0: str             x16, [SP]
    // 0xa553c4: r0 = _userOffsetNotifier()
    //     0xa553c4: bl              #0xa554a4  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_userOffsetNotifier
    // 0xa553c8: str             x0, [SP]
    // 0xa553cc: r0 = dispose()
    //     0xa553cc: bl              #0xa60440  ; [package:flutter/src/widgets/shortcuts.dart] _ShortcutManager&Object&Diagnosticable&ChangeNotifier::dispose
    // 0xa553d0: ldr             x16, [fp, #0x10]
    // 0xa553d4: str             x16, [SP]
    // 0xa553d8: r0 = dispose()
    //     0xa553d8: bl              #0xa55400  ; [package:easy_refresh/easy_refresh.dart] __EasyRefreshState&State&TickerProviderStateMixin::dispose
    // 0xa553dc: r0 = Null
    //     0xa553dc: mov             x0, NULL
    // 0xa553e0: LeaveFrame
    //     0xa553e0: mov             SP, fp
    //     0xa553e4: ldp             fp, lr, [SP], #0x10
    // 0xa553e8: ret
    //     0xa553e8: ret             
    // 0xa553ec: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa553ec: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa553f0: b               #0xa55378
    // 0xa553f4: r9 = _data
    //     0xa553f4: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0xa553f8: ldr             x9, [x9, #0x240]
    // 0xa553fc: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa553fc: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
  get _ _userOffsetNotifier(/* No info */) {
    // ** addr: 0xa554a4, size: 0x40
    // 0xa554a4: EnterFrame
    //     0xa554a4: stp             fp, lr, [SP, #-0x10]!
    //     0xa554a8: mov             fp, SP
    // 0xa554ac: ldr             x1, [fp, #0x10]
    // 0xa554b0: LoadField: r2 = r1->field_1f
    //     0xa554b0: ldur            w2, [x1, #0x1f]
    // 0xa554b4: DecompressPointer r2
    //     0xa554b4: add             x2, x2, HEAP, lsl #32
    // 0xa554b8: r16 = Sentinel
    //     0xa554b8: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa554bc: cmp             w2, w16
    // 0xa554c0: b.eq            #0xa554d8
    // 0xa554c4: LoadField: r0 = r2->field_f
    //     0xa554c4: ldur            w0, [x2, #0xf]
    // 0xa554c8: DecompressPointer r0
    //     0xa554c8: add             x0, x0, HEAP, lsl #32
    // 0xa554cc: LeaveFrame
    //     0xa554cc: mov             SP, fp
    //     0xa554d0: ldp             fp, lr, [SP], #0x10
    // 0xa554d4: ret
    //     0xa554d4: ret             
    // 0xa554d8: r9 = _data
    //     0xa554d8: add             x9, PP, #0x1d, lsl #12  ; [pp+0x1d240] Field <_EasyRefreshState@765089737._data@765089737>: late (offset: 0x20)
    //     0xa554dc: ldr             x9, [x9, #0x240]
    // 0xa554e0: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xa554e0: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
  }
}

// class id: 3630, size: 0x14, field offset: 0x10
//   const constructor, 
class _InheritedEasyRefresh extends InheritedWidget {

  _ updateShouldNotify(/* No info */) {
    // ** addr: 0xa85038, size: 0x74
    // 0xa85038: EnterFrame
    //     0xa85038: stp             fp, lr, [SP, #-0x10]!
    //     0xa8503c: mov             fp, SP
    // 0xa85040: ldr             x0, [fp, #0x10]
    // 0xa85044: r2 = Null
    //     0xa85044: mov             x2, NULL
    // 0xa85048: r1 = Null
    //     0xa85048: mov             x1, NULL
    // 0xa8504c: r4 = 59
    //     0xa8504c: movz            x4, #0x3b
    // 0xa85050: branchIfSmi(r0, 0xa8505c)
    //     0xa85050: tbz             w0, #0, #0xa8505c
    // 0xa85054: r4 = LoadClassIdInstr(r0)
    //     0xa85054: ldur            x4, [x0, #-1]
    //     0xa85058: ubfx            x4, x4, #0xc, #0x14
    // 0xa8505c: cmp             x4, #0xe2e
    // 0xa85060: b.eq            #0xa85078
    // 0xa85064: r8 = _InheritedEasyRefresh
    //     0xa85064: add             x8, PP, #0x31, lsl #12  ; [pp+0x31648] Type: _InheritedEasyRefresh
    //     0xa85068: ldr             x8, [x8, #0x648]
    // 0xa8506c: r3 = Null
    //     0xa8506c: add             x3, PP, #0x31, lsl #12  ; [pp+0x31650] Null
    //     0xa85070: ldr             x3, [x3, #0x650]
    // 0xa85074: r0 = DefaultTypeTest()
    //     0xa85074: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xa85078: ldr             x1, [fp, #0x18]
    // 0xa8507c: LoadField: r2 = r1->field_f
    //     0xa8507c: ldur            w2, [x1, #0xf]
    // 0xa85080: DecompressPointer r2
    //     0xa85080: add             x2, x2, HEAP, lsl #32
    // 0xa85084: ldr             x1, [fp, #0x10]
    // 0xa85088: LoadField: r3 = r1->field_f
    //     0xa85088: ldur            w3, [x1, #0xf]
    // 0xa8508c: DecompressPointer r3
    //     0xa8508c: add             x3, x3, HEAP, lsl #32
    // 0xa85090: cmp             w2, w3
    // 0xa85094: r16 = true
    //     0xa85094: add             x16, NULL, #0x20  ; true
    // 0xa85098: r17 = false
    //     0xa85098: add             x17, NULL, #0x30  ; false
    // 0xa8509c: csel            x0, x16, x17, ne
    // 0xa850a0: LeaveFrame
    //     0xa850a0: mov             SP, fp
    //     0xa850a4: ldp             fp, lr, [SP], #0x10
    // 0xa850a8: ret
    //     0xa850a8: ret             
  }
}

// class id: 4225, size: 0x24, field offset: 0xc
//   const constructor, 
class _CupertinoActivityIndicator extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4b054, size: 0x28
    // 0xa4b054: EnterFrame
    //     0xa4b054: stp             fp, lr, [SP, #-0x10]!
    //     0xa4b058: mov             fp, SP
    // 0xa4b05c: r1 = <_CupertinoActivityIndicator>
    //     0xa4b05c: add             x1, PP, #0x46, lsl #12  ; [pp+0x464f0] TypeArguments: <_CupertinoActivityIndicator>
    //     0xa4b060: ldr             x1, [x1, #0x4f0]
    // 0xa4b064: r0 = _CupertinoActivityIndicatorState()
    //     0xa4b064: bl              #0xa4b07c  ; Allocate_CupertinoActivityIndicatorStateStub -> _CupertinoActivityIndicatorState (size=0x20)
    // 0xa4b068: r1 = Sentinel
    //     0xa4b068: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4b06c: StoreField: r0->field_1b = r1
    //     0xa4b06c: stur            w1, [x0, #0x1b]
    // 0xa4b070: LeaveFrame
    //     0xa4b070: mov             SP, fp
    //     0xa4b074: ldp             fp, lr, [SP], #0x10
    // 0xa4b078: ret
    //     0xa4b078: ret             
  }
}

// class id: 4226, size: 0x20, field offset: 0xc
//   const constructor, 
class _CupertinoIndicator extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4b020, size: 0x28
    // 0xa4b020: EnterFrame
    //     0xa4b020: stp             fp, lr, [SP, #-0x10]!
    //     0xa4b024: mov             fp, SP
    // 0xa4b028: r1 = <_CupertinoIndicator>
    //     0xa4b028: add             x1, PP, #0x37, lsl #12  ; [pp+0x37f00] TypeArguments: <_CupertinoIndicator>
    //     0xa4b02c: ldr             x1, [x1, #0xf00]
    // 0xa4b030: r0 = _CupertinoIndicatorState()
    //     0xa4b030: bl              #0xa4b048  ; Allocate_CupertinoIndicatorStateStub -> _CupertinoIndicatorState (size=0x20)
    // 0xa4b034: r1 = Sentinel
    //     0xa4b034: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4b038: StoreField: r0->field_1b = r1
    //     0xa4b038: stur            w1, [x0, #0x1b]
    // 0xa4b03c: LeaveFrame
    //     0xa4b03c: mov             SP, fp
    //     0xa4b040: ldp             fp, lr, [SP], #0x10
    // 0xa4b044: ret
    //     0xa4b044: ret             
  }
}

// class id: 4227, size: 0x88, field offset: 0xc
//   const constructor, 
class _ClassicIndicator extends StatefulWidget {

  _ createState(/* No info */) {
    // ** addr: 0xa4afe4, size: 0x30
    // 0xa4afe4: EnterFrame
    //     0xa4afe4: stp             fp, lr, [SP, #-0x10]!
    //     0xa4afe8: mov             fp, SP
    // 0xa4afec: r1 = <_ClassicIndicator>
    //     0xa4afec: add             x1, PP, #0x37, lsl #12  ; [pp+0x37f08] TypeArguments: <_ClassicIndicator>
    //     0xa4aff0: ldr             x1, [x1, #0xf08]
    // 0xa4aff4: r0 = _ClassicIndicatorState()
    //     0xa4aff4: bl              #0xa4b014  ; Allocate_ClassicIndicatorStateStub -> _ClassicIndicatorState (size=0x28)
    // 0xa4aff8: r1 = Sentinel
    //     0xa4aff8: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4affc: StoreField: r0->field_1b = r1
    //     0xa4affc: stur            w1, [x0, #0x1b]
    // 0xa4b000: StoreField: r0->field_1f = r1
    //     0xa4b000: stur            w1, [x0, #0x1f]
    // 0xa4b004: StoreField: r0->field_23 = r1
    //     0xa4b004: stur            w1, [x0, #0x23]
    // 0xa4b008: LeaveFrame
    //     0xa4b008: mov             SP, fp
    //     0xa4b00c: ldp             fp, lr, [SP], #0x10
    // 0xa4b010: ret
    //     0xa4b010: ret             
  }
}

// class id: 4228, size: 0x54, field offset: 0xc
//   const constructor, 
class EasyRefresh extends StatefulWidget {

  static late (dynamic, ScrollPhysics?) => ScrollBehavior defaultScrollBehaviorBuilder; // offset: 0x133c
  static late (dynamic) => Footer defaultFooterBuilder; // offset: 0x1338
  static late (dynamic) => Header defaultHeaderBuilder; // offset: 0x1334

  get _ _defaultFooter(/* No info */) {
    // ** addr: 0x8a991c, size: 0x5c
    // 0x8a991c: EnterFrame
    //     0x8a991c: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9920: mov             fp, SP
    // 0x8a9924: AllocStack(0x8)
    //     0x8a9924: sub             SP, SP, #8
    // 0x8a9928: CheckStackOverflow
    //     0x8a9928: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a992c: cmp             SP, x16
    //     0x8a9930: b.ls            #0x8a9970
    // 0x8a9934: r0 = InitLateStaticField(0x1338) // [package:easy_refresh/easy_refresh.dart] EasyRefresh::defaultFooterBuilder
    //     0x8a9934: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8a9938: ldr             x0, [x0, #0x2670]
    //     0x8a993c: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x8a9940: cmp             w0, w16
    //     0x8a9944: b.ne            #0x8a9954
    //     0x8a9948: add             x2, PP, #0x2a, lsl #12  ; [pp+0x2a0d0] Field <EasyRefresh.defaultFooterBuilder>: static late (offset: 0x1338)
    //     0x8a994c: ldr             x2, [x2, #0xd0]
    //     0x8a9950: bl              #0xc5d1c4  ; InitLateStaticFieldStub
    // 0x8a9954: str             x0, [SP]
    // 0x8a9958: ClosureCall
    //     0x8a9958: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x8a995c: ldur            x2, [x0, #0x1f]
    //     0x8a9960: blr             x2
    // 0x8a9964: LeaveFrame
    //     0x8a9964: mov             SP, fp
    //     0x8a9968: ldp             fp, lr, [SP], #0x10
    // 0x8a996c: ret
    //     0x8a996c: ret             
    // 0x8a9970: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9970: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9974: b               #0x8a9934
  }
  static (dynamic) => Footer defaultFooterBuilder() {
    // ** addr: 0x8a9984, size: 0x8
    // 0x8a9984: r0 = Closure: () => Footer from Function '_defaultFooterBuilder@765089737': static.
    //     0x8a9984: ldr             x0, [PP, #0x6ec0]  ; [pp+0x6ec0] Closure: () => Footer from Function '_defaultFooterBuilder@765089737': static. (0x222f3e7998c)
    // 0x8a9988: ret
    //     0x8a9988: ret             
  }
  [closure] static Footer _defaultFooterBuilder(dynamic) {
    // ** addr: 0x8a998c, size: 0x8
    // 0x8a998c: r0 = Instance_ClassicFooter
    //     0x8a998c: ldr             x0, [PP, #0x6ec8]  ; [pp+0x6ec8] Obj!ClassicFooter@c39531
    // 0x8a9990: ret
    //     0x8a9990: ret             
  }
  get _ _defaultHeader(/* No info */) {
    // ** addr: 0x8a9bc4, size: 0x5c
    // 0x8a9bc4: EnterFrame
    //     0x8a9bc4: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9bc8: mov             fp, SP
    // 0x8a9bcc: AllocStack(0x8)
    //     0x8a9bcc: sub             SP, SP, #8
    // 0x8a9bd0: CheckStackOverflow
    //     0x8a9bd0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a9bd4: cmp             SP, x16
    //     0x8a9bd8: b.ls            #0x8a9c18
    // 0x8a9bdc: r0 = InitLateStaticField(0x1334) // [package:easy_refresh/easy_refresh.dart] EasyRefresh::defaultHeaderBuilder
    //     0x8a9bdc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x8a9be0: ldr             x0, [x0, #0x2668]
    //     0x8a9be4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0x8a9be8: cmp             w0, w16
    //     0x8a9bec: b.ne            #0x8a9bfc
    //     0x8a9bf0: add             x2, PP, #0x2a, lsl #12  ; [pp+0x2a0e8] Field <EasyRefresh.defaultHeaderBuilder>: static late (offset: 0x1334)
    //     0x8a9bf4: ldr             x2, [x2, #0xe8]
    //     0x8a9bf8: bl              #0xc5d1c4  ; InitLateStaticFieldStub
    // 0x8a9bfc: str             x0, [SP]
    // 0x8a9c00: ClosureCall
    //     0x8a9c00: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x8a9c04: ldur            x2, [x0, #0x1f]
    //     0x8a9c08: blr             x2
    // 0x8a9c0c: LeaveFrame
    //     0x8a9c0c: mov             SP, fp
    //     0x8a9c10: ldp             fp, lr, [SP], #0x10
    // 0x8a9c14: ret
    //     0x8a9c14: ret             
    // 0x8a9c18: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9c18: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9c1c: b               #0x8a9bdc
  }
  static (dynamic) => Header defaultHeaderBuilder() {
    // ** addr: 0x8a9c20, size: 0x8
    // 0x8a9c20: r0 = Closure: () => Header from Function '_defaultHeaderBuilder@765089737': static.
    //     0x8a9c20: ldr             x0, [PP, #0x6ed0]  ; [pp+0x6ed0] Closure: () => Header from Function '_defaultHeaderBuilder@765089737': static. (0x222f3e79c28)
    // 0x8a9c24: ret
    //     0x8a9c24: ret             
  }
  [closure] static Header _defaultHeaderBuilder(dynamic) {
    // ** addr: 0x8a9c28, size: 0x8
    // 0x8a9c28: r0 = Instance_ClassicHeader
    //     0x8a9c28: ldr             x0, [PP, #0x6ed8]  ; [pp+0x6ed8] Obj!ClassicHeader@c397d1
    // 0x8a9c2c: ret
    //     0x8a9c2c: ret             
  }
  static (dynamic, ScrollPhysics?) => ScrollBehavior defaultScrollBehaviorBuilder() {
    // ** addr: 0x91cf0c, size: 0xc
    // 0x91cf0c: r0 = Closure: (ScrollPhysics?) => ScrollBehavior from Function '_defaultScrollBehaviorBuilder@765089737': static.
    //     0x91cf0c: add             x0, PP, #0x2a, lsl #12  ; [pp+0x2a098] Closure: (ScrollPhysics?) => ScrollBehavior from Function '_defaultScrollBehaviorBuilder@765089737': static. (0x222f3eecf18)
    //     0x91cf10: ldr             x0, [x0, #0x98]
    // 0x91cf14: ret
    //     0x91cf14: ret             
  }
  [closure] static ScrollBehavior _defaultScrollBehaviorBuilder(dynamic, ScrollPhysics?) {
    // ** addr: 0x91cf18, size: 0x38
    // 0x91cf18: EnterFrame
    //     0x91cf18: stp             fp, lr, [SP, #-0x10]!
    //     0x91cf1c: mov             fp, SP
    // 0x91cf20: AllocStack(0x8)
    //     0x91cf20: sub             SP, SP, #8
    // 0x91cf24: CheckStackOverflow
    //     0x91cf24: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91cf28: cmp             SP, x16
    //     0x91cf2c: b.ls            #0x91cf48
    // 0x91cf30: ldr             x16, [fp, #0x10]
    // 0x91cf34: str             x16, [SP]
    // 0x91cf38: r0 = _defaultScrollBehaviorBuilder()
    //     0x91cf38: bl              #0x91cf50  ; [package:easy_refresh/easy_refresh.dart] EasyRefresh::_defaultScrollBehaviorBuilder
    // 0x91cf3c: LeaveFrame
    //     0x91cf3c: mov             SP, fp
    //     0x91cf40: ldp             fp, lr, [SP], #0x10
    // 0x91cf44: ret
    //     0x91cf44: ret             
    // 0x91cf48: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91cf48: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91cf4c: b               #0x91cf30
  }
  static _ _defaultScrollBehaviorBuilder(/* No info */) {
    // ** addr: 0x91cf50, size: 0x20
    // 0x91cf50: EnterFrame
    //     0x91cf50: stp             fp, lr, [SP, #-0x10]!
    //     0x91cf54: mov             fp, SP
    // 0x91cf58: r0 = ERScrollBehavior()
    //     0x91cf58: bl              #0x91cf70  ; AllocateERScrollBehaviorStub -> ERScrollBehavior (size=0x10)
    // 0x91cf5c: ldr             x1, [fp, #0x10]
    // 0x91cf60: StoreField: r0->field_b = r1
    //     0x91cf60: stur            w1, [x0, #0xb]
    // 0x91cf64: LeaveFrame
    //     0x91cf64: mov             SP, fp
    //     0x91cf68: ldp             fp, lr, [SP], #0x10
    // 0x91cf6c: ret
    //     0x91cf6c: ret             
  }
  _ createState(/* No info */) {
    // ** addr: 0xa4afa4, size: 0x34
    // 0xa4afa4: EnterFrame
    //     0xa4afa4: stp             fp, lr, [SP, #-0x10]!
    //     0xa4afa8: mov             fp, SP
    // 0xa4afac: r1 = <EasyRefresh>
    //     0xa4afac: add             x1, PP, #0x22, lsl #12  ; [pp+0x22418] TypeArguments: <EasyRefresh>
    //     0xa4afb0: ldr             x1, [x1, #0x418]
    // 0xa4afb4: r0 = _EasyRefreshState()
    //     0xa4afb4: bl              #0xa4afd8  ; Allocate_EasyRefreshStateStub -> _EasyRefreshState (size=0x28)
    // 0xa4afb8: r1 = Sentinel
    //     0xa4afb8: ldr             x1, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xa4afbc: StoreField: r0->field_1b = r1
    //     0xa4afbc: stur            w1, [x0, #0x1b]
    // 0xa4afc0: StoreField: r0->field_1f = r1
    //     0xa4afc0: stur            w1, [x0, #0x1f]
    // 0xa4afc4: r1 = false
    //     0xa4afc4: add             x1, NULL, #0x30  ; false
    // 0xa4afc8: StoreField: r0->field_23 = r1
    //     0xa4afc8: stur            w1, [x0, #0x23]
    // 0xa4afcc: LeaveFrame
    //     0xa4afcc: mov             SP, fp
    //     0xa4afd0: ldp             fp, lr, [SP], #0x10
    // 0xa4afd4: ret
    //     0xa4afd4: ret             
  }
}

// class id: 4542, size: 0x20, field offset: 0xc
class _CupertinoActivityIndicatorPainter extends CustomPainter {

  _ _CupertinoActivityIndicatorPainter(/* No info */) {
    // ** addr: 0x920444, size: 0x118
    // 0x920444: EnterFrame
    //     0x920444: stp             fp, lr, [SP, #-0x10]!
    //     0x920448: mov             fp, SP
    // 0x92044c: AllocStack(0x20)
    //     0x92044c: sub             SP, SP, #0x20
    // 0x920450: d1 = 10.000000
    //     0x920450: fmov            d1, #10.00000000
    // 0x920454: d0 = 3.000000
    //     0x920454: fmov            d0, #3.00000000
    // 0x920458: ldr             x0, [fp, #0x20]
    // 0x92045c: ldr             x1, [fp, #0x30]
    // 0x920460: StoreField: r1->field_b = r0
    //     0x920460: stur            w0, [x1, #0xb]
    //     0x920464: ldurb           w16, [x1, #-1]
    //     0x920468: ldurb           w17, [x0, #-1]
    //     0x92046c: and             x16, x17, x16, lsr #2
    //     0x920470: tst             x16, HEAP, lsr #32
    //     0x920474: b.eq            #0x92047c
    //     0x920478: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x92047c: ldr             x0, [fp, #0x28]
    // 0x920480: StoreField: r1->field_f = r0
    //     0x920480: stur            w0, [x1, #0xf]
    //     0x920484: ldurb           w16, [x1, #-1]
    //     0x920488: ldurb           w17, [x0, #-1]
    //     0x92048c: and             x16, x17, x16, lsr #2
    //     0x920490: tst             x16, HEAP, lsr #32
    //     0x920494: b.eq            #0x92049c
    //     0x920498: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x92049c: ldr             d2, [fp, #0x18]
    // 0x9204a0: StoreField: r1->field_13 = d2
    //     0x9204a0: stur            d2, [x1, #0x13]
    // 0x9204a4: ldr             d2, [fp, #0x10]
    // 0x9204a8: fneg            d3, d2
    // 0x9204ac: stur            d3, [fp, #-0x20]
    // 0x9204b0: fdiv            d4, d3, d1
    // 0x9204b4: stur            d4, [fp, #-0x18]
    // 0x9204b8: fdiv            d5, d3, d0
    // 0x9204bc: stur            d5, [fp, #-0x10]
    // 0x9204c0: fdiv            d0, d2, d1
    // 0x9204c4: stur            d0, [fp, #-8]
    // 0x9204c8: r0 = RRect()
    //     0x9204c8: bl              #0x59aedc  ; AllocateRRectStub -> RRect (size=0x68)
    // 0x9204cc: ldur            d0, [fp, #-0x18]
    // 0x9204d0: StoreField: r0->field_7 = d0
    //     0x9204d0: stur            d0, [x0, #7]
    // 0x9204d4: ldur            d0, [fp, #-0x10]
    // 0x9204d8: StoreField: r0->field_f = d0
    //     0x9204d8: stur            d0, [x0, #0xf]
    // 0x9204dc: ldur            d0, [fp, #-8]
    // 0x9204e0: ArrayStore: r0[0] = d0  ; List_8
    //     0x9204e0: stur            d0, [x0, #0x17]
    // 0x9204e4: ldur            d1, [fp, #-0x20]
    // 0x9204e8: StoreField: r0->field_1f = d1
    //     0x9204e8: stur            d1, [x0, #0x1f]
    // 0x9204ec: StoreField: r0->field_27 = d0
    //     0x9204ec: stur            d0, [x0, #0x27]
    // 0x9204f0: StoreField: r0->field_2f = d0
    //     0x9204f0: stur            d0, [x0, #0x2f]
    // 0x9204f4: StoreField: r0->field_37 = d0
    //     0x9204f4: stur            d0, [x0, #0x37]
    // 0x9204f8: StoreField: r0->field_3f = d0
    //     0x9204f8: stur            d0, [x0, #0x3f]
    // 0x9204fc: StoreField: r0->field_47 = d0
    //     0x9204fc: stur            d0, [x0, #0x47]
    // 0x920500: StoreField: r0->field_4f = d0
    //     0x920500: stur            d0, [x0, #0x4f]
    // 0x920504: StoreField: r0->field_57 = d0
    //     0x920504: stur            d0, [x0, #0x57]
    // 0x920508: StoreField: r0->field_5f = d0
    //     0x920508: stur            d0, [x0, #0x5f]
    // 0x92050c: ldr             x1, [fp, #0x30]
    // 0x920510: StoreField: r1->field_1b = r0
    //     0x920510: stur            w0, [x1, #0x1b]
    //     0x920514: ldurb           w16, [x1, #-1]
    //     0x920518: ldurb           w17, [x0, #-1]
    //     0x92051c: and             x16, x17, x16, lsr #2
    //     0x920520: tst             x16, HEAP, lsr #32
    //     0x920524: b.eq            #0x92052c
    //     0x920528: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x92052c: ldr             x0, [fp, #0x20]
    // 0x920530: StoreField: r1->field_7 = r0
    //     0x920530: stur            w0, [x1, #7]
    //     0x920534: ldurb           w16, [x1, #-1]
    //     0x920538: ldurb           w17, [x0, #-1]
    //     0x92053c: and             x16, x17, x16, lsr #2
    //     0x920540: tst             x16, HEAP, lsr #32
    //     0x920544: b.eq            #0x92054c
    //     0x920548: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x92054c: r0 = Null
    //     0x92054c: mov             x0, NULL
    // 0x920550: LeaveFrame
    //     0x920550: mov             SP, fp
    //     0x920554: ldp             fp, lr, [SP], #0x10
    // 0x920558: ret
    //     0x920558: ret             
  }
  _ paint(/* No info */) {
    // ** addr: 0xb3222c, size: 0x45c
    // 0xb3222c: EnterFrame
    //     0xb3222c: stp             fp, lr, [SP, #-0x10]!
    //     0xb32230: mov             fp, SP
    // 0xb32234: AllocStack(0xd8)
    //     0xb32234: sub             SP, SP, #0xd8
    // 0xb32238: CheckStackOverflow
    //     0xb32238: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb3223c: cmp             SP, x16
    //     0xb32240: b.ls            #0xb32638
    // 0xb32244: r16 = 112
    //     0xb32244: movz            x16, #0x70
    // 0xb32248: stp             x16, NULL, [SP]
    // 0xb3224c: r0 = ByteData()
    //     0xb3224c: bl              #0x501a40  ; [dart:typed_data] ByteData::ByteData
    // 0xb32250: stur            x0, [fp, #-8]
    // 0xb32254: ldr             x16, [fp, #0x18]
    // 0xb32258: str             x16, [SP]
    // 0xb3225c: r0 = save()
    //     0xb3225c: bl              #0x7f3980  ; [dart:ui] _NativeCanvas::save
    // 0xb32260: ldr             x0, [fp, #0x10]
    // 0xb32264: LoadField: d0 = r0->field_7
    //     0xb32264: ldur            d0, [x0, #7]
    // 0xb32268: d1 = 2.000000
    //     0xb32268: fmov            d1, #2.00000000
    // 0xb3226c: fdiv            d2, d0, d1
    // 0xb32270: LoadField: d0 = r0->field_f
    //     0xb32270: ldur            d0, [x0, #0xf]
    // 0xb32274: fdiv            d3, d0, d1
    // 0xb32278: ldr             x16, [fp, #0x18]
    // 0xb3227c: str             x16, [SP, #0x10]
    // 0xb32280: str             d2, [SP, #8]
    // 0xb32284: str             d3, [SP]
    // 0xb32288: r0 = translate()
    //     0xb32288: bl              #0x7f377c  ; [dart:ui] _NativeCanvas::translate
    // 0xb3228c: ldr             x0, [fp, #0x20]
    // 0xb32290: LoadField: r1 = r0->field_b
    //     0xb32290: ldur            w1, [x0, #0xb]
    // 0xb32294: DecompressPointer r1
    //     0xb32294: add             x1, x1, HEAP, lsl #32
    // 0xb32298: LoadField: r2 = r1->field_37
    //     0xb32298: ldur            w2, [x1, #0x37]
    // 0xb3229c: DecompressPointer r2
    //     0xb3229c: add             x2, x2, HEAP, lsl #32
    // 0xb322a0: r16 = Sentinel
    //     0xb322a0: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    // 0xb322a4: cmp             w2, w16
    // 0xb322a8: b.eq            #0xb32640
    // 0xb322ac: LoadField: d0 = r2->field_7
    //     0xb322ac: ldur            d0, [x2, #7]
    // 0xb322b0: d1 = 8.000000
    //     0xb322b0: fmov            d1, #8.00000000
    // 0xb322b4: fmul            d2, d1, d0
    // 0xb322b8: fcmp            d2, d2
    // 0xb322bc: b.vs            #0xb32648
    // 0xb322c0: fcvtms          x1, d2
    // 0xb322c4: asr             x16, x1, #0x1e
    // 0xb322c8: cmp             x16, x1, asr #63
    // 0xb322cc: b.ne            #0xb32648
    // 0xb322d0: lsl             x1, x1, #1
    // 0xb322d4: LoadField: d0 = r0->field_13
    //     0xb322d4: ldur            d0, [x0, #0x13]
    // 0xb322d8: stur            d0, [fp, #-0xb8]
    // 0xb322dc: fmul            d2, d1, d0
    // 0xb322e0: stur            d2, [fp, #-0xb0]
    // 0xb322e4: r2 = LoadInt32Instr(r1)
    //     0xb322e4: sbfx            x2, x1, #1, #0x1f
    //     0xb322e8: tbz             w1, #0, #0xb322f0
    //     0xb322ec: ldur            x2, [x1, #7]
    // 0xb322f0: stur            x2, [fp, #-0x38]
    // 0xb322f4: LoadField: r1 = r0->field_f
    //     0xb322f4: ldur            w1, [x0, #0xf]
    // 0xb322f8: DecompressPointer r1
    //     0xb322f8: add             x1, x1, HEAP, lsl #32
    // 0xb322fc: LoadField: r3 = r1->field_f
    //     0xb322fc: ldur            w3, [x1, #0xf]
    // 0xb32300: DecompressPointer r3
    //     0xb32300: add             x3, x3, HEAP, lsl #32
    // 0xb32304: LoadField: r1 = r3->field_7
    //     0xb32304: ldur            x1, [x3, #7]
    // 0xb32308: mov             x3, x1
    // 0xb3230c: ubfx            x3, x3, #0, #0x20
    // 0xb32310: r4 = 255
    //     0xb32310: movz            x4, #0xff, lsl #16
    // 0xb32314: and             x5, x3, x4
    // 0xb32318: stur            x5, [fp, #-0x30]
    // 0xb3231c: mov             x3, x1
    // 0xb32320: ubfx            x3, x3, #0, #0x20
    // 0xb32324: r4 = 65280
    //     0xb32324: orr             x4, xzr, #0xff00
    // 0xb32328: and             x6, x3, x4
    // 0xb3232c: stur            x6, [fp, #-0x28]
    // 0xb32330: ubfx            x1, x1, #0, #0x20
    // 0xb32334: r3 = 255
    //     0xb32334: movz            x3, #0xff
    // 0xb32338: and             x4, x1, x3
    // 0xb3233c: and             x1, x4, x3
    // 0xb32340: ldur            x7, [fp, #-8]
    // 0xb32344: stur            x1, [fp, #-0x20]
    // 0xb32348: ArrayLoad: r8 = r7[0]  ; List_4
    //     0xb32348: ldur            w8, [x7, #0x17]
    // 0xb3234c: DecompressPointer r8
    //     0xb3234c: add             x8, x8, HEAP, lsl #32
    // 0xb32350: stur            x8, [fp, #-0x18]
    // 0xb32354: LoadField: r4 = r0->field_1b
    //     0xb32354: ldur            w4, [x0, #0x1b]
    // 0xb32358: DecompressPointer r4
    //     0xb32358: add             x4, x4, HEAP, lsl #32
    // 0xb3235c: LoadField: d1 = r4->field_7
    //     0xb3235c: ldur            d1, [x4, #7]
    // 0xb32360: fcvt            s3, d1
    // 0xb32364: stur            d3, [fp, #-0xa8]
    // 0xb32368: LoadField: d1 = r4->field_f
    //     0xb32368: ldur            d1, [x4, #0xf]
    // 0xb3236c: fcvt            s4, d1
    // 0xb32370: stur            d4, [fp, #-0xa0]
    // 0xb32374: ArrayLoad: d1 = r4[0]  ; List_8
    //     0xb32374: ldur            d1, [x4, #0x17]
    // 0xb32378: fcvt            s5, d1
    // 0xb3237c: stur            d5, [fp, #-0x98]
    // 0xb32380: LoadField: d1 = r4->field_1f
    //     0xb32380: ldur            d1, [x4, #0x1f]
    // 0xb32384: fcvt            s6, d1
    // 0xb32388: stur            d6, [fp, #-0x90]
    // 0xb3238c: LoadField: d1 = r4->field_27
    //     0xb3238c: ldur            d1, [x4, #0x27]
    // 0xb32390: fcvt            s7, d1
    // 0xb32394: stur            d7, [fp, #-0x88]
    // 0xb32398: LoadField: d1 = r4->field_2f
    //     0xb32398: ldur            d1, [x4, #0x2f]
    // 0xb3239c: fcvt            s8, d1
    // 0xb323a0: stur            d8, [fp, #-0x80]
    // 0xb323a4: LoadField: d1 = r4->field_37
    //     0xb323a4: ldur            d1, [x4, #0x37]
    // 0xb323a8: fcvt            s9, d1
    // 0xb323ac: stur            d9, [fp, #-0x78]
    // 0xb323b0: LoadField: d1 = r4->field_3f
    //     0xb323b0: ldur            d1, [x4, #0x3f]
    // 0xb323b4: fcvt            s10, d1
    // 0xb323b8: stur            d10, [fp, #-0x70]
    // 0xb323bc: LoadField: d1 = r4->field_47
    //     0xb323bc: ldur            d1, [x4, #0x47]
    // 0xb323c0: fcvt            s11, d1
    // 0xb323c4: stur            d11, [fp, #-0x68]
    // 0xb323c8: LoadField: d1 = r4->field_4f
    //     0xb323c8: ldur            d1, [x4, #0x4f]
    // 0xb323cc: fcvt            s12, d1
    // 0xb323d0: stur            d12, [fp, #-0x60]
    // 0xb323d4: LoadField: d1 = r4->field_57
    //     0xb323d4: ldur            d1, [x4, #0x57]
    // 0xb323d8: fcvt            s13, d1
    // 0xb323dc: stur            d13, [fp, #-0x58]
    // 0xb323e0: LoadField: d1 = r4->field_5f
    //     0xb323e0: ldur            d1, [x4, #0x5f]
    // 0xb323e4: fcvt            s14, d1
    // 0xb323e8: stur            d14, [fp, #-0x50]
    // 0xb323ec: r11 = 0
    //     0xb323ec: movz            x11, #0
    // 0xb323f0: ldr             x10, [fp, #0x18]
    // 0xb323f4: r9 = const [0x2f, 0x2f, 0x2f, 0x2f, 0x48, 0x61, 0x7a, 0x93]
    //     0xb323f4: add             x9, PP, #0x38, lsl #12  ; [pp+0x388f8] List<int>(8)
    //     0xb323f8: ldr             x9, [x9, #0x8f8]
    // 0xb323fc: d1 = 1.000000
    //     0xb323fc: fmov            d1, #1.00000000
    // 0xb32400: r0 = 8
    //     0xb32400: movz            x0, #0x8
    // 0xb32404: stur            x11, [fp, #-0x10]
    // 0xb32408: CheckStackOverflow
    //     0xb32408: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb3240c: cmp             SP, x16
    //     0xb32410: b.ls            #0xb32674
    // 0xb32414: scvtf           d15, x11
    // 0xb32418: fcmp            d15, d2
    // 0xb3241c: b.vs            #0xb3261c
    // 0xb32420: b.ge            #0xb3261c
    // 0xb32424: sub             x4, x11, x2
    // 0xb32428: sdiv            x13, x4, x0
    // 0xb3242c: msub            x12, x13, x0, x4
    // 0xb32430: cmp             x12, xzr
    // 0xb32434: b.lt            #0xb3267c
    // 0xb32438: fcmp            d0, d1
    // 0xb3243c: b.vs            #0xb3244c
    // 0xb32440: b.ge            #0xb3244c
    // 0xb32444: r4 = 147
    //     0xb32444: movz            x4, #0x93
    // 0xb32448: b               #0xb32468
    // 0xb3244c: ArrayLoad: r4 = r9[r12]  ; Unknown_4
    //     0xb3244c: add             x16, x9, x12, lsl #2
    //     0xb32450: ldur            w4, [x16, #0xf]
    // 0xb32454: DecompressPointer r4
    //     0xb32454: add             x4, x4, HEAP, lsl #32
    // 0xb32458: r12 = LoadInt32Instr(r4)
    //     0xb32458: sbfx            x12, x4, #1, #0x1f
    //     0xb3245c: tbz             w4, #0, #0xb32464
    //     0xb32460: ldur            x12, [x4, #7]
    // 0xb32464: mov             x4, x12
    // 0xb32468: lsr             w12, w5, #0x10
    // 0xb3246c: lsr             w13, w6, #8
    // 0xb32470: ubfx            x4, x4, #0, #0x20
    // 0xb32474: and             x14, x4, x3
    // 0xb32478: lsl             w4, w14, #0x18
    // 0xb3247c: and             x14, x12, x3
    // 0xb32480: lsl             w12, w14, #0x10
    // 0xb32484: orr             x14, x4, x12
    // 0xb32488: and             x4, x13, x3
    // 0xb3248c: lsl             w12, w4, #8
    // 0xb32490: orr             x4, x14, x12
    // 0xb32494: orr             x12, x4, x1
    // 0xb32498: ubfx            x12, x12, #0, #0x20
    // 0xb3249c: eor             x4, x12, #0xff000000
    // 0xb324a0: sxtw            x4, w4
    // 0xb324a4: LoadField: r12 = r8->field_7
    //     0xb324a4: ldur            x12, [x8, #7]
    // 0xb324a8: str             w4, [x12, #4]
    // 0xb324ac: r4 = 24
    //     0xb324ac: movz            x4, #0x18
    // 0xb324b0: r0 = AllocateFloat32Array()
    //     0xb324b0: bl              #0xc5e3bc  ; AllocateFloat32ArrayStub
    // 0xb324b4: ldur            d0, [fp, #-0xa8]
    // 0xb324b8: ArrayStore: r0[0] = d0  ; List_8
    //     0xb324b8: stur            s0, [x0, #0x17]
    // 0xb324bc: ldur            d1, [fp, #-0xa0]
    // 0xb324c0: StoreField: r0->field_1b = d1
    //     0xb324c0: stur            s1, [x0, #0x1b]
    // 0xb324c4: ldur            d2, [fp, #-0x98]
    // 0xb324c8: StoreField: r0->field_1f = d2
    //     0xb324c8: stur            s2, [x0, #0x1f]
    // 0xb324cc: ldur            d3, [fp, #-0x90]
    // 0xb324d0: StoreField: r0->field_23 = d3
    //     0xb324d0: stur            s3, [x0, #0x23]
    // 0xb324d4: ldur            d4, [fp, #-0x88]
    // 0xb324d8: StoreField: r0->field_27 = d4
    //     0xb324d8: stur            s4, [x0, #0x27]
    // 0xb324dc: ldur            d5, [fp, #-0x80]
    // 0xb324e0: StoreField: r0->field_2b = d5
    //     0xb324e0: stur            s5, [x0, #0x2b]
    // 0xb324e4: ldur            d6, [fp, #-0x78]
    // 0xb324e8: StoreField: r0->field_2f = d6
    //     0xb324e8: stur            s6, [x0, #0x2f]
    // 0xb324ec: ldur            d7, [fp, #-0x70]
    // 0xb324f0: StoreField: r0->field_33 = d7
    //     0xb324f0: stur            s7, [x0, #0x33]
    // 0xb324f4: ldur            d8, [fp, #-0x68]
    // 0xb324f8: StoreField: r0->field_37 = d8
    //     0xb324f8: stur            s8, [x0, #0x37]
    // 0xb324fc: ldur            d9, [fp, #-0x60]
    // 0xb32500: StoreField: r0->field_3b = d9
    //     0xb32500: stur            s9, [x0, #0x3b]
    // 0xb32504: ldur            d10, [fp, #-0x58]
    // 0xb32508: StoreField: r0->field_3f = d10
    //     0xb32508: stur            s10, [x0, #0x3f]
    // 0xb3250c: ldur            d11, [fp, #-0x50]
    // 0xb32510: StoreField: r0->field_43 = d11
    //     0xb32510: stur            s11, [x0, #0x43]
    // 0xb32514: ldr             x16, [fp, #0x18]
    // 0xb32518: stp             x0, x16, [SP, #0x10]
    // 0xb3251c: ldur            x16, [fp, #-8]
    // 0xb32520: stp             x16, NULL, [SP]
    // 0xb32524: r0 = _drawRRect()
    //     0xb32524: bl              #0x601c24  ; [dart:ui] _NativeCanvas::_drawRRect
    // 0xb32528: r0 = InitLateStaticField(0x7d4) // [dart:ui] _NativeCanvas::_rotate$Method$FfiNative$Ptr
    //     0xb32528: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xb3252c: ldr             x0, [x0, #0xfa8]
    //     0xb32530: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xb32534: cmp             w0, w16
    //     0xb32538: b.ne            #0xb32548
    //     0xb3253c: add             x2, PP, #0x38, lsl #12  ; [pp+0x38610] Field <_NativeCanvas@15065589._rotate$Method$FfiNative$Ptr@15065589>: static late final (offset: 0x7d4)
    //     0xb32540: ldr             x2, [x2, #0x610]
    //     0xb32544: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xb32548: mov             x1, x0
    // 0xb3254c: ldr             x0, [fp, #0x18]
    // 0xb32550: stur            x1, [fp, #-0x48]
    // 0xb32554: LoadField: r2 = r0->field_7
    //     0xb32554: ldur            w2, [x0, #7]
    // 0xb32558: DecompressPointer r2
    //     0xb32558: add             x2, x2, HEAP, lsl #32
    // 0xb3255c: cmp             w2, NULL
    // 0xb32560: b.eq            #0xb32684
    // 0xb32564: ArrayLoad: r3 = r2[0]  ; List_8
    //     0xb32564: ldur            x3, [x2, #0x17]
    // 0xb32568: stur            x3, [fp, #-0x40]
    // 0xb3256c: cbnz            x3, #0xb3257c
    // 0xb32570: r16 = "A Dart object attempted to access a native peer, but the native peer has been collected (nullptr). This is usually the result of calling methods on a native-backed object when the native resources have already been disposed."
    //     0xb32570: ldr             x16, [PP, #0x1030]  ; [pp+0x1030] "A Dart object attempted to access a native peer, but the native peer has been collected (nullptr). This is usually the result of calling methods on a native-backed object when the native resources have already been disposed."
    // 0xb32574: str             x16, [SP]
    // 0xb32578: r0 = _throwNew()
    //     0xb32578: bl              #0x4c3874  ; [dart:core] StateError::_throwNew
    // 0xb3257c: ldur            x2, [fp, #-0x10]
    // 0xb32580: ldur            x0, [fp, #-0x40]
    // 0xb32584: r1 = <Never>
    //     0xb32584: ldr             x1, [PP, #0x1e0]  ; [pp+0x1e0] TypeArguments: <Never>
    // 0xb32588: r0 = Pointer()
    //     0xb32588: bl              #0x4df5ec  ; AllocatePointerStub -> Pointer<X0 bound NativeType> (size=-0x8)
    // 0xb3258c: mov             x1, x0
    // 0xb32590: ldur            x0, [fp, #-0x40]
    // 0xb32594: StoreField: r1->field_7 = r0
    //     0xb32594: stur            x0, [x1, #7]
    // 0xb32598: ldur            x16, [fp, #-0x48]
    // 0xb3259c: stp             x1, x16, [SP, #8]
    // 0xb325a0: r16 = 0.785398
    //     0xb325a0: add             x16, PP, #0x38, lsl #12  ; [pp+0x38900] 0.7853981633974483
    //     0xb325a4: ldr             x16, [x16, #0x900]
    // 0xb325a8: str             x16, [SP]
    // 0xb325ac: ldur            x0, [fp, #-0x48]
    // 0xb325b0: ClosureCall
    //     0xb325b0: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0xb325b4: ldur            x2, [x0, #0x1f]
    //     0xb325b8: blr             x2
    // 0xb325bc: ldur            x0, [fp, #-0x10]
    // 0xb325c0: add             x11, x0, #1
    // 0xb325c4: ldur            d0, [fp, #-0xb8]
    // 0xb325c8: ldur            d2, [fp, #-0xb0]
    // 0xb325cc: ldur            x7, [fp, #-8]
    // 0xb325d0: ldur            x5, [fp, #-0x30]
    // 0xb325d4: ldur            x6, [fp, #-0x28]
    // 0xb325d8: ldur            x1, [fp, #-0x20]
    // 0xb325dc: ldur            d3, [fp, #-0xa8]
    // 0xb325e0: ldur            d4, [fp, #-0xa0]
    // 0xb325e4: ldur            d5, [fp, #-0x98]
    // 0xb325e8: ldur            d6, [fp, #-0x90]
    // 0xb325ec: ldur            d7, [fp, #-0x88]
    // 0xb325f0: ldur            d8, [fp, #-0x80]
    // 0xb325f4: ldur            d9, [fp, #-0x78]
    // 0xb325f8: ldur            d10, [fp, #-0x70]
    // 0xb325fc: ldur            d11, [fp, #-0x68]
    // 0xb32600: ldur            d12, [fp, #-0x60]
    // 0xb32604: ldur            d13, [fp, #-0x58]
    // 0xb32608: ldur            d14, [fp, #-0x50]
    // 0xb3260c: ldur            x8, [fp, #-0x18]
    // 0xb32610: ldur            x2, [fp, #-0x38]
    // 0xb32614: r3 = 255
    //     0xb32614: movz            x3, #0xff
    // 0xb32618: b               #0xb323f0
    // 0xb3261c: ldr             x16, [fp, #0x18]
    // 0xb32620: str             x16, [SP]
    // 0xb32624: r0 = restore()
    //     0xb32624: bl              #0x7f3610  ; [dart:ui] _NativeCanvas::restore
    // 0xb32628: r0 = Null
    //     0xb32628: mov             x0, NULL
    // 0xb3262c: LeaveFrame
    //     0xb3262c: mov             SP, fp
    //     0xb32630: ldp             fp, lr, [SP], #0x10
    // 0xb32634: ret
    //     0xb32634: ret             
    // 0xb32638: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb32638: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb3263c: b               #0xb32244
    // 0xb32640: r9 = _value
    //     0xb32640: ldr             x9, [PP, #0x6030]  ; [pp+0x6030] Field <AnimationController._value@1160066280>: late (offset: 0x38)
    // 0xb32644: r0 = LateInitializationErrorSharedWithoutFPURegs()
    //     0xb32644: bl              #0xc5f6b8  ; LateInitializationErrorSharedWithoutFPURegsStub
    // 0xb32648: stp             q1, q2, [SP, #-0x20]!
    // 0xb3264c: SaveReg r0
    //     0xb3264c: str             x0, [SP, #-8]!
    // 0xb32650: d0 = 0.000000
    //     0xb32650: fmov            d0, d2
    // 0xb32654: r0 = 216
    //     0xb32654: movz            x0, #0xd8
    // 0xb32658: r24 = DoubleToIntegerStub
    //     0xb32658: ldr             x24, [PP, #0x30b0]  ; [pp+0x30b0] Stub: DoubleToInteger (0x4be980)
    // 0xb3265c: LoadField: r30 = r24->field_7
    //     0xb3265c: ldur            lr, [x24, #7]
    // 0xb32660: blr             lr
    // 0xb32664: mov             x1, x0
    // 0xb32668: RestoreReg r0
    //     0xb32668: ldr             x0, [SP], #8
    // 0xb3266c: ldp             q1, q2, [SP], #0x20
    // 0xb32670: b               #0xb322d4
    // 0xb32674: r0 = StackOverflowSharedWithFPURegs()
    //     0xb32674: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xb32678: b               #0xb32414
    // 0xb3267c: add             x12, x12, x0
    // 0xb32680: b               #0xb32438
    // 0xb32684: r0 = NullErrorSharedWithoutFPURegs()
    //     0xb32684: bl              #0xc5f5e0  ; NullErrorSharedWithoutFPURegsStub
  }
  _ shouldRepaint(/* No info */) {
    // ** addr: 0xb51fec, size: 0xd0
    // 0xb51fec: EnterFrame
    //     0xb51fec: stp             fp, lr, [SP, #-0x10]!
    //     0xb51ff0: mov             fp, SP
    // 0xb51ff4: AllocStack(0x10)
    //     0xb51ff4: sub             SP, SP, #0x10
    // 0xb51ff8: CheckStackOverflow
    //     0xb51ff8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb51ffc: cmp             SP, x16
    //     0xb52000: b.ls            #0xb520b4
    // 0xb52004: ldr             x0, [fp, #0x10]
    // 0xb52008: r2 = Null
    //     0xb52008: mov             x2, NULL
    // 0xb5200c: r1 = Null
    //     0xb5200c: mov             x1, NULL
    // 0xb52010: r4 = 59
    //     0xb52010: movz            x4, #0x3b
    // 0xb52014: branchIfSmi(r0, 0xb52020)
    //     0xb52014: tbz             w0, #0, #0xb52020
    // 0xb52018: r4 = LoadClassIdInstr(r0)
    //     0xb52018: ldur            x4, [x0, #-1]
    //     0xb5201c: ubfx            x4, x4, #0xc, #0x14
    // 0xb52020: r17 = 4542
    //     0xb52020: movz            x17, #0x11be
    // 0xb52024: cmp             x4, x17
    // 0xb52028: b.eq            #0xb52040
    // 0xb5202c: r8 = _CupertinoActivityIndicatorPainter
    //     0xb5202c: add             x8, PP, #0x4e, lsl #12  ; [pp+0x4ef28] Type: _CupertinoActivityIndicatorPainter
    //     0xb52030: ldr             x8, [x8, #0xf28]
    // 0xb52034: r3 = Null
    //     0xb52034: add             x3, PP, #0x4e, lsl #12  ; [pp+0x4ef30] Null
    //     0xb52038: ldr             x3, [x3, #0xf30]
    // 0xb5203c: r0 = DefaultTypeTest()
    //     0xb5203c: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xb52040: ldr             x0, [fp, #0x10]
    // 0xb52044: LoadField: r1 = r0->field_b
    //     0xb52044: ldur            w1, [x0, #0xb]
    // 0xb52048: DecompressPointer r1
    //     0xb52048: add             x1, x1, HEAP, lsl #32
    // 0xb5204c: ldr             x2, [fp, #0x18]
    // 0xb52050: LoadField: r3 = r2->field_b
    //     0xb52050: ldur            w3, [x2, #0xb]
    // 0xb52054: DecompressPointer r3
    //     0xb52054: add             x3, x3, HEAP, lsl #32
    // 0xb52058: cmp             w1, w3
    // 0xb5205c: b.ne            #0xb5207c
    // 0xb52060: LoadField: r1 = r0->field_f
    //     0xb52060: ldur            w1, [x0, #0xf]
    // 0xb52064: DecompressPointer r1
    //     0xb52064: add             x1, x1, HEAP, lsl #32
    // 0xb52068: LoadField: r3 = r2->field_f
    //     0xb52068: ldur            w3, [x2, #0xf]
    // 0xb5206c: DecompressPointer r3
    //     0xb5206c: add             x3, x3, HEAP, lsl #32
    // 0xb52070: stp             x3, x1, [SP]
    // 0xb52074: r0 = ==()
    //     0xb52074: bl              #0xbb1878  ; [package:flutter/src/cupertino/colors.dart] CupertinoDynamicColor::==
    // 0xb52078: tbz             w0, #4, #0xb52084
    // 0xb5207c: r0 = true
    //     0xb5207c: add             x0, NULL, #0x20  ; true
    // 0xb52080: b               #0xb520a8
    // 0xb52084: ldr             x2, [fp, #0x18]
    // 0xb52088: ldr             x1, [fp, #0x10]
    // 0xb5208c: LoadField: d0 = r1->field_13
    //     0xb5208c: ldur            d0, [x1, #0x13]
    // 0xb52090: LoadField: d1 = r2->field_13
    //     0xb52090: ldur            d1, [x2, #0x13]
    // 0xb52094: fcmp            d0, d1
    // 0xb52098: r16 = true
    //     0xb52098: add             x16, NULL, #0x20  ; true
    // 0xb5209c: r17 = false
    //     0xb5209c: add             x17, NULL, #0x30  ; false
    // 0xb520a0: csel            x1, x16, x17, ne
    // 0xb520a4: mov             x0, x1
    // 0xb520a8: LeaveFrame
    //     0xb520a8: mov             SP, fp
    //     0xb520ac: ldp             fp, lr, [SP], #0x10
    // 0xb520b0: ret
    //     0xb520b0: ret             
    // 0xb520b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb520b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb520b8: b               #0xb52004
  }
}

// class id: 4543, size: 0x24, field offset: 0xc
class _WaterDropPainter extends CustomPainter {

  _ paint(/* No info */) {
    // ** addr: 0xb314c4, size: 0xc0
    // 0xb314c4: EnterFrame
    //     0xb314c4: stp             fp, lr, [SP, #-0x10]!
    //     0xb314c8: mov             fp, SP
    // 0xb314cc: AllocStack(0x28)
    //     0xb314cc: sub             SP, SP, #0x28
    // 0xb314d0: CheckStackOverflow
    //     0xb314d0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb314d4: cmp             SP, x16
    //     0xb314d8: b.ls            #0xb3157c
    // 0xb314dc: r16 = 112
    //     0xb314dc: movz            x16, #0x70
    // 0xb314e0: stp             x16, NULL, [SP]
    // 0xb314e4: r0 = ByteData()
    //     0xb314e4: bl              #0x501a40  ; [dart:typed_data] ByteData::ByteData
    // 0xb314e8: stur            x0, [fp, #-8]
    // 0xb314ec: r0 = Paint()
    //     0xb314ec: bl              #0x5d0aa0  ; AllocatePaintStub -> Paint (size=0x10)
    // 0xb314f0: mov             x1, x0
    // 0xb314f4: ldur            x0, [fp, #-8]
    // 0xb314f8: stur            x1, [fp, #-0x10]
    // 0xb314fc: StoreField: r1->field_7 = r0
    //     0xb314fc: stur            w0, [x1, #7]
    // 0xb31500: ldr             x2, [fp, #0x20]
    // 0xb31504: LoadField: r3 = r2->field_f
    //     0xb31504: ldur            w3, [x2, #0xf]
    // 0xb31508: DecompressPointer r3
    //     0xb31508: add             x3, x3, HEAP, lsl #32
    // 0xb3150c: LoadField: r4 = r3->field_7
    //     0xb3150c: ldur            x4, [x3, #7]
    // 0xb31510: eor             x3, x4, #0xff000000
    // 0xb31514: ArrayLoad: r4 = r0[0]  ; List_4
    //     0xb31514: ldur            w4, [x0, #0x17]
    // 0xb31518: DecompressPointer r4
    //     0xb31518: add             x4, x4, HEAP, lsl #32
    // 0xb3151c: sxtw            x3, w3
    // 0xb31520: LoadField: r0 = r4->field_7
    //     0xb31520: ldur            x0, [x4, #7]
    // 0xb31524: str             w3, [x0, #4]
    // 0xb31528: LoadField: r0 = r2->field_b
    //     0xb31528: ldur            w0, [x2, #0xb]
    // 0xb3152c: DecompressPointer r0
    //     0xb3152c: add             x0, x0, HEAP, lsl #32
    // 0xb31530: r16 = Instance_Axis
    //     0xb31530: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0xb31534: cmp             w0, w16
    // 0xb31538: b.ne            #0xb3154c
    // 0xb3153c: ldr             x16, [fp, #0x10]
    // 0xb31540: stp             x16, x2, [SP]
    // 0xb31544: r0 = _buildVerticalPath()
    //     0xb31544: bl              #0xb31d30  ; [package:easy_refresh/easy_refresh.dart] _WaterDropPainter::_buildVerticalPath
    // 0xb31548: b               #0xb31558
    // 0xb3154c: ldr             x16, [fp, #0x10]
    // 0xb31550: stp             x16, x2, [SP]
    // 0xb31554: r0 = _buildHorizontalPath()
    //     0xb31554: bl              #0xb31584  ; [package:easy_refresh/easy_refresh.dart] _WaterDropPainter::_buildHorizontalPath
    // 0xb31558: ldr             x16, [fp, #0x18]
    // 0xb3155c: stp             x0, x16, [SP, #8]
    // 0xb31560: ldur            x16, [fp, #-0x10]
    // 0xb31564: str             x16, [SP]
    // 0xb31568: r0 = drawPath()
    //     0xb31568: bl              #0x600420  ; [dart:ui] _NativeCanvas::drawPath
    // 0xb3156c: r0 = Null
    //     0xb3156c: mov             x0, NULL
    // 0xb31570: LeaveFrame
    //     0xb31570: mov             SP, fp
    //     0xb31574: ldp             fp, lr, [SP], #0x10
    // 0xb31578: ret
    //     0xb31578: ret             
    // 0xb3157c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb3157c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb31580: b               #0xb314dc
  }
  _ _buildHorizontalPath(/* No info */) {
    // ** addr: 0xb31584, size: 0x4fc
    // 0xb31584: EnterFrame
    //     0xb31584: stp             fp, lr, [SP, #-0x10]!
    //     0xb31588: mov             fp, SP
    // 0xb3158c: AllocStack(0x98)
    //     0xb3158c: sub             SP, SP, #0x98
    // 0xb31590: CheckStackOverflow
    //     0xb31590: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb31594: cmp             SP, x16
    //     0xb31598: b.ls            #0xb31a78
    // 0xb3159c: r0 = _NativePath()
    //     0xb3159c: bl              #0x601a5c  ; Allocate_NativePathStub -> _NativePath (size=0xc)
    // 0xb315a0: stur            x0, [fp, #-8]
    // 0xb315a4: str             x0, [SP]
    // 0xb315a8: r0 = _constructor()
    //     0xb315a8: bl              #0x50fbb8  ; [dart:ui] _NativePath::_constructor
    // 0xb315ac: ldr             x0, [fp, #0x10]
    // 0xb315b0: LoadField: d0 = r0->field_f
    //     0xb315b0: ldur            d0, [x0, #0xf]
    // 0xb315b4: ldr             x0, [fp, #0x18]
    // 0xb315b8: stur            d0, [fp, #-0x38]
    // 0xb315bc: LoadField: d1 = r0->field_13
    //     0xb315bc: ldur            d1, [x0, #0x13]
    // 0xb315c0: stur            d1, [fp, #-0x30]
    // 0xb315c4: LoadField: d2 = r0->field_1b
    //     0xb315c4: ldur            d2, [x0, #0x1b]
    // 0xb315c8: stur            d2, [fp, #-0x28]
    // 0xb315cc: fcmp            d1, d2
    // 0xb315d0: b.vs            #0xb3170c
    // 0xb315d4: b.le            #0xb3170c
    // 0xb315d8: d3 = 200.000000
    //     0xb315d8: add             x17, PP, #0x25, lsl #12  ; [pp+0x25238] IMM: double(200) from 0x4069000000000000
    //     0xb315dc: ldr             d3, [x17, #0x238]
    // 0xb315e0: fsub            d4, d1, d2
    // 0xb315e4: fneg            d5, d4
    // 0xb315e8: fdiv            d4, d5, d3
    // 0xb315ec: stur            d4, [fp, #-0x20]
    // 0xb315f0: r16 = 200
    //     0xb315f0: movz            x16, #0xc8
    // 0xb315f4: stp             x16, NULL, [SP]
    // 0xb315f8: r0 = _Double.fromInteger()
    //     0xb315f8: bl              #0x5093ec  ; [dart:core] _Double::_Double.fromInteger
    // 0xb315fc: LoadField: d0 = r0->field_7
    //     0xb315fc: ldur            d0, [x0, #7]
    // 0xb31600: ldur            d1, [fp, #-0x20]
    // 0xb31604: d30 = 0.000000
    //     0xb31604: fmov            d30, d0
    // 0xb31608: d0 = 1.000000
    //     0xb31608: fmov            d0, #1.00000000
    // 0xb3160c: fcmp            d1, #0.0
    // 0xb31610: b.vs            #0xb31654
    // 0xb31614: b.eq            #0xb316d8
    // 0xb31618: fcmp            d1, d0
    // 0xb3161c: b.eq            #0xb31644
    // 0xb31620: d31 = 2.000000
    //     0xb31620: fmov            d31, #2.00000000
    // 0xb31624: fcmp            d1, d31
    // 0xb31628: b.eq            #0xb3164c
    // 0xb3162c: d31 = 3.000000
    //     0xb3162c: fmov            d31, #3.00000000
    // 0xb31630: fcmp            d1, d31
    // 0xb31634: b.ne            #0xb31654
    // 0xb31638: fmul            d0, d30, d30
    // 0xb3163c: fmul            d0, d0, d30
    // 0xb31640: b               #0xb316d8
    // 0xb31644: d0 = 0.000000
    //     0xb31644: fmov            d0, d30
    // 0xb31648: b               #0xb316d8
    // 0xb3164c: fmul            d0, d30, d30
    // 0xb31650: b               #0xb316d8
    // 0xb31654: fcmp            d30, d0
    // 0xb31658: b.vs            #0xb31668
    // 0xb3165c: b.eq            #0xb316d8
    // 0xb31660: fcmp            d30, d1
    // 0xb31664: b.vc            #0xb31670
    // 0xb31668: d0 = nan
    //     0xb31668: ldr             d0, [PP, #0x2a38]  ; [pp+0x2a38] IMM: double(nan) from 0x7ff8000000000000
    // 0xb3166c: b               #0xb316d8
    // 0xb31670: d0 = -inf
    //     0xb31670: ldr             d0, [PP, #0xd90]  ; [pp+0xd90] IMM: double(-inf) from 0xfff0000000000000
    // 0xb31674: fcmp            d30, d0
    // 0xb31678: b.eq            #0xb316a0
    // 0xb3167c: d0 = 0.500000
    //     0xb3167c: fmov            d0, #0.50000000
    // 0xb31680: fcmp            d1, d0
    // 0xb31684: b.ne            #0xb316a0
    // 0xb31688: fcmp            d30, #0.0
    // 0xb3168c: b.eq            #0xb31698
    // 0xb31690: fsqrt           d0, d30
    // 0xb31694: b               #0xb316d8
    // 0xb31698: d0 = 0.000000
    //     0xb31698: eor             v0.16b, v0.16b, v0.16b
    // 0xb3169c: b               #0xb316d8
    // 0xb316a0: d0 = 0.000000
    //     0xb316a0: fmov            d0, d30
    // 0xb316a4: stp             fp, lr, [SP, #-0x10]!
    // 0xb316a8: mov             fp, SP
    // 0xb316ac: CallRuntime_LibcPow(double, double) -> double
    //     0xb316ac: and             SP, SP, #0xfffffffffffffff0
    //     0xb316b0: mov             sp, SP
    //     0xb316b4: ldr             x16, [THR, #0x4f8]  ; THR::LibcPow
    //     0xb316b8: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb316bc: blr             x16
    //     0xb316c0: movz            x16, #0x8
    //     0xb316c4: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb316c8: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb316cc: sub             sp, x16, #1, lsl #12
    //     0xb316d0: mov             SP, fp
    //     0xb316d4: ldp             fp, lr, [SP], #0x10
    // 0xb316d8: mov             v1.16b, v0.16b
    // 0xb316dc: d0 = 1.000000
    //     0xb316dc: fmov            d0, #1.00000000
    // 0xb316e0: fsub            d2, d0, d1
    // 0xb316e4: d0 = 16.000000
    //     0xb316e4: fmov            d0, #16.00000000
    // 0xb316e8: fmul            d1, d0, d2
    // 0xb316ec: d0 = 4.000000
    //     0xb316ec: fmov            d0, #4.00000000
    // 0xb316f0: fdiv            d2, d1, d0
    // 0xb316f4: d0 = 20.000000
    //     0xb316f4: fmov            d0, #20.00000000
    // 0xb316f8: fsub            d3, d0, d2
    // 0xb316fc: fsub            d2, d0, d1
    // 0xb31700: mov             v5.16b, v3.16b
    // 0xb31704: mov             v4.16b, v2.16b
    // 0xb31708: b               #0xb31714
    // 0xb3170c: d5 = 20.000000
    //     0xb3170c: fmov            d5, #20.00000000
    // 0xb31710: d4 = 20.000000
    //     0xb31710: fmov            d4, #20.00000000
    // 0xb31714: ldur            d1, [fp, #-0x30]
    // 0xb31718: ldur            d2, [fp, #-0x28]
    // 0xb3171c: ldur            d0, [fp, #-0x38]
    // 0xb31720: d3 = 2.000000
    //     0xb31720: fmov            d3, #2.00000000
    // 0xb31724: stur            d5, [fp, #-0x48]
    // 0xb31728: stur            d4, [fp, #-0x50]
    // 0xb3172c: fdiv            d6, d2, d3
    // 0xb31730: stur            d6, [fp, #-0x40]
    // 0xb31734: fdiv            d7, d0, d3
    // 0xb31738: stur            d7, [fp, #-0x20]
    // 0xb3173c: r0 = Offset()
    //     0xb3173c: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0xb31740: ldur            d0, [fp, #-0x40]
    // 0xb31744: stur            x0, [fp, #-0x10]
    // 0xb31748: StoreField: r0->field_7 = d0
    //     0xb31748: stur            d0, [x0, #7]
    // 0xb3174c: ldur            d1, [fp, #-0x20]
    // 0xb31750: StoreField: r0->field_f = d1
    //     0xb31750: stur            d1, [x0, #0xf]
    // 0xb31754: ldur            d3, [fp, #-0x48]
    // 0xb31758: d2 = 2.000000
    //     0xb31758: fmov            d2, #2.00000000
    // 0xb3175c: fmul            d4, d3, d2
    // 0xb31760: stur            d4, [fp, #-0x38]
    // 0xb31764: r0 = Rect()
    //     0xb31764: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0xb31768: stur            x0, [fp, #-0x18]
    // 0xb3176c: ldur            x16, [fp, #-0x10]
    // 0xb31770: stp             x16, x0, [SP, #0x10]
    // 0xb31774: ldur            d0, [fp, #-0x38]
    // 0xb31778: str             d0, [SP, #8]
    // 0xb3177c: str             d0, [SP]
    // 0xb31780: r0 = Rect.fromCenter()
    //     0xb31780: bl              #0x5d4c38  ; [dart:ui] Rect::Rect.fromCenter
    // 0xb31784: ldur            x16, [fp, #-8]
    // 0xb31788: ldur            lr, [fp, #-0x18]
    // 0xb3178c: stp             lr, x16, [SP]
    // 0xb31790: r0 = addOval()
    //     0xb31790: bl              #0xb1e984  ; [dart:ui] _NativePath::addOval
    // 0xb31794: ldur            d0, [fp, #-0x30]
    // 0xb31798: ldur            d1, [fp, #-0x28]
    // 0xb3179c: fcmp            d0, d1
    // 0xb317a0: b.vs            #0xb31a68
    // 0xb317a4: b.le            #0xb31a68
    // 0xb317a8: ldur            d3, [fp, #-0x48]
    // 0xb317ac: ldur            d4, [fp, #-0x50]
    // 0xb317b0: ldur            d1, [fp, #-0x40]
    // 0xb317b4: ldur            d2, [fp, #-0x20]
    // 0xb317b8: fsub            d5, d1, d3
    // 0xb317bc: fsub            d6, d0, d5
    // 0xb317c0: fsub            d0, d6, d4
    // 0xb317c4: stur            d0, [fp, #-0x28]
    // 0xb317c8: r0 = Offset()
    //     0xb317c8: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0xb317cc: ldur            d0, [fp, #-0x28]
    // 0xb317d0: stur            x0, [fp, #-0x10]
    // 0xb317d4: StoreField: r0->field_7 = d0
    //     0xb317d4: stur            d0, [x0, #7]
    // 0xb317d8: ldur            d1, [fp, #-0x20]
    // 0xb317dc: StoreField: r0->field_f = d1
    //     0xb317dc: stur            d1, [x0, #0xf]
    // 0xb317e0: ldur            d3, [fp, #-0x50]
    // 0xb317e4: d2 = 2.000000
    //     0xb317e4: fmov            d2, #2.00000000
    // 0xb317e8: fmul            d4, d3, d2
    // 0xb317ec: stur            d4, [fp, #-0x30]
    // 0xb317f0: r0 = Rect()
    //     0xb317f0: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0xb317f4: stur            x0, [fp, #-0x18]
    // 0xb317f8: ldur            x16, [fp, #-0x10]
    // 0xb317fc: stp             x16, x0, [SP, #0x10]
    // 0xb31800: ldur            d0, [fp, #-0x30]
    // 0xb31804: str             d0, [SP, #8]
    // 0xb31808: str             d0, [SP]
    // 0xb3180c: r0 = Rect.fromCenter()
    //     0xb3180c: bl              #0x5d4c38  ; [dart:ui] Rect::Rect.fromCenter
    // 0xb31810: ldur            x16, [fp, #-8]
    // 0xb31814: ldur            lr, [fp, #-0x18]
    // 0xb31818: stp             lr, x16, [SP]
    // 0xb3181c: r0 = addOval()
    //     0xb3181c: bl              #0xb1e984  ; [dart:ui] _NativePath::addOval
    // 0xb31820: r0 = _NativePath()
    //     0xb31820: bl              #0x601a5c  ; Allocate_NativePathStub -> _NativePath (size=0xc)
    // 0xb31824: stur            x0, [fp, #-0x10]
    // 0xb31828: str             x0, [SP]
    // 0xb3182c: r0 = _constructor()
    //     0xb3182c: bl              #0x50fbb8  ; [dart:ui] _NativePath::_constructor
    // 0xb31830: ldur            d2, [fp, #-0x48]
    // 0xb31834: ldur            d1, [fp, #-0x50]
    // 0xb31838: fsub            d0, d2, d1
    // 0xb3183c: ldur            d4, [fp, #-0x40]
    // 0xb31840: ldur            d3, [fp, #-0x28]
    // 0xb31844: fsub            d5, d4, d3
    // 0xb31848: fdiv            d6, d0, d5
    // 0xb3184c: mov             v0.16b, v6.16b
    // 0xb31850: stp             fp, lr, [SP, #-0x10]!
    // 0xb31854: mov             fp, SP
    // 0xb31858: CallRuntime_LibcAsin(double) -> double
    //     0xb31858: and             SP, SP, #0xfffffffffffffff0
    //     0xb3185c: mov             sp, SP
    //     0xb31860: ldr             x16, [THR, #0x548]  ; THR::LibcAsin
    //     0xb31864: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb31868: blr             x16
    //     0xb3186c: movz            x16, #0x8
    //     0xb31870: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb31874: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb31878: sub             sp, x16, #1, lsl #12
    //     0xb3187c: mov             SP, fp
    //     0xb31880: ldp             fp, lr, [SP], #0x10
    // 0xb31884: mov             v1.16b, v0.16b
    // 0xb31888: stur            d1, [fp, #-0x30]
    // 0xb3188c: stp             fp, lr, [SP, #-0x10]!
    // 0xb31890: mov             fp, SP
    // 0xb31894: CallRuntime_LibcCos(double) -> double
    //     0xb31894: and             SP, SP, #0xfffffffffffffff0
    //     0xb31898: mov             sp, SP
    //     0xb3189c: ldr             x16, [THR, #0x528]  ; THR::LibcCos
    //     0xb318a0: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb318a4: blr             x16
    //     0xb318a8: movz            x16, #0x8
    //     0xb318ac: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb318b0: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb318b4: sub             sp, x16, #1, lsl #12
    //     0xb318b8: mov             SP, fp
    //     0xb318bc: ldp             fp, lr, [SP], #0x10
    // 0xb318c0: mov             v2.16b, v0.16b
    // 0xb318c4: ldur            d1, [fp, #-0x48]
    // 0xb318c8: stur            d2, [fp, #-0x60]
    // 0xb318cc: fmul            d3, d1, d2
    // 0xb318d0: ldur            d4, [fp, #-0x20]
    // 0xb318d4: stur            d3, [fp, #-0x58]
    // 0xb318d8: fsub            d5, d4, d3
    // 0xb318dc: ldur            d0, [fp, #-0x30]
    // 0xb318e0: stur            d5, [fp, #-0x38]
    // 0xb318e4: stp             fp, lr, [SP, #-0x10]!
    // 0xb318e8: mov             fp, SP
    // 0xb318ec: CallRuntime_LibcSin(double) -> double
    //     0xb318ec: and             SP, SP, #0xfffffffffffffff0
    //     0xb318f0: mov             sp, SP
    //     0xb318f4: ldr             x16, [THR, #0x530]  ; THR::LibcSin
    //     0xb318f8: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb318fc: blr             x16
    //     0xb31900: movz            x16, #0x8
    //     0xb31904: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb31908: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb3190c: sub             sp, x16, #1, lsl #12
    //     0xb31910: mov             SP, fp
    //     0xb31914: ldp             fp, lr, [SP], #0x10
    // 0xb31918: mov             v1.16b, v0.16b
    // 0xb3191c: ldur            d0, [fp, #-0x48]
    // 0xb31920: fmul            d2, d0, d1
    // 0xb31924: ldur            d0, [fp, #-0x40]
    // 0xb31928: fadd            d3, d0, d2
    // 0xb3192c: ldur            d4, [fp, #-0x20]
    // 0xb31930: ldur            d2, [fp, #-0x58]
    // 0xb31934: stur            d3, [fp, #-0x70]
    // 0xb31938: fadd            d5, d4, d2
    // 0xb3193c: ldur            d6, [fp, #-0x50]
    // 0xb31940: ldur            d2, [fp, #-0x60]
    // 0xb31944: stur            d5, [fp, #-0x68]
    // 0xb31948: fmul            d7, d6, d2
    // 0xb3194c: fsub            d2, d4, d7
    // 0xb31950: stur            d2, [fp, #-0x58]
    // 0xb31954: fmul            d8, d6, d1
    // 0xb31958: ldur            d1, [fp, #-0x28]
    // 0xb3195c: fadd            d9, d1, d8
    // 0xb31960: stur            d9, [fp, #-0x48]
    // 0xb31964: fadd            d8, d4, d7
    // 0xb31968: stur            d8, [fp, #-0x30]
    // 0xb3196c: ldur            x16, [fp, #-0x10]
    // 0xb31970: str             x16, [SP, #0x10]
    // 0xb31974: str             d0, [SP, #8]
    // 0xb31978: str             d4, [SP]
    // 0xb3197c: r0 = moveTo()
    //     0xb3197c: bl              #0x601858  ; [dart:ui] _NativePath::moveTo
    // 0xb31980: ldur            x16, [fp, #-0x10]
    // 0xb31984: str             x16, [SP, #0x10]
    // 0xb31988: ldur            d0, [fp, #-0x70]
    // 0xb3198c: str             d0, [SP, #8]
    // 0xb31990: ldur            d1, [fp, #-0x38]
    // 0xb31994: str             d1, [SP]
    // 0xb31998: r0 = lineTo()
    //     0xb31998: bl              #0x6010dc  ; [dart:ui] _NativePath::lineTo
    // 0xb3199c: ldur            d0, [fp, #-0x40]
    // 0xb319a0: ldur            d1, [fp, #-0x28]
    // 0xb319a4: fadd            d2, d1, d0
    // 0xb319a8: d0 = 2.000000
    //     0xb319a8: fmov            d0, #2.00000000
    // 0xb319ac: fdiv            d3, d2, d0
    // 0xb319b0: ldur            d4, [fp, #-0x50]
    // 0xb319b4: ldur            d2, [fp, #-0x20]
    // 0xb319b8: fsub            d5, d2, d4
    // 0xb319bc: ldur            x16, [fp, #-0x10]
    // 0xb319c0: str             x16, [SP, #0x20]
    // 0xb319c4: str             d3, [SP, #0x18]
    // 0xb319c8: str             d5, [SP, #0x10]
    // 0xb319cc: ldur            d3, [fp, #-0x48]
    // 0xb319d0: str             d3, [SP, #8]
    // 0xb319d4: ldur            d5, [fp, #-0x58]
    // 0xb319d8: str             d5, [SP]
    // 0xb319dc: r0 = quadraticBezierTo()
    //     0xb319dc: bl              #0xb31a80  ; [dart:ui] _NativePath::quadraticBezierTo
    // 0xb319e0: ldur            x16, [fp, #-0x10]
    // 0xb319e4: str             x16, [SP, #0x10]
    // 0xb319e8: ldur            d0, [fp, #-0x48]
    // 0xb319ec: str             d0, [SP, #8]
    // 0xb319f0: ldur            d0, [fp, #-0x30]
    // 0xb319f4: str             d0, [SP]
    // 0xb319f8: r0 = lineTo()
    //     0xb319f8: bl              #0x6010dc  ; [dart:ui] _NativePath::lineTo
    // 0xb319fc: ldur            d0, [fp, #-0x28]
    // 0xb31a00: ldur            d1, [fp, #-0x70]
    // 0xb31a04: fadd            d2, d0, d1
    // 0xb31a08: d0 = 2.000000
    //     0xb31a08: fmov            d0, #2.00000000
    // 0xb31a0c: fdiv            d3, d2, d0
    // 0xb31a10: ldur            d2, [fp, #-0x50]
    // 0xb31a14: ldur            d0, [fp, #-0x20]
    // 0xb31a18: fadd            d4, d0, d2
    // 0xb31a1c: ldur            x16, [fp, #-0x10]
    // 0xb31a20: str             x16, [SP, #0x20]
    // 0xb31a24: str             d3, [SP, #0x18]
    // 0xb31a28: str             d4, [SP, #0x10]
    // 0xb31a2c: str             d1, [SP, #8]
    // 0xb31a30: ldur            d0, [fp, #-0x68]
    // 0xb31a34: str             d0, [SP]
    // 0xb31a38: r0 = quadraticBezierTo()
    //     0xb31a38: bl              #0xb31a80  ; [dart:ui] _NativePath::quadraticBezierTo
    // 0xb31a3c: ldur            x16, [fp, #-0x10]
    // 0xb31a40: str             x16, [SP]
    // 0xb31a44: r0 = close()
    //     0xb31a44: bl              #0x801118  ; [dart:ui] _NativePath::close
    // 0xb31a48: r16 = Instance_PathOperation
    //     0xb31a48: add             x16, PP, #0x38, lsl #12  ; [pp+0x38770] Obj!PathOperation@c475c1
    //     0xb31a4c: ldr             x16, [x16, #0x770]
    // 0xb31a50: ldur            lr, [fp, #-8]
    // 0xb31a54: stp             lr, x16, [SP, #8]
    // 0xb31a58: ldur            x16, [fp, #-0x10]
    // 0xb31a5c: str             x16, [SP]
    // 0xb31a60: r0 = combine()
    //     0xb31a60: bl              #0x800d3c  ; [dart:ui] Path::combine
    // 0xb31a64: b               #0xb31a6c
    // 0xb31a68: ldur            x0, [fp, #-8]
    // 0xb31a6c: LeaveFrame
    //     0xb31a6c: mov             SP, fp
    //     0xb31a70: ldp             fp, lr, [SP], #0x10
    // 0xb31a74: ret
    //     0xb31a74: ret             
    // 0xb31a78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb31a78: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb31a7c: b               #0xb3159c
  }
  _ _buildVerticalPath(/* No info */) {
    // ** addr: 0xb31d30, size: 0x4fc
    // 0xb31d30: EnterFrame
    //     0xb31d30: stp             fp, lr, [SP, #-0x10]!
    //     0xb31d34: mov             fp, SP
    // 0xb31d38: AllocStack(0x98)
    //     0xb31d38: sub             SP, SP, #0x98
    // 0xb31d3c: CheckStackOverflow
    //     0xb31d3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb31d40: cmp             SP, x16
    //     0xb31d44: b.ls            #0xb32224
    // 0xb31d48: r0 = _NativePath()
    //     0xb31d48: bl              #0x601a5c  ; Allocate_NativePathStub -> _NativePath (size=0xc)
    // 0xb31d4c: stur            x0, [fp, #-8]
    // 0xb31d50: str             x0, [SP]
    // 0xb31d54: r0 = _constructor()
    //     0xb31d54: bl              #0x50fbb8  ; [dart:ui] _NativePath::_constructor
    // 0xb31d58: ldr             x0, [fp, #0x10]
    // 0xb31d5c: LoadField: d0 = r0->field_7
    //     0xb31d5c: ldur            d0, [x0, #7]
    // 0xb31d60: ldr             x0, [fp, #0x18]
    // 0xb31d64: stur            d0, [fp, #-0x38]
    // 0xb31d68: LoadField: d1 = r0->field_13
    //     0xb31d68: ldur            d1, [x0, #0x13]
    // 0xb31d6c: stur            d1, [fp, #-0x30]
    // 0xb31d70: LoadField: d2 = r0->field_1b
    //     0xb31d70: ldur            d2, [x0, #0x1b]
    // 0xb31d74: stur            d2, [fp, #-0x28]
    // 0xb31d78: fcmp            d1, d2
    // 0xb31d7c: b.vs            #0xb31eb8
    // 0xb31d80: b.le            #0xb31eb8
    // 0xb31d84: d3 = 200.000000
    //     0xb31d84: add             x17, PP, #0x25, lsl #12  ; [pp+0x25238] IMM: double(200) from 0x4069000000000000
    //     0xb31d88: ldr             d3, [x17, #0x238]
    // 0xb31d8c: fsub            d4, d1, d2
    // 0xb31d90: fneg            d5, d4
    // 0xb31d94: fdiv            d4, d5, d3
    // 0xb31d98: stur            d4, [fp, #-0x20]
    // 0xb31d9c: r16 = 200
    //     0xb31d9c: movz            x16, #0xc8
    // 0xb31da0: stp             x16, NULL, [SP]
    // 0xb31da4: r0 = _Double.fromInteger()
    //     0xb31da4: bl              #0x5093ec  ; [dart:core] _Double::_Double.fromInteger
    // 0xb31da8: LoadField: d0 = r0->field_7
    //     0xb31da8: ldur            d0, [x0, #7]
    // 0xb31dac: ldur            d1, [fp, #-0x20]
    // 0xb31db0: d30 = 0.000000
    //     0xb31db0: fmov            d30, d0
    // 0xb31db4: d0 = 1.000000
    //     0xb31db4: fmov            d0, #1.00000000
    // 0xb31db8: fcmp            d1, #0.0
    // 0xb31dbc: b.vs            #0xb31e00
    // 0xb31dc0: b.eq            #0xb31e84
    // 0xb31dc4: fcmp            d1, d0
    // 0xb31dc8: b.eq            #0xb31df0
    // 0xb31dcc: d31 = 2.000000
    //     0xb31dcc: fmov            d31, #2.00000000
    // 0xb31dd0: fcmp            d1, d31
    // 0xb31dd4: b.eq            #0xb31df8
    // 0xb31dd8: d31 = 3.000000
    //     0xb31dd8: fmov            d31, #3.00000000
    // 0xb31ddc: fcmp            d1, d31
    // 0xb31de0: b.ne            #0xb31e00
    // 0xb31de4: fmul            d0, d30, d30
    // 0xb31de8: fmul            d0, d0, d30
    // 0xb31dec: b               #0xb31e84
    // 0xb31df0: d0 = 0.000000
    //     0xb31df0: fmov            d0, d30
    // 0xb31df4: b               #0xb31e84
    // 0xb31df8: fmul            d0, d30, d30
    // 0xb31dfc: b               #0xb31e84
    // 0xb31e00: fcmp            d30, d0
    // 0xb31e04: b.vs            #0xb31e14
    // 0xb31e08: b.eq            #0xb31e84
    // 0xb31e0c: fcmp            d30, d1
    // 0xb31e10: b.vc            #0xb31e1c
    // 0xb31e14: d0 = nan
    //     0xb31e14: ldr             d0, [PP, #0x2a38]  ; [pp+0x2a38] IMM: double(nan) from 0x7ff8000000000000
    // 0xb31e18: b               #0xb31e84
    // 0xb31e1c: d0 = -inf
    //     0xb31e1c: ldr             d0, [PP, #0xd90]  ; [pp+0xd90] IMM: double(-inf) from 0xfff0000000000000
    // 0xb31e20: fcmp            d30, d0
    // 0xb31e24: b.eq            #0xb31e4c
    // 0xb31e28: d0 = 0.500000
    //     0xb31e28: fmov            d0, #0.50000000
    // 0xb31e2c: fcmp            d1, d0
    // 0xb31e30: b.ne            #0xb31e4c
    // 0xb31e34: fcmp            d30, #0.0
    // 0xb31e38: b.eq            #0xb31e44
    // 0xb31e3c: fsqrt           d0, d30
    // 0xb31e40: b               #0xb31e84
    // 0xb31e44: d0 = 0.000000
    //     0xb31e44: eor             v0.16b, v0.16b, v0.16b
    // 0xb31e48: b               #0xb31e84
    // 0xb31e4c: d0 = 0.000000
    //     0xb31e4c: fmov            d0, d30
    // 0xb31e50: stp             fp, lr, [SP, #-0x10]!
    // 0xb31e54: mov             fp, SP
    // 0xb31e58: CallRuntime_LibcPow(double, double) -> double
    //     0xb31e58: and             SP, SP, #0xfffffffffffffff0
    //     0xb31e5c: mov             sp, SP
    //     0xb31e60: ldr             x16, [THR, #0x4f8]  ; THR::LibcPow
    //     0xb31e64: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb31e68: blr             x16
    //     0xb31e6c: movz            x16, #0x8
    //     0xb31e70: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb31e74: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb31e78: sub             sp, x16, #1, lsl #12
    //     0xb31e7c: mov             SP, fp
    //     0xb31e80: ldp             fp, lr, [SP], #0x10
    // 0xb31e84: mov             v1.16b, v0.16b
    // 0xb31e88: d0 = 1.000000
    //     0xb31e88: fmov            d0, #1.00000000
    // 0xb31e8c: fsub            d2, d0, d1
    // 0xb31e90: d0 = 16.000000
    //     0xb31e90: fmov            d0, #16.00000000
    // 0xb31e94: fmul            d1, d0, d2
    // 0xb31e98: d0 = 4.000000
    //     0xb31e98: fmov            d0, #4.00000000
    // 0xb31e9c: fdiv            d2, d1, d0
    // 0xb31ea0: d0 = 20.000000
    //     0xb31ea0: fmov            d0, #20.00000000
    // 0xb31ea4: fsub            d3, d0, d2
    // 0xb31ea8: fsub            d2, d0, d1
    // 0xb31eac: mov             v5.16b, v3.16b
    // 0xb31eb0: mov             v4.16b, v2.16b
    // 0xb31eb4: b               #0xb31ec0
    // 0xb31eb8: d5 = 20.000000
    //     0xb31eb8: fmov            d5, #20.00000000
    // 0xb31ebc: d4 = 20.000000
    //     0xb31ebc: fmov            d4, #20.00000000
    // 0xb31ec0: ldur            d1, [fp, #-0x30]
    // 0xb31ec4: ldur            d2, [fp, #-0x28]
    // 0xb31ec8: ldur            d0, [fp, #-0x38]
    // 0xb31ecc: d3 = 2.000000
    //     0xb31ecc: fmov            d3, #2.00000000
    // 0xb31ed0: stur            d5, [fp, #-0x48]
    // 0xb31ed4: stur            d4, [fp, #-0x50]
    // 0xb31ed8: fdiv            d6, d2, d3
    // 0xb31edc: stur            d6, [fp, #-0x40]
    // 0xb31ee0: fdiv            d7, d0, d3
    // 0xb31ee4: stur            d7, [fp, #-0x20]
    // 0xb31ee8: r0 = Offset()
    //     0xb31ee8: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0xb31eec: ldur            d0, [fp, #-0x20]
    // 0xb31ef0: stur            x0, [fp, #-0x10]
    // 0xb31ef4: StoreField: r0->field_7 = d0
    //     0xb31ef4: stur            d0, [x0, #7]
    // 0xb31ef8: ldur            d1, [fp, #-0x40]
    // 0xb31efc: StoreField: r0->field_f = d1
    //     0xb31efc: stur            d1, [x0, #0xf]
    // 0xb31f00: ldur            d3, [fp, #-0x48]
    // 0xb31f04: d2 = 2.000000
    //     0xb31f04: fmov            d2, #2.00000000
    // 0xb31f08: fmul            d4, d3, d2
    // 0xb31f0c: stur            d4, [fp, #-0x38]
    // 0xb31f10: r0 = Rect()
    //     0xb31f10: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0xb31f14: stur            x0, [fp, #-0x18]
    // 0xb31f18: ldur            x16, [fp, #-0x10]
    // 0xb31f1c: stp             x16, x0, [SP, #0x10]
    // 0xb31f20: ldur            d0, [fp, #-0x38]
    // 0xb31f24: str             d0, [SP, #8]
    // 0xb31f28: str             d0, [SP]
    // 0xb31f2c: r0 = Rect.fromCenter()
    //     0xb31f2c: bl              #0x5d4c38  ; [dart:ui] Rect::Rect.fromCenter
    // 0xb31f30: ldur            x16, [fp, #-8]
    // 0xb31f34: ldur            lr, [fp, #-0x18]
    // 0xb31f38: stp             lr, x16, [SP]
    // 0xb31f3c: r0 = addOval()
    //     0xb31f3c: bl              #0xb1e984  ; [dart:ui] _NativePath::addOval
    // 0xb31f40: ldur            d0, [fp, #-0x30]
    // 0xb31f44: ldur            d1, [fp, #-0x28]
    // 0xb31f48: fcmp            d0, d1
    // 0xb31f4c: b.vs            #0xb32214
    // 0xb31f50: b.le            #0xb32214
    // 0xb31f54: ldur            d3, [fp, #-0x48]
    // 0xb31f58: ldur            d4, [fp, #-0x50]
    // 0xb31f5c: ldur            d2, [fp, #-0x40]
    // 0xb31f60: ldur            d1, [fp, #-0x20]
    // 0xb31f64: fsub            d5, d2, d3
    // 0xb31f68: fsub            d6, d0, d5
    // 0xb31f6c: fsub            d0, d6, d4
    // 0xb31f70: stur            d0, [fp, #-0x28]
    // 0xb31f74: r0 = Offset()
    //     0xb31f74: bl              #0x503650  ; AllocateOffsetStub -> Offset (size=0x18)
    // 0xb31f78: ldur            d0, [fp, #-0x20]
    // 0xb31f7c: stur            x0, [fp, #-0x10]
    // 0xb31f80: StoreField: r0->field_7 = d0
    //     0xb31f80: stur            d0, [x0, #7]
    // 0xb31f84: ldur            d1, [fp, #-0x28]
    // 0xb31f88: StoreField: r0->field_f = d1
    //     0xb31f88: stur            d1, [x0, #0xf]
    // 0xb31f8c: ldur            d3, [fp, #-0x50]
    // 0xb31f90: d2 = 2.000000
    //     0xb31f90: fmov            d2, #2.00000000
    // 0xb31f94: fmul            d4, d3, d2
    // 0xb31f98: stur            d4, [fp, #-0x30]
    // 0xb31f9c: r0 = Rect()
    //     0xb31f9c: bl              #0x507d7c  ; AllocateRectStub -> Rect (size=0x28)
    // 0xb31fa0: stur            x0, [fp, #-0x18]
    // 0xb31fa4: ldur            x16, [fp, #-0x10]
    // 0xb31fa8: stp             x16, x0, [SP, #0x10]
    // 0xb31fac: ldur            d0, [fp, #-0x30]
    // 0xb31fb0: str             d0, [SP, #8]
    // 0xb31fb4: str             d0, [SP]
    // 0xb31fb8: r0 = Rect.fromCenter()
    //     0xb31fb8: bl              #0x5d4c38  ; [dart:ui] Rect::Rect.fromCenter
    // 0xb31fbc: ldur            x16, [fp, #-8]
    // 0xb31fc0: ldur            lr, [fp, #-0x18]
    // 0xb31fc4: stp             lr, x16, [SP]
    // 0xb31fc8: r0 = addOval()
    //     0xb31fc8: bl              #0xb1e984  ; [dart:ui] _NativePath::addOval
    // 0xb31fcc: r0 = _NativePath()
    //     0xb31fcc: bl              #0x601a5c  ; Allocate_NativePathStub -> _NativePath (size=0xc)
    // 0xb31fd0: stur            x0, [fp, #-0x10]
    // 0xb31fd4: str             x0, [SP]
    // 0xb31fd8: r0 = _constructor()
    //     0xb31fd8: bl              #0x50fbb8  ; [dart:ui] _NativePath::_constructor
    // 0xb31fdc: ldur            d2, [fp, #-0x48]
    // 0xb31fe0: ldur            d1, [fp, #-0x50]
    // 0xb31fe4: fsub            d0, d2, d1
    // 0xb31fe8: ldur            d4, [fp, #-0x40]
    // 0xb31fec: ldur            d3, [fp, #-0x28]
    // 0xb31ff0: fsub            d5, d4, d3
    // 0xb31ff4: fdiv            d6, d0, d5
    // 0xb31ff8: mov             v0.16b, v6.16b
    // 0xb31ffc: stp             fp, lr, [SP, #-0x10]!
    // 0xb32000: mov             fp, SP
    // 0xb32004: CallRuntime_LibcAsin(double) -> double
    //     0xb32004: and             SP, SP, #0xfffffffffffffff0
    //     0xb32008: mov             sp, SP
    //     0xb3200c: ldr             x16, [THR, #0x548]  ; THR::LibcAsin
    //     0xb32010: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb32014: blr             x16
    //     0xb32018: movz            x16, #0x8
    //     0xb3201c: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb32020: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb32024: sub             sp, x16, #1, lsl #12
    //     0xb32028: mov             SP, fp
    //     0xb3202c: ldp             fp, lr, [SP], #0x10
    // 0xb32030: mov             v1.16b, v0.16b
    // 0xb32034: stur            d1, [fp, #-0x30]
    // 0xb32038: stp             fp, lr, [SP, #-0x10]!
    // 0xb3203c: mov             fp, SP
    // 0xb32040: CallRuntime_LibcCos(double) -> double
    //     0xb32040: and             SP, SP, #0xfffffffffffffff0
    //     0xb32044: mov             sp, SP
    //     0xb32048: ldr             x16, [THR, #0x528]  ; THR::LibcCos
    //     0xb3204c: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb32050: blr             x16
    //     0xb32054: movz            x16, #0x8
    //     0xb32058: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb3205c: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb32060: sub             sp, x16, #1, lsl #12
    //     0xb32064: mov             SP, fp
    //     0xb32068: ldp             fp, lr, [SP], #0x10
    // 0xb3206c: mov             v2.16b, v0.16b
    // 0xb32070: ldur            d1, [fp, #-0x48]
    // 0xb32074: stur            d2, [fp, #-0x60]
    // 0xb32078: fmul            d3, d1, d2
    // 0xb3207c: ldur            d4, [fp, #-0x20]
    // 0xb32080: stur            d3, [fp, #-0x58]
    // 0xb32084: fsub            d5, d4, d3
    // 0xb32088: ldur            d0, [fp, #-0x30]
    // 0xb3208c: stur            d5, [fp, #-0x38]
    // 0xb32090: stp             fp, lr, [SP, #-0x10]!
    // 0xb32094: mov             fp, SP
    // 0xb32098: CallRuntime_LibcSin(double) -> double
    //     0xb32098: and             SP, SP, #0xfffffffffffffff0
    //     0xb3209c: mov             sp, SP
    //     0xb320a0: ldr             x16, [THR, #0x530]  ; THR::LibcSin
    //     0xb320a4: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb320a8: blr             x16
    //     0xb320ac: movz            x16, #0x8
    //     0xb320b0: str             x16, [THR, #0x718]  ; THR::vm_tag
    //     0xb320b4: ldr             x16, [THR, #0x6e8]  ; THR::saved_stack_limit
    //     0xb320b8: sub             sp, x16, #1, lsl #12
    //     0xb320bc: mov             SP, fp
    //     0xb320c0: ldp             fp, lr, [SP], #0x10
    // 0xb320c4: mov             v1.16b, v0.16b
    // 0xb320c8: ldur            d0, [fp, #-0x48]
    // 0xb320cc: fmul            d2, d0, d1
    // 0xb320d0: ldur            d0, [fp, #-0x40]
    // 0xb320d4: fadd            d3, d0, d2
    // 0xb320d8: ldur            d4, [fp, #-0x20]
    // 0xb320dc: ldur            d2, [fp, #-0x58]
    // 0xb320e0: stur            d3, [fp, #-0x70]
    // 0xb320e4: fadd            d5, d4, d2
    // 0xb320e8: ldur            d6, [fp, #-0x50]
    // 0xb320ec: ldur            d2, [fp, #-0x60]
    // 0xb320f0: stur            d5, [fp, #-0x68]
    // 0xb320f4: fmul            d7, d6, d2
    // 0xb320f8: fsub            d2, d4, d7
    // 0xb320fc: stur            d2, [fp, #-0x58]
    // 0xb32100: fmul            d8, d6, d1
    // 0xb32104: ldur            d1, [fp, #-0x28]
    // 0xb32108: fadd            d9, d1, d8
    // 0xb3210c: stur            d9, [fp, #-0x48]
    // 0xb32110: fadd            d8, d4, d7
    // 0xb32114: stur            d8, [fp, #-0x30]
    // 0xb32118: ldur            x16, [fp, #-0x10]
    // 0xb3211c: str             x16, [SP, #0x10]
    // 0xb32120: str             d4, [SP, #8]
    // 0xb32124: str             d0, [SP]
    // 0xb32128: r0 = moveTo()
    //     0xb32128: bl              #0x601858  ; [dart:ui] _NativePath::moveTo
    // 0xb3212c: ldur            x16, [fp, #-0x10]
    // 0xb32130: str             x16, [SP, #0x10]
    // 0xb32134: ldur            d0, [fp, #-0x38]
    // 0xb32138: str             d0, [SP, #8]
    // 0xb3213c: ldur            d0, [fp, #-0x70]
    // 0xb32140: str             d0, [SP]
    // 0xb32144: r0 = lineTo()
    //     0xb32144: bl              #0x6010dc  ; [dart:ui] _NativePath::lineTo
    // 0xb32148: ldur            d1, [fp, #-0x50]
    // 0xb3214c: ldur            d0, [fp, #-0x20]
    // 0xb32150: fsub            d2, d0, d1
    // 0xb32154: ldur            d3, [fp, #-0x40]
    // 0xb32158: ldur            d4, [fp, #-0x28]
    // 0xb3215c: fadd            d5, d4, d3
    // 0xb32160: d3 = 2.000000
    //     0xb32160: fmov            d3, #2.00000000
    // 0xb32164: fdiv            d6, d5, d3
    // 0xb32168: ldur            x16, [fp, #-0x10]
    // 0xb3216c: str             x16, [SP, #0x20]
    // 0xb32170: str             d2, [SP, #0x18]
    // 0xb32174: str             d6, [SP, #0x10]
    // 0xb32178: ldur            d2, [fp, #-0x58]
    // 0xb3217c: str             d2, [SP, #8]
    // 0xb32180: ldur            d2, [fp, #-0x48]
    // 0xb32184: str             d2, [SP]
    // 0xb32188: r0 = quadraticBezierTo()
    //     0xb32188: bl              #0xb31a80  ; [dart:ui] _NativePath::quadraticBezierTo
    // 0xb3218c: ldur            x16, [fp, #-0x10]
    // 0xb32190: str             x16, [SP, #0x10]
    // 0xb32194: ldur            d0, [fp, #-0x30]
    // 0xb32198: str             d0, [SP, #8]
    // 0xb3219c: ldur            d0, [fp, #-0x48]
    // 0xb321a0: str             d0, [SP]
    // 0xb321a4: r0 = lineTo()
    //     0xb321a4: bl              #0x6010dc  ; [dart:ui] _NativePath::lineTo
    // 0xb321a8: ldur            d1, [fp, #-0x50]
    // 0xb321ac: ldur            d0, [fp, #-0x20]
    // 0xb321b0: fadd            d2, d0, d1
    // 0xb321b4: ldur            d0, [fp, #-0x28]
    // 0xb321b8: ldur            d1, [fp, #-0x70]
    // 0xb321bc: fadd            d3, d0, d1
    // 0xb321c0: d0 = 2.000000
    //     0xb321c0: fmov            d0, #2.00000000
    // 0xb321c4: fdiv            d4, d3, d0
    // 0xb321c8: ldur            x16, [fp, #-0x10]
    // 0xb321cc: str             x16, [SP, #0x20]
    // 0xb321d0: str             d2, [SP, #0x18]
    // 0xb321d4: str             d4, [SP, #0x10]
    // 0xb321d8: ldur            d0, [fp, #-0x68]
    // 0xb321dc: str             d0, [SP, #8]
    // 0xb321e0: str             d1, [SP]
    // 0xb321e4: r0 = quadraticBezierTo()
    //     0xb321e4: bl              #0xb31a80  ; [dart:ui] _NativePath::quadraticBezierTo
    // 0xb321e8: ldur            x16, [fp, #-0x10]
    // 0xb321ec: str             x16, [SP]
    // 0xb321f0: r0 = close()
    //     0xb321f0: bl              #0x801118  ; [dart:ui] _NativePath::close
    // 0xb321f4: r16 = Instance_PathOperation
    //     0xb321f4: add             x16, PP, #0x38, lsl #12  ; [pp+0x38770] Obj!PathOperation@c475c1
    //     0xb321f8: ldr             x16, [x16, #0x770]
    // 0xb321fc: ldur            lr, [fp, #-8]
    // 0xb32200: stp             lr, x16, [SP, #8]
    // 0xb32204: ldur            x16, [fp, #-0x10]
    // 0xb32208: str             x16, [SP]
    // 0xb3220c: r0 = combine()
    //     0xb3220c: bl              #0x800d3c  ; [dart:ui] Path::combine
    // 0xb32210: b               #0xb32218
    // 0xb32214: ldur            x0, [fp, #-8]
    // 0xb32218: LeaveFrame
    //     0xb32218: mov             SP, fp
    //     0xb3221c: ldp             fp, lr, [SP], #0x10
    // 0xb32220: ret
    //     0xb32220: ret             
    // 0xb32224: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb32224: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb32228: b               #0xb31d48
  }
  _ shouldRepaint(/* No info */) {
    // ** addr: 0xb51ea4, size: 0x148
    // 0xb51ea4: EnterFrame
    //     0xb51ea4: stp             fp, lr, [SP, #-0x10]!
    //     0xb51ea8: mov             fp, SP
    // 0xb51eac: AllocStack(0x20)
    //     0xb51eac: sub             SP, SP, #0x20
    // 0xb51eb0: CheckStackOverflow
    //     0xb51eb0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb51eb4: cmp             SP, x16
    //     0xb51eb8: b.ls            #0xb51fe4
    // 0xb51ebc: ldr             x0, [fp, #0x10]
    // 0xb51ec0: r2 = Null
    //     0xb51ec0: mov             x2, NULL
    // 0xb51ec4: r1 = Null
    //     0xb51ec4: mov             x1, NULL
    // 0xb51ec8: r4 = 59
    //     0xb51ec8: movz            x4, #0x3b
    // 0xb51ecc: branchIfSmi(r0, 0xb51ed8)
    //     0xb51ecc: tbz             w0, #0, #0xb51ed8
    // 0xb51ed0: r4 = LoadClassIdInstr(r0)
    //     0xb51ed0: ldur            x4, [x0, #-1]
    //     0xb51ed4: ubfx            x4, x4, #0xc, #0x14
    // 0xb51ed8: r17 = 4543
    //     0xb51ed8: movz            x17, #0x11bf
    // 0xb51edc: cmp             x4, x17
    // 0xb51ee0: b.eq            #0xb51ef8
    // 0xb51ee4: r8 = _WaterDropPainter
    //     0xb51ee4: add             x8, PP, #0x46, lsl #12  ; [pp+0x464f8] Type: _WaterDropPainter
    //     0xb51ee8: ldr             x8, [x8, #0x4f8]
    // 0xb51eec: r3 = Null
    //     0xb51eec: add             x3, PP, #0x46, lsl #12  ; [pp+0x46500] Null
    //     0xb51ef0: ldr             x3, [x3, #0x500]
    // 0xb51ef4: r0 = DefaultTypeTest()
    //     0xb51ef4: bl              #0xc5cf48  ; DefaultTypeTestStub
    // 0xb51ef8: ldr             x0, [fp, #0x10]
    // 0xb51efc: LoadField: r1 = r0->field_b
    //     0xb51efc: ldur            w1, [x0, #0xb]
    // 0xb51f00: DecompressPointer r1
    //     0xb51f00: add             x1, x1, HEAP, lsl #32
    // 0xb51f04: ldr             x2, [fp, #0x18]
    // 0xb51f08: LoadField: r3 = r2->field_b
    //     0xb51f08: ldur            w3, [x2, #0xb]
    // 0xb51f0c: DecompressPointer r3
    //     0xb51f0c: add             x3, x3, HEAP, lsl #32
    // 0xb51f10: cmp             w1, w3
    // 0xb51f14: b.ne            #0xb51fcc
    // 0xb51f18: LoadField: r1 = r0->field_f
    //     0xb51f18: ldur            w1, [x0, #0xf]
    // 0xb51f1c: DecompressPointer r1
    //     0xb51f1c: add             x1, x1, HEAP, lsl #32
    // 0xb51f20: stur            x1, [fp, #-0x10]
    // 0xb51f24: LoadField: r3 = r2->field_f
    //     0xb51f24: ldur            w3, [x2, #0xf]
    // 0xb51f28: DecompressPointer r3
    //     0xb51f28: add             x3, x3, HEAP, lsl #32
    // 0xb51f2c: stur            x3, [fp, #-8]
    // 0xb51f30: cmp             w1, w3
    // 0xb51f34: b.ne            #0xb51f40
    // 0xb51f38: mov             x1, x0
    // 0xb51f3c: b               #0xb51f7c
    // 0xb51f40: r16 = Color
    //     0xb51f40: add             x16, PP, #0xf, lsl #12  ; [pp+0xf2f8] Type: Color
    //     0xb51f44: ldr             x16, [x16, #0x2f8]
    // 0xb51f48: r30 = Color
    //     0xb51f48: add             lr, PP, #0xf, lsl #12  ; [pp+0xf2f8] Type: Color
    //     0xb51f4c: ldr             lr, [lr, #0x2f8]
    // 0xb51f50: stp             lr, x16, [SP]
    // 0xb51f54: r0 = ==()
    //     0xb51f54: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0xb51f58: tbnz            w0, #4, #0xb51fcc
    // 0xb51f5c: ldur            x1, [fp, #-0x10]
    // 0xb51f60: ldur            x2, [fp, #-8]
    // 0xb51f64: LoadField: r3 = r2->field_7
    //     0xb51f64: ldur            x3, [x2, #7]
    // 0xb51f68: LoadField: r2 = r1->field_7
    //     0xb51f68: ldur            x2, [x1, #7]
    // 0xb51f6c: cmp             x3, x2
    // 0xb51f70: b.ne            #0xb51fcc
    // 0xb51f74: ldr             x2, [fp, #0x18]
    // 0xb51f78: ldr             x1, [fp, #0x10]
    // 0xb51f7c: LoadField: d0 = r1->field_1b
    //     0xb51f7c: ldur            d0, [x1, #0x1b]
    // 0xb51f80: LoadField: d1 = r2->field_1b
    //     0xb51f80: ldur            d1, [x2, #0x1b]
    // 0xb51f84: fcmp            d0, d1
    // 0xb51f88: b.ne            #0xb51fcc
    // 0xb51f8c: LoadField: d2 = r1->field_13
    //     0xb51f8c: ldur            d2, [x1, #0x13]
    // 0xb51f90: LoadField: d3 = r2->field_13
    //     0xb51f90: ldur            d3, [x2, #0x13]
    // 0xb51f94: fcmp            d2, d3
    // 0xb51f98: b.eq            #0xb51fd4
    // 0xb51f9c: fcmp            d2, d0
    // 0xb51fa0: b.vs            #0xb51fcc
    // 0xb51fa4: b.ge            #0xb51fcc
    // 0xb51fa8: fcmp            d3, d1
    // 0xb51fac: b.vs            #0xb51fb4
    // 0xb51fb0: b.lt            #0xb51fbc
    // 0xb51fb4: r1 = false
    //     0xb51fb4: add             x1, NULL, #0x30  ; false
    // 0xb51fb8: b               #0xb51fc0
    // 0xb51fbc: r1 = true
    //     0xb51fbc: add             x1, NULL, #0x20  ; true
    // 0xb51fc0: eor             x2, x1, #0x10
    // 0xb51fc4: mov             x0, x2
    // 0xb51fc8: b               #0xb51fd8
    // 0xb51fcc: r0 = true
    //     0xb51fcc: add             x0, NULL, #0x20  ; true
    // 0xb51fd0: b               #0xb51fd8
    // 0xb51fd4: r0 = false
    //     0xb51fd4: add             x0, NULL, #0x30  ; false
    // 0xb51fd8: LeaveFrame
    //     0xb51fd8: mov             SP, fp
    //     0xb51fdc: ldp             fp, lr, [SP], #0x10
    // 0xb51fe0: ret
    //     0xb51fe0: ret             
    // 0xb51fe4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb51fe4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb51fe8: b               #0xb51ebc
  }
}

// class id: 4562, size: 0x14, field offset: 0xc
class _IndicatorListenable<X0 bound IndicatorNotifier> extends ValueListenable<X0 bound IndicatorNotifier> {

  _ addListener(/* No info */) {
    // ** addr: 0x82f718, size: 0x14c
    // 0x82f718: EnterFrame
    //     0x82f718: stp             fp, lr, [SP, #-0x10]!
    //     0x82f71c: mov             fp, SP
    // 0x82f720: AllocStack(0x20)
    //     0x82f720: sub             SP, SP, #0x20
    // 0x82f724: CheckStackOverflow
    //     0x82f724: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x82f728: cmp             SP, x16
    //     0x82f72c: b.ls            #0x82f858
    // 0x82f730: ldr             x0, [fp, #0x18]
    // 0x82f734: LoadField: r1 = r0->field_f
    //     0x82f734: ldur            w1, [x0, #0xf]
    // 0x82f738: DecompressPointer r1
    //     0x82f738: add             x1, x1, HEAP, lsl #32
    // 0x82f73c: stur            x1, [fp, #-0x10]
    // 0x82f740: LoadField: r2 = r1->field_b
    //     0x82f740: ldur            w2, [x1, #0xb]
    // 0x82f744: DecompressPointer r2
    //     0x82f744: add             x2, x2, HEAP, lsl #32
    // 0x82f748: cbnz            w2, #0x82f788
    // 0x82f74c: LoadField: r2 = r0->field_b
    //     0x82f74c: ldur            w2, [x0, #0xb]
    // 0x82f750: DecompressPointer r2
    //     0x82f750: add             x2, x2, HEAP, lsl #32
    // 0x82f754: stur            x2, [fp, #-8]
    // 0x82f758: r1 = 1
    //     0x82f758: movz            x1, #0x1
    // 0x82f75c: r0 = AllocateContext()
    //     0x82f75c: bl              #0xc5def4  ; AllocateContextStub
    // 0x82f760: mov             x1, x0
    // 0x82f764: ldr             x0, [fp, #0x18]
    // 0x82f768: StoreField: r1->field_f = r0
    //     0x82f768: stur            w0, [x1, #0xf]
    // 0x82f76c: mov             x2, x1
    // 0x82f770: r1 = Function '_onNotify@765089737':.
    //     0x82f770: add             x1, PP, #0x31, lsl #12  ; [pp+0x31698] AnonymousClosure: (0x82f864), in [package:easy_refresh/easy_refresh.dart] _IndicatorListenable::_onNotify (0x82f8ac)
    //     0x82f774: ldr             x1, [x1, #0x698]
    // 0x82f778: r0 = AllocateClosure()
    //     0x82f778: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x82f77c: ldur            x16, [fp, #-8]
    // 0x82f780: stp             x0, x16, [SP]
    // 0x82f784: r0 = addListener()
    //     0x82f784: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0x82f788: ldur            x3, [fp, #-0x10]
    // 0x82f78c: LoadField: r2 = r3->field_7
    //     0x82f78c: ldur            w2, [x3, #7]
    // 0x82f790: DecompressPointer r2
    //     0x82f790: add             x2, x2, HEAP, lsl #32
    // 0x82f794: ldr             x0, [fp, #0x10]
    // 0x82f798: r1 = Null
    //     0x82f798: mov             x1, NULL
    // 0x82f79c: cmp             w2, NULL
    // 0x82f7a0: b.eq            #0x82f7c0
    // 0x82f7a4: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x82f7a4: ldur            w4, [x2, #0x17]
    // 0x82f7a8: DecompressPointer r4
    //     0x82f7a8: add             x4, x4, HEAP, lsl #32
    // 0x82f7ac: r8 = X0
    //     0x82f7ac: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x82f7b0: LoadField: r9 = r4->field_7
    //     0x82f7b0: ldur            x9, [x4, #7]
    // 0x82f7b4: r3 = Null
    //     0x82f7b4: add             x3, PP, #0x31, lsl #12  ; [pp+0x316b0] Null
    //     0x82f7b8: ldr             x3, [x3, #0x6b0]
    // 0x82f7bc: blr             x9
    // 0x82f7c0: ldur            x0, [fp, #-0x10]
    // 0x82f7c4: LoadField: r1 = r0->field_b
    //     0x82f7c4: ldur            w1, [x0, #0xb]
    // 0x82f7c8: DecompressPointer r1
    //     0x82f7c8: add             x1, x1, HEAP, lsl #32
    // 0x82f7cc: stur            x1, [fp, #-8]
    // 0x82f7d0: LoadField: r2 = r0->field_f
    //     0x82f7d0: ldur            w2, [x0, #0xf]
    // 0x82f7d4: DecompressPointer r2
    //     0x82f7d4: add             x2, x2, HEAP, lsl #32
    // 0x82f7d8: LoadField: r3 = r2->field_b
    //     0x82f7d8: ldur            w3, [x2, #0xb]
    // 0x82f7dc: DecompressPointer r3
    //     0x82f7dc: add             x3, x3, HEAP, lsl #32
    // 0x82f7e0: cmp             w1, w3
    // 0x82f7e4: b.ne            #0x82f7f0
    // 0x82f7e8: str             x0, [SP]
    // 0x82f7ec: r0 = _growToNextCapacity()
    //     0x82f7ec: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x82f7f0: ldur            x2, [fp, #-0x10]
    // 0x82f7f4: ldur            x3, [fp, #-8]
    // 0x82f7f8: r4 = LoadInt32Instr(r3)
    //     0x82f7f8: sbfx            x4, x3, #1, #0x1f
    // 0x82f7fc: add             x0, x4, #1
    // 0x82f800: lsl             x3, x0, #1
    // 0x82f804: StoreField: r2->field_b = r3
    //     0x82f804: stur            w3, [x2, #0xb]
    // 0x82f808: mov             x1, x4
    // 0x82f80c: cmp             x1, x0
    // 0x82f810: b.hs            #0x82f860
    // 0x82f814: LoadField: r1 = r2->field_f
    //     0x82f814: ldur            w1, [x2, #0xf]
    // 0x82f818: DecompressPointer r1
    //     0x82f818: add             x1, x1, HEAP, lsl #32
    // 0x82f81c: ldr             x0, [fp, #0x10]
    // 0x82f820: ArrayStore: r1[r4] = r0  ; List_4
    //     0x82f820: add             x25, x1, x4, lsl #2
    //     0x82f824: add             x25, x25, #0xf
    //     0x82f828: str             w0, [x25]
    //     0x82f82c: tbz             w0, #0, #0x82f848
    //     0x82f830: ldurb           w16, [x1, #-1]
    //     0x82f834: ldurb           w17, [x0, #-1]
    //     0x82f838: and             x16, x17, x16, lsr #2
    //     0x82f83c: tst             x16, HEAP, lsr #32
    //     0x82f840: b.eq            #0x82f848
    //     0x82f844: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x82f848: r0 = Null
    //     0x82f848: mov             x0, NULL
    // 0x82f84c: LeaveFrame
    //     0x82f84c: mov             SP, fp
    //     0x82f850: ldp             fp, lr, [SP], #0x10
    // 0x82f854: ret
    //     0x82f854: ret             
    // 0x82f858: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x82f858: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x82f85c: b               #0x82f730
    // 0x82f860: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x82f860: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  [closure] void _onNotify(dynamic) {
    // ** addr: 0x82f864, size: 0x48
    // 0x82f864: EnterFrame
    //     0x82f864: stp             fp, lr, [SP, #-0x10]!
    //     0x82f868: mov             fp, SP
    // 0x82f86c: AllocStack(0x8)
    //     0x82f86c: sub             SP, SP, #8
    // 0x82f870: SetupParameters()
    //     0x82f870: ldr             x0, [fp, #0x10]
    //     0x82f874: ldur            w1, [x0, #0x17]
    //     0x82f878: add             x1, x1, HEAP, lsl #32
    // 0x82f87c: CheckStackOverflow
    //     0x82f87c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x82f880: cmp             SP, x16
    //     0x82f884: b.ls            #0x82f8a4
    // 0x82f888: LoadField: r0 = r1->field_f
    //     0x82f888: ldur            w0, [x1, #0xf]
    // 0x82f88c: DecompressPointer r0
    //     0x82f88c: add             x0, x0, HEAP, lsl #32
    // 0x82f890: str             x0, [SP]
    // 0x82f894: r0 = _onNotify()
    //     0x82f894: bl              #0x82f8ac  ; [package:easy_refresh/easy_refresh.dart] _IndicatorListenable::_onNotify
    // 0x82f898: LeaveFrame
    //     0x82f898: mov             SP, fp
    //     0x82f89c: ldp             fp, lr, [SP], #0x10
    // 0x82f8a0: ret
    //     0x82f8a0: ret             
    // 0x82f8a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x82f8a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x82f8a8: b               #0x82f888
  }
  _ _onNotify(/* No info */) {
    // ** addr: 0x82f8ac, size: 0x148
    // 0x82f8ac: EnterFrame
    //     0x82f8ac: stp             fp, lr, [SP, #-0x10]!
    //     0x82f8b0: mov             fp, SP
    // 0x82f8b4: AllocStack(0x30)
    //     0x82f8b4: sub             SP, SP, #0x30
    // 0x82f8b8: CheckStackOverflow
    //     0x82f8b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x82f8bc: cmp             SP, x16
    //     0x82f8c0: b.ls            #0x82f9dc
    // 0x82f8c4: ldr             x0, [fp, #0x10]
    // 0x82f8c8: LoadField: r1 = r0->field_f
    //     0x82f8c8: ldur            w1, [x0, #0xf]
    // 0x82f8cc: DecompressPointer r1
    //     0x82f8cc: add             x1, x1, HEAP, lsl #32
    // 0x82f8d0: stur            x1, [fp, #-8]
    // 0x82f8d4: LoadField: r3 = r1->field_7
    //     0x82f8d4: ldur            w3, [x1, #7]
    // 0x82f8d8: DecompressPointer r3
    //     0x82f8d8: add             x3, x3, HEAP, lsl #32
    // 0x82f8dc: stur            x3, [fp, #-0x28]
    // 0x82f8e0: LoadField: r0 = r1->field_b
    //     0x82f8e0: ldur            w0, [x1, #0xb]
    // 0x82f8e4: DecompressPointer r0
    //     0x82f8e4: add             x0, x0, HEAP, lsl #32
    // 0x82f8e8: r4 = LoadInt32Instr(r0)
    //     0x82f8e8: sbfx            x4, x0, #1, #0x1f
    // 0x82f8ec: stur            x4, [fp, #-0x20]
    // 0x82f8f0: r2 = 0
    //     0x82f8f0: movz            x2, #0
    // 0x82f8f4: CheckStackOverflow
    //     0x82f8f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x82f8f8: cmp             SP, x16
    //     0x82f8fc: b.ls            #0x82f9e4
    // 0x82f900: LoadField: r0 = r1->field_b
    //     0x82f900: ldur            w0, [x1, #0xb]
    // 0x82f904: DecompressPointer r0
    //     0x82f904: add             x0, x0, HEAP, lsl #32
    // 0x82f908: r5 = LoadInt32Instr(r0)
    //     0x82f908: sbfx            x5, x0, #1, #0x1f
    // 0x82f90c: cmp             x4, x5
    // 0x82f910: b.ne            #0x82f9c8
    // 0x82f914: mov             x6, x1
    // 0x82f918: cmp             x2, x5
    // 0x82f91c: b.lt            #0x82f930
    // 0x82f920: r0 = Null
    //     0x82f920: mov             x0, NULL
    // 0x82f924: LeaveFrame
    //     0x82f924: mov             SP, fp
    //     0x82f928: ldp             fp, lr, [SP], #0x10
    // 0x82f92c: ret
    //     0x82f92c: ret             
    // 0x82f930: mov             x0, x5
    // 0x82f934: mov             x1, x2
    // 0x82f938: cmp             x1, x0
    // 0x82f93c: b.hs            #0x82f9ec
    // 0x82f940: LoadField: r0 = r6->field_f
    //     0x82f940: ldur            w0, [x6, #0xf]
    // 0x82f944: DecompressPointer r0
    //     0x82f944: add             x0, x0, HEAP, lsl #32
    // 0x82f948: ArrayLoad: r5 = r0[r2]  ; Unknown_4
    //     0x82f948: add             x16, x0, x2, lsl #2
    //     0x82f94c: ldur            w5, [x16, #0xf]
    // 0x82f950: DecompressPointer r5
    //     0x82f950: add             x5, x5, HEAP, lsl #32
    // 0x82f954: stur            x5, [fp, #-0x18]
    // 0x82f958: add             x7, x2, #1
    // 0x82f95c: stur            x7, [fp, #-0x10]
    // 0x82f960: cmp             w5, NULL
    // 0x82f964: b.ne            #0x82f998
    // 0x82f968: mov             x0, x5
    // 0x82f96c: mov             x2, x3
    // 0x82f970: r1 = Null
    //     0x82f970: mov             x1, NULL
    // 0x82f974: cmp             w2, NULL
    // 0x82f978: b.eq            #0x82f998
    // 0x82f97c: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x82f97c: ldur            w4, [x2, #0x17]
    // 0x82f980: DecompressPointer r4
    //     0x82f980: add             x4, x4, HEAP, lsl #32
    // 0x82f984: r8 = X0
    //     0x82f984: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x82f988: LoadField: r9 = r4->field_7
    //     0x82f988: ldur            x9, [x4, #7]
    // 0x82f98c: r3 = Null
    //     0x82f98c: add             x3, PP, #0x31, lsl #12  ; [pp+0x316a0] Null
    //     0x82f990: ldr             x3, [x3, #0x6a0]
    // 0x82f994: blr             x9
    // 0x82f998: ldur            x0, [fp, #-0x18]
    // 0x82f99c: cmp             w0, NULL
    // 0x82f9a0: b.eq            #0x82f9f0
    // 0x82f9a4: str             x0, [SP]
    // 0x82f9a8: ClosureCall
    //     0x82f9a8: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x82f9ac: ldur            x2, [x0, #0x1f]
    //     0x82f9b0: blr             x2
    // 0x82f9b4: ldur            x2, [fp, #-0x10]
    // 0x82f9b8: ldur            x1, [fp, #-8]
    // 0x82f9bc: ldur            x3, [fp, #-0x28]
    // 0x82f9c0: ldur            x4, [fp, #-0x20]
    // 0x82f9c4: b               #0x82f8f4
    // 0x82f9c8: r0 = ConcurrentModificationError()
    //     0x82f9c8: bl              #0x4c6f7c  ; AllocateConcurrentModificationErrorStub -> ConcurrentModificationError (size=0x10)
    // 0x82f9cc: ldur            x6, [fp, #-8]
    // 0x82f9d0: StoreField: r0->field_b = r6
    //     0x82f9d0: stur            w6, [x0, #0xb]
    // 0x82f9d4: r0 = Throw()
    //     0x82f9d4: bl              #0xc5d2b8  ; ThrowStub
    // 0x82f9d8: brk             #0
    // 0x82f9dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x82f9dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x82f9e0: b               #0x82f8c4
    // 0x82f9e4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x82f9e4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x82f9e8: b               #0x82f900
    // 0x82f9ec: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x82f9ec: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
    // 0x82f9f0: r0 = NullErrorSharedWithoutFPURegs()
    //     0x82f9f0: bl              #0xc5f5e0  ; NullErrorSharedWithoutFPURegsStub
  }
  _ removeListener(/* No info */) {
    // ** addr: 0x843d8c, size: 0x9c
    // 0x843d8c: EnterFrame
    //     0x843d8c: stp             fp, lr, [SP, #-0x10]!
    //     0x843d90: mov             fp, SP
    // 0x843d94: AllocStack(0x18)
    //     0x843d94: sub             SP, SP, #0x18
    // 0x843d98: CheckStackOverflow
    //     0x843d98: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x843d9c: cmp             SP, x16
    //     0x843da0: b.ls            #0x843e20
    // 0x843da4: ldr             x0, [fp, #0x18]
    // 0x843da8: LoadField: r1 = r0->field_f
    //     0x843da8: ldur            w1, [x0, #0xf]
    // 0x843dac: DecompressPointer r1
    //     0x843dac: add             x1, x1, HEAP, lsl #32
    // 0x843db0: stur            x1, [fp, #-8]
    // 0x843db4: ldr             x16, [fp, #0x10]
    // 0x843db8: stp             x16, x1, [SP]
    // 0x843dbc: r0 = remove()
    //     0x843dbc: bl              #0x5613d4  ; [dart:core] _GrowableList::remove
    // 0x843dc0: ldur            x0, [fp, #-8]
    // 0x843dc4: LoadField: r1 = r0->field_b
    //     0x843dc4: ldur            w1, [x0, #0xb]
    // 0x843dc8: DecompressPointer r1
    //     0x843dc8: add             x1, x1, HEAP, lsl #32
    // 0x843dcc: cbnz            w1, #0x843e10
    // 0x843dd0: ldr             x0, [fp, #0x18]
    // 0x843dd4: LoadField: r1 = r0->field_b
    //     0x843dd4: ldur            w1, [x0, #0xb]
    // 0x843dd8: DecompressPointer r1
    //     0x843dd8: add             x1, x1, HEAP, lsl #32
    // 0x843ddc: stur            x1, [fp, #-8]
    // 0x843de0: r1 = 1
    //     0x843de0: movz            x1, #0x1
    // 0x843de4: r0 = AllocateContext()
    //     0x843de4: bl              #0xc5def4  ; AllocateContextStub
    // 0x843de8: mov             x1, x0
    // 0x843dec: ldr             x0, [fp, #0x18]
    // 0x843df0: StoreField: r1->field_f = r0
    //     0x843df0: stur            w0, [x1, #0xf]
    // 0x843df4: mov             x2, x1
    // 0x843df8: r1 = Function '_onNotify@765089737':.
    //     0x843df8: add             x1, PP, #0x31, lsl #12  ; [pp+0x31698] AnonymousClosure: (0x82f864), in [package:easy_refresh/easy_refresh.dart] _IndicatorListenable::_onNotify (0x82f8ac)
    //     0x843dfc: ldr             x1, [x1, #0x698]
    // 0x843e00: r0 = AllocateClosure()
    //     0x843e00: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x843e04: ldur            x16, [fp, #-8]
    // 0x843e08: stp             x0, x16, [SP]
    // 0x843e0c: r0 = removeListener()
    //     0x843e0c: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0x843e10: r0 = Null
    //     0x843e10: mov             x0, NULL
    // 0x843e14: LeaveFrame
    //     0x843e14: mov             SP, fp
    //     0x843e18: ldp             fp, lr, [SP], #0x10
    // 0x843e1c: ret
    //     0x843e1c: ret             
    // 0x843e20: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x843e20: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x843e24: b               #0x843da4
  }
}

// class id: 4597, size: 0x14, field offset: 0x8
class EasyRefreshController extends Object {

  _ finishLoad(/* No info */) {
    // ** addr: 0x6833b0, size: 0x90
    // 0x6833b0: EnterFrame
    //     0x6833b0: stp             fp, lr, [SP, #-0x10]!
    //     0x6833b4: mov             fp, SP
    // 0x6833b8: AllocStack(0x18)
    //     0x6833b8: sub             SP, SP, #0x18
    // 0x6833bc: SetupParameters(EasyRefreshController this /* r1 */, [dynamic _ = Instance_IndicatorResult /* r0, fp-0x8 */])
    //     0x6833bc: mov             x0, x4
    //     0x6833c0: ldur            w1, [x0, #0x13]
    //     0x6833c4: add             x1, x1, HEAP, lsl #32
    //     0x6833c8: sub             x0, x1, #2
    //     0x6833cc: add             x1, fp, w0, sxtw #2
    //     0x6833d0: ldr             x1, [x1, #0x10]
    //     0x6833d4: cmp             w0, #2
    //     0x6833d8: b.lt            #0x6833ec
    //     0x6833dc: add             x2, fp, w0, sxtw #2
    //     0x6833e0: ldr             x2, [x2, #8]
    //     0x6833e4: mov             x0, x2
    //     0x6833e8: b               #0x6833f4
    //     0x6833ec: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d150] Obj!IndicatorResult@c452f1
    //     0x6833f0: ldr             x0, [x0, #0x150]
    //     0x6833f4: stur            x0, [fp, #-8]
    // 0x6833f8: CheckStackOverflow
    //     0x6833f8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6833fc: cmp             SP, x16
    //     0x683400: b.ls            #0x683438
    // 0x683404: LoadField: r2 = r1->field_f
    //     0x683404: ldur            w2, [x1, #0xf]
    // 0x683408: DecompressPointer r2
    //     0x683408: add             x2, x2, HEAP, lsl #32
    // 0x68340c: cmp             w2, NULL
    // 0x683410: b.eq            #0x683428
    // 0x683414: str             x2, [SP]
    // 0x683418: r0 = _footerNotifier()
    //     0x683418: bl              #0x6854ac  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_footerNotifier
    // 0x68341c: ldur            x16, [fp, #-8]
    // 0x683420: stp             x16, x0, [SP]
    // 0x683424: r0 = _finishTask()
    //     0x683424: bl              #0x683440  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_finishTask
    // 0x683428: r0 = Null
    //     0x683428: mov             x0, NULL
    // 0x68342c: LeaveFrame
    //     0x68342c: mov             SP, fp
    //     0x683430: ldp             fp, lr, [SP], #0x10
    // 0x683434: ret
    //     0x683434: ret             
    // 0x683438: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x683438: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x68343c: b               #0x683404
  }
  _ finishRefresh(/* No info */) {
    // ** addr: 0x6854ec, size: 0x90
    // 0x6854ec: EnterFrame
    //     0x6854ec: stp             fp, lr, [SP, #-0x10]!
    //     0x6854f0: mov             fp, SP
    // 0x6854f4: AllocStack(0x18)
    //     0x6854f4: sub             SP, SP, #0x18
    // 0x6854f8: SetupParameters(EasyRefreshController this /* r1 */, [dynamic _ = Instance_IndicatorResult /* r0, fp-0x8 */])
    //     0x6854f8: mov             x0, x4
    //     0x6854fc: ldur            w1, [x0, #0x13]
    //     0x685500: add             x1, x1, HEAP, lsl #32
    //     0x685504: sub             x0, x1, #2
    //     0x685508: add             x1, fp, w0, sxtw #2
    //     0x68550c: ldr             x1, [x1, #0x10]
    //     0x685510: cmp             w0, #2
    //     0x685514: b.lt            #0x685528
    //     0x685518: add             x2, fp, w0, sxtw #2
    //     0x68551c: ldr             x2, [x2, #8]
    //     0x685520: mov             x0, x2
    //     0x685524: b               #0x685530
    //     0x685528: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d150] Obj!IndicatorResult@c452f1
    //     0x68552c: ldr             x0, [x0, #0x150]
    //     0x685530: stur            x0, [fp, #-8]
    // 0x685534: CheckStackOverflow
    //     0x685534: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x685538: cmp             SP, x16
    //     0x68553c: b.ls            #0x685574
    // 0x685540: LoadField: r2 = r1->field_f
    //     0x685540: ldur            w2, [x1, #0xf]
    // 0x685544: DecompressPointer r2
    //     0x685544: add             x2, x2, HEAP, lsl #32
    // 0x685548: cmp             w2, NULL
    // 0x68554c: b.eq            #0x685564
    // 0x685550: str             x2, [SP]
    // 0x685554: r0 = _headerNotifier()
    //     0x685554: bl              #0x68557c  ; [package:easy_refresh/easy_refresh.dart] _EasyRefreshState::_headerNotifier
    // 0x685558: ldur            x16, [fp, #-8]
    // 0x68555c: stp             x16, x0, [SP]
    // 0x685560: r0 = _finishTask()
    //     0x685560: bl              #0x683440  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_finishTask
    // 0x685564: r0 = Null
    //     0x685564: mov             x0, NULL
    // 0x685568: LeaveFrame
    //     0x685568: mov             SP, fp
    //     0x68556c: ldp             fp, lr, [SP], #0x10
    // 0x685570: ret
    //     0x685570: ret             
    // 0x685574: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x685574: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x685578: b               #0x685540
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa523d4, size: 0x10
    // 0xa523d4: ldr             x1, [SP]
    // 0xa523d8: StoreField: r1->field_f = rNULL
    //     0xa523d8: stur            NULL, [x1, #0xf]
    // 0xa523dc: r0 = Null
    //     0xa523dc: mov             x0, NULL
    // 0xa523e0: ret
    //     0xa523e0: ret             
  }
}

// class id: 4598, size: 0x80, field offset: 0x8
//   const constructor, 
abstract class Indicator extends Object {
}

// class id: 4599, size: 0x80, field offset: 0x80
//   const constructor, 
abstract class Footer extends Indicator {
}

// class id: 4600, size: 0xf8, field offset: 0x80
//   const constructor, 
class ClassicFooter extends Footer {

  _Double field_8;
  bool field_10;
  bool field_14;
  Duration field_18;
  bool field_2c;
  _Double field_38;
  bool field_3c;
  bool field_40;
  IndicatorPosition field_44;
  bool field_48;
  _Double field_50;
  _Double field_5c;
  bool field_64;
  bool field_6c;
  bool field_70;
  bool field_74;
  _Double field_78;
  MainAxisAlignment field_84;
  bool field_a8;
  bool field_b0;
  _Double field_b8;
  _Double field_c0;
  Clip field_e8;

  _ build(/* No info */) {
    // ** addr: 0xb8b9b4, size: 0xf8
    // 0xb8b9b4: EnterFrame
    //     0xb8b9b4: stp             fp, lr, [SP, #-0x10]!
    //     0xb8b9b8: mov             fp, SP
    // 0xb8b9bc: AllocStack(0x8)
    //     0xb8b9bc: sub             SP, SP, #8
    // 0xb8b9c0: ldr             x0, [fp, #0x10]
    // 0xb8b9c4: LoadField: r1 = r0->field_2b
    //     0xb8b9c4: ldur            w1, [x0, #0x2b]
    // 0xb8b9c8: DecompressPointer r1
    //     0xb8b9c8: add             x1, x1, HEAP, lsl #32
    // 0xb8b9cc: r16 = Instance_AxisDirection
    //     0xb8b9cc: ldr             x16, [PP, #0x6a78]  ; [pp+0x6a78] Obj!AxisDirection@c44031
    // 0xb8b9d0: cmp             w1, w16
    // 0xb8b9d4: b.ne            #0xb8b9e0
    // 0xb8b9d8: r1 = true
    //     0xb8b9d8: add             x1, NULL, #0x20  ; true
    // 0xb8b9dc: b               #0xb8b9f8
    // 0xb8b9e0: r16 = Instance_AxisDirection
    //     0xb8b9e0: ldr             x16, [PP, #0x6a80]  ; [pp+0x6a80] Obj!AxisDirection@c44071
    // 0xb8b9e4: cmp             w1, w16
    // 0xb8b9e8: r16 = true
    //     0xb8b9e8: add             x16, NULL, #0x20  ; true
    // 0xb8b9ec: r17 = false
    //     0xb8b9ec: add             x17, NULL, #0x30  ; false
    // 0xb8b9f0: csel            x2, x16, x17, eq
    // 0xb8b9f4: mov             x1, x2
    // 0xb8b9f8: eor             x2, x1, #0x10
    // 0xb8b9fc: stur            x2, [fp, #-8]
    // 0xb8ba00: r0 = _ClassicIndicator()
    //     0xb8ba00: bl              #0xb8b968  ; Allocate_ClassicIndicatorStub -> _ClassicIndicator (size=0x88)
    // 0xb8ba04: ldr             x1, [fp, #0x10]
    // 0xb8ba08: StoreField: r0->field_b = r1
    //     0xb8ba08: stur            w1, [x0, #0xb]
    // 0xb8ba0c: r1 = Instance_MainAxisAlignment
    //     0xb8ba0c: add             x1, PP, #0x10, lsl #12  ; [pp+0x10418] Obj!MainAxisAlignment@c43bd1
    //     0xb8ba10: ldr             x1, [x1, #0x418]
    // 0xb8ba14: StoreField: r0->field_f = r1
    //     0xb8ba14: stur            w1, [x0, #0xf]
    // 0xb8ba18: r1 = "Pull to load"
    //     0xb8ba18: add             x1, PP, #0x31, lsl #12  ; [pp+0x31720] "Pull to load"
    //     0xb8ba1c: ldr             x1, [x1, #0x720]
    // 0xb8ba20: ArrayStore: r0[0] = r1  ; List_4
    //     0xb8ba20: stur            w1, [x0, #0x17]
    // 0xb8ba24: r1 = "Release ready"
    //     0xb8ba24: add             x1, PP, #0x31, lsl #12  ; [pp+0x31668] "Release ready"
    //     0xb8ba28: ldr             x1, [x1, #0x668]
    // 0xb8ba2c: StoreField: r0->field_1b = r1
    //     0xb8ba2c: stur            w1, [x0, #0x1b]
    // 0xb8ba30: r1 = "Loading..."
    //     0xb8ba30: add             x1, PP, #0x31, lsl #12  ; [pp+0x31728] "Loading..."
    //     0xb8ba34: ldr             x1, [x1, #0x728]
    // 0xb8ba38: StoreField: r0->field_1f = r1
    //     0xb8ba38: stur            w1, [x0, #0x1f]
    // 0xb8ba3c: StoreField: r0->field_23 = r1
    //     0xb8ba3c: stur            w1, [x0, #0x23]
    // 0xb8ba40: r1 = "Succeeded"
    //     0xb8ba40: add             x1, PP, #0x31, lsl #12  ; [pp+0x31678] "Succeeded"
    //     0xb8ba44: ldr             x1, [x1, #0x678]
    // 0xb8ba48: StoreField: r0->field_27 = r1
    //     0xb8ba48: stur            w1, [x0, #0x27]
    // 0xb8ba4c: r1 = "No more"
    //     0xb8ba4c: add             x1, PP, #0x31, lsl #12  ; [pp+0x31680] "No more"
    //     0xb8ba50: ldr             x1, [x1, #0x680]
    // 0xb8ba54: StoreField: r0->field_2b = r1
    //     0xb8ba54: stur            w1, [x0, #0x2b]
    // 0xb8ba58: r1 = "Failed"
    //     0xb8ba58: add             x1, PP, #0x31, lsl #12  ; [pp+0x31688] "Failed"
    //     0xb8ba5c: ldr             x1, [x1, #0x688]
    // 0xb8ba60: StoreField: r0->field_2f = r1
    //     0xb8ba60: stur            w1, [x0, #0x2f]
    // 0xb8ba64: r1 = true
    //     0xb8ba64: add             x1, NULL, #0x20  ; true
    // 0xb8ba68: StoreField: r0->field_33 = r1
    //     0xb8ba68: stur            w1, [x0, #0x33]
    // 0xb8ba6c: r2 = "Last updated at %T"
    //     0xb8ba6c: add             x2, PP, #0x31, lsl #12  ; [pp+0x31690] "Last updated at %T"
    //     0xb8ba70: ldr             x2, [x2, #0x690]
    // 0xb8ba74: StoreField: r0->field_37 = r2
    //     0xb8ba74: stur            w2, [x0, #0x37]
    // 0xb8ba78: ldur            x2, [fp, #-8]
    // 0xb8ba7c: StoreField: r0->field_53 = r2
    //     0xb8ba7c: stur            w2, [x0, #0x53]
    // 0xb8ba80: StoreField: r0->field_3b = r1
    //     0xb8ba80: stur            w1, [x0, #0x3b]
    // 0xb8ba84: d0 = 24.000000
    //     0xb8ba84: fmov            d0, #24.00000000
    // 0xb8ba88: StoreField: r0->field_43 = d0
    //     0xb8ba88: stur            d0, [x0, #0x43]
    // 0xb8ba8c: d0 = 16.000000
    //     0xb8ba8c: fmov            d0, #16.00000000
    // 0xb8ba90: StoreField: r0->field_4b = d0
    //     0xb8ba90: stur            d0, [x0, #0x4b]
    // 0xb8ba94: r1 = Instance_Clip
    //     0xb8ba94: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0xb8ba98: ldr             x1, [x1, #0x438]
    // 0xb8ba9c: StoreField: r0->field_77 = r1
    //     0xb8ba9c: stur            w1, [x0, #0x77]
    // 0xb8baa0: LeaveFrame
    //     0xb8baa0: mov             SP, fp
    //     0xb8baa4: ldp             fp, lr, [SP], #0x10
    // 0xb8baa8: ret
    //     0xb8baa8: ret             
  }
}

// class id: 4601, size: 0x80, field offset: 0x80
//   const constructor, 
class NotLoadFooter extends Footer {

  _ build(/* No info */) {
    // ** addr: 0xb8b9a8, size: 0xc
    // 0xb8b9a8: r0 = Instance_SizedBox
    //     0xb8b9a8: add             x0, PP, #0x1c, lsl #12  ; [pp+0x1cd50] Obj!SizedBox@c37c31
    //     0xb8b9ac: ldr             x0, [x0, #0xd50]
    // 0xb8b9b0: ret
    //     0xb8b9b0: ret             
  }
}

// class id: 4602, size: 0x80, field offset: 0x80
//   const constructor, 
abstract class Header extends Indicator {
}

// class id: 4603, size: 0x94, field offset: 0x80
//   const constructor, 
class CupertinoHeader extends Header {

  _Double field_8;
  bool field_10;
  bool field_14;
  Duration field_18;
  bool field_2c;
  _Closure field_30;
  _Closure field_34;
  bool field_3c;
  bool field_40;
  IndicatorPosition field_44;
  bool field_48;
  _Double field_50;
  _Double field_5c;
  bool field_64;
  bool field_6c;
  bool field_70;
  bool field_74;
  _Double field_78;
  bool field_88;

  _ build(/* No info */) {
    // ** addr: 0xb8b974, size: 0x28
    // 0xb8b974: EnterFrame
    //     0xb8b974: stp             fp, lr, [SP, #-0x10]!
    //     0xb8b978: mov             fp, SP
    // 0xb8b97c: r0 = _CupertinoIndicator()
    //     0xb8b97c: bl              #0xb8b99c  ; Allocate_CupertinoIndicatorStub -> _CupertinoIndicator (size=0x20)
    // 0xb8b980: ldr             x1, [fp, #0x10]
    // 0xb8b984: StoreField: r0->field_b = r1
    //     0xb8b984: stur            w1, [x0, #0xb]
    // 0xb8b988: r1 = true
    //     0xb8b988: add             x1, NULL, #0x20  ; true
    // 0xb8b98c: StoreField: r0->field_13 = r1
    //     0xb8b98c: stur            w1, [x0, #0x13]
    // 0xb8b990: LeaveFrame
    //     0xb8b990: mov             SP, fp
    //     0xb8b994: ldp             fp, lr, [SP], #0x10
    // 0xb8b998: ret
    //     0xb8b998: ret             
  }
}

// class id: 4604, size: 0xf8, field offset: 0x80
//   const constructor, 
class ClassicHeader extends Header {

  _Double field_8;
  bool field_10;
  bool field_14;
  Duration field_18;
  bool field_2c;
  bool field_3c;
  bool field_40;
  IndicatorPosition field_44;
  bool field_48;
  _Double field_50;
  _Double field_5c;
  bool field_64;
  bool field_6c;
  bool field_70;
  bool field_74;
  _Double field_78;
  MainAxisAlignment field_84;
  bool field_a8;
  bool field_b0;
  _Double field_b8;
  _Double field_c0;
  Clip field_e8;

  _ build(/* No info */) {
    // ** addr: 0xb8b874, size: 0xf4
    // 0xb8b874: EnterFrame
    //     0xb8b874: stp             fp, lr, [SP, #-0x10]!
    //     0xb8b878: mov             fp, SP
    // 0xb8b87c: AllocStack(0x8)
    //     0xb8b87c: sub             SP, SP, #8
    // 0xb8b880: ldr             x0, [fp, #0x10]
    // 0xb8b884: LoadField: r1 = r0->field_2b
    //     0xb8b884: ldur            w1, [x0, #0x2b]
    // 0xb8b888: DecompressPointer r1
    //     0xb8b888: add             x1, x1, HEAP, lsl #32
    // 0xb8b88c: r16 = Instance_AxisDirection
    //     0xb8b88c: ldr             x16, [PP, #0x6a78]  ; [pp+0x6a78] Obj!AxisDirection@c44031
    // 0xb8b890: cmp             w1, w16
    // 0xb8b894: b.ne            #0xb8b8a0
    // 0xb8b898: r1 = true
    //     0xb8b898: add             x1, NULL, #0x20  ; true
    // 0xb8b89c: b               #0xb8b8b8
    // 0xb8b8a0: r16 = Instance_AxisDirection
    //     0xb8b8a0: ldr             x16, [PP, #0x6a80]  ; [pp+0x6a80] Obj!AxisDirection@c44071
    // 0xb8b8a4: cmp             w1, w16
    // 0xb8b8a8: r16 = true
    //     0xb8b8a8: add             x16, NULL, #0x20  ; true
    // 0xb8b8ac: r17 = false
    //     0xb8b8ac: add             x17, NULL, #0x30  ; false
    // 0xb8b8b0: csel            x2, x16, x17, eq
    // 0xb8b8b4: mov             x1, x2
    // 0xb8b8b8: stur            x1, [fp, #-8]
    // 0xb8b8bc: r0 = _ClassicIndicator()
    //     0xb8b8bc: bl              #0xb8b968  ; Allocate_ClassicIndicatorStub -> _ClassicIndicator (size=0x88)
    // 0xb8b8c0: ldr             x1, [fp, #0x10]
    // 0xb8b8c4: StoreField: r0->field_b = r1
    //     0xb8b8c4: stur            w1, [x0, #0xb]
    // 0xb8b8c8: r1 = Instance_MainAxisAlignment
    //     0xb8b8c8: add             x1, PP, #0x22, lsl #12  ; [pp+0x22b10] Obj!MainAxisAlignment@c43bb1
    //     0xb8b8cc: ldr             x1, [x1, #0xb10]
    // 0xb8b8d0: StoreField: r0->field_f = r1
    //     0xb8b8d0: stur            w1, [x0, #0xf]
    // 0xb8b8d4: r1 = "Pull to refresh"
    //     0xb8b8d4: add             x1, PP, #0x31, lsl #12  ; [pp+0x31660] "Pull to refresh"
    //     0xb8b8d8: ldr             x1, [x1, #0x660]
    // 0xb8b8dc: ArrayStore: r0[0] = r1  ; List_4
    //     0xb8b8dc: stur            w1, [x0, #0x17]
    // 0xb8b8e0: r1 = "Release ready"
    //     0xb8b8e0: add             x1, PP, #0x31, lsl #12  ; [pp+0x31668] "Release ready"
    //     0xb8b8e4: ldr             x1, [x1, #0x668]
    // 0xb8b8e8: StoreField: r0->field_1b = r1
    //     0xb8b8e8: stur            w1, [x0, #0x1b]
    // 0xb8b8ec: r1 = "Refreshing..."
    //     0xb8b8ec: add             x1, PP, #0x31, lsl #12  ; [pp+0x31670] "Refreshing..."
    //     0xb8b8f0: ldr             x1, [x1, #0x670]
    // 0xb8b8f4: StoreField: r0->field_1f = r1
    //     0xb8b8f4: stur            w1, [x0, #0x1f]
    // 0xb8b8f8: StoreField: r0->field_23 = r1
    //     0xb8b8f8: stur            w1, [x0, #0x23]
    // 0xb8b8fc: r1 = "Succeeded"
    //     0xb8b8fc: add             x1, PP, #0x31, lsl #12  ; [pp+0x31678] "Succeeded"
    //     0xb8b900: ldr             x1, [x1, #0x678]
    // 0xb8b904: StoreField: r0->field_27 = r1
    //     0xb8b904: stur            w1, [x0, #0x27]
    // 0xb8b908: r1 = "No more"
    //     0xb8b908: add             x1, PP, #0x31, lsl #12  ; [pp+0x31680] "No more"
    //     0xb8b90c: ldr             x1, [x1, #0x680]
    // 0xb8b910: StoreField: r0->field_2b = r1
    //     0xb8b910: stur            w1, [x0, #0x2b]
    // 0xb8b914: r1 = "Failed"
    //     0xb8b914: add             x1, PP, #0x31, lsl #12  ; [pp+0x31688] "Failed"
    //     0xb8b918: ldr             x1, [x1, #0x688]
    // 0xb8b91c: StoreField: r0->field_2f = r1
    //     0xb8b91c: stur            w1, [x0, #0x2f]
    // 0xb8b920: r1 = true
    //     0xb8b920: add             x1, NULL, #0x20  ; true
    // 0xb8b924: StoreField: r0->field_33 = r1
    //     0xb8b924: stur            w1, [x0, #0x33]
    // 0xb8b928: r2 = "Last updated at %T"
    //     0xb8b928: add             x2, PP, #0x31, lsl #12  ; [pp+0x31690] "Last updated at %T"
    //     0xb8b92c: ldr             x2, [x2, #0x690]
    // 0xb8b930: StoreField: r0->field_37 = r2
    //     0xb8b930: stur            w2, [x0, #0x37]
    // 0xb8b934: ldur            x2, [fp, #-8]
    // 0xb8b938: StoreField: r0->field_53 = r2
    //     0xb8b938: stur            w2, [x0, #0x53]
    // 0xb8b93c: StoreField: r0->field_3b = r1
    //     0xb8b93c: stur            w1, [x0, #0x3b]
    // 0xb8b940: d0 = 24.000000
    //     0xb8b940: fmov            d0, #24.00000000
    // 0xb8b944: StoreField: r0->field_43 = d0
    //     0xb8b944: stur            d0, [x0, #0x43]
    // 0xb8b948: d0 = 16.000000
    //     0xb8b948: fmov            d0, #16.00000000
    // 0xb8b94c: StoreField: r0->field_4b = d0
    //     0xb8b94c: stur            d0, [x0, #0x4b]
    // 0xb8b950: r1 = Instance_Clip
    //     0xb8b950: add             x1, PP, #0x10, lsl #12  ; [pp+0x10438] Obj!Clip@c47681
    //     0xb8b954: ldr             x1, [x1, #0x438]
    // 0xb8b958: StoreField: r0->field_77 = r1
    //     0xb8b958: stur            w1, [x0, #0x77]
    // 0xb8b95c: LeaveFrame
    //     0xb8b95c: mov             SP, fp
    //     0xb8b960: ldp             fp, lr, [SP], #0x10
    // 0xb8b964: ret
    //     0xb8b964: ret             
  }
}

// class id: 4607, size: 0x40, field offset: 0x8
//   const constructor, 
class IndicatorState extends Object {

  get _ hashCode(/* No info */) {
    // ** addr: 0xad28a4, size: 0x258
    // 0xad28a4: EnterFrame
    //     0xad28a4: stp             fp, lr, [SP, #-0x10]!
    //     0xad28a8: mov             fp, SP
    // 0xad28ac: AllocStack(0x20)
    //     0xad28ac: sub             SP, SP, #0x20
    // 0xad28b0: CheckStackOverflow
    //     0xad28b0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xad28b4: cmp             SP, x16
    //     0xad28b8: b.ls            #0xad2af4
    // 0xad28bc: ldr             x0, [fp, #0x10]
    // 0xad28c0: LoadField: r1 = r0->field_7
    //     0xad28c0: ldur            w1, [x0, #7]
    // 0xad28c4: DecompressPointer r1
    //     0xad28c4: add             x1, x1, HEAP, lsl #32
    // 0xad28c8: str             x1, [SP]
    // 0xad28cc: r0 = _getHash()
    //     0xad28cc: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad28d0: mov             x1, x0
    // 0xad28d4: ldr             x0, [fp, #0x10]
    // 0xad28d8: stur            x1, [fp, #-8]
    // 0xad28dc: LoadField: r2 = r0->field_b
    //     0xad28dc: ldur            w2, [x0, #0xb]
    // 0xad28e0: DecompressPointer r2
    //     0xad28e0: add             x2, x2, HEAP, lsl #32
    // 0xad28e4: str             x2, [SP]
    // 0xad28e8: r0 = _getHash()
    //     0xad28e8: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad28ec: mov             x1, x0
    // 0xad28f0: ldur            x0, [fp, #-8]
    // 0xad28f4: r2 = LoadInt32Instr(r0)
    //     0xad28f4: sbfx            x2, x0, #1, #0x1f
    // 0xad28f8: r0 = LoadInt32Instr(r1)
    //     0xad28f8: sbfx            x0, x1, #1, #0x1f
    // 0xad28fc: eor             x1, x2, x0
    // 0xad2900: ldr             x0, [fp, #0x10]
    // 0xad2904: stur            x1, [fp, #-0x10]
    // 0xad2908: LoadField: r2 = r0->field_f
    //     0xad2908: ldur            w2, [x0, #0xf]
    // 0xad290c: DecompressPointer r2
    //     0xad290c: add             x2, x2, HEAP, lsl #32
    // 0xad2910: str             x2, [SP]
    // 0xad2914: r0 = _getHash()
    //     0xad2914: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad2918: r1 = LoadInt32Instr(r0)
    //     0xad2918: sbfx            x1, x0, #1, #0x1f
    // 0xad291c: ldur            x0, [fp, #-0x10]
    // 0xad2920: eor             x2, x0, x1
    // 0xad2924: ldr             x0, [fp, #0x10]
    // 0xad2928: stur            x2, [fp, #-0x18]
    // 0xad292c: LoadField: r1 = r0->field_13
    //     0xad292c: ldur            w1, [x0, #0x13]
    // 0xad2930: DecompressPointer r1
    //     0xad2930: add             x1, x1, HEAP, lsl #32
    // 0xad2934: str             x1, [SP]
    // 0xad2938: r0 = _getHash()
    //     0xad2938: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad293c: r1 = LoadInt32Instr(r0)
    //     0xad293c: sbfx            x1, x0, #1, #0x1f
    // 0xad2940: ldur            x0, [fp, #-0x18]
    // 0xad2944: eor             x2, x0, x1
    // 0xad2948: ldr             x0, [fp, #0x10]
    // 0xad294c: ArrayLoad: d0 = r0[0]  ; List_8
    //     0xad294c: ldur            d0, [x0, #0x17]
    // 0xad2950: mov             x16, v0.d[0]
    // 0xad2954: and             x16, x16, #0x7ff0000000000000
    // 0xad2958: r17 = 9218868437227405312
    //     0xad2958: orr             x17, xzr, #0x7ff0000000000000
    // 0xad295c: cmp             x16, x17
    // 0xad2960: b.eq            #0xad2990
    // 0xad2964: fcvtzs          x16, d0
    // 0xad2968: scvtf           d1, x16
    // 0xad296c: fcmp            d1, d0
    // 0xad2970: b.ne            #0xad2990
    // 0xad2974: r17 = 11601
    //     0xad2974: movz            x17, #0x2d51
    // 0xad2978: mul             x1, x16, x17
    // 0xad297c: umulh           x16, x16, x17
    // 0xad2980: eor             x1, x1, x16
    // 0xad2984: r1 = 0
    //     0xad2984: eor             x1, x1, x1, lsr #32
    // 0xad2988: and             x1, x1, #0x3fffffff
    // 0xad298c: b               #0xad299c
    // 0xad2990: r1 = 0.000000
    //     0xad2990: fmov            x1, d0
    // 0xad2994: r1 = 0
    //     0xad2994: eor             x1, x1, x1, lsr #32
    // 0xad2998: and             x1, x1, #0x3fffffff
    // 0xad299c: eor             x3, x2, x1
    // 0xad29a0: LoadField: d0 = r0->field_1f
    //     0xad29a0: ldur            d0, [x0, #0x1f]
    // 0xad29a4: mov             x16, v0.d[0]
    // 0xad29a8: and             x16, x16, #0x7ff0000000000000
    // 0xad29ac: r17 = 9218868437227405312
    //     0xad29ac: orr             x17, xzr, #0x7ff0000000000000
    // 0xad29b0: cmp             x16, x17
    // 0xad29b4: b.eq            #0xad29e4
    // 0xad29b8: fcvtzs          x16, d0
    // 0xad29bc: scvtf           d1, x16
    // 0xad29c0: fcmp            d1, d0
    // 0xad29c4: b.ne            #0xad29e4
    // 0xad29c8: r17 = 11601
    //     0xad29c8: movz            x17, #0x2d51
    // 0xad29cc: mul             x1, x16, x17
    // 0xad29d0: umulh           x16, x16, x17
    // 0xad29d4: eor             x1, x1, x16
    // 0xad29d8: r1 = 0
    //     0xad29d8: eor             x1, x1, x1, lsr #32
    // 0xad29dc: and             x1, x1, #0x3fffffff
    // 0xad29e0: b               #0xad29f0
    // 0xad29e4: r1 = 0.000000
    //     0xad29e4: fmov            x1, d0
    // 0xad29e8: r1 = 0
    //     0xad29e8: eor             x1, x1, x1, lsr #32
    // 0xad29ec: and             x1, x1, #0x3fffffff
    // 0xad29f0: eor             x2, x3, x1
    // 0xad29f4: stur            x2, [fp, #-0x10]
    // 0xad29f8: LoadField: r1 = r0->field_27
    //     0xad29f8: ldur            w1, [x0, #0x27]
    // 0xad29fc: DecompressPointer r1
    //     0xad29fc: add             x1, x1, HEAP, lsl #32
    // 0xad2a00: str             x1, [SP]
    // 0xad2a04: r0 = _getHash()
    //     0xad2a04: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad2a08: r1 = LoadInt32Instr(r0)
    //     0xad2a08: sbfx            x1, x0, #1, #0x1f
    // 0xad2a0c: ldur            x0, [fp, #-0x10]
    // 0xad2a10: eor             x2, x0, x1
    // 0xad2a14: ldr             x0, [fp, #0x10]
    // 0xad2a18: stur            x2, [fp, #-0x18]
    // 0xad2a1c: LoadField: r1 = r0->field_2b
    //     0xad2a1c: ldur            w1, [x0, #0x2b]
    // 0xad2a20: DecompressPointer r1
    //     0xad2a20: add             x1, x1, HEAP, lsl #32
    // 0xad2a24: str             x1, [SP]
    // 0xad2a28: r0 = _getHash()
    //     0xad2a28: bl              #0x5bc3fc  ; [dart:core] ::_getHash
    // 0xad2a2c: r1 = LoadInt32Instr(r0)
    //     0xad2a2c: sbfx            x1, x0, #1, #0x1f
    // 0xad2a30: ldur            x2, [fp, #-0x18]
    // 0xad2a34: eor             x3, x2, x1
    // 0xad2a38: ldr             x1, [fp, #0x10]
    // 0xad2a3c: LoadField: d0 = r1->field_2f
    //     0xad2a3c: ldur            d0, [x1, #0x2f]
    // 0xad2a40: mov             x16, v0.d[0]
    // 0xad2a44: and             x16, x16, #0x7ff0000000000000
    // 0xad2a48: r17 = 9218868437227405312
    //     0xad2a48: orr             x17, xzr, #0x7ff0000000000000
    // 0xad2a4c: cmp             x16, x17
    // 0xad2a50: b.eq            #0xad2a80
    // 0xad2a54: fcvtzs          x16, d0
    // 0xad2a58: scvtf           d1, x16
    // 0xad2a5c: fcmp            d1, d0
    // 0xad2a60: b.ne            #0xad2a80
    // 0xad2a64: r17 = 11601
    //     0xad2a64: movz            x17, #0x2d51
    // 0xad2a68: mul             x2, x16, x17
    // 0xad2a6c: umulh           x16, x16, x17
    // 0xad2a70: eor             x2, x2, x16
    // 0xad2a74: r2 = 0
    //     0xad2a74: eor             x2, x2, x2, lsr #32
    // 0xad2a78: and             x2, x2, #0x3fffffff
    // 0xad2a7c: b               #0xad2a8c
    // 0xad2a80: r2 = 0.000000
    //     0xad2a80: fmov            x2, d0
    // 0xad2a84: r2 = 0
    //     0xad2a84: eor             x2, x2, x2, lsr #32
    // 0xad2a88: and             x2, x2, #0x3fffffff
    // 0xad2a8c: eor             x4, x3, x2
    // 0xad2a90: LoadField: d0 = r1->field_37
    //     0xad2a90: ldur            d0, [x1, #0x37]
    // 0xad2a94: mov             x16, v0.d[0]
    // 0xad2a98: and             x16, x16, #0x7ff0000000000000
    // 0xad2a9c: r17 = 9218868437227405312
    //     0xad2a9c: orr             x17, xzr, #0x7ff0000000000000
    // 0xad2aa0: cmp             x16, x17
    // 0xad2aa4: b.eq            #0xad2ad4
    // 0xad2aa8: fcvtzs          x16, d0
    // 0xad2aac: scvtf           d1, x16
    // 0xad2ab0: fcmp            d1, d0
    // 0xad2ab4: b.ne            #0xad2ad4
    // 0xad2ab8: r17 = 11601
    //     0xad2ab8: movz            x17, #0x2d51
    // 0xad2abc: mul             x1, x16, x17
    // 0xad2ac0: umulh           x16, x16, x17
    // 0xad2ac4: eor             x1, x1, x16
    // 0xad2ac8: r1 = 0
    //     0xad2ac8: eor             x1, x1, x1, lsr #32
    // 0xad2acc: and             x1, x1, #0x3fffffff
    // 0xad2ad0: b               #0xad2ae0
    // 0xad2ad4: r1 = 0.000000
    //     0xad2ad4: fmov            x1, d0
    // 0xad2ad8: r1 = 0
    //     0xad2ad8: eor             x1, x1, x1, lsr #32
    // 0xad2adc: and             x1, x1, #0x3fffffff
    // 0xad2ae0: eor             x2, x4, x1
    // 0xad2ae4: lsl             x0, x2, #1
    // 0xad2ae8: LeaveFrame
    //     0xad2ae8: mov             SP, fp
    //     0xad2aec: ldp             fp, lr, [SP], #0x10
    // 0xad2af0: ret
    //     0xad2af0: ret             
    // 0xad2af4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xad2af4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xad2af8: b               #0xad28bc
  }
  _ ==(/* No info */) {
    // ** addr: 0xbb8414, size: 0x198
    // 0xbb8414: EnterFrame
    //     0xbb8414: stp             fp, lr, [SP, #-0x10]!
    //     0xbb8418: mov             fp, SP
    // 0xbb841c: AllocStack(0x10)
    //     0xbb841c: sub             SP, SP, #0x10
    // 0xbb8420: CheckStackOverflow
    //     0xbb8420: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbb8424: cmp             SP, x16
    //     0xbb8428: b.ls            #0xbb85a4
    // 0xbb842c: ldr             x0, [fp, #0x10]
    // 0xbb8430: cmp             w0, NULL
    // 0xbb8434: b.ne            #0xbb8448
    // 0xbb8438: r0 = false
    //     0xbb8438: add             x0, NULL, #0x30  ; false
    // 0xbb843c: LeaveFrame
    //     0xbb843c: mov             SP, fp
    //     0xbb8440: ldp             fp, lr, [SP], #0x10
    // 0xbb8444: ret
    //     0xbb8444: ret             
    // 0xbb8448: ldr             x1, [fp, #0x18]
    // 0xbb844c: cmp             w1, w0
    // 0xbb8450: b.ne            #0xbb845c
    // 0xbb8454: r0 = true
    //     0xbb8454: add             x0, NULL, #0x20  ; true
    // 0xbb8458: b               #0xbb8598
    // 0xbb845c: r2 = LoadTaggedClassIdMayBeSmiInstr(r0)
    //     0xbb845c: movz            x2, #0x76
    //     0xbb8460: tbz             w0, #0, #0xbb8470
    //     0xbb8464: ldur            x2, [x0, #-1]
    //     0xbb8468: ubfx            x2, x2, #0xc, #0x14
    //     0xbb846c: lsl             x2, x2, #1
    // 0xbb8470: r17 = 9214
    //     0xbb8470: movz            x17, #0x23fe
    // 0xbb8474: cmp             w2, w17
    // 0xbb8478: b.ne            #0xbb8594
    // 0xbb847c: r16 = IndicatorState
    //     0xbb847c: add             x16, PP, #0x31, lsl #12  ; [pp+0x316c8] Type: IndicatorState
    //     0xbb8480: ldr             x16, [x16, #0x6c8]
    // 0xbb8484: r30 = IndicatorState
    //     0xbb8484: add             lr, PP, #0x31, lsl #12  ; [pp+0x316c8] Type: IndicatorState
    //     0xbb8488: ldr             lr, [lr, #0x6c8]
    // 0xbb848c: stp             lr, x16, [SP]
    // 0xbb8490: r0 = ==()
    //     0xbb8490: bl              #0xbf6e1c  ; [dart:core] _Type::==
    // 0xbb8494: tbnz            w0, #4, #0xbb8594
    // 0xbb8498: ldr             x2, [fp, #0x18]
    // 0xbb849c: ldr             x1, [fp, #0x10]
    // 0xbb84a0: LoadField: r3 = r2->field_7
    //     0xbb84a0: ldur            w3, [x2, #7]
    // 0xbb84a4: DecompressPointer r3
    //     0xbb84a4: add             x3, x3, HEAP, lsl #32
    // 0xbb84a8: LoadField: r4 = r1->field_7
    //     0xbb84a8: ldur            w4, [x1, #7]
    // 0xbb84ac: DecompressPointer r4
    //     0xbb84ac: add             x4, x4, HEAP, lsl #32
    // 0xbb84b0: cmp             w3, w4
    // 0xbb84b4: b.ne            #0xbb8594
    // 0xbb84b8: LoadField: r3 = r2->field_b
    //     0xbb84b8: ldur            w3, [x2, #0xb]
    // 0xbb84bc: DecompressPointer r3
    //     0xbb84bc: add             x3, x3, HEAP, lsl #32
    // 0xbb84c0: LoadField: r4 = r1->field_b
    //     0xbb84c0: ldur            w4, [x1, #0xb]
    // 0xbb84c4: DecompressPointer r4
    //     0xbb84c4: add             x4, x4, HEAP, lsl #32
    // 0xbb84c8: cmp             w3, w4
    // 0xbb84cc: b.ne            #0xbb8594
    // 0xbb84d0: LoadField: r3 = r2->field_f
    //     0xbb84d0: ldur            w3, [x2, #0xf]
    // 0xbb84d4: DecompressPointer r3
    //     0xbb84d4: add             x3, x3, HEAP, lsl #32
    // 0xbb84d8: LoadField: r4 = r1->field_f
    //     0xbb84d8: ldur            w4, [x1, #0xf]
    // 0xbb84dc: DecompressPointer r4
    //     0xbb84dc: add             x4, x4, HEAP, lsl #32
    // 0xbb84e0: cmp             w3, w4
    // 0xbb84e4: b.ne            #0xbb8594
    // 0xbb84e8: LoadField: r3 = r2->field_13
    //     0xbb84e8: ldur            w3, [x2, #0x13]
    // 0xbb84ec: DecompressPointer r3
    //     0xbb84ec: add             x3, x3, HEAP, lsl #32
    // 0xbb84f0: LoadField: r4 = r1->field_13
    //     0xbb84f0: ldur            w4, [x1, #0x13]
    // 0xbb84f4: DecompressPointer r4
    //     0xbb84f4: add             x4, x4, HEAP, lsl #32
    // 0xbb84f8: cmp             w3, w4
    // 0xbb84fc: b.ne            #0xbb8594
    // 0xbb8500: ArrayLoad: d0 = r2[0]  ; List_8
    //     0xbb8500: ldur            d0, [x2, #0x17]
    // 0xbb8504: ArrayLoad: d1 = r1[0]  ; List_8
    //     0xbb8504: ldur            d1, [x1, #0x17]
    // 0xbb8508: fcmp            d0, d1
    // 0xbb850c: b.vs            #0xbb8594
    // 0xbb8510: b.ne            #0xbb8594
    // 0xbb8514: LoadField: d0 = r2->field_1f
    //     0xbb8514: ldur            d0, [x2, #0x1f]
    // 0xbb8518: LoadField: d1 = r1->field_1f
    //     0xbb8518: ldur            d1, [x1, #0x1f]
    // 0xbb851c: fcmp            d0, d1
    // 0xbb8520: b.vs            #0xbb8594
    // 0xbb8524: b.ne            #0xbb8594
    // 0xbb8528: LoadField: r3 = r2->field_27
    //     0xbb8528: ldur            w3, [x2, #0x27]
    // 0xbb852c: DecompressPointer r3
    //     0xbb852c: add             x3, x3, HEAP, lsl #32
    // 0xbb8530: LoadField: r4 = r1->field_27
    //     0xbb8530: ldur            w4, [x1, #0x27]
    // 0xbb8534: DecompressPointer r4
    //     0xbb8534: add             x4, x4, HEAP, lsl #32
    // 0xbb8538: cmp             w3, w4
    // 0xbb853c: b.ne            #0xbb8594
    // 0xbb8540: LoadField: r3 = r2->field_2b
    //     0xbb8540: ldur            w3, [x2, #0x2b]
    // 0xbb8544: DecompressPointer r3
    //     0xbb8544: add             x3, x3, HEAP, lsl #32
    // 0xbb8548: LoadField: r4 = r1->field_2b
    //     0xbb8548: ldur            w4, [x1, #0x2b]
    // 0xbb854c: DecompressPointer r4
    //     0xbb854c: add             x4, x4, HEAP, lsl #32
    // 0xbb8550: cmp             w3, w4
    // 0xbb8554: b.ne            #0xbb8594
    // 0xbb8558: LoadField: d0 = r2->field_2f
    //     0xbb8558: ldur            d0, [x2, #0x2f]
    // 0xbb855c: LoadField: d1 = r1->field_2f
    //     0xbb855c: ldur            d1, [x1, #0x2f]
    // 0xbb8560: fcmp            d0, d1
    // 0xbb8564: b.vs            #0xbb8594
    // 0xbb8568: b.ne            #0xbb8594
    // 0xbb856c: LoadField: d0 = r2->field_37
    //     0xbb856c: ldur            d0, [x2, #0x37]
    // 0xbb8570: LoadField: d1 = r1->field_37
    //     0xbb8570: ldur            d1, [x1, #0x37]
    // 0xbb8574: fcmp            d0, d1
    // 0xbb8578: b.vs            #0xbb8580
    // 0xbb857c: b.eq            #0xbb8588
    // 0xbb8580: r1 = false
    //     0xbb8580: add             x1, NULL, #0x30  ; false
    // 0xbb8584: b               #0xbb858c
    // 0xbb8588: r1 = true
    //     0xbb8588: add             x1, NULL, #0x20  ; true
    // 0xbb858c: mov             x0, x1
    // 0xbb8590: b               #0xbb8598
    // 0xbb8594: r0 = false
    //     0xbb8594: add             x0, NULL, #0x30  ; false
    // 0xbb8598: LeaveFrame
    //     0xbb8598: mov             SP, fp
    //     0xbb859c: ldp             fp, lr, [SP], #0x10
    // 0xbb85a0: ret
    //     0xbb85a0: ret             
    // 0xbb85a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbb85a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbb85a8: b               #0xbb842c
  }
}

// class id: 4610, size: 0x10, field offset: 0xc
//   const constructor, 
class ERScrollBehavior extends ScrollBehavior {

  static late final Set<PointerDeviceKind> _kDragDevices; // offset: 0x1330

  _ getScrollPhysics(/* No info */) {
    // ** addr: 0xbefa0c, size: 0x54
    // 0xbefa0c: EnterFrame
    //     0xbefa0c: stp             fp, lr, [SP, #-0x10]!
    //     0xbefa10: mov             fp, SP
    // 0xbefa14: AllocStack(0x10)
    //     0xbefa14: sub             SP, SP, #0x10
    // 0xbefa18: CheckStackOverflow
    //     0xbefa18: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbefa1c: cmp             SP, x16
    //     0xbefa20: b.ls            #0xbefa58
    // 0xbefa24: ldr             x0, [fp, #0x18]
    // 0xbefa28: LoadField: r1 = r0->field_b
    //     0xbefa28: ldur            w1, [x0, #0xb]
    // 0xbefa2c: DecompressPointer r1
    //     0xbefa2c: add             x1, x1, HEAP, lsl #32
    // 0xbefa30: cmp             w1, NULL
    // 0xbefa34: b.ne            #0xbefa48
    // 0xbefa38: ldr             x16, [fp, #0x10]
    // 0xbefa3c: stp             x16, x0, [SP]
    // 0xbefa40: r0 = getScrollPhysics()
    //     0xbefa40: bl              #0xbefa60  ; [package:flutter/src/widgets/scroll_configuration.dart] ScrollBehavior::getScrollPhysics
    // 0xbefa44: b               #0xbefa4c
    // 0xbefa48: mov             x0, x1
    // 0xbefa4c: LeaveFrame
    //     0xbefa4c: mov             SP, fp
    //     0xbefa50: ldp             fp, lr, [SP], #0x10
    // 0xbefa54: ret
    //     0xbefa54: ret             
    // 0xbefa58: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbefa58: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbefa5c: b               #0xbefa24
  }
  get _ dragDevices(/* No info */) {
    // ** addr: 0xbefac8, size: 0x48
    // 0xbefac8: EnterFrame
    //     0xbefac8: stp             fp, lr, [SP, #-0x10]!
    //     0xbefacc: mov             fp, SP
    // 0xbefad0: CheckStackOverflow
    //     0xbefad0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbefad4: cmp             SP, x16
    //     0xbefad8: b.ls            #0xbefb08
    // 0xbefadc: r0 = InitLateStaticField(0x1330) // [package:easy_refresh/easy_refresh.dart] ERScrollBehavior::_kDragDevices
    //     0xbefadc: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xbefae0: ldr             x0, [x0, #0x2660]
    //     0xbefae4: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xbefae8: cmp             w0, w16
    //     0xbefaec: b.ne            #0xbefafc
    //     0xbefaf0: add             x2, PP, #0x31, lsl #12  ; [pp+0x316c0] Field <ERScrollBehavior._kDragDevices@765089737>: static late final (offset: 0x1330)
    //     0xbefaf4: ldr             x2, [x2, #0x6c0]
    //     0xbefaf8: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xbefafc: LeaveFrame
    //     0xbefafc: mov             SP, fp
    //     0xbefb00: ldp             fp, lr, [SP], #0x10
    // 0xbefb04: ret
    //     0xbefb04: ret             
    // 0xbefb08: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbefb08: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbefb0c: b               #0xbefadc
  }
  static Set<PointerDeviceKind> _kDragDevices() {
    // ** addr: 0xbefb10, size: 0x38
    // 0xbefb10: EnterFrame
    //     0xbefb10: stp             fp, lr, [SP, #-0x10]!
    //     0xbefb14: mov             fp, SP
    // 0xbefb18: AllocStack(0x8)
    //     0xbefb18: sub             SP, SP, #8
    // 0xbefb1c: CheckStackOverflow
    //     0xbefb1c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xbefb20: cmp             SP, x16
    //     0xbefb24: b.ls            #0xbefb40
    // 0xbefb28: r16 = const [Instance of 'PointerDeviceKind', Instance of 'PointerDeviceKind', Instance of 'PointerDeviceKind', Instance of 'PointerDeviceKind', Instance of 'PointerDeviceKind', Instance of 'PointerDeviceKind']
    //     0xbefb28: ldr             x16, [PP, #0x568]  ; [pp+0x568] List<PointerDeviceKind>(6)
    // 0xbefb2c: str             x16, [SP]
    // 0xbefb30: r0 = toSet()
    //     0xbefb30: bl              #0x592a7c  ; [dart:collection] ListBase::toSet
    // 0xbefb34: LeaveFrame
    //     0xbefb34: mov             SP, fp
    //     0xbefb38: ldp             fp, lr, [SP], #0x10
    // 0xbefb3c: ret
    //     0xbefb3c: ret             
    // 0xbefb40: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xbefb40: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xbefb44: b               #0xbefb28
  }
}

// class id: 4611, size: 0x1c, field offset: 0x8
//   const constructor, 
class _BallisticSimulationCreationState extends Object {
}

// class id: 4612, size: 0x14, field offset: 0x8
//   const constructor, 
class EasyRefreshData extends Object {
}

// class id: 4803, size: 0x8c, field offset: 0x24
abstract class IndicatorNotifier extends ChangeNotifier {

  _ _finishTask(/* No info */) {
    // ** addr: 0x683440, size: 0x94
    // 0x683440: EnterFrame
    //     0x683440: stp             fp, lr, [SP, #-0x10]!
    //     0x683444: mov             fp, SP
    // 0x683448: AllocStack(0x10)
    //     0x683448: sub             SP, SP, #0x10
    // 0x68344c: CheckStackOverflow
    //     0x68344c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x683450: cmp             SP, x16
    //     0x683454: b.ls            #0x6834cc
    // 0x683458: ldr             x0, [fp, #0x10]
    // 0x68345c: ldr             x1, [fp, #0x18]
    // 0x683460: StoreField: r1->field_7f = r0
    //     0x683460: stur            w0, [x1, #0x7f]
    //     0x683464: ldurb           w16, [x1, #-1]
    //     0x683468: ldurb           w17, [x0, #-1]
    //     0x68346c: and             x16, x17, x16, lsr #2
    //     0x683470: tst             x16, HEAP, lsr #32
    //     0x683474: b.eq            #0x68347c
    //     0x683478: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x68347c: LoadField: r0 = r1->field_33
    //     0x68347c: ldur            w0, [x1, #0x33]
    // 0x683480: DecompressPointer r0
    //     0x683480: add             x0, x0, HEAP, lsl #32
    // 0x683484: tbz             w0, #4, #0x6834bc
    // 0x683488: LoadField: r0 = r1->field_63
    //     0x683488: ldur            w0, [x1, #0x63]
    // 0x68348c: DecompressPointer r0
    //     0x68348c: add             x0, x0, HEAP, lsl #32
    // 0x683490: r16 = Instance_IndicatorMode
    //     0x683490: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x683494: ldr             x16, [x16, #0x158]
    // 0x683498: cmp             w0, w16
    // 0x68349c: b.ne            #0x6834bc
    // 0x6834a0: r16 = Instance_IndicatorMode
    //     0x6834a0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x6834a4: ldr             x16, [x16, #0x160]
    // 0x6834a8: stp             x16, x1, [SP]
    // 0x6834ac: r0 = _setMode()
    //     0x6834ac: bl              #0x6834fc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode
    // 0x6834b0: ldr             x1, [fp, #0x18]
    // 0x6834b4: r2 = false
    //     0x6834b4: add             x2, NULL, #0x30  ; false
    // 0x6834b8: StoreField: r1->field_77 = r2
    //     0x6834b8: stur            w2, [x1, #0x77]
    // 0x6834bc: r0 = Null
    //     0x6834bc: mov             x0, NULL
    // 0x6834c0: LeaveFrame
    //     0x6834c0: mov             SP, fp
    //     0x6834c4: ldp             fp, lr, [SP], #0x10
    // 0x6834c8: ret
    //     0x6834c8: ret             
    // 0x6834cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6834cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6834d0: b               #0x683458
  }
  _ _setMode(/* No info */) {
    // ** addr: 0x6834fc, size: 0x250
    // 0x6834fc: EnterFrame
    //     0x6834fc: stp             fp, lr, [SP, #-0x10]!
    //     0x683500: mov             fp, SP
    // 0x683504: AllocStack(0x38)
    //     0x683504: sub             SP, SP, #0x38
    // 0x683508: CheckStackOverflow
    //     0x683508: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x68350c: cmp             SP, x16
    //     0x683510: b.ls            #0x68373c
    // 0x683514: r1 = 2
    //     0x683514: movz            x1, #0x2
    // 0x683518: r0 = AllocateContext()
    //     0x683518: bl              #0xc5def4  ; AllocateContextStub
    // 0x68351c: mov             x1, x0
    // 0x683520: ldr             x0, [fp, #0x18]
    // 0x683524: stur            x1, [fp, #-8]
    // 0x683528: StoreField: r1->field_f = r0
    //     0x683528: stur            w0, [x1, #0xf]
    // 0x68352c: LoadField: r2 = r0->field_63
    //     0x68352c: ldur            w2, [x0, #0x63]
    // 0x683530: DecompressPointer r2
    //     0x683530: add             x2, x2, HEAP, lsl #32
    // 0x683534: ldr             x3, [fp, #0x10]
    // 0x683538: cmp             w2, w3
    // 0x68353c: b.ne            #0x683550
    // 0x683540: r0 = Null
    //     0x683540: mov             x0, NULL
    // 0x683544: LeaveFrame
    //     0x683544: mov             SP, fp
    //     0x683548: ldp             fp, lr, [SP], #0x10
    // 0x68354c: ret
    //     0x68354c: ret             
    // 0x683550: LoadField: r4 = r0->field_37
    //     0x683550: ldur            w4, [x0, #0x37]
    // 0x683554: DecompressPointer r4
    //     0x683554: add             x4, x4, HEAP, lsl #32
    // 0x683558: tbz             w4, #4, #0x68356c
    // 0x68355c: r0 = Null
    //     0x68355c: mov             x0, NULL
    // 0x683560: LeaveFrame
    //     0x683560: mov             SP, fp
    //     0x683564: ldp             fp, lr, [SP], #0x10
    // 0x683568: ret
    //     0x683568: ret             
    // 0x68356c: StoreField: r1->field_13 = r2
    //     0x68356c: stur            w2, [x1, #0x13]
    // 0x683570: stp             x3, x0, [SP]
    // 0x683574: r0 = _mode=()
    //     0x683574: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x683578: ldr             x16, [fp, #0x18]
    // 0x68357c: str             x16, [SP]
    // 0x683580: r0 = notifyListeners()
    //     0x683580: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x683584: ldr             x0, [fp, #0x18]
    // 0x683588: LoadField: r1 = r0->field_63
    //     0x683588: ldur            w1, [x0, #0x63]
    // 0x68358c: DecompressPointer r1
    //     0x68358c: add             x1, x1, HEAP, lsl #32
    // 0x683590: r16 = Instance_IndicatorMode
    //     0x683590: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x683594: ldr             x16, [x16, #0x160]
    // 0x683598: cmp             w1, w16
    // 0x68359c: b.ne            #0x68372c
    // 0x6835a0: LoadField: r1 = r0->field_23
    //     0x6835a0: ldur            w1, [x0, #0x23]
    // 0x6835a4: DecompressPointer r1
    //     0x6835a4: add             x1, x1, HEAP, lsl #32
    // 0x6835a8: ArrayLoad: r2 = r1[0]  ; List_4
    //     0x6835a8: ldur            w2, [x1, #0x17]
    // 0x6835ac: DecompressPointer r2
    //     0x6835ac: add             x2, x2, HEAP, lsl #32
    // 0x6835b0: r16 = Instance_Duration
    //     0x6835b0: ldr             x16, [PP, #0x2828]  ; [pp+0x2828] Obj!Duration@c47ca1
    // 0x6835b4: stp             x16, x2, [SP]
    // 0x6835b8: r0 = ==()
    //     0x6835b8: bl              #0xba8fac  ; [dart:core] Duration::==
    // 0x6835bc: tbnz            w0, #4, #0x6836b8
    // 0x6835c0: r0 = LoadStaticField(0xc34)
    //     0x6835c0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x6835c4: ldr             x0, [x0, #0x1868]
    // 0x6835c8: cmp             w0, NULL
    // 0x6835cc: b.eq            #0x683744
    // 0x6835d0: LoadField: r3 = r0->field_53
    //     0x6835d0: ldur            w3, [x0, #0x53]
    // 0x6835d4: DecompressPointer r3
    //     0x6835d4: add             x3, x3, HEAP, lsl #32
    // 0x6835d8: stur            x3, [fp, #-0x18]
    // 0x6835dc: LoadField: r0 = r3->field_7
    //     0x6835dc: ldur            w0, [x3, #7]
    // 0x6835e0: DecompressPointer r0
    //     0x6835e0: add             x0, x0, HEAP, lsl #32
    // 0x6835e4: ldur            x2, [fp, #-8]
    // 0x6835e8: stur            x0, [fp, #-0x10]
    // 0x6835ec: r1 = Function '<anonymous closure>':.
    //     0x6835ec: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d168] AnonymousClosure: (0x6853cc), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode (0x6834fc)
    //     0x6835f0: ldr             x1, [x1, #0x168]
    // 0x6835f4: r0 = AllocateClosure()
    //     0x6835f4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x6835f8: ldur            x2, [fp, #-0x10]
    // 0x6835fc: mov             x3, x0
    // 0x683600: r1 = Null
    //     0x683600: mov             x1, NULL
    // 0x683604: stur            x3, [fp, #-0x10]
    // 0x683608: cmp             w2, NULL
    // 0x68360c: b.eq            #0x68362c
    // 0x683610: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x683610: ldur            w4, [x2, #0x17]
    // 0x683614: DecompressPointer r4
    //     0x683614: add             x4, x4, HEAP, lsl #32
    // 0x683618: r8 = X0
    //     0x683618: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x68361c: LoadField: r9 = r4->field_7
    //     0x68361c: ldur            x9, [x4, #7]
    // 0x683620: r3 = Null
    //     0x683620: add             x3, PP, #0x1d, lsl #12  ; [pp+0x1d170] Null
    //     0x683624: ldr             x3, [x3, #0x170]
    // 0x683628: blr             x9
    // 0x68362c: ldur            x0, [fp, #-0x18]
    // 0x683630: LoadField: r1 = r0->field_b
    //     0x683630: ldur            w1, [x0, #0xb]
    // 0x683634: DecompressPointer r1
    //     0x683634: add             x1, x1, HEAP, lsl #32
    // 0x683638: stur            x1, [fp, #-0x20]
    // 0x68363c: LoadField: r2 = r0->field_f
    //     0x68363c: ldur            w2, [x0, #0xf]
    // 0x683640: DecompressPointer r2
    //     0x683640: add             x2, x2, HEAP, lsl #32
    // 0x683644: LoadField: r3 = r2->field_b
    //     0x683644: ldur            w3, [x2, #0xb]
    // 0x683648: DecompressPointer r3
    //     0x683648: add             x3, x3, HEAP, lsl #32
    // 0x68364c: cmp             w1, w3
    // 0x683650: b.ne            #0x68365c
    // 0x683654: str             x0, [SP]
    // 0x683658: r0 = _growToNextCapacity()
    //     0x683658: bl              #0x4c44dc  ; [dart:core] _GrowableList::_growToNextCapacity
    // 0x68365c: ldur            x2, [fp, #-0x18]
    // 0x683660: ldur            x0, [fp, #-0x20]
    // 0x683664: r3 = LoadInt32Instr(r0)
    //     0x683664: sbfx            x3, x0, #1, #0x1f
    // 0x683668: add             x0, x3, #1
    // 0x68366c: lsl             x1, x0, #1
    // 0x683670: StoreField: r2->field_b = r1
    //     0x683670: stur            w1, [x2, #0xb]
    // 0x683674: mov             x1, x3
    // 0x683678: cmp             x1, x0
    // 0x68367c: b.hs            #0x683748
    // 0x683680: LoadField: r1 = r2->field_f
    //     0x683680: ldur            w1, [x2, #0xf]
    // 0x683684: DecompressPointer r1
    //     0x683684: add             x1, x1, HEAP, lsl #32
    // 0x683688: ldur            x0, [fp, #-0x10]
    // 0x68368c: ArrayStore: r1[r3] = r0  ; List_4
    //     0x68368c: add             x25, x1, x3, lsl #2
    //     0x683690: add             x25, x25, #0xf
    //     0x683694: str             w0, [x25]
    //     0x683698: tbz             w0, #0, #0x6836b4
    //     0x68369c: ldurb           w16, [x1, #-1]
    //     0x6836a0: ldurb           w17, [x0, #-1]
    //     0x6836a4: and             x16, x17, x16, lsr #2
    //     0x6836a8: tst             x16, HEAP, lsr #32
    //     0x6836ac: b.eq            #0x6836b4
    //     0x6836b0: bl              #0xc5d2dc  ; ArrayWriteBarrierStub
    // 0x6836b4: b               #0x6836f8
    // 0x6836b8: ldr             x0, [fp, #0x18]
    // 0x6836bc: LoadField: r1 = r0->field_23
    //     0x6836bc: ldur            w1, [x0, #0x23]
    // 0x6836c0: DecompressPointer r1
    //     0x6836c0: add             x1, x1, HEAP, lsl #32
    // 0x6836c4: ArrayLoad: r3 = r1[0]  ; List_4
    //     0x6836c4: ldur            w3, [x1, #0x17]
    // 0x6836c8: DecompressPointer r3
    //     0x6836c8: add             x3, x3, HEAP, lsl #32
    // 0x6836cc: ldur            x2, [fp, #-8]
    // 0x6836d0: stur            x3, [fp, #-0x10]
    // 0x6836d4: r1 = Function '<anonymous closure>':.
    //     0x6836d4: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d180] AnonymousClosure: (0x68511c), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode (0x6834fc)
    //     0x6836d8: ldr             x1, [x1, #0x180]
    // 0x6836dc: r0 = AllocateClosure()
    //     0x6836dc: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x6836e0: r16 = <Null?>
    //     0x6836e0: ldr             x16, [PP, #0xf48]  ; [pp+0xf48] TypeArguments: <Null?>
    // 0x6836e4: ldur            lr, [fp, #-0x10]
    // 0x6836e8: stp             lr, x16, [SP, #8]
    // 0x6836ec: str             x0, [SP]
    // 0x6836f0: r4 = const [0, 0x3, 0x3, 0x3, null]
    //     0x6836f0: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    // 0x6836f4: r0 = Future.delayed()
    //     0x6836f4: bl              #0x62dc18  ; [dart:async] Future::Future.delayed
    // 0x6836f8: ldr             x0, [fp, #0x18]
    // 0x6836fc: LoadField: r1 = r0->field_2b
    //     0x6836fc: ldur            w1, [x0, #0x2b]
    // 0x683700: DecompressPointer r1
    //     0x683700: add             x1, x1, HEAP, lsl #32
    // 0x683704: LoadField: r0 = r1->field_27
    //     0x683704: ldur            w0, [x1, #0x27]
    // 0x683708: DecompressPointer r0
    //     0x683708: add             x0, x0, HEAP, lsl #32
    // 0x68370c: tbnz            w0, #4, #0x68372c
    // 0x683710: ldur            x2, [fp, #-8]
    // 0x683714: r1 = Function '<anonymous closure>':.
    //     0x683714: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d188] AnonymousClosure: (0x6838c0), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode (0x6834fc)
    //     0x683718: ldr             x1, [x1, #0x188]
    // 0x68371c: r0 = AllocateClosure()
    //     0x68371c: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x683720: r16 = <Null?>
    //     0x683720: ldr             x16, [PP, #0xf48]  ; [pp+0xf48] TypeArguments: <Null?>
    // 0x683724: stp             x0, x16, [SP]
    // 0x683728: r0 = Future()
    //     0x683728: bl              #0x4de2fc  ; [dart:async] Future::Future
    // 0x68372c: r0 = Null
    //     0x68372c: mov             x0, NULL
    // 0x683730: LeaveFrame
    //     0x683730: mov             SP, fp
    //     0x683734: ldp             fp, lr, [SP], #0x10
    // 0x683738: ret
    //     0x683738: ret             
    // 0x68373c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x68373c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x683740: b               #0x683514
    // 0x683744: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x683744: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x683748: r0 = RangeErrorSharedWithoutFPURegs()
    //     0x683748: bl              #0xc5f2d0  ; RangeErrorSharedWithoutFPURegsStub
  }
  set _ _mode=(/* No info */) {
    // ** addr: 0x68374c, size: 0x174
    // 0x68374c: EnterFrame
    //     0x68374c: stp             fp, lr, [SP, #-0x10]!
    //     0x683750: mov             fp, SP
    // 0x683754: AllocStack(0x30)
    //     0x683754: sub             SP, SP, #0x30
    // 0x683758: CheckStackOverflow
    //     0x683758: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x68375c: cmp             SP, x16
    //     0x683760: b.ls            #0x683890
    // 0x683764: ldr             x1, [fp, #0x18]
    // 0x683768: LoadField: r2 = r1->field_63
    //     0x683768: ldur            w2, [x1, #0x63]
    // 0x68376c: DecompressPointer r2
    //     0x68376c: add             x2, x2, HEAP, lsl #32
    // 0x683770: ldr             x0, [fp, #0x10]
    // 0x683774: StoreField: r1->field_63 = r0
    //     0x683774: stur            w0, [x1, #0x63]
    //     0x683778: ldurb           w16, [x1, #-1]
    //     0x68377c: ldurb           w17, [x0, #-1]
    //     0x683780: and             x16, x17, x16, lsr #2
    //     0x683784: tst             x16, HEAP, lsr #32
    //     0x683788: b.eq            #0x683790
    //     0x68378c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x683790: ldr             x0, [fp, #0x10]
    // 0x683794: cmp             w0, w2
    // 0x683798: b.eq            #0x683880
    // 0x68379c: LoadField: r2 = r1->field_73
    //     0x68379c: ldur            w2, [x1, #0x73]
    // 0x6837a0: DecompressPointer r2
    //     0x6837a0: add             x2, x2, HEAP, lsl #32
    // 0x6837a4: str             x2, [SP]
    // 0x6837a8: r0 = iterator()
    //     0x6837a8: bl              #0x5aab8c  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::iterator
    // 0x6837ac: stur            x0, [fp, #-0x10]
    // 0x6837b0: LoadField: r2 = r0->field_7
    //     0x6837b0: ldur            w2, [x0, #7]
    // 0x6837b4: DecompressPointer r2
    //     0x6837b4: add             x2, x2, HEAP, lsl #32
    // 0x6837b8: stur            x2, [fp, #-8]
    // 0x6837bc: ldr             x1, [fp, #0x18]
    // 0x6837c0: CheckStackOverflow
    //     0x6837c0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6837c4: cmp             SP, x16
    //     0x6837c8: b.ls            #0x683898
    // 0x6837cc: str             x0, [SP]
    // 0x6837d0: r0 = moveNext()
    //     0x6837d0: bl              #0xb9b4b0  ; [dart:collection] _CompactIterator::moveNext
    // 0x6837d4: tbnz            w0, #4, #0x683880
    // 0x6837d8: ldur            x3, [fp, #-0x10]
    // 0x6837dc: LoadField: r4 = r3->field_33
    //     0x6837dc: ldur            w4, [x3, #0x33]
    // 0x6837e0: DecompressPointer r4
    //     0x6837e0: add             x4, x4, HEAP, lsl #32
    // 0x6837e4: stur            x4, [fp, #-0x18]
    // 0x6837e8: cmp             w4, NULL
    // 0x6837ec: b.ne            #0x683820
    // 0x6837f0: mov             x0, x4
    // 0x6837f4: ldur            x2, [fp, #-8]
    // 0x6837f8: r1 = Null
    //     0x6837f8: mov             x1, NULL
    // 0x6837fc: cmp             w2, NULL
    // 0x683800: b.eq            #0x683820
    // 0x683804: ArrayLoad: r4 = r2[0]  ; List_4
    //     0x683804: ldur            w4, [x2, #0x17]
    // 0x683808: DecompressPointer r4
    //     0x683808: add             x4, x4, HEAP, lsl #32
    // 0x68380c: r8 = X0
    //     0x68380c: ldr             x8, [PP, #0x538]  ; [pp+0x538] TypeParameter: X0
    // 0x683810: LoadField: r9 = r4->field_7
    //     0x683810: ldur            x9, [x4, #7]
    // 0x683814: r3 = Null
    //     0x683814: add             x3, PP, #0x1d, lsl #12  ; [pp+0x1d230] Null
    //     0x683818: ldr             x3, [x3, #0x230]
    // 0x68381c: blr             x9
    // 0x683820: ldr             x1, [fp, #0x18]
    // 0x683824: ldur            x0, [fp, #-0x18]
    // 0x683828: LoadField: d0 = r1->field_4b
    //     0x683828: ldur            d0, [x1, #0x4b]
    // 0x68382c: cmp             w0, NULL
    // 0x683830: b.eq            #0x6838a0
    // 0x683834: r2 = inline_Allocate_Double()
    //     0x683834: ldp             x2, x3, [THR, #0x50]  ; THR::top
    //     0x683838: add             x2, x2, #0x10
    //     0x68383c: cmp             x3, x2
    //     0x683840: b.ls            #0x6838a4
    //     0x683844: str             x2, [THR, #0x50]  ; THR::top
    //     0x683848: sub             x2, x2, #0xf
    //     0x68384c: movz            x3, #0xd148
    //     0x683850: movk            x3, #0x3, lsl #16
    //     0x683854: stur            x3, [x2, #-1]
    // 0x683858: StoreField: r2->field_7 = d0
    //     0x683858: stur            d0, [x2, #7]
    // 0x68385c: ldr             x16, [fp, #0x10]
    // 0x683860: stp             x16, x0, [SP, #8]
    // 0x683864: str             x2, [SP]
    // 0x683868: ClosureCall
    //     0x683868: ldr             x4, [PP, #0x288]  ; [pp+0x288] List(5) [0, 0x3, 0x3, 0x3, Null]
    //     0x68386c: ldur            x2, [x0, #0x1f]
    //     0x683870: blr             x2
    // 0x683874: ldur            x0, [fp, #-0x10]
    // 0x683878: ldur            x2, [fp, #-8]
    // 0x68387c: b               #0x6837bc
    // 0x683880: r0 = Null
    //     0x683880: mov             x0, NULL
    // 0x683884: LeaveFrame
    //     0x683884: mov             SP, fp
    //     0x683888: ldp             fp, lr, [SP], #0x10
    // 0x68388c: ret
    //     0x68388c: ret             
    // 0x683890: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x683890: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x683894: b               #0x683764
    // 0x683898: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x683898: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x68389c: b               #0x6837cc
    // 0x6838a0: r0 = NullErrorSharedWithFPURegs()
    //     0x6838a0: bl              #0xc5f62c  ; NullErrorSharedWithFPURegsStub
    // 0x6838a4: SaveReg d0
    //     0x6838a4: str             q0, [SP, #-0x10]!
    // 0x6838a8: stp             x0, x1, [SP, #-0x10]!
    // 0x6838ac: r0 = AllocateDouble()
    //     0x6838ac: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x6838b0: mov             x2, x0
    // 0x6838b4: ldp             x0, x1, [SP], #0x10
    // 0x6838b8: RestoreReg d0
    //     0x6838b8: ldr             q0, [SP], #0x10
    // 0x6838bc: b               #0x683858
  }
  [closure] Null <anonymous closure>(dynamic) {
    // ** addr: 0x6838c0, size: 0x94
    // 0x6838c0: EnterFrame
    //     0x6838c0: stp             fp, lr, [SP, #-0x10]!
    //     0x6838c4: mov             fp, SP
    // 0x6838c8: AllocStack(0x30)
    //     0x6838c8: sub             SP, SP, #0x30
    // 0x6838cc: SetupParameters()
    //     0x6838cc: ldr             x0, [fp, #0x10]
    //     0x6838d0: ldur            w1, [x0, #0x17]
    //     0x6838d4: add             x1, x1, HEAP, lsl #32
    // 0x6838d8: CheckStackOverflow
    //     0x6838d8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6838dc: cmp             SP, x16
    //     0x6838e0: b.ls            #0x683948
    // 0x6838e4: LoadField: r2 = r1->field_f
    //     0x6838e4: ldur            w2, [x1, #0xf]
    // 0x6838e8: DecompressPointer r2
    //     0x6838e8: add             x2, x2, HEAP, lsl #32
    // 0x6838ec: stur            x2, [fp, #-0x10]
    // 0x6838f0: LoadField: r1 = r2->field_53
    //     0x6838f0: ldur            w1, [x2, #0x53]
    // 0x6838f4: DecompressPointer r1
    //     0x6838f4: add             x1, x1, HEAP, lsl #32
    // 0x6838f8: stur            x1, [fp, #-8]
    // 0x6838fc: cmp             w1, NULL
    // 0x683900: b.eq            #0x683950
    // 0x683904: r0 = LoadClassIdInstr(r1)
    //     0x683904: ldur            x0, [x1, #-1]
    //     0x683908: ubfx            x0, x0, #0xc, #0x14
    // 0x68390c: str             x1, [SP]
    // 0x683910: r0 = GDT[cid_x0 + -0xfef]()
    //     0x683910: sub             lr, x0, #0xfef
    //     0x683914: ldr             lr, [x21, lr, lsl #3]
    //     0x683918: blr             lr
    // 0x68391c: ldur            x16, [fp, #-0x10]
    // 0x683920: ldur            lr, [fp, #-8]
    // 0x683924: stp             lr, x16, [SP, #0x10]
    // 0x683928: str             d0, [SP, #8]
    // 0x68392c: r16 = false
    //     0x68392c: add             x16, NULL, #0x30  ; false
    // 0x683930: str             x16, [SP]
    // 0x683934: r0 = _updateOffset()
    //     0x683934: bl              #0x683954  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset
    // 0x683938: r0 = Null
    //     0x683938: mov             x0, NULL
    // 0x68393c: LeaveFrame
    //     0x68393c: mov             SP, fp
    //     0x683940: ldp             fp, lr, [SP], #0x10
    // 0x683944: ret
    //     0x683944: ret             
    // 0x683948: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x683948: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x68394c: b               #0x6838e4
    // 0x683950: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x683950: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _updateOffset(/* No info */) {
    // ** addr: 0x683954, size: 0x57c
    // 0x683954: EnterFrame
    //     0x683954: stp             fp, lr, [SP, #-0x10]!
    //     0x683958: mov             fp, SP
    // 0x68395c: AllocStack(0x38)
    //     0x68395c: sub             SP, SP, #0x38
    // 0x683960: CheckStackOverflow
    //     0x683960: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x683964: cmp             SP, x16
    //     0x683968: b.ls            #0x683eb8
    // 0x68396c: r1 = 1
    //     0x68396c: movz            x1, #0x1
    // 0x683970: r0 = AllocateContext()
    //     0x683970: bl              #0xc5def4  ; AllocateContextStub
    // 0x683974: mov             x1, x0
    // 0x683978: ldr             x0, [fp, #0x28]
    // 0x68397c: stur            x1, [fp, #-8]
    // 0x683980: StoreField: r1->field_f = r0
    //     0x683980: stur            w0, [x1, #0xf]
    // 0x683984: LoadField: r2 = r0->field_63
    //     0x683984: ldur            w2, [x0, #0x63]
    // 0x683988: DecompressPointer r2
    //     0x683988: add             x2, x2, HEAP, lsl #32
    // 0x68398c: r16 = Instance_IndicatorMode
    //     0x68398c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x683990: ldr             x16, [x16, #0x190]
    // 0x683994: cmp             w2, w16
    // 0x683998: b.ne            #0x6839b4
    // 0x68399c: ldr             x2, [fp, #0x10]
    // 0x6839a0: tbnz            w2, #4, #0x6839b8
    // 0x6839a4: r0 = Null
    //     0x6839a4: mov             x0, NULL
    // 0x6839a8: LeaveFrame
    //     0x6839a8: mov             SP, fp
    //     0x6839ac: ldp             fp, lr, [SP], #0x10
    // 0x6839b0: ret
    //     0x6839b0: ret             
    // 0x6839b4: ldr             x2, [fp, #0x10]
    // 0x6839b8: ldr             x16, [fp, #0x20]
    // 0x6839bc: stp             x16, x0, [SP]
    // 0x6839c0: r0 = position=()
    //     0x6839c0: bl              #0x684cf8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::position=
    // 0x6839c4: ldr             x1, [fp, #0x28]
    // 0x6839c8: LoadField: d0 = r1->field_4b
    //     0x6839c8: ldur            d0, [x1, #0x4b]
    // 0x6839cc: stur            d0, [fp, #-0x20]
    // 0x6839d0: LoadField: r2 = r1->field_63
    //     0x6839d0: ldur            w2, [x1, #0x63]
    // 0x6839d4: DecompressPointer r2
    //     0x6839d4: add             x2, x2, HEAP, lsl #32
    // 0x6839d8: stur            x2, [fp, #-0x18]
    // 0x6839dc: r3 = LoadClassIdInstr(r1)
    //     0x6839dc: ldur            x3, [x1, #-1]
    //     0x6839e0: ubfx            x3, x3, #0xc, #0x14
    // 0x6839e4: lsl             x3, x3, #1
    // 0x6839e8: stur            x3, [fp, #-0x10]
    // 0x6839ec: r17 = 9608
    //     0x6839ec: movz            x17, #0x2588
    // 0x6839f0: cmp             w3, w17
    // 0x6839f4: b.ne            #0x683ac8
    // 0x6839f8: ldr             x4, [fp, #0x20]
    // 0x6839fc: ldr             d1, [fp, #0x18]
    // 0x683a00: r0 = LoadClassIdInstr(r4)
    //     0x683a00: ldur            x0, [x4, #-1]
    //     0x683a04: ubfx            x0, x0, #0xc, #0x14
    // 0x683a08: str             x4, [SP]
    // 0x683a0c: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x683a0c: sub             lr, x0, #0xe6f
    //     0x683a10: ldr             lr, [x21, lr, lsl #3]
    //     0x683a14: blr             lr
    // 0x683a18: mov             v1.16b, v0.16b
    // 0x683a1c: ldr             d0, [fp, #0x18]
    // 0x683a20: fcmp            d0, d1
    // 0x683a24: b.vs            #0x683a4c
    // 0x683a28: b.gt            #0x683a4c
    // 0x683a2c: ldr             x1, [fp, #0x28]
    // 0x683a30: d1 = 0.000000
    //     0x683a30: eor             v1.16b, v1.16b, v1.16b
    // 0x683a34: LoadField: d2 = r1->field_4b
    //     0x683a34: ldur            d2, [x1, #0x4b]
    // 0x683a38: fcmp            d2, d1
    // 0x683a3c: b.eq            #0x683a54
    // 0x683a40: mov             x0, x1
    // 0x683a44: d2 = 0.000000
    //     0x683a44: eor             v2.16b, v2.16b, v2.16b
    // 0x683a48: b               #0x683b94
    // 0x683a4c: ldr             x1, [fp, #0x28]
    // 0x683a50: d1 = 0.000000
    //     0x683a50: eor             v1.16b, v1.16b, v1.16b
    // 0x683a54: ldr             x2, [fp, #0x20]
    // 0x683a58: r0 = LoadClassIdInstr(r2)
    //     0x683a58: ldur            x0, [x2, #-1]
    //     0x683a5c: ubfx            x0, x0, #0xc, #0x14
    // 0x683a60: str             x2, [SP]
    // 0x683a64: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x683a64: sub             lr, x0, #0xe6f
    //     0x683a68: ldr             lr, [x21, lr, lsl #3]
    //     0x683a6c: blr             lr
    // 0x683a70: mov             v1.16b, v0.16b
    // 0x683a74: ldr             d0, [fp, #0x18]
    // 0x683a78: fsub            d2, d0, d1
    // 0x683a7c: ldr             x1, [fp, #0x20]
    // 0x683a80: stur            d2, [fp, #-0x28]
    // 0x683a84: r0 = LoadClassIdInstr(r1)
    //     0x683a84: ldur            x0, [x1, #-1]
    //     0x683a88: ubfx            x0, x0, #0xc, #0x14
    // 0x683a8c: str             x1, [SP]
    // 0x683a90: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x683a90: sub             lr, x0, #0xe6f
    //     0x683a94: ldr             lr, [x21, lr, lsl #3]
    //     0x683a98: blr             lr
    // 0x683a9c: mov             v1.16b, v0.16b
    // 0x683aa0: ldr             d0, [fp, #0x18]
    // 0x683aa4: fcmp            d0, d1
    // 0x683aa8: b.vs            #0x683ab8
    // 0x683aac: b.ge            #0x683ab8
    // 0x683ab0: d1 = 0.000000
    //     0x683ab0: eor             v1.16b, v1.16b, v1.16b
    // 0x683ab4: b               #0x683abc
    // 0x683ab8: ldur            d1, [fp, #-0x28]
    // 0x683abc: mov             v2.16b, v1.16b
    // 0x683ac0: ldr             x0, [fp, #0x28]
    // 0x683ac4: b               #0x683b94
    // 0x683ac8: ldr             x1, [fp, #0x20]
    // 0x683acc: ldr             d0, [fp, #0x18]
    // 0x683ad0: r0 = LoadClassIdInstr(r1)
    //     0x683ad0: ldur            x0, [x1, #-1]
    //     0x683ad4: ubfx            x0, x0, #0xc, #0x14
    // 0x683ad8: str             x1, [SP]
    // 0x683adc: r0 = GDT[cid_x0 + -0x8a5]()
    //     0x683adc: sub             lr, x0, #0x8a5
    //     0x683ae0: ldr             lr, [x21, lr, lsl #3]
    //     0x683ae4: blr             lr
    // 0x683ae8: mov             v1.16b, v0.16b
    // 0x683aec: ldr             d0, [fp, #0x18]
    // 0x683af0: fcmp            d0, d1
    // 0x683af4: b.vs            #0x683b1c
    // 0x683af8: b.lt            #0x683b1c
    // 0x683afc: ldr             x1, [fp, #0x28]
    // 0x683b00: d1 = 0.000000
    //     0x683b00: eor             v1.16b, v1.16b, v1.16b
    // 0x683b04: LoadField: d2 = r1->field_4b
    //     0x683b04: ldur            d2, [x1, #0x4b]
    // 0x683b08: fcmp            d2, d1
    // 0x683b0c: b.eq            #0x683b24
    // 0x683b10: mov             x0, x1
    // 0x683b14: d2 = 0.000000
    //     0x683b14: eor             v2.16b, v2.16b, v2.16b
    // 0x683b18: b               #0x683b94
    // 0x683b1c: ldr             x1, [fp, #0x28]
    // 0x683b20: d1 = 0.000000
    //     0x683b20: eor             v1.16b, v1.16b, v1.16b
    // 0x683b24: ldr             x2, [fp, #0x20]
    // 0x683b28: r0 = LoadClassIdInstr(r2)
    //     0x683b28: ldur            x0, [x2, #-1]
    //     0x683b2c: ubfx            x0, x0, #0xc, #0x14
    // 0x683b30: str             x2, [SP]
    // 0x683b34: r0 = GDT[cid_x0 + -0x8a5]()
    //     0x683b34: sub             lr, x0, #0x8a5
    //     0x683b38: ldr             lr, [x21, lr, lsl #3]
    //     0x683b3c: blr             lr
    // 0x683b40: mov             v1.16b, v0.16b
    // 0x683b44: ldr             d0, [fp, #0x18]
    // 0x683b48: fsub            d2, d1, d0
    // 0x683b4c: ldr             x1, [fp, #0x20]
    // 0x683b50: stur            d2, [fp, #-0x28]
    // 0x683b54: r0 = LoadClassIdInstr(r1)
    //     0x683b54: ldur            x0, [x1, #-1]
    //     0x683b58: ubfx            x0, x0, #0xc, #0x14
    // 0x683b5c: str             x1, [SP]
    // 0x683b60: r0 = GDT[cid_x0 + -0x8a5]()
    //     0x683b60: sub             lr, x0, #0x8a5
    //     0x683b64: ldr             lr, [x21, lr, lsl #3]
    //     0x683b68: blr             lr
    // 0x683b6c: mov             v1.16b, v0.16b
    // 0x683b70: ldr             d0, [fp, #0x18]
    // 0x683b74: fcmp            d0, d1
    // 0x683b78: b.vs            #0x683b88
    // 0x683b7c: b.le            #0x683b88
    // 0x683b80: d1 = 0.000000
    //     0x683b80: eor             v1.16b, v1.16b, v1.16b
    // 0x683b84: b               #0x683b8c
    // 0x683b88: ldur            d1, [fp, #-0x28]
    // 0x683b8c: mov             v2.16b, v1.16b
    // 0x683b90: ldr             x0, [fp, #0x28]
    // 0x683b94: ldur            d1, [fp, #-0x20]
    // 0x683b98: StoreField: r0->field_4b = d2
    //     0x683b98: stur            d2, [x0, #0x4b]
    // 0x683b9c: str             x0, [SP]
    // 0x683ba0: r0 = _slightDeviation()
    //     0x683ba0: bl              #0x684c1c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_slightDeviation
    // 0x683ba4: ldur            d1, [fp, #-0x20]
    // 0x683ba8: d0 = 0.000000
    //     0x683ba8: eor             v0.16b, v0.16b, v0.16b
    // 0x683bac: fcmp            d1, d0
    // 0x683bb0: b.vs            #0x683de0
    // 0x683bb4: b.ne            #0x683de0
    // 0x683bb8: ldr             x0, [fp, #0x28]
    // 0x683bbc: LoadField: d2 = r0->field_4b
    //     0x683bbc: ldur            d2, [x0, #0x4b]
    // 0x683bc0: fcmp            d2, d0
    // 0x683bc4: b.vs            #0x683dd4
    // 0x683bc8: b.ne            #0x683dd4
    // 0x683bcc: LoadField: r1 = r0->field_63
    //     0x683bcc: ldur            w1, [x0, #0x63]
    // 0x683bd0: DecompressPointer r1
    //     0x683bd0: add             x1, x1, HEAP, lsl #32
    // 0x683bd4: r16 = Instance_IndicatorMode
    //     0x683bd4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x683bd8: ldr             x16, [x16, #0x190]
    // 0x683bdc: cmp             w1, w16
    // 0x683be0: b.ne            #0x683bec
    // 0x683be4: mov             v0.16b, v1.16b
    // 0x683be8: b               #0x683da8
    // 0x683bec: LoadField: r1 = r0->field_23
    //     0x683bec: ldur            w1, [x0, #0x23]
    // 0x683bf0: DecompressPointer r1
    //     0x683bf0: add             x1, x1, HEAP, lsl #32
    // 0x683bf4: LoadField: r2 = r1->field_37
    //     0x683bf4: ldur            w2, [x1, #0x37]
    // 0x683bf8: DecompressPointer r2
    //     0x683bf8: add             x2, x2, HEAP, lsl #32
    // 0x683bfc: cmp             w2, NULL
    // 0x683c00: b.eq            #0x683dc4
    // 0x683c04: ldr             x16, [fp, #0x20]
    // 0x683c08: str             x16, [SP]
    // 0x683c0c: r0 = _ScrollMetricsExtension.isNestedOuter()
    //     0x683c0c: bl              #0x684b94  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedOuter
    // 0x683c10: tbz             w0, #4, #0x683dc4
    // 0x683c14: ldur            x1, [fp, #-0x10]
    // 0x683c18: r17 = 9608
    //     0x683c18: movz            x17, #0x2588
    // 0x683c1c: cmp             w1, w17
    // 0x683c20: b.ne            #0x683c9c
    // 0x683c24: ldr             x2, [fp, #0x28]
    // 0x683c28: LoadField: r0 = r2->field_53
    //     0x683c28: ldur            w0, [x2, #0x53]
    // 0x683c2c: DecompressPointer r0
    //     0x683c2c: add             x0, x0, HEAP, lsl #32
    // 0x683c30: cmp             w0, NULL
    // 0x683c34: b.eq            #0x683ec0
    // 0x683c38: r3 = LoadClassIdInstr(r0)
    //     0x683c38: ldur            x3, [x0, #-1]
    //     0x683c3c: ubfx            x3, x3, #0xc, #0x14
    // 0x683c40: str             x0, [SP]
    // 0x683c44: mov             x0, x3
    // 0x683c48: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x683c48: sub             lr, x0, #0xe6f
    //     0x683c4c: ldr             lr, [x21, lr, lsl #3]
    //     0x683c50: blr             lr
    // 0x683c54: ldr             x1, [fp, #0x28]
    // 0x683c58: stur            d0, [fp, #-0x28]
    // 0x683c5c: LoadField: r0 = r1->field_53
    //     0x683c5c: ldur            w0, [x1, #0x53]
    // 0x683c60: DecompressPointer r0
    //     0x683c60: add             x0, x0, HEAP, lsl #32
    // 0x683c64: cmp             w0, NULL
    // 0x683c68: b.eq            #0x683ec4
    // 0x683c6c: r2 = LoadClassIdInstr(r0)
    //     0x683c6c: ldur            x2, [x0, #-1]
    //     0x683c70: ubfx            x2, x2, #0xc, #0x14
    // 0x683c74: str             x0, [SP]
    // 0x683c78: mov             x0, x2
    // 0x683c7c: r0 = GDT[cid_x0 + -0xfef]()
    //     0x683c7c: sub             lr, x0, #0xfef
    //     0x683c80: ldr             lr, [x21, lr, lsl #3]
    //     0x683c84: blr             lr
    // 0x683c88: mov             v1.16b, v0.16b
    // 0x683c8c: ldur            d0, [fp, #-0x28]
    // 0x683c90: fsub            d2, d0, d1
    // 0x683c94: mov             v0.16b, v2.16b
    // 0x683c98: b               #0x683ccc
    // 0x683c9c: ldr             x1, [fp, #0x28]
    // 0x683ca0: LoadField: r0 = r1->field_53
    //     0x683ca0: ldur            w0, [x1, #0x53]
    // 0x683ca4: DecompressPointer r0
    //     0x683ca4: add             x0, x0, HEAP, lsl #32
    // 0x683ca8: cmp             w0, NULL
    // 0x683cac: b.eq            #0x683ec8
    // 0x683cb0: r2 = LoadClassIdInstr(r0)
    //     0x683cb0: ldur            x2, [x0, #-1]
    //     0x683cb4: ubfx            x2, x2, #0xc, #0x14
    // 0x683cb8: str             x0, [SP]
    // 0x683cbc: mov             x0, x2
    // 0x683cc0: r0 = GDT[cid_x0 + -0xfef]()
    //     0x683cc0: sub             lr, x0, #0xfef
    //     0x683cc4: ldr             lr, [x21, lr, lsl #3]
    //     0x683cc8: blr             lr
    // 0x683ccc: ldr             x1, [fp, #0x28]
    // 0x683cd0: LoadField: r0 = r1->field_23
    //     0x683cd0: ldur            w0, [x1, #0x23]
    // 0x683cd4: DecompressPointer r0
    //     0x683cd4: add             x0, x0, HEAP, lsl #32
    // 0x683cd8: LoadField: r2 = r0->field_37
    //     0x683cd8: ldur            w2, [x0, #0x37]
    // 0x683cdc: DecompressPointer r2
    //     0x683cdc: add             x2, x2, HEAP, lsl #32
    // 0x683ce0: cmp             w2, NULL
    // 0x683ce4: b.eq            #0x683ecc
    // 0x683ce8: LoadField: d1 = r2->field_7
    //     0x683ce8: ldur            d1, [x2, #7]
    // 0x683cec: fcmp            d0, d1
    // 0x683cf0: b.vs            #0x683dc4
    // 0x683cf4: b.ge            #0x683dc4
    // 0x683cf8: ldr             x0, [fp, #0x10]
    // 0x683cfc: tbz             w0, #4, #0x683dc4
    // 0x683d00: ldur            x0, [fp, #-0x10]
    // 0x683d04: r17 = 9608
    //     0x683d04: movz            x17, #0x2588
    // 0x683d08: cmp             w0, w17
    // 0x683d0c: b.ne            #0x683d5c
    // 0x683d10: ldr             x0, [fp, #0x20]
    // 0x683d14: ldr             d0, [fp, #0x18]
    // 0x683d18: r2 = LoadClassIdInstr(r0)
    //     0x683d18: ldur            x2, [x0, #-1]
    //     0x683d1c: ubfx            x2, x2, #0xc, #0x14
    // 0x683d20: str             x0, [SP]
    // 0x683d24: mov             x0, x2
    // 0x683d28: r0 = GDT[cid_x0 + -0x8a5]()
    //     0x683d28: sub             lr, x0, #0x8a5
    //     0x683d2c: ldr             lr, [x21, lr, lsl #3]
    //     0x683d30: blr             lr
    // 0x683d34: mov             v1.16b, v0.16b
    // 0x683d38: ldr             d0, [fp, #0x18]
    // 0x683d3c: fcmp            d0, d1
    // 0x683d40: b.vs            #0x683d48
    // 0x683d44: b.le            #0x683d50
    // 0x683d48: r0 = false
    //     0x683d48: add             x0, NULL, #0x30  ; false
    // 0x683d4c: b               #0x683d54
    // 0x683d50: r0 = true
    //     0x683d50: add             x0, NULL, #0x20  ; true
    // 0x683d54: tbz             w0, #4, #0x683dc4
    // 0x683d58: b               #0x683da4
    // 0x683d5c: ldr             x0, [fp, #0x20]
    // 0x683d60: ldr             d0, [fp, #0x18]
    // 0x683d64: r1 = LoadClassIdInstr(r0)
    //     0x683d64: ldur            x1, [x0, #-1]
    //     0x683d68: ubfx            x1, x1, #0xc, #0x14
    // 0x683d6c: str             x0, [SP]
    // 0x683d70: mov             x0, x1
    // 0x683d74: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x683d74: sub             lr, x0, #0xe6f
    //     0x683d78: ldr             lr, [x21, lr, lsl #3]
    //     0x683d7c: blr             lr
    // 0x683d80: mov             v1.16b, v0.16b
    // 0x683d84: ldr             d0, [fp, #0x18]
    // 0x683d88: fcmp            d0, d1
    // 0x683d8c: b.vs            #0x683d94
    // 0x683d90: b.ge            #0x683d9c
    // 0x683d94: r0 = false
    //     0x683d94: add             x0, NULL, #0x30  ; false
    // 0x683d98: b               #0x683da0
    // 0x683d9c: r0 = true
    //     0x683d9c: add             x0, NULL, #0x20  ; true
    // 0x683da0: tbz             w0, #4, #0x683dc4
    // 0x683da4: ldur            d0, [fp, #-0x20]
    // 0x683da8: ldr             x16, [fp, #0x28]
    // 0x683dac: str             x16, [SP, #8]
    // 0x683db0: str             d0, [SP]
    // 0x683db4: r0 = _updateMode()
    //     0x683db4: bl              #0x683f14  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateMode
    // 0x683db8: ldr             x16, [fp, #0x28]
    // 0x683dbc: str             x16, [SP]
    // 0x683dc0: r0 = notifyListeners()
    //     0x683dc0: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x683dc4: r0 = Null
    //     0x683dc4: mov             x0, NULL
    // 0x683dc8: LeaveFrame
    //     0x683dc8: mov             SP, fp
    //     0x683dcc: ldp             fp, lr, [SP], #0x10
    // 0x683dd0: ret
    //     0x683dd0: ret             
    // 0x683dd4: ldr             x0, [fp, #0x10]
    // 0x683dd8: mov             v0.16b, v1.16b
    // 0x683ddc: b               #0x683de8
    // 0x683de0: ldr             x0, [fp, #0x10]
    // 0x683de4: mov             v0.16b, v1.16b
    // 0x683de8: ldr             x1, [fp, #0x28]
    // 0x683dec: str             x1, [SP, #8]
    // 0x683df0: str             d0, [SP]
    // 0x683df4: r0 = _updateMode()
    //     0x683df4: bl              #0x683f14  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateMode
    // 0x683df8: ldr             x0, [fp, #0x28]
    // 0x683dfc: LoadField: d0 = r0->field_4b
    //     0x683dfc: ldur            d0, [x0, #0x4b]
    // 0x683e00: ldur            d1, [fp, #-0x20]
    // 0x683e04: stur            d0, [fp, #-0x28]
    // 0x683e08: fcmp            d1, d0
    // 0x683e0c: b.vs            #0x683e38
    // 0x683e10: b.ne            #0x683e38
    // 0x683e14: ldur            x1, [fp, #-0x18]
    // 0x683e18: LoadField: r2 = r0->field_63
    //     0x683e18: ldur            w2, [x0, #0x63]
    // 0x683e1c: DecompressPointer r2
    //     0x683e1c: add             x2, x2, HEAP, lsl #32
    // 0x683e20: cmp             w1, w2
    // 0x683e24: b.ne            #0x683e38
    // 0x683e28: r0 = Null
    //     0x683e28: mov             x0, NULL
    // 0x683e2c: LeaveFrame
    //     0x683e2c: mov             SP, fp
    //     0x683e30: ldp             fp, lr, [SP], #0x10
    // 0x683e34: ret
    //     0x683e34: ret             
    // 0x683e38: ldr             x1, [fp, #0x10]
    // 0x683e3c: tbnz            w1, #4, #0x683ea0
    // 0x683e40: LoadField: r1 = r0->field_23
    //     0x683e40: ldur            w1, [x0, #0x23]
    // 0x683e44: DecompressPointer r1
    //     0x683e44: add             x1, x1, HEAP, lsl #32
    // 0x683e48: LoadField: d1 = r1->field_7
    //     0x683e48: ldur            d1, [x1, #7]
    // 0x683e4c: stur            d1, [fp, #-0x20]
    // 0x683e50: str             x0, [SP]
    // 0x683e54: r0 = safeOffset()
    //     0x683e54: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x683e58: mov             v1.16b, v0.16b
    // 0x683e5c: ldur            d0, [fp, #-0x20]
    // 0x683e60: fadd            d2, d0, d1
    // 0x683e64: ldur            d0, [fp, #-0x28]
    // 0x683e68: fcmp            d0, d2
    // 0x683e6c: b.vs            #0x683e90
    // 0x683e70: b.gt            #0x683e90
    // 0x683e74: ldur            x2, [fp, #-8]
    // 0x683e78: r1 = Function '<anonymous closure>':.
    //     0x683e78: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d198] AnonymousClosure: (0x6850c4), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset (0x683954)
    //     0x683e7c: ldr             x1, [x1, #0x198]
    // 0x683e80: r0 = AllocateClosure()
    //     0x683e80: bl              #0xc5e00c  ; AllocateClosureStub
    // 0x683e84: r16 = <Null?>
    //     0x683e84: ldr             x16, [PP, #0xf48]  ; [pp+0xf48] TypeArguments: <Null?>
    // 0x683e88: stp             x0, x16, [SP]
    // 0x683e8c: r0 = Future()
    //     0x683e8c: bl              #0x4de2fc  ; [dart:async] Future::Future
    // 0x683e90: r0 = Null
    //     0x683e90: mov             x0, NULL
    // 0x683e94: LeaveFrame
    //     0x683e94: mov             SP, fp
    //     0x683e98: ldp             fp, lr, [SP], #0x10
    // 0x683e9c: ret
    //     0x683e9c: ret             
    // 0x683ea0: str             x0, [SP]
    // 0x683ea4: r0 = notifyListeners()
    //     0x683ea4: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x683ea8: r0 = Null
    //     0x683ea8: mov             x0, NULL
    // 0x683eac: LeaveFrame
    //     0x683eac: mov             SP, fp
    //     0x683eb0: ldp             fp, lr, [SP], #0x10
    // 0x683eb4: ret
    //     0x683eb4: ret             
    // 0x683eb8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x683eb8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x683ebc: b               #0x68396c
    // 0x683ec0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x683ec0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x683ec4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x683ec4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x683ec8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x683ec8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x683ecc: r0 = NullCastErrorSharedWithFPURegs()
    //     0x683ecc: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  get _ safeOffset(/* No info */) {
    // ** addr: 0x683ed0, size: 0x44
    // 0x683ed0: ldr             x0, [SP]
    // 0x683ed4: LoadField: r1 = r0->field_23
    //     0x683ed4: ldur            w1, [x0, #0x23]
    // 0x683ed8: DecompressPointer r1
    //     0x683ed8: add             x1, x1, HEAP, lsl #32
    // 0x683edc: LoadField: r2 = r1->field_13
    //     0x683edc: ldur            w2, [x1, #0x13]
    // 0x683ee0: DecompressPointer r2
    //     0x683ee0: add             x2, x2, HEAP, lsl #32
    // 0x683ee4: tbnz            w2, #4, #0x683f0c
    // 0x683ee8: LoadField: r1 = r0->field_47
    //     0x683ee8: ldur            w1, [x0, #0x47]
    // 0x683eec: DecompressPointer r1
    //     0x683eec: add             x1, x1, HEAP, lsl #32
    // 0x683ef0: cmp             w1, NULL
    // 0x683ef4: b.ne            #0x683f00
    // 0x683ef8: d1 = 0.000000
    //     0x683ef8: eor             v1.16b, v1.16b, v1.16b
    // 0x683efc: b               #0x683f04
    // 0x683f00: LoadField: d1 = r1->field_7
    //     0x683f00: ldur            d1, [x1, #7]
    // 0x683f04: mov             v0.16b, v1.16b
    // 0x683f08: b               #0x683f10
    // 0x683f0c: d0 = 0.000000
    //     0x683f0c: eor             v0.16b, v0.16b, v0.16b
    // 0x683f10: ret
    //     0x683f10: ret             
  }
  _ _updateMode(/* No info */) {
    // ** addr: 0x683f14, size: 0x710
    // 0x683f14: EnterFrame
    //     0x683f14: stp             fp, lr, [SP, #-0x10]!
    //     0x683f18: mov             fp, SP
    // 0x683f1c: AllocStack(0x20)
    //     0x683f1c: sub             SP, SP, #0x20
    // 0x683f20: CheckStackOverflow
    //     0x683f20: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x683f24: cmp             SP, x16
    //     0x683f28: b.ls            #0x684600
    // 0x683f2c: ldr             x0, [fp, #0x18]
    // 0x683f30: LoadField: r1 = r0->field_2f
    //     0x683f30: ldur            w1, [x0, #0x2f]
    // 0x683f34: DecompressPointer r1
    //     0x683f34: add             x1, x1, HEAP, lsl #32
    // 0x683f38: cmp             w1, NULL
    // 0x683f3c: b.ne            #0x683f78
    // 0x683f40: LoadField: r1 = r0->field_63
    //     0x683f40: ldur            w1, [x0, #0x63]
    // 0x683f44: DecompressPointer r1
    //     0x683f44: add             x1, x1, HEAP, lsl #32
    // 0x683f48: r16 = Instance_IndicatorMode
    //     0x683f48: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x683f4c: ldr             x16, [x16, #0x1a0]
    // 0x683f50: cmp             w1, w16
    // 0x683f54: b.eq            #0x683f68
    // 0x683f58: r16 = Instance_IndicatorMode
    //     0x683f58: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x683f5c: ldr             x16, [x16, #0x1a0]
    // 0x683f60: stp             x16, x0, [SP]
    // 0x683f64: r0 = _mode=()
    //     0x683f64: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x683f68: r0 = Null
    //     0x683f68: mov             x0, NULL
    // 0x683f6c: LeaveFrame
    //     0x683f6c: mov             SP, fp
    //     0x683f70: ldp             fp, lr, [SP], #0x10
    // 0x683f74: ret
    //     0x683f74: ret             
    // 0x683f78: str             x0, [SP]
    // 0x683f7c: r0 = modeLocked()
    //     0x683f7c: bl              #0x684b50  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::modeLocked
    // 0x683f80: tbz             w0, #4, #0x684570
    // 0x683f84: ldr             x16, [fp, #0x18]
    // 0x683f88: str             x16, [SP]
    // 0x683f8c: r0 = noMoreLocked()
    //     0x683f8c: bl              #0x684b04  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::noMoreLocked
    // 0x683f90: tbz             w0, #4, #0x684570
    // 0x683f94: ldr             x16, [fp, #0x18]
    // 0x683f98: str             x16, [SP]
    // 0x683f9c: r0 = secondaryLocked()
    //     0x683f9c: bl              #0x684ac0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::secondaryLocked
    // 0x683fa0: tbz             w0, #4, #0x684570
    // 0x683fa4: ldr             x16, [fp, #0x18]
    // 0x683fa8: str             x16, [SP]
    // 0x683fac: r0 = _canProcess()
    //     0x683fac: bl              #0x684a4c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_canProcess
    // 0x683fb0: tbz             w0, #4, #0x683fd8
    // 0x683fb4: ldr             x16, [fp, #0x18]
    // 0x683fb8: r30 = Instance_IndicatorMode
    //     0x683fb8: add             lr, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x683fbc: ldr             lr, [lr, #0x1a0]
    // 0x683fc0: stp             lr, x16, [SP]
    // 0x683fc4: r0 = _mode=()
    //     0x683fc4: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x683fc8: r0 = Null
    //     0x683fc8: mov             x0, NULL
    // 0x683fcc: LeaveFrame
    //     0x683fcc: mov             SP, fp
    //     0x683fd0: ldp             fp, lr, [SP], #0x10
    // 0x683fd4: ret
    //     0x683fd4: ret             
    // 0x683fd8: ldr             x0, [fp, #0x18]
    // 0x683fdc: LoadField: r1 = r0->field_23
    //     0x683fdc: ldur            w1, [x0, #0x23]
    // 0x683fe0: DecompressPointer r1
    //     0x683fe0: add             x1, x1, HEAP, lsl #32
    // 0x683fe4: LoadField: r2 = r1->field_37
    //     0x683fe4: ldur            w2, [x1, #0x37]
    // 0x683fe8: DecompressPointer r2
    //     0x683fe8: add             x2, x2, HEAP, lsl #32
    // 0x683fec: cmp             w2, NULL
    // 0x683ff0: b.eq            #0x684268
    // 0x683ff4: LoadField: r1 = r0->field_53
    //     0x683ff4: ldur            w1, [x0, #0x53]
    // 0x683ff8: DecompressPointer r1
    //     0x683ff8: add             x1, x1, HEAP, lsl #32
    // 0x683ffc: cmp             w1, NULL
    // 0x684000: b.eq            #0x684608
    // 0x684004: str             x1, [SP]
    // 0x684008: r0 = _ScrollMetricsExtension.isNestedOuter()
    //     0x684008: bl              #0x684b94  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedOuter
    // 0x68400c: tbz             w0, #4, #0x68425c
    // 0x684010: ldr             x1, [fp, #0x18]
    // 0x684014: r0 = LoadClassIdInstr(r1)
    //     0x684014: ldur            x0, [x1, #-1]
    //     0x684018: ubfx            x0, x0, #0xc, #0x14
    // 0x68401c: lsl             x0, x0, #1
    // 0x684020: r17 = 9608
    //     0x684020: movz            x17, #0x2588
    // 0x684024: cmp             w0, w17
    // 0x684028: b.ne            #0x6840a0
    // 0x68402c: LoadField: r0 = r1->field_53
    //     0x68402c: ldur            w0, [x1, #0x53]
    // 0x684030: DecompressPointer r0
    //     0x684030: add             x0, x0, HEAP, lsl #32
    // 0x684034: cmp             w0, NULL
    // 0x684038: b.eq            #0x68460c
    // 0x68403c: r2 = LoadClassIdInstr(r0)
    //     0x68403c: ldur            x2, [x0, #-1]
    //     0x684040: ubfx            x2, x2, #0xc, #0x14
    // 0x684044: str             x0, [SP]
    // 0x684048: mov             x0, x2
    // 0x68404c: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x68404c: sub             lr, x0, #0xe6f
    //     0x684050: ldr             lr, [x21, lr, lsl #3]
    //     0x684054: blr             lr
    // 0x684058: ldr             x1, [fp, #0x18]
    // 0x68405c: stur            d0, [fp, #-8]
    // 0x684060: LoadField: r0 = r1->field_53
    //     0x684060: ldur            w0, [x1, #0x53]
    // 0x684064: DecompressPointer r0
    //     0x684064: add             x0, x0, HEAP, lsl #32
    // 0x684068: cmp             w0, NULL
    // 0x68406c: b.eq            #0x684610
    // 0x684070: r2 = LoadClassIdInstr(r0)
    //     0x684070: ldur            x2, [x0, #-1]
    //     0x684074: ubfx            x2, x2, #0xc, #0x14
    // 0x684078: str             x0, [SP]
    // 0x68407c: mov             x0, x2
    // 0x684080: r0 = GDT[cid_x0 + -0xfef]()
    //     0x684080: sub             lr, x0, #0xfef
    //     0x684084: ldr             lr, [x21, lr, lsl #3]
    //     0x684088: blr             lr
    // 0x68408c: mov             v1.16b, v0.16b
    // 0x684090: ldur            d0, [fp, #-8]
    // 0x684094: fsub            d2, d0, d1
    // 0x684098: mov             v0.16b, v2.16b
    // 0x68409c: b               #0x6840cc
    // 0x6840a0: LoadField: r0 = r1->field_53
    //     0x6840a0: ldur            w0, [x1, #0x53]
    // 0x6840a4: DecompressPointer r0
    //     0x6840a4: add             x0, x0, HEAP, lsl #32
    // 0x6840a8: cmp             w0, NULL
    // 0x6840ac: b.eq            #0x684614
    // 0x6840b0: r2 = LoadClassIdInstr(r0)
    //     0x6840b0: ldur            x2, [x0, #-1]
    //     0x6840b4: ubfx            x2, x2, #0xc, #0x14
    // 0x6840b8: str             x0, [SP]
    // 0x6840bc: mov             x0, x2
    // 0x6840c0: r0 = GDT[cid_x0 + -0xfef]()
    //     0x6840c0: sub             lr, x0, #0xfef
    //     0x6840c4: ldr             lr, [x21, lr, lsl #3]
    //     0x6840c8: blr             lr
    // 0x6840cc: ldr             x1, [fp, #0x18]
    // 0x6840d0: LoadField: r0 = r1->field_23
    //     0x6840d0: ldur            w0, [x1, #0x23]
    // 0x6840d4: DecompressPointer r0
    //     0x6840d4: add             x0, x0, HEAP, lsl #32
    // 0x6840d8: LoadField: r2 = r0->field_37
    //     0x6840d8: ldur            w2, [x0, #0x37]
    // 0x6840dc: DecompressPointer r2
    //     0x6840dc: add             x2, x2, HEAP, lsl #32
    // 0x6840e0: cmp             w2, NULL
    // 0x6840e4: b.eq            #0x684618
    // 0x6840e8: LoadField: d1 = r2->field_7
    //     0x6840e8: ldur            d1, [x2, #7]
    // 0x6840ec: fcmp            d0, d1
    // 0x6840f0: b.vs            #0x684250
    // 0x6840f4: b.ge            #0x684250
    // 0x6840f8: LoadField: r0 = r1->field_63
    //     0x6840f8: ldur            w0, [x1, #0x63]
    // 0x6840fc: DecompressPointer r0
    //     0x6840fc: add             x0, x0, HEAP, lsl #32
    // 0x684100: r16 = Instance_IndicatorMode
    //     0x684100: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x684104: ldr             x16, [x16, #0x190]
    // 0x684108: cmp             w0, w16
    // 0x68410c: b.ne            #0x6841ec
    // 0x684110: LoadField: r0 = r1->field_53
    //     0x684110: ldur            w0, [x1, #0x53]
    // 0x684114: DecompressPointer r0
    //     0x684114: add             x0, x0, HEAP, lsl #32
    // 0x684118: cmp             w0, NULL
    // 0x68411c: b.eq            #0x68461c
    // 0x684120: r2 = LoadClassIdInstr(r0)
    //     0x684120: ldur            x2, [x0, #-1]
    //     0x684124: ubfx            x2, x2, #0xc, #0x14
    // 0x684128: str             x0, [SP]
    // 0x68412c: mov             x0, x2
    // 0x684130: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x684130: sub             lr, x0, #0xe6f
    //     0x684134: ldr             lr, [x21, lr, lsl #3]
    //     0x684138: blr             lr
    // 0x68413c: ldr             x1, [fp, #0x18]
    // 0x684140: stur            d0, [fp, #-8]
    // 0x684144: LoadField: r0 = r1->field_53
    //     0x684144: ldur            w0, [x1, #0x53]
    // 0x684148: DecompressPointer r0
    //     0x684148: add             x0, x0, HEAP, lsl #32
    // 0x68414c: cmp             w0, NULL
    // 0x684150: b.eq            #0x684620
    // 0x684154: r2 = LoadClassIdInstr(r0)
    //     0x684154: ldur            x2, [x0, #-1]
    //     0x684158: ubfx            x2, x2, #0xc, #0x14
    // 0x68415c: str             x0, [SP]
    // 0x684160: mov             x0, x2
    // 0x684164: r0 = GDT[cid_x0 + -0x8a5]()
    //     0x684164: sub             lr, x0, #0x8a5
    //     0x684168: ldr             lr, [x21, lr, lsl #3]
    //     0x68416c: blr             lr
    // 0x684170: mov             v1.16b, v0.16b
    // 0x684174: ldur            d0, [fp, #-8]
    // 0x684178: fcmp            d0, d1
    // 0x68417c: b.eq            #0x6841e0
    // 0x684180: ldr             x0, [fp, #0x18]
    // 0x684184: LoadField: r1 = r0->field_7f
    //     0x684184: ldur            w1, [x0, #0x7f]
    // 0x684188: DecompressPointer r1
    //     0x684188: add             x1, x1, HEAP, lsl #32
    // 0x68418c: r16 = Instance_IndicatorResult
    //     0x68418c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a8] Obj!IndicatorResult@c45311
    //     0x684190: ldr             x16, [x16, #0x1a8]
    // 0x684194: cmp             w1, w16
    // 0x684198: b.ne            #0x6841d0
    // 0x68419c: ldr             d0, [fp, #0x10]
    // 0x6841a0: LoadField: d1 = r0->field_4b
    //     0x6841a0: ldur            d1, [x0, #0x4b]
    // 0x6841a4: fcmp            d0, d1
    // 0x6841a8: b.vs            #0x6841d0
    // 0x6841ac: b.ge            #0x6841d0
    // 0x6841b0: r1 = Instance_IndicatorResult
    //     0x6841b0: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x6841b4: ldr             x1, [x1, #0x1b0]
    // 0x6841b8: StoreField: r0->field_7f = r1
    //     0x6841b8: stur            w1, [x0, #0x7f]
    // 0x6841bc: r16 = Instance_IndicatorMode
    //     0x6841bc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x6841c0: ldr             x16, [x16, #0x158]
    // 0x6841c4: stp             x16, x0, [SP]
    // 0x6841c8: r0 = _mode=()
    //     0x6841c8: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6841cc: b               #0x68454c
    // 0x6841d0: r0 = Null
    //     0x6841d0: mov             x0, NULL
    // 0x6841d4: LeaveFrame
    //     0x6841d4: mov             SP, fp
    //     0x6841d8: ldp             fp, lr, [SP], #0x10
    // 0x6841dc: ret
    //     0x6841dc: ret             
    // 0x6841e0: r1 = Instance_IndicatorResult
    //     0x6841e0: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x6841e4: ldr             x1, [x1, #0x1b0]
    // 0x6841e8: b               #0x6841f4
    // 0x6841ec: r1 = Instance_IndicatorResult
    //     0x6841ec: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x6841f0: ldr             x1, [x1, #0x1b0]
    // 0x6841f4: ldr             x0, [fp, #0x18]
    // 0x6841f8: LoadField: r2 = r0->field_63
    //     0x6841f8: ldur            w2, [x0, #0x63]
    // 0x6841fc: DecompressPointer r2
    //     0x6841fc: add             x2, x2, HEAP, lsl #32
    // 0x684200: r16 = Instance_IndicatorMode
    //     0x684200: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x684204: ldr             x16, [x16, #0x190]
    // 0x684208: cmp             w2, w16
    // 0x68420c: b.ne            #0x684238
    // 0x684210: d0 = 0.000000
    //     0x684210: eor             v0.16b, v0.16b, v0.16b
    // 0x684214: LoadField: d1 = r0->field_4b
    //     0x684214: ldur            d1, [x0, #0x4b]
    // 0x684218: fcmp            d1, d0
    // 0x68421c: b.vs            #0x68454c
    // 0x684220: b.ne            #0x68454c
    // 0x684224: r16 = Instance_IndicatorMode
    //     0x684224: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x684228: ldr             x16, [x16, #0x1a0]
    // 0x68422c: stp             x16, x0, [SP]
    // 0x684230: r0 = _mode=()
    //     0x684230: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x684234: b               #0x68454c
    // 0x684238: StoreField: r0->field_7f = r1
    //     0x684238: stur            w1, [x0, #0x7f]
    // 0x68423c: r16 = Instance_IndicatorMode
    //     0x68423c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x684240: ldr             x16, [x16, #0x158]
    // 0x684244: stp             x16, x0, [SP]
    // 0x684248: r0 = _mode=()
    //     0x684248: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x68424c: b               #0x68454c
    // 0x684250: r1 = Instance_IndicatorResult
    //     0x684250: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x684254: ldr             x1, [x1, #0x1b0]
    // 0x684258: b               #0x684270
    // 0x68425c: r1 = Instance_IndicatorResult
    //     0x68425c: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x684260: ldr             x1, [x1, #0x1b0]
    // 0x684264: b               #0x684270
    // 0x684268: r1 = Instance_IndicatorResult
    //     0x684268: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x68426c: ldr             x1, [x1, #0x1b0]
    // 0x684270: ldr             x0, [fp, #0x18]
    // 0x684274: LoadField: r2 = r0->field_63
    //     0x684274: ldur            w2, [x0, #0x63]
    // 0x684278: DecompressPointer r2
    //     0x684278: add             x2, x2, HEAP, lsl #32
    // 0x68427c: r16 = Instance_IndicatorMode
    //     0x68427c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x684280: ldr             x16, [x16, #0x190]
    // 0x684284: cmp             w2, w16
    // 0x684288: b.ne            #0x6842b0
    // 0x68428c: d0 = 0.000000
    //     0x68428c: eor             v0.16b, v0.16b, v0.16b
    // 0x684290: LoadField: d1 = r0->field_4b
    //     0x684290: ldur            d1, [x0, #0x4b]
    // 0x684294: fcmp            d1, d0
    // 0x684298: b.vs            #0x6842b4
    // 0x68429c: b.le            #0x6842b4
    // 0x6842a0: r0 = Null
    //     0x6842a0: mov             x0, NULL
    // 0x6842a4: LeaveFrame
    //     0x6842a4: mov             SP, fp
    //     0x6842a8: ldp             fp, lr, [SP], #0x10
    // 0x6842ac: ret
    //     0x6842ac: ret             
    // 0x6842b0: d0 = 0.000000
    //     0x6842b0: eor             v0.16b, v0.16b, v0.16b
    // 0x6842b4: LoadField: d1 = r0->field_4b
    //     0x6842b4: ldur            d1, [x0, #0x4b]
    // 0x6842b8: stur            d1, [fp, #-0x10]
    // 0x6842bc: fcmp            d1, d0
    // 0x6842c0: b.vs            #0x684330
    // 0x6842c4: b.ne            #0x684330
    // 0x6842c8: r16 = Instance_IndicatorMode
    //     0x6842c8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x6842cc: ldr             x16, [x16, #0x1b8]
    // 0x6842d0: cmp             w2, w16
    // 0x6842d4: b.ne            #0x6842ec
    // 0x6842d8: LoadField: r2 = r0->field_2b
    //     0x6842d8: ldur            w2, [x0, #0x2b]
    // 0x6842dc: DecompressPointer r2
    //     0x6842dc: add             x2, x2, HEAP, lsl #32
    // 0x6842e0: LoadField: r3 = r2->field_27
    //     0x6842e0: ldur            w3, [x2, #0x27]
    // 0x6842e4: DecompressPointer r3
    //     0x6842e4: add             x3, x3, HEAP, lsl #32
    // 0x6842e8: tbnz            w3, #4, #0x68454c
    // 0x6842ec: r16 = Instance_IndicatorMode
    //     0x6842ec: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x6842f0: ldr             x16, [x16, #0x1a0]
    // 0x6842f4: stp             x16, x0, [SP]
    // 0x6842f8: r0 = _mode=()
    //     0x6842f8: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6842fc: ldr             x0, [fp, #0x18]
    // 0x684300: LoadField: r1 = r0->field_7f
    //     0x684300: ldur            w1, [x0, #0x7f]
    // 0x684304: DecompressPointer r1
    //     0x684304: add             x1, x1, HEAP, lsl #32
    // 0x684308: r16 = Instance_IndicatorResult
    //     0x684308: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x68430c: ldr             x16, [x16, #0x1c0]
    // 0x684310: cmp             w1, w16
    // 0x684314: b.eq            #0x684324
    // 0x684318: r1 = Instance_IndicatorResult
    //     0x684318: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x68431c: ldr             x1, [x1, #0x1b0]
    // 0x684320: StoreField: r0->field_7f = r1
    //     0x684320: stur            w1, [x0, #0x7f]
    // 0x684324: d0 = 0.000000
    //     0x684324: eor             v0.16b, v0.16b, v0.16b
    // 0x684328: StoreField: r0->field_6b = d0
    //     0x684328: stur            d0, [x0, #0x6b]
    // 0x68432c: b               #0x68454c
    // 0x684330: LoadField: r1 = r0->field_23
    //     0x684330: ldur            w1, [x0, #0x23]
    // 0x684334: DecompressPointer r1
    //     0x684334: add             x1, x1, HEAP, lsl #32
    // 0x684338: LoadField: d2 = r1->field_7
    //     0x684338: ldur            d2, [x1, #7]
    // 0x68433c: stur            d2, [fp, #-8]
    // 0x684340: str             x0, [SP]
    // 0x684344: r0 = safeOffset()
    //     0x684344: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x684348: mov             v1.16b, v0.16b
    // 0x68434c: ldur            d0, [fp, #-8]
    // 0x684350: fadd            d2, d0, d1
    // 0x684354: ldur            d0, [fp, #-0x10]
    // 0x684358: fcmp            d0, d2
    // 0x68435c: b.vs            #0x6843a8
    // 0x684360: b.ge            #0x6843a8
    // 0x684364: ldr             x0, [fp, #0x18]
    // 0x684368: LoadField: r1 = r0->field_63
    //     0x684368: ldur            w1, [x0, #0x63]
    // 0x68436c: DecompressPointer r1
    //     0x68436c: add             x1, x1, HEAP, lsl #32
    // 0x684370: r16 = Instance_IndicatorMode
    //     0x684370: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x684374: ldr             x16, [x16, #0x1b8]
    // 0x684378: cmp             w1, w16
    // 0x68437c: b.ne            #0x684394
    // 0x684380: LoadField: r1 = r0->field_2b
    //     0x684380: ldur            w1, [x0, #0x2b]
    // 0x684384: DecompressPointer r1
    //     0x684384: add             x1, x1, HEAP, lsl #32
    // 0x684388: LoadField: r2 = r1->field_27
    //     0x684388: ldur            w2, [x1, #0x27]
    // 0x68438c: DecompressPointer r2
    //     0x68438c: add             x2, x2, HEAP, lsl #32
    // 0x684390: tbnz            w2, #4, #0x68454c
    // 0x684394: r16 = Instance_IndicatorMode
    //     0x684394: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c8] Obj!IndicatorMode@c45391
    //     0x684398: ldr             x16, [x16, #0x1c8]
    // 0x68439c: stp             x16, x0, [SP]
    // 0x6843a0: r0 = _mode=()
    //     0x6843a0: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6843a4: b               #0x68454c
    // 0x6843a8: ldr             x0, [fp, #0x18]
    // 0x6843ac: LoadField: d0 = r0->field_4b
    //     0x6843ac: ldur            d0, [x0, #0x4b]
    // 0x6843b0: stur            d0, [fp, #-0x10]
    // 0x6843b4: LoadField: r1 = r0->field_23
    //     0x6843b4: ldur            w1, [x0, #0x23]
    // 0x6843b8: DecompressPointer r1
    //     0x6843b8: add             x1, x1, HEAP, lsl #32
    // 0x6843bc: LoadField: d1 = r1->field_7
    //     0x6843bc: ldur            d1, [x1, #7]
    // 0x6843c0: stur            d1, [fp, #-8]
    // 0x6843c4: str             x0, [SP]
    // 0x6843c8: r0 = safeOffset()
    //     0x6843c8: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x6843cc: mov             v1.16b, v0.16b
    // 0x6843d0: ldur            d0, [fp, #-8]
    // 0x6843d4: fadd            d2, d0, d1
    // 0x6843d8: ldur            d0, [fp, #-0x10]
    // 0x6843dc: fcmp            d0, d2
    // 0x6843e0: b.vs            #0x684478
    // 0x6843e4: b.ne            #0x684478
    // 0x6843e8: ldr             x0, [fp, #0x18]
    // 0x6843ec: LoadField: r1 = r0->field_2b
    //     0x6843ec: ldur            w1, [x0, #0x2b]
    // 0x6843f0: DecompressPointer r1
    //     0x6843f0: add             x1, x1, HEAP, lsl #32
    // 0x6843f4: LoadField: r2 = r1->field_27
    //     0x6843f4: ldur            w2, [x1, #0x27]
    // 0x6843f8: DecompressPointer r2
    //     0x6843f8: add             x2, x2, HEAP, lsl #32
    // 0x6843fc: tbnz            w2, #4, #0x684460
    // 0x684400: LoadField: d0 = r0->field_6b
    //     0x684400: ldur            d0, [x0, #0x6b]
    // 0x684404: stur            d0, [fp, #-0x10]
    // 0x684408: LoadField: r1 = r0->field_23
    //     0x684408: ldur            w1, [x0, #0x23]
    // 0x68440c: DecompressPointer r1
    //     0x68440c: add             x1, x1, HEAP, lsl #32
    // 0x684410: LoadField: d1 = r1->field_7
    //     0x684410: ldur            d1, [x1, #7]
    // 0x684414: stur            d1, [fp, #-8]
    // 0x684418: str             x0, [SP]
    // 0x68441c: r0 = safeOffset()
    //     0x68441c: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x684420: mov             v1.16b, v0.16b
    // 0x684424: ldur            d0, [fp, #-8]
    // 0x684428: fadd            d2, d0, d1
    // 0x68442c: ldur            d0, [fp, #-0x10]
    // 0x684430: fcmp            d0, d2
    // 0x684434: b.vs            #0x684448
    // 0x684438: b.le            #0x684448
    // 0x68443c: r0 = Instance_IndicatorMode
    //     0x68443c: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x684440: ldr             x0, [x0, #0x1b8]
    // 0x684444: b               #0x684450
    // 0x684448: r0 = Instance_IndicatorMode
    //     0x684448: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x68444c: ldr             x0, [x0, #0x1d0]
    // 0x684450: ldr             x16, [fp, #0x18]
    // 0x684454: stp             x0, x16, [SP]
    // 0x684458: r0 = _mode=()
    //     0x684458: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x68445c: b               #0x68454c
    // 0x684460: ldr             x16, [fp, #0x18]
    // 0x684464: r30 = Instance_IndicatorMode
    //     0x684464: add             lr, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x684468: ldr             lr, [lr, #0x158]
    // 0x68446c: stp             lr, x16, [SP]
    // 0x684470: r0 = _mode=()
    //     0x684470: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x684474: b               #0x68454c
    // 0x684478: ldr             x0, [fp, #0x18]
    // 0x68447c: LoadField: d0 = r0->field_4b
    //     0x68447c: ldur            d0, [x0, #0x4b]
    // 0x684480: stur            d0, [fp, #-0x10]
    // 0x684484: LoadField: r1 = r0->field_23
    //     0x684484: ldur            w1, [x0, #0x23]
    // 0x684488: DecompressPointer r1
    //     0x684488: add             x1, x1, HEAP, lsl #32
    // 0x68448c: LoadField: d1 = r1->field_7
    //     0x68448c: ldur            d1, [x1, #7]
    // 0x684490: stur            d1, [fp, #-8]
    // 0x684494: str             x0, [SP]
    // 0x684498: r0 = safeOffset()
    //     0x684498: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x68449c: mov             v1.16b, v0.16b
    // 0x6844a0: ldur            d0, [fp, #-8]
    // 0x6844a4: fadd            d2, d0, d1
    // 0x6844a8: ldur            d0, [fp, #-0x10]
    // 0x6844ac: fcmp            d0, d2
    // 0x6844b0: b.vs            #0x68454c
    // 0x6844b4: b.le            #0x68454c
    // 0x6844b8: ldr             x0, [fp, #0x18]
    // 0x6844bc: LoadField: r1 = r0->field_2b
    //     0x6844bc: ldur            w1, [x0, #0x2b]
    // 0x6844c0: DecompressPointer r1
    //     0x6844c0: add             x1, x1, HEAP, lsl #32
    // 0x6844c4: LoadField: r2 = r1->field_27
    //     0x6844c4: ldur            w2, [x1, #0x27]
    // 0x6844c8: DecompressPointer r2
    //     0x6844c8: add             x2, x2, HEAP, lsl #32
    // 0x6844cc: tbnz            w2, #4, #0x6844e4
    // 0x6844d0: r16 = Instance_IndicatorMode
    //     0x6844d0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x6844d4: ldr             x16, [x16, #0x1d0]
    // 0x6844d8: stp             x16, x0, [SP]
    // 0x6844dc: r0 = _mode=()
    //     0x6844dc: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6844e0: b               #0x68454c
    // 0x6844e4: LoadField: d0 = r0->field_6b
    //     0x6844e4: ldur            d0, [x0, #0x6b]
    // 0x6844e8: stur            d0, [fp, #-0x10]
    // 0x6844ec: LoadField: r1 = r0->field_23
    //     0x6844ec: ldur            w1, [x0, #0x23]
    // 0x6844f0: DecompressPointer r1
    //     0x6844f0: add             x1, x1, HEAP, lsl #32
    // 0x6844f4: LoadField: d1 = r1->field_7
    //     0x6844f4: ldur            d1, [x1, #7]
    // 0x6844f8: stur            d1, [fp, #-8]
    // 0x6844fc: str             x0, [SP]
    // 0x684500: r0 = safeOffset()
    //     0x684500: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x684504: mov             v1.16b, v0.16b
    // 0x684508: ldur            d0, [fp, #-8]
    // 0x68450c: fadd            d2, d0, d1
    // 0x684510: ldur            d0, [fp, #-0x10]
    // 0x684514: fcmp            d0, d2
    // 0x684518: b.vs            #0x684538
    // 0x68451c: b.le            #0x684538
    // 0x684520: ldr             x16, [fp, #0x18]
    // 0x684524: r30 = Instance_IndicatorMode
    //     0x684524: add             lr, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0x684528: ldr             lr, [lr, #0x1b8]
    // 0x68452c: stp             lr, x16, [SP]
    // 0x684530: r0 = _mode=()
    //     0x684530: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x684534: b               #0x68454c
    // 0x684538: ldr             x16, [fp, #0x18]
    // 0x68453c: r30 = Instance_IndicatorMode
    //     0x68453c: add             lr, PP, #0x1d, lsl #12  ; [pp+0x1d1d0] Obj!IndicatorMode@c45371
    //     0x684540: ldr             lr, [lr, #0x1d0]
    // 0x684544: stp             lr, x16, [SP]
    // 0x684548: r0 = _mode=()
    //     0x684548: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x68454c: ldr             x0, [fp, #0x18]
    // 0x684550: LoadField: r1 = r0->field_63
    //     0x684550: ldur            w1, [x0, #0x63]
    // 0x684554: DecompressPointer r1
    //     0x684554: add             x1, x1, HEAP, lsl #32
    // 0x684558: r16 = Instance_IndicatorMode
    //     0x684558: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x68455c: ldr             x16, [x16, #0x158]
    // 0x684560: cmp             w1, w16
    // 0x684564: b.ne            #0x684570
    // 0x684568: str             x0, [SP]
    // 0x68456c: r0 = _onTask()
    //     0x68456c: bl              #0x6846d4  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_onTask
    // 0x684570: ldr             x16, [fp, #0x18]
    // 0x684574: str             x16, [SP]
    // 0x684578: r0 = secondaryLocked()
    //     0x684578: bl              #0x684ac0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::secondaryLocked
    // 0x68457c: tbnz            w0, #4, #0x6845f0
    // 0x684580: ldr             x0, [fp, #0x18]
    // 0x684584: str             x0, [SP]
    // 0x684588: r0 = secondaryDimension()
    //     0x684588: bl              #0x684624  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::secondaryDimension
    // 0x68458c: ldr             x0, [fp, #0x18]
    // 0x684590: LoadField: d1 = r0->field_4b
    //     0x684590: ldur            d1, [x0, #0x4b]
    // 0x684594: fsub            d2, d0, d1
    // 0x684598: d0 = 70.000000
    //     0x684598: add             x17, PP, #0x1d, lsl #12  ; [pp+0x1d1d8] IMM: double(70) from 0x4051800000000000
    //     0x68459c: ldr             d0, [x17, #0x1d8]
    // 0x6845a0: fcmp            d2, d0
    // 0x6845a4: b.vs            #0x6845b8
    // 0x6845a8: b.lt            #0x6845b8
    // 0x6845ac: r1 = Instance_IndicatorMode
    //     0x6845ac: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1e0] Obj!IndicatorMode@c45351
    //     0x6845b0: ldr             x1, [x1, #0x1e0]
    // 0x6845b4: b               #0x6845c0
    // 0x6845b8: r1 = Instance_IndicatorMode
    //     0x6845b8: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0x6845bc: ldr             x1, [x1, #0x1e8]
    // 0x6845c0: stp             x1, x0, [SP]
    // 0x6845c4: r0 = _mode=()
    //     0x6845c4: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6845c8: ldr             x0, [fp, #0x18]
    // 0x6845cc: LoadField: d0 = r0->field_4b
    //     0x6845cc: ldur            d0, [x0, #0x4b]
    // 0x6845d0: d1 = 0.000000
    //     0x6845d0: eor             v1.16b, v1.16b, v1.16b
    // 0x6845d4: fcmp            d0, d1
    // 0x6845d8: b.vs            #0x6845f0
    // 0x6845dc: b.ne            #0x6845f0
    // 0x6845e0: r16 = Instance_IndicatorMode
    //     0x6845e0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x6845e4: ldr             x16, [x16, #0x1a0]
    // 0x6845e8: stp             x16, x0, [SP]
    // 0x6845ec: r0 = _mode=()
    //     0x6845ec: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x6845f0: r0 = Null
    //     0x6845f0: mov             x0, NULL
    // 0x6845f4: LeaveFrame
    //     0x6845f4: mov             SP, fp
    //     0x6845f8: ldp             fp, lr, [SP], #0x10
    // 0x6845fc: ret
    //     0x6845fc: ret             
    // 0x684600: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684600: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684604: b               #0x683f2c
    // 0x684608: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x684608: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x68460c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x68460c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684610: r0 = NullCastErrorSharedWithFPURegs()
    //     0x684610: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x684614: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x684614: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684618: r0 = NullCastErrorSharedWithFPURegs()
    //     0x684618: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x68461c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x68461c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684620: r0 = NullCastErrorSharedWithFPURegs()
    //     0x684620: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  get _ secondaryDimension(/* No info */) {
    // ** addr: 0x684624, size: 0x38
    // 0x684624: EnterFrame
    //     0x684624: stp             fp, lr, [SP, #-0x10]!
    //     0x684628: mov             fp, SP
    // 0x68462c: AllocStack(0x8)
    //     0x68462c: sub             SP, SP, #8
    // 0x684630: CheckStackOverflow
    //     0x684630: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x684634: cmp             SP, x16
    //     0x684638: b.ls            #0x684654
    // 0x68463c: ldr             x16, [fp, #0x10]
    // 0x684640: str             x16, [SP]
    // 0x684644: r0 = viewportDimension()
    //     0x684644: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0x684648: LeaveFrame
    //     0x684648: mov             SP, fp
    //     0x68464c: ldp             fp, lr, [SP], #0x10
    // 0x684650: ret
    //     0x684650: ret             
    // 0x684654: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684654: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684658: b               #0x68463c
  }
  get _ viewportDimension(/* No info */) {
    // ** addr: 0x68465c, size: 0x78
    // 0x68465c: EnterFrame
    //     0x68465c: stp             fp, lr, [SP, #-0x10]!
    //     0x684660: mov             fp, SP
    // 0x684664: AllocStack(0x8)
    //     0x684664: sub             SP, SP, #8
    // 0x684668: CheckStackOverflow
    //     0x684668: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x68466c: cmp             SP, x16
    //     0x684670: b.ls            #0x6846c8
    // 0x684674: ldr             x0, [fp, #0x10]
    // 0x684678: LoadField: r1 = r0->field_87
    //     0x684678: ldur            w1, [x0, #0x87]
    // 0x68467c: DecompressPointer r1
    //     0x68467c: add             x1, x1, HEAP, lsl #32
    // 0x684680: cmp             w1, NULL
    // 0x684684: b.ne            #0x6846b4
    // 0x684688: LoadField: r1 = r0->field_53
    //     0x684688: ldur            w1, [x0, #0x53]
    // 0x68468c: DecompressPointer r1
    //     0x68468c: add             x1, x1, HEAP, lsl #32
    // 0x684690: cmp             w1, NULL
    // 0x684694: b.eq            #0x6846d0
    // 0x684698: r0 = LoadClassIdInstr(r1)
    //     0x684698: ldur            x0, [x1, #-1]
    //     0x68469c: ubfx            x0, x0, #0xc, #0x14
    // 0x6846a0: str             x1, [SP]
    // 0x6846a4: r0 = GDT[cid_x0 + 0xcc4]()
    //     0x6846a4: add             lr, x0, #0xcc4
    //     0x6846a8: ldr             lr, [x21, lr, lsl #3]
    //     0x6846ac: blr             lr
    // 0x6846b0: b               #0x6846bc
    // 0x6846b4: LoadField: d1 = r1->field_7
    //     0x6846b4: ldur            d1, [x1, #7]
    // 0x6846b8: mov             v0.16b, v1.16b
    // 0x6846bc: LeaveFrame
    //     0x6846bc: mov             SP, fp
    //     0x6846c0: ldp             fp, lr, [SP], #0x10
    // 0x6846c4: ret
    //     0x6846c4: ret             
    // 0x6846c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6846c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6846cc: b               #0x684674
    // 0x6846d0: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x6846d0: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  _ _onTask(/* No info */) async {
    // ** addr: 0x6846d4, size: 0x194
    // 0x6846d4: EnterFrame
    //     0x6846d4: stp             fp, lr, [SP, #-0x10]!
    //     0x6846d8: mov             fp, SP
    // 0x6846dc: AllocStack(0x70)
    //     0x6846dc: sub             SP, SP, #0x70
    // 0x6846e0: SetupParameters(IndicatorNotifier this /* r1, fp-0x58 */)
    //     0x6846e0: stur            NULL, [fp, #-8]
    //     0x6846e4: movz            x0, #0
    //     0x6846e8: add             x1, fp, w0, sxtw #2
    //     0x6846ec: ldr             x1, [x1, #0x10]
    //     0x6846f0: stur            x1, [fp, #-0x58]
    // 0x6846f4: CheckStackOverflow
    //     0x6846f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6846f8: cmp             SP, x16
    //     0x6846fc: b.ls            #0x684860
    // 0x684700: InitAsync() -> Future
    //     0x684700: mov             x0, NULL
    //     0x684704: bl              #0x4dea10  ; InitAsyncStub
    // 0x684708: ldur            x16, [fp, #-0x58]
    // 0x68470c: str             x16, [SP]
    // 0x684710: r0 = _canProcess()
    //     0x684710: bl              #0x684a4c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_canProcess
    // 0x684714: tbnz            w0, #4, #0x6847e4
    // 0x684718: ldur            x0, [fp, #-0x58]
    // 0x68471c: LoadField: r1 = r0->field_77
    //     0x68471c: ldur            w1, [x0, #0x77]
    // 0x684720: DecompressPointer r1
    //     0x684720: add             x1, x1, HEAP, lsl #32
    // 0x684724: tbz             w1, #4, #0x6847e4
    // 0x684728: LoadField: r1 = r0->field_2f
    //     0x684728: ldur            w1, [x0, #0x2f]
    // 0x68472c: DecompressPointer r1
    //     0x68472c: add             x1, x1, HEAP, lsl #32
    // 0x684730: cmp             w1, NULL
    // 0x684734: b.eq            #0x6847e4
    // 0x684738: r2 = true
    //     0x684738: add             x2, NULL, #0x20  ; true
    // 0x68473c: StoreField: r0->field_77 = r2
    //     0x68473c: stur            w2, [x0, #0x77]
    // 0x684740: LoadField: r2 = r0->field_33
    //     0x684740: ldur            w2, [x0, #0x33]
    // 0x684744: DecompressPointer r2
    //     0x684744: add             x2, x2, HEAP, lsl #32
    // 0x684748: tbnz            w2, #4, #0x6847d4
    // 0x68474c: stp             x1, NULL, [SP]
    // 0x684750: r0 = Future.sync()
    //     0x684750: bl              #0x684868  ; [dart:async] Future::Future.sync
    // 0x684754: mov             x1, x0
    // 0x684758: stur            x1, [fp, #-0x60]
    // 0x68475c: r0 = Await()
    //     0x68475c: bl              #0x4de7e4  ; AwaitStub
    // 0x684760: r1 = LoadTaggedClassIdMayBeSmiInstr(r0)
    //     0x684760: movz            x1, #0x76
    //     0x684764: tbz             w0, #0, #0x684774
    //     0x684768: ldur            x1, [x0, #-1]
    //     0x68476c: ubfx            x1, x1, #0xc, #0x14
    //     0x684770: lsl             x1, x1, #1
    // 0x684774: r17 = 12258
    //     0x684774: movz            x17, #0x2fe2
    // 0x684778: cmp             w1, w17
    // 0x68477c: b.ne            #0x6847a4
    // 0x684780: ldur            x1, [fp, #-0x58]
    // 0x684784: StoreField: r1->field_7f = r0
    //     0x684784: stur            w0, [x1, #0x7f]
    //     0x684788: ldurb           w16, [x1, #-1]
    //     0x68478c: ldurb           w17, [x0, #-1]
    //     0x684790: and             x16, x17, x16, lsr #2
    //     0x684794: tst             x16, HEAP, lsr #32
    //     0x684798: b.eq            #0x6847a0
    //     0x68479c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x6847a0: b               #0x6847b4
    // 0x6847a4: ldur            x1, [fp, #-0x58]
    // 0x6847a8: r0 = Instance_IndicatorResult
    //     0x6847a8: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d150] Obj!IndicatorResult@c452f1
    //     0x6847ac: ldr             x0, [x0, #0x150]
    // 0x6847b0: StoreField: r1->field_7f = r0
    //     0x6847b0: stur            w0, [x1, #0x7f]
    // 0x6847b4: r16 = Instance_IndicatorMode
    //     0x6847b4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x6847b8: ldr             x16, [x16, #0x160]
    // 0x6847bc: stp             x16, x1, [SP]
    // 0x6847c0: r0 = _setMode()
    //     0x6847c0: bl              #0x6834fc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode
    // 0x6847c4: ldur            x0, [fp, #-0x58]
    // 0x6847c8: r2 = false
    //     0x6847c8: add             x2, NULL, #0x30  ; false
    // 0x6847cc: StoreField: r0->field_77 = r2
    //     0x6847cc: stur            w2, [x0, #0x77]
    // 0x6847d0: b               #0x6847dc
    // 0x6847d4: stp             x1, NULL, [SP]
    // 0x6847d8: r0 = Future.sync()
    //     0x6847d8: bl              #0x684868  ; [dart:async] Future::Future.sync
    // 0x6847dc: r0 = Null
    //     0x6847dc: mov             x0, NULL
    // 0x6847e0: r0 = ReturnAsyncNotFuture()
    //     0x6847e0: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x6847e4: r0 = Null
    //     0x6847e4: mov             x0, NULL
    // 0x6847e8: r0 = ReturnAsyncNotFuture()
    //     0x6847e8: b               #0x4de2d0  ; ReturnAsyncNotFutureStub
    // 0x6847ec: r2 = Instance_IndicatorResult
    //     0x6847ec: add             x2, PP, #0x1d, lsl #12  ; [pp+0x1d1a8] Obj!IndicatorResult@c45311
    //     0x6847f0: ldr             x2, [x2, #0x1a8]
    // 0x6847f4: sub             SP, fp, #0x70
    // 0x6847f8: ldur            x5, [fp, #-0x10]
    // 0x6847fc: mov             x4, x0
    // 0x684800: mov             x3, x1
    // 0x684804: stur            x0, [fp, #-0x58]
    // 0x684808: stur            x1, [fp, #-0x60]
    // 0x68480c: StoreField: r5->field_7f = r2
    //     0x68480c: stur            w2, [x5, #0x7f]
    // 0x684810: mov             x0, x4
    // 0x684814: mov             x1, x3
    // 0x684818: r0 = ReThrow()
    //     0x684818: bl              #0xc5d294  ; ReThrowStub
    // 0x68481c: brk             #0
    // 0x684820: r2 = false
    //     0x684820: add             x2, NULL, #0x30  ; false
    // 0x684824: sub             SP, fp, #0x70
    // 0x684828: stur            x0, [fp, #-0x58]
    // 0x68482c: stur            x1, [fp, #-0x60]
    // 0x684830: ldur            x16, [fp, #-0x10]
    // 0x684834: r30 = Instance_IndicatorMode
    //     0x684834: add             lr, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x684838: ldr             lr, [lr, #0x160]
    // 0x68483c: stp             lr, x16, [SP]
    // 0x684840: r0 = _setMode()
    //     0x684840: bl              #0x6834fc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode
    // 0x684844: ldur            x1, [fp, #-0x10]
    // 0x684848: r0 = false
    //     0x684848: add             x0, NULL, #0x30  ; false
    // 0x68484c: StoreField: r1->field_77 = r0
    //     0x68484c: stur            w0, [x1, #0x77]
    // 0x684850: ldur            x0, [fp, #-0x58]
    // 0x684854: ldur            x1, [fp, #-0x60]
    // 0x684858: r0 = ReThrow()
    //     0x684858: bl              #0xc5d294  ; ReThrowStub
    // 0x68485c: brk             #0
    // 0x684860: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684860: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684864: b               #0x684700
  }
  get _ _canProcess(/* No info */) {
    // ** addr: 0x684a4c, size: 0x74
    // 0x684a4c: EnterFrame
    //     0x684a4c: stp             fp, lr, [SP, #-0x10]!
    //     0x684a50: mov             fp, SP
    // 0x684a54: AllocStack(0x8)
    //     0x684a54: sub             SP, SP, #8
    // 0x684a58: CheckStackOverflow
    //     0x684a58: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x684a5c: cmp             SP, x16
    //     0x684a60: b.ls            #0x684ab8
    // 0x684a64: ldr             x0, [fp, #0x10]
    // 0x684a68: LoadField: r1 = r0->field_7b
    //     0x684a68: ldur            w1, [x0, #0x7b]
    // 0x684a6c: DecompressPointer r1
    //     0x684a6c: add             x1, x1, HEAP, lsl #32
    // 0x684a70: cmp             w1, NULL
    // 0x684a74: b.ne            #0x684a80
    // 0x684a78: r1 = Null
    //     0x684a78: mov             x1, NULL
    // 0x684a7c: b               #0x684a98
    // 0x684a80: str             x1, [SP]
    // 0x684a84: mov             x0, x1
    // 0x684a88: ClosureCall
    //     0x684a88: ldr             x4, [PP, #0x488]  ; [pp+0x488] List(5) [0, 0x1, 0x1, 0x1, Null]
    //     0x684a8c: ldur            x2, [x0, #0x1f]
    //     0x684a90: blr             x2
    // 0x684a94: mov             x1, x0
    // 0x684a98: cmp             w1, NULL
    // 0x684a9c: b.ne            #0x684aa8
    // 0x684aa0: r0 = false
    //     0x684aa0: add             x0, NULL, #0x30  ; false
    // 0x684aa4: b               #0x684aac
    // 0x684aa8: mov             x0, x1
    // 0x684aac: LeaveFrame
    //     0x684aac: mov             SP, fp
    //     0x684ab0: ldp             fp, lr, [SP], #0x10
    // 0x684ab4: ret
    //     0x684ab4: ret             
    // 0x684ab8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684ab8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684abc: b               #0x684a64
  }
  get _ secondaryLocked(/* No info */) {
    // ** addr: 0x684ac0, size: 0x44
    // 0x684ac0: ldr             x1, [SP]
    // 0x684ac4: LoadField: r2 = r1->field_63
    //     0x684ac4: ldur            w2, [x1, #0x63]
    // 0x684ac8: DecompressPointer r2
    //     0x684ac8: add             x2, x2, HEAP, lsl #32
    // 0x684acc: r16 = Instance_IndicatorMode
    //     0x684acc: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0x684ad0: ldr             x16, [x16, #0x1e8]
    // 0x684ad4: cmp             w2, w16
    // 0x684ad8: b.ne            #0x684ae4
    // 0x684adc: r0 = true
    //     0x684adc: add             x0, NULL, #0x20  ; true
    // 0x684ae0: b               #0x684b00
    // 0x684ae4: r16 = Instance_IndicatorMode
    //     0x684ae4: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e0] Obj!IndicatorMode@c45351
    //     0x684ae8: ldr             x16, [x16, #0x1e0]
    // 0x684aec: cmp             w2, w16
    // 0x684af0: r16 = true
    //     0x684af0: add             x16, NULL, #0x20  ; true
    // 0x684af4: r17 = false
    //     0x684af4: add             x17, NULL, #0x30  ; false
    // 0x684af8: csel            x1, x16, x17, eq
    // 0x684afc: mov             x0, x1
    // 0x684b00: ret
    //     0x684b00: ret             
  }
  get _ noMoreLocked(/* No info */) {
    // ** addr: 0x684b04, size: 0x4c
    // 0x684b04: ldr             x1, [SP]
    // 0x684b08: LoadField: r2 = r1->field_7f
    //     0x684b08: ldur            w2, [x1, #0x7f]
    // 0x684b0c: DecompressPointer r2
    //     0x684b0c: add             x2, x2, HEAP, lsl #32
    // 0x684b10: r16 = Instance_IndicatorResult
    //     0x684b10: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x684b14: ldr             x16, [x16, #0x1c0]
    // 0x684b18: cmp             w2, w16
    // 0x684b1c: b.ne            #0x684b48
    // 0x684b20: LoadField: r2 = r1->field_63
    //     0x684b20: ldur            w2, [x1, #0x63]
    // 0x684b24: DecompressPointer r2
    //     0x684b24: add             x2, x2, HEAP, lsl #32
    // 0x684b28: r16 = Instance_IndicatorMode
    //     0x684b28: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x684b2c: ldr             x16, [x16, #0x1a0]
    // 0x684b30: cmp             w2, w16
    // 0x684b34: r16 = true
    //     0x684b34: add             x16, NULL, #0x20  ; true
    // 0x684b38: r17 = false
    //     0x684b38: add             x17, NULL, #0x30  ; false
    // 0x684b3c: csel            x1, x16, x17, eq
    // 0x684b40: mov             x0, x1
    // 0x684b44: b               #0x684b4c
    // 0x684b48: r0 = false
    //     0x684b48: add             x0, NULL, #0x30  ; false
    // 0x684b4c: ret
    //     0x684b4c: ret             
  }
  get _ modeLocked(/* No info */) {
    // ** addr: 0x684b50, size: 0x44
    // 0x684b50: ldr             x1, [SP]
    // 0x684b54: LoadField: r2 = r1->field_63
    //     0x684b54: ldur            w2, [x1, #0x63]
    // 0x684b58: DecompressPointer r2
    //     0x684b58: add             x2, x2, HEAP, lsl #32
    // 0x684b5c: r16 = Instance_IndicatorMode
    //     0x684b5c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x684b60: ldr             x16, [x16, #0x158]
    // 0x684b64: cmp             w2, w16
    // 0x684b68: b.ne            #0x684b74
    // 0x684b6c: r0 = true
    //     0x684b6c: add             x0, NULL, #0x20  ; true
    // 0x684b70: b               #0x684b90
    // 0x684b74: r16 = Instance_IndicatorMode
    //     0x684b74: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x684b78: ldr             x16, [x16, #0x160]
    // 0x684b7c: cmp             w2, w16
    // 0x684b80: r16 = true
    //     0x684b80: add             x16, NULL, #0x20  ; true
    // 0x684b84: r17 = false
    //     0x684b84: add             x17, NULL, #0x30  ; false
    // 0x684b88: csel            x1, x16, x17, eq
    // 0x684b8c: mov             x0, x1
    // 0x684b90: ret
    //     0x684b90: ret             
  }
  _ _slightDeviation(/* No info */) {
    // ** addr: 0x684c1c, size: 0xdc
    // 0x684c1c: EnterFrame
    //     0x684c1c: stp             fp, lr, [SP, #-0x10]!
    //     0x684c20: mov             fp, SP
    // 0x684c24: AllocStack(0x18)
    //     0x684c24: sub             SP, SP, #0x18
    // 0x684c28: CheckStackOverflow
    //     0x684c28: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x684c2c: cmp             SP, x16
    //     0x684c30: b.ls            #0x684cf0
    // 0x684c34: ldr             x0, [fp, #0x10]
    // 0x684c38: LoadField: d0 = r0->field_4b
    //     0x684c38: ldur            d0, [x0, #0x4b]
    // 0x684c3c: stur            d0, [fp, #-0x10]
    // 0x684c40: LoadField: r1 = r0->field_23
    //     0x684c40: ldur            w1, [x0, #0x23]
    // 0x684c44: DecompressPointer r1
    //     0x684c44: add             x1, x1, HEAP, lsl #32
    // 0x684c48: LoadField: d1 = r1->field_7
    //     0x684c48: ldur            d1, [x1, #7]
    // 0x684c4c: stur            d1, [fp, #-8]
    // 0x684c50: str             x0, [SP]
    // 0x684c54: r0 = safeOffset()
    //     0x684c54: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x684c58: mov             v1.16b, v0.16b
    // 0x684c5c: ldur            d0, [fp, #-8]
    // 0x684c60: fadd            d2, d0, d1
    // 0x684c64: ldur            d0, [fp, #-0x10]
    // 0x684c68: fsub            d1, d0, d2
    // 0x684c6c: d0 = 0.000000
    //     0x684c6c: eor             v0.16b, v0.16b, v0.16b
    // 0x684c70: fcmp            d1, d0
    // 0x684c74: b.vs            #0x684c84
    // 0x684c78: b.ne            #0x684c84
    // 0x684c7c: d1 = 0.000000
    //     0x684c7c: eor             v1.16b, v1.16b, v1.16b
    // 0x684c80: b               #0x684ca0
    // 0x684c84: fcmp            d1, d0
    // 0x684c88: b.vs            #0x684c98
    // 0x684c8c: b.ge            #0x684c98
    // 0x684c90: fneg            d0, d1
    // 0x684c94: b               #0x684c9c
    // 0x684c98: mov             v0.16b, v1.16b
    // 0x684c9c: mov             v1.16b, v0.16b
    // 0x684ca0: d0 = 0.000000
    //     0x684ca0: ldr             d0, [PP, #0x5dc0]  ; [pp+0x5dc0] IMM: double(1e-10) from 0x3ddb7cdfd9d7bdbb
    // 0x684ca4: fcmp            d1, d0
    // 0x684ca8: b.vs            #0x684ce0
    // 0x684cac: b.gt            #0x684ce0
    // 0x684cb0: ldr             x0, [fp, #0x10]
    // 0x684cb4: LoadField: r1 = r0->field_23
    //     0x684cb4: ldur            w1, [x0, #0x23]
    // 0x684cb8: DecompressPointer r1
    //     0x684cb8: add             x1, x1, HEAP, lsl #32
    // 0x684cbc: LoadField: d0 = r1->field_7
    //     0x684cbc: ldur            d0, [x1, #7]
    // 0x684cc0: stur            d0, [fp, #-8]
    // 0x684cc4: str             x0, [SP]
    // 0x684cc8: r0 = safeOffset()
    //     0x684cc8: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x684ccc: mov             v1.16b, v0.16b
    // 0x684cd0: ldur            d0, [fp, #-8]
    // 0x684cd4: fadd            d2, d0, d1
    // 0x684cd8: ldr             x1, [fp, #0x10]
    // 0x684cdc: StoreField: r1->field_4b = d2
    //     0x684cdc: stur            d2, [x1, #0x4b]
    // 0x684ce0: r0 = Null
    //     0x684ce0: mov             x0, NULL
    // 0x684ce4: LeaveFrame
    //     0x684ce4: mov             SP, fp
    //     0x684ce8: ldp             fp, lr, [SP], #0x10
    // 0x684cec: ret
    //     0x684cec: ret             
    // 0x684cf0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684cf0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684cf4: b               #0x684c34
  }
  set _ position=(/* No info */) {
    // ** addr: 0x684cf8, size: 0x2d4
    // 0x684cf8: EnterFrame
    //     0x684cf8: stp             fp, lr, [SP, #-0x10]!
    //     0x684cfc: mov             fp, SP
    // 0x684d00: AllocStack(0x8)
    //     0x684d00: sub             SP, SP, #8
    // 0x684d04: CheckStackOverflow
    //     0x684d04: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x684d08: cmp             SP, x16
    //     0x684d0c: b.ls            #0x684f78
    // 0x684d10: ldr             x16, [fp, #0x10]
    // 0x684d14: str             x16, [SP]
    // 0x684d18: r0 = _ScrollMetricsExtension.isNestedOuter()
    //     0x684d18: bl              #0x684b94  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedOuter
    // 0x684d1c: tbnz            w0, #4, #0x684d8c
    // 0x684d20: ldr             x2, [fp, #0x18]
    // 0x684d24: ldr             x1, [fp, #0x10]
    // 0x684d28: r0 = LoadClassIdInstr(r1)
    //     0x684d28: ldur            x0, [x1, #-1]
    //     0x684d2c: ubfx            x0, x0, #0xc, #0x14
    // 0x684d30: str             x1, [SP]
    // 0x684d34: r0 = GDT[cid_x0 + 0xcc4]()
    //     0x684d34: add             lr, x0, #0xcc4
    //     0x684d38: ldr             lr, [x21, lr, lsl #3]
    //     0x684d3c: blr             lr
    // 0x684d40: r0 = inline_Allocate_Double()
    //     0x684d40: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x684d44: add             x0, x0, #0x10
    //     0x684d48: cmp             x1, x0
    //     0x684d4c: b.ls            #0x684f80
    //     0x684d50: str             x0, [THR, #0x50]  ; THR::top
    //     0x684d54: sub             x0, x0, #0xf
    //     0x684d58: movz            x1, #0xd148
    //     0x684d5c: movk            x1, #0x3, lsl #16
    //     0x684d60: stur            x1, [x0, #-1]
    // 0x684d64: StoreField: r0->field_7 = d0
    //     0x684d64: stur            d0, [x0, #7]
    // 0x684d68: ldr             x1, [fp, #0x18]
    // 0x684d6c: StoreField: r1->field_87 = r0
    //     0x684d6c: stur            w0, [x1, #0x87]
    //     0x684d70: ldurb           w16, [x1, #-1]
    //     0x684d74: ldurb           w17, [x0, #-1]
    //     0x684d78: and             x16, x17, x16, lsr #2
    //     0x684d7c: tst             x16, HEAP, lsr #32
    //     0x684d80: b.eq            #0x684d88
    //     0x684d84: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x684d88: b               #0x684ee4
    // 0x684d8c: ldr             x1, [fp, #0x18]
    // 0x684d90: ldr             x16, [fp, #0x10]
    // 0x684d94: str             x16, [SP]
    // 0x684d98: r0 = _ScrollMetricsExtension.isNestedInner()
    //     0x684d98: bl              #0x68503c  ; [package:easy_refresh/easy_refresh.dart] ::_ScrollMetricsExtension.isNestedInner
    // 0x684d9c: tbnz            w0, #4, #0x684edc
    // 0x684da0: r0 = LoadStaticField(0xc34)
    //     0x684da0: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0x684da4: ldr             x0, [x0, #0x1868]
    // 0x684da8: cmp             w0, NULL
    // 0x684dac: b.eq            #0x684f90
    // 0x684db0: LoadField: r1 = r0->field_5f
    //     0x684db0: ldur            w1, [x0, #0x5f]
    // 0x684db4: DecompressPointer r1
    //     0x684db4: add             x1, x1, HEAP, lsl #32
    // 0x684db8: r16 = Instance_SchedulerPhase
    //     0x684db8: ldr             x16, [PP, #0x2b48]  ; [pp+0x2b48] Obj!SchedulerPhase@c43731
    // 0x684dbc: cmp             w1, w16
    // 0x684dc0: b.eq            #0x684ed4
    // 0x684dc4: ldr             x1, [fp, #0x10]
    // 0x684dc8: r0 = LoadClassIdInstr(r1)
    //     0x684dc8: ldur            x0, [x1, #-1]
    //     0x684dcc: ubfx            x0, x0, #0xc, #0x14
    // 0x684dd0: str             x1, [SP]
    // 0x684dd4: r0 = GDT[cid_x0 + 0xfd8]()
    //     0x684dd4: add             lr, x0, #0xfd8
    //     0x684dd8: ldr             lr, [x21, lr, lsl #3]
    //     0x684ddc: blr             lr
    // 0x684de0: r16 = Instance_Axis
    //     0x684de0: ldr             x16, [PP, #0x5d18]  ; [pp+0x5d18] Obj!Axis@c440f1
    // 0x684de4: cmp             w0, w16
    // 0x684de8: b.ne            #0x684e50
    // 0x684dec: ldr             x0, [fp, #0x18]
    // 0x684df0: LoadField: r1 = r0->field_27
    //     0x684df0: ldur            w1, [x0, #0x27]
    // 0x684df4: DecompressPointer r1
    //     0x684df4: add             x1, x1, HEAP, lsl #32
    // 0x684df8: LoadField: r2 = r1->field_f
    //     0x684df8: ldur            w2, [x1, #0xf]
    // 0x684dfc: DecompressPointer r2
    //     0x684dfc: add             x2, x2, HEAP, lsl #32
    // 0x684e00: cmp             w2, NULL
    // 0x684e04: b.eq            #0x684f94
    // 0x684e08: str             x2, [SP]
    // 0x684e0c: r0 = size()
    //     0x684e0c: bl              #0x684fcc  ; [package:flutter/src/widgets/framework.dart] Element::size
    // 0x684e10: cmp             w0, NULL
    // 0x684e14: b.ne            #0x684e20
    // 0x684e18: r0 = Null
    //     0x684e18: mov             x0, NULL
    // 0x684e1c: b               #0x684eb0
    // 0x684e20: LoadField: d0 = r0->field_f
    //     0x684e20: ldur            d0, [x0, #0xf]
    // 0x684e24: r0 = inline_Allocate_Double()
    //     0x684e24: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x684e28: add             x0, x0, #0x10
    //     0x684e2c: cmp             x1, x0
    //     0x684e30: b.ls            #0x684f98
    //     0x684e34: str             x0, [THR, #0x50]  ; THR::top
    //     0x684e38: sub             x0, x0, #0xf
    //     0x684e3c: movz            x1, #0xd148
    //     0x684e40: movk            x1, #0x3, lsl #16
    //     0x684e44: stur            x1, [x0, #-1]
    // 0x684e48: StoreField: r0->field_7 = d0
    //     0x684e48: stur            d0, [x0, #7]
    // 0x684e4c: b               #0x684eb0
    // 0x684e50: ldr             x0, [fp, #0x18]
    // 0x684e54: LoadField: r1 = r0->field_27
    //     0x684e54: ldur            w1, [x0, #0x27]
    // 0x684e58: DecompressPointer r1
    //     0x684e58: add             x1, x1, HEAP, lsl #32
    // 0x684e5c: LoadField: r2 = r1->field_f
    //     0x684e5c: ldur            w2, [x1, #0xf]
    // 0x684e60: DecompressPointer r2
    //     0x684e60: add             x2, x2, HEAP, lsl #32
    // 0x684e64: cmp             w2, NULL
    // 0x684e68: b.eq            #0x684fa8
    // 0x684e6c: str             x2, [SP]
    // 0x684e70: r0 = size()
    //     0x684e70: bl              #0x684fcc  ; [package:flutter/src/widgets/framework.dart] Element::size
    // 0x684e74: cmp             w0, NULL
    // 0x684e78: b.ne            #0x684e84
    // 0x684e7c: r0 = Null
    //     0x684e7c: mov             x0, NULL
    // 0x684e80: b               #0x684eb0
    // 0x684e84: LoadField: d0 = r0->field_7
    //     0x684e84: ldur            d0, [x0, #7]
    // 0x684e88: r0 = inline_Allocate_Double()
    //     0x684e88: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x684e8c: add             x0, x0, #0x10
    //     0x684e90: cmp             x1, x0
    //     0x684e94: b.ls            #0x684fac
    //     0x684e98: str             x0, [THR, #0x50]  ; THR::top
    //     0x684e9c: sub             x0, x0, #0xf
    //     0x684ea0: movz            x1, #0xd148
    //     0x684ea4: movk            x1, #0x3, lsl #16
    //     0x684ea8: stur            x1, [x0, #-1]
    // 0x684eac: StoreField: r0->field_7 = d0
    //     0x684eac: stur            d0, [x0, #7]
    // 0x684eb0: ldr             x1, [fp, #0x18]
    // 0x684eb4: StoreField: r1->field_87 = r0
    //     0x684eb4: stur            w0, [x1, #0x87]
    //     0x684eb8: ldurb           w16, [x1, #-1]
    //     0x684ebc: ldurb           w17, [x0, #-1]
    //     0x684ec0: and             x16, x17, x16, lsr #2
    //     0x684ec4: tst             x16, HEAP, lsr #32
    //     0x684ec8: b.eq            #0x684ed0
    //     0x684ecc: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x684ed0: b               #0x684ee4
    // 0x684ed4: ldr             x1, [fp, #0x18]
    // 0x684ed8: b               #0x684ee4
    // 0x684edc: ldr             x1, [fp, #0x18]
    // 0x684ee0: StoreField: r1->field_87 = rNULL
    //     0x684ee0: stur            NULL, [x1, #0x87]
    // 0x684ee4: ldr             x2, [fp, #0x10]
    // 0x684ee8: mov             x0, x2
    // 0x684eec: StoreField: r1->field_53 = r0
    //     0x684eec: stur            w0, [x1, #0x53]
    //     0x684ef0: ldurb           w16, [x1, #-1]
    //     0x684ef4: ldurb           w17, [x0, #-1]
    //     0x684ef8: and             x16, x17, x16, lsr #2
    //     0x684efc: tst             x16, HEAP, lsr #32
    //     0x684f00: b.eq            #0x684f08
    //     0x684f04: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x684f08: r0 = LoadClassIdInstr(r2)
    //     0x684f08: ldur            x0, [x2, #-1]
    //     0x684f0c: ubfx            x0, x0, #0xc, #0x14
    // 0x684f10: str             x2, [SP]
    // 0x684f14: r0 = GDT[cid_x0 + -0xe6f]()
    //     0x684f14: sub             lr, x0, #0xe6f
    //     0x684f18: ldr             lr, [x21, lr, lsl #3]
    //     0x684f1c: blr             lr
    // 0x684f20: r0 = inline_Allocate_Double()
    //     0x684f20: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x684f24: add             x0, x0, #0x10
    //     0x684f28: cmp             x1, x0
    //     0x684f2c: b.ls            #0x684fbc
    //     0x684f30: str             x0, [THR, #0x50]  ; THR::top
    //     0x684f34: sub             x0, x0, #0xf
    //     0x684f38: movz            x1, #0xd148
    //     0x684f3c: movk            x1, #0x3, lsl #16
    //     0x684f40: stur            x1, [x0, #-1]
    // 0x684f44: StoreField: r0->field_7 = d0
    //     0x684f44: stur            d0, [x0, #7]
    // 0x684f48: ldr             x1, [fp, #0x18]
    // 0x684f4c: StoreField: r1->field_57 = r0
    //     0x684f4c: stur            w0, [x1, #0x57]
    //     0x684f50: ldurb           w16, [x1, #-1]
    //     0x684f54: ldurb           w17, [x0, #-1]
    //     0x684f58: and             x16, x17, x16, lsr #2
    //     0x684f5c: tst             x16, HEAP, lsr #32
    //     0x684f60: b.eq            #0x684f68
    //     0x684f64: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0x684f68: r0 = Null
    //     0x684f68: mov             x0, NULL
    // 0x684f6c: LeaveFrame
    //     0x684f6c: mov             SP, fp
    //     0x684f70: ldp             fp, lr, [SP], #0x10
    // 0x684f74: ret
    //     0x684f74: ret             
    // 0x684f78: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x684f78: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x684f7c: b               #0x684d10
    // 0x684f80: SaveReg d0
    //     0x684f80: str             q0, [SP, #-0x10]!
    // 0x684f84: r0 = AllocateDouble()
    //     0x684f84: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x684f88: RestoreReg d0
    //     0x684f88: ldr             q0, [SP], #0x10
    // 0x684f8c: b               #0x684d64
    // 0x684f90: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x684f90: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684f94: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x684f94: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684f98: SaveReg d0
    //     0x684f98: str             q0, [SP, #-0x10]!
    // 0x684f9c: r0 = AllocateDouble()
    //     0x684f9c: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x684fa0: RestoreReg d0
    //     0x684fa0: ldr             q0, [SP], #0x10
    // 0x684fa4: b               #0x684e48
    // 0x684fa8: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x684fa8: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0x684fac: SaveReg d0
    //     0x684fac: str             q0, [SP, #-0x10]!
    // 0x684fb0: r0 = AllocateDouble()
    //     0x684fb0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x684fb4: RestoreReg d0
    //     0x684fb4: ldr             q0, [SP], #0x10
    // 0x684fb8: b               #0x684eac
    // 0x684fbc: SaveReg d0
    //     0x684fbc: str             q0, [SP, #-0x10]!
    // 0x684fc0: r0 = AllocateDouble()
    //     0x684fc0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x684fc4: RestoreReg d0
    //     0x684fc4: ldr             q0, [SP], #0x10
    // 0x684fc8: b               #0x684f44
  }
  [closure] Null <anonymous closure>(dynamic) {
    // ** addr: 0x6850c4, size: 0x58
    // 0x6850c4: EnterFrame
    //     0x6850c4: stp             fp, lr, [SP, #-0x10]!
    //     0x6850c8: mov             fp, SP
    // 0x6850cc: AllocStack(0x8)
    //     0x6850cc: sub             SP, SP, #8
    // 0x6850d0: SetupParameters()
    //     0x6850d0: ldr             x0, [fp, #0x10]
    //     0x6850d4: ldur            w1, [x0, #0x17]
    //     0x6850d8: add             x1, x1, HEAP, lsl #32
    // 0x6850dc: CheckStackOverflow
    //     0x6850dc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6850e0: cmp             SP, x16
    //     0x6850e4: b.ls            #0x685114
    // 0x6850e8: LoadField: r0 = r1->field_f
    //     0x6850e8: ldur            w0, [x1, #0xf]
    // 0x6850ec: DecompressPointer r0
    //     0x6850ec: add             x0, x0, HEAP, lsl #32
    // 0x6850f0: LoadField: r1 = r0->field_37
    //     0x6850f0: ldur            w1, [x0, #0x37]
    // 0x6850f4: DecompressPointer r1
    //     0x6850f4: add             x1, x1, HEAP, lsl #32
    // 0x6850f8: tbnz            w1, #4, #0x685104
    // 0x6850fc: str             x0, [SP]
    // 0x685100: r0 = notifyListeners()
    //     0x685100: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x685104: r0 = Null
    //     0x685104: mov             x0, NULL
    // 0x685108: LeaveFrame
    //     0x685108: mov             SP, fp
    //     0x68510c: ldp             fp, lr, [SP], #0x10
    // 0x685110: ret
    //     0x685110: ret             
    // 0x685114: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x685114: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x685118: b               #0x6850e8
  }
  [closure] Null <anonymous closure>(dynamic) {
    // ** addr: 0x68511c, size: 0xc8
    // 0x68511c: EnterFrame
    //     0x68511c: stp             fp, lr, [SP, #-0x10]!
    //     0x685120: mov             fp, SP
    // 0x685124: AllocStack(0x18)
    //     0x685124: sub             SP, SP, #0x18
    // 0x685128: SetupParameters()
    //     0x685128: ldr             x0, [fp, #0x10]
    //     0x68512c: ldur            w1, [x0, #0x17]
    //     0x685130: add             x1, x1, HEAP, lsl #32
    //     0x685134: stur            x1, [fp, #-8]
    // 0x685138: CheckStackOverflow
    //     0x685138: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x68513c: cmp             SP, x16
    //     0x685140: b.ls            #0x6851dc
    // 0x685144: LoadField: r0 = r1->field_f
    //     0x685144: ldur            w0, [x1, #0xf]
    // 0x685148: DecompressPointer r0
    //     0x685148: add             x0, x0, HEAP, lsl #32
    // 0x68514c: LoadField: r2 = r0->field_63
    //     0x68514c: ldur            w2, [x0, #0x63]
    // 0x685150: DecompressPointer r2
    //     0x685150: add             x2, x2, HEAP, lsl #32
    // 0x685154: r16 = Instance_IndicatorMode
    //     0x685154: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x685158: ldr             x16, [x16, #0x160]
    // 0x68515c: cmp             w2, w16
    // 0x685160: b.ne            #0x6851cc
    // 0x685164: r16 = Instance_IndicatorMode
    //     0x685164: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x685168: ldr             x16, [x16, #0x190]
    // 0x68516c: stp             x16, x0, [SP]
    // 0x685170: r0 = _setMode()
    //     0x685170: bl              #0x6834fc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode
    // 0x685174: ldur            x0, [fp, #-8]
    // 0x685178: LoadField: r1 = r0->field_f
    //     0x685178: ldur            w1, [x0, #0xf]
    // 0x68517c: DecompressPointer r1
    //     0x68517c: add             x1, x1, HEAP, lsl #32
    // 0x685180: LoadField: d0 = r1->field_4b
    //     0x685180: ldur            d0, [x1, #0x4b]
    // 0x685184: d1 = 0.000000
    //     0x685184: eor             v1.16b, v1.16b, v1.16b
    // 0x685188: fcmp            d0, d1
    // 0x68518c: b.vs            #0x6851a4
    // 0x685190: b.ne            #0x6851a4
    // 0x685194: r16 = Instance_IndicatorMode
    //     0x685194: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x685198: ldr             x16, [x16, #0x1a0]
    // 0x68519c: stp             x16, x1, [SP]
    // 0x6851a0: r0 = _setMode()
    //     0x6851a0: bl              #0x6834fc  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_setMode
    // 0x6851a4: ldur            x0, [fp, #-8]
    // 0x6851a8: LoadField: r1 = r0->field_f
    //     0x6851a8: ldur            w1, [x0, #0xf]
    // 0x6851ac: DecompressPointer r1
    //     0x6851ac: add             x1, x1, HEAP, lsl #32
    // 0x6851b0: LoadField: r0 = r1->field_2b
    //     0x6851b0: ldur            w0, [x1, #0x2b]
    // 0x6851b4: DecompressPointer r0
    //     0x6851b4: add             x0, x0, HEAP, lsl #32
    // 0x6851b8: LoadField: r2 = r0->field_27
    //     0x6851b8: ldur            w2, [x0, #0x27]
    // 0x6851bc: DecompressPointer r2
    //     0x6851bc: add             x2, x2, HEAP, lsl #32
    // 0x6851c0: tbz             w2, #4, #0x6851cc
    // 0x6851c4: str             x1, [SP]
    // 0x6851c8: r0 = _resetBallistic()
    //     0x6851c8: bl              #0x6851e4  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_resetBallistic
    // 0x6851cc: r0 = Null
    //     0x6851cc: mov             x0, NULL
    // 0x6851d0: LeaveFrame
    //     0x6851d0: mov             SP, fp
    //     0x6851d4: ldp             fp, lr, [SP], #0x10
    // 0x6851d8: ret
    //     0x6851d8: ret             
    // 0x6851dc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6851dc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6851e0: b               #0x685144
  }
  _ _resetBallistic(/* No info */) {
    // ** addr: 0x6851e4, size: 0x1e8
    // 0x6851e4: EnterFrame
    //     0x6851e4: stp             fp, lr, [SP, #-0x10]!
    //     0x6851e8: mov             fp, SP
    // 0x6851ec: AllocStack(0x28)
    //     0x6851ec: sub             SP, SP, #0x28
    // 0x6851f0: CheckStackOverflow
    //     0x6851f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6851f4: cmp             SP, x16
    //     0x6851f8: b.ls            #0x6853b4
    // 0x6851fc: ldr             x0, [fp, #0x10]
    // 0x685200: LoadField: r3 = r0->field_53
    //     0x685200: ldur            w3, [x0, #0x53]
    // 0x685204: DecompressPointer r3
    //     0x685204: add             x3, x3, HEAP, lsl #32
    // 0x685208: stur            x3, [fp, #-8]
    // 0x68520c: r0 = LoadClassIdInstr(r3)
    //     0x68520c: ldur            x0, [x3, #-1]
    //     0x685210: ubfx            x0, x0, #0xc, #0x14
    // 0x685214: lsl             x0, x0, #1
    // 0x685218: r1 = LoadInt32Instr(r0)
    //     0x685218: sbfx            x1, x0, #1, #0x1f
    // 0x68521c: r17 = 4788
    //     0x68521c: movz            x17, #0x12b4
    // 0x685220: cmp             x1, x17
    // 0x685224: b.lt            #0x685324
    // 0x685228: r17 = 4792
    //     0x685228: movz            x17, #0x12b8
    // 0x68522c: cmp             x1, x17
    // 0x685230: b.gt            #0x685324
    // 0x685234: mov             x0, x3
    // 0x685238: r2 = Null
    //     0x685238: mov             x2, NULL
    // 0x68523c: r1 = Null
    //     0x68523c: mov             x1, NULL
    // 0x685240: r4 = LoadClassIdInstr(r0)
    //     0x685240: ldur            x4, [x0, #-1]
    //     0x685244: ubfx            x4, x4, #0xc, #0x14
    // 0x685248: r17 = -4788
    //     0x685248: movn            x17, #0x12b3
    // 0x68524c: add             x4, x4, x17
    // 0x685250: cmp             x4, #4
    // 0x685254: b.ls            #0x68526c
    // 0x685258: r8 = ScrollPosition
    //     0x685258: add             x8, PP, #0x1d, lsl #12  ; [pp+0x1d218] Type: ScrollPosition
    //     0x68525c: ldr             x8, [x8, #0x218]
    // 0x685260: r3 = Null
    //     0x685260: add             x3, PP, #0x1d, lsl #12  ; [pp+0x1d220] Null
    //     0x685264: ldr             x3, [x3, #0x220]
    // 0x685268: r0 = ScrollPosition()
    //     0x685268: bl              #0x5912d4  ; IsType_ScrollPosition_Stub
    // 0x68526c: ldur            x3, [fp, #-8]
    // 0x685270: LoadField: r1 = r3->field_6b
    //     0x685270: ldur            w1, [x3, #0x6b]
    // 0x685274: DecompressPointer r1
    //     0x685274: add             x1, x1, HEAP, lsl #32
    // 0x685278: stur            x1, [fp, #-0x10]
    // 0x68527c: cmp             w1, NULL
    // 0x685280: b.ne            #0x685290
    // 0x685284: mov             x0, x1
    // 0x685288: r1 = Null
    //     0x685288: mov             x1, NULL
    // 0x68528c: b               #0x6852b0
    // 0x685290: r0 = LoadClassIdInstr(r1)
    //     0x685290: ldur            x0, [x1, #-1]
    //     0x685294: ubfx            x0, x0, #0xc, #0x14
    // 0x685298: str             x1, [SP]
    // 0x68529c: r0 = GDT[cid_x0 + -0xfdb]()
    //     0x68529c: sub             lr, x0, #0xfdb
    //     0x6852a0: ldr             lr, [x21, lr, lsl #3]
    //     0x6852a4: blr             lr
    // 0x6852a8: mov             x1, x0
    // 0x6852ac: ldur            x0, [fp, #-0x10]
    // 0x6852b0: stur            x1, [fp, #-0x18]
    // 0x6852b4: cmp             w0, NULL
    // 0x6852b8: b.ne            #0x6852c4
    // 0x6852bc: r0 = Null
    //     0x6852bc: mov             x0, NULL
    // 0x6852c0: b               #0x685308
    // 0x6852c4: r2 = LoadClassIdInstr(r0)
    //     0x6852c4: ldur            x2, [x0, #-1]
    //     0x6852c8: ubfx            x2, x2, #0xc, #0x14
    // 0x6852cc: str             x0, [SP]
    // 0x6852d0: mov             x0, x2
    // 0x6852d4: r0 = GDT[cid_x0 + -0xfce]()
    //     0x6852d4: sub             lr, x0, #0xfce
    //     0x6852d8: ldr             lr, [x21, lr, lsl #3]
    //     0x6852dc: blr             lr
    // 0x6852e0: r0 = inline_Allocate_Double()
    //     0x6852e0: ldp             x0, x1, [THR, #0x50]  ; THR::top
    //     0x6852e4: add             x0, x0, #0x10
    //     0x6852e8: cmp             x1, x0
    //     0x6852ec: b.ls            #0x6853bc
    //     0x6852f0: str             x0, [THR, #0x50]  ; THR::top
    //     0x6852f4: sub             x0, x0, #0xf
    //     0x6852f8: movz            x1, #0xd148
    //     0x6852fc: movk            x1, #0x3, lsl #16
    //     0x685300: stur            x1, [x0, #-1]
    // 0x685304: StoreField: r0->field_7 = d0
    //     0x685304: stur            d0, [x0, #7]
    // 0x685308: cmp             w0, NULL
    // 0x68530c: b.ne            #0x685318
    // 0x685310: d0 = 0.000000
    //     0x685310: eor             v0.16b, v0.16b, v0.16b
    // 0x685314: b               #0x68531c
    // 0x685318: LoadField: d0 = r0->field_7
    //     0x685318: ldur            d0, [x0, #7]
    // 0x68531c: ldur            x0, [fp, #-0x18]
    // 0x685320: b               #0x68537c
    // 0x685324: mov             x0, x3
    // 0x685328: r2 = Null
    //     0x685328: mov             x2, NULL
    // 0x68532c: r1 = Null
    //     0x68532c: mov             x1, NULL
    // 0x685330: cmp             w0, NULL
    // 0x685334: b.eq            #0x68535c
    // 0x685338: branchIfSmi(r0, 0x68535c)
    //     0x685338: tbz             w0, #0, #0x68535c
    // 0x68533c: r3 = LoadClassIdInstr(r0)
    //     0x68533c: ldur            x3, [x0, #-1]
    //     0x685340: ubfx            x3, x3, #0xc, #0x14
    // 0x685344: cmp             x3, #0x650
    // 0x685348: b.eq            #0x685364
    // 0x68534c: r17 = -4788
    //     0x68534c: movn            x17, #0x12b3
    // 0x685350: add             x3, x3, x17
    // 0x685354: cmp             x3, #4
    // 0x685358: b.ls            #0x685364
    // 0x68535c: r0 = false
    //     0x68535c: add             x0, NULL, #0x30  ; false
    // 0x685360: b               #0x685368
    // 0x685364: r0 = true
    //     0x685364: add             x0, NULL, #0x20  ; true
    // 0x685368: tbnz            w0, #4, #0x685374
    // 0x68536c: ldur            x0, [fp, #-8]
    // 0x685370: b               #0x685378
    // 0x685374: r0 = Null
    //     0x685374: mov             x0, NULL
    // 0x685378: d0 = 0.000000
    //     0x685378: eor             v0.16b, v0.16b, v0.16b
    // 0x68537c: cmp             w0, NULL
    // 0x685380: b.eq            #0x6853a4
    // 0x685384: r1 = LoadClassIdInstr(r0)
    //     0x685384: ldur            x1, [x0, #-1]
    //     0x685388: ubfx            x1, x1, #0xc, #0x14
    // 0x68538c: str             x0, [SP, #8]
    // 0x685390: str             d0, [SP]
    // 0x685394: mov             x0, x1
    // 0x685398: r0 = GDT[cid_x0 + -0xade]()
    //     0x685398: sub             lr, x0, #0xade
    //     0x68539c: ldr             lr, [x21, lr, lsl #3]
    //     0x6853a0: blr             lr
    // 0x6853a4: r0 = Null
    //     0x6853a4: mov             x0, NULL
    // 0x6853a8: LeaveFrame
    //     0x6853a8: mov             SP, fp
    //     0x6853ac: ldp             fp, lr, [SP], #0x10
    // 0x6853b0: ret
    //     0x6853b0: ret             
    // 0x6853b4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6853b4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6853b8: b               #0x6851fc
    // 0x6853bc: SaveReg d0
    //     0x6853bc: str             q0, [SP, #-0x10]!
    // 0x6853c0: r0 = AllocateDouble()
    //     0x6853c0: bl              #0xc5ec24  ; AllocateDoubleStub
    // 0x6853c4: RestoreReg d0
    //     0x6853c4: ldr             q0, [SP], #0x10
    // 0x6853c8: b               #0x685304
  }
  [closure] void <anonymous closure>(dynamic, Duration) {
    // ** addr: 0x6853cc, size: 0xe0
    // 0x6853cc: EnterFrame
    //     0x6853cc: stp             fp, lr, [SP, #-0x10]!
    //     0x6853d0: mov             fp, SP
    // 0x6853d4: AllocStack(0x18)
    //     0x6853d4: sub             SP, SP, #0x18
    // 0x6853d8: SetupParameters()
    //     0x6853d8: ldr             x0, [fp, #0x18]
    //     0x6853dc: ldur            w1, [x0, #0x17]
    //     0x6853e0: add             x1, x1, HEAP, lsl #32
    //     0x6853e4: stur            x1, [fp, #-8]
    // 0x6853e8: CheckStackOverflow
    //     0x6853e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x6853ec: cmp             SP, x16
    //     0x6853f0: b.ls            #0x6854a4
    // 0x6853f4: LoadField: r0 = r1->field_f
    //     0x6853f4: ldur            w0, [x1, #0xf]
    // 0x6853f8: DecompressPointer r0
    //     0x6853f8: add             x0, x0, HEAP, lsl #32
    // 0x6853fc: LoadField: r2 = r0->field_63
    //     0x6853fc: ldur            w2, [x0, #0x63]
    // 0x685400: DecompressPointer r2
    //     0x685400: add             x2, x2, HEAP, lsl #32
    // 0x685404: r16 = Instance_IndicatorMode
    //     0x685404: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0x685408: ldr             x16, [x16, #0x160]
    // 0x68540c: cmp             w2, w16
    // 0x685410: b.ne            #0x685494
    // 0x685414: r16 = Instance_IndicatorMode
    //     0x685414: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d190] Obj!IndicatorMode@c453f1
    //     0x685418: ldr             x16, [x16, #0x190]
    // 0x68541c: stp             x16, x0, [SP]
    // 0x685420: r0 = _mode=()
    //     0x685420: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x685424: ldur            x0, [fp, #-8]
    // 0x685428: LoadField: r1 = r0->field_f
    //     0x685428: ldur            w1, [x0, #0xf]
    // 0x68542c: DecompressPointer r1
    //     0x68542c: add             x1, x1, HEAP, lsl #32
    // 0x685430: LoadField: d0 = r1->field_4b
    //     0x685430: ldur            d0, [x1, #0x4b]
    // 0x685434: d1 = 0.000000
    //     0x685434: eor             v1.16b, v1.16b, v1.16b
    // 0x685438: fcmp            d0, d1
    // 0x68543c: b.vs            #0x685454
    // 0x685440: b.ne            #0x685454
    // 0x685444: r16 = Instance_IndicatorMode
    //     0x685444: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0x685448: ldr             x16, [x16, #0x1a0]
    // 0x68544c: stp             x16, x1, [SP]
    // 0x685450: r0 = _mode=()
    //     0x685450: bl              #0x68374c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_mode=
    // 0x685454: ldur            x0, [fp, #-8]
    // 0x685458: LoadField: r1 = r0->field_13
    //     0x685458: ldur            w1, [x0, #0x13]
    // 0x68545c: DecompressPointer r1
    //     0x68545c: add             x1, x1, HEAP, lsl #32
    // 0x685460: r16 = Instance_IndicatorMode
    //     0x685460: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0x685464: ldr             x16, [x16, #0x158]
    // 0x685468: cmp             w1, w16
    // 0x68546c: b.ne            #0x685494
    // 0x685470: LoadField: r1 = r0->field_f
    //     0x685470: ldur            w1, [x0, #0xf]
    // 0x685474: DecompressPointer r1
    //     0x685474: add             x1, x1, HEAP, lsl #32
    // 0x685478: LoadField: r0 = r1->field_2b
    //     0x685478: ldur            w0, [x1, #0x2b]
    // 0x68547c: DecompressPointer r0
    //     0x68547c: add             x0, x0, HEAP, lsl #32
    // 0x685480: LoadField: r2 = r0->field_27
    //     0x685480: ldur            w2, [x0, #0x27]
    // 0x685484: DecompressPointer r2
    //     0x685484: add             x2, x2, HEAP, lsl #32
    // 0x685488: tbz             w2, #4, #0x685494
    // 0x68548c: str             x1, [SP]
    // 0x685490: r0 = _resetBallistic()
    //     0x685490: bl              #0x6851e4  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_resetBallistic
    // 0x685494: r0 = Null
    //     0x685494: mov             x0, NULL
    // 0x685498: LeaveFrame
    //     0x685498: mov             SP, fp
    //     0x68549c: ldp             fp, lr, [SP], #0x10
    // 0x6854a0: ret
    //     0x6854a0: ret             
    // 0x6854a4: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x6854a4: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x6854a8: b               #0x6853f4
  }
  _ _update(/* No info */) {
    // ** addr: 0x8a9994, size: 0x90
    // 0x8a9994: EnterFrame
    //     0x8a9994: stp             fp, lr, [SP, #-0x10]!
    //     0x8a9998: mov             fp, SP
    // 0x8a999c: AllocStack(0x8)
    //     0x8a999c: sub             SP, SP, #8
    // 0x8a99a0: r1 = false
    //     0x8a99a0: add             x1, NULL, #0x30  ; false
    // 0x8a99a4: CheckStackOverflow
    //     0x8a99a4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x8a99a8: cmp             SP, x16
    //     0x8a99ac: b.ls            #0x8a9a1c
    // 0x8a99b0: ldr             x0, [fp, #0x20]
    // 0x8a99b4: ldr             x2, [fp, #0x28]
    // 0x8a99b8: StoreField: r2->field_23 = r0
    //     0x8a99b8: stur            w0, [x2, #0x23]
    //     0x8a99bc: ldurb           w16, [x2, #-1]
    //     0x8a99c0: ldurb           w17, [x0, #-1]
    //     0x8a99c4: and             x16, x17, x16, lsr #2
    //     0x8a99c8: tst             x16, HEAP, lsr #32
    //     0x8a99cc: b.eq            #0x8a99d4
    //     0x8a99d0: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x8a99d4: StoreField: r2->field_83 = r1
    //     0x8a99d4: stur            w1, [x2, #0x83]
    // 0x8a99d8: StoreField: r2->field_3b = rNULL
    //     0x8a99d8: stur            NULL, [x2, #0x3b]
    // 0x8a99dc: ldr             x0, [fp, #0x18]
    // 0x8a99e0: StoreField: r2->field_2f = r0
    //     0x8a99e0: stur            w0, [x2, #0x2f]
    //     0x8a99e4: ldurb           w16, [x2, #-1]
    //     0x8a99e8: ldurb           w17, [x0, #-1]
    //     0x8a99ec: and             x16, x17, x16, lsr #2
    //     0x8a99f0: tst             x16, HEAP, lsr #32
    //     0x8a99f4: b.eq            #0x8a99fc
    //     0x8a99f8: bl              #0xc5d71c  ; WriteBarrierWrappersStub
    // 0x8a99fc: ldr             x0, [fp, #0x10]
    // 0x8a9a00: StoreField: r2->field_33 = r0
    //     0x8a9a00: stur            w0, [x2, #0x33]
    // 0x8a9a04: str             x2, [SP]
    // 0x8a9a08: r0 = notifyListeners()
    //     0x8a9a08: bl              #0x5b5d0c  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::notifyListeners
    // 0x8a9a0c: r0 = Null
    //     0x8a9a0c: mov             x0, NULL
    // 0x8a9a10: LeaveFrame
    //     0x8a9a10: mov             SP, fp
    //     0x8a9a14: ldp             fp, lr, [SP], #0x10
    // 0x8a9a18: ret
    //     0x8a9a18: ret             
    // 0x8a9a1c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x8a9a1c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x8a9a20: b               #0x8a99b0
  }
  _ _reset(/* No info */) {
    // ** addr: 0x8a9b50, size: 0x30
    // 0x8a9b50: ldr             x1, [SP]
    // 0x8a9b54: LoadField: r2 = r1->field_7f
    //     0x8a9b54: ldur            w2, [x1, #0x7f]
    // 0x8a9b58: DecompressPointer r2
    //     0x8a9b58: add             x2, x2, HEAP, lsl #32
    // 0x8a9b5c: r16 = Instance_IndicatorResult
    //     0x8a9b5c: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0x8a9b60: ldr             x16, [x16, #0x1c0]
    // 0x8a9b64: cmp             w2, w16
    // 0x8a9b68: b.ne            #0x8a9b78
    // 0x8a9b6c: r2 = Instance_IndicatorResult
    //     0x8a9b6c: add             x2, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0x8a9b70: ldr             x2, [x2, #0x1b0]
    // 0x8a9b74: StoreField: r1->field_7f = r2
    //     0x8a9b74: stur            w2, [x1, #0x7f]
    // 0x8a9b78: r0 = Null
    //     0x8a9b78: mov             x0, NULL
    // 0x8a9b7c: ret
    //     0x8a9b7c: ret             
  }
  _ listenable(/* No info */) {
    // ** addr: 0x91c4b0, size: 0x58
    // 0x91c4b0: EnterFrame
    //     0x91c4b0: stp             fp, lr, [SP, #-0x10]!
    //     0x91c4b4: mov             fp, SP
    // 0x91c4b8: AllocStack(0x18)
    //     0x91c4b8: sub             SP, SP, #0x18
    // 0x91c4bc: CheckStackOverflow
    //     0x91c4bc: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c4c0: cmp             SP, x16
    //     0x91c4c4: b.ls            #0x91c500
    // 0x91c4c8: r16 = <(dynamic this) => void?>
    //     0x91c4c8: ldr             x16, [PP, #0x4030]  ; [pp+0x4030] TypeArguments: <(dynamic this) => void?>
    // 0x91c4cc: stp             xzr, x16, [SP]
    // 0x91c4d0: r0 = _GrowableList()
    //     0x91c4d0: bl              #0x4c6d34  ; [dart:core] _GrowableList::_GrowableList
    // 0x91c4d4: r1 = <IndicatorNotifier>
    //     0x91c4d4: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a070] TypeArguments: <IndicatorNotifier>
    //     0x91c4d8: ldr             x1, [x1, #0x70]
    // 0x91c4dc: stur            x0, [fp, #-8]
    // 0x91c4e0: r0 = _IndicatorListenable()
    //     0x91c4e0: bl              #0x91c508  ; Allocate_IndicatorListenableStub -> _IndicatorListenable<X0 bound IndicatorNotifier> (size=0x14)
    // 0x91c4e4: ldur            x1, [fp, #-8]
    // 0x91c4e8: StoreField: r0->field_f = r1
    //     0x91c4e8: stur            w1, [x0, #0xf]
    // 0x91c4ec: ldr             x1, [fp, #0x10]
    // 0x91c4f0: StoreField: r0->field_b = r1
    //     0x91c4f0: stur            w1, [x0, #0xb]
    // 0x91c4f4: LeaveFrame
    //     0x91c4f4: mov             SP, fp
    //     0x91c4f8: ldp             fp, lr, [SP], #0x10
    // 0x91c4fc: ret
    //     0x91c4fc: ret             
    // 0x91c500: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c500: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c504: b               #0x91c4c8
  }
  _ _build(/* No info */) {
    // ** addr: 0x91c7dc, size: 0xa4
    // 0x91c7dc: EnterFrame
    //     0x91c7dc: stp             fp, lr, [SP, #-0x10]!
    //     0x91c7e0: mov             fp, SP
    // 0x91c7e4: AllocStack(0x18)
    //     0x91c7e4: sub             SP, SP, #0x18
    // 0x91c7e8: CheckStackOverflow
    //     0x91c7e8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c7ec: cmp             SP, x16
    //     0x91c7f0: b.ls            #0x91c874
    // 0x91c7f4: ldr             x0, [fp, #0x10]
    // 0x91c7f8: LoadField: r1 = r0->field_3f
    //     0x91c7f8: ldur            w1, [x0, #0x3f]
    // 0x91c7fc: DecompressPointer r1
    //     0x91c7fc: add             x1, x1, HEAP, lsl #32
    // 0x91c800: cmp             w1, NULL
    // 0x91c804: b.eq            #0x91c818
    // 0x91c808: LoadField: r1 = r0->field_43
    //     0x91c808: ldur            w1, [x0, #0x43]
    // 0x91c80c: DecompressPointer r1
    //     0x91c80c: add             x1, x1, HEAP, lsl #32
    // 0x91c810: cmp             w1, NULL
    // 0x91c814: b.ne            #0x91c82c
    // 0x91c818: r0 = Instance_SizedBox
    //     0x91c818: add             x0, PP, #0x1c, lsl #12  ; [pp+0x1cd50] Obj!SizedBox@c37c31
    //     0x91c81c: ldr             x0, [x0, #0xd50]
    // 0x91c820: LeaveFrame
    //     0x91c820: mov             SP, fp
    //     0x91c824: ldp             fp, lr, [SP], #0x10
    // 0x91c828: ret
    //     0x91c828: ret             
    // 0x91c82c: LoadField: r1 = r0->field_23
    //     0x91c82c: ldur            w1, [x0, #0x23]
    // 0x91c830: DecompressPointer r1
    //     0x91c830: add             x1, x1, HEAP, lsl #32
    // 0x91c834: stur            x1, [fp, #-8]
    // 0x91c838: str             x0, [SP]
    // 0x91c83c: r0 = indicatorState()
    //     0x91c83c: bl              #0x91c880  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::indicatorState
    // 0x91c840: cmp             w0, NULL
    // 0x91c844: b.eq            #0x91c87c
    // 0x91c848: ldur            x1, [fp, #-8]
    // 0x91c84c: r2 = LoadClassIdInstr(r1)
    //     0x91c84c: ldur            x2, [x1, #-1]
    //     0x91c850: ubfx            x2, x2, #0xc, #0x14
    // 0x91c854: stp             x0, x1, [SP]
    // 0x91c858: mov             x0, x2
    // 0x91c85c: r0 = GDT[cid_x0 + 0xa52]()
    //     0x91c85c: add             lr, x0, #0xa52
    //     0x91c860: ldr             lr, [x21, lr, lsl #3]
    //     0x91c864: blr             lr
    // 0x91c868: LeaveFrame
    //     0x91c868: mov             SP, fp
    //     0x91c86c: ldp             fp, lr, [SP], #0x10
    // 0x91c870: ret
    //     0x91c870: ret             
    // 0x91c874: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c874: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c878: b               #0x91c7f4
    // 0x91c87c: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0x91c87c: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
  }
  get _ indicatorState(/* No info */) {
    // ** addr: 0x91c880, size: 0x158
    // 0x91c880: EnterFrame
    //     0x91c880: stp             fp, lr, [SP, #-0x10]!
    //     0x91c884: mov             fp, SP
    // 0x91c888: AllocStack(0x58)
    //     0x91c888: sub             SP, SP, #0x58
    // 0x91c88c: CheckStackOverflow
    //     0x91c88c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0x91c890: cmp             SP, x16
    //     0x91c894: b.ls            #0x91c9c8
    // 0x91c898: ldr             x0, [fp, #0x10]
    // 0x91c89c: LoadField: r1 = r0->field_3f
    //     0x91c89c: ldur            w1, [x0, #0x3f]
    // 0x91c8a0: DecompressPointer r1
    //     0x91c8a0: add             x1, x1, HEAP, lsl #32
    // 0x91c8a4: cmp             w1, NULL
    // 0x91c8a8: b.eq            #0x91c8bc
    // 0x91c8ac: LoadField: r1 = r0->field_43
    //     0x91c8ac: ldur            w1, [x0, #0x43]
    // 0x91c8b0: DecompressPointer r1
    //     0x91c8b0: add             x1, x1, HEAP, lsl #32
    // 0x91c8b4: cmp             w1, NULL
    // 0x91c8b8: b.ne            #0x91c8cc
    // 0x91c8bc: r0 = Null
    //     0x91c8bc: mov             x0, NULL
    // 0x91c8c0: LeaveFrame
    //     0x91c8c0: mov             SP, fp
    //     0x91c8c4: ldp             fp, lr, [SP], #0x10
    // 0x91c8c8: ret
    //     0x91c8c8: ret             
    // 0x91c8cc: LoadField: r1 = r0->field_23
    //     0x91c8cc: ldur            w1, [x0, #0x23]
    // 0x91c8d0: DecompressPointer r1
    //     0x91c8d0: add             x1, x1, HEAP, lsl #32
    // 0x91c8d4: stur            x1, [fp, #-0x18]
    // 0x91c8d8: LoadField: r2 = r0->field_63
    //     0x91c8d8: ldur            w2, [x0, #0x63]
    // 0x91c8dc: DecompressPointer r2
    //     0x91c8dc: add             x2, x2, HEAP, lsl #32
    // 0x91c8e0: stur            x2, [fp, #-0x10]
    // 0x91c8e4: LoadField: r3 = r0->field_7f
    //     0x91c8e4: ldur            w3, [x0, #0x7f]
    // 0x91c8e8: DecompressPointer r3
    //     0x91c8e8: add             x3, x3, HEAP, lsl #32
    // 0x91c8ec: stur            x3, [fp, #-8]
    // 0x91c8f0: LoadField: d0 = r0->field_4b
    //     0x91c8f0: ldur            d0, [x0, #0x4b]
    // 0x91c8f4: stur            d0, [fp, #-0x30]
    // 0x91c8f8: str             x0, [SP]
    // 0x91c8fc: r0 = safeOffset()
    //     0x91c8fc: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x91c900: ldr             x0, [fp, #0x10]
    // 0x91c904: stur            d0, [fp, #-0x38]
    // 0x91c908: LoadField: r1 = r0->field_3f
    //     0x91c908: ldur            w1, [x0, #0x3f]
    // 0x91c90c: DecompressPointer r1
    //     0x91c90c: add             x1, x1, HEAP, lsl #32
    // 0x91c910: stur            x1, [fp, #-0x28]
    // 0x91c914: cmp             w1, NULL
    // 0x91c918: b.eq            #0x91c9d0
    // 0x91c91c: LoadField: r2 = r0->field_43
    //     0x91c91c: ldur            w2, [x0, #0x43]
    // 0x91c920: DecompressPointer r2
    //     0x91c920: add             x2, x2, HEAP, lsl #32
    // 0x91c924: stur            x2, [fp, #-0x20]
    // 0x91c928: cmp             w2, NULL
    // 0x91c92c: b.eq            #0x91c9d4
    // 0x91c930: str             x0, [SP]
    // 0x91c934: r0 = viewportDimension()
    //     0x91c934: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0x91c938: ldr             x0, [fp, #0x10]
    // 0x91c93c: stur            d0, [fp, #-0x48]
    // 0x91c940: LoadField: r1 = r0->field_23
    //     0x91c940: ldur            w1, [x0, #0x23]
    // 0x91c944: DecompressPointer r1
    //     0x91c944: add             x1, x1, HEAP, lsl #32
    // 0x91c948: LoadField: d1 = r1->field_7
    //     0x91c948: ldur            d1, [x1, #7]
    // 0x91c94c: stur            d1, [fp, #-0x40]
    // 0x91c950: str             x0, [SP]
    // 0x91c954: r0 = safeOffset()
    //     0x91c954: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0x91c958: mov             v1.16b, v0.16b
    // 0x91c95c: ldur            d0, [fp, #-0x40]
    // 0x91c960: fadd            d2, d0, d1
    // 0x91c964: stur            d2, [fp, #-0x50]
    // 0x91c968: r0 = IndicatorState()
    //     0x91c968: bl              #0x91c9d8  ; AllocateIndicatorStateStub -> IndicatorState (size=0x40)
    // 0x91c96c: ldur            x1, [fp, #-0x18]
    // 0x91c970: StoreField: r0->field_7 = r1
    //     0x91c970: stur            w1, [x0, #7]
    // 0x91c974: ldr             x1, [fp, #0x10]
    // 0x91c978: StoreField: r0->field_b = r1
    //     0x91c978: stur            w1, [x0, #0xb]
    // 0x91c97c: ldur            x1, [fp, #-0x10]
    // 0x91c980: StoreField: r0->field_f = r1
    //     0x91c980: stur            w1, [x0, #0xf]
    // 0x91c984: ldur            x1, [fp, #-8]
    // 0x91c988: StoreField: r0->field_13 = r1
    //     0x91c988: stur            w1, [x0, #0x13]
    // 0x91c98c: ldur            d0, [fp, #-0x30]
    // 0x91c990: ArrayStore: r0[0] = d0  ; List_8
    //     0x91c990: stur            d0, [x0, #0x17]
    // 0x91c994: ldur            d0, [fp, #-0x38]
    // 0x91c998: StoreField: r0->field_1f = d0
    //     0x91c998: stur            d0, [x0, #0x1f]
    // 0x91c99c: ldur            x1, [fp, #-0x28]
    // 0x91c9a0: StoreField: r0->field_27 = r1
    //     0x91c9a0: stur            w1, [x0, #0x27]
    // 0x91c9a4: ldur            x1, [fp, #-0x20]
    // 0x91c9a8: StoreField: r0->field_2b = r1
    //     0x91c9a8: stur            w1, [x0, #0x2b]
    // 0x91c9ac: ldur            d0, [fp, #-0x48]
    // 0x91c9b0: StoreField: r0->field_2f = d0
    //     0x91c9b0: stur            d0, [x0, #0x2f]
    // 0x91c9b4: ldur            d0, [fp, #-0x50]
    // 0x91c9b8: StoreField: r0->field_37 = d0
    //     0x91c9b8: stur            d0, [x0, #0x37]
    // 0x91c9bc: LeaveFrame
    //     0x91c9bc: mov             SP, fp
    //     0x91c9c0: ldp             fp, lr, [SP], #0x10
    // 0x91c9c4: ret
    //     0x91c9c4: ret             
    // 0x91c9c8: r0 = StackOverflowSharedWithoutFPURegs()
    //     0x91c9c8: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0x91c9cc: b               #0x91c898
    // 0x91c9d0: r0 = NullCastErrorSharedWithFPURegs()
    //     0x91c9d0: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
    // 0x91c9d4: r0 = NullCastErrorSharedWithFPURegs()
    //     0x91c9d4: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
  _ IndicatorNotifier(/* No info */) {
    // ** addr: 0xa1d3c8, size: 0x230
    // 0xa1d3c8: EnterFrame
    //     0xa1d3c8: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d3cc: mov             fp, SP
    // 0xa1d3d0: AllocStack(0x20)
    //     0xa1d3d0: sub             SP, SP, #0x20
    // 0xa1d3d4: r2 = false
    //     0xa1d3d4: add             x2, NULL, #0x30  ; false
    // 0xa1d3d8: r1 = Instance_IndicatorMode
    //     0xa1d3d8: add             x1, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xa1d3dc: ldr             x1, [x1, #0x1a0]
    // 0xa1d3e0: r0 = Instance_IndicatorResult
    //     0xa1d3e0: add             x0, PP, #0x1d, lsl #12  ; [pp+0x1d1b0] Obj!IndicatorResult@c452d1
    //     0xa1d3e4: ldr             x0, [x0, #0x1b0]
    // 0xa1d3e8: d0 = 0.000000
    //     0xa1d3e8: eor             v0.16b, v0.16b, v0.16b
    // 0xa1d3ec: CheckStackOverflow
    //     0xa1d3ec: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d3f0: cmp             SP, x16
    //     0xa1d3f4: b.ls            #0xa1d5f0
    // 0xa1d3f8: ldr             x3, [fp, #0x40]
    // 0xa1d3fc: StoreField: r3->field_37 = r2
    //     0xa1d3fc: stur            w2, [x3, #0x37]
    // 0xa1d400: StoreField: r3->field_4b = d0
    //     0xa1d400: stur            d0, [x3, #0x4b]
    // 0xa1d404: StoreField: r3->field_5b = d0
    //     0xa1d404: stur            d0, [x3, #0x5b]
    // 0xa1d408: StoreField: r3->field_63 = r1
    //     0xa1d408: stur            w1, [x3, #0x63]
    // 0xa1d40c: StoreField: r3->field_6b = d0
    //     0xa1d40c: stur            d0, [x3, #0x6b]
    // 0xa1d410: StoreField: r3->field_77 = r2
    //     0xa1d410: stur            w2, [x3, #0x77]
    // 0xa1d414: StoreField: r3->field_7f = r0
    //     0xa1d414: stur            w0, [x3, #0x7f]
    // 0xa1d418: r0 = InitLateStaticField(0x294) // [dart:collection] ::_uninitializedIndex
    //     0xa1d418: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1d41c: ldr             x0, [x0, #0x528]
    //     0xa1d420: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1d424: cmp             w0, w16
    //     0xa1d428: b.ne            #0xa1d434
    //     0xa1d42c: ldr             x2, [PP, #0xf38]  ; [pp+0xf38] Field <::._uninitializedIndex@3220832>: static late final (offset: 0x294)
    //     0xa1d430: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa1d434: r1 = <(dynamic this, IndicatorMode, double) => void?>
    //     0xa1d434: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a120] TypeArguments: <(dynamic this, IndicatorMode, double) => void?>
    //     0xa1d438: ldr             x1, [x1, #0x120]
    // 0xa1d43c: stur            x0, [fp, #-8]
    // 0xa1d440: r0 = _Set()
    //     0xa1d440: bl              #0x50fb4c  ; Allocate_SetStub -> _Set<X0> (size=-0x8)
    // 0xa1d444: mov             x1, x0
    // 0xa1d448: ldur            x0, [fp, #-8]
    // 0xa1d44c: stur            x1, [fp, #-0x10]
    // 0xa1d450: StoreField: r1->field_1b = r0
    //     0xa1d450: stur            w0, [x1, #0x1b]
    // 0xa1d454: StoreField: r1->field_b = rZR
    //     0xa1d454: stur            wzr, [x1, #0xb]
    // 0xa1d458: r0 = InitLateStaticField(0x298) // [dart:collection] ::_uninitializedData
    //     0xa1d458: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1d45c: ldr             x0, [x0, #0x530]
    //     0xa1d460: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1d464: cmp             w0, w16
    //     0xa1d468: b.ne            #0xa1d474
    //     0xa1d46c: ldr             x2, [PP, #0xf40]  ; [pp+0xf40] Field <::._uninitializedData@3220832>: static late final (offset: 0x298)
    //     0xa1d470: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa1d474: mov             x1, x0
    // 0xa1d478: ldur            x0, [fp, #-0x10]
    // 0xa1d47c: StoreField: r0->field_f = r1
    //     0xa1d47c: stur            w1, [x0, #0xf]
    // 0xa1d480: StoreField: r0->field_13 = rZR
    //     0xa1d480: stur            wzr, [x0, #0x13]
    // 0xa1d484: ArrayStore: r0[0] = rZR  ; List_4
    //     0xa1d484: stur            wzr, [x0, #0x17]
    // 0xa1d488: ldr             x1, [fp, #0x40]
    // 0xa1d48c: StoreField: r1->field_73 = r0
    //     0xa1d48c: stur            w0, [x1, #0x73]
    //     0xa1d490: ldurb           w16, [x1, #-1]
    //     0xa1d494: ldurb           w17, [x0, #-1]
    //     0xa1d498: and             x16, x17, x16, lsr #2
    //     0xa1d49c: tst             x16, HEAP, lsr #32
    //     0xa1d4a0: b.eq            #0xa1d4a8
    //     0xa1d4a4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d4a8: ldr             x0, [fp, #0x18]
    // 0xa1d4ac: StoreField: r1->field_27 = r0
    //     0xa1d4ac: stur            w0, [x1, #0x27]
    //     0xa1d4b0: ldurb           w16, [x1, #-1]
    //     0xa1d4b4: ldurb           w17, [x0, #-1]
    //     0xa1d4b8: and             x16, x17, x16, lsr #2
    //     0xa1d4bc: tst             x16, HEAP, lsr #32
    //     0xa1d4c0: b.eq            #0xa1d4c8
    //     0xa1d4c4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d4c8: ldr             x0, [fp, #0x20]
    // 0xa1d4cc: StoreField: r1->field_2b = r0
    //     0xa1d4cc: stur            w0, [x1, #0x2b]
    //     0xa1d4d0: ldurb           w16, [x1, #-1]
    //     0xa1d4d4: ldurb           w17, [x0, #-1]
    //     0xa1d4d8: and             x16, x17, x16, lsr #2
    //     0xa1d4dc: tst             x16, HEAP, lsr #32
    //     0xa1d4e0: b.eq            #0xa1d4e8
    //     0xa1d4e4: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d4e8: ldr             x0, [fp, #0x38]
    // 0xa1d4ec: StoreField: r1->field_23 = r0
    //     0xa1d4ec: stur            w0, [x1, #0x23]
    //     0xa1d4f0: ldurb           w16, [x1, #-1]
    //     0xa1d4f4: ldurb           w17, [x0, #-1]
    //     0xa1d4f8: and             x16, x17, x16, lsr #2
    //     0xa1d4fc: tst             x16, HEAP, lsr #32
    //     0xa1d500: b.eq            #0xa1d508
    //     0xa1d504: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d508: ldr             x0, [fp, #0x30]
    // 0xa1d50c: StoreField: r1->field_7b = r0
    //     0xa1d50c: stur            w0, [x1, #0x7b]
    //     0xa1d510: ldurb           w16, [x1, #-1]
    //     0xa1d514: ldurb           w17, [x0, #-1]
    //     0xa1d518: and             x16, x17, x16, lsr #2
    //     0xa1d51c: tst             x16, HEAP, lsr #32
    //     0xa1d520: b.eq            #0xa1d528
    //     0xa1d524: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d528: r0 = false
    //     0xa1d528: add             x0, NULL, #0x30  ; false
    // 0xa1d52c: StoreField: r1->field_83 = r0
    //     0xa1d52c: stur            w0, [x1, #0x83]
    // 0xa1d530: ldr             x0, [fp, #0x10]
    // 0xa1d534: StoreField: r1->field_33 = r0
    //     0xa1d534: stur            w0, [x1, #0x33]
    // 0xa1d538: ldr             x0, [fp, #0x28]
    // 0xa1d53c: StoreField: r1->field_2f = r0
    //     0xa1d53c: stur            w0, [x1, #0x2f]
    //     0xa1d540: ldurb           w16, [x1, #-1]
    //     0xa1d544: ldurb           w17, [x0, #-1]
    //     0xa1d548: and             x16, x17, x16, lsr #2
    //     0xa1d54c: tst             x16, HEAP, lsr #32
    //     0xa1d550: b.eq            #0xa1d558
    //     0xa1d554: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d558: r0 = 0
    //     0xa1d558: movz            x0, #0
    // 0xa1d55c: StoreField: r1->field_7 = r0
    //     0xa1d55c: stur            x0, [x1, #7]
    // 0xa1d560: StoreField: r1->field_13 = r0
    //     0xa1d560: stur            x0, [x1, #0x13]
    // 0xa1d564: StoreField: r1->field_1b = r0
    //     0xa1d564: stur            x0, [x1, #0x1b]
    // 0xa1d568: r0 = InitLateStaticField(0xa3c) // [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::_emptyListeners
    //     0xa1d568: ldr             x0, [THR, #0x68]  ; THR::field_table_values
    //     0xa1d56c: ldr             x0, [x0, #0x1478]
    //     0xa1d570: ldr             x16, [PP, #0x38]  ; [pp+0x38] Sentinel
    //     0xa1d574: cmp             w0, w16
    //     0xa1d578: b.ne            #0xa1d584
    //     0xa1d57c: ldr             x2, [PP, #0x3a60]  ; [pp+0x3a60] Field <ChangeNotifier._emptyListeners@37329750>: static late final (offset: 0xa3c)
    //     0xa1d580: bl              #0xc5d15c  ; InitLateFinalStaticFieldStub
    // 0xa1d584: ldr             x1, [fp, #0x40]
    // 0xa1d588: StoreField: r1->field_f = r0
    //     0xa1d588: stur            w0, [x1, #0xf]
    //     0xa1d58c: ldurb           w16, [x1, #-1]
    //     0xa1d590: ldurb           w17, [x0, #-1]
    //     0xa1d594: and             x16, x17, x16, lsr #2
    //     0xa1d598: tst             x16, HEAP, lsr #32
    //     0xa1d59c: b.eq            #0xa1d5a4
    //     0xa1d5a0: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xa1d5a4: r1 = 1
    //     0xa1d5a4: movz            x1, #0x1
    // 0xa1d5a8: r0 = AllocateContext()
    //     0xa1d5a8: bl              #0xc5def4  ; AllocateContextStub
    // 0xa1d5ac: mov             x1, x0
    // 0xa1d5b0: ldr             x0, [fp, #0x40]
    // 0xa1d5b4: StoreField: r1->field_f = r0
    //     0xa1d5b4: stur            w0, [x1, #0xf]
    // 0xa1d5b8: mov             x2, x1
    // 0xa1d5bc: r1 = Function '_onUserOffset@765089737':.
    //     0xa1d5bc: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0a0] AnonymousClosure: (0xa1d5f8), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_onUserOffset (0xa1d640)
    //     0xa1d5c0: ldr             x1, [x1, #0xa0]
    // 0xa1d5c4: r0 = AllocateClosure()
    //     0xa1d5c4: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa1d5c8: ldr             x16, [fp, #0x20]
    // 0xa1d5cc: stp             x0, x16, [SP]
    // 0xa1d5d0: r0 = addListener()
    //     0xa1d5d0: bl              #0x82eef8  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::addListener
    // 0xa1d5d4: ldr             x1, [fp, #0x40]
    // 0xa1d5d8: r2 = true
    //     0xa1d5d8: add             x2, NULL, #0x20  ; true
    // 0xa1d5dc: StoreField: r1->field_37 = r2
    //     0xa1d5dc: stur            w2, [x1, #0x37]
    // 0xa1d5e0: r0 = Null
    //     0xa1d5e0: mov             x0, NULL
    // 0xa1d5e4: LeaveFrame
    //     0xa1d5e4: mov             SP, fp
    //     0xa1d5e8: ldp             fp, lr, [SP], #0x10
    // 0xa1d5ec: ret
    //     0xa1d5ec: ret             
    // 0xa1d5f0: r0 = StackOverflowSharedWithFPURegs()
    //     0xa1d5f0: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xa1d5f4: b               #0xa1d3f8
  }
  [closure] void _onUserOffset(dynamic) {
    // ** addr: 0xa1d5f8, size: 0x48
    // 0xa1d5f8: EnterFrame
    //     0xa1d5f8: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d5fc: mov             fp, SP
    // 0xa1d600: AllocStack(0x8)
    //     0xa1d600: sub             SP, SP, #8
    // 0xa1d604: SetupParameters()
    //     0xa1d604: ldr             x0, [fp, #0x10]
    //     0xa1d608: ldur            w1, [x0, #0x17]
    //     0xa1d60c: add             x1, x1, HEAP, lsl #32
    // 0xa1d610: CheckStackOverflow
    //     0xa1d610: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d614: cmp             SP, x16
    //     0xa1d618: b.ls            #0xa1d638
    // 0xa1d61c: LoadField: r0 = r1->field_f
    //     0xa1d61c: ldur            w0, [x1, #0xf]
    // 0xa1d620: DecompressPointer r0
    //     0xa1d620: add             x0, x0, HEAP, lsl #32
    // 0xa1d624: str             x0, [SP]
    // 0xa1d628: r0 = _onUserOffset()
    //     0xa1d628: bl              #0xa1d640  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_onUserOffset
    // 0xa1d62c: LeaveFrame
    //     0xa1d62c: mov             SP, fp
    //     0xa1d630: ldp             fp, lr, [SP], #0x10
    // 0xa1d634: ret
    //     0xa1d634: ret             
    // 0xa1d638: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d638: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d63c: b               #0xa1d61c
  }
  _ _onUserOffset(/* No info */) {
    // ** addr: 0xa1d640, size: 0x28
    // 0xa1d640: ldr             x1, [SP]
    // 0xa1d644: LoadField: r2 = r1->field_2b
    //     0xa1d644: ldur            w2, [x1, #0x2b]
    // 0xa1d648: DecompressPointer r2
    //     0xa1d648: add             x2, x2, HEAP, lsl #32
    // 0xa1d64c: LoadField: r3 = r2->field_27
    //     0xa1d64c: ldur            w3, [x2, #0x27]
    // 0xa1d650: DecompressPointer r3
    //     0xa1d650: add             x3, x3, HEAP, lsl #32
    // 0xa1d654: tbz             w3, #4, #0xa1d660
    // 0xa1d658: LoadField: d0 = r1->field_4b
    //     0xa1d658: ldur            d0, [x1, #0x4b]
    // 0xa1d65c: StoreField: r1->field_6b = d0
    //     0xa1d65c: stur            d0, [x1, #0x6b]
    // 0xa1d660: r0 = Null
    //     0xa1d660: mov             x0, NULL
    // 0xa1d664: ret
    //     0xa1d664: ret             
  }
  _ addModeChangeListener(/* No info */) {
    // ** addr: 0xa1da30, size: 0x48
    // 0xa1da30: EnterFrame
    //     0xa1da30: stp             fp, lr, [SP, #-0x10]!
    //     0xa1da34: mov             fp, SP
    // 0xa1da38: AllocStack(0x10)
    //     0xa1da38: sub             SP, SP, #0x10
    // 0xa1da3c: CheckStackOverflow
    //     0xa1da3c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1da40: cmp             SP, x16
    //     0xa1da44: b.ls            #0xa1da70
    // 0xa1da48: ldr             x0, [fp, #0x18]
    // 0xa1da4c: LoadField: r1 = r0->field_73
    //     0xa1da4c: ldur            w1, [x0, #0x73]
    // 0xa1da50: DecompressPointer r1
    //     0xa1da50: add             x1, x1, HEAP, lsl #32
    // 0xa1da54: ldr             x16, [fp, #0x10]
    // 0xa1da58: stp             x16, x1, [SP]
    // 0xa1da5c: r0 = add()
    //     0xa1da5c: bl              #0xbecb20  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::add
    // 0xa1da60: r0 = Null
    //     0xa1da60: mov             x0, NULL
    // 0xa1da64: LeaveFrame
    //     0xa1da64: mov             SP, fp
    //     0xa1da68: ldp             fp, lr, [SP], #0x10
    // 0xa1da6c: ret
    //     0xa1da6c: ret             
    // 0xa1da70: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1da70: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1da74: b               #0xa1da48
  }
  _ dispose(/* No info */) {
    // ** addr: 0xa3c9f8, size: 0xa0
    // 0xa3c9f8: EnterFrame
    //     0xa3c9f8: stp             fp, lr, [SP, #-0x10]!
    //     0xa3c9fc: mov             fp, SP
    // 0xa3ca00: AllocStack(0x18)
    //     0xa3ca00: sub             SP, SP, #0x18
    // 0xa3ca04: CheckStackOverflow
    //     0xa3ca04: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa3ca08: cmp             SP, x16
    //     0xa3ca0c: b.ls            #0xa3ca90
    // 0xa3ca10: ldr             x0, [fp, #0x10]
    // 0xa3ca14: StoreField: r0->field_7b = rNULL
    //     0xa3ca14: stur            NULL, [x0, #0x7b]
    // 0xa3ca18: LoadField: r1 = r0->field_2b
    //     0xa3ca18: ldur            w1, [x0, #0x2b]
    // 0xa3ca1c: DecompressPointer r1
    //     0xa3ca1c: add             x1, x1, HEAP, lsl #32
    // 0xa3ca20: stur            x1, [fp, #-8]
    // 0xa3ca24: r1 = 1
    //     0xa3ca24: movz            x1, #0x1
    // 0xa3ca28: r0 = AllocateContext()
    //     0xa3ca28: bl              #0xc5def4  ; AllocateContextStub
    // 0xa3ca2c: mov             x1, x0
    // 0xa3ca30: ldr             x0, [fp, #0x10]
    // 0xa3ca34: StoreField: r1->field_f = r0
    //     0xa3ca34: stur            w0, [x1, #0xf]
    // 0xa3ca38: mov             x2, x1
    // 0xa3ca3c: r1 = Function '_onUserOffset@765089737':.
    //     0xa3ca3c: add             x1, PP, #0x2a, lsl #12  ; [pp+0x2a0a0] AnonymousClosure: (0xa1d5f8), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_onUserOffset (0xa1d640)
    //     0xa3ca40: ldr             x1, [x1, #0xa0]
    // 0xa3ca44: r0 = AllocateClosure()
    //     0xa3ca44: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xa3ca48: ldur            x16, [fp, #-8]
    // 0xa3ca4c: stp             x0, x16, [SP]
    // 0xa3ca50: r0 = removeListener()
    //     0xa3ca50: bl              #0x8411c4  ; [package:flutter/src/foundation/change_notifier.dart] ChangeNotifier::removeListener
    // 0xa3ca54: ldr             x0, [fp, #0x10]
    // 0xa3ca58: StoreField: r0->field_2f = rNULL
    //     0xa3ca58: stur            NULL, [x0, #0x2f]
    // 0xa3ca5c: LoadField: r1 = r0->field_73
    //     0xa3ca5c: ldur            w1, [x0, #0x73]
    // 0xa3ca60: DecompressPointer r1
    //     0xa3ca60: add             x1, x1, HEAP, lsl #32
    // 0xa3ca64: str             x1, [SP]
    // 0xa3ca68: r0 = clear()
    //     0xa3ca68: bl              #0x5c0170  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::clear
    // 0xa3ca6c: ldr             x0, [fp, #0x10]
    // 0xa3ca70: r1 = false
    //     0xa3ca70: add             x1, NULL, #0x30  ; false
    // 0xa3ca74: StoreField: r0->field_37 = r1
    //     0xa3ca74: stur            w1, [x0, #0x37]
    // 0xa3ca78: str             x0, [SP]
    // 0xa3ca7c: r0 = dispose()
    //     0xa3ca7c: bl              #0xa60440  ; [package:flutter/src/widgets/shortcuts.dart] _ShortcutManager&Object&Diagnosticable&ChangeNotifier::dispose
    // 0xa3ca80: r0 = Null
    //     0xa3ca80: mov             x0, NULL
    // 0xa3ca84: LeaveFrame
    //     0xa3ca84: mov             SP, fp
    //     0xa3ca88: ldp             fp, lr, [SP], #0x10
    // 0xa3ca8c: ret
    //     0xa3ca8c: ret             
    // 0xa3ca90: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa3ca90: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa3ca94: b               #0xa3ca10
  }
  _ removeModeChangeListener(/* No info */) {
    // ** addr: 0xa55758, size: 0x48
    // 0xa55758: EnterFrame
    //     0xa55758: stp             fp, lr, [SP, #-0x10]!
    //     0xa5575c: mov             fp, SP
    // 0xa55760: AllocStack(0x10)
    //     0xa55760: sub             SP, SP, #0x10
    // 0xa55764: CheckStackOverflow
    //     0xa55764: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa55768: cmp             SP, x16
    //     0xa5576c: b.ls            #0xa55798
    // 0xa55770: ldr             x0, [fp, #0x18]
    // 0xa55774: LoadField: r1 = r0->field_73
    //     0xa55774: ldur            w1, [x0, #0x73]
    // 0xa55778: DecompressPointer r1
    //     0xa55778: add             x1, x1, HEAP, lsl #32
    // 0xa5577c: ldr             x16, [fp, #0x10]
    // 0xa55780: stp             x16, x1, [SP]
    // 0xa55784: r0 = remove()
    //     0xa55784: bl              #0xbe8744  ; [dart:collection] __Set&_HashVMBase&SetMixin&_HashBase&_OperatorEqualsAndHashCode&_LinkedHashSetMixin::remove
    // 0xa55788: r0 = Null
    //     0xa55788: mov             x0, NULL
    // 0xa5578c: LeaveFrame
    //     0xa5578c: mov             SP, fp
    //     0xa55790: ldp             fp, lr, [SP], #0x10
    // 0xa55794: ret
    //     0xa55794: ret             
    // 0xa55798: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa55798: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa5579c: b               #0xa55770
  }
  get _ outOfRange(/* No info */) {
    // ** addr: 0xb18404, size: 0x28
    // 0xb18404: d0 = 0.000000
    //     0xb18404: eor             v0.16b, v0.16b, v0.16b
    // 0xb18408: ldr             x1, [SP]
    // 0xb1840c: LoadField: d1 = r1->field_4b
    //     0xb1840c: ldur            d1, [x1, #0x4b]
    // 0xb18410: fcmp            d1, d0
    // 0xb18414: b.vs            #0xb1841c
    // 0xb18418: b.gt            #0xb18424
    // 0xb1841c: r0 = false
    //     0xb1841c: add             x0, NULL, #0x30  ; false
    // 0xb18420: b               #0xb18428
    // 0xb18424: r0 = true
    //     0xb18424: add             x0, NULL, #0x20  ; true
    // 0xb18428: ret
    //     0xb18428: ret             
  }
  get _ actualMaxOverOffset(/* No info */) {
    // ** addr: 0xc2fe80, size: 0x5c
    // 0xc2fe80: EnterFrame
    //     0xc2fe80: stp             fp, lr, [SP, #-0x10]!
    //     0xc2fe84: mov             fp, SP
    // 0xc2fe88: AllocStack(0x8)
    //     0xc2fe88: sub             SP, SP, #8
    // 0xc2fe8c: d0 = inf
    //     0xc2fe8c: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2fe90: CheckStackOverflow
    //     0xc2fe90: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc2fe94: cmp             SP, x16
    //     0xc2fe98: b.ls            #0xc2fed4
    // 0xc2fe9c: fcmp            d0, d0
    // 0xc2fea0: b.vs            #0xc2feb0
    // 0xc2fea4: b.ne            #0xc2feb0
    // 0xc2fea8: d0 = inf
    //     0xc2fea8: ldr             d0, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2feac: b               #0xc2fec8
    // 0xc2feb0: ldr             x16, [fp, #0x10]
    // 0xc2feb4: str             x16, [SP]
    // 0xc2feb8: r0 = safeOffset()
    //     0xc2feb8: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc2febc: d1 = inf
    //     0xc2febc: ldr             d1, [PP, #0xcc0]  ; [pp+0xcc0] IMM: double(inf) from 0x7ff0000000000000
    // 0xc2fec0: fadd            d2, d1, d0
    // 0xc2fec4: mov             v0.16b, v2.16b
    // 0xc2fec8: LeaveFrame
    //     0xc2fec8: mov             SP, fp
    //     0xc2fecc: ldp             fp, lr, [SP], #0x10
    // 0xc2fed0: ret
    //     0xc2fed0: ret             
    // 0xc2fed4: r0 = StackOverflowSharedWithFPURegs()
    //     0xc2fed4: bl              #0xc5ef08  ; StackOverflowSharedWithFPURegsStub
    // 0xc2fed8: b               #0xc2fe9c
  }
  get _ overExtent(/* No info */) {
    // ** addr: 0xc320ac, size: 0x1e8
    // 0xc320ac: EnterFrame
    //     0xc320ac: stp             fp, lr, [SP, #-0x10]!
    //     0xc320b0: mov             fp, SP
    // 0xc320b4: AllocStack(0x10)
    //     0xc320b4: sub             SP, SP, #0x10
    // 0xc320b8: CheckStackOverflow
    //     0xc320b8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc320bc: cmp             SP, x16
    //     0xc320c0: b.ls            #0xc3228c
    // 0xc320c4: ldr             x0, [fp, #0x10]
    // 0xc320c8: LoadField: r1 = r0->field_2f
    //     0xc320c8: ldur            w1, [x0, #0x2f]
    // 0xc320cc: DecompressPointer r1
    //     0xc320cc: add             x1, x1, HEAP, lsl #32
    // 0xc320d0: cmp             w1, NULL
    // 0xc320d4: b.eq            #0xc32168
    // 0xc320d8: str             x0, [SP]
    // 0xc320dc: r0 = _canProcess()
    //     0xc320dc: bl              #0x684a4c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_canProcess
    // 0xc320e0: tbz             w0, #4, #0xc3211c
    // 0xc320e4: ldr             x0, [fp, #0x10]
    // 0xc320e8: LoadField: r1 = r0->field_7f
    //     0xc320e8: ldur            w1, [x0, #0x7f]
    // 0xc320ec: DecompressPointer r1
    //     0xc320ec: add             x1, x1, HEAP, lsl #32
    // 0xc320f0: r16 = Instance_IndicatorResult
    //     0xc320f0: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0xc320f4: ldr             x16, [x16, #0x1c0]
    // 0xc320f8: cmp             w1, w16
    // 0xc320fc: b.ne            #0xc32168
    // 0xc32100: LoadField: r1 = r0->field_63
    //     0xc32100: ldur            w1, [x0, #0x63]
    // 0xc32104: DecompressPointer r1
    //     0xc32104: add             x1, x1, HEAP, lsl #32
    // 0xc32108: r16 = Instance_IndicatorMode
    //     0xc32108: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xc3210c: ldr             x16, [x16, #0x1a0]
    // 0xc32110: cmp             w1, w16
    // 0xc32114: b.eq            #0xc32120
    // 0xc32118: b               #0xc32168
    // 0xc3211c: ldr             x0, [fp, #0x10]
    // 0xc32120: LoadField: r1 = r0->field_7f
    //     0xc32120: ldur            w1, [x0, #0x7f]
    // 0xc32124: DecompressPointer r1
    //     0xc32124: add             x1, x1, HEAP, lsl #32
    // 0xc32128: r16 = Instance_IndicatorResult
    //     0xc32128: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0xc3212c: ldr             x16, [x16, #0x1c0]
    // 0xc32130: cmp             w1, w16
    // 0xc32134: b.ne            #0xc32178
    // 0xc32138: LoadField: r2 = r0->field_63
    //     0xc32138: ldur            w2, [x0, #0x63]
    // 0xc3213c: DecompressPointer r2
    //     0xc3213c: add             x2, x2, HEAP, lsl #32
    // 0xc32140: r16 = Instance_IndicatorMode
    //     0xc32140: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xc32144: ldr             x16, [x16, #0x1a0]
    // 0xc32148: cmp             w2, w16
    // 0xc3214c: b.ne            #0xc32178
    // 0xc32150: LoadField: r2 = r0->field_23
    //     0xc32150: ldur            w2, [x0, #0x23]
    // 0xc32154: DecompressPointer r2
    //     0xc32154: add             x2, x2, HEAP, lsl #32
    // 0xc32158: LoadField: r3 = r2->field_37
    //     0xc32158: ldur            w3, [x2, #0x37]
    // 0xc3215c: DecompressPointer r3
    //     0xc3215c: add             x3, x3, HEAP, lsl #32
    // 0xc32160: cmp             w3, NULL
    // 0xc32164: b.ne            #0xc32178
    // 0xc32168: d0 = 0.000000
    //     0xc32168: eor             v0.16b, v0.16b, v0.16b
    // 0xc3216c: LeaveFrame
    //     0xc3216c: mov             SP, fp
    //     0xc32170: ldp             fp, lr, [SP], #0x10
    // 0xc32174: ret
    //     0xc32174: ret             
    // 0xc32178: LoadField: r2 = r0->field_23
    //     0xc32178: ldur            w2, [x0, #0x23]
    // 0xc3217c: DecompressPointer r2
    //     0xc3217c: add             x2, x2, HEAP, lsl #32
    // 0xc32180: LoadField: r3 = r2->field_37
    //     0xc32180: ldur            w3, [x2, #0x37]
    // 0xc32184: DecompressPointer r3
    //     0xc32184: add             x3, x3, HEAP, lsl #32
    // 0xc32188: cmp             w3, NULL
    // 0xc3218c: b.ne            #0xc321e8
    // 0xc32190: LoadField: r3 = r0->field_63
    //     0xc32190: ldur            w3, [x0, #0x63]
    // 0xc32194: DecompressPointer r3
    //     0xc32194: add             x3, x3, HEAP, lsl #32
    // 0xc32198: r16 = Instance_IndicatorMode
    //     0xc32198: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1b8] Obj!IndicatorMode@c453b1
    //     0xc3219c: ldr             x16, [x16, #0x1b8]
    // 0xc321a0: cmp             w3, w16
    // 0xc321a4: b.eq            #0xc321e8
    // 0xc321a8: r16 = Instance_IndicatorMode
    //     0xc321a8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d158] Obj!IndicatorMode@c45431
    //     0xc321ac: ldr             x16, [x16, #0x158]
    // 0xc321b0: cmp             w3, w16
    // 0xc321b4: b.eq            #0xc321e8
    // 0xc321b8: r16 = Instance_IndicatorMode
    //     0xc321b8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d160] Obj!IndicatorMode@c45411
    //     0xc321bc: ldr             x16, [x16, #0x160]
    // 0xc321c0: cmp             w3, w16
    // 0xc321c4: b.eq            #0xc321e8
    // 0xc321c8: r16 = Instance_IndicatorResult
    //     0xc321c8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1c0] Obj!IndicatorResult@c452b1
    //     0xc321cc: ldr             x16, [x16, #0x1c0]
    // 0xc321d0: cmp             w1, w16
    // 0xc321d4: b.ne            #0xc32214
    // 0xc321d8: r16 = Instance_IndicatorMode
    //     0xc321d8: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1a0] Obj!IndicatorMode@c453d1
    //     0xc321dc: ldr             x16, [x16, #0x1a0]
    // 0xc321e0: cmp             w3, w16
    // 0xc321e4: b.ne            #0xc32214
    // 0xc321e8: LoadField: d0 = r2->field_7
    //     0xc321e8: ldur            d0, [x2, #7]
    // 0xc321ec: stur            d0, [fp, #-8]
    // 0xc321f0: str             x0, [SP]
    // 0xc321f4: r0 = safeOffset()
    //     0xc321f4: bl              #0x683ed0  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::safeOffset
    // 0xc321f8: mov             v1.16b, v0.16b
    // 0xc321fc: ldur            d0, [fp, #-8]
    // 0xc32200: fadd            d2, d0, d1
    // 0xc32204: mov             v0.16b, v2.16b
    // 0xc32208: LeaveFrame
    //     0xc32208: mov             SP, fp
    //     0xc3220c: ldp             fp, lr, [SP], #0x10
    // 0xc32210: ret
    //     0xc32210: ret             
    // 0xc32214: r16 = Instance_IndicatorMode
    //     0xc32214: add             x16, PP, #0x31, lsl #12  ; [pp+0x316e8] Obj!IndicatorMode@c45451
    //     0xc32218: ldr             x16, [x16, #0x6e8]
    // 0xc3221c: cmp             w3, w16
    // 0xc32220: b.ne            #0xc32248
    // 0xc32224: LoadField: r1 = r0->field_2b
    //     0xc32224: ldur            w1, [x0, #0x2b]
    // 0xc32228: DecompressPointer r1
    //     0xc32228: add             x1, x1, HEAP, lsl #32
    // 0xc3222c: LoadField: r2 = r1->field_27
    //     0xc3222c: ldur            w2, [x1, #0x27]
    // 0xc32230: DecompressPointer r2
    //     0xc32230: add             x2, x2, HEAP, lsl #32
    // 0xc32234: tbnz            w2, #4, #0xc32248
    // 0xc32238: LoadField: d0 = r0->field_4b
    //     0xc32238: ldur            d0, [x0, #0x4b]
    // 0xc3223c: LeaveFrame
    //     0xc3223c: mov             SP, fp
    //     0xc32240: ldp             fp, lr, [SP], #0x10
    // 0xc32244: ret
    //     0xc32244: ret             
    // 0xc32248: r16 = Instance_IndicatorMode
    //     0xc32248: add             x16, PP, #0x31, lsl #12  ; [pp+0x316d0] Obj!IndicatorMode@c45471
    //     0xc3224c: ldr             x16, [x16, #0x6d0]
    // 0xc32250: cmp             w3, w16
    // 0xc32254: b.eq            #0xc32268
    // 0xc32258: r16 = Instance_IndicatorMode
    //     0xc32258: add             x16, PP, #0x1d, lsl #12  ; [pp+0x1d1e8] Obj!IndicatorMode@c45331
    //     0xc3225c: ldr             x16, [x16, #0x1e8]
    // 0xc32260: cmp             w3, w16
    // 0xc32264: b.ne            #0xc3227c
    // 0xc32268: str             x0, [SP]
    // 0xc3226c: r0 = viewportDimension()
    //     0xc3226c: bl              #0x68465c  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::viewportDimension
    // 0xc32270: LeaveFrame
    //     0xc32270: mov             SP, fp
    //     0xc32274: ldp             fp, lr, [SP], #0x10
    // 0xc32278: ret
    //     0xc32278: ret             
    // 0xc3227c: d0 = 0.000000
    //     0xc3227c: eor             v0.16b, v0.16b, v0.16b
    // 0xc32280: LeaveFrame
    //     0xc32280: mov             SP, fp
    //     0xc32284: ldp             fp, lr, [SP], #0x10
    // 0xc32288: ret
    //     0xc32288: ret             
    // 0xc3228c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc3228c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc32290: b               #0xc320c4
  }
  _ _updateBySimulation(/* No info */) {
    // ** addr: 0xc32294, size: 0x1a4
    // 0xc32294: EnterFrame
    //     0xc32294: stp             fp, lr, [SP, #-0x10]!
    //     0xc32298: mov             fp, SP
    // 0xc3229c: AllocStack(0x30)
    //     0xc3229c: sub             SP, SP, #0x30
    // 0xc322a0: CheckStackOverflow
    //     0xc322a0: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc322a4: cmp             SP, x16
    //     0xc322a8: b.ls            #0xc32430
    // 0xc322ac: r1 = 1
    //     0xc322ac: movz            x1, #0x1
    // 0xc322b0: r0 = AllocateContext()
    //     0xc322b0: bl              #0xc5def4  ; AllocateContextStub
    // 0xc322b4: mov             x2, x0
    // 0xc322b8: ldr             x1, [fp, #0x20]
    // 0xc322bc: stur            x2, [fp, #-0x10]
    // 0xc322c0: StoreField: r2->field_f = r1
    //     0xc322c0: stur            w1, [x2, #0xf]
    // 0xc322c4: ldr             d0, [fp, #0x10]
    // 0xc322c8: StoreField: r1->field_5b = d0
    //     0xc322c8: stur            d0, [x1, #0x5b]
    // 0xc322cc: LoadField: r3 = r1->field_3f
    //     0xc322cc: ldur            w3, [x1, #0x3f]
    // 0xc322d0: DecompressPointer r3
    //     0xc322d0: add             x3, x3, HEAP, lsl #32
    // 0xc322d4: ldr             x4, [fp, #0x18]
    // 0xc322d8: stur            x3, [fp, #-8]
    // 0xc322dc: r0 = LoadClassIdInstr(r4)
    //     0xc322dc: ldur            x0, [x4, #-1]
    //     0xc322e0: ubfx            x0, x0, #0xc, #0x14
    // 0xc322e4: str             x4, [SP]
    // 0xc322e8: r0 = GDT[cid_x0 + 0xfd8]()
    //     0xc322e8: add             lr, x0, #0xfd8
    //     0xc322ec: ldr             lr, [x21, lr, lsl #3]
    //     0xc322f0: blr             lr
    // 0xc322f4: mov             x1, x0
    // 0xc322f8: ldur            x0, [fp, #-8]
    // 0xc322fc: cmp             w0, w1
    // 0xc32300: b.ne            #0xc32340
    // 0xc32304: ldr             x1, [fp, #0x20]
    // 0xc32308: ldr             x2, [fp, #0x18]
    // 0xc3230c: LoadField: r3 = r1->field_43
    //     0xc3230c: ldur            w3, [x1, #0x43]
    // 0xc32310: DecompressPointer r3
    //     0xc32310: add             x3, x3, HEAP, lsl #32
    // 0xc32314: stur            x3, [fp, #-8]
    // 0xc32318: r0 = LoadClassIdInstr(r2)
    //     0xc32318: ldur            x0, [x2, #-1]
    //     0xc3231c: ubfx            x0, x0, #0xc, #0x14
    // 0xc32320: str             x2, [SP]
    // 0xc32324: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc32324: sub             lr, x0, #0x89d
    //     0xc32328: ldr             lr, [x21, lr, lsl #3]
    //     0xc3232c: blr             lr
    // 0xc32330: mov             x1, x0
    // 0xc32334: ldur            x0, [fp, #-8]
    // 0xc32338: cmp             w0, w1
    // 0xc3233c: b.eq            #0xc323d8
    // 0xc32340: ldr             x1, [fp, #0x20]
    // 0xc32344: ldr             x2, [fp, #0x18]
    // 0xc32348: r0 = LoadClassIdInstr(r2)
    //     0xc32348: ldur            x0, [x2, #-1]
    //     0xc3234c: ubfx            x0, x0, #0xc, #0x14
    // 0xc32350: str             x2, [SP]
    // 0xc32354: r0 = GDT[cid_x0 + 0xfd8]()
    //     0xc32354: add             lr, x0, #0xfd8
    //     0xc32358: ldr             lr, [x21, lr, lsl #3]
    //     0xc3235c: blr             lr
    // 0xc32360: ldr             x1, [fp, #0x20]
    // 0xc32364: StoreField: r1->field_3f = r0
    //     0xc32364: stur            w0, [x1, #0x3f]
    //     0xc32368: ldurb           w16, [x1, #-1]
    //     0xc3236c: ldurb           w17, [x0, #-1]
    //     0xc32370: and             x16, x17, x16, lsr #2
    //     0xc32374: tst             x16, HEAP, lsr #32
    //     0xc32378: b.eq            #0xc32380
    //     0xc3237c: bl              #0xc5d6fc  ; WriteBarrierWrappersStub
    // 0xc32380: ldr             x2, [fp, #0x18]
    // 0xc32384: r0 = LoadClassIdInstr(r2)
    //     0xc32384: ldur            x0, [x2, #-1]
    //     0xc32388: ubfx            x0, x0, #0xc, #0x14
    // 0xc3238c: str             x2, [SP]
    // 0xc32390: r0 = GDT[cid_x0 + -0x89d]()
    //     0xc32390: sub             lr, x0, #0x89d
    //     0xc32394: ldr             lr, [x21, lr, lsl #3]
    //     0xc32398: blr             lr
    // 0xc3239c: ldr             x3, [fp, #0x20]
    // 0xc323a0: StoreField: r3->field_43 = r0
    //     0xc323a0: stur            w0, [x3, #0x43]
    //     0xc323a4: ldurb           w16, [x3, #-1]
    //     0xc323a8: ldurb           w17, [x0, #-1]
    //     0xc323ac: and             x16, x17, x16, lsr #2
    //     0xc323b0: tst             x16, HEAP, lsr #32
    //     0xc323b4: b.eq            #0xc323bc
    //     0xc323b8: bl              #0xc5d73c  ; WriteBarrierWrappersStub
    // 0xc323bc: ldur            x2, [fp, #-0x10]
    // 0xc323c0: r1 = Function '<anonymous closure>':.
    //     0xc323c0: add             x1, PP, #0x31, lsl #12  ; [pp+0x31710] AnonymousClosure: (0x6850c4), in [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset (0x683954)
    //     0xc323c4: ldr             x1, [x1, #0x710]
    // 0xc323c8: r0 = AllocateClosure()
    //     0xc323c8: bl              #0xc5e00c  ; AllocateClosureStub
    // 0xc323cc: r16 = <Null?>
    //     0xc323cc: ldr             x16, [PP, #0xf48]  ; [pp+0xf48] TypeArguments: <Null?>
    // 0xc323d0: stp             x0, x16, [SP]
    // 0xc323d4: r0 = Future()
    //     0xc323d4: bl              #0x4de2fc  ; [dart:async] Future::Future
    // 0xc323d8: ldr             x0, [fp, #0x18]
    // 0xc323dc: ldr             x16, [fp, #0x20]
    // 0xc323e0: stp             x0, x16, [SP]
    // 0xc323e4: r0 = position=()
    //     0xc323e4: bl              #0x684cf8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::position=
    // 0xc323e8: ldr             x1, [fp, #0x18]
    // 0xc323ec: r0 = LoadClassIdInstr(r1)
    //     0xc323ec: ldur            x0, [x1, #-1]
    //     0xc323f0: ubfx            x0, x0, #0xc, #0x14
    // 0xc323f4: str             x1, [SP]
    // 0xc323f8: r0 = GDT[cid_x0 + -0xfef]()
    //     0xc323f8: sub             lr, x0, #0xfef
    //     0xc323fc: ldr             lr, [x21, lr, lsl #3]
    //     0xc32400: blr             lr
    // 0xc32404: ldr             x16, [fp, #0x20]
    // 0xc32408: ldr             lr, [fp, #0x18]
    // 0xc3240c: stp             lr, x16, [SP, #0x10]
    // 0xc32410: str             d0, [SP, #8]
    // 0xc32414: r16 = true
    //     0xc32414: add             x16, NULL, #0x20  ; true
    // 0xc32418: str             x16, [SP]
    // 0xc3241c: r0 = _updateOffset()
    //     0xc3241c: bl              #0x683954  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::_updateOffset
    // 0xc32420: r0 = Null
    //     0xc32420: mov             x0, NULL
    // 0xc32424: LeaveFrame
    //     0xc32424: mov             SP, fp
    //     0xc32428: ldp             fp, lr, [SP], #0x10
    // 0xc3242c: ret
    //     0xc3242c: ret             
    // 0xc32430: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc32430: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc32434: b               #0xc322ac
  }
}

// class id: 4804, size: 0x8c, field offset: 0x8c
class FooterNotifier extends IndicatorNotifier {

  get _ overExtent(/* No info */) {
    // ** addr: 0xc31fcc, size: 0xe0
    // 0xc31fcc: EnterFrame
    //     0xc31fcc: stp             fp, lr, [SP, #-0x10]!
    //     0xc31fd0: mov             fp, SP
    // 0xc31fd4: AllocStack(0x10)
    //     0xc31fd4: sub             SP, SP, #0x10
    // 0xc31fd8: CheckStackOverflow
    //     0xc31fd8: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xc31fdc: cmp             SP, x16
    //     0xc31fe0: b.ls            #0xc3209c
    // 0xc31fe4: ldr             x1, [fp, #0x10]
    // 0xc31fe8: LoadField: r0 = r1->field_23
    //     0xc31fe8: ldur            w0, [x1, #0x23]
    // 0xc31fec: DecompressPointer r0
    //     0xc31fec: add             x0, x0, HEAP, lsl #32
    // 0xc31ff0: LoadField: r2 = r0->field_37
    //     0xc31ff0: ldur            w2, [x0, #0x37]
    // 0xc31ff4: DecompressPointer r2
    //     0xc31ff4: add             x2, x2, HEAP, lsl #32
    // 0xc31ff8: cmp             w2, NULL
    // 0xc31ffc: b.eq            #0xc32084
    // 0xc32000: LoadField: r0 = r1->field_53
    //     0xc32000: ldur            w0, [x1, #0x53]
    // 0xc32004: DecompressPointer r0
    //     0xc32004: add             x0, x0, HEAP, lsl #32
    // 0xc32008: cmp             w0, NULL
    // 0xc3200c: b.eq            #0xc320a4
    // 0xc32010: r2 = LoadClassIdInstr(r0)
    //     0xc32010: ldur            x2, [x0, #-1]
    //     0xc32014: ubfx            x2, x2, #0xc, #0x14
    // 0xc32018: str             x0, [SP]
    // 0xc3201c: mov             x0, x2
    // 0xc32020: r0 = GDT[cid_x0 + -0xe6f]()
    //     0xc32020: sub             lr, x0, #0xe6f
    //     0xc32024: ldr             lr, [x21, lr, lsl #3]
    //     0xc32028: blr             lr
    // 0xc3202c: ldr             x1, [fp, #0x10]
    // 0xc32030: stur            d0, [fp, #-8]
    // 0xc32034: LoadField: r0 = r1->field_53
    //     0xc32034: ldur            w0, [x1, #0x53]
    // 0xc32038: DecompressPointer r0
    //     0xc32038: add             x0, x0, HEAP, lsl #32
    // 0xc3203c: cmp             w0, NULL
    // 0xc32040: b.eq            #0xc320a8
    // 0xc32044: r2 = LoadClassIdInstr(r0)
    //     0xc32044: ldur            x2, [x0, #-1]
    //     0xc32048: ubfx            x2, x2, #0xc, #0x14
    // 0xc3204c: str             x0, [SP]
    // 0xc32050: mov             x0, x2
    // 0xc32054: r0 = GDT[cid_x0 + -0x8a5]()
    //     0xc32054: sub             lr, x0, #0x8a5
    //     0xc32058: ldr             lr, [x21, lr, lsl #3]
    //     0xc3205c: blr             lr
    // 0xc32060: mov             v1.16b, v0.16b
    // 0xc32064: ldur            d0, [fp, #-8]
    // 0xc32068: fcmp            d0, d1
    // 0xc3206c: b.vs            #0xc32084
    // 0xc32070: b.gt            #0xc32084
    // 0xc32074: d0 = 0.000000
    //     0xc32074: eor             v0.16b, v0.16b, v0.16b
    // 0xc32078: LeaveFrame
    //     0xc32078: mov             SP, fp
    //     0xc3207c: ldp             fp, lr, [SP], #0x10
    // 0xc32080: ret
    //     0xc32080: ret             
    // 0xc32084: ldr             x16, [fp, #0x10]
    // 0xc32088: str             x16, [SP]
    // 0xc3208c: r0 = overExtent()
    //     0xc3208c: bl              #0xc320ac  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::overExtent
    // 0xc32090: LeaveFrame
    //     0xc32090: mov             SP, fp
    //     0xc32094: ldp             fp, lr, [SP], #0x10
    // 0xc32098: ret
    //     0xc32098: ret             
    // 0xc3209c: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xc3209c: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xc320a0: b               #0xc31fe4
    // 0xc320a4: r0 = NullCastErrorSharedWithoutFPURegs()
    //     0xc320a4: bl              #0xc5f430  ; NullCastErrorSharedWithoutFPURegsStub
    // 0xc320a8: r0 = NullCastErrorSharedWithFPURegs()
    //     0xc320a8: bl              #0xc5f47c  ; NullCastErrorSharedWithFPURegsStub
  }
}

// class id: 4805, size: 0x8c, field offset: 0x8c
class HeaderNotifier extends IndicatorNotifier {

  _ HeaderNotifier(/* No info */) {
    // ** addr: 0xa1d674, size: 0x60
    // 0xa1d674: EnterFrame
    //     0xa1d674: stp             fp, lr, [SP, #-0x10]!
    //     0xa1d678: mov             fp, SP
    // 0xa1d67c: AllocStack(0x38)
    //     0xa1d67c: sub             SP, SP, #0x38
    // 0xa1d680: CheckStackOverflow
    //     0xa1d680: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xa1d684: cmp             SP, x16
    //     0xa1d688: b.ls            #0xa1d6cc
    // 0xa1d68c: ldr             x16, [fp, #0x38]
    // 0xa1d690: ldr             lr, [fp, #0x30]
    // 0xa1d694: stp             lr, x16, [SP, #0x28]
    // 0xa1d698: ldr             x16, [fp, #0x28]
    // 0xa1d69c: ldr             lr, [fp, #0x20]
    // 0xa1d6a0: stp             lr, x16, [SP, #0x18]
    // 0xa1d6a4: ldr             x16, [fp, #0x18]
    // 0xa1d6a8: ldr             lr, [fp, #0x10]
    // 0xa1d6ac: stp             lr, x16, [SP, #8]
    // 0xa1d6b0: r16 = false
    //     0xa1d6b0: add             x16, NULL, #0x30  ; false
    // 0xa1d6b4: str             x16, [SP]
    // 0xa1d6b8: r0 = IndicatorNotifier()
    //     0xa1d6b8: bl              #0xa1d3c8  ; [package:easy_refresh/easy_refresh.dart] IndicatorNotifier::IndicatorNotifier
    // 0xa1d6bc: r0 = Null
    //     0xa1d6bc: mov             x0, NULL
    // 0xa1d6c0: LeaveFrame
    //     0xa1d6c0: mov             SP, fp
    //     0xa1d6c4: ldp             fp, lr, [SP], #0x10
    // 0xa1d6c8: ret
    //     0xa1d6c8: ret             
    // 0xa1d6cc: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xa1d6cc: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xa1d6d0: b               #0xa1d68c
  }
}

// class id: 6128, size: 0x14, field offset: 0x14
enum IndicatorPosition extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0xb213e8, size: 0x58
    // 0xb213e8: EnterFrame
    //     0xb213e8: stp             fp, lr, [SP, #-0x10]!
    //     0xb213ec: mov             fp, SP
    // 0xb213f0: AllocStack(0x8)
    //     0xb213f0: sub             SP, SP, #8
    // 0xb213f4: CheckStackOverflow
    //     0xb213f4: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb213f8: cmp             SP, x16
    //     0xb213fc: b.ls            #0xb21438
    // 0xb21400: r1 = Null
    //     0xb21400: mov             x1, NULL
    // 0xb21404: r2 = 4
    //     0xb21404: movz            x2, #0x4
    // 0xb21408: r0 = AllocateArray()
    //     0xb21408: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xb2140c: r17 = "IndicatorPosition."
    //     0xb2140c: ldr             x17, [PP, #0x7598]  ; [pp+0x7598] "IndicatorPosition."
    // 0xb21410: StoreField: r0->field_f = r17
    //     0xb21410: stur            w17, [x0, #0xf]
    // 0xb21414: ldr             x1, [fp, #0x10]
    // 0xb21418: LoadField: r2 = r1->field_f
    //     0xb21418: ldur            w2, [x1, #0xf]
    // 0xb2141c: DecompressPointer r2
    //     0xb2141c: add             x2, x2, HEAP, lsl #32
    // 0xb21420: StoreField: r0->field_13 = r2
    //     0xb21420: stur            w2, [x0, #0x13]
    // 0xb21424: str             x0, [SP]
    // 0xb21428: r0 = _interpolate()
    //     0xb21428: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xb2142c: LeaveFrame
    //     0xb2142c: mov             SP, fp
    //     0xb21430: ldp             fp, lr, [SP], #0x10
    // 0xb21434: ret
    //     0xb21434: ret             
    // 0xb21438: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb21438: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb2143c: b               #0xb21400
  }
}

// class id: 6129, size: 0x14, field offset: 0x14
enum IndicatorResult extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0xb2138c, size: 0x5c
    // 0xb2138c: EnterFrame
    //     0xb2138c: stp             fp, lr, [SP, #-0x10]!
    //     0xb21390: mov             fp, SP
    // 0xb21394: AllocStack(0x8)
    //     0xb21394: sub             SP, SP, #8
    // 0xb21398: CheckStackOverflow
    //     0xb21398: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb2139c: cmp             SP, x16
    //     0xb213a0: b.ls            #0xb213e0
    // 0xb213a4: r1 = Null
    //     0xb213a4: mov             x1, NULL
    // 0xb213a8: r2 = 4
    //     0xb213a8: movz            x2, #0x4
    // 0xb213ac: r0 = AllocateArray()
    //     0xb213ac: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xb213b0: r17 = "IndicatorResult."
    //     0xb213b0: add             x17, PP, #0x22, lsl #12  ; [pp+0x22420] "IndicatorResult."
    //     0xb213b4: ldr             x17, [x17, #0x420]
    // 0xb213b8: StoreField: r0->field_f = r17
    //     0xb213b8: stur            w17, [x0, #0xf]
    // 0xb213bc: ldr             x1, [fp, #0x10]
    // 0xb213c0: LoadField: r2 = r1->field_f
    //     0xb213c0: ldur            w2, [x1, #0xf]
    // 0xb213c4: DecompressPointer r2
    //     0xb213c4: add             x2, x2, HEAP, lsl #32
    // 0xb213c8: StoreField: r0->field_13 = r2
    //     0xb213c8: stur            w2, [x0, #0x13]
    // 0xb213cc: str             x0, [SP]
    // 0xb213d0: r0 = _interpolate()
    //     0xb213d0: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xb213d4: LeaveFrame
    //     0xb213d4: mov             SP, fp
    //     0xb213d8: ldp             fp, lr, [SP], #0x10
    // 0xb213dc: ret
    //     0xb213dc: ret             
    // 0xb213e0: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb213e0: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb213e4: b               #0xb213a4
  }
}

// class id: 6130, size: 0x14, field offset: 0x14
enum IndicatorMode extends _Enum {

  _Mint field_8;
  _OneByteString field_10;

  _ _enumToString(/* No info */) {
    // ** addr: 0xb21330, size: 0x5c
    // 0xb21330: EnterFrame
    //     0xb21330: stp             fp, lr, [SP, #-0x10]!
    //     0xb21334: mov             fp, SP
    // 0xb21338: AllocStack(0x8)
    //     0xb21338: sub             SP, SP, #8
    // 0xb2133c: CheckStackOverflow
    //     0xb2133c: ldr             x16, [THR, #0x38]  ; THR::stack_limit
    //     0xb21340: cmp             SP, x16
    //     0xb21344: b.ls            #0xb21384
    // 0xb21348: r1 = Null
    //     0xb21348: mov             x1, NULL
    // 0xb2134c: r2 = 4
    //     0xb2134c: movz            x2, #0x4
    // 0xb21350: r0 = AllocateArray()
    //     0xb21350: bl              #0xc5eccc  ; AllocateArrayStub
    // 0xb21354: r17 = "IndicatorMode."
    //     0xb21354: add             x17, PP, #0x22, lsl #12  ; [pp+0x22428] "IndicatorMode."
    //     0xb21358: ldr             x17, [x17, #0x428]
    // 0xb2135c: StoreField: r0->field_f = r17
    //     0xb2135c: stur            w17, [x0, #0xf]
    // 0xb21360: ldr             x1, [fp, #0x10]
    // 0xb21364: LoadField: r2 = r1->field_f
    //     0xb21364: ldur            w2, [x1, #0xf]
    // 0xb21368: DecompressPointer r2
    //     0xb21368: add             x2, x2, HEAP, lsl #32
    // 0xb2136c: StoreField: r0->field_13 = r2
    //     0xb2136c: stur            w2, [x0, #0x13]
    // 0xb21370: str             x0, [SP]
    // 0xb21374: r0 = _interpolate()
    //     0xb21374: bl              #0x4c8d68  ; [dart:core] _StringBase::_interpolate
    // 0xb21378: LeaveFrame
    //     0xb21378: mov             SP, fp
    //     0xb2137c: ldp             fp, lr, [SP], #0x10
    // 0xb21380: ret
    //     0xb21380: ret             
    // 0xb21384: r0 = StackOverflowSharedWithoutFPURegs()
    //     0xb21384: bl              #0xc5ee88  ; StackOverflowSharedWithoutFPURegsStub
    // 0xb21388: b               #0xb21348
  }
}
