import base64
import math

from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


def sub_14EEEC(input_str: str, chunk_size: int) -> str:
    str_len = len(input_str)
    if str_len < 2 * chunk_size:
        return input_str
    num_full_chunks = math.ceil(str_len / chunk_size)
    result = ''
    for i in range(num_full_chunks):
        if i == num_full_chunks - 1:
            # Last segment, take from i * a3 to end of the string
            chunk = input_str[i * chunk_size:]
        else:
            # Normal segment
            chunk = input_str[i * chunk_size:(i + 1) * chunk_size]

        result += chunk[::-1]  # 反转

    return result


def decrypt_aes_cbc(encrypted_data, key_str):
    key_bytes = key_str.encode('utf-8')
    cipher = AES.new(key_bytes, AES.MODE_CBC, iv=b'\x00' * 16)
    decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data))
    return unpad(decrypted_data, AES.block_size)


# 测试用例
if __name__ == "__main__":
    s = "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"
    s = s[len(s) // 2:] + s[:len(s) // 2]
    res = sub_14EEEC(s, 58)
    data = decrypt_aes_cbc(res, 'ec75fab78c0baf00dc6e1f9f273b9dfe').decode()
    print(data)
