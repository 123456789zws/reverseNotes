Java层：
    System.loadLibrary("foo")
        ↓
    Runtime.loadLibrary("foo", classLoader)
        ↓
JNI层：
    JNI_NativeLoad(env, "libfoo.so", classLoader, library_path) // 拼接lib和尾部.so
        ↓
ART层：
    NativeLoader::LoadLibrary()
        1. NativeLoader::FindLibrary()  // 定位库文件路径；如果之前没拼接库文件名字，顺便拼接lib和尾部.so
                ↓
        2. 读取so文件并构造好linker需要的sinfo参数
                ↓
        3. android_dlopen_ext()  // 调用 bionic/linker 动态链接器加载库
            (1) __loader_android_dlopen_ext                 // 代码在bionic/linker/dlfcn.cpp中
                    ↓
            (2) dlopen_ext                                  // 代码在bionic/linker/dlfcn.cpp中
                    ↓
            (3) do_dlopen                                   // 代码在bionic/linker/linker.cpp中
                1. find_library // 拿到sinfo
                2. call_constructors() // 全局构造函数: 动态链接器执行初始化
                        ├─ .init段函数（如果存在） 
                        ├─ .init_array段函数（如果存在              // 包含用户自定义的初始化函数
                        └─ c++全局构造函数                         // 执行全局构造函数
                3. 返回handle

        4. jni_onload检查：上一步拿到了handle，然后检查是否存在jni_onload，有就调用
            (1) 找jni_onload: dlsym(handle, "JNI_OnLoad")  // 查找JNI_OnLoad符号
            (2) 调用jni_onload: JNI_OnLoad(vm, reserved)
            (3) 检查jni版本是否兼容

        返回用dlopen拿到的SO句柄

    后续可通过`dlsym`获取 SO 中的符号地址并调用